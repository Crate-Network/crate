// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: UnixFS.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct DataMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: DataMessage.DataType {
    get {return _type ?? .raw}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var data: Data {
    get {return _data ?? Data()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var filesize: UInt64 {
    get {return _filesize ?? 0}
    set {_filesize = newValue}
  }
  /// Returns true if `filesize` has been explicitly set.
  var hasFilesize: Bool {return self._filesize != nil}
  /// Clears the value of `filesize`. Subsequent reads from it will return its default value.
  mutating func clearFilesize() {self._filesize = nil}

  var blocksizes: [UInt64] = []

  var hashType: UInt64 {
    get {return _hashType ?? 0}
    set {_hashType = newValue}
  }
  /// Returns true if `hashType` has been explicitly set.
  var hasHashType: Bool {return self._hashType != nil}
  /// Clears the value of `hashType`. Subsequent reads from it will return its default value.
  mutating func clearHashType() {self._hashType = nil}

  var fanout: UInt64 {
    get {return _fanout ?? 0}
    set {_fanout = newValue}
  }
  /// Returns true if `fanout` has been explicitly set.
  var hasFanout: Bool {return self._fanout != nil}
  /// Clears the value of `fanout`. Subsequent reads from it will return its default value.
  mutating func clearFanout() {self._fanout = nil}

  var mode: UInt32 {
    get {return _mode ?? 0}
    set {_mode = newValue}
  }
  /// Returns true if `mode` has been explicitly set.
  var hasMode: Bool {return self._mode != nil}
  /// Clears the value of `mode`. Subsequent reads from it will return its default value.
  mutating func clearMode() {self._mode = nil}

  var mtime: UnixTime {
    get {return _mtime ?? UnixTime()}
    set {_mtime = newValue}
  }
  /// Returns true if `mtime` has been explicitly set.
  var hasMtime: Bool {return self._mtime != nil}
  /// Clears the value of `mtime`. Subsequent reads from it will return its default value.
  mutating func clearMtime() {self._mtime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum DataType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case raw // = 0
    case directory // = 1
    case file // = 2
    case metadata // = 3
    case symlink // = 4
    case hamtshard // = 5

    init() {
      self = .raw
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .raw
      case 1: self = .directory
      case 2: self = .file
      case 3: self = .metadata
      case 4: self = .symlink
      case 5: self = .hamtshard
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .raw: return 0
      case .directory: return 1
      case .file: return 2
      case .metadata: return 3
      case .symlink: return 4
      case .hamtshard: return 5
      }
    }

  }

  init() {}

  fileprivate var _type: DataMessage.DataType? = nil
  fileprivate var _data: Data? = nil
  fileprivate var _filesize: UInt64? = nil
  fileprivate var _hashType: UInt64? = nil
  fileprivate var _fanout: UInt64? = nil
  fileprivate var _mode: UInt32? = nil
  fileprivate var _mtime: UnixTime? = nil
}

#if swift(>=4.2)

extension DataMessage.DataType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct Metadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mimeType: String {
    get {return _mimeType ?? String()}
    set {_mimeType = newValue}
  }
  /// Returns true if `mimeType` has been explicitly set.
  var hasMimeType: Bool {return self._mimeType != nil}
  /// Clears the value of `mimeType`. Subsequent reads from it will return its default value.
  mutating func clearMimeType() {self._mimeType = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mimeType: String? = nil
}

struct UnixTime {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var seconds: Int64 {
    get {return _seconds ?? 0}
    set {_seconds = newValue}
  }
  /// Returns true if `seconds` has been explicitly set.
  var hasSeconds: Bool {return self._seconds != nil}
  /// Clears the value of `seconds`. Subsequent reads from it will return its default value.
  mutating func clearSeconds() {self._seconds = nil}

  var fractionalNanoseconds: UInt32 {
    get {return _fractionalNanoseconds ?? 0}
    set {_fractionalNanoseconds = newValue}
  }
  /// Returns true if `fractionalNanoseconds` has been explicitly set.
  var hasFractionalNanoseconds: Bool {return self._fractionalNanoseconds != nil}
  /// Clears the value of `fractionalNanoseconds`. Subsequent reads from it will return its default value.
  mutating func clearFractionalNanoseconds() {self._fractionalNanoseconds = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _seconds: Int64? = nil
  fileprivate var _fractionalNanoseconds: UInt32? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension DataMessage: @unchecked Sendable {}
extension DataMessage.DataType: @unchecked Sendable {}
extension Metadata: @unchecked Sendable {}
extension UnixTime: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension DataMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Data"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Type"),
    2: .same(proto: "Data"),
    3: .same(proto: "filesize"),
    4: .same(proto: "blocksizes"),
    5: .same(proto: "hashType"),
    6: .same(proto: "fanout"),
    7: .same(proto: "mode"),
    8: .same(proto: "mtime"),
  ]

  public var isInitialized: Bool {
    if self._type == nil {return false}
    if let v = self._mtime, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._data) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self._filesize) }()
      case 4: try { try decoder.decodeRepeatedUInt64Field(value: &self.blocksizes) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self._hashType) }()
      case 6: try { try decoder.decodeSingularUInt64Field(value: &self._fanout) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._mode) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._mtime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._data {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._filesize {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
    } }()
    if !self.blocksizes.isEmpty {
      try visitor.visitRepeatedUInt64Field(value: self.blocksizes, fieldNumber: 4)
    }
    try { if let v = self._hashType {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._fanout {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._mode {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._mtime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DataMessage, rhs: DataMessage) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._data != rhs._data {return false}
    if lhs._filesize != rhs._filesize {return false}
    if lhs.blocksizes != rhs.blocksizes {return false}
    if lhs._hashType != rhs._hashType {return false}
    if lhs._fanout != rhs._fanout {return false}
    if lhs._mode != rhs._mode {return false}
    if lhs._mtime != rhs._mtime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DataMessage.DataType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Raw"),
    1: .same(proto: "Directory"),
    2: .same(proto: "File"),
    3: .same(proto: "Metadata"),
    4: .same(proto: "Symlink"),
    5: .same(proto: "HAMTShard"),
  ]
}

extension Metadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Metadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "MimeType"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._mimeType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._mimeType {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Metadata, rhs: Metadata) -> Bool {
    if lhs._mimeType != rhs._mimeType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension UnixTime: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "UnixTime"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Seconds"),
    2: .same(proto: "FractionalNanoseconds"),
  ]

  public var isInitialized: Bool {
    if self._seconds == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self._seconds) }()
      case 2: try { try decoder.decodeSingularFixed32Field(value: &self._fractionalNanoseconds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._seconds {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._fractionalNanoseconds {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: UnixTime, rhs: UnixTime) -> Bool {
    if lhs._seconds != rhs._seconds {return false}
    if lhs._fractionalNanoseconds != rhs._fractionalNanoseconds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
