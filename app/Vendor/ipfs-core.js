var ipfs = (function (exports) {
	'use strict';

	function _mergeNamespaces(n, m) {
		m.forEach(function (e) {
			e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
				if (k !== 'default' && !(k in n)) {
					var d = Object.getOwnPropertyDescriptor(e, k);
					Object.defineProperty(n, k, d.get ? d : {
						enumerable: true,
						get: function () { return e[k]; }
					});
				}
			});
		});
		return Object.freeze(n);
	}

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getAugmentedNamespace(n) {
		if (n.__esModule) return n;
		var a = Object.defineProperty({}, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	function commonjsRequire (path) {
		throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
	}

	var isPlainObj = value => {
		if (Object.prototype.toString.call(value) !== '[object Object]') {
			return false;
		}

		const prototype = Object.getPrototypeOf(value);
		return prototype === null || prototype === Object.prototype;
	};

	const isOptionObject = isPlainObj;

	const {hasOwnProperty: hasOwnProperty$2} = Object.prototype;
	const {propertyIsEnumerable} = Object;
	const defineProperty = (object, name, value) => Object.defineProperty(object, name, {
		value,
		writable: true,
		enumerable: true,
		configurable: true
	});

	const globalThis$1 = commonjsGlobal;
	const defaultMergeOptions = {
		concatArrays: false,
		ignoreUndefined: false
	};

	const getEnumerableOwnPropertyKeys = value => {
		const keys = [];

		for (const key in value) {
			if (hasOwnProperty$2.call(value, key)) {
				keys.push(key);
			}
		}

		/* istanbul ignore else  */
		if (Object.getOwnPropertySymbols) {
			const symbols = Object.getOwnPropertySymbols(value);

			for (const symbol of symbols) {
				if (propertyIsEnumerable.call(value, symbol)) {
					keys.push(symbol);
				}
			}
		}

		return keys;
	};

	function clone$1(value) {
		if (Array.isArray(value)) {
			return cloneArray(value);
		}

		if (isOptionObject(value)) {
			return cloneOptionObject(value);
		}

		return value;
	}

	function cloneArray(array) {
		const result = array.slice(0, 0);

		getEnumerableOwnPropertyKeys(array).forEach(key => {
			defineProperty(result, key, clone$1(array[key]));
		});

		return result;
	}

	function cloneOptionObject(object) {
		const result = Object.getPrototypeOf(object) === null ? Object.create(null) : {};

		getEnumerableOwnPropertyKeys(object).forEach(key => {
			defineProperty(result, key, clone$1(object[key]));
		});

		return result;
	}

	/**
	 * @param {*} merged already cloned
	 * @param {*} source something to merge
	 * @param {string[]} keys keys to merge
	 * @param {Object} config Config Object
	 * @returns {*} cloned Object
	 */
	const mergeKeys = (merged, source, keys, config) => {
		keys.forEach(key => {
			if (typeof source[key] === 'undefined' && config.ignoreUndefined) {
				return;
			}

			// Do not recurse into prototype chain of merged
			if (key in merged && merged[key] !== Object.getPrototypeOf(merged)) {
				defineProperty(merged, key, merge$7(merged[key], source[key], config));
			} else {
				defineProperty(merged, key, clone$1(source[key]));
			}
		});

		return merged;
	};

	/**
	 * @param {*} merged already cloned
	 * @param {*} source something to merge
	 * @param {Object} config Config Object
	 * @returns {*} cloned Object
	 *
	 * see [Array.prototype.concat ( ...arguments )](http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.concat)
	 */
	const concatArrays = (merged, source, config) => {
		let result = merged.slice(0, 0);
		let resultIndex = 0;

		[merged, source].forEach(array => {
			const indices = [];

			// `result.concat(array)` with cloning
			for (let k = 0; k < array.length; k++) {
				if (!hasOwnProperty$2.call(array, k)) {
					continue;
				}

				indices.push(String(k));

				if (array === merged) {
					// Already cloned
					defineProperty(result, resultIndex++, array[k]);
				} else {
					defineProperty(result, resultIndex++, clone$1(array[k]));
				}
			}

			// Merge non-index keys
			result = mergeKeys(result, array, getEnumerableOwnPropertyKeys(array).filter(key => !indices.includes(key)), config);
		});

		return result;
	};

	/**
	 * @param {*} merged already cloned
	 * @param {*} source something to merge
	 * @param {Object} config Config Object
	 * @returns {*} cloned Object
	 */
	function merge$7(merged, source, config) {
		if (config.concatArrays && Array.isArray(merged) && Array.isArray(source)) {
			return concatArrays(merged, source, config);
		}

		if (!isOptionObject(source) || !isOptionObject(merged)) {
			return clone$1(source);
		}

		return mergeKeys(merged, source, getEnumerableOwnPropertyKeys(source), config);
	}

	var mergeOptions$k = function (...options) {
		const config = merge$7(clone$1(defaultMergeOptions), (this !== globalThis$1 && this) || {}, defaultMergeOptions);
		let merged = {_: {}};

		for (const option of options) {
			if (option === undefined) {
				continue;
			}

			if (!isOptionObject(option)) {
				throw new TypeError('`' + option + '` is not an Option Object');
			}

			merged = merge$7(merged, {_: option}, config);
		}

		return merged._;
	};

	var global$1 = (typeof global !== "undefined" ? global :
	  typeof self !== "undefined" ? self :
	  typeof window !== "undefined" ? window : {});

	// shim for using process in browser
	// based off https://github.com/defunctzombie/node-process/blob/master/browser.js

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	var cachedSetTimeout = defaultSetTimout;
	var cachedClearTimeout = defaultClearTimeout;
	if (typeof global$1.setTimeout === 'function') {
	    cachedSetTimeout = setTimeout;
	}
	if (typeof global$1.clearTimeout === 'function') {
	    cachedClearTimeout = clearTimeout;
	}

	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	function nextTick$2(fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	}
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	var title = 'browser';
	var platform$1 = 'browser';
	var browser$b = true;
	var env$2 = {};
	var argv = [];
	var version$3 = ''; // empty string to avoid regexp issues
	var versions = {};
	var release$1 = {};
	var config$3 = {};

	function noop$7() {}

	var on$2 = noop$7;
	var addListener = noop$7;
	var once$2 = noop$7;
	var off = noop$7;
	var removeListener = noop$7;
	var removeAllListeners = noop$7;
	var emit = noop$7;

	function binding(name) {
	    throw new Error('process.binding is not supported');
	}

	function cwd () { return '/' }
	function chdir (dir) {
	    throw new Error('process.chdir is not supported');
	}function umask() { return 0; }

	// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
	var performance = global$1.performance || {};
	var performanceNow =
	  performance.now        ||
	  performance.mozNow     ||
	  performance.msNow      ||
	  performance.oNow       ||
	  performance.webkitNow  ||
	  function(){ return (new Date()).getTime() };

	// generate timestamp or delta
	// see http://nodejs.org/api/process.html#process_process_hrtime
	function hrtime(previousTimestamp){
	  var clocktime = performanceNow.call(performance)*1e-3;
	  var seconds = Math.floor(clocktime);
	  var nanoseconds = Math.floor((clocktime%1)*1e9);
	  if (previousTimestamp) {
	    seconds = seconds - previousTimestamp[0];
	    nanoseconds = nanoseconds - previousTimestamp[1];
	    if (nanoseconds<0) {
	      seconds--;
	      nanoseconds += 1e9;
	    }
	  }
	  return [seconds,nanoseconds]
	}

	var startTime = new Date();
	function uptime$1() {
	  var currentTime = new Date();
	  var dif = currentTime - startTime;
	  return dif / 1000;
	}

	var browser$1$1 = {
	  nextTick: nextTick$2,
	  title: title,
	  browser: browser$b,
	  env: env$2,
	  argv: argv,
	  version: version$3,
	  versions: versions,
	  on: on$2,
	  addListener: addListener,
	  once: once$2,
	  off: off,
	  removeListener: removeListener,
	  removeAllListeners: removeAllListeners,
	  emit: emit,
	  binding: binding,
	  cwd: cwd,
	  chdir: chdir,
	  umask: umask,
	  hrtime: hrtime,
	  platform: platform$1,
	  release: release$1,
	  config: config$3,
	  uptime: uptime$1
	};

	var process$3 = browser$1$1;

	// https://github.com/electron/electron/issues/2288
	function isElectron$2() {
	    // Renderer process
	    if (typeof window !== 'undefined' && typeof window.process === 'object' && window.process.type === 'renderer') {
	        return true;
	    }

	    // Main process
	    if (typeof process$3 !== 'undefined' && typeof process$3.versions === 'object' && !!process$3.versions.electron) {
	        return true;
	    }

	    // Detect the user agent when the `nodeIntegration` option is set to false
	    if (typeof navigator === 'object' && typeof navigator.userAgent === 'string' && navigator.userAgent.indexOf('Electron') >= 0) {
	        return true;
	    }

	    return false;
	}

	var isElectron_1 = isElectron$2;

	const isElectron$1 = isElectron_1;

	const IS_ENV_WITH_DOM$1 = typeof window === 'object' && typeof document === 'object' && document.nodeType === 9;
	// @ts-ignore
	const IS_ELECTRON$1 = isElectron$1();
	const IS_BROWSER$1 = IS_ENV_WITH_DOM$1 && !IS_ELECTRON$1;
	const IS_ELECTRON_MAIN$1 = IS_ELECTRON$1 && !IS_ENV_WITH_DOM$1;
	const IS_ELECTRON_RENDERER$1 = IS_ELECTRON$1 && IS_ENV_WITH_DOM$1;
	const IS_NODE$1 = typeof commonjsRequire === 'function' && typeof process$3 !== 'undefined' && typeof process$3.release !== 'undefined' && process$3.release.name === 'node' && !IS_ELECTRON$1;
	// @ts-ignore - we either ignore worker scope or dom scope
	const IS_WEBWORKER$1 = typeof importScripts === 'function' && typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;
	const IS_TEST$1 = typeof process$3 !== 'undefined' && typeof process$3.env !== 'undefined' && "development" === 'test';
	const IS_REACT_NATIVE = typeof navigator !== 'undefined' && navigator.product === 'ReactNative';

	var env$1 = {
	  isTest: IS_TEST$1,
	  isElectron: IS_ELECTRON$1,
	  isElectronMain: IS_ELECTRON_MAIN$1,
	  isElectronRenderer: IS_ELECTRON_RENDERER$1,
	  isNode: IS_NODE$1,
	  /**
	   * Detects browser main thread  **NOT** web worker or service worker
	   */
	  isBrowser: IS_BROWSER$1,
	  isWebWorker: IS_WEBWORKER$1,
	  isEnvWithDom: IS_ENV_WITH_DOM$1,
	  isReactNative: IS_REACT_NATIVE
	};

	var browser$a = {exports: {}};

	/**
	 * Helpers.
	 */

	var s$1 = 1000;
	var m = s$1 * 60;
	var h = m * 60;
	var d = h * 24;
	var w = d * 7;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} [options]
	 * @throws {Error} throw an error if val is not a non-empty string or a number
	 * @return {String|Number}
	 * @api public
	 */

	var ms = function(val, options) {
	  options = options || {};
	  var type = typeof val;
	  if (type === 'string' && val.length > 0) {
	    return parse$2(val);
	  } else if (type === 'number' && isFinite(val)) {
	    return options.long ? fmtLong(val) : fmtShort(val);
	  }
	  throw new Error(
	    'val is not a non-empty string or a valid number. val=' +
	      JSON.stringify(val)
	  );
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse$2(str) {
	  str = String(str);
	  if (str.length > 100) {
	    return;
	  }
	  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
	    str
	  );
	  if (!match) {
	    return;
	  }
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'weeks':
	    case 'week':
	    case 'w':
	      return n * w;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s$1;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	    default:
	      return undefined;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtShort(ms) {
	  var msAbs = Math.abs(ms);
	  if (msAbs >= d) {
	    return Math.round(ms / d) + 'd';
	  }
	  if (msAbs >= h) {
	    return Math.round(ms / h) + 'h';
	  }
	  if (msAbs >= m) {
	    return Math.round(ms / m) + 'm';
	  }
	  if (msAbs >= s$1) {
	    return Math.round(ms / s$1) + 's';
	  }
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtLong(ms) {
	  var msAbs = Math.abs(ms);
	  if (msAbs >= d) {
	    return plural(ms, msAbs, d, 'day');
	  }
	  if (msAbs >= h) {
	    return plural(ms, msAbs, h, 'hour');
	  }
	  if (msAbs >= m) {
	    return plural(ms, msAbs, m, 'minute');
	  }
	  if (msAbs >= s$1) {
	    return plural(ms, msAbs, s$1, 'second');
	  }
	  return ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, msAbs, n, name) {
	  var isPlural = msAbs >= n * 1.5;
	  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
	}

	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 */

	function setup(env) {
		createDebug.debug = createDebug;
		createDebug.default = createDebug;
		createDebug.coerce = coerce;
		createDebug.disable = disable;
		createDebug.enable = enable;
		createDebug.enabled = enabled;
		createDebug.humanize = ms;
		createDebug.destroy = destroy;

		Object.keys(env).forEach(key => {
			createDebug[key] = env[key];
		});

		/**
		* The currently active debug mode names, and names to skip.
		*/

		createDebug.names = [];
		createDebug.skips = [];

		/**
		* Map of special "%n" handling functions, for the debug "format" argument.
		*
		* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
		*/
		createDebug.formatters = {};

		/**
		* Selects a color for a debug namespace
		* @param {String} namespace The namespace string for the debug instance to be colored
		* @return {Number|String} An ANSI color code for the given namespace
		* @api private
		*/
		function selectColor(namespace) {
			let hash = 0;

			for (let i = 0; i < namespace.length; i++) {
				hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
				hash |= 0; // Convert to 32bit integer
			}

			return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
		}
		createDebug.selectColor = selectColor;

		/**
		* Create a debugger with the given `namespace`.
		*
		* @param {String} namespace
		* @return {Function}
		* @api public
		*/
		function createDebug(namespace) {
			let prevTime;
			let enableOverride = null;
			let namespacesCache;
			let enabledCache;

			function debug(...args) {
				// Disabled?
				if (!debug.enabled) {
					return;
				}

				const self = debug;

				// Set `diff` timestamp
				const curr = Number(new Date());
				const ms = curr - (prevTime || curr);
				self.diff = ms;
				self.prev = prevTime;
				self.curr = curr;
				prevTime = curr;

				args[0] = createDebug.coerce(args[0]);

				if (typeof args[0] !== 'string') {
					// Anything else let's inspect with %O
					args.unshift('%O');
				}

				// Apply any `formatters` transformations
				let index = 0;
				args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
					// If we encounter an escaped % then don't increase the array index
					if (match === '%%') {
						return '%';
					}
					index++;
					const formatter = createDebug.formatters[format];
					if (typeof formatter === 'function') {
						const val = args[index];
						match = formatter.call(self, val);

						// Now we need to remove `args[index]` since it's inlined in the `format`
						args.splice(index, 1);
						index--;
					}
					return match;
				});

				// Apply env-specific formatting (colors, etc.)
				createDebug.formatArgs.call(self, args);

				const logFn = self.log || createDebug.log;
				logFn.apply(self, args);
			}

			debug.namespace = namespace;
			debug.useColors = createDebug.useColors();
			debug.color = createDebug.selectColor(namespace);
			debug.extend = extend;
			debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

			Object.defineProperty(debug, 'enabled', {
				enumerable: true,
				configurable: false,
				get: () => {
					if (enableOverride !== null) {
						return enableOverride;
					}
					if (namespacesCache !== createDebug.namespaces) {
						namespacesCache = createDebug.namespaces;
						enabledCache = createDebug.enabled(namespace);
					}

					return enabledCache;
				},
				set: v => {
					enableOverride = v;
				}
			});

			// Env-specific initialization logic for debug instances
			if (typeof createDebug.init === 'function') {
				createDebug.init(debug);
			}

			return debug;
		}

		function extend(namespace, delimiter) {
			const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
			newDebug.log = this.log;
			return newDebug;
		}

		/**
		* Enables a debug mode by namespaces. This can include modes
		* separated by a colon and wildcards.
		*
		* @param {String} namespaces
		* @api public
		*/
		function enable(namespaces) {
			createDebug.save(namespaces);
			createDebug.namespaces = namespaces;

			createDebug.names = [];
			createDebug.skips = [];

			let i;
			const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
			const len = split.length;

			for (i = 0; i < len; i++) {
				if (!split[i]) {
					// ignore empty strings
					continue;
				}

				namespaces = split[i].replace(/\*/g, '.*?');

				if (namespaces[0] === '-') {
					createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
				} else {
					createDebug.names.push(new RegExp('^' + namespaces + '$'));
				}
			}
		}

		/**
		* Disable debug output.
		*
		* @return {String} namespaces
		* @api public
		*/
		function disable() {
			const namespaces = [
				...createDebug.names.map(toNamespace),
				...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
			].join(',');
			createDebug.enable('');
			return namespaces;
		}

		/**
		* Returns true if the given mode name is enabled, false otherwise.
		*
		* @param {String} name
		* @return {Boolean}
		* @api public
		*/
		function enabled(name) {
			if (name[name.length - 1] === '*') {
				return true;
			}

			let i;
			let len;

			for (i = 0, len = createDebug.skips.length; i < len; i++) {
				if (createDebug.skips[i].test(name)) {
					return false;
				}
			}

			for (i = 0, len = createDebug.names.length; i < len; i++) {
				if (createDebug.names[i].test(name)) {
					return true;
				}
			}

			return false;
		}

		/**
		* Convert regexp to namespace
		*
		* @param {RegExp} regxep
		* @return {String} namespace
		* @api private
		*/
		function toNamespace(regexp) {
			return regexp.toString()
				.substring(2, regexp.toString().length - 2)
				.replace(/\.\*\?$/, '*');
		}

		/**
		* Coerce `val`.
		*
		* @param {Mixed} val
		* @return {Mixed}
		* @api private
		*/
		function coerce(val) {
			if (val instanceof Error) {
				return val.stack || val.message;
			}
			return val;
		}

		/**
		* XXX DO NOT USE. This is a temporary stub function.
		* XXX It WILL be removed in the next major release.
		*/
		function destroy() {
		}

		createDebug.enable(createDebug.load());

		return createDebug;
	}

	var common$6 = setup;

	(function (module, exports) {
	/**
	 * This is the web browser implementation of `debug()`.
	 */

	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = localstorage();
	exports.destroy = (() => {

		return () => {
		};
	})();

	/**
	 * Colors.
	 */

	exports.colors = [
		'#0000CC',
		'#0000FF',
		'#0033CC',
		'#0033FF',
		'#0066CC',
		'#0066FF',
		'#0099CC',
		'#0099FF',
		'#00CC00',
		'#00CC33',
		'#00CC66',
		'#00CC99',
		'#00CCCC',
		'#00CCFF',
		'#3300CC',
		'#3300FF',
		'#3333CC',
		'#3333FF',
		'#3366CC',
		'#3366FF',
		'#3399CC',
		'#3399FF',
		'#33CC00',
		'#33CC33',
		'#33CC66',
		'#33CC99',
		'#33CCCC',
		'#33CCFF',
		'#6600CC',
		'#6600FF',
		'#6633CC',
		'#6633FF',
		'#66CC00',
		'#66CC33',
		'#9900CC',
		'#9900FF',
		'#9933CC',
		'#9933FF',
		'#99CC00',
		'#99CC33',
		'#CC0000',
		'#CC0033',
		'#CC0066',
		'#CC0099',
		'#CC00CC',
		'#CC00FF',
		'#CC3300',
		'#CC3333',
		'#CC3366',
		'#CC3399',
		'#CC33CC',
		'#CC33FF',
		'#CC6600',
		'#CC6633',
		'#CC9900',
		'#CC9933',
		'#CCCC00',
		'#CCCC33',
		'#FF0000',
		'#FF0033',
		'#FF0066',
		'#FF0099',
		'#FF00CC',
		'#FF00FF',
		'#FF3300',
		'#FF3333',
		'#FF3366',
		'#FF3399',
		'#FF33CC',
		'#FF33FF',
		'#FF6600',
		'#FF6633',
		'#FF9900',
		'#FF9933',
		'#FFCC00',
		'#FFCC33'
	];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	// eslint-disable-next-line complexity
	function useColors() {
		// NB: In an Electron preload script, document will be defined but not fully
		// initialized. Since we know we're in Chrome, we'll just detect this case
		// explicitly
		if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
			return true;
		}

		// Internet Explorer and Edge do not support colors.
		if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
			return false;
		}

		// Is webkit? http://stackoverflow.com/a/16459606/376773
		// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
		return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
			// Is firebug? http://stackoverflow.com/a/398120/376773
			(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
			// Is firefox >= v31?
			// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
			(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
			// Double check webkit in userAgent just in case we are in a worker
			(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
	}

	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs(args) {
		args[0] = (this.useColors ? '%c' : '') +
			this.namespace +
			(this.useColors ? ' %c' : ' ') +
			args[0] +
			(this.useColors ? '%c ' : ' ') +
			'+' + module.exports.humanize(this.diff);

		if (!this.useColors) {
			return;
		}

		const c = 'color: ' + this.color;
		args.splice(1, 0, c, 'color: inherit');

		// The final "%c" is somewhat tricky, because there could be other
		// arguments passed either before or after the %c, so we need to
		// figure out the correct index to insert the CSS into
		let index = 0;
		let lastC = 0;
		args[0].replace(/%[a-zA-Z%]/g, match => {
			if (match === '%%') {
				return;
			}
			index++;
			if (match === '%c') {
				// We only are interested in the *last* %c
				// (the user may have provided their own)
				lastC = index;
			}
		});

		args.splice(lastC, 0, c);
	}

	/**
	 * Invokes `console.debug()` when available.
	 * No-op when `console.debug` is not a "function".
	 * If `console.debug` is not available, falls back
	 * to `console.log`.
	 *
	 * @api public
	 */
	exports.log = console.debug || console.log || (() => {});

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */
	function save(namespaces) {
		try {
			if (namespaces) {
				exports.storage.setItem('debug', namespaces);
			} else {
				exports.storage.removeItem('debug');
			}
		} catch (error) {
			// Swallow
			// XXX (@Qix-) should we be logging these?
		}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */
	function load() {
		let r;
		try {
			r = exports.storage.getItem('debug');
		} catch (error) {
			// Swallow
			// XXX (@Qix-) should we be logging these?
		}

		// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
		if (!r && typeof process$3 !== 'undefined' && 'env' in process$3) {
			r = process$3.env.DEBUG;
		}

		return r;
	}

	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */

	function localstorage() {
		try {
			// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
			// The Browser also has localStorage in the global context.
			return localStorage;
		} catch (error) {
			// Swallow
			// XXX (@Qix-) should we be logging these?
		}
	}

	module.exports = common$6(exports);

	const {formatters} = module.exports;

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	formatters.j = function (v) {
		try {
			return JSON.stringify(v);
		} catch (error) {
			return '[UnexpectedJSONParseError]: ' + error.message;
		}
	};
	}(browser$a, browser$a.exports));

	var debug$S = browser$a.exports;

	/**
	 * @typedef {{ [key: string]: any }} Extensions
	 * @typedef {Error} Err
	 * @property {string} message
	 */

	/**
	 *
	 * @param {Error} obj
	 * @param {Extensions} props
	 * @returns {Error & Extensions}
	 */
	function assign$2(obj, props) {
	    for (const key in props) {
	        Object.defineProperty(obj, key, {
	            value: props[key],
	            enumerable: true,
	            configurable: true,
	        });
	    }

	    return obj;
	}

	/**
	 *
	 * @param {any} err - An Error
	 * @param {string|Extensions} code - A string code or props to set on the error
	 * @param {Extensions} [props] - Props to set on the error
	 * @returns {Error & Extensions}
	 */
	function createError$1(err, code, props) {
	    if (!err || typeof err === 'string') {
	        throw new TypeError('Please pass an Error to err-code');
	    }

	    if (!props) {
	        props = {};
	    }

	    if (typeof code === 'object') {
	        props = code;
	        code = '';
	    }

	    if (code) {
	        props.code = code;
	    }

	    try {
	        return assign$2(err, props);
	    } catch (_) {
	        props.message = err.message;
	        props.stack = err.stack;

	        const ErrClass = function () {};

	        ErrClass.prototype = Object.create(Object.getPrototypeOf(err));

	        // @ts-ignore
	        const output = assign$2(new ErrClass(), props);

	        return output;
	    }
	}

	var errCode$q = createError$1;

	var indexMinimal = {};

	var minimal$1 = {};

	var aspromise = asPromise;

	/**
	 * Callback as used by {@link util.asPromise}.
	 * @typedef asPromiseCallback
	 * @type {function}
	 * @param {Error|null} error Error, if any
	 * @param {...*} params Additional arguments
	 * @returns {undefined}
	 */

	/**
	 * Returns a promise from a node-style callback function.
	 * @memberof util
	 * @param {asPromiseCallback} fn Function to call
	 * @param {*} ctx Function context
	 * @param {...*} params Function arguments
	 * @returns {Promise<*>} Promisified function
	 */
	function asPromise(fn, ctx/*, varargs */) {
	    var params  = new Array(arguments.length - 1),
	        offset  = 0,
	        index   = 2,
	        pending = true;
	    while (index < arguments.length)
	        params[offset++] = arguments[index++];
	    return new Promise(function executor(resolve, reject) {
	        params[offset] = function callback(err/*, varargs */) {
	            if (pending) {
	                pending = false;
	                if (err)
	                    reject(err);
	                else {
	                    var params = new Array(arguments.length - 1),
	                        offset = 0;
	                    while (offset < params.length)
	                        params[offset++] = arguments[offset];
	                    resolve.apply(null, params);
	                }
	            }
	        };
	        try {
	            fn.apply(ctx || null, params);
	        } catch (err) {
	            if (pending) {
	                pending = false;
	                reject(err);
	            }
	        }
	    });
	}

	var base64$5 = {};

	(function (exports) {

	/**
	 * A minimal base64 implementation for number arrays.
	 * @memberof util
	 * @namespace
	 */
	var base64 = exports;

	/**
	 * Calculates the byte length of a base64 encoded string.
	 * @param {string} string Base64 encoded string
	 * @returns {number} Byte length
	 */
	base64.length = function length(string) {
	    var p = string.length;
	    if (!p)
	        return 0;
	    var n = 0;
	    while (--p % 4 > 1 && string.charAt(p) === "=")
	        ++n;
	    return Math.ceil(string.length * 3) / 4 - n;
	};

	// Base64 encoding table
	var b64 = new Array(64);

	// Base64 decoding table
	var s64 = new Array(123);

	// 65..90, 97..122, 48..57, 43, 47
	for (var i = 0; i < 64;)
	    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;

	/**
	 * Encodes a buffer to a base64 encoded string.
	 * @param {Uint8Array} buffer Source buffer
	 * @param {number} start Source start
	 * @param {number} end Source end
	 * @returns {string} Base64 encoded string
	 */
	base64.encode = function encode(buffer, start, end) {
	    var parts = null,
	        chunk = [];
	    var i = 0, // output index
	        j = 0, // goto index
	        t;     // temporary
	    while (start < end) {
	        var b = buffer[start++];
	        switch (j) {
	            case 0:
	                chunk[i++] = b64[b >> 2];
	                t = (b & 3) << 4;
	                j = 1;
	                break;
	            case 1:
	                chunk[i++] = b64[t | b >> 4];
	                t = (b & 15) << 2;
	                j = 2;
	                break;
	            case 2:
	                chunk[i++] = b64[t | b >> 6];
	                chunk[i++] = b64[b & 63];
	                j = 0;
	                break;
	        }
	        if (i > 8191) {
	            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
	            i = 0;
	        }
	    }
	    if (j) {
	        chunk[i++] = b64[t];
	        chunk[i++] = 61;
	        if (j === 1)
	            chunk[i++] = 61;
	    }
	    if (parts) {
	        if (i)
	            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
	        return parts.join("");
	    }
	    return String.fromCharCode.apply(String, chunk.slice(0, i));
	};

	var invalidEncoding = "invalid encoding";

	/**
	 * Decodes a base64 encoded string to a buffer.
	 * @param {string} string Source string
	 * @param {Uint8Array} buffer Destination buffer
	 * @param {number} offset Destination offset
	 * @returns {number} Number of bytes written
	 * @throws {Error} If encoding is invalid
	 */
	base64.decode = function decode(string, buffer, offset) {
	    var start = offset;
	    var j = 0, // goto index
	        t;     // temporary
	    for (var i = 0; i < string.length;) {
	        var c = string.charCodeAt(i++);
	        if (c === 61 && j > 1)
	            break;
	        if ((c = s64[c]) === undefined)
	            throw Error(invalidEncoding);
	        switch (j) {
	            case 0:
	                t = c;
	                j = 1;
	                break;
	            case 1:
	                buffer[offset++] = t << 2 | (c & 48) >> 4;
	                t = c;
	                j = 2;
	                break;
	            case 2:
	                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
	                t = c;
	                j = 3;
	                break;
	            case 3:
	                buffer[offset++] = (t & 3) << 6 | c;
	                j = 0;
	                break;
	        }
	    }
	    if (j === 1)
	        throw Error(invalidEncoding);
	    return offset - start;
	};

	/**
	 * Tests if the specified string appears to be base64 encoded.
	 * @param {string} string String to test
	 * @returns {boolean} `true` if probably base64 encoded, otherwise false
	 */
	base64.test = function test(string) {
	    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
	};
	}(base64$5));

	var eventemitter = EventEmitter$p;

	/**
	 * Constructs a new event emitter instance.
	 * @classdesc A minimal event emitter.
	 * @memberof util
	 * @constructor
	 */
	function EventEmitter$p() {

	    /**
	     * Registered listeners.
	     * @type {Object.<string,*>}
	     * @private
	     */
	    this._listeners = {};
	}

	/**
	 * Registers an event listener.
	 * @param {string} evt Event name
	 * @param {function} fn Listener
	 * @param {*} [ctx] Listener context
	 * @returns {util.EventEmitter} `this`
	 */
	EventEmitter$p.prototype.on = function on(evt, fn, ctx) {
	    (this._listeners[evt] || (this._listeners[evt] = [])).push({
	        fn  : fn,
	        ctx : ctx || this
	    });
	    return this;
	};

	/**
	 * Removes an event listener or any matching listeners if arguments are omitted.
	 * @param {string} [evt] Event name. Removes all listeners if omitted.
	 * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
	 * @returns {util.EventEmitter} `this`
	 */
	EventEmitter$p.prototype.off = function off(evt, fn) {
	    if (evt === undefined)
	        this._listeners = {};
	    else {
	        if (fn === undefined)
	            this._listeners[evt] = [];
	        else {
	            var listeners = this._listeners[evt];
	            for (var i = 0; i < listeners.length;)
	                if (listeners[i].fn === fn)
	                    listeners.splice(i, 1);
	                else
	                    ++i;
	        }
	    }
	    return this;
	};

	/**
	 * Emits an event by calling its listeners with the specified arguments.
	 * @param {string} evt Event name
	 * @param {...*} args Arguments
	 * @returns {util.EventEmitter} `this`
	 */
	EventEmitter$p.prototype.emit = function emit(evt) {
	    var listeners = this._listeners[evt];
	    if (listeners) {
	        var args = [],
	            i = 1;
	        for (; i < arguments.length;)
	            args.push(arguments[i++]);
	        for (i = 0; i < listeners.length;)
	            listeners[i].fn.apply(listeners[i++].ctx, args);
	    }
	    return this;
	};

	var float = factory(factory);

	/**
	 * Reads / writes floats / doubles from / to buffers.
	 * @name util.float
	 * @namespace
	 */

	/**
	 * Writes a 32 bit float to a buffer using little endian byte order.
	 * @name util.float.writeFloatLE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Writes a 32 bit float to a buffer using big endian byte order.
	 * @name util.float.writeFloatBE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Reads a 32 bit float from a buffer using little endian byte order.
	 * @name util.float.readFloatLE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	/**
	 * Reads a 32 bit float from a buffer using big endian byte order.
	 * @name util.float.readFloatBE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	/**
	 * Writes a 64 bit double to a buffer using little endian byte order.
	 * @name util.float.writeDoubleLE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Writes a 64 bit double to a buffer using big endian byte order.
	 * @name util.float.writeDoubleBE
	 * @function
	 * @param {number} val Value to write
	 * @param {Uint8Array} buf Target buffer
	 * @param {number} pos Target buffer offset
	 * @returns {undefined}
	 */

	/**
	 * Reads a 64 bit double from a buffer using little endian byte order.
	 * @name util.float.readDoubleLE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	/**
	 * Reads a 64 bit double from a buffer using big endian byte order.
	 * @name util.float.readDoubleBE
	 * @function
	 * @param {Uint8Array} buf Source buffer
	 * @param {number} pos Source buffer offset
	 * @returns {number} Value read
	 */

	// Factory function for the purpose of node-based testing in modified global environments
	function factory(exports) {

	    // float: typed array
	    if (typeof Float32Array !== "undefined") (function() {

	        var f32 = new Float32Array([ -0 ]),
	            f8b = new Uint8Array(f32.buffer),
	            le  = f8b[3] === 128;

	        function writeFloat_f32_cpy(val, buf, pos) {
	            f32[0] = val;
	            buf[pos    ] = f8b[0];
	            buf[pos + 1] = f8b[1];
	            buf[pos + 2] = f8b[2];
	            buf[pos + 3] = f8b[3];
	        }

	        function writeFloat_f32_rev(val, buf, pos) {
	            f32[0] = val;
	            buf[pos    ] = f8b[3];
	            buf[pos + 1] = f8b[2];
	            buf[pos + 2] = f8b[1];
	            buf[pos + 3] = f8b[0];
	        }

	        /* istanbul ignore next */
	        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
	        /* istanbul ignore next */
	        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

	        function readFloat_f32_cpy(buf, pos) {
	            f8b[0] = buf[pos    ];
	            f8b[1] = buf[pos + 1];
	            f8b[2] = buf[pos + 2];
	            f8b[3] = buf[pos + 3];
	            return f32[0];
	        }

	        function readFloat_f32_rev(buf, pos) {
	            f8b[3] = buf[pos    ];
	            f8b[2] = buf[pos + 1];
	            f8b[1] = buf[pos + 2];
	            f8b[0] = buf[pos + 3];
	            return f32[0];
	        }

	        /* istanbul ignore next */
	        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
	        /* istanbul ignore next */
	        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;

	    // float: ieee754
	    })(); else (function() {

	        function writeFloat_ieee754(writeUint, val, buf, pos) {
	            var sign = val < 0 ? 1 : 0;
	            if (sign)
	                val = -val;
	            if (val === 0)
	                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);
	            else if (isNaN(val))
	                writeUint(2143289344, buf, pos);
	            else if (val > 3.4028234663852886e+38) // +-Infinity
	                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
	            else if (val < 1.1754943508222875e-38) // denormal
	                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);
	            else {
	                var exponent = Math.floor(Math.log(val) / Math.LN2),
	                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
	                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
	            }
	        }

	        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE$1);
	        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE$1);

	        function readFloat_ieee754(readUint, buf, pos) {
	            var uint = readUint(buf, pos),
	                sign = (uint >> 31) * 2 + 1,
	                exponent = uint >>> 23 & 255,
	                mantissa = uint & 8388607;
	            return exponent === 255
	                ? mantissa
	                ? NaN
	                : sign * Infinity
	                : exponent === 0 // denormal
	                ? sign * 1.401298464324817e-45 * mantissa
	                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
	        }

	        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE$1);
	        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE$1);

	    })();

	    // double: typed array
	    if (typeof Float64Array !== "undefined") (function() {

	        var f64 = new Float64Array([-0]),
	            f8b = new Uint8Array(f64.buffer),
	            le  = f8b[7] === 128;

	        function writeDouble_f64_cpy(val, buf, pos) {
	            f64[0] = val;
	            buf[pos    ] = f8b[0];
	            buf[pos + 1] = f8b[1];
	            buf[pos + 2] = f8b[2];
	            buf[pos + 3] = f8b[3];
	            buf[pos + 4] = f8b[4];
	            buf[pos + 5] = f8b[5];
	            buf[pos + 6] = f8b[6];
	            buf[pos + 7] = f8b[7];
	        }

	        function writeDouble_f64_rev(val, buf, pos) {
	            f64[0] = val;
	            buf[pos    ] = f8b[7];
	            buf[pos + 1] = f8b[6];
	            buf[pos + 2] = f8b[5];
	            buf[pos + 3] = f8b[4];
	            buf[pos + 4] = f8b[3];
	            buf[pos + 5] = f8b[2];
	            buf[pos + 6] = f8b[1];
	            buf[pos + 7] = f8b[0];
	        }

	        /* istanbul ignore next */
	        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
	        /* istanbul ignore next */
	        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

	        function readDouble_f64_cpy(buf, pos) {
	            f8b[0] = buf[pos    ];
	            f8b[1] = buf[pos + 1];
	            f8b[2] = buf[pos + 2];
	            f8b[3] = buf[pos + 3];
	            f8b[4] = buf[pos + 4];
	            f8b[5] = buf[pos + 5];
	            f8b[6] = buf[pos + 6];
	            f8b[7] = buf[pos + 7];
	            return f64[0];
	        }

	        function readDouble_f64_rev(buf, pos) {
	            f8b[7] = buf[pos    ];
	            f8b[6] = buf[pos + 1];
	            f8b[5] = buf[pos + 2];
	            f8b[4] = buf[pos + 3];
	            f8b[3] = buf[pos + 4];
	            f8b[2] = buf[pos + 5];
	            f8b[1] = buf[pos + 6];
	            f8b[0] = buf[pos + 7];
	            return f64[0];
	        }

	        /* istanbul ignore next */
	        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
	        /* istanbul ignore next */
	        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;

	    // double: ieee754
	    })(); else (function() {

	        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
	            var sign = val < 0 ? 1 : 0;
	            if (sign)
	                val = -val;
	            if (val === 0) {
	                writeUint(0, buf, pos + off0);
	                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);
	            } else if (isNaN(val)) {
	                writeUint(0, buf, pos + off0);
	                writeUint(2146959360, buf, pos + off1);
	            } else if (val > 1.7976931348623157e+308) { // +-Infinity
	                writeUint(0, buf, pos + off0);
	                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
	            } else {
	                var mantissa;
	                if (val < 2.2250738585072014e-308) { // denormal
	                    mantissa = val / 5e-324;
	                    writeUint(mantissa >>> 0, buf, pos + off0);
	                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
	                } else {
	                    var exponent = Math.floor(Math.log(val) / Math.LN2);
	                    if (exponent === 1024)
	                        exponent = 1023;
	                    mantissa = val * Math.pow(2, -exponent);
	                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
	                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
	                }
	            }
	        }

	        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE$1, 0, 4);
	        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE$1, 4, 0);

	        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
	            var lo = readUint(buf, pos + off0),
	                hi = readUint(buf, pos + off1);
	            var sign = (hi >> 31) * 2 + 1,
	                exponent = hi >>> 20 & 2047,
	                mantissa = 4294967296 * (hi & 1048575) + lo;
	            return exponent === 2047
	                ? mantissa
	                ? NaN
	                : sign * Infinity
	                : exponent === 0 // denormal
	                ? sign * 5e-324 * mantissa
	                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
	        }

	        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE$1, 0, 4);
	        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE$1, 4, 0);

	    })();

	    return exports;
	}

	// uint helpers

	function writeUintLE$1(val, buf, pos) {
	    buf[pos    ] =  val        & 255;
	    buf[pos + 1] =  val >>> 8  & 255;
	    buf[pos + 2] =  val >>> 16 & 255;
	    buf[pos + 3] =  val >>> 24;
	}

	function writeUintBE$1(val, buf, pos) {
	    buf[pos    ] =  val >>> 24;
	    buf[pos + 1] =  val >>> 16 & 255;
	    buf[pos + 2] =  val >>> 8  & 255;
	    buf[pos + 3] =  val        & 255;
	}

	function readUintLE$1(buf, pos) {
	    return (buf[pos    ]
	          | buf[pos + 1] << 8
	          | buf[pos + 2] << 16
	          | buf[pos + 3] << 24) >>> 0;
	}

	function readUintBE$1(buf, pos) {
	    return (buf[pos    ] << 24
	          | buf[pos + 1] << 16
	          | buf[pos + 2] << 8
	          | buf[pos + 3]) >>> 0;
	}

	var inquire_1 = inquire;

	/**
	 * Requires a module only if available.
	 * @memberof util
	 * @param {string} moduleName Module to require
	 * @returns {?Object} Required module if available and not empty, otherwise `null`
	 */
	function inquire(moduleName) {
	    try {
	        var mod = eval("quire".replace(/^/,"re"))(moduleName); // eslint-disable-line no-eval
	        if (mod && (mod.length || Object.keys(mod).length))
	            return mod;
	    } catch (e) {} // eslint-disable-line no-empty
	    return null;
	}

	var utf8$2 = {};

	(function (exports) {

	/**
	 * A minimal UTF8 implementation for number arrays.
	 * @memberof util
	 * @namespace
	 */
	var utf8 = exports;

	/**
	 * Calculates the UTF8 byte length of a string.
	 * @param {string} string String
	 * @returns {number} Byte length
	 */
	utf8.length = function utf8_length(string) {
	    var len = 0,
	        c = 0;
	    for (var i = 0; i < string.length; ++i) {
	        c = string.charCodeAt(i);
	        if (c < 128)
	            len += 1;
	        else if (c < 2048)
	            len += 2;
	        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
	            ++i;
	            len += 4;
	        } else
	            len += 3;
	    }
	    return len;
	};

	/**
	 * Reads UTF8 bytes as a string.
	 * @param {Uint8Array} buffer Source buffer
	 * @param {number} start Source start
	 * @param {number} end Source end
	 * @returns {string} String read
	 */
	utf8.read = function utf8_read(buffer, start, end) {
	    var len = end - start;
	    if (len < 1)
	        return "";
	    var parts = null,
	        chunk = [],
	        i = 0, // char offset
	        t;     // temporary
	    while (start < end) {
	        t = buffer[start++];
	        if (t < 128)
	            chunk[i++] = t;
	        else if (t > 191 && t < 224)
	            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
	        else if (t > 239 && t < 365) {
	            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
	            chunk[i++] = 0xD800 + (t >> 10);
	            chunk[i++] = 0xDC00 + (t & 1023);
	        } else
	            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
	        if (i > 8191) {
	            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
	            i = 0;
	        }
	    }
	    if (parts) {
	        if (i)
	            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
	        return parts.join("");
	    }
	    return String.fromCharCode.apply(String, chunk.slice(0, i));
	};

	/**
	 * Writes a string as UTF8 bytes.
	 * @param {string} string Source string
	 * @param {Uint8Array} buffer Destination buffer
	 * @param {number} offset Destination offset
	 * @returns {number} Bytes written
	 */
	utf8.write = function utf8_write(string, buffer, offset) {
	    var start = offset,
	        c1, // character 1
	        c2; // character 2
	    for (var i = 0; i < string.length; ++i) {
	        c1 = string.charCodeAt(i);
	        if (c1 < 128) {
	            buffer[offset++] = c1;
	        } else if (c1 < 2048) {
	            buffer[offset++] = c1 >> 6       | 192;
	            buffer[offset++] = c1       & 63 | 128;
	        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
	            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
	            ++i;
	            buffer[offset++] = c1 >> 18      | 240;
	            buffer[offset++] = c1 >> 12 & 63 | 128;
	            buffer[offset++] = c1 >> 6  & 63 | 128;
	            buffer[offset++] = c1       & 63 | 128;
	        } else {
	            buffer[offset++] = c1 >> 12      | 224;
	            buffer[offset++] = c1 >> 6  & 63 | 128;
	            buffer[offset++] = c1       & 63 | 128;
	        }
	    }
	    return offset - start;
	};
	}(utf8$2));

	var pool_1 = pool;

	/**
	 * An allocator as used by {@link util.pool}.
	 * @typedef PoolAllocator
	 * @type {function}
	 * @param {number} size Buffer size
	 * @returns {Uint8Array} Buffer
	 */

	/**
	 * A slicer as used by {@link util.pool}.
	 * @typedef PoolSlicer
	 * @type {function}
	 * @param {number} start Start offset
	 * @param {number} end End offset
	 * @returns {Uint8Array} Buffer slice
	 * @this {Uint8Array}
	 */

	/**
	 * A general purpose buffer pool.
	 * @memberof util
	 * @function
	 * @param {PoolAllocator} alloc Allocator
	 * @param {PoolSlicer} slice Slicer
	 * @param {number} [size=8192] Slab size
	 * @returns {PoolAllocator} Pooled allocator
	 */
	function pool(alloc, slice, size) {
	    var SIZE   = size || 8192;
	    var MAX    = SIZE >>> 1;
	    var slab   = null;
	    var offset = SIZE;
	    return function pool_alloc(size) {
	        if (size < 1 || size > MAX)
	            return alloc(size);
	        if (offset + size > SIZE) {
	            slab = alloc(SIZE);
	            offset = 0;
	        }
	        var buf = slice.call(slab, offset, offset += size);
	        if (offset & 7) // align to 32 bit
	            offset = (offset | 7) + 1;
	        return buf;
	    };
	}

	var longbits = LongBits$2;

	var util$e = minimal$1;

	/**
	 * Constructs new long bits.
	 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
	 * @memberof util
	 * @constructor
	 * @param {number} lo Low 32 bits, unsigned
	 * @param {number} hi High 32 bits, unsigned
	 */
	function LongBits$2(lo, hi) {

	    // note that the casts below are theoretically unnecessary as of today, but older statically
	    // generated converter code might still call the ctor with signed 32bits. kept for compat.

	    /**
	     * Low bits.
	     * @type {number}
	     */
	    this.lo = lo >>> 0;

	    /**
	     * High bits.
	     * @type {number}
	     */
	    this.hi = hi >>> 0;
	}

	/**
	 * Zero bits.
	 * @memberof util.LongBits
	 * @type {util.LongBits}
	 */
	var zero$2 = LongBits$2.zero = new LongBits$2(0, 0);

	zero$2.toNumber = function() { return 0; };
	zero$2.zzEncode = zero$2.zzDecode = function() { return this; };
	zero$2.length = function() { return 1; };

	/**
	 * Zero hash.
	 * @memberof util.LongBits
	 * @type {string}
	 */
	var zeroHash = LongBits$2.zeroHash = "\0\0\0\0\0\0\0\0";

	/**
	 * Constructs new long bits from the specified number.
	 * @param {number} value Value
	 * @returns {util.LongBits} Instance
	 */
	LongBits$2.fromNumber = function fromNumber(value) {
	    if (value === 0)
	        return zero$2;
	    var sign = value < 0;
	    if (sign)
	        value = -value;
	    var lo = value >>> 0,
	        hi = (value - lo) / 4294967296 >>> 0;
	    if (sign) {
	        hi = ~hi >>> 0;
	        lo = ~lo >>> 0;
	        if (++lo > 4294967295) {
	            lo = 0;
	            if (++hi > 4294967295)
	                hi = 0;
	        }
	    }
	    return new LongBits$2(lo, hi);
	};

	/**
	 * Constructs new long bits from a number, long or string.
	 * @param {Long|number|string} value Value
	 * @returns {util.LongBits} Instance
	 */
	LongBits$2.from = function from(value) {
	    if (typeof value === "number")
	        return LongBits$2.fromNumber(value);
	    if (util$e.isString(value)) {
	        /* istanbul ignore else */
	        if (util$e.Long)
	            value = util$e.Long.fromString(value);
	        else
	            return LongBits$2.fromNumber(parseInt(value, 10));
	    }
	    return value.low || value.high ? new LongBits$2(value.low >>> 0, value.high >>> 0) : zero$2;
	};

	/**
	 * Converts this long bits to a possibly unsafe JavaScript number.
	 * @param {boolean} [unsigned=false] Whether unsigned or not
	 * @returns {number} Possibly unsafe number
	 */
	LongBits$2.prototype.toNumber = function toNumber(unsigned) {
	    if (!unsigned && this.hi >>> 31) {
	        var lo = ~this.lo + 1 >>> 0,
	            hi = ~this.hi     >>> 0;
	        if (!lo)
	            hi = hi + 1 >>> 0;
	        return -(lo + hi * 4294967296);
	    }
	    return this.lo + this.hi * 4294967296;
	};

	/**
	 * Converts this long bits to a long.
	 * @param {boolean} [unsigned=false] Whether unsigned or not
	 * @returns {Long} Long
	 */
	LongBits$2.prototype.toLong = function toLong(unsigned) {
	    return util$e.Long
	        ? new util$e.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
	        /* istanbul ignore next */
	        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
	};

	var charCodeAt = String.prototype.charCodeAt;

	/**
	 * Constructs new long bits from the specified 8 characters long hash.
	 * @param {string} hash Hash
	 * @returns {util.LongBits} Bits
	 */
	LongBits$2.fromHash = function fromHash(hash) {
	    if (hash === zeroHash)
	        return zero$2;
	    return new LongBits$2(
	        ( charCodeAt.call(hash, 0)
	        | charCodeAt.call(hash, 1) << 8
	        | charCodeAt.call(hash, 2) << 16
	        | charCodeAt.call(hash, 3) << 24) >>> 0
	    ,
	        ( charCodeAt.call(hash, 4)
	        | charCodeAt.call(hash, 5) << 8
	        | charCodeAt.call(hash, 6) << 16
	        | charCodeAt.call(hash, 7) << 24) >>> 0
	    );
	};

	/**
	 * Converts this long bits to a 8 characters long hash.
	 * @returns {string} Hash
	 */
	LongBits$2.prototype.toHash = function toHash() {
	    return String.fromCharCode(
	        this.lo        & 255,
	        this.lo >>> 8  & 255,
	        this.lo >>> 16 & 255,
	        this.lo >>> 24      ,
	        this.hi        & 255,
	        this.hi >>> 8  & 255,
	        this.hi >>> 16 & 255,
	        this.hi >>> 24
	    );
	};

	/**
	 * Zig-zag encodes this long bits.
	 * @returns {util.LongBits} `this`
	 */
	LongBits$2.prototype.zzEncode = function zzEncode() {
	    var mask =   this.hi >> 31;
	    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
	    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;
	    return this;
	};

	/**
	 * Zig-zag decodes this long bits.
	 * @returns {util.LongBits} `this`
	 */
	LongBits$2.prototype.zzDecode = function zzDecode() {
	    var mask = -(this.lo & 1);
	    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
	    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;
	    return this;
	};

	/**
	 * Calculates the length of this longbits when encoded as a varint.
	 * @returns {number} Length
	 */
	LongBits$2.prototype.length = function length() {
	    var part0 =  this.lo,
	        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
	        part2 =  this.hi >>> 24;
	    return part2 === 0
	         ? part1 === 0
	           ? part0 < 16384
	             ? part0 < 128 ? 1 : 2
	             : part0 < 2097152 ? 3 : 4
	           : part1 < 16384
	             ? part1 < 128 ? 5 : 6
	             : part1 < 2097152 ? 7 : 8
	         : part2 < 128 ? 9 : 10;
	};

	(function (exports) {
	var util = exports;

	// used to return a Promise where callback is omitted
	util.asPromise = aspromise;

	// converts to / from base64 encoded strings
	util.base64 = base64$5;

	// base class of rpc.Service
	util.EventEmitter = eventemitter;

	// float handling accross browsers
	util.float = float;

	// requires modules optionally and hides the call from bundlers
	util.inquire = inquire_1;

	// converts to / from utf8 encoded strings
	util.utf8 = utf8$2;

	// provides a node-like buffer pool in the browser
	util.pool = pool_1;

	// utility to work with the low and high bits of a 64 bit value
	util.LongBits = longbits;

	/**
	 * Whether running within node or not.
	 * @memberof util
	 * @type {boolean}
	 */
	util.isNode = Boolean(typeof commonjsGlobal !== "undefined"
	                   && commonjsGlobal
	                   && commonjsGlobal.process
	                   && commonjsGlobal.process.versions
	                   && commonjsGlobal.process.versions.node);

	/**
	 * Global object reference.
	 * @memberof util
	 * @type {Object}
	 */
	util.global = util.isNode && commonjsGlobal
	           || typeof window !== "undefined" && window
	           || typeof self   !== "undefined" && self
	           || commonjsGlobal; // eslint-disable-line no-invalid-this

	/**
	 * An immuable empty array.
	 * @memberof util
	 * @type {Array.<*>}
	 * @const
	 */
	util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes

	/**
	 * An immutable empty object.
	 * @type {Object}
	 * @const
	 */
	util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes

	/**
	 * Tests if the specified value is an integer.
	 * @function
	 * @param {*} value Value to test
	 * @returns {boolean} `true` if the value is an integer
	 */
	util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
	    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
	};

	/**
	 * Tests if the specified value is a string.
	 * @param {*} value Value to test
	 * @returns {boolean} `true` if the value is a string
	 */
	util.isString = function isString(value) {
	    return typeof value === "string" || value instanceof String;
	};

	/**
	 * Tests if the specified value is a non-null object.
	 * @param {*} value Value to test
	 * @returns {boolean} `true` if the value is a non-null object
	 */
	util.isObject = function isObject(value) {
	    return value && typeof value === "object";
	};

	/**
	 * Checks if a property on a message is considered to be present.
	 * This is an alias of {@link util.isSet}.
	 * @function
	 * @param {Object} obj Plain object or message instance
	 * @param {string} prop Property name
	 * @returns {boolean} `true` if considered to be present, otherwise `false`
	 */
	util.isset =

	/**
	 * Checks if a property on a message is considered to be present.
	 * @param {Object} obj Plain object or message instance
	 * @param {string} prop Property name
	 * @returns {boolean} `true` if considered to be present, otherwise `false`
	 */
	util.isSet = function isSet(obj, prop) {
	    var value = obj[prop];
	    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
	        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
	    return false;
	};

	/**
	 * Any compatible Buffer instance.
	 * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
	 * @interface Buffer
	 * @extends Uint8Array
	 */

	/**
	 * Node's Buffer class if available.
	 * @type {Constructor<Buffer>}
	 */
	util.Buffer = (function() {
	    try {
	        var Buffer = util.inquire("buffer").Buffer;
	        // refuse to use non-node buffers if not explicitly assigned (perf reasons):
	        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;
	    } catch (e) {
	        /* istanbul ignore next */
	        return null;
	    }
	})();

	// Internal alias of or polyfull for Buffer.from.
	util._Buffer_from = null;

	// Internal alias of or polyfill for Buffer.allocUnsafe.
	util._Buffer_allocUnsafe = null;

	/**
	 * Creates a new buffer of whatever type supported by the environment.
	 * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
	 * @returns {Uint8Array|Buffer} Buffer
	 */
	util.newBuffer = function newBuffer(sizeOrArray) {
	    /* istanbul ignore next */
	    return typeof sizeOrArray === "number"
	        ? util.Buffer
	            ? util._Buffer_allocUnsafe(sizeOrArray)
	            : new util.Array(sizeOrArray)
	        : util.Buffer
	            ? util._Buffer_from(sizeOrArray)
	            : typeof Uint8Array === "undefined"
	                ? sizeOrArray
	                : new Uint8Array(sizeOrArray);
	};

	/**
	 * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
	 * @type {Constructor<Uint8Array>}
	 */
	util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */ : Array;

	/**
	 * Any compatible Long instance.
	 * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
	 * @interface Long
	 * @property {number} low Low bits
	 * @property {number} high High bits
	 * @property {boolean} unsigned Whether unsigned or not
	 */

	/**
	 * Long.js's Long class if available.
	 * @type {Constructor<Long>}
	 */
	util.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long
	         || /* istanbul ignore next */ util.global.Long
	         || util.inquire("long");

	/**
	 * Regular expression used to verify 2 bit (`bool`) map keys.
	 * @type {RegExp}
	 * @const
	 */
	util.key2Re = /^true|false|0|1$/;

	/**
	 * Regular expression used to verify 32 bit (`int32` etc.) map keys.
	 * @type {RegExp}
	 * @const
	 */
	util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;

	/**
	 * Regular expression used to verify 64 bit (`int64` etc.) map keys.
	 * @type {RegExp}
	 * @const
	 */
	util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;

	/**
	 * Converts a number or long to an 8 characters long hash string.
	 * @param {Long|number} value Value to convert
	 * @returns {string} Hash
	 */
	util.longToHash = function longToHash(value) {
	    return value
	        ? util.LongBits.from(value).toHash()
	        : util.LongBits.zeroHash;
	};

	/**
	 * Converts an 8 characters long hash string to a long or number.
	 * @param {string} hash Hash
	 * @param {boolean} [unsigned=false] Whether unsigned or not
	 * @returns {Long|number} Original value
	 */
	util.longFromHash = function longFromHash(hash, unsigned) {
	    var bits = util.LongBits.fromHash(hash);
	    if (util.Long)
	        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
	    return bits.toNumber(Boolean(unsigned));
	};

	/**
	 * Merges the properties of the source object into the destination object.
	 * @memberof util
	 * @param {Object.<string,*>} dst Destination object
	 * @param {Object.<string,*>} src Source object
	 * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
	 * @returns {Object.<string,*>} Destination object
	 */
	function merge(dst, src, ifNotSet) { // used by converters
	    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
	        if (dst[keys[i]] === undefined || !ifNotSet)
	            dst[keys[i]] = src[keys[i]];
	    return dst;
	}

	util.merge = merge;

	/**
	 * Converts the first character of a string to lower case.
	 * @param {string} str String to convert
	 * @returns {string} Converted string
	 */
	util.lcFirst = function lcFirst(str) {
	    return str.charAt(0).toLowerCase() + str.substring(1);
	};

	/**
	 * Creates a custom error constructor.
	 * @memberof util
	 * @param {string} name Error name
	 * @returns {Constructor<Error>} Custom error constructor
	 */
	function newError(name) {

	    function CustomError(message, properties) {

	        if (!(this instanceof CustomError))
	            return new CustomError(message, properties);

	        // Error.call(this, message);
	        // ^ just returns a new error instance because the ctor can be called as a function

	        Object.defineProperty(this, "message", { get: function() { return message; } });

	        /* istanbul ignore next */
	        if (Error.captureStackTrace) // node
	            Error.captureStackTrace(this, CustomError);
	        else
	            Object.defineProperty(this, "stack", { value: new Error().stack || "" });

	        if (properties)
	            merge(this, properties);
	    }

	    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;

	    Object.defineProperty(CustomError.prototype, "name", { get: function() { return name; } });

	    CustomError.prototype.toString = function toString() {
	        return this.name + ": " + this.message;
	    };

	    return CustomError;
	}

	util.newError = newError;

	/**
	 * Constructs a new protocol error.
	 * @classdesc Error subclass indicating a protocol specifc error.
	 * @memberof util
	 * @extends Error
	 * @template T extends Message<T>
	 * @constructor
	 * @param {string} message Error message
	 * @param {Object.<string,*>} [properties] Additional properties
	 * @example
	 * try {
	 *     MyMessage.decode(someBuffer); // throws if required fields are missing
	 * } catch (e) {
	 *     if (e instanceof ProtocolError && e.instance)
	 *         console.log("decoded so far: " + JSON.stringify(e.instance));
	 * }
	 */
	util.ProtocolError = newError("ProtocolError");

	/**
	 * So far decoded message instance.
	 * @name util.ProtocolError#instance
	 * @type {Message<T>}
	 */

	/**
	 * A OneOf getter as returned by {@link util.oneOfGetter}.
	 * @typedef OneOfGetter
	 * @type {function}
	 * @returns {string|undefined} Set field name, if any
	 */

	/**
	 * Builds a getter for a oneof's present field name.
	 * @param {string[]} fieldNames Field names
	 * @returns {OneOfGetter} Unbound getter
	 */
	util.oneOfGetter = function getOneOf(fieldNames) {
	    var fieldMap = {};
	    for (var i = 0; i < fieldNames.length; ++i)
	        fieldMap[fieldNames[i]] = 1;

	    /**
	     * @returns {string|undefined} Set field name, if any
	     * @this Object
	     * @ignore
	     */
	    return function() { // eslint-disable-line consistent-return
	        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)
	            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)
	                return keys[i];
	    };
	};

	/**
	 * A OneOf setter as returned by {@link util.oneOfSetter}.
	 * @typedef OneOfSetter
	 * @type {function}
	 * @param {string|undefined} value Field name
	 * @returns {undefined}
	 */

	/**
	 * Builds a setter for a oneof's present field name.
	 * @param {string[]} fieldNames Field names
	 * @returns {OneOfSetter} Unbound setter
	 */
	util.oneOfSetter = function setOneOf(fieldNames) {

	    /**
	     * @param {string} name Field name
	     * @returns {undefined}
	     * @this Object
	     * @ignore
	     */
	    return function(name) {
	        for (var i = 0; i < fieldNames.length; ++i)
	            if (fieldNames[i] !== name)
	                delete this[fieldNames[i]];
	    };
	};

	/**
	 * Default conversion options used for {@link Message#toJSON} implementations.
	 *
	 * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
	 *
	 * - Longs become strings
	 * - Enums become string keys
	 * - Bytes become base64 encoded strings
	 * - (Sub-)Messages become plain objects
	 * - Maps become plain objects with all string keys
	 * - Repeated fields become arrays
	 * - NaN and Infinity for float and double fields become strings
	 *
	 * @type {IConversionOptions}
	 * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
	 */
	util.toJSONOptions = {
	    longs: String,
	    enums: String,
	    bytes: String,
	    json: true
	};

	// Sets up buffer utility according to the environment (called in index-minimal)
	util._configure = function() {
	    var Buffer = util.Buffer;
	    /* istanbul ignore if */
	    if (!Buffer) {
	        util._Buffer_from = util._Buffer_allocUnsafe = null;
	        return;
	    }
	    // because node 4.x buffers are incompatible & immutable
	    // see: https://github.com/dcodeIO/protobuf.js/pull/665
	    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
	        /* istanbul ignore next */
	        function Buffer_from(value, encoding) {
	            return new Buffer(value, encoding);
	        };
	    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
	        /* istanbul ignore next */
	        function Buffer_allocUnsafe(size) {
	            return new Buffer(size);
	        };
	};
	}(minimal$1));

	var writer = Writer$2;

	var util$d      = minimal$1;

	var BufferWriter$1; // cyclic

	var LongBits$1  = util$d.LongBits,
	    base64$4    = util$d.base64,
	    utf8$1      = util$d.utf8;

	/**
	 * Constructs a new writer operation instance.
	 * @classdesc Scheduled writer operation.
	 * @constructor
	 * @param {function(*, Uint8Array, number)} fn Function to call
	 * @param {number} len Value byte length
	 * @param {*} val Value to write
	 * @ignore
	 */
	function Op(fn, len, val) {

	    /**
	     * Function to call.
	     * @type {function(Uint8Array, number, *)}
	     */
	    this.fn = fn;

	    /**
	     * Value byte length.
	     * @type {number}
	     */
	    this.len = len;

	    /**
	     * Next operation.
	     * @type {Writer.Op|undefined}
	     */
	    this.next = undefined;

	    /**
	     * Value to write.
	     * @type {*}
	     */
	    this.val = val; // type varies
	}

	/* istanbul ignore next */
	function noop$6() {} // eslint-disable-line no-empty-function

	/**
	 * Constructs a new writer state instance.
	 * @classdesc Copied writer state.
	 * @memberof Writer
	 * @constructor
	 * @param {Writer} writer Writer to copy state from
	 * @ignore
	 */
	function State(writer) {

	    /**
	     * Current head.
	     * @type {Writer.Op}
	     */
	    this.head = writer.head;

	    /**
	     * Current tail.
	     * @type {Writer.Op}
	     */
	    this.tail = writer.tail;

	    /**
	     * Current buffer length.
	     * @type {number}
	     */
	    this.len = writer.len;

	    /**
	     * Next state.
	     * @type {State|null}
	     */
	    this.next = writer.states;
	}

	/**
	 * Constructs a new writer instance.
	 * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
	 * @constructor
	 */
	function Writer$2() {

	    /**
	     * Current length.
	     * @type {number}
	     */
	    this.len = 0;

	    /**
	     * Operations head.
	     * @type {Object}
	     */
	    this.head = new Op(noop$6, 0, 0);

	    /**
	     * Operations tail
	     * @type {Object}
	     */
	    this.tail = this.head;

	    /**
	     * Linked forked states.
	     * @type {Object|null}
	     */
	    this.states = null;

	    // When a value is written, the writer calculates its byte length and puts it into a linked
	    // list of operations to perform when finish() is called. This both allows us to allocate
	    // buffers of the exact required size and reduces the amount of work we have to do compared
	    // to first calculating over objects and then encoding over objects. In our case, the encoding
	    // part is just a linked list walk calling operations with already prepared values.
	}

	var create$9 = function create() {
	    return util$d.Buffer
	        ? function create_buffer_setup() {
	            return (Writer$2.create = function create_buffer() {
	                return new BufferWriter$1();
	            })();
	        }
	        /* istanbul ignore next */
	        : function create_array() {
	            return new Writer$2();
	        };
	};

	/**
	 * Creates a new writer.
	 * @function
	 * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
	 */
	Writer$2.create = create$9();

	/**
	 * Allocates a buffer of the specified size.
	 * @param {number} size Buffer size
	 * @returns {Uint8Array} Buffer
	 */
	Writer$2.alloc = function alloc(size) {
	    return new util$d.Array(size);
	};

	// Use Uint8Array buffer pool in the browser, just like node does with buffers
	/* istanbul ignore else */
	if (util$d.Array !== Array)
	    Writer$2.alloc = util$d.pool(Writer$2.alloc, util$d.Array.prototype.subarray);

	/**
	 * Pushes a new operation to the queue.
	 * @param {function(Uint8Array, number, *)} fn Function to call
	 * @param {number} len Value byte length
	 * @param {number} val Value to write
	 * @returns {Writer} `this`
	 * @private
	 */
	Writer$2.prototype._push = function push(fn, len, val) {
	    this.tail = this.tail.next = new Op(fn, len, val);
	    this.len += len;
	    return this;
	};

	function writeByte(val, buf, pos) {
	    buf[pos] = val & 255;
	}

	function writeVarint32(val, buf, pos) {
	    while (val > 127) {
	        buf[pos++] = val & 127 | 128;
	        val >>>= 7;
	    }
	    buf[pos] = val;
	}

	/**
	 * Constructs a new varint writer operation instance.
	 * @classdesc Scheduled varint writer operation.
	 * @extends Op
	 * @constructor
	 * @param {number} len Value byte length
	 * @param {number} val Value to write
	 * @ignore
	 */
	function VarintOp(len, val) {
	    this.len = len;
	    this.next = undefined;
	    this.val = val;
	}

	VarintOp.prototype = Object.create(Op.prototype);
	VarintOp.prototype.fn = writeVarint32;

	/**
	 * Writes an unsigned 32 bit value as a varint.
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer$2.prototype.uint32 = function write_uint32(value) {
	    // here, the call to this.push has been inlined and a varint specific Op subclass is used.
	    // uint32 is by far the most frequently used operation and benefits significantly from this.
	    this.len += (this.tail = this.tail.next = new VarintOp(
	        (value = value >>> 0)
	                < 128       ? 1
	        : value < 16384     ? 2
	        : value < 2097152   ? 3
	        : value < 268435456 ? 4
	        :                     5,
	    value)).len;
	    return this;
	};

	/**
	 * Writes a signed 32 bit value as a varint.
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer$2.prototype.int32 = function write_int32(value) {
	    return value < 0
	        ? this._push(writeVarint64, 10, LongBits$1.fromNumber(value)) // 10 bytes per spec
	        : this.uint32(value);
	};

	/**
	 * Writes a 32 bit value as a varint, zig-zag encoded.
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer$2.prototype.sint32 = function write_sint32(value) {
	    return this.uint32((value << 1 ^ value >> 31) >>> 0);
	};

	function writeVarint64(val, buf, pos) {
	    while (val.hi) {
	        buf[pos++] = val.lo & 127 | 128;
	        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
	        val.hi >>>= 7;
	    }
	    while (val.lo > 127) {
	        buf[pos++] = val.lo & 127 | 128;
	        val.lo = val.lo >>> 7;
	    }
	    buf[pos++] = val.lo;
	}

	/**
	 * Writes an unsigned 64 bit value as a varint.
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer$2.prototype.uint64 = function write_uint64(value) {
	    var bits = LongBits$1.from(value);
	    return this._push(writeVarint64, bits.length(), bits);
	};

	/**
	 * Writes a signed 64 bit value as a varint.
	 * @function
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer$2.prototype.int64 = Writer$2.prototype.uint64;

	/**
	 * Writes a signed 64 bit value as a varint, zig-zag encoded.
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer$2.prototype.sint64 = function write_sint64(value) {
	    var bits = LongBits$1.from(value).zzEncode();
	    return this._push(writeVarint64, bits.length(), bits);
	};

	/**
	 * Writes a boolish value as a varint.
	 * @param {boolean} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer$2.prototype.bool = function write_bool(value) {
	    return this._push(writeByte, 1, value ? 1 : 0);
	};

	function writeFixed32(val, buf, pos) {
	    buf[pos    ] =  val         & 255;
	    buf[pos + 1] =  val >>> 8   & 255;
	    buf[pos + 2] =  val >>> 16  & 255;
	    buf[pos + 3] =  val >>> 24;
	}

	/**
	 * Writes an unsigned 32 bit value as fixed 32 bits.
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer$2.prototype.fixed32 = function write_fixed32(value) {
	    return this._push(writeFixed32, 4, value >>> 0);
	};

	/**
	 * Writes a signed 32 bit value as fixed 32 bits.
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer$2.prototype.sfixed32 = Writer$2.prototype.fixed32;

	/**
	 * Writes an unsigned 64 bit value as fixed 64 bits.
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer$2.prototype.fixed64 = function write_fixed64(value) {
	    var bits = LongBits$1.from(value);
	    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
	};

	/**
	 * Writes a signed 64 bit value as fixed 64 bits.
	 * @function
	 * @param {Long|number|string} value Value to write
	 * @returns {Writer} `this`
	 * @throws {TypeError} If `value` is a string and no long library is present.
	 */
	Writer$2.prototype.sfixed64 = Writer$2.prototype.fixed64;

	/**
	 * Writes a float (32 bit).
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer$2.prototype.float = function write_float(value) {
	    return this._push(util$d.float.writeFloatLE, 4, value);
	};

	/**
	 * Writes a double (64 bit float).
	 * @function
	 * @param {number} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer$2.prototype.double = function write_double(value) {
	    return this._push(util$d.float.writeDoubleLE, 8, value);
	};

	var writeBytes = util$d.Array.prototype.set
	    ? function writeBytes_set(val, buf, pos) {
	        buf.set(val, pos); // also works for plain array values
	    }
	    /* istanbul ignore next */
	    : function writeBytes_for(val, buf, pos) {
	        for (var i = 0; i < val.length; ++i)
	            buf[pos + i] = val[i];
	    };

	/**
	 * Writes a sequence of bytes.
	 * @param {Uint8Array|string} value Buffer or base64 encoded string to write
	 * @returns {Writer} `this`
	 */
	Writer$2.prototype.bytes = function write_bytes(value) {
	    var len = value.length >>> 0;
	    if (!len)
	        return this._push(writeByte, 1, 0);
	    if (util$d.isString(value)) {
	        var buf = Writer$2.alloc(len = base64$4.length(value));
	        base64$4.decode(value, buf, 0);
	        value = buf;
	    }
	    return this.uint32(len)._push(writeBytes, len, value);
	};

	/**
	 * Writes a string.
	 * @param {string} value Value to write
	 * @returns {Writer} `this`
	 */
	Writer$2.prototype.string = function write_string(value) {
	    var len = utf8$1.length(value);
	    return len
	        ? this.uint32(len)._push(utf8$1.write, len, value)
	        : this._push(writeByte, 1, 0);
	};

	/**
	 * Forks this writer's state by pushing it to a stack.
	 * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
	 * @returns {Writer} `this`
	 */
	Writer$2.prototype.fork = function fork() {
	    this.states = new State(this);
	    this.head = this.tail = new Op(noop$6, 0, 0);
	    this.len = 0;
	    return this;
	};

	/**
	 * Resets this instance to the last state.
	 * @returns {Writer} `this`
	 */
	Writer$2.prototype.reset = function reset() {
	    if (this.states) {
	        this.head   = this.states.head;
	        this.tail   = this.states.tail;
	        this.len    = this.states.len;
	        this.states = this.states.next;
	    } else {
	        this.head = this.tail = new Op(noop$6, 0, 0);
	        this.len  = 0;
	    }
	    return this;
	};

	/**
	 * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
	 * @returns {Writer} `this`
	 */
	Writer$2.prototype.ldelim = function ldelim() {
	    var head = this.head,
	        tail = this.tail,
	        len  = this.len;
	    this.reset().uint32(len);
	    if (len) {
	        this.tail.next = head.next; // skip noop
	        this.tail = tail;
	        this.len += len;
	    }
	    return this;
	};

	/**
	 * Finishes the write operation.
	 * @returns {Uint8Array} Finished buffer
	 */
	Writer$2.prototype.finish = function finish() {
	    var head = this.head.next, // skip noop
	        buf  = this.constructor.alloc(this.len),
	        pos  = 0;
	    while (head) {
	        head.fn(head.val, buf, pos);
	        pos += head.len;
	        head = head.next;
	    }
	    // this.head = this.tail = null;
	    return buf;
	};

	Writer$2._configure = function(BufferWriter_) {
	    BufferWriter$1 = BufferWriter_;
	    Writer$2.create = create$9();
	    BufferWriter$1._configure();
	};

	var writer_buffer = BufferWriter;

	// extends Writer
	var Writer$1 = writer;
	(BufferWriter.prototype = Object.create(Writer$1.prototype)).constructor = BufferWriter;

	var util$c = minimal$1;

	/**
	 * Constructs a new buffer writer instance.
	 * @classdesc Wire format writer using node buffers.
	 * @extends Writer
	 * @constructor
	 */
	function BufferWriter() {
	    Writer$1.call(this);
	}

	BufferWriter._configure = function () {
	    /**
	     * Allocates a buffer of the specified size.
	     * @function
	     * @param {number} size Buffer size
	     * @returns {Buffer} Buffer
	     */
	    BufferWriter.alloc = util$c._Buffer_allocUnsafe;

	    BufferWriter.writeBytesBuffer = util$c.Buffer && util$c.Buffer.prototype instanceof Uint8Array && util$c.Buffer.prototype.set.name === "set"
	        ? function writeBytesBuffer_set(val, buf, pos) {
	          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
	          // also works for plain array values
	        }
	        /* istanbul ignore next */
	        : function writeBytesBuffer_copy(val, buf, pos) {
	          if (val.copy) // Buffer values
	            val.copy(buf, pos, 0, val.length);
	          else for (var i = 0; i < val.length;) // plain array values
	            buf[pos++] = val[i++];
	        };
	};


	/**
	 * @override
	 */
	BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
	    if (util$c.isString(value))
	        value = util$c._Buffer_from(value, "base64");
	    var len = value.length >>> 0;
	    this.uint32(len);
	    if (len)
	        this._push(BufferWriter.writeBytesBuffer, len, value);
	    return this;
	};

	function writeStringBuffer(val, buf, pos) {
	    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
	        util$c.utf8.write(val, buf, pos);
	    else if (buf.utf8Write)
	        buf.utf8Write(val, pos);
	    else
	        buf.write(val, pos);
	}

	/**
	 * @override
	 */
	BufferWriter.prototype.string = function write_string_buffer(value) {
	    var len = util$c.Buffer.byteLength(value);
	    this.uint32(len);
	    if (len)
	        this._push(writeStringBuffer, len, value);
	    return this;
	};


	/**
	 * Finishes the write operation.
	 * @name BufferWriter#finish
	 * @function
	 * @returns {Buffer} Finished buffer
	 */

	BufferWriter._configure();

	var reader = Reader$3;

	var util$b      = minimal$1;

	var BufferReader$1; // cyclic

	var LongBits  = util$b.LongBits,
	    utf8      = util$b.utf8;

	/* istanbul ignore next */
	function indexOutOfRange(reader, writeLength) {
	    return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
	}

	/**
	 * Constructs a new reader instance using the specified buffer.
	 * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
	 * @constructor
	 * @param {Uint8Array} buffer Buffer to read from
	 */
	function Reader$3(buffer) {

	    /**
	     * Read buffer.
	     * @type {Uint8Array}
	     */
	    this.buf = buffer;

	    /**
	     * Read buffer position.
	     * @type {number}
	     */
	    this.pos = 0;

	    /**
	     * Read buffer length.
	     * @type {number}
	     */
	    this.len = buffer.length;
	}

	var create_array = typeof Uint8Array !== "undefined"
	    ? function create_typed_array(buffer) {
	        if (buffer instanceof Uint8Array || Array.isArray(buffer))
	            return new Reader$3(buffer);
	        throw Error("illegal buffer");
	    }
	    /* istanbul ignore next */
	    : function create_array(buffer) {
	        if (Array.isArray(buffer))
	            return new Reader$3(buffer);
	        throw Error("illegal buffer");
	    };

	var create$8 = function create() {
	    return util$b.Buffer
	        ? function create_buffer_setup(buffer) {
	            return (Reader$3.create = function create_buffer(buffer) {
	                return util$b.Buffer.isBuffer(buffer)
	                    ? new BufferReader$1(buffer)
	                    /* istanbul ignore next */
	                    : create_array(buffer);
	            })(buffer);
	        }
	        /* istanbul ignore next */
	        : create_array;
	};

	/**
	 * Creates a new reader using the specified buffer.
	 * @function
	 * @param {Uint8Array|Buffer} buffer Buffer to read from
	 * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
	 * @throws {Error} If `buffer` is not a valid buffer
	 */
	Reader$3.create = create$8();

	Reader$3.prototype._slice = util$b.Array.prototype.subarray || /* istanbul ignore next */ util$b.Array.prototype.slice;

	/**
	 * Reads a varint as an unsigned 32 bit value.
	 * @function
	 * @returns {number} Value read
	 */
	Reader$3.prototype.uint32 = (function read_uint32_setup() {
	    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
	    return function read_uint32() {
	        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;
	        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;

	        /* istanbul ignore if */
	        if ((this.pos += 5) > this.len) {
	            this.pos = this.len;
	            throw indexOutOfRange(this, 10);
	        }
	        return value;
	    };
	})();

	/**
	 * Reads a varint as a signed 32 bit value.
	 * @returns {number} Value read
	 */
	Reader$3.prototype.int32 = function read_int32() {
	    return this.uint32() | 0;
	};

	/**
	 * Reads a zig-zag encoded varint as a signed 32 bit value.
	 * @returns {number} Value read
	 */
	Reader$3.prototype.sint32 = function read_sint32() {
	    var value = this.uint32();
	    return value >>> 1 ^ -(value & 1) | 0;
	};

	/* eslint-disable no-invalid-this */

	function readLongVarint() {
	    // tends to deopt with local vars for octet etc.
	    var bits = new LongBits(0, 0);
	    var i = 0;
	    if (this.len - this.pos > 4) { // fast route (lo)
	        for (; i < 4; ++i) {
	            // 1st..4th
	            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
	            if (this.buf[this.pos++] < 128)
	                return bits;
	        }
	        // 5th
	        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
	        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;
	        if (this.buf[this.pos++] < 128)
	            return bits;
	        i = 0;
	    } else {
	        for (; i < 3; ++i) {
	            /* istanbul ignore if */
	            if (this.pos >= this.len)
	                throw indexOutOfRange(this);
	            // 1st..3th
	            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
	            if (this.buf[this.pos++] < 128)
	                return bits;
	        }
	        // 4th
	        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
	        return bits;
	    }
	    if (this.len - this.pos > 4) { // fast route (hi)
	        for (; i < 5; ++i) {
	            // 6th..10th
	            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
	            if (this.buf[this.pos++] < 128)
	                return bits;
	        }
	    } else {
	        for (; i < 5; ++i) {
	            /* istanbul ignore if */
	            if (this.pos >= this.len)
	                throw indexOutOfRange(this);
	            // 6th..10th
	            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
	            if (this.buf[this.pos++] < 128)
	                return bits;
	        }
	    }
	    /* istanbul ignore next */
	    throw Error("invalid varint encoding");
	}

	/* eslint-enable no-invalid-this */

	/**
	 * Reads a varint as a signed 64 bit value.
	 * @name Reader#int64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a varint as an unsigned 64 bit value.
	 * @name Reader#uint64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a zig-zag encoded varint as a signed 64 bit value.
	 * @name Reader#sint64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a varint as a boolean.
	 * @returns {boolean} Value read
	 */
	Reader$3.prototype.bool = function read_bool() {
	    return this.uint32() !== 0;
	};

	function readFixed32_end(buf, end) { // note that this uses `end`, not `pos`
	    return (buf[end - 4]
	          | buf[end - 3] << 8
	          | buf[end - 2] << 16
	          | buf[end - 1] << 24) >>> 0;
	}

	/**
	 * Reads fixed 32 bits as an unsigned 32 bit integer.
	 * @returns {number} Value read
	 */
	Reader$3.prototype.fixed32 = function read_fixed32() {

	    /* istanbul ignore if */
	    if (this.pos + 4 > this.len)
	        throw indexOutOfRange(this, 4);

	    return readFixed32_end(this.buf, this.pos += 4);
	};

	/**
	 * Reads fixed 32 bits as a signed 32 bit integer.
	 * @returns {number} Value read
	 */
	Reader$3.prototype.sfixed32 = function read_sfixed32() {

	    /* istanbul ignore if */
	    if (this.pos + 4 > this.len)
	        throw indexOutOfRange(this, 4);

	    return readFixed32_end(this.buf, this.pos += 4) | 0;
	};

	/* eslint-disable no-invalid-this */

	function readFixed64(/* this: Reader */) {

	    /* istanbul ignore if */
	    if (this.pos + 8 > this.len)
	        throw indexOutOfRange(this, 8);

	    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
	}

	/* eslint-enable no-invalid-this */

	/**
	 * Reads fixed 64 bits.
	 * @name Reader#fixed64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads zig-zag encoded fixed 64 bits.
	 * @name Reader#sfixed64
	 * @function
	 * @returns {Long} Value read
	 */

	/**
	 * Reads a float (32 bit) as a number.
	 * @function
	 * @returns {number} Value read
	 */
	Reader$3.prototype.float = function read_float() {

	    /* istanbul ignore if */
	    if (this.pos + 4 > this.len)
	        throw indexOutOfRange(this, 4);

	    var value = util$b.float.readFloatLE(this.buf, this.pos);
	    this.pos += 4;
	    return value;
	};

	/**
	 * Reads a double (64 bit float) as a number.
	 * @function
	 * @returns {number} Value read
	 */
	Reader$3.prototype.double = function read_double() {

	    /* istanbul ignore if */
	    if (this.pos + 8 > this.len)
	        throw indexOutOfRange(this, 4);

	    var value = util$b.float.readDoubleLE(this.buf, this.pos);
	    this.pos += 8;
	    return value;
	};

	/**
	 * Reads a sequence of bytes preceeded by its length as a varint.
	 * @returns {Uint8Array} Value read
	 */
	Reader$3.prototype.bytes = function read_bytes() {
	    var length = this.uint32(),
	        start  = this.pos,
	        end    = this.pos + length;

	    /* istanbul ignore if */
	    if (end > this.len)
	        throw indexOutOfRange(this, length);

	    this.pos += length;
	    if (Array.isArray(this.buf)) // plain array
	        return this.buf.slice(start, end);
	    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
	        ? new this.buf.constructor(0)
	        : this._slice.call(this.buf, start, end);
	};

	/**
	 * Reads a string preceeded by its byte length as a varint.
	 * @returns {string} Value read
	 */
	Reader$3.prototype.string = function read_string() {
	    var bytes = this.bytes();
	    return utf8.read(bytes, 0, bytes.length);
	};

	/**
	 * Skips the specified number of bytes if specified, otherwise skips a varint.
	 * @param {number} [length] Length if known, otherwise a varint is assumed
	 * @returns {Reader} `this`
	 */
	Reader$3.prototype.skip = function skip(length) {
	    if (typeof length === "number") {
	        /* istanbul ignore if */
	        if (this.pos + length > this.len)
	            throw indexOutOfRange(this, length);
	        this.pos += length;
	    } else {
	        do {
	            /* istanbul ignore if */
	            if (this.pos >= this.len)
	                throw indexOutOfRange(this);
	        } while (this.buf[this.pos++] & 128);
	    }
	    return this;
	};

	/**
	 * Skips the next element of the specified wire type.
	 * @param {number} wireType Wire type received
	 * @returns {Reader} `this`
	 */
	Reader$3.prototype.skipType = function(wireType) {
	    switch (wireType) {
	        case 0:
	            this.skip();
	            break;
	        case 1:
	            this.skip(8);
	            break;
	        case 2:
	            this.skip(this.uint32());
	            break;
	        case 3:
	            while ((wireType = this.uint32() & 7) !== 4) {
	                this.skipType(wireType);
	            }
	            break;
	        case 5:
	            this.skip(4);
	            break;

	        /* istanbul ignore next */
	        default:
	            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
	    }
	    return this;
	};

	Reader$3._configure = function(BufferReader_) {
	    BufferReader$1 = BufferReader_;
	    Reader$3.create = create$8();
	    BufferReader$1._configure();

	    var fn = util$b.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
	    util$b.merge(Reader$3.prototype, {

	        int64: function read_int64() {
	            return readLongVarint.call(this)[fn](false);
	        },

	        uint64: function read_uint64() {
	            return readLongVarint.call(this)[fn](true);
	        },

	        sint64: function read_sint64() {
	            return readLongVarint.call(this).zzDecode()[fn](false);
	        },

	        fixed64: function read_fixed64() {
	            return readFixed64.call(this)[fn](true);
	        },

	        sfixed64: function read_sfixed64() {
	            return readFixed64.call(this)[fn](false);
	        }

	    });
	};

	var reader_buffer = BufferReader;

	// extends Reader
	var Reader$2 = reader;
	(BufferReader.prototype = Object.create(Reader$2.prototype)).constructor = BufferReader;

	var util$a = minimal$1;

	/**
	 * Constructs a new buffer reader instance.
	 * @classdesc Wire format reader using node buffers.
	 * @extends Reader
	 * @constructor
	 * @param {Buffer} buffer Buffer to read from
	 */
	function BufferReader(buffer) {
	    Reader$2.call(this, buffer);

	    /**
	     * Read buffer.
	     * @name BufferReader#buf
	     * @type {Buffer}
	     */
	}

	BufferReader._configure = function () {
	    /* istanbul ignore else */
	    if (util$a.Buffer)
	        BufferReader.prototype._slice = util$a.Buffer.prototype.slice;
	};


	/**
	 * @override
	 */
	BufferReader.prototype.string = function read_string_buffer() {
	    var len = this.uint32(); // modifies pos
	    return this.buf.utf8Slice
	        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))
	        : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
	};

	/**
	 * Reads a sequence of bytes preceeded by its length as a varint.
	 * @name BufferReader#bytes
	 * @function
	 * @returns {Buffer} Value read
	 */

	BufferReader._configure();

	var rpc$3 = {};

	var service = Service$1;

	var util$9 = minimal$1;

	// Extends EventEmitter
	(Service$1.prototype = Object.create(util$9.EventEmitter.prototype)).constructor = Service$1;

	/**
	 * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
	 *
	 * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
	 * @typedef rpc.ServiceMethodCallback
	 * @template TRes extends Message<TRes>
	 * @type {function}
	 * @param {Error|null} error Error, if any
	 * @param {TRes} [response] Response message
	 * @returns {undefined}
	 */

	/**
	 * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
	 * @typedef rpc.ServiceMethod
	 * @template TReq extends Message<TReq>
	 * @template TRes extends Message<TRes>
	 * @type {function}
	 * @param {TReq|Properties<TReq>} request Request message or plain object
	 * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
	 * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
	 */

	/**
	 * Constructs a new RPC service instance.
	 * @classdesc An RPC service as returned by {@link Service#create}.
	 * @exports rpc.Service
	 * @extends util.EventEmitter
	 * @constructor
	 * @param {RPCImpl} rpcImpl RPC implementation
	 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
	 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
	 */
	function Service$1(rpcImpl, requestDelimited, responseDelimited) {

	    if (typeof rpcImpl !== "function")
	        throw TypeError("rpcImpl must be a function");

	    util$9.EventEmitter.call(this);

	    /**
	     * RPC implementation. Becomes `null` once the service is ended.
	     * @type {RPCImpl|null}
	     */
	    this.rpcImpl = rpcImpl;

	    /**
	     * Whether requests are length-delimited.
	     * @type {boolean}
	     */
	    this.requestDelimited = Boolean(requestDelimited);

	    /**
	     * Whether responses are length-delimited.
	     * @type {boolean}
	     */
	    this.responseDelimited = Boolean(responseDelimited);
	}

	/**
	 * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
	 * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
	 * @param {Constructor<TReq>} requestCtor Request constructor
	 * @param {Constructor<TRes>} responseCtor Response constructor
	 * @param {TReq|Properties<TReq>} request Request message or plain object
	 * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
	 * @returns {undefined}
	 * @template TReq extends Message<TReq>
	 * @template TRes extends Message<TRes>
	 */
	Service$1.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {

	    if (!request)
	        throw TypeError("request must be specified");

	    var self = this;
	    if (!callback)
	        return util$9.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

	    if (!self.rpcImpl) {
	        setTimeout(function() { callback(Error("already ended")); }, 0);
	        return undefined;
	    }

	    try {
	        return self.rpcImpl(
	            method,
	            requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
	            function rpcCallback(err, response) {

	                if (err) {
	                    self.emit("error", err, method);
	                    return callback(err);
	                }

	                if (response === null) {
	                    self.end(/* endedByRPC */ true);
	                    return undefined;
	                }

	                if (!(response instanceof responseCtor)) {
	                    try {
	                        response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
	                    } catch (err) {
	                        self.emit("error", err, method);
	                        return callback(err);
	                    }
	                }

	                self.emit("data", response, method);
	                return callback(null, response);
	            }
	        );
	    } catch (err) {
	        self.emit("error", err, method);
	        setTimeout(function() { callback(err); }, 0);
	        return undefined;
	    }
	};

	/**
	 * Ends this service and emits the `end` event.
	 * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
	 * @returns {rpc.Service} `this`
	 */
	Service$1.prototype.end = function end(endedByRPC) {
	    if (this.rpcImpl) {
	        if (!endedByRPC) // signal end to rpcImpl
	            this.rpcImpl(null, null, null);
	        this.rpcImpl = null;
	        this.emit("end").off();
	    }
	    return this;
	};

	(function (exports) {

	/**
	 * Streaming RPC helpers.
	 * @namespace
	 */
	var rpc = exports;

	/**
	 * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
	 * @typedef RPCImpl
	 * @type {function}
	 * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
	 * @param {Uint8Array} requestData Request data
	 * @param {RPCImplCallback} callback Callback function
	 * @returns {undefined}
	 * @example
	 * function rpcImpl(method, requestData, callback) {
	 *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
	 *         throw Error("no such method");
	 *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
	 *         callback(err, responseData);
	 *     });
	 * }
	 */

	/**
	 * Node-style callback as used by {@link RPCImpl}.
	 * @typedef RPCImplCallback
	 * @type {function}
	 * @param {Error|null} error Error, if any, otherwise `null`
	 * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
	 * @returns {undefined}
	 */

	rpc.Service = service;
	}(rpc$3));

	var roots = {};

	(function (exports) {
	var protobuf = exports;

	/**
	 * Build type, one of `"full"`, `"light"` or `"minimal"`.
	 * @name build
	 * @type {string}
	 * @const
	 */
	protobuf.build = "minimal";

	// Serialization
	protobuf.Writer       = writer;
	protobuf.BufferWriter = writer_buffer;
	protobuf.Reader       = reader;
	protobuf.BufferReader = reader_buffer;

	// Utility
	protobuf.util         = minimal$1;
	protobuf.rpc          = rpc$3;
	protobuf.roots        = roots;
	protobuf.configure    = configure;

	/* istanbul ignore next */
	/**
	 * Reconfigures the library according to the environment.
	 * @returns {undefined}
	 */
	function configure() {
	    protobuf.util._configure();
	    protobuf.Writer._configure(protobuf.BufferWriter);
	    protobuf.Reader._configure(protobuf.BufferReader);
	}

	// Set up buffer utility according to the environment
	configure();
	}(indexMinimal));

	var minimal = indexMinimal;

	const $Reader$j = minimal.Reader, $Writer$j = minimal.Writer, $util$i = minimal.util;
	const $root$j = minimal.roots['ipfs-unixfs'] || (minimal.roots['ipfs-unixfs'] = {});
	const Data = $root$j.Data = (() => {
	  function Data(p) {
	    this.blocksizes = [];
	    if (p)
	      for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	        if (p[ks[i]] != null)
	          this[ks[i]] = p[ks[i]];
	  }
	  Data.prototype.Type = 0;
	  Data.prototype.Data = $util$i.newBuffer([]);
	  Data.prototype.filesize = $util$i.Long ? $util$i.Long.fromBits(0, 0, true) : 0;
	  Data.prototype.blocksizes = $util$i.emptyArray;
	  Data.prototype.hashType = $util$i.Long ? $util$i.Long.fromBits(0, 0, true) : 0;
	  Data.prototype.fanout = $util$i.Long ? $util$i.Long.fromBits(0, 0, true) : 0;
	  Data.prototype.mode = 0;
	  Data.prototype.mtime = null;
	  Data.encode = function encode(m, w) {
	    if (!w)
	      w = $Writer$j.create();
	    w.uint32(8).int32(m.Type);
	    if (m.Data != null && Object.hasOwnProperty.call(m, 'Data'))
	      w.uint32(18).bytes(m.Data);
	    if (m.filesize != null && Object.hasOwnProperty.call(m, 'filesize'))
	      w.uint32(24).uint64(m.filesize);
	    if (m.blocksizes != null && m.blocksizes.length) {
	      for (var i = 0; i < m.blocksizes.length; ++i)
	        w.uint32(32).uint64(m.blocksizes[i]);
	    }
	    if (m.hashType != null && Object.hasOwnProperty.call(m, 'hashType'))
	      w.uint32(40).uint64(m.hashType);
	    if (m.fanout != null && Object.hasOwnProperty.call(m, 'fanout'))
	      w.uint32(48).uint64(m.fanout);
	    if (m.mode != null && Object.hasOwnProperty.call(m, 'mode'))
	      w.uint32(56).uint32(m.mode);
	    if (m.mtime != null && Object.hasOwnProperty.call(m, 'mtime'))
	      $root$j.UnixTime.encode(m.mtime, w.uint32(66).fork()).ldelim();
	    return w;
	  };
	  Data.decode = function decode(r, l) {
	    if (!(r instanceof $Reader$j))
	      r = $Reader$j.create(r);
	    var c = l === undefined ? r.len : r.pos + l, m = new $root$j.Data();
	    while (r.pos < c) {
	      var t = r.uint32();
	      switch (t >>> 3) {
	      case 1:
	        m.Type = r.int32();
	        break;
	      case 2:
	        m.Data = r.bytes();
	        break;
	      case 3:
	        m.filesize = r.uint64();
	        break;
	      case 4:
	        if (!(m.blocksizes && m.blocksizes.length))
	          m.blocksizes = [];
	        if ((t & 7) === 2) {
	          var c2 = r.uint32() + r.pos;
	          while (r.pos < c2)
	            m.blocksizes.push(r.uint64());
	        } else
	          m.blocksizes.push(r.uint64());
	        break;
	      case 5:
	        m.hashType = r.uint64();
	        break;
	      case 6:
	        m.fanout = r.uint64();
	        break;
	      case 7:
	        m.mode = r.uint32();
	        break;
	      case 8:
	        m.mtime = $root$j.UnixTime.decode(r, r.uint32());
	        break;
	      default:
	        r.skipType(t & 7);
	        break;
	      }
	    }
	    if (!m.hasOwnProperty('Type'))
	      throw $util$i.ProtocolError('missing required \'Type\'', { instance: m });
	    return m;
	  };
	  Data.fromObject = function fromObject(d) {
	    if (d instanceof $root$j.Data)
	      return d;
	    var m = new $root$j.Data();
	    switch (d.Type) {
	    case 'Raw':
	    case 0:
	      m.Type = 0;
	      break;
	    case 'Directory':
	    case 1:
	      m.Type = 1;
	      break;
	    case 'File':
	    case 2:
	      m.Type = 2;
	      break;
	    case 'Metadata':
	    case 3:
	      m.Type = 3;
	      break;
	    case 'Symlink':
	    case 4:
	      m.Type = 4;
	      break;
	    case 'HAMTShard':
	    case 5:
	      m.Type = 5;
	      break;
	    }
	    if (d.Data != null) {
	      if (typeof d.Data === 'string')
	        $util$i.base64.decode(d.Data, m.Data = $util$i.newBuffer($util$i.base64.length(d.Data)), 0);
	      else if (d.Data.length)
	        m.Data = d.Data;
	    }
	    if (d.filesize != null) {
	      if ($util$i.Long)
	        (m.filesize = $util$i.Long.fromValue(d.filesize)).unsigned = true;
	      else if (typeof d.filesize === 'string')
	        m.filesize = parseInt(d.filesize, 10);
	      else if (typeof d.filesize === 'number')
	        m.filesize = d.filesize;
	      else if (typeof d.filesize === 'object')
	        m.filesize = new $util$i.LongBits(d.filesize.low >>> 0, d.filesize.high >>> 0).toNumber(true);
	    }
	    if (d.blocksizes) {
	      if (!Array.isArray(d.blocksizes))
	        throw TypeError('.Data.blocksizes: array expected');
	      m.blocksizes = [];
	      for (var i = 0; i < d.blocksizes.length; ++i) {
	        if ($util$i.Long)
	          (m.blocksizes[i] = $util$i.Long.fromValue(d.blocksizes[i])).unsigned = true;
	        else if (typeof d.blocksizes[i] === 'string')
	          m.blocksizes[i] = parseInt(d.blocksizes[i], 10);
	        else if (typeof d.blocksizes[i] === 'number')
	          m.blocksizes[i] = d.blocksizes[i];
	        else if (typeof d.blocksizes[i] === 'object')
	          m.blocksizes[i] = new $util$i.LongBits(d.blocksizes[i].low >>> 0, d.blocksizes[i].high >>> 0).toNumber(true);
	      }
	    }
	    if (d.hashType != null) {
	      if ($util$i.Long)
	        (m.hashType = $util$i.Long.fromValue(d.hashType)).unsigned = true;
	      else if (typeof d.hashType === 'string')
	        m.hashType = parseInt(d.hashType, 10);
	      else if (typeof d.hashType === 'number')
	        m.hashType = d.hashType;
	      else if (typeof d.hashType === 'object')
	        m.hashType = new $util$i.LongBits(d.hashType.low >>> 0, d.hashType.high >>> 0).toNumber(true);
	    }
	    if (d.fanout != null) {
	      if ($util$i.Long)
	        (m.fanout = $util$i.Long.fromValue(d.fanout)).unsigned = true;
	      else if (typeof d.fanout === 'string')
	        m.fanout = parseInt(d.fanout, 10);
	      else if (typeof d.fanout === 'number')
	        m.fanout = d.fanout;
	      else if (typeof d.fanout === 'object')
	        m.fanout = new $util$i.LongBits(d.fanout.low >>> 0, d.fanout.high >>> 0).toNumber(true);
	    }
	    if (d.mode != null) {
	      m.mode = d.mode >>> 0;
	    }
	    if (d.mtime != null) {
	      if (typeof d.mtime !== 'object')
	        throw TypeError('.Data.mtime: object expected');
	      m.mtime = $root$j.UnixTime.fromObject(d.mtime);
	    }
	    return m;
	  };
	  Data.toObject = function toObject(m, o) {
	    if (!o)
	      o = {};
	    var d = {};
	    if (o.arrays || o.defaults) {
	      d.blocksizes = [];
	    }
	    if (o.defaults) {
	      d.Type = o.enums === String ? 'Raw' : 0;
	      if (o.bytes === String)
	        d.Data = '';
	      else {
	        d.Data = [];
	        if (o.bytes !== Array)
	          d.Data = $util$i.newBuffer(d.Data);
	      }
	      if ($util$i.Long) {
	        var n = new $util$i.Long(0, 0, true);
	        d.filesize = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	      } else
	        d.filesize = o.longs === String ? '0' : 0;
	      if ($util$i.Long) {
	        var n = new $util$i.Long(0, 0, true);
	        d.hashType = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	      } else
	        d.hashType = o.longs === String ? '0' : 0;
	      if ($util$i.Long) {
	        var n = new $util$i.Long(0, 0, true);
	        d.fanout = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	      } else
	        d.fanout = o.longs === String ? '0' : 0;
	      d.mode = 0;
	      d.mtime = null;
	    }
	    if (m.Type != null && m.hasOwnProperty('Type')) {
	      d.Type = o.enums === String ? $root$j.Data.DataType[m.Type] : m.Type;
	    }
	    if (m.Data != null && m.hasOwnProperty('Data')) {
	      d.Data = o.bytes === String ? $util$i.base64.encode(m.Data, 0, m.Data.length) : o.bytes === Array ? Array.prototype.slice.call(m.Data) : m.Data;
	    }
	    if (m.filesize != null && m.hasOwnProperty('filesize')) {
	      if (typeof m.filesize === 'number')
	        d.filesize = o.longs === String ? String(m.filesize) : m.filesize;
	      else
	        d.filesize = o.longs === String ? $util$i.Long.prototype.toString.call(m.filesize) : o.longs === Number ? new $util$i.LongBits(m.filesize.low >>> 0, m.filesize.high >>> 0).toNumber(true) : m.filesize;
	    }
	    if (m.blocksizes && m.blocksizes.length) {
	      d.blocksizes = [];
	      for (var j = 0; j < m.blocksizes.length; ++j) {
	        if (typeof m.blocksizes[j] === 'number')
	          d.blocksizes[j] = o.longs === String ? String(m.blocksizes[j]) : m.blocksizes[j];
	        else
	          d.blocksizes[j] = o.longs === String ? $util$i.Long.prototype.toString.call(m.blocksizes[j]) : o.longs === Number ? new $util$i.LongBits(m.blocksizes[j].low >>> 0, m.blocksizes[j].high >>> 0).toNumber(true) : m.blocksizes[j];
	      }
	    }
	    if (m.hashType != null && m.hasOwnProperty('hashType')) {
	      if (typeof m.hashType === 'number')
	        d.hashType = o.longs === String ? String(m.hashType) : m.hashType;
	      else
	        d.hashType = o.longs === String ? $util$i.Long.prototype.toString.call(m.hashType) : o.longs === Number ? new $util$i.LongBits(m.hashType.low >>> 0, m.hashType.high >>> 0).toNumber(true) : m.hashType;
	    }
	    if (m.fanout != null && m.hasOwnProperty('fanout')) {
	      if (typeof m.fanout === 'number')
	        d.fanout = o.longs === String ? String(m.fanout) : m.fanout;
	      else
	        d.fanout = o.longs === String ? $util$i.Long.prototype.toString.call(m.fanout) : o.longs === Number ? new $util$i.LongBits(m.fanout.low >>> 0, m.fanout.high >>> 0).toNumber(true) : m.fanout;
	    }
	    if (m.mode != null && m.hasOwnProperty('mode')) {
	      d.mode = m.mode;
	    }
	    if (m.mtime != null && m.hasOwnProperty('mtime')) {
	      d.mtime = $root$j.UnixTime.toObject(m.mtime, o);
	    }
	    return d;
	  };
	  Data.prototype.toJSON = function toJSON() {
	    return this.constructor.toObject(this, minimal.util.toJSONOptions);
	  };
	  Data.DataType = function () {
	    const valuesById = {}, values = Object.create(valuesById);
	    values[valuesById[0] = 'Raw'] = 0;
	    values[valuesById[1] = 'Directory'] = 1;
	    values[valuesById[2] = 'File'] = 2;
	    values[valuesById[3] = 'Metadata'] = 3;
	    values[valuesById[4] = 'Symlink'] = 4;
	    values[valuesById[5] = 'HAMTShard'] = 5;
	    return values;
	  }();
	  return Data;
	})();
	$root$j.UnixTime = (() => {
	  function UnixTime(p) {
	    if (p)
	      for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	        if (p[ks[i]] != null)
	          this[ks[i]] = p[ks[i]];
	  }
	  UnixTime.prototype.Seconds = $util$i.Long ? $util$i.Long.fromBits(0, 0, false) : 0;
	  UnixTime.prototype.FractionalNanoseconds = 0;
	  UnixTime.encode = function encode(m, w) {
	    if (!w)
	      w = $Writer$j.create();
	    w.uint32(8).int64(m.Seconds);
	    if (m.FractionalNanoseconds != null && Object.hasOwnProperty.call(m, 'FractionalNanoseconds'))
	      w.uint32(21).fixed32(m.FractionalNanoseconds);
	    return w;
	  };
	  UnixTime.decode = function decode(r, l) {
	    if (!(r instanceof $Reader$j))
	      r = $Reader$j.create(r);
	    var c = l === undefined ? r.len : r.pos + l, m = new $root$j.UnixTime();
	    while (r.pos < c) {
	      var t = r.uint32();
	      switch (t >>> 3) {
	      case 1:
	        m.Seconds = r.int64();
	        break;
	      case 2:
	        m.FractionalNanoseconds = r.fixed32();
	        break;
	      default:
	        r.skipType(t & 7);
	        break;
	      }
	    }
	    if (!m.hasOwnProperty('Seconds'))
	      throw $util$i.ProtocolError('missing required \'Seconds\'', { instance: m });
	    return m;
	  };
	  UnixTime.fromObject = function fromObject(d) {
	    if (d instanceof $root$j.UnixTime)
	      return d;
	    var m = new $root$j.UnixTime();
	    if (d.Seconds != null) {
	      if ($util$i.Long)
	        (m.Seconds = $util$i.Long.fromValue(d.Seconds)).unsigned = false;
	      else if (typeof d.Seconds === 'string')
	        m.Seconds = parseInt(d.Seconds, 10);
	      else if (typeof d.Seconds === 'number')
	        m.Seconds = d.Seconds;
	      else if (typeof d.Seconds === 'object')
	        m.Seconds = new $util$i.LongBits(d.Seconds.low >>> 0, d.Seconds.high >>> 0).toNumber();
	    }
	    if (d.FractionalNanoseconds != null) {
	      m.FractionalNanoseconds = d.FractionalNanoseconds >>> 0;
	    }
	    return m;
	  };
	  UnixTime.toObject = function toObject(m, o) {
	    if (!o)
	      o = {};
	    var d = {};
	    if (o.defaults) {
	      if ($util$i.Long) {
	        var n = new $util$i.Long(0, 0, false);
	        d.Seconds = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	      } else
	        d.Seconds = o.longs === String ? '0' : 0;
	      d.FractionalNanoseconds = 0;
	    }
	    if (m.Seconds != null && m.hasOwnProperty('Seconds')) {
	      if (typeof m.Seconds === 'number')
	        d.Seconds = o.longs === String ? String(m.Seconds) : m.Seconds;
	      else
	        d.Seconds = o.longs === String ? $util$i.Long.prototype.toString.call(m.Seconds) : o.longs === Number ? new $util$i.LongBits(m.Seconds.low >>> 0, m.Seconds.high >>> 0).toNumber() : m.Seconds;
	    }
	    if (m.FractionalNanoseconds != null && m.hasOwnProperty('FractionalNanoseconds')) {
	      d.FractionalNanoseconds = m.FractionalNanoseconds;
	    }
	    return d;
	  };
	  UnixTime.prototype.toJSON = function toJSON() {
	    return this.constructor.toObject(this, minimal.util.toJSONOptions);
	  };
	  return UnixTime;
	})();
	$root$j.Metadata = (() => {
	  function Metadata(p) {
	    if (p)
	      for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	        if (p[ks[i]] != null)
	          this[ks[i]] = p[ks[i]];
	  }
	  Metadata.prototype.MimeType = '';
	  Metadata.encode = function encode(m, w) {
	    if (!w)
	      w = $Writer$j.create();
	    if (m.MimeType != null && Object.hasOwnProperty.call(m, 'MimeType'))
	      w.uint32(10).string(m.MimeType);
	    return w;
	  };
	  Metadata.decode = function decode(r, l) {
	    if (!(r instanceof $Reader$j))
	      r = $Reader$j.create(r);
	    var c = l === undefined ? r.len : r.pos + l, m = new $root$j.Metadata();
	    while (r.pos < c) {
	      var t = r.uint32();
	      switch (t >>> 3) {
	      case 1:
	        m.MimeType = r.string();
	        break;
	      default:
	        r.skipType(t & 7);
	        break;
	      }
	    }
	    return m;
	  };
	  Metadata.fromObject = function fromObject(d) {
	    if (d instanceof $root$j.Metadata)
	      return d;
	    var m = new $root$j.Metadata();
	    if (d.MimeType != null) {
	      m.MimeType = String(d.MimeType);
	    }
	    return m;
	  };
	  Metadata.toObject = function toObject(m, o) {
	    if (!o)
	      o = {};
	    var d = {};
	    if (o.defaults) {
	      d.MimeType = '';
	    }
	    if (m.MimeType != null && m.hasOwnProperty('MimeType')) {
	      d.MimeType = m.MimeType;
	    }
	    return d;
	  };
	  Metadata.prototype.toJSON = function toJSON() {
	    return this.constructor.toObject(this, minimal.util.toJSONOptions);
	  };
	  return Metadata;
	})();

	const PBData = Data;
	const types$1 = [
	  'raw',
	  'directory',
	  'file',
	  'metadata',
	  'symlink',
	  'hamt-sharded-directory'
	];
	const dirTypes = [
	  'directory',
	  'hamt-sharded-directory'
	];
	const DEFAULT_FILE_MODE = parseInt('0644', 8);
	const DEFAULT_DIRECTORY_MODE = parseInt('0755', 8);
	function parseMode(mode) {
	  if (mode == null) {
	    return undefined;
	  }
	  if (typeof mode === 'number') {
	    return mode & 4095;
	  }
	  mode = mode.toString();
	  if (mode.substring(0, 1) === '0') {
	    return parseInt(mode, 8) & 4095;
	  }
	  return parseInt(mode, 10) & 4095;
	}
	function parseMtime$1(input) {
	  if (input == null) {
	    return undefined;
	  }
	  let mtime;
	  if (input.secs != null) {
	    mtime = {
	      secs: input.secs,
	      nsecs: input.nsecs
	    };
	  }
	  if (input.Seconds != null) {
	    mtime = {
	      secs: input.Seconds,
	      nsecs: input.FractionalNanoseconds
	    };
	  }
	  if (Array.isArray(input)) {
	    mtime = {
	      secs: input[0],
	      nsecs: input[1]
	    };
	  }
	  if (input instanceof Date) {
	    const ms = input.getTime();
	    const secs = Math.floor(ms / 1000);
	    mtime = {
	      secs: secs,
	      nsecs: (ms - secs * 1000) * 1000
	    };
	  }
	  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {
	    return undefined;
	  }
	  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {
	    throw errCode$q(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS');
	  }
	  return mtime;
	}
	class UnixFS {
	  static unmarshal(marshaled) {
	    const message = PBData.decode(marshaled);
	    const decoded = PBData.toObject(message, {
	      defaults: false,
	      arrays: true,
	      longs: Number,
	      objects: false
	    });
	    const data = new UnixFS({
	      type: types$1[decoded.Type],
	      data: decoded.Data,
	      blockSizes: decoded.blocksizes,
	      mode: decoded.mode,
	      mtime: decoded.mtime ? {
	        secs: decoded.mtime.Seconds,
	        nsecs: decoded.mtime.FractionalNanoseconds
	      } : undefined
	    });
	    data._originalMode = decoded.mode || 0;
	    return data;
	  }
	  constructor(options = { type: 'file' }) {
	    const {type, data, blockSizes, hashType, fanout, mtime, mode} = options;
	    if (type && !types$1.includes(type)) {
	      throw errCode$q(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');
	    }
	    this.type = type || 'file';
	    this.data = data;
	    this.hashType = hashType;
	    this.fanout = fanout;
	    this.blockSizes = blockSizes || [];
	    this._originalMode = 0;
	    this.mode = parseMode(mode);
	    if (mtime) {
	      this.mtime = parseMtime$1(mtime);
	      if (this.mtime && !this.mtime.nsecs) {
	        this.mtime.nsecs = 0;
	      }
	    }
	  }
	  set mode(mode) {
	    this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE;
	    const parsedMode = parseMode(mode);
	    if (parsedMode !== undefined) {
	      this._mode = parsedMode;
	    }
	  }
	  get mode() {
	    return this._mode;
	  }
	  isDirectory() {
	    return Boolean(this.type && dirTypes.includes(this.type));
	  }
	  addBlockSize(size) {
	    this.blockSizes.push(size);
	  }
	  removeBlockSize(index) {
	    this.blockSizes.splice(index, 1);
	  }
	  fileSize() {
	    if (this.isDirectory()) {
	      return 0;
	    }
	    let sum = 0;
	    this.blockSizes.forEach(size => {
	      sum += size;
	    });
	    if (this.data) {
	      sum += this.data.length;
	    }
	    return sum;
	  }
	  marshal() {
	    let type;
	    switch (this.type) {
	    case 'raw':
	      type = PBData.DataType.Raw;
	      break;
	    case 'directory':
	      type = PBData.DataType.Directory;
	      break;
	    case 'file':
	      type = PBData.DataType.File;
	      break;
	    case 'metadata':
	      type = PBData.DataType.Metadata;
	      break;
	    case 'symlink':
	      type = PBData.DataType.Symlink;
	      break;
	    case 'hamt-sharded-directory':
	      type = PBData.DataType.HAMTShard;
	      break;
	    default:
	      throw errCode$q(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');
	    }
	    let data = this.data;
	    if (!this.data || !this.data.length) {
	      data = undefined;
	    }
	    let mode;
	    if (this.mode != null) {
	      mode = this._originalMode & 4294963200 | (parseMode(this.mode) || 0);
	      if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {
	        mode = undefined;
	      }
	      if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {
	        mode = undefined;
	      }
	    }
	    let mtime;
	    if (this.mtime != null) {
	      const parsed = parseMtime$1(this.mtime);
	      if (parsed) {
	        mtime = {
	          Seconds: parsed.secs,
	          FractionalNanoseconds: parsed.nsecs
	        };
	        if (mtime.FractionalNanoseconds === 0) {
	          delete mtime.FractionalNanoseconds;
	        }
	      }
	    }
	    const pbData = {
	      Type: type,
	      Data: data,
	      filesize: this.isDirectory() ? undefined : this.fileSize(),
	      blocksizes: this.blockSizes,
	      hashType: this.hashType,
	      fanout: this.fanout,
	      mode,
	      mtime
	    };
	    return PBData.encode(pbData).finish();
	  }
	}

	var encode_1$3 = encode$m;
	var MSB$4 = 128, REST$4 = 127, MSBALL$2 = ~REST$4, INT$2 = Math.pow(2, 31);
	function encode$m(num, out, offset) {
	  out = out || [];
	  offset = offset || 0;
	  var oldOffset = offset;
	  while (num >= INT$2) {
	    out[offset++] = num & 255 | MSB$4;
	    num /= 128;
	  }
	  while (num & MSBALL$2) {
	    out[offset++] = num & 255 | MSB$4;
	    num >>>= 7;
	  }
	  out[offset] = num | 0;
	  encode$m.bytes = offset - oldOffset + 1;
	  return out;
	}
	var decode$m = read$4;
	var MSB$1$1 = 128, REST$1$1 = 127;
	function read$4(buf, offset) {
	  var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;
	  do {
	    if (counter >= l) {
	      read$4.bytes = 0;
	      throw new RangeError('Could not decode varint');
	    }
	    b = buf[counter++];
	    res += shift < 28 ? (b & REST$1$1) << shift : (b & REST$1$1) * Math.pow(2, shift);
	    shift += 7;
	  } while (b >= MSB$1$1);
	  read$4.bytes = counter - offset;
	  return res;
	}
	var N1$2 = Math.pow(2, 7);
	var N2$2 = Math.pow(2, 14);
	var N3$2 = Math.pow(2, 21);
	var N4$2 = Math.pow(2, 28);
	var N5$2 = Math.pow(2, 35);
	var N6$2 = Math.pow(2, 42);
	var N7$2 = Math.pow(2, 49);
	var N8$2 = Math.pow(2, 56);
	var N9$2 = Math.pow(2, 63);
	var length$6 = function (value) {
	  return value < N1$2 ? 1 : value < N2$2 ? 2 : value < N3$2 ? 3 : value < N4$2 ? 4 : value < N5$2 ? 5 : value < N6$2 ? 6 : value < N7$2 ? 7 : value < N8$2 ? 8 : value < N9$2 ? 9 : 10;
	};
	var varint$a = {
	  encode: encode_1$3,
	  decode: decode$m,
	  encodingLength: length$6
	};
	var _brrp_varint = varint$a;

	const decode$l = data => {
	  const code = _brrp_varint.decode(data);
	  return [
	    code,
	    _brrp_varint.decode.bytes
	  ];
	};
	const encodeTo = (int, target, offset = 0) => {
	  _brrp_varint.encode(int, target, offset);
	  return target;
	};
	const encodingLength = int => {
	  return _brrp_varint.encodingLength(int);
	};

	const empty$4 = new Uint8Array(0);
	const fromHex = hex => {
	  const hexes = hex.match(/../g);
	  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty$4;
	};
	const equals$4 = (aa, bb) => {
	  if (aa === bb)
	    return true;
	  if (aa.byteLength !== bb.byteLength) {
	    return false;
	  }
	  for (let ii = 0; ii < aa.byteLength; ii++) {
	    if (aa[ii] !== bb[ii]) {
	      return false;
	    }
	  }
	  return true;
	};
	const coerce = o => {
	  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')
	    return o;
	  if (o instanceof ArrayBuffer)
	    return new Uint8Array(o);
	  if (ArrayBuffer.isView(o)) {
	    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);
	  }
	  throw new Error('Unknown type, must be binary type');
	};
	const fromString$7 = str => new TextEncoder().encode(str);
	const toString$9 = b => new TextDecoder().decode(b);

	const create$7 = (code, digest) => {
	  const size = digest.byteLength;
	  const sizeOffset = encodingLength(code);
	  const digestOffset = sizeOffset + encodingLength(size);
	  const bytes = new Uint8Array(digestOffset + size);
	  encodeTo(code, bytes, 0);
	  encodeTo(size, bytes, sizeOffset);
	  bytes.set(digest, digestOffset);
	  return new Digest$2(code, size, digest, bytes);
	};
	const decode$k = multihash => {
	  const bytes = coerce(multihash);
	  const [code, sizeOffset] = decode$l(bytes);
	  const [size, digestOffset] = decode$l(bytes.subarray(sizeOffset));
	  const digest = bytes.subarray(sizeOffset + digestOffset);
	  if (digest.byteLength !== size) {
	    throw new Error('Incorrect length');
	  }
	  return new Digest$2(code, size, digest, bytes);
	};
	const equals$3 = (a, b) => {
	  if (a === b) {
	    return true;
	  } else {
	    return a.code === b.code && a.size === b.size && equals$4(a.bytes, b.bytes);
	  }
	};
	class Digest$2 {
	  constructor(code, size, digest, bytes) {
	    this.code = code;
	    this.size = size;
	    this.digest = digest;
	    this.bytes = bytes;
	  }
	}

	var digest$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		create: create$7,
		decode: decode$k,
		equals: equals$3,
		Digest: Digest$2
	});

	function base$1(ALPHABET, name) {
	  if (ALPHABET.length >= 255) {
	    throw new TypeError('Alphabet too long');
	  }
	  var BASE_MAP = new Uint8Array(256);
	  for (var j = 0; j < BASE_MAP.length; j++) {
	    BASE_MAP[j] = 255;
	  }
	  for (var i = 0; i < ALPHABET.length; i++) {
	    var x = ALPHABET.charAt(i);
	    var xc = x.charCodeAt(0);
	    if (BASE_MAP[xc] !== 255) {
	      throw new TypeError(x + ' is ambiguous');
	    }
	    BASE_MAP[xc] = i;
	  }
	  var BASE = ALPHABET.length;
	  var LEADER = ALPHABET.charAt(0);
	  var FACTOR = Math.log(BASE) / Math.log(256);
	  var iFACTOR = Math.log(256) / Math.log(BASE);
	  function encode(source) {
	    if (source instanceof Uint8Array);
	    else if (ArrayBuffer.isView(source)) {
	      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
	    } else if (Array.isArray(source)) {
	      source = Uint8Array.from(source);
	    }
	    if (!(source instanceof Uint8Array)) {
	      throw new TypeError('Expected Uint8Array');
	    }
	    if (source.length === 0) {
	      return '';
	    }
	    var zeroes = 0;
	    var length = 0;
	    var pbegin = 0;
	    var pend = source.length;
	    while (pbegin !== pend && source[pbegin] === 0) {
	      pbegin++;
	      zeroes++;
	    }
	    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
	    var b58 = new Uint8Array(size);
	    while (pbegin !== pend) {
	      var carry = source[pbegin];
	      var i = 0;
	      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {
	        carry += 256 * b58[it1] >>> 0;
	        b58[it1] = carry % BASE >>> 0;
	        carry = carry / BASE >>> 0;
	      }
	      if (carry !== 0) {
	        throw new Error('Non-zero carry');
	      }
	      length = i;
	      pbegin++;
	    }
	    var it2 = size - length;
	    while (it2 !== size && b58[it2] === 0) {
	      it2++;
	    }
	    var str = LEADER.repeat(zeroes);
	    for (; it2 < size; ++it2) {
	      str += ALPHABET.charAt(b58[it2]);
	    }
	    return str;
	  }
	  function decodeUnsafe(source) {
	    if (typeof source !== 'string') {
	      throw new TypeError('Expected String');
	    }
	    if (source.length === 0) {
	      return new Uint8Array();
	    }
	    var psz = 0;
	    if (source[psz] === ' ') {
	      return;
	    }
	    var zeroes = 0;
	    var length = 0;
	    while (source[psz] === LEADER) {
	      zeroes++;
	      psz++;
	    }
	    var size = (source.length - psz) * FACTOR + 1 >>> 0;
	    var b256 = new Uint8Array(size);
	    while (source[psz]) {
	      var carry = BASE_MAP[source.charCodeAt(psz)];
	      if (carry === 255) {
	        return;
	      }
	      var i = 0;
	      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {
	        carry += BASE * b256[it3] >>> 0;
	        b256[it3] = carry % 256 >>> 0;
	        carry = carry / 256 >>> 0;
	      }
	      if (carry !== 0) {
	        throw new Error('Non-zero carry');
	      }
	      length = i;
	      psz++;
	    }
	    if (source[psz] === ' ') {
	      return;
	    }
	    var it4 = size - length;
	    while (it4 !== size && b256[it4] === 0) {
	      it4++;
	    }
	    var vch = new Uint8Array(zeroes + (size - it4));
	    var j = zeroes;
	    while (it4 !== size) {
	      vch[j++] = b256[it4++];
	    }
	    return vch;
	  }
	  function decode(string) {
	    var buffer = decodeUnsafe(string);
	    if (buffer) {
	      return buffer;
	    }
	    throw new Error(`Non-${ name } character`);
	  }
	  return {
	    encode: encode,
	    decodeUnsafe: decodeUnsafe,
	    decode: decode
	  };
	}
	var src$t = base$1;
	var _brrp__multiformats_scope_baseX = src$t;

	class Encoder$1 {
	  constructor(name, prefix, baseEncode) {
	    this.name = name;
	    this.prefix = prefix;
	    this.baseEncode = baseEncode;
	  }
	  encode(bytes) {
	    if (bytes instanceof Uint8Array) {
	      return `${ this.prefix }${ this.baseEncode(bytes) }`;
	    } else {
	      throw Error('Unknown type, must be binary type');
	    }
	  }
	}
	class Decoder$1 {
	  constructor(name, prefix, baseDecode) {
	    this.name = name;
	    this.prefix = prefix;
	    this.baseDecode = baseDecode;
	  }
	  decode(text) {
	    if (typeof text === 'string') {
	      switch (text[0]) {
	      case this.prefix: {
	          return this.baseDecode(text.slice(1));
	        }
	      default: {
	          throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);
	        }
	      }
	    } else {
	      throw Error('Can only multibase decode strings');
	    }
	  }
	  or(decoder) {
	    return or$1(this, decoder);
	  }
	}
	class ComposedDecoder {
	  constructor(decoders) {
	    this.decoders = decoders;
	  }
	  or(decoder) {
	    return or$1(this, decoder);
	  }
	  decode(input) {
	    const prefix = input[0];
	    const decoder = this.decoders[prefix];
	    if (decoder) {
	      return decoder.decode(input);
	    } else {
	      throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);
	    }
	  }
	}
	const or$1 = (left, right) => new ComposedDecoder({
	  ...left.decoders || { [left.prefix]: left },
	  ...right.decoders || { [right.prefix]: right }
	});
	class Codec$2 {
	  constructor(name, prefix, baseEncode, baseDecode) {
	    this.name = name;
	    this.prefix = prefix;
	    this.baseEncode = baseEncode;
	    this.baseDecode = baseDecode;
	    this.encoder = new Encoder$1(name, prefix, baseEncode);
	    this.decoder = new Decoder$1(name, prefix, baseDecode);
	  }
	  encode(input) {
	    return this.encoder.encode(input);
	  }
	  decode(input) {
	    return this.decoder.decode(input);
	  }
	}
	const from$3 = ({name, prefix, encode, decode}) => new Codec$2(name, prefix, encode, decode);
	const baseX = ({prefix, name, alphabet}) => {
	  const {encode, decode} = _brrp__multiformats_scope_baseX(alphabet, name);
	  return from$3({
	    prefix,
	    name,
	    encode,
	    decode: text => coerce(decode(text))
	  });
	};
	const decode$j = (string, alphabet, bitsPerChar, name) => {
	  const codes = {};
	  for (let i = 0; i < alphabet.length; ++i) {
	    codes[alphabet[i]] = i;
	  }
	  let end = string.length;
	  while (string[end - 1] === '=') {
	    --end;
	  }
	  const out = new Uint8Array(end * bitsPerChar / 8 | 0);
	  let bits = 0;
	  let buffer = 0;
	  let written = 0;
	  for (let i = 0; i < end; ++i) {
	    const value = codes[string[i]];
	    if (value === undefined) {
	      throw new SyntaxError(`Non-${ name } character`);
	    }
	    buffer = buffer << bitsPerChar | value;
	    bits += bitsPerChar;
	    if (bits >= 8) {
	      bits -= 8;
	      out[written++] = 255 & buffer >> bits;
	    }
	  }
	  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {
	    throw new SyntaxError('Unexpected end of data');
	  }
	  return out;
	};
	const encode$l = (data, alphabet, bitsPerChar) => {
	  const pad = alphabet[alphabet.length - 1] === '=';
	  const mask = (1 << bitsPerChar) - 1;
	  let out = '';
	  let bits = 0;
	  let buffer = 0;
	  for (let i = 0; i < data.length; ++i) {
	    buffer = buffer << 8 | data[i];
	    bits += 8;
	    while (bits > bitsPerChar) {
	      bits -= bitsPerChar;
	      out += alphabet[mask & buffer >> bits];
	    }
	  }
	  if (bits) {
	    out += alphabet[mask & buffer << bitsPerChar - bits];
	  }
	  if (pad) {
	    while (out.length * bitsPerChar & 7) {
	      out += '=';
	    }
	  }
	  return out;
	};
	const rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {
	  return from$3({
	    prefix,
	    name,
	    encode(input) {
	      return encode$l(input, alphabet, bitsPerChar);
	    },
	    decode(input) {
	      return decode$j(input, alphabet, bitsPerChar, name);
	    }
	  });
	};

	const base58btc$6 = baseX({
	  name: 'base58btc',
	  prefix: 'z',
	  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'
	});
	const base58flickr = baseX({
	  name: 'base58flickr',
	  prefix: 'Z',
	  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'
	});

	var base58 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		base58btc: base58btc$6,
		base58flickr: base58flickr
	});

	const base32$4 = rfc4648({
	  prefix: 'b',
	  name: 'base32',
	  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',
	  bitsPerChar: 5
	});
	const base32upper = rfc4648({
	  prefix: 'B',
	  name: 'base32upper',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',
	  bitsPerChar: 5
	});
	const base32pad = rfc4648({
	  prefix: 'c',
	  name: 'base32pad',
	  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',
	  bitsPerChar: 5
	});
	const base32padupper = rfc4648({
	  prefix: 'C',
	  name: 'base32padupper',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',
	  bitsPerChar: 5
	});
	const base32hex = rfc4648({
	  prefix: 'v',
	  name: 'base32hex',
	  alphabet: '0123456789abcdefghijklmnopqrstuv',
	  bitsPerChar: 5
	});
	const base32hexupper = rfc4648({
	  prefix: 'V',
	  name: 'base32hexupper',
	  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',
	  bitsPerChar: 5
	});
	const base32hexpad = rfc4648({
	  prefix: 't',
	  name: 'base32hexpad',
	  alphabet: '0123456789abcdefghijklmnopqrstuv=',
	  bitsPerChar: 5
	});
	const base32hexpadupper = rfc4648({
	  prefix: 'T',
	  name: 'base32hexpadupper',
	  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',
	  bitsPerChar: 5
	});
	const base32z = rfc4648({
	  prefix: 'h',
	  name: 'base32z',
	  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',
	  bitsPerChar: 5
	});

	var base32$5 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		base32: base32$4,
		base32upper: base32upper,
		base32pad: base32pad,
		base32padupper: base32padupper,
		base32hex: base32hex,
		base32hexupper: base32hexupper,
		base32hexpad: base32hexpad,
		base32hexpadupper: base32hexpadupper,
		base32z: base32z
	});

	class CID$6 {
	  constructor(version, code, multihash, bytes) {
	    this.code = code;
	    this.version = version;
	    this.multihash = multihash;
	    this.bytes = bytes;
	    this.byteOffset = bytes.byteOffset;
	    this.byteLength = bytes.byteLength;
	    this.asCID = this;
	    this._baseCache = new Map();
	    Object.defineProperties(this, {
	      byteOffset: hidden,
	      byteLength: hidden,
	      code: readonly$1,
	      version: readonly$1,
	      multihash: readonly$1,
	      bytes: readonly$1,
	      _baseCache: hidden,
	      asCID: hidden
	    });
	  }
	  toV0() {
	    switch (this.version) {
	    case 0: {
	        return this;
	      }
	    default: {
	        const {code, multihash} = this;
	        if (code !== DAG_PB_CODE) {
	          throw new Error('Cannot convert a non dag-pb CID to CIDv0');
	        }
	        if (multihash.code !== SHA_256_CODE) {
	          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');
	        }
	        return CID$6.createV0(multihash);
	      }
	    }
	  }
	  toV1() {
	    switch (this.version) {
	    case 0: {
	        const {code, digest} = this.multihash;
	        const multihash = create$7(code, digest);
	        return CID$6.createV1(this.code, multihash);
	      }
	    case 1: {
	        return this;
	      }
	    default: {
	        throw Error(`Can not convert CID version ${ this.version } to version 0. This is a bug please report`);
	      }
	    }
	  }
	  equals(other) {
	    return other && this.code === other.code && this.version === other.version && equals$3(this.multihash, other.multihash);
	  }
	  toString(base) {
	    const {bytes, version, _baseCache} = this;
	    switch (version) {
	    case 0:
	      return toStringV0(bytes, _baseCache, base || base58btc$6.encoder);
	    default:
	      return toStringV1(bytes, _baseCache, base || base32$4.encoder);
	    }
	  }
	  toJSON() {
	    return {
	      code: this.code,
	      version: this.version,
	      hash: this.multihash.bytes
	    };
	  }
	  get [Symbol.toStringTag]() {
	    return 'CID';
	  }
	  [Symbol.for('nodejs.util.inspect.custom')]() {
	    return 'CID(' + this.toString() + ')';
	  }
	  static isCID(value) {
	    deprecate$2(/^0\.0/, IS_CID_DEPRECATION);
	    return !!(value && (value[cidSymbol] || value.asCID === value));
	  }
	  get toBaseEncodedString() {
	    throw new Error('Deprecated, use .toString()');
	  }
	  get codec() {
	    throw new Error('"codec" property is deprecated, use integer "code" property instead');
	  }
	  get buffer() {
	    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');
	  }
	  get multibaseName() {
	    throw new Error('"multibaseName" property is deprecated');
	  }
	  get prefix() {
	    throw new Error('"prefix" property is deprecated');
	  }
	  static asCID(value) {
	    if (value instanceof CID$6) {
	      return value;
	    } else if (value != null && value.asCID === value) {
	      const {version, code, multihash, bytes} = value;
	      return new CID$6(version, code, multihash, bytes || encodeCID$1(version, code, multihash.bytes));
	    } else if (value != null && value[cidSymbol] === true) {
	      const {version, multihash, code} = value;
	      const digest = decode$k(multihash);
	      return CID$6.create(version, code, digest);
	    } else {
	      return null;
	    }
	  }
	  static create(version, code, digest) {
	    if (typeof code !== 'number') {
	      throw new Error('String codecs are no longer supported');
	    }
	    switch (version) {
	    case 0: {
	        if (code !== DAG_PB_CODE) {
	          throw new Error(`Version 0 CID must use dag-pb (code: ${ DAG_PB_CODE }) block encoding`);
	        } else {
	          return new CID$6(version, code, digest, digest.bytes);
	        }
	      }
	    case 1: {
	        const bytes = encodeCID$1(version, code, digest.bytes);
	        return new CID$6(version, code, digest, bytes);
	      }
	    default: {
	        throw new Error('Invalid version');
	      }
	    }
	  }
	  static createV0(digest) {
	    return CID$6.create(0, DAG_PB_CODE, digest);
	  }
	  static createV1(code, digest) {
	    return CID$6.create(1, code, digest);
	  }
	  static decode(bytes) {
	    const [cid, remainder] = CID$6.decodeFirst(bytes);
	    if (remainder.length) {
	      throw new Error('Incorrect length');
	    }
	    return cid;
	  }
	  static decodeFirst(bytes) {
	    const specs = CID$6.inspectBytes(bytes);
	    const prefixSize = specs.size - specs.multihashSize;
	    const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));
	    if (multihashBytes.byteLength !== specs.multihashSize) {
	      throw new Error('Incorrect length');
	    }
	    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);
	    const digest = new Digest$2(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);
	    const cid = specs.version === 0 ? CID$6.createV0(digest) : CID$6.createV1(specs.codec, digest);
	    return [
	      cid,
	      bytes.subarray(specs.size)
	    ];
	  }
	  static inspectBytes(initialBytes) {
	    let offset = 0;
	    const next = () => {
	      const [i, length] = decode$l(initialBytes.subarray(offset));
	      offset += length;
	      return i;
	    };
	    let version = next();
	    let codec = DAG_PB_CODE;
	    if (version === 18) {
	      version = 0;
	      offset = 0;
	    } else if (version === 1) {
	      codec = next();
	    }
	    if (version !== 0 && version !== 1) {
	      throw new RangeError(`Invalid CID version ${ version }`);
	    }
	    const prefixSize = offset;
	    const multihashCode = next();
	    const digestSize = next();
	    const size = offset + digestSize;
	    const multihashSize = size - prefixSize;
	    return {
	      version,
	      codec,
	      multihashCode,
	      digestSize,
	      multihashSize,
	      size
	    };
	  }
	  static parse(source, base) {
	    const [prefix, bytes] = parseCIDtoBytes(source, base);
	    const cid = CID$6.decode(bytes);
	    cid._baseCache.set(prefix, source);
	    return cid;
	  }
	}
	const parseCIDtoBytes = (source, base) => {
	  switch (source[0]) {
	  case 'Q': {
	      const decoder = base || base58btc$6;
	      return [
	        base58btc$6.prefix,
	        decoder.decode(`${ base58btc$6.prefix }${ source }`)
	      ];
	    }
	  case base58btc$6.prefix: {
	      const decoder = base || base58btc$6;
	      return [
	        base58btc$6.prefix,
	        decoder.decode(source)
	      ];
	    }
	  case base32$4.prefix: {
	      const decoder = base || base32$4;
	      return [
	        base32$4.prefix,
	        decoder.decode(source)
	      ];
	    }
	  default: {
	      if (base == null) {
	        throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');
	      }
	      return [
	        source[0],
	        base.decode(source)
	      ];
	    }
	  }
	};
	const toStringV0 = (bytes, cache, base) => {
	  const {prefix} = base;
	  if (prefix !== base58btc$6.prefix) {
	    throw Error(`Cannot string encode V0 in ${ base.name } encoding`);
	  }
	  const cid = cache.get(prefix);
	  if (cid == null) {
	    const cid = base.encode(bytes).slice(1);
	    cache.set(prefix, cid);
	    return cid;
	  } else {
	    return cid;
	  }
	};
	const toStringV1 = (bytes, cache, base) => {
	  const {prefix} = base;
	  const cid = cache.get(prefix);
	  if (cid == null) {
	    const cid = base.encode(bytes);
	    cache.set(prefix, cid);
	    return cid;
	  } else {
	    return cid;
	  }
	};
	const DAG_PB_CODE = 112;
	const SHA_256_CODE = 18;
	const encodeCID$1 = (version, code, multihash) => {
	  const codeOffset = encodingLength(version);
	  const hashOffset = codeOffset + encodingLength(code);
	  const bytes = new Uint8Array(hashOffset + multihash.byteLength);
	  encodeTo(version, bytes, 0);
	  encodeTo(code, bytes, codeOffset);
	  bytes.set(multihash, hashOffset);
	  return bytes;
	};
	const cidSymbol = Symbol.for('@ipld/js-cid/CID');
	const readonly$1 = {
	  writable: false,
	  configurable: false,
	  enumerable: true
	};
	const hidden = {
	  writable: false,
	  enumerable: false,
	  configurable: false
	};
	const version$2 = '0.0.0-dev';
	const deprecate$2 = (range, message) => {
	  if (range.test(version$2)) ; else {
	    throw new Error(message);
	  }
	};
	const IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.
Following code pattern:

if (CID.isCID(value)) {
  doSomethingWithCID(value)
}

Is replaced with:

const cid = CID.asCID(value)
if (cid) {
  // Make sure to use cid instead of value
  doSomethingWithCID(cid)
}
`;

	var cid = /*#__PURE__*/Object.freeze({
		__proto__: null,
		CID: CID$6
	});

	const textDecoder$2 = new TextDecoder();
	function decodeVarint(bytes, offset) {
	  let v = 0;
	  for (let shift = 0;; shift += 7) {
	    if (shift >= 64) {
	      throw new Error('protobuf: varint overflow');
	    }
	    if (offset >= bytes.length) {
	      throw new Error('protobuf: unexpected end of data');
	    }
	    const b = bytes[offset++];
	    v += shift < 28 ? (b & 127) << shift : (b & 127) * 2 ** shift;
	    if (b < 128) {
	      break;
	    }
	  }
	  return [
	    v,
	    offset
	  ];
	}
	function decodeBytes(bytes, offset) {
	  let byteLen;
	  [byteLen, offset] = decodeVarint(bytes, offset);
	  const postOffset = offset + byteLen;
	  if (byteLen < 0 || postOffset < 0) {
	    throw new Error('protobuf: invalid length');
	  }
	  if (postOffset > bytes.length) {
	    throw new Error('protobuf: unexpected end of data');
	  }
	  return [
	    bytes.subarray(offset, postOffset),
	    postOffset
	  ];
	}
	function decodeKey(bytes, index) {
	  let wire;
	  [wire, index] = decodeVarint(bytes, index);
	  return [
	    wire & 7,
	    wire >> 3,
	    index
	  ];
	}
	function decodeLink(bytes) {
	  const link = {};
	  const l = bytes.length;
	  let index = 0;
	  while (index < l) {
	    let wireType, fieldNum;
	    [wireType, fieldNum, index] = decodeKey(bytes, index);
	    if (fieldNum === 1) {
	      if (link.Hash) {
	        throw new Error('protobuf: (PBLink) duplicate Hash section');
	      }
	      if (wireType !== 2) {
	        throw new Error(`protobuf: (PBLink) wrong wireType (${ wireType }) for Hash`);
	      }
	      if (link.Name !== undefined) {
	        throw new Error('protobuf: (PBLink) invalid order, found Name before Hash');
	      }
	      if (link.Tsize !== undefined) {
	        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Hash');
	      }
	      [link.Hash, index] = decodeBytes(bytes, index);
	    } else if (fieldNum === 2) {
	      if (link.Name !== undefined) {
	        throw new Error('protobuf: (PBLink) duplicate Name section');
	      }
	      if (wireType !== 2) {
	        throw new Error(`protobuf: (PBLink) wrong wireType (${ wireType }) for Name`);
	      }
	      if (link.Tsize !== undefined) {
	        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Name');
	      }
	      let byts;
	      [byts, index] = decodeBytes(bytes, index);
	      link.Name = textDecoder$2.decode(byts);
	    } else if (fieldNum === 3) {
	      if (link.Tsize !== undefined) {
	        throw new Error('protobuf: (PBLink) duplicate Tsize section');
	      }
	      if (wireType !== 0) {
	        throw new Error(`protobuf: (PBLink) wrong wireType (${ wireType }) for Tsize`);
	      }
	      [link.Tsize, index] = decodeVarint(bytes, index);
	    } else {
	      throw new Error(`protobuf: (PBLink) invalid fieldNumber, expected 1, 2 or 3, got ${ fieldNum }`);
	    }
	  }
	  if (index > l) {
	    throw new Error('protobuf: (PBLink) unexpected end of data');
	  }
	  return link;
	}
	function decodeNode(bytes) {
	  const l = bytes.length;
	  let index = 0;
	  let links;
	  let linksBeforeData = false;
	  let data;
	  while (index < l) {
	    let wireType, fieldNum;
	    [wireType, fieldNum, index] = decodeKey(bytes, index);
	    if (wireType !== 2) {
	      throw new Error(`protobuf: (PBNode) invalid wireType, expected 2, got ${ wireType }`);
	    }
	    if (fieldNum === 1) {
	      if (data) {
	        throw new Error('protobuf: (PBNode) duplicate Data section');
	      }
	      [data, index] = decodeBytes(bytes, index);
	      if (links) {
	        linksBeforeData = true;
	      }
	    } else if (fieldNum === 2) {
	      if (linksBeforeData) {
	        throw new Error('protobuf: (PBNode) duplicate Links section');
	      } else if (!links) {
	        links = [];
	      }
	      let byts;
	      [byts, index] = decodeBytes(bytes, index);
	      links.push(decodeLink(byts));
	    } else {
	      throw new Error(`protobuf: (PBNode) invalid fieldNumber, expected 1 or 2, got ${ fieldNum }`);
	    }
	  }
	  if (index > l) {
	    throw new Error('protobuf: (PBNode) unexpected end of data');
	  }
	  const node = {};
	  if (data) {
	    node.Data = data;
	  }
	  node.Links = links || [];
	  return node;
	}

	const textEncoder$3 = new TextEncoder();
	const maxInt32 = 2 ** 32;
	const maxUInt32 = 2 ** 31;
	function encodeLink(link, bytes) {
	  let i = bytes.length;
	  if (typeof link.Tsize === 'number') {
	    if (link.Tsize < 0) {
	      throw new Error('Tsize cannot be negative');
	    }
	    if (!Number.isSafeInteger(link.Tsize)) {
	      throw new Error('Tsize too large for encoding');
	    }
	    i = encodeVarint(bytes, i, link.Tsize) - 1;
	    bytes[i] = 24;
	  }
	  if (typeof link.Name === 'string') {
	    const nameBytes = textEncoder$3.encode(link.Name);
	    i -= nameBytes.length;
	    bytes.set(nameBytes, i);
	    i = encodeVarint(bytes, i, nameBytes.length) - 1;
	    bytes[i] = 18;
	  }
	  if (link.Hash) {
	    i -= link.Hash.length;
	    bytes.set(link.Hash, i);
	    i = encodeVarint(bytes, i, link.Hash.length) - 1;
	    bytes[i] = 10;
	  }
	  return bytes.length - i;
	}
	function encodeNode(node) {
	  const size = sizeNode(node);
	  const bytes = new Uint8Array(size);
	  let i = size;
	  if (node.Data) {
	    i -= node.Data.length;
	    bytes.set(node.Data, i);
	    i = encodeVarint(bytes, i, node.Data.length) - 1;
	    bytes[i] = 10;
	  }
	  if (node.Links) {
	    for (let index = node.Links.length - 1; index >= 0; index--) {
	      const size = encodeLink(node.Links[index], bytes.subarray(0, i));
	      i -= size;
	      i = encodeVarint(bytes, i, size) - 1;
	      bytes[i] = 18;
	    }
	  }
	  return bytes;
	}
	function sizeLink(link) {
	  let n = 0;
	  if (link.Hash) {
	    const l = link.Hash.length;
	    n += 1 + l + sov(l);
	  }
	  if (typeof link.Name === 'string') {
	    const l = textEncoder$3.encode(link.Name).length;
	    n += 1 + l + sov(l);
	  }
	  if (typeof link.Tsize === 'number') {
	    n += 1 + sov(link.Tsize);
	  }
	  return n;
	}
	function sizeNode(node) {
	  let n = 0;
	  if (node.Data) {
	    const l = node.Data.length;
	    n += 1 + l + sov(l);
	  }
	  if (node.Links) {
	    for (const link of node.Links) {
	      const l = sizeLink(link);
	      n += 1 + l + sov(l);
	    }
	  }
	  return n;
	}
	function encodeVarint(bytes, offset, v) {
	  offset -= sov(v);
	  const base = offset;
	  while (v >= maxUInt32) {
	    bytes[offset++] = v & 127 | 128;
	    v /= 128;
	  }
	  while (v >= 128) {
	    bytes[offset++] = v & 127 | 128;
	    v >>>= 7;
	  }
	  bytes[offset] = v;
	  return base;
	}
	function sov(x) {
	  if (x % 2 === 0) {
	    x++;
	  }
	  return Math.floor((len64(x) + 6) / 7);
	}
	function len64(x) {
	  let n = 0;
	  if (x >= maxInt32) {
	    x = Math.floor(x / maxInt32);
	    n = 32;
	  }
	  if (x >= 1 << 16) {
	    x >>>= 16;
	    n += 16;
	  }
	  if (x >= 1 << 8) {
	    x >>>= 8;
	    n += 8;
	  }
	  return n + len8tab[x];
	}
	const len8tab = [
	  0,
	  1,
	  2,
	  2,
	  3,
	  3,
	  3,
	  3,
	  4,
	  4,
	  4,
	  4,
	  4,
	  4,
	  4,
	  4,
	  5,
	  5,
	  5,
	  5,
	  5,
	  5,
	  5,
	  5,
	  5,
	  5,
	  5,
	  5,
	  5,
	  5,
	  5,
	  5,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  6,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  7,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8,
	  8
	];

	const pbNodeProperties = [
	  'Data',
	  'Links'
	];
	const pbLinkProperties = [
	  'Hash',
	  'Name',
	  'Tsize'
	];
	const textEncoder$2 = new TextEncoder();
	function linkComparator(a, b) {
	  if (a === b) {
	    return 0;
	  }
	  const abuf = a.Name ? textEncoder$2.encode(a.Name) : [];
	  const bbuf = b.Name ? textEncoder$2.encode(b.Name) : [];
	  let x = abuf.length;
	  let y = bbuf.length;
	  for (let i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (abuf[i] !== bbuf[i]) {
	      x = abuf[i];
	      y = bbuf[i];
	      break;
	    }
	  }
	  return x < y ? -1 : y < x ? 1 : 0;
	}
	function hasOnlyProperties(node, properties) {
	  return !Object.keys(node).some(p => !properties.includes(p));
	}
	function asLink(link) {
	  if (typeof link.asCID === 'object') {
	    const Hash = CID$6.asCID(link);
	    if (!Hash) {
	      throw new TypeError('Invalid DAG-PB form');
	    }
	    return { Hash };
	  }
	  if (typeof link !== 'object' || Array.isArray(link)) {
	    throw new TypeError('Invalid DAG-PB form');
	  }
	  const pbl = {};
	  if (link.Hash) {
	    let cid = CID$6.asCID(link.Hash);
	    try {
	      if (!cid) {
	        if (typeof link.Hash === 'string') {
	          cid = CID$6.parse(link.Hash);
	        } else if (link.Hash instanceof Uint8Array) {
	          cid = CID$6.decode(link.Hash);
	        }
	      }
	    } catch (e) {
	      throw new TypeError(`Invalid DAG-PB form: ${ e.message }`);
	    }
	    if (cid) {
	      pbl.Hash = cid;
	    }
	  }
	  if (!pbl.Hash) {
	    throw new TypeError('Invalid DAG-PB form');
	  }
	  if (typeof link.Name === 'string') {
	    pbl.Name = link.Name;
	  }
	  if (typeof link.Tsize === 'number') {
	    pbl.Tsize = link.Tsize;
	  }
	  return pbl;
	}
	function prepare(node) {
	  if (node instanceof Uint8Array || typeof node === 'string') {
	    node = { Data: node };
	  }
	  if (typeof node !== 'object' || Array.isArray(node)) {
	    throw new TypeError('Invalid DAG-PB form');
	  }
	  const pbn = {};
	  if (node.Data !== undefined) {
	    if (typeof node.Data === 'string') {
	      pbn.Data = textEncoder$2.encode(node.Data);
	    } else if (node.Data instanceof Uint8Array) {
	      pbn.Data = node.Data;
	    } else {
	      throw new TypeError('Invalid DAG-PB form');
	    }
	  }
	  if (node.Links !== undefined) {
	    if (Array.isArray(node.Links)) {
	      pbn.Links = node.Links.map(asLink);
	      pbn.Links.sort(linkComparator);
	    } else {
	      throw new TypeError('Invalid DAG-PB form');
	    }
	  } else {
	    pbn.Links = [];
	  }
	  return pbn;
	}
	function validate$1(node) {
	  if (!node || typeof node !== 'object' || Array.isArray(node)) {
	    throw new TypeError('Invalid DAG-PB form');
	  }
	  if (!hasOnlyProperties(node, pbNodeProperties)) {
	    throw new TypeError('Invalid DAG-PB form (extraneous properties)');
	  }
	  if (node.Data !== undefined && !(node.Data instanceof Uint8Array)) {
	    throw new TypeError('Invalid DAG-PB form (Data must be a Uint8Array)');
	  }
	  if (!Array.isArray(node.Links)) {
	    throw new TypeError('Invalid DAG-PB form (Links must be an array)');
	  }
	  for (let i = 0; i < node.Links.length; i++) {
	    const link = node.Links[i];
	    if (!link || typeof link !== 'object' || Array.isArray(link)) {
	      throw new TypeError('Invalid DAG-PB form (bad link object)');
	    }
	    if (!hasOnlyProperties(link, pbLinkProperties)) {
	      throw new TypeError('Invalid DAG-PB form (extraneous properties on link object)');
	    }
	    if (!link.Hash) {
	      throw new TypeError('Invalid DAG-PB form (link must have a Hash)');
	    }
	    if (link.Hash.asCID !== link.Hash) {
	      throw new TypeError('Invalid DAG-PB form (link Hash must be a CID)');
	    }
	    if (link.Name !== undefined && typeof link.Name !== 'string') {
	      throw new TypeError('Invalid DAG-PB form (link Name must be a string)');
	    }
	    if (link.Tsize !== undefined && (typeof link.Tsize !== 'number' || link.Tsize % 1 !== 0)) {
	      throw new TypeError('Invalid DAG-PB form (link Tsize must be an integer)');
	    }
	    if (i > 0 && linkComparator(link, node.Links[i - 1]) === -1) {
	      throw new TypeError('Invalid DAG-PB form (links must be sorted by Name bytes)');
	    }
	  }
	}
	function createNode$2(data, links = []) {
	  return prepare({
	    Data: data,
	    Links: links
	  });
	}
	function createLink(name, size, cid) {
	  return asLink({
	    Hash: cid,
	    Name: name,
	    Tsize: size
	  });
	}

	const name$8 = 'dag-pb';
	const code$8 = 112;
	function encode$k(node) {
	  validate$1(node);
	  const pbn = {};
	  if (node.Links) {
	    pbn.Links = node.Links.map(l => {
	      const link = {};
	      if (l.Hash) {
	        link.Hash = l.Hash.bytes;
	      }
	      if (l.Name !== undefined) {
	        link.Name = l.Name;
	      }
	      if (l.Tsize !== undefined) {
	        link.Tsize = l.Tsize;
	      }
	      return link;
	    });
	  }
	  if (node.Data) {
	    pbn.Data = node.Data;
	  }
	  return encodeNode(pbn);
	}
	function decode$i(bytes) {
	  const pbn = decodeNode(bytes);
	  const node = {};
	  if (pbn.Data) {
	    node.Data = pbn.Data;
	  }
	  if (pbn.Links) {
	    node.Links = pbn.Links.map(l => {
	      const link = {};
	      try {
	        link.Hash = CID$6.decode(l.Hash);
	      } catch (e) {
	      }
	      if (!link.Hash) {
	        throw new Error('Invalid Hash field found in link, expected CID');
	      }
	      if (l.Name !== undefined) {
	        link.Name = l.Name;
	      }
	      if (l.Tsize !== undefined) {
	        link.Tsize = l.Tsize;
	      }
	      return link;
	    });
	  }
	  return node;
	}

	var dagPB = /*#__PURE__*/Object.freeze({
		__proto__: null,
		name: name$8,
		code: code$8,
		encode: encode$k,
		decode: decode$i,
		prepare: prepare,
		validate: validate$1,
		createNode: createNode$2,
		createLink: createLink
	});

	const typeofs = [
	  'string',
	  'number',
	  'bigint',
	  'symbol'
	];
	const objectTypeNames = [
	  'Function',
	  'Generator',
	  'AsyncGenerator',
	  'GeneratorFunction',
	  'AsyncGeneratorFunction',
	  'AsyncFunction',
	  'Observable',
	  'Array',
	  'Buffer',
	  'Object',
	  'RegExp',
	  'Date',
	  'Error',
	  'Map',
	  'Set',
	  'WeakMap',
	  'WeakSet',
	  'ArrayBuffer',
	  'SharedArrayBuffer',
	  'DataView',
	  'Promise',
	  'URL',
	  'HTMLElement',
	  'Int8Array',
	  'Uint8Array',
	  'Uint8ClampedArray',
	  'Int16Array',
	  'Uint16Array',
	  'Int32Array',
	  'Uint32Array',
	  'Float32Array',
	  'Float64Array',
	  'BigInt64Array',
	  'BigUint64Array'
	];
	function is(value) {
	  if (value === null) {
	    return 'null';
	  }
	  if (value === undefined) {
	    return 'undefined';
	  }
	  if (value === true || value === false) {
	    return 'boolean';
	  }
	  const typeOf = typeof value;
	  if (typeofs.includes(typeOf)) {
	    return typeOf;
	  }
	  if (typeOf === 'function') {
	    return 'Function';
	  }
	  if (Array.isArray(value)) {
	    return 'Array';
	  }
	  if (isBuffer$5(value)) {
	    return 'Buffer';
	  }
	  const objectType = getObjectType(value);
	  if (objectType) {
	    return objectType;
	  }
	  return 'Object';
	}
	function isBuffer$5(value) {
	  return value && value.constructor && value.constructor.isBuffer && value.constructor.isBuffer.call(null, value);
	}
	function getObjectType(value) {
	  const objectTypeName = Object.prototype.toString.call(value).slice(8, -1);
	  if (objectTypeNames.includes(objectTypeName)) {
	    return objectTypeName;
	  }
	  return undefined;
	}

	class Type {
	  constructor(major, name, terminal) {
	    this.major = major;
	    this.majorEncoded = major << 5;
	    this.name = name;
	    this.terminal = terminal;
	  }
	  toString() {
	    return `Type[${ this.major }].${ this.name }`;
	  }
	  compare(typ) {
	    return this.major < typ.major ? -1 : this.major > typ.major ? 1 : 0;
	  }
	}
	Type.uint = new Type(0, 'uint', true);
	Type.negint = new Type(1, 'negint', true);
	Type.bytes = new Type(2, 'bytes', true);
	Type.string = new Type(3, 'string', true);
	Type.array = new Type(4, 'array', false);
	Type.map = new Type(5, 'map', false);
	Type.tag = new Type(6, 'tag', false);
	Type.float = new Type(7, 'float', true);
	Type.false = new Type(7, 'false', true);
	Type.true = new Type(7, 'true', true);
	Type.null = new Type(7, 'null', true);
	Type.undefined = new Type(7, 'undefined', true);
	Type.break = new Type(7, 'break', true);
	class Token {
	  constructor(type, value, encodedLength) {
	    this.type = type;
	    this.value = value;
	    this.encodedLength = encodedLength;
	    this.encodedBytes = undefined;
	  }
	  toString() {
	    return `Token[${ this.type }].${ this.value }`;
	  }
	}

	const useBuffer = globalThis.process && !globalThis.process.browser && globalThis.Buffer && typeof globalThis.Buffer.isBuffer === 'function';
	const textDecoder$1 = new TextDecoder();
	const textEncoder$1 = new TextEncoder();
	function isBuffer$4(buf) {
	  return useBuffer && globalThis.Buffer.isBuffer(buf);
	}
	function asU8A(buf) {
	  if (!(buf instanceof Uint8Array)) {
	    return Uint8Array.from(buf);
	  }
	  return isBuffer$4(buf) ? new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength) : buf;
	}
	const toString$8 = useBuffer ? (bytes, start, end) => {
	  return end - start > 64 ? globalThis.Buffer.from(bytes.subarray(start, end)).toString('utf8') : utf8Slice$1(bytes, start, end);
	} : (bytes, start, end) => {
	  return end - start > 64 ? textDecoder$1.decode(bytes.subarray(start, end)) : utf8Slice$1(bytes, start, end);
	};
	const fromString$6 = useBuffer ? string => {
	  return string.length > 64 ? globalThis.Buffer.from(string) : utf8ToBytes$1(string);
	} : string => {
	  return string.length > 64 ? textEncoder$1.encode(string) : utf8ToBytes$1(string);
	};
	const fromArray = arr => {
	  return Uint8Array.from(arr);
	};
	const slice = useBuffer ? (bytes, start, end) => {
	  if (isBuffer$4(bytes)) {
	    return new Uint8Array(bytes.subarray(start, end));
	  }
	  return bytes.slice(start, end);
	} : (bytes, start, end) => {
	  return bytes.slice(start, end);
	};
	const concat$4 = useBuffer ? (chunks, length) => {
	  chunks = chunks.map(c => c instanceof Uint8Array ? c : globalThis.Buffer.from(c));
	  return asU8A(globalThis.Buffer.concat(chunks, length));
	} : (chunks, length) => {
	  const out = new Uint8Array(length);
	  let off = 0;
	  for (let b of chunks) {
	    if (off + b.length > out.length) {
	      b = b.subarray(0, out.length - off);
	    }
	    out.set(b, off);
	    off += b.length;
	  }
	  return out;
	};
	const alloc$2 = useBuffer ? size => {
	  return globalThis.Buffer.allocUnsafe(size);
	} : size => {
	  return new Uint8Array(size);
	};
	function compare$3(b1, b2) {
	  if (isBuffer$4(b1) && isBuffer$4(b2)) {
	    return b1.compare(b2);
	  }
	  for (let i = 0; i < b1.length; i++) {
	    if (b1[i] === b2[i]) {
	      continue;
	    }
	    return b1[i] < b2[i] ? -1 : 1;
	  }
	  return 0;
	}
	function utf8ToBytes$1(string, units = Infinity) {
	  let codePoint;
	  const length = string.length;
	  let leadSurrogate = null;
	  const bytes = [];
	  for (let i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i);
	    if (codePoint > 55295 && codePoint < 57344) {
	      if (!leadSurrogate) {
	        if (codePoint > 56319) {
	          if ((units -= 3) > -1)
	            bytes.push(239, 191, 189);
	          continue;
	        } else if (i + 1 === length) {
	          if ((units -= 3) > -1)
	            bytes.push(239, 191, 189);
	          continue;
	        }
	        leadSurrogate = codePoint;
	        continue;
	      }
	      if (codePoint < 56320) {
	        if ((units -= 3) > -1)
	          bytes.push(239, 191, 189);
	        leadSurrogate = codePoint;
	        continue;
	      }
	      codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
	    } else if (leadSurrogate) {
	      if ((units -= 3) > -1)
	        bytes.push(239, 191, 189);
	    }
	    leadSurrogate = null;
	    if (codePoint < 128) {
	      if ((units -= 1) < 0)
	        break;
	      bytes.push(codePoint);
	    } else if (codePoint < 2048) {
	      if ((units -= 2) < 0)
	        break;
	      bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
	    } else if (codePoint < 65536) {
	      if ((units -= 3) < 0)
	        break;
	      bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
	    } else if (codePoint < 1114112) {
	      if ((units -= 4) < 0)
	        break;
	      bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
	    } else {
	      throw new Error('Invalid code point');
	    }
	  }
	  return bytes;
	}
	function utf8Slice$1(buf, offset, end) {
	  const res = [];
	  while (offset < end) {
	    const firstByte = buf[offset];
	    let codePoint = null;
	    let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
	    if (offset + bytesPerSequence <= end) {
	      let secondByte, thirdByte, fourthByte, tempCodePoint;
	      switch (bytesPerSequence) {
	      case 1:
	        if (firstByte < 128) {
	          codePoint = firstByte;
	        }
	        break;
	      case 2:
	        secondByte = buf[offset + 1];
	        if ((secondByte & 192) === 128) {
	          tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
	          if (tempCodePoint > 127) {
	            codePoint = tempCodePoint;
	          }
	        }
	        break;
	      case 3:
	        secondByte = buf[offset + 1];
	        thirdByte = buf[offset + 2];
	        if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
	          tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
	          if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
	            codePoint = tempCodePoint;
	          }
	        }
	        break;
	      case 4:
	        secondByte = buf[offset + 1];
	        thirdByte = buf[offset + 2];
	        fourthByte = buf[offset + 3];
	        if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
	          tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
	          if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
	            codePoint = tempCodePoint;
	          }
	        }
	      }
	    }
	    if (codePoint === null) {
	      codePoint = 65533;
	      bytesPerSequence = 1;
	    } else if (codePoint > 65535) {
	      codePoint -= 65536;
	      res.push(codePoint >>> 10 & 1023 | 55296);
	      codePoint = 56320 | codePoint & 1023;
	    }
	    res.push(codePoint);
	    offset += bytesPerSequence;
	  }
	  return decodeCodePointsArray$1(res);
	}
	const MAX_ARGUMENTS_LENGTH$1 = 4096;
	function decodeCodePointsArray$1(codePoints) {
	  const len = codePoints.length;
	  if (len <= MAX_ARGUMENTS_LENGTH$1) {
	    return String.fromCharCode.apply(String, codePoints);
	  }
	  let res = '';
	  let i = 0;
	  while (i < len) {
	    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH$1));
	  }
	  return res;
	}

	const defaultChunkSize = 256;
	class Bl {
	  constructor(chunkSize = defaultChunkSize) {
	    this.chunkSize = chunkSize;
	    this.cursor = 0;
	    this.maxCursor = -1;
	    this.chunks = [];
	    this._initReuseChunk = null;
	  }
	  reset() {
	    this.chunks = [];
	    this.cursor = 0;
	    this.maxCursor = -1;
	    if (this._initReuseChunk !== null) {
	      this.chunks.push(this._initReuseChunk);
	      this.maxCursor = this._initReuseChunk.length - 1;
	    }
	  }
	  push(bytes) {
	    let topChunk = this.chunks[this.chunks.length - 1];
	    const newMax = this.cursor + bytes.length;
	    if (newMax <= this.maxCursor + 1) {
	      const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;
	      topChunk.set(bytes, chunkPos);
	    } else {
	      if (topChunk) {
	        const chunkPos = topChunk.length - (this.maxCursor - this.cursor) - 1;
	        if (chunkPos < topChunk.length) {
	          this.chunks[this.chunks.length - 1] = topChunk.subarray(0, chunkPos);
	          this.maxCursor = this.cursor - 1;
	        }
	      }
	      if (bytes.length < 64 && bytes.length < this.chunkSize) {
	        topChunk = alloc$2(this.chunkSize);
	        this.chunks.push(topChunk);
	        this.maxCursor += topChunk.length;
	        if (this._initReuseChunk === null) {
	          this._initReuseChunk = topChunk;
	        }
	        topChunk.set(bytes, 0);
	      } else {
	        this.chunks.push(bytes);
	        this.maxCursor += bytes.length;
	      }
	    }
	    this.cursor += bytes.length;
	  }
	  toBytes(reset = false) {
	    let byts;
	    if (this.chunks.length === 1) {
	      const chunk = this.chunks[0];
	      if (reset && this.cursor > chunk.length / 2) {
	        byts = this.cursor === chunk.length ? chunk : chunk.subarray(0, this.cursor);
	        this._initReuseChunk = null;
	        this.chunks = [];
	      } else {
	        byts = slice(chunk, 0, this.cursor);
	      }
	    } else {
	      byts = concat$4(this.chunks, this.cursor);
	    }
	    if (reset) {
	      this.reset();
	    }
	    return byts;
	  }
	}

	const decodeErrPrefix = 'CBOR decode error:';
	const encodeErrPrefix = 'CBOR encode error:';
	function assertEnoughData(data, pos, need) {
	  if (data.length - pos < need) {
	    throw new Error(`${ decodeErrPrefix } not enough data for type`);
	  }
	}

	const uintBoundaries = [
	  24,
	  256,
	  65536,
	  4294967296,
	  BigInt('18446744073709551616')
	];
	function readUint8(data, offset, options) {
	  assertEnoughData(data, offset, 1);
	  const value = data[offset];
	  if (options.strict === true && value < uintBoundaries[0]) {
	    throw new Error(`${ decodeErrPrefix } integer encoded in more bytes than necessary (strict decode)`);
	  }
	  return value;
	}
	function readUint16(data, offset, options) {
	  assertEnoughData(data, offset, 2);
	  const value = data[offset] << 8 | data[offset + 1];
	  if (options.strict === true && value < uintBoundaries[1]) {
	    throw new Error(`${ decodeErrPrefix } integer encoded in more bytes than necessary (strict decode)`);
	  }
	  return value;
	}
	function readUint32(data, offset, options) {
	  assertEnoughData(data, offset, 4);
	  const value = data[offset] * 16777216 + (data[offset + 1] << 16) + (data[offset + 2] << 8) + data[offset + 3];
	  if (options.strict === true && value < uintBoundaries[2]) {
	    throw new Error(`${ decodeErrPrefix } integer encoded in more bytes than necessary (strict decode)`);
	  }
	  return value;
	}
	function readUint64(data, offset, options) {
	  assertEnoughData(data, offset, 8);
	  const hi = data[offset] * 16777216 + (data[offset + 1] << 16) + (data[offset + 2] << 8) + data[offset + 3];
	  const lo = data[offset + 4] * 16777216 + (data[offset + 5] << 16) + (data[offset + 6] << 8) + data[offset + 7];
	  const value = (BigInt(hi) << BigInt(32)) + BigInt(lo);
	  if (options.strict === true && value < uintBoundaries[3]) {
	    throw new Error(`${ decodeErrPrefix } integer encoded in more bytes than necessary (strict decode)`);
	  }
	  if (value <= Number.MAX_SAFE_INTEGER) {
	    return Number(value);
	  }
	  if (options.allowBigInt === true) {
	    return value;
	  }
	  throw new Error(`${ decodeErrPrefix } integers outside of the safe integer range are not supported`);
	}
	function decodeUint8(data, pos, _minor, options) {
	  return new Token(Type.uint, readUint8(data, pos + 1, options), 2);
	}
	function decodeUint16(data, pos, _minor, options) {
	  return new Token(Type.uint, readUint16(data, pos + 1, options), 3);
	}
	function decodeUint32(data, pos, _minor, options) {
	  return new Token(Type.uint, readUint32(data, pos + 1, options), 5);
	}
	function decodeUint64(data, pos, _minor, options) {
	  return new Token(Type.uint, readUint64(data, pos + 1, options), 9);
	}
	function encodeUint(buf, token) {
	  return encodeUintValue(buf, 0, token.value);
	}
	function encodeUintValue(buf, major, uint) {
	  if (uint < uintBoundaries[0]) {
	    const nuint = Number(uint);
	    buf.push([major | nuint]);
	  } else if (uint < uintBoundaries[1]) {
	    const nuint = Number(uint);
	    buf.push([
	      major | 24,
	      nuint
	    ]);
	  } else if (uint < uintBoundaries[2]) {
	    const nuint = Number(uint);
	    buf.push([
	      major | 25,
	      nuint >>> 8,
	      nuint & 255
	    ]);
	  } else if (uint < uintBoundaries[3]) {
	    const nuint = Number(uint);
	    buf.push([
	      major | 26,
	      nuint >>> 24 & 255,
	      nuint >>> 16 & 255,
	      nuint >>> 8 & 255,
	      nuint & 255
	    ]);
	  } else {
	    const buint = BigInt(uint);
	    if (buint < uintBoundaries[4]) {
	      const set = [
	        major | 27,
	        0,
	        0,
	        0,
	        0,
	        0,
	        0,
	        0
	      ];
	      let lo = Number(buint & BigInt(4294967295));
	      let hi = Number(buint >> BigInt(32) & BigInt(4294967295));
	      set[8] = lo & 255;
	      lo = lo >> 8;
	      set[7] = lo & 255;
	      lo = lo >> 8;
	      set[6] = lo & 255;
	      lo = lo >> 8;
	      set[5] = lo & 255;
	      set[4] = hi & 255;
	      hi = hi >> 8;
	      set[3] = hi & 255;
	      hi = hi >> 8;
	      set[2] = hi & 255;
	      hi = hi >> 8;
	      set[1] = hi & 255;
	      buf.push(set);
	    } else {
	      throw new Error(`${ decodeErrPrefix } encountered BigInt larger than allowable range`);
	    }
	  }
	}
	encodeUint.encodedSize = function encodedSize(token) {
	  return encodeUintValue.encodedSize(token.value);
	};
	encodeUintValue.encodedSize = function encodedSize(uint) {
	  if (uint < uintBoundaries[0]) {
	    return 1;
	  }
	  if (uint < uintBoundaries[1]) {
	    return 2;
	  }
	  if (uint < uintBoundaries[2]) {
	    return 3;
	  }
	  if (uint < uintBoundaries[3]) {
	    return 5;
	  }
	  return 9;
	};
	encodeUint.compareTokens = function compareTokens(tok1, tok2) {
	  return tok1.value < tok2.value ? -1 : tok1.value > tok2.value ? 1 : 0;
	};

	function decodeNegint8(data, pos, _minor, options) {
	  return new Token(Type.negint, -1 - readUint8(data, pos + 1, options), 2);
	}
	function decodeNegint16(data, pos, _minor, options) {
	  return new Token(Type.negint, -1 - readUint16(data, pos + 1, options), 3);
	}
	function decodeNegint32(data, pos, _minor, options) {
	  return new Token(Type.negint, -1 - readUint32(data, pos + 1, options), 5);
	}
	const neg1b = BigInt(-1);
	const pos1b = BigInt(1);
	function decodeNegint64(data, pos, _minor, options) {
	  const int = readUint64(data, pos + 1, options);
	  if (typeof int !== 'bigint') {
	    const value = -1 - int;
	    if (value >= Number.MIN_SAFE_INTEGER) {
	      return new Token(Type.negint, value, 9);
	    }
	  }
	  if (options.allowBigInt !== true) {
	    throw new Error(`${ decodeErrPrefix } integers outside of the safe integer range are not supported`);
	  }
	  return new Token(Type.negint, neg1b - BigInt(int), 9);
	}
	function encodeNegint(buf, token) {
	  const negint = token.value;
	  const unsigned = typeof negint === 'bigint' ? negint * neg1b - pos1b : negint * -1 - 1;
	  encodeUintValue(buf, token.type.majorEncoded, unsigned);
	}
	encodeNegint.encodedSize = function encodedSize(token) {
	  const negint = token.value;
	  const unsigned = typeof negint === 'bigint' ? negint * neg1b - pos1b : negint * -1 - 1;
	  if (unsigned < uintBoundaries[0]) {
	    return 1;
	  }
	  if (unsigned < uintBoundaries[1]) {
	    return 2;
	  }
	  if (unsigned < uintBoundaries[2]) {
	    return 3;
	  }
	  if (unsigned < uintBoundaries[3]) {
	    return 5;
	  }
	  return 9;
	};
	encodeNegint.compareTokens = function compareTokens(tok1, tok2) {
	  return tok1.value < tok2.value ? 1 : tok1.value > tok2.value ? -1 : 0;
	};

	function toToken$3(data, pos, prefix, length) {
	  assertEnoughData(data, pos, prefix + length);
	  const buf = slice(data, pos + prefix, pos + prefix + length);
	  return new Token(Type.bytes, buf, prefix + length);
	}
	function decodeBytesCompact(data, pos, minor, _options) {
	  return toToken$3(data, pos, 1, minor);
	}
	function decodeBytes8(data, pos, _minor, options) {
	  return toToken$3(data, pos, 2, readUint8(data, pos + 1, options));
	}
	function decodeBytes16(data, pos, _minor, options) {
	  return toToken$3(data, pos, 3, readUint16(data, pos + 1, options));
	}
	function decodeBytes32(data, pos, _minor, options) {
	  return toToken$3(data, pos, 5, readUint32(data, pos + 1, options));
	}
	function decodeBytes64(data, pos, _minor, options) {
	  const l = readUint64(data, pos + 1, options);
	  if (typeof l === 'bigint') {
	    throw new Error(`${ decodeErrPrefix } 64-bit integer bytes lengths not supported`);
	  }
	  return toToken$3(data, pos, 9, l);
	}
	function tokenBytes(token) {
	  if (token.encodedBytes === undefined) {
	    token.encodedBytes = token.type === Type.string ? fromString$6(token.value) : token.value;
	  }
	  return token.encodedBytes;
	}
	function encodeBytes(buf, token) {
	  const bytes = tokenBytes(token);
	  encodeUintValue(buf, token.type.majorEncoded, bytes.length);
	  buf.push(bytes);
	}
	encodeBytes.encodedSize = function encodedSize(token) {
	  const bytes = tokenBytes(token);
	  return encodeUintValue.encodedSize(bytes.length) + bytes.length;
	};
	encodeBytes.compareTokens = function compareTokens(tok1, tok2) {
	  return compareBytes(tokenBytes(tok1), tokenBytes(tok2));
	};
	function compareBytes(b1, b2) {
	  return b1.length < b2.length ? -1 : b1.length > b2.length ? 1 : compare$3(b1, b2);
	}

	function toToken$2(data, pos, prefix, length) {
	  const totLength = prefix + length;
	  assertEnoughData(data, pos, totLength);
	  return new Token(Type.string, toString$8(data, pos + prefix, pos + totLength), totLength);
	}
	function decodeStringCompact(data, pos, minor, _options) {
	  return toToken$2(data, pos, 1, minor);
	}
	function decodeString8(data, pos, _minor, options) {
	  return toToken$2(data, pos, 2, readUint8(data, pos + 1, options));
	}
	function decodeString16(data, pos, _minor, options) {
	  return toToken$2(data, pos, 3, readUint16(data, pos + 1, options));
	}
	function decodeString32(data, pos, _minor, options) {
	  return toToken$2(data, pos, 5, readUint32(data, pos + 1, options));
	}
	function decodeString64(data, pos, _minor, options) {
	  const l = readUint64(data, pos + 1, options);
	  if (typeof l === 'bigint') {
	    throw new Error(`${ decodeErrPrefix } 64-bit integer string lengths not supported`);
	  }
	  return toToken$2(data, pos, 9, l);
	}
	const encodeString = encodeBytes;

	function toToken$1(_data, _pos, prefix, length) {
	  return new Token(Type.array, length, prefix);
	}
	function decodeArrayCompact(data, pos, minor, _options) {
	  return toToken$1(data, pos, 1, minor);
	}
	function decodeArray8(data, pos, _minor, options) {
	  return toToken$1(data, pos, 2, readUint8(data, pos + 1, options));
	}
	function decodeArray16(data, pos, _minor, options) {
	  return toToken$1(data, pos, 3, readUint16(data, pos + 1, options));
	}
	function decodeArray32(data, pos, _minor, options) {
	  return toToken$1(data, pos, 5, readUint32(data, pos + 1, options));
	}
	function decodeArray64(data, pos, _minor, options) {
	  const l = readUint64(data, pos + 1, options);
	  if (typeof l === 'bigint') {
	    throw new Error(`${ decodeErrPrefix } 64-bit integer array lengths not supported`);
	  }
	  return toToken$1(data, pos, 9, l);
	}
	function decodeArrayIndefinite(data, pos, _minor, options) {
	  if (options.allowIndefinite === false) {
	    throw new Error(`${ decodeErrPrefix } indefinite length items not allowed`);
	  }
	  return toToken$1(data, pos, 1, Infinity);
	}
	function encodeArray(buf, token) {
	  encodeUintValue(buf, Type.array.majorEncoded, token.value);
	}
	encodeArray.compareTokens = encodeUint.compareTokens;

	function toToken(_data, _pos, prefix, length) {
	  return new Token(Type.map, length, prefix);
	}
	function decodeMapCompact(data, pos, minor, _options) {
	  return toToken(data, pos, 1, minor);
	}
	function decodeMap8(data, pos, _minor, options) {
	  return toToken(data, pos, 2, readUint8(data, pos + 1, options));
	}
	function decodeMap16(data, pos, _minor, options) {
	  return toToken(data, pos, 3, readUint16(data, pos + 1, options));
	}
	function decodeMap32(data, pos, _minor, options) {
	  return toToken(data, pos, 5, readUint32(data, pos + 1, options));
	}
	function decodeMap64(data, pos, _minor, options) {
	  const l = readUint64(data, pos + 1, options);
	  if (typeof l === 'bigint') {
	    throw new Error(`${ decodeErrPrefix } 64-bit integer map lengths not supported`);
	  }
	  return toToken(data, pos, 9, l);
	}
	function decodeMapIndefinite(data, pos, _minor, options) {
	  if (options.allowIndefinite === false) {
	    throw new Error(`${ decodeErrPrefix } indefinite length items not allowed`);
	  }
	  return toToken(data, pos, 1, Infinity);
	}
	function encodeMap(buf, token) {
	  encodeUintValue(buf, Type.map.majorEncoded, token.value);
	}
	encodeMap.compareTokens = encodeUint.compareTokens;

	function decodeTagCompact(_data, _pos, minor, _options) {
	  return new Token(Type.tag, minor, 1);
	}
	function decodeTag8(data, pos, _minor, options) {
	  return new Token(Type.tag, readUint8(data, pos + 1, options), 2);
	}
	function decodeTag16(data, pos, _minor, options) {
	  return new Token(Type.tag, readUint16(data, pos + 1, options), 3);
	}
	function decodeTag32(data, pos, _minor, options) {
	  return new Token(Type.tag, readUint32(data, pos + 1, options), 5);
	}
	function decodeTag64(data, pos, _minor, options) {
	  return new Token(Type.tag, readUint64(data, pos + 1, options), 9);
	}
	function encodeTag(buf, token) {
	  encodeUintValue(buf, Type.tag.majorEncoded, token.value);
	}
	encodeTag.compareTokens = encodeUint.compareTokens;

	const MINOR_FALSE = 20;
	const MINOR_TRUE = 21;
	const MINOR_NULL = 22;
	const MINOR_UNDEFINED = 23;
	function decodeUndefined(_data, _pos, _minor, options) {
	  if (options.allowUndefined === false) {
	    throw new Error(`${ decodeErrPrefix } undefined values are not supported`);
	  } else if (options.coerceUndefinedToNull === true) {
	    return new Token(Type.null, null, 1);
	  }
	  return new Token(Type.undefined, undefined, 1);
	}
	function decodeBreak(_data, _pos, _minor, options) {
	  if (options.allowIndefinite === false) {
	    throw new Error(`${ decodeErrPrefix } indefinite length items not allowed`);
	  }
	  return new Token(Type.break, undefined, 1);
	}
	function createToken(value, bytes, options) {
	  if (options) {
	    if (options.allowNaN === false && Number.isNaN(value)) {
	      throw new Error(`${ decodeErrPrefix } NaN values are not supported`);
	    }
	    if (options.allowInfinity === false && (value === Infinity || value === -Infinity)) {
	      throw new Error(`${ decodeErrPrefix } Infinity values are not supported`);
	    }
	  }
	  return new Token(Type.float, value, bytes);
	}
	function decodeFloat16(data, pos, _minor, options) {
	  return createToken(readFloat16(data, pos + 1), 3, options);
	}
	function decodeFloat32(data, pos, _minor, options) {
	  return createToken(readFloat32(data, pos + 1), 5, options);
	}
	function decodeFloat64(data, pos, _minor, options) {
	  return createToken(readFloat64(data, pos + 1), 9, options);
	}
	function encodeFloat(buf, token, options) {
	  const float = token.value;
	  if (float === false) {
	    buf.push([Type.float.majorEncoded | MINOR_FALSE]);
	  } else if (float === true) {
	    buf.push([Type.float.majorEncoded | MINOR_TRUE]);
	  } else if (float === null) {
	    buf.push([Type.float.majorEncoded | MINOR_NULL]);
	  } else if (float === undefined) {
	    buf.push([Type.float.majorEncoded | MINOR_UNDEFINED]);
	  } else {
	    let decoded;
	    let success = false;
	    if (!options || options.float64 !== true) {
	      encodeFloat16(float);
	      decoded = readFloat16(ui8a, 1);
	      if (float === decoded || Number.isNaN(float)) {
	        ui8a[0] = 249;
	        buf.push(ui8a.slice(0, 3));
	        success = true;
	      } else {
	        encodeFloat32(float);
	        decoded = readFloat32(ui8a, 1);
	        if (float === decoded) {
	          ui8a[0] = 250;
	          buf.push(ui8a.slice(0, 5));
	          success = true;
	        }
	      }
	    }
	    if (!success) {
	      encodeFloat64(float);
	      decoded = readFloat64(ui8a, 1);
	      ui8a[0] = 251;
	      buf.push(ui8a.slice(0, 9));
	    }
	  }
	}
	encodeFloat.encodedSize = function encodedSize(token, options) {
	  const float = token.value;
	  if (float === false || float === true || float === null || float === undefined) {
	    return 1;
	  }
	  let decoded;
	  if (!options || options.float64 !== true) {
	    encodeFloat16(float);
	    decoded = readFloat16(ui8a, 1);
	    if (float === decoded || Number.isNaN(float)) {
	      return 3;
	    }
	    encodeFloat32(float);
	    decoded = readFloat32(ui8a, 1);
	    if (float === decoded) {
	      return 5;
	    }
	  }
	  return 9;
	};
	const buffer = new ArrayBuffer(9);
	const dataView = new DataView(buffer, 1);
	const ui8a = new Uint8Array(buffer, 0);
	function encodeFloat16(inp) {
	  if (inp === Infinity) {
	    dataView.setUint16(0, 31744, false);
	  } else if (inp === -Infinity) {
	    dataView.setUint16(0, 64512, false);
	  } else if (Number.isNaN(inp)) {
	    dataView.setUint16(0, 32256, false);
	  } else {
	    dataView.setFloat32(0, inp);
	    const valu32 = dataView.getUint32(0);
	    const exponent = (valu32 & 2139095040) >> 23;
	    const mantissa = valu32 & 8388607;
	    if (exponent === 255) {
	      dataView.setUint16(0, 31744, false);
	    } else if (exponent === 0) {
	      dataView.setUint16(0, (inp & 2147483648) >> 16 | mantissa >> 13, false);
	    } else {
	      const logicalExponent = exponent - 127;
	      if (logicalExponent < -24) {
	        dataView.setUint16(0, 0);
	      } else if (logicalExponent < -14) {
	        dataView.setUint16(0, (valu32 & 2147483648) >> 16 | 1 << 24 + logicalExponent, false);
	      } else {
	        dataView.setUint16(0, (valu32 & 2147483648) >> 16 | logicalExponent + 15 << 10 | mantissa >> 13, false);
	      }
	    }
	  }
	}
	function readFloat16(ui8a, pos) {
	  if (ui8a.length - pos < 2) {
	    throw new Error(`${ decodeErrPrefix } not enough data for float16`);
	  }
	  const half = (ui8a[pos] << 8) + ui8a[pos + 1];
	  if (half === 31744) {
	    return Infinity;
	  }
	  if (half === 64512) {
	    return -Infinity;
	  }
	  if (half === 32256) {
	    return NaN;
	  }
	  const exp = half >> 10 & 31;
	  const mant = half & 1023;
	  let val;
	  if (exp === 0) {
	    val = mant * 2 ** -24;
	  } else if (exp !== 31) {
	    val = (mant + 1024) * 2 ** (exp - 25);
	  } else {
	    val = mant === 0 ? Infinity : NaN;
	  }
	  return half & 32768 ? -val : val;
	}
	function encodeFloat32(inp) {
	  dataView.setFloat32(0, inp, false);
	}
	function readFloat32(ui8a, pos) {
	  if (ui8a.length - pos < 4) {
	    throw new Error(`${ decodeErrPrefix } not enough data for float32`);
	  }
	  const offset = (ui8a.byteOffset || 0) + pos;
	  return new DataView(ui8a.buffer, offset, 4).getFloat32(0, false);
	}
	function encodeFloat64(inp) {
	  dataView.setFloat64(0, inp, false);
	}
	function readFloat64(ui8a, pos) {
	  if (ui8a.length - pos < 8) {
	    throw new Error(`${ decodeErrPrefix } not enough data for float64`);
	  }
	  const offset = (ui8a.byteOffset || 0) + pos;
	  return new DataView(ui8a.buffer, offset, 8).getFloat64(0, false);
	}
	encodeFloat.compareTokens = encodeUint.compareTokens;

	function invalidMinor(data, pos, minor) {
	  throw new Error(`${ decodeErrPrefix } encountered invalid minor (${ minor }) for major ${ data[pos] >>> 5 }`);
	}
	function errorer(msg) {
	  return () => {
	    throw new Error(`${ decodeErrPrefix } ${ msg }`);
	  };
	}
	const jump = [];
	for (let i = 0; i <= 23; i++) {
	  jump[i] = invalidMinor;
	}
	jump[24] = decodeUint8;
	jump[25] = decodeUint16;
	jump[26] = decodeUint32;
	jump[27] = decodeUint64;
	jump[28] = invalidMinor;
	jump[29] = invalidMinor;
	jump[30] = invalidMinor;
	jump[31] = invalidMinor;
	for (let i = 32; i <= 55; i++) {
	  jump[i] = invalidMinor;
	}
	jump[56] = decodeNegint8;
	jump[57] = decodeNegint16;
	jump[58] = decodeNegint32;
	jump[59] = decodeNegint64;
	jump[60] = invalidMinor;
	jump[61] = invalidMinor;
	jump[62] = invalidMinor;
	jump[63] = invalidMinor;
	for (let i = 64; i <= 87; i++) {
	  jump[i] = decodeBytesCompact;
	}
	jump[88] = decodeBytes8;
	jump[89] = decodeBytes16;
	jump[90] = decodeBytes32;
	jump[91] = decodeBytes64;
	jump[92] = invalidMinor;
	jump[93] = invalidMinor;
	jump[94] = invalidMinor;
	jump[95] = errorer('indefinite length bytes/strings are not supported');
	for (let i = 96; i <= 119; i++) {
	  jump[i] = decodeStringCompact;
	}
	jump[120] = decodeString8;
	jump[121] = decodeString16;
	jump[122] = decodeString32;
	jump[123] = decodeString64;
	jump[124] = invalidMinor;
	jump[125] = invalidMinor;
	jump[126] = invalidMinor;
	jump[127] = errorer('indefinite length bytes/strings are not supported');
	for (let i = 128; i <= 151; i++) {
	  jump[i] = decodeArrayCompact;
	}
	jump[152] = decodeArray8;
	jump[153] = decodeArray16;
	jump[154] = decodeArray32;
	jump[155] = decodeArray64;
	jump[156] = invalidMinor;
	jump[157] = invalidMinor;
	jump[158] = invalidMinor;
	jump[159] = decodeArrayIndefinite;
	for (let i = 160; i <= 183; i++) {
	  jump[i] = decodeMapCompact;
	}
	jump[184] = decodeMap8;
	jump[185] = decodeMap16;
	jump[186] = decodeMap32;
	jump[187] = decodeMap64;
	jump[188] = invalidMinor;
	jump[189] = invalidMinor;
	jump[190] = invalidMinor;
	jump[191] = decodeMapIndefinite;
	for (let i = 192; i <= 215; i++) {
	  jump[i] = decodeTagCompact;
	}
	jump[216] = decodeTag8;
	jump[217] = decodeTag16;
	jump[218] = decodeTag32;
	jump[219] = decodeTag64;
	jump[220] = invalidMinor;
	jump[221] = invalidMinor;
	jump[222] = invalidMinor;
	jump[223] = invalidMinor;
	for (let i = 224; i <= 243; i++) {
	  jump[i] = errorer('simple values are not supported');
	}
	jump[244] = invalidMinor;
	jump[245] = invalidMinor;
	jump[246] = invalidMinor;
	jump[247] = decodeUndefined;
	jump[248] = errorer('simple values are not supported');
	jump[249] = decodeFloat16;
	jump[250] = decodeFloat32;
	jump[251] = decodeFloat64;
	jump[252] = invalidMinor;
	jump[253] = invalidMinor;
	jump[254] = invalidMinor;
	jump[255] = decodeBreak;
	const quick = [];
	for (let i = 0; i < 24; i++) {
	  quick[i] = new Token(Type.uint, i, 1);
	}
	for (let i = -1; i >= -24; i--) {
	  quick[31 - i] = new Token(Type.negint, i, 1);
	}
	quick[64] = new Token(Type.bytes, new Uint8Array(0), 1);
	quick[96] = new Token(Type.string, '', 1);
	quick[128] = new Token(Type.array, 0, 1);
	quick[160] = new Token(Type.map, 0, 1);
	quick[244] = new Token(Type.false, false, 1);
	quick[245] = new Token(Type.true, true, 1);
	quick[246] = new Token(Type.null, null, 1);
	function quickEncodeToken(token) {
	  switch (token.type) {
	  case Type.false:
	    return fromArray([244]);
	  case Type.true:
	    return fromArray([245]);
	  case Type.null:
	    return fromArray([246]);
	  case Type.bytes:
	    if (!token.value.length) {
	      return fromArray([64]);
	    }
	    return;
	  case Type.string:
	    if (token.value === '') {
	      return fromArray([96]);
	    }
	    return;
	  case Type.array:
	    if (token.value === 0) {
	      return fromArray([128]);
	    }
	    return;
	  case Type.map:
	    if (token.value === 0) {
	      return fromArray([160]);
	    }
	    return;
	  case Type.uint:
	    if (token.value < 24) {
	      return fromArray([Number(token.value)]);
	    }
	    return;
	  case Type.negint:
	    if (token.value >= -24) {
	      return fromArray([31 - Number(token.value)]);
	    }
	  }
	}

	const defaultEncodeOptions$1 = {
	  float64: false,
	  mapSorter: mapSorter$1,
	  quickEncodeToken
	};
	const cborEncoders = [];
	cborEncoders[Type.uint.major] = encodeUint;
	cborEncoders[Type.negint.major] = encodeNegint;
	cborEncoders[Type.bytes.major] = encodeBytes;
	cborEncoders[Type.string.major] = encodeString;
	cborEncoders[Type.array.major] = encodeArray;
	cborEncoders[Type.map.major] = encodeMap;
	cborEncoders[Type.tag.major] = encodeTag;
	cborEncoders[Type.float.major] = encodeFloat;
	const buf = new Bl();
	class Ref {
	  constructor(obj, parent) {
	    this.obj = obj;
	    this.parent = parent;
	  }
	  includes(obj) {
	    let p = this;
	    do {
	      if (p.obj === obj) {
	        return true;
	      }
	    } while (p = p.parent);
	    return false;
	  }
	  static createCheck(stack, obj) {
	    if (stack && stack.includes(obj)) {
	      throw new Error(`${ encodeErrPrefix } object contains circular references`);
	    }
	    return new Ref(obj, stack);
	  }
	}
	const simpleTokens = {
	  null: new Token(Type.null, null),
	  undefined: new Token(Type.undefined, undefined),
	  true: new Token(Type.true, true),
	  false: new Token(Type.false, false),
	  emptyArray: new Token(Type.array, 0),
	  emptyMap: new Token(Type.map, 0)
	};
	const typeEncoders = {
	  number(obj, _typ, _options, _refStack) {
	    if (!Number.isInteger(obj) || !Number.isSafeInteger(obj)) {
	      return new Token(Type.float, obj);
	    } else if (obj >= 0) {
	      return new Token(Type.uint, obj);
	    } else {
	      return new Token(Type.negint, obj);
	    }
	  },
	  bigint(obj, _typ, _options, _refStack) {
	    if (obj >= BigInt(0)) {
	      return new Token(Type.uint, obj);
	    } else {
	      return new Token(Type.negint, obj);
	    }
	  },
	  Uint8Array(obj, _typ, _options, _refStack) {
	    return new Token(Type.bytes, obj);
	  },
	  string(obj, _typ, _options, _refStack) {
	    return new Token(Type.string, obj);
	  },
	  boolean(obj, _typ, _options, _refStack) {
	    return obj ? simpleTokens.true : simpleTokens.false;
	  },
	  null(_obj, _typ, _options, _refStack) {
	    return simpleTokens.null;
	  },
	  undefined(_obj, _typ, _options, _refStack) {
	    return simpleTokens.undefined;
	  },
	  ArrayBuffer(obj, _typ, _options, _refStack) {
	    return new Token(Type.bytes, new Uint8Array(obj));
	  },
	  DataView(obj, _typ, _options, _refStack) {
	    return new Token(Type.bytes, new Uint8Array(obj.buffer, obj.byteOffset, obj.byteLength));
	  },
	  Array(obj, _typ, options, refStack) {
	    if (!obj.length) {
	      if (options.addBreakTokens === true) {
	        return [
	          simpleTokens.emptyArray,
	          new Token(Type.break)
	        ];
	      }
	      return simpleTokens.emptyArray;
	    }
	    refStack = Ref.createCheck(refStack, obj);
	    const entries = [];
	    let i = 0;
	    for (const e of obj) {
	      entries[i++] = objectToTokens(e, options, refStack);
	    }
	    if (options.addBreakTokens) {
	      return [
	        new Token(Type.array, obj.length),
	        entries,
	        new Token(Type.break)
	      ];
	    }
	    return [
	      new Token(Type.array, obj.length),
	      entries
	    ];
	  },
	  Object(obj, typ, options, refStack) {
	    const isMap = typ !== 'Object';
	    const keys = isMap ? obj.keys() : Object.keys(obj);
	    const length = isMap ? obj.size : keys.length;
	    if (!length) {
	      if (options.addBreakTokens === true) {
	        return [
	          simpleTokens.emptyMap,
	          new Token(Type.break)
	        ];
	      }
	      return simpleTokens.emptyMap;
	    }
	    refStack = Ref.createCheck(refStack, obj);
	    const entries = [];
	    let i = 0;
	    for (const key of keys) {
	      entries[i++] = [
	        objectToTokens(key, options, refStack),
	        objectToTokens(isMap ? obj.get(key) : obj[key], options, refStack)
	      ];
	    }
	    sortMapEntries(entries, options);
	    if (options.addBreakTokens) {
	      return [
	        new Token(Type.map, length),
	        entries,
	        new Token(Type.break)
	      ];
	    }
	    return [
	      new Token(Type.map, length),
	      entries
	    ];
	  }
	};
	typeEncoders.Map = typeEncoders.Object;
	typeEncoders.Buffer = typeEncoders.Uint8Array;
	for (const typ of 'Uint8Clamped Uint16 Uint32 Int8 Int16 Int32 BigUint64 BigInt64 Float32 Float64'.split(' ')) {
	  typeEncoders[`${ typ }Array`] = typeEncoders.DataView;
	}
	function objectToTokens(obj, options = {}, refStack) {
	  const typ = is(obj);
	  const customTypeEncoder = options && options.typeEncoders && options.typeEncoders[typ] || typeEncoders[typ];
	  if (typeof customTypeEncoder === 'function') {
	    const tokens = customTypeEncoder(obj, typ, options, refStack);
	    if (tokens != null) {
	      return tokens;
	    }
	  }
	  const typeEncoder = typeEncoders[typ];
	  if (!typeEncoder) {
	    throw new Error(`${ encodeErrPrefix } unsupported type: ${ typ }`);
	  }
	  return typeEncoder(obj, typ, options, refStack);
	}
	function sortMapEntries(entries, options) {
	  if (options.mapSorter) {
	    entries.sort(options.mapSorter);
	  }
	}
	function mapSorter$1(e1, e2) {
	  const keyToken1 = Array.isArray(e1[0]) ? e1[0][0] : e1[0];
	  const keyToken2 = Array.isArray(e2[0]) ? e2[0][0] : e2[0];
	  if (keyToken1.type !== keyToken2.type) {
	    return keyToken1.type.compare(keyToken2.type);
	  }
	  const major = keyToken1.type.major;
	  const tcmp = cborEncoders[major].compareTokens(keyToken1, keyToken2);
	  return tcmp;
	}
	function tokensToEncoded(buf, tokens, encoders, options) {
	  if (Array.isArray(tokens)) {
	    for (const token of tokens) {
	      tokensToEncoded(buf, token, encoders, options);
	    }
	  } else {
	    encoders[tokens.type.major](buf, tokens, options);
	  }
	}
	function encodeCustom(data, encoders, options) {
	  const tokens = objectToTokens(data, options);
	  if (!Array.isArray(tokens) && options.quickEncodeToken) {
	    const quickBytes = options.quickEncodeToken(tokens);
	    if (quickBytes) {
	      return quickBytes;
	    }
	    const encoder = encoders[tokens.type.major];
	    if (encoder.encodedSize) {
	      const size = encoder.encodedSize(tokens, options);
	      const buf = new Bl(size);
	      encoder(buf, tokens, options);
	      if (buf.chunks.length !== 1) {
	        throw new Error(`Unexpected error: pre-calculated length for ${ tokens } was wrong`);
	      }
	      return asU8A(buf.chunks[0]);
	    }
	  }
	  tokensToEncoded(buf, tokens, encoders, options);
	  return buf.toBytes(true);
	}
	function encode$j(data, options) {
	  options = Object.assign({}, defaultEncodeOptions$1, options);
	  return encodeCustom(data, cborEncoders, options);
	}

	const defaultDecodeOptions = {
	  strict: false,
	  allowIndefinite: true,
	  allowUndefined: true,
	  allowBigInt: true
	};
	class Tokeniser {
	  constructor(data, options = {}) {
	    this.pos = 0;
	    this.data = data;
	    this.options = options;
	  }
	  done() {
	    return this.pos >= this.data.length;
	  }
	  next() {
	    const byt = this.data[this.pos];
	    let token = quick[byt];
	    if (token === undefined) {
	      const decoder = jump[byt];
	      if (!decoder) {
	        throw new Error(`${ decodeErrPrefix } no decoder for major type ${ byt >>> 5 } (byte 0x${ byt.toString(16).padStart(2, '0') })`);
	      }
	      const minor = byt & 31;
	      token = decoder(this.data, this.pos, minor, this.options);
	    }
	    this.pos += token.encodedLength;
	    return token;
	  }
	}
	const DONE$1 = Symbol.for('DONE');
	const BREAK = Symbol.for('BREAK');
	function tokenToArray(token, tokeniser, options) {
	  const arr = [];
	  for (let i = 0; i < token.value; i++) {
	    const value = tokensToObject(tokeniser, options);
	    if (value === BREAK) {
	      if (token.value === Infinity) {
	        break;
	      }
	      throw new Error(`${ decodeErrPrefix } got unexpected break to lengthed array`);
	    }
	    if (value === DONE$1) {
	      throw new Error(`${ decodeErrPrefix } found array but not enough entries (got ${ i }, expected ${ token.value })`);
	    }
	    arr[i] = value;
	  }
	  return arr;
	}
	function tokenToMap(token, tokeniser, options) {
	  const useMaps = options.useMaps === true;
	  const obj = useMaps ? undefined : {};
	  const m = useMaps ? new Map() : undefined;
	  for (let i = 0; i < token.value; i++) {
	    const key = tokensToObject(tokeniser, options);
	    if (key === BREAK) {
	      if (token.value === Infinity) {
	        break;
	      }
	      throw new Error(`${ decodeErrPrefix } got unexpected break to lengthed map`);
	    }
	    if (key === DONE$1) {
	      throw new Error(`${ decodeErrPrefix } found map but not enough entries (got ${ i } [no key], expected ${ token.value })`);
	    }
	    if (useMaps !== true && typeof key !== 'string') {
	      throw new Error(`${ decodeErrPrefix } non-string keys not supported (got ${ typeof key })`);
	    }
	    const value = tokensToObject(tokeniser, options);
	    if (value === DONE$1) {
	      throw new Error(`${ decodeErrPrefix } found map but not enough entries (got ${ i } [no value], expected ${ token.value })`);
	    }
	    if (useMaps) {
	      m.set(key, value);
	    } else {
	      obj[key] = value;
	    }
	  }
	  return useMaps ? m : obj;
	}
	function tokensToObject(tokeniser, options) {
	  if (tokeniser.done()) {
	    return DONE$1;
	  }
	  const token = tokeniser.next();
	  if (token.type === Type.break) {
	    return BREAK;
	  }
	  if (token.type.terminal) {
	    return token.value;
	  }
	  if (token.type === Type.array) {
	    return tokenToArray(token, tokeniser, options);
	  }
	  if (token.type === Type.map) {
	    return tokenToMap(token, tokeniser, options);
	  }
	  if (token.type === Type.tag) {
	    if (options.tags && typeof options.tags[token.value] === 'function') {
	      const tagged = tokensToObject(tokeniser, options);
	      return options.tags[token.value](tagged);
	    }
	    throw new Error(`${ decodeErrPrefix } tag not supported (${ token.value })`);
	  }
	  throw new Error('unsupported');
	}
	function decode$h(data, options) {
	  if (!(data instanceof Uint8Array)) {
	    throw new Error(`${ decodeErrPrefix } data to decode must be a Uint8Array`);
	  }
	  options = Object.assign({}, defaultDecodeOptions, options);
	  const tokeniser = options.tokenizer || new Tokeniser(data, options);
	  const decoded = tokensToObject(tokeniser, options);
	  if (decoded === DONE$1) {
	    throw new Error(`${ decodeErrPrefix } did not find any content to decode`);
	  }
	  if (decoded === BREAK) {
	    throw new Error(`${ decodeErrPrefix } got unexpected break`);
	  }
	  if (!tokeniser.done()) {
	    throw new Error(`${ decodeErrPrefix } too many terminals, data makes no sense`);
	  }
	  return decoded;
	}

	const CID_CBOR_TAG$2 = 42;
	function cidEncoder$2(obj) {
	  if (obj.asCID !== obj) {
	    return null;
	  }
	  const cid = CID$6.asCID(obj);
	  if (!cid) {
	    return null;
	  }
	  const bytes = new Uint8Array(cid.bytes.byteLength + 1);
	  bytes.set(cid.bytes, 1);
	  return [
	    new Token(Type.tag, CID_CBOR_TAG$2),
	    new Token(Type.bytes, bytes)
	  ];
	}
	function undefinedEncoder$2() {
	  throw new Error('`undefined` is not supported by the IPLD Data Model and cannot be encoded');
	}
	function numberEncoder$2(num) {
	  if (Number.isNaN(num)) {
	    throw new Error('`NaN` is not supported by the IPLD Data Model and cannot be encoded');
	  }
	  if (num === Infinity || num === -Infinity) {
	    throw new Error('`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded');
	  }
	  return null;
	}
	const encodeOptions$2 = {
	  float64: true,
	  typeEncoders: {
	    Object: cidEncoder$2,
	    undefined: undefinedEncoder$2,
	    number: numberEncoder$2
	  }
	};
	function cidDecoder$2(bytes) {
	  if (bytes[0] !== 0) {
	    throw new Error('Invalid CID for CBOR tag 42; expected leading 0x00');
	  }
	  return CID$6.decode(bytes.subarray(1));
	}
	const decodeOptions$3 = {
	  allowIndefinite: false,
	  coerceUndefinedToNull: true,
	  allowNaN: false,
	  allowInfinity: false,
	  allowBigInt: true,
	  strict: true,
	  useMaps: false,
	  tags: []
	};
	decodeOptions$3.tags[CID_CBOR_TAG$2] = cidDecoder$2;
	const name$7 = 'dag-cbor';
	const code$7 = 113;
	const encode$i = node => encode$j(node, encodeOptions$2);
	const decode$g = data => decode$h(data, decodeOptions$3);

	var dagCBOR = /*#__PURE__*/Object.freeze({
		__proto__: null,
		name: name$7,
		code: code$7,
		encode: encode$i,
		decode: decode$g
	});

	const from$2 = ({name, code, encode}) => new Hasher(name, code, encode);
	class Hasher {
	  constructor(name, code, encode) {
	    this.name = name;
	    this.code = code;
	    this.encode = encode;
	  }
	  digest(input) {
	    if (input instanceof Uint8Array) {
	      const result = this.encode(input);
	      return result instanceof Uint8Array ? create$7(this.code, result) : result.then(digest => create$7(this.code, digest));
	    } else {
	      throw Error('Unknown type, must be binary type');
	    }
	  }
	}

	const base64$2 = rfc4648({
	  prefix: 'm',
	  name: 'base64',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
	  bitsPerChar: 6
	});
	const base64pad = rfc4648({
	  prefix: 'M',
	  name: 'base64pad',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
	  bitsPerChar: 6
	});
	const base64url = rfc4648({
	  prefix: 'u',
	  name: 'base64url',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',
	  bitsPerChar: 6
	});
	const base64urlpad = rfc4648({
	  prefix: 'U',
	  name: 'base64urlpad',
	  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',
	  bitsPerChar: 6
	});

	var base64$3 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		base64: base64$2,
		base64pad: base64pad,
		base64url: base64url,
		base64urlpad: base64urlpad
	});

	class JSONEncoder extends Array {
	  constructor() {
	    super();
	    this.inRecursive = [];
	  }
	  prefix(buf) {
	    const recurs = this.inRecursive[this.inRecursive.length - 1];
	    if (recurs) {
	      if (recurs.type === Type.array) {
	        recurs.elements++;
	        if (recurs.elements !== 1) {
	          buf.push([44]);
	        }
	      }
	      if (recurs.type === Type.map) {
	        recurs.elements++;
	        if (recurs.elements !== 1) {
	          if (recurs.elements % 2 === 1) {
	            buf.push([44]);
	          } else {
	            buf.push([58]);
	          }
	        }
	      }
	    }
	  }
	  [Type.uint.major](buf, token) {
	    this.prefix(buf);
	    const is = String(token.value);
	    const isa = [];
	    for (let i = 0; i < is.length; i++) {
	      isa[i] = is.charCodeAt(i);
	    }
	    buf.push(isa);
	  }
	  [Type.negint.major](buf, token) {
	    this[Type.uint.major](buf, token);
	  }
	  [Type.bytes.major](_buf, _token) {
	    throw new Error(`${ encodeErrPrefix } unsupported type: Uint8Array`);
	  }
	  [Type.string.major](buf, token) {
	    this.prefix(buf);
	    const byts = fromString$6(JSON.stringify(token.value));
	    buf.push(byts.length > 32 ? asU8A(byts) : byts);
	  }
	  [Type.array.major](buf, _token) {
	    this.prefix(buf);
	    this.inRecursive.push({
	      type: Type.array,
	      elements: 0
	    });
	    buf.push([91]);
	  }
	  [Type.map.major](buf, _token) {
	    this.prefix(buf);
	    this.inRecursive.push({
	      type: Type.map,
	      elements: 0
	    });
	    buf.push([123]);
	  }
	  [Type.tag.major](_buf, _token) {
	  }
	  [Type.float.major](buf, token) {
	    if (token.type.name === 'break') {
	      const recurs = this.inRecursive.pop();
	      if (recurs) {
	        if (recurs.type === Type.array) {
	          buf.push([93]);
	        } else if (recurs.type === Type.map) {
	          buf.push([125]);
	        } else {
	          throw new Error('Unexpected recursive type; this should not happen!');
	        }
	        return;
	      }
	      throw new Error('Unexpected break; this should not happen!');
	    }
	    if (token.value === undefined) {
	      throw new Error(`${ encodeErrPrefix } unsupported type: undefined`);
	    }
	    this.prefix(buf);
	    if (token.type.name === 'true') {
	      buf.push([
	        116,
	        114,
	        117,
	        101
	      ]);
	      return;
	    } else if (token.type.name === 'false') {
	      buf.push([
	        102,
	        97,
	        108,
	        115,
	        101
	      ]);
	      return;
	    } else if (token.type.name === 'null') {
	      buf.push([
	        110,
	        117,
	        108,
	        108
	      ]);
	      return;
	    }
	    const is = String(token.value);
	    const isa = [];
	    let dp = false;
	    for (let i = 0; i < is.length; i++) {
	      isa[i] = is.charCodeAt(i);
	      if (!dp && (isa[i] === 46 || isa[i] === 101 || isa[i] === 69)) {
	        dp = true;
	      }
	    }
	    if (!dp) {
	      isa.push(46);
	      isa.push(48);
	    }
	    buf.push(isa);
	  }
	}
	function mapSorter(e1, e2) {
	  if (Array.isArray(e1[0]) || Array.isArray(e2[0])) {
	    throw new Error(`${ encodeErrPrefix } complex map keys are not supported`);
	  }
	  const keyToken1 = e1[0];
	  const keyToken2 = e2[0];
	  if (keyToken1.type !== Type.string || keyToken2.type !== Type.string) {
	    throw new Error(`${ encodeErrPrefix } non-string map keys are not supported`);
	  }
	  if (keyToken1 < keyToken2) {
	    return -1;
	  }
	  if (keyToken1 > keyToken2) {
	    return 1;
	  }
	  throw new Error(`${ encodeErrPrefix } unexpected duplicate map keys, this is not supported`);
	}
	const defaultEncodeOptions = {
	  addBreakTokens: true,
	  mapSorter
	};
	function encode$h(data, options) {
	  options = Object.assign({}, defaultEncodeOptions, options);
	  return encodeCustom(data, new JSONEncoder(), options);
	}

	class Tokenizer {
	  constructor(data, options = {}) {
	    this.pos = 0;
	    this.data = data;
	    this.options = options;
	    this.modeStack = ['value'];
	    this.lastToken = '';
	  }
	  done() {
	    return this.pos >= this.data.length;
	  }
	  ch() {
	    return this.data[this.pos];
	  }
	  currentMode() {
	    return this.modeStack[this.modeStack.length - 1];
	  }
	  skipWhitespace() {
	    let c = this.ch();
	    while (c === 32 || c === 9 || c === 13 || c === 10) {
	      c = this.data[++this.pos];
	    }
	  }
	  expect(str) {
	    if (this.data.length - this.pos < str.length) {
	      throw new Error(`${ decodeErrPrefix } unexpected end of input at position ${ this.pos }`);
	    }
	    for (let i = 0; i < str.length; i++) {
	      if (this.data[this.pos++] !== str[i]) {
	        throw new Error(`${ decodeErrPrefix } unexpected token at position ${ this.pos }, expected to find '${ String.fromCharCode(...str) }'`);
	      }
	    }
	  }
	  parseNumber() {
	    const startPos = this.pos;
	    let negative = false;
	    let float = false;
	    const swallow = chars => {
	      while (!this.done()) {
	        const ch = this.ch();
	        if (chars.includes(ch)) {
	          this.pos++;
	        } else {
	          break;
	        }
	      }
	    };
	    if (this.ch() === 45) {
	      negative = true;
	      this.pos++;
	    }
	    if (this.ch() === 48) {
	      this.pos++;
	      if (this.ch() === 46) {
	        this.pos++;
	        float = true;
	      } else {
	        return new Token(Type.uint, 0, this.pos - startPos);
	      }
	    }
	    swallow([
	      48,
	      49,
	      50,
	      51,
	      52,
	      53,
	      54,
	      55,
	      56,
	      57
	    ]);
	    if (negative && this.pos === startPos + 1) {
	      throw new Error(`${ decodeErrPrefix } unexpected token at position ${ this.pos }`);
	    }
	    if (!this.done() && this.ch() === 46) {
	      if (float) {
	        throw new Error(`${ decodeErrPrefix } unexpected token at position ${ this.pos }`);
	      }
	      float = true;
	      this.pos++;
	      swallow([
	        48,
	        49,
	        50,
	        51,
	        52,
	        53,
	        54,
	        55,
	        56,
	        57
	      ]);
	    }
	    if (!this.done() && (this.ch() === 101 || this.ch() === 69)) {
	      float = true;
	      this.pos++;
	      if (!this.done() && (this.ch() === 43 || this.ch() === 45)) {
	        this.pos++;
	      }
	      swallow([
	        48,
	        49,
	        50,
	        51,
	        52,
	        53,
	        54,
	        55,
	        56,
	        57
	      ]);
	    }
	    const numStr = String.fromCharCode.apply(null, this.data.subarray(startPos, this.pos));
	    const num = parseFloat(numStr);
	    if (float) {
	      return new Token(Type.float, num, this.pos - startPos);
	    }
	    if (this.options.allowBigInt !== true || Number.isSafeInteger(num)) {
	      return new Token(num >= 0 ? Type.uint : Type.negint, num, this.pos - startPos);
	    }
	    return new Token(num >= 0 ? Type.uint : Type.negint, BigInt(numStr), this.pos - startPos);
	  }
	  parseString() {
	    if (this.ch() !== 34) {
	      throw new Error(`${ decodeErrPrefix } unexpected character at position ${ this.pos }; this shouldn't happen`);
	    }
	    this.pos++;
	    for (let i = this.pos, l = 0; i < this.data.length && l < 65536; i++, l++) {
	      const ch = this.data[i];
	      if (ch === 92 || ch < 32 || ch >= 128) {
	        break;
	      }
	      if (ch === 34) {
	        const str = String.fromCharCode.apply(null, this.data.subarray(this.pos, i));
	        this.pos = i + 1;
	        return new Token(Type.string, str, l);
	      }
	    }
	    const startPos = this.pos;
	    const chars = [];
	    const readu4 = () => {
	      if (this.pos + 4 >= this.data.length) {
	        throw new Error(`${ decodeErrPrefix } unexpected end of unicode escape sequence at position ${ this.pos }`);
	      }
	      let u4 = 0;
	      for (let i = 0; i < 4; i++) {
	        let ch = this.ch();
	        if (ch >= 48 && ch <= 57) {
	          ch -= 48;
	        } else if (ch >= 97 && ch <= 102) {
	          ch = ch - 97 + 10;
	        } else if (ch >= 65 && ch <= 70) {
	          ch = ch - 65 + 10;
	        } else {
	          throw new Error(`${ decodeErrPrefix } unexpected unicode escape character at position ${ this.pos }`);
	        }
	        u4 = u4 * 16 + ch;
	        this.pos++;
	      }
	      return u4;
	    };
	    const readUtf8Char = () => {
	      const firstByte = this.ch();
	      let codePoint = null;
	      let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
	      if (this.pos + bytesPerSequence > this.data.length) {
	        throw new Error(`${ decodeErrPrefix } unexpected unicode sequence at position ${ this.pos }`);
	      }
	      let secondByte, thirdByte, fourthByte, tempCodePoint;
	      switch (bytesPerSequence) {
	      case 1:
	        if (firstByte < 128) {
	          codePoint = firstByte;
	        }
	        break;
	      case 2:
	        secondByte = this.data[this.pos + 1];
	        if ((secondByte & 192) === 128) {
	          tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
	          if (tempCodePoint > 127) {
	            codePoint = tempCodePoint;
	          }
	        }
	        break;
	      case 3:
	        secondByte = this.data[this.pos + 1];
	        thirdByte = this.data[this.pos + 2];
	        if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
	          tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
	          if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
	            codePoint = tempCodePoint;
	          }
	        }
	        break;
	      case 4:
	        secondByte = this.data[this.pos + 1];
	        thirdByte = this.data[this.pos + 2];
	        fourthByte = this.data[this.pos + 3];
	        if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
	          tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
	          if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
	            codePoint = tempCodePoint;
	          }
	        }
	      }
	      if (codePoint === null) {
	        codePoint = 65533;
	        bytesPerSequence = 1;
	      } else if (codePoint > 65535) {
	        codePoint -= 65536;
	        chars.push(codePoint >>> 10 & 1023 | 55296);
	        codePoint = 56320 | codePoint & 1023;
	      }
	      chars.push(codePoint);
	      this.pos += bytesPerSequence;
	    };
	    while (!this.done()) {
	      const ch = this.ch();
	      let ch1;
	      switch (ch) {
	      case 92:
	        this.pos++;
	        if (this.done()) {
	          throw new Error(`${ decodeErrPrefix } unexpected string termination at position ${ this.pos }`);
	        }
	        ch1 = this.ch();
	        this.pos++;
	        switch (ch1) {
	        case 34:
	        case 39:
	        case 92:
	        case 47:
	          chars.push(ch1);
	          break;
	        case 98:
	          chars.push(8);
	          break;
	        case 116:
	          chars.push(9);
	          break;
	        case 110:
	          chars.push(10);
	          break;
	        case 102:
	          chars.push(12);
	          break;
	        case 114:
	          chars.push(13);
	          break;
	        case 117:
	          chars.push(readu4());
	          break;
	        default:
	          throw new Error(`${ decodeErrPrefix } unexpected string escape character at position ${ this.pos }`);
	        }
	        break;
	      case 34:
	        this.pos++;
	        return new Token(Type.string, decodeCodePointsArray$1(chars), this.pos - startPos);
	      default:
	        if (ch < 32) {
	          throw new Error(`${ decodeErrPrefix } invalid control character at position ${ this.pos }`);
	        } else if (ch < 128) {
	          chars.push(ch);
	          this.pos++;
	        } else {
	          readUtf8Char();
	        }
	      }
	    }
	    throw new Error(`${ decodeErrPrefix } unexpected end of string at position ${ this.pos }`);
	  }
	  parseValue() {
	    switch (this.ch()) {
	    case 123:
	      this.modeStack.push('obj-start');
	      this.pos++;
	      return new Token(Type.map, Infinity, 1);
	    case 91:
	      this.modeStack.push('array-start');
	      this.pos++;
	      return new Token(Type.array, Infinity, 1);
	    case 34: {
	        return this.parseString();
	      }
	    case 110:
	      this.expect([
	        110,
	        117,
	        108,
	        108
	      ]);
	      return new Token(Type.null, null, 4);
	    case 102:
	      this.expect([
	        102,
	        97,
	        108,
	        115,
	        101
	      ]);
	      return new Token(Type.false, false, 5);
	    case 116:
	      this.expect([
	        116,
	        114,
	        117,
	        101
	      ]);
	      return new Token(Type.true, true, 4);
	    case 45:
	    case 48:
	    case 49:
	    case 50:
	    case 51:
	    case 52:
	    case 53:
	    case 54:
	    case 55:
	    case 56:
	    case 57:
	      return this.parseNumber();
	    default:
	      throw new Error(`${ decodeErrPrefix } unexpected character at position ${ this.pos }`);
	    }
	  }
	  next() {
	    this.skipWhitespace();
	    switch (this.currentMode()) {
	    case 'value':
	      this.modeStack.pop();
	      return this.parseValue();
	    case 'array-value': {
	        this.modeStack.pop();
	        if (this.ch() === 93) {
	          this.pos++;
	          this.skipWhitespace();
	          return new Token(Type.break, undefined, 1);
	        }
	        if (this.ch() !== 44) {
	          throw new Error(`${ decodeErrPrefix } unexpected character at position ${ this.pos }, was expecting array delimiter but found '${ String.fromCharCode(this.ch()) }'`);
	        }
	        this.pos++;
	        this.modeStack.push('array-value');
	        this.skipWhitespace();
	        return this.parseValue();
	      }
	    case 'array-start': {
	        this.modeStack.pop();
	        if (this.ch() === 93) {
	          this.pos++;
	          this.skipWhitespace();
	          return new Token(Type.break, undefined, 1);
	        }
	        this.modeStack.push('array-value');
	        this.skipWhitespace();
	        return this.parseValue();
	      }
	    case 'obj-key':
	      if (this.ch() === 125) {
	        this.modeStack.pop();
	        this.pos++;
	        this.skipWhitespace();
	        return new Token(Type.break, undefined, 1);
	      }
	      if (this.ch() !== 44) {
	        throw new Error(`${ decodeErrPrefix } unexpected character at position ${ this.pos }, was expecting object delimiter but found '${ String.fromCharCode(this.ch()) }'`);
	      }
	      this.pos++;
	      this.skipWhitespace();
	    case 'obj-start': {
	        this.modeStack.pop();
	        if (this.ch() === 125) {
	          this.pos++;
	          this.skipWhitespace();
	          return new Token(Type.break, undefined, 1);
	        }
	        const token = this.parseString();
	        this.skipWhitespace();
	        if (this.ch() !== 58) {
	          throw new Error(`${ decodeErrPrefix } unexpected character at position ${ this.pos }, was expecting key/value delimiter ':' but found '${ String.fromCharCode(this.ch()) }'`);
	        }
	        this.pos++;
	        this.modeStack.push('obj-value');
	        return token;
	      }
	    case 'obj-value': {
	        this.modeStack.pop();
	        this.modeStack.push('obj-key');
	        this.skipWhitespace();
	        return this.parseValue();
	      }
	    default:
	      throw new Error(`${ decodeErrPrefix } unexpected parse state at position ${ this.pos }; this shouldn't happen`);
	    }
	  }
	}
	function decode$f(data, options) {
	  options = Object.assign({ tokenizer: new Tokenizer(data, options) }, options);
	  return decode$h(data, options);
	}

	function cidEncoder$1(obj) {
	  if (obj.asCID !== obj) {
	    return null;
	  }
	  const cid = CID$6.asCID(obj);
	  if (!cid) {
	    return null;
	  }
	  const cidString = cid.toString();
	  return [
	    new Token(Type.map, Infinity, 1),
	    new Token(Type.string, '/', 1),
	    new Token(Type.string, cidString, cidString.length),
	    new Token(Type.break, undefined, 1)
	  ];
	}
	function bytesEncoder(bytes) {
	  const bytesString = base64$2.encode(bytes).slice(1);
	  return [
	    new Token(Type.map, Infinity, 1),
	    new Token(Type.string, '/', 1),
	    new Token(Type.map, Infinity, 1),
	    new Token(Type.string, 'bytes', 5),
	    new Token(Type.string, bytesString, bytesString.length),
	    new Token(Type.break, undefined, 1),
	    new Token(Type.break, undefined, 1)
	  ];
	}
	function undefinedEncoder$1() {
	  throw new Error('`undefined` is not supported by the IPLD Data Model and cannot be encoded');
	}
	function numberEncoder$1(num) {
	  if (Number.isNaN(num)) {
	    throw new Error('`NaN` is not supported by the IPLD Data Model and cannot be encoded');
	  }
	  if (num === Infinity || num === -Infinity) {
	    throw new Error('`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded');
	  }
	  return null;
	}
	const encodeOptions$1 = {
	  typeEncoders: {
	    Object: cidEncoder$1,
	    Uint8Array: bytesEncoder,
	    Buffer: bytesEncoder,
	    undefined: undefinedEncoder$1,
	    number: numberEncoder$1
	  }
	};
	class DagJsonTokenizer extends Tokenizer {
	  constructor(data, options) {
	    super(data, options);
	    this.tokenBuffer = [];
	  }
	  done() {
	    return this.tokenBuffer.length === 0 && super.done();
	  }
	  _next() {
	    if (this.tokenBuffer.length > 0) {
	      return this.tokenBuffer.pop();
	    }
	    return super.next();
	  }
	  next() {
	    const token = this._next();
	    if (token.type === Type.map) {
	      const keyToken = this._next();
	      if (keyToken.type === Type.string && keyToken.value === '/') {
	        const valueToken = this._next();
	        if (valueToken.type === Type.string) {
	          const breakToken = this._next();
	          if (breakToken.type !== Type.break) {
	            throw new Error('Invalid encoded CID form');
	          }
	          this.tokenBuffer.push(valueToken);
	          return new Token(Type.tag, 42, 0);
	        }
	        if (valueToken.type === Type.map) {
	          const innerKeyToken = this._next();
	          if (innerKeyToken.type === Type.string && innerKeyToken.value === 'bytes') {
	            const innerValueToken = this._next();
	            if (innerValueToken.type === Type.string) {
	              for (let i = 0; i < 2; i++) {
	                const breakToken = this._next();
	                if (breakToken.type !== Type.break) {
	                  throw new Error('Invalid encoded Bytes form');
	                }
	              }
	              const bytes = base64$2.decode(`m${ innerValueToken.value }`);
	              return new Token(Type.bytes, bytes, innerValueToken.value.length);
	            }
	            this.tokenBuffer.push(innerValueToken);
	          }
	          this.tokenBuffer.push(innerKeyToken);
	        }
	        this.tokenBuffer.push(valueToken);
	      }
	      this.tokenBuffer.push(keyToken);
	    }
	    return token;
	  }
	}
	const decodeOptions$2 = {
	  allowIndefinite: false,
	  allowUndefined: false,
	  allowNaN: false,
	  allowInfinity: false,
	  allowBigInt: true,
	  strict: true,
	  useMaps: false,
	  tags: []
	};
	decodeOptions$2.tags[42] = CID$6.parse;
	const name$6 = 'dag-json';
	const code$6 = 297;
	const encode$g = node => encode$h(node, encodeOptions$1);
	const decode$e = data => {
	  const options = Object.assign(decodeOptions$2, { tokenizer: new DagJsonTokenizer(data, decodeOptions$2) });
	  return decode$f(data, options);
	};

	var dagJSON = /*#__PURE__*/Object.freeze({
		__proto__: null,
		name: name$6,
		code: code$6,
		encode: encode$g,
		decode: decode$e
	});

	var lib$5 = {};

	var signing = {};

	var utils$D = {};

	var require$$4$1 = /*@__PURE__*/getAugmentedNamespace(base64$3);

	Object.defineProperty(utils$D, "__esModule", { value: true });
	utils$D.fromBase64url = utils$D.toBase64url = void 0;
	const base64_1 = require$$4$1;
	function toBase64url(b) {
	    return base64_1.base64url.encode(b).slice(1);
	}
	utils$D.toBase64url = toBase64url;
	function fromBase64url(s) {
	    return base64_1.base64url.decode(`u${s}`);
	}
	utils$D.fromBase64url = fromBase64url;

	var require$$0$3 = /*@__PURE__*/getAugmentedNamespace(cid);

	Object.defineProperty(signing, "__esModule", { value: true });
	const utils_1$c = utils$D;
	const cid_1 = require$$0$3;
	function fromSplit$1(split) {
	    const [protectedHeader, payload, signature] = split;
	    return {
	        payload,
	        signatures: [{ protected: protectedHeader, signature }],
	        link: cid_1.CID.decode(utils_1$c.fromBase64url(payload)),
	    };
	}
	function encodeSignature(signature) {
	    const encoded = {
	        signature: utils_1$c.fromBase64url(signature.signature),
	    };
	    if (signature.header)
	        encoded.header = signature.header;
	    if (signature.protected)
	        encoded.protected = utils_1$c.fromBase64url(signature.protected);
	    return encoded;
	}
	function encode$f(jws) {
	    const payload = utils_1$c.fromBase64url(jws.payload);
	    try {
	        cid_1.CID.decode(payload);
	    }
	    catch (e) {
	        throw new Error('Not a valid DagJWS');
	    }
	    const encodedJws = {
	        payload,
	        signatures: jws.signatures.map(encodeSignature),
	    };
	    return encodedJws;
	}
	function decodeSignature(encoded) {
	    const sign = {
	        signature: utils_1$c.toBase64url(encoded.signature),
	    };
	    if (encoded.header)
	        sign.header = encoded.header;
	    if (encoded.protected)
	        sign.protected = utils_1$c.toBase64url(encoded.protected);
	    return sign;
	}
	function decode$d(encoded) {
	    const decoded = {
	        payload: utils_1$c.toBase64url(encoded.payload),
	        signatures: encoded.signatures.map(decodeSignature),
	    };
	    decoded.link = cid_1.CID.decode(new Uint8Array(encoded.payload));
	    return decoded;
	}
	signing.default = {
	    fromSplit: fromSplit$1,
	    encode: encode$f,
	    decode: decode$d,
	};

	var encryption = {};

	Object.defineProperty(encryption, "__esModule", { value: true });
	const utils_1$b = utils$D;
	function fromSplit(split) {
	    const [protectedHeader, encrypted_key, iv, ciphertext, tag] = split;
	    const jwe = {
	        ciphertext,
	        iv,
	        protected: protectedHeader,
	        tag,
	    };
	    if (encrypted_key)
	        jwe.recipients = [{ encrypted_key }];
	    return jwe;
	}
	function encodeRecipient(recipient) {
	    const encRec = {};
	    if (recipient.encrypted_key)
	        encRec.encrypted_key = utils_1$b.fromBase64url(recipient.encrypted_key);
	    if (recipient.header)
	        encRec.header = recipient.header;
	    return encRec;
	}
	function encode$e(jwe) {
	    const encJwe = {
	        ciphertext: utils_1$b.fromBase64url(jwe.ciphertext),
	        protected: utils_1$b.fromBase64url(jwe.protected),
	        iv: utils_1$b.fromBase64url(jwe.iv),
	        tag: utils_1$b.fromBase64url(jwe.tag),
	    };
	    if (jwe.aad)
	        encJwe.aad = utils_1$b.fromBase64url(jwe.aad);
	    if (jwe.recipients)
	        encJwe.recipients = jwe.recipients.map(encodeRecipient);
	    if (jwe.unprotected)
	        encJwe.unprotected = jwe.unprotected;
	    return encJwe;
	}
	function decodeRecipient(encoded) {
	    const recipient = {};
	    if (encoded.encrypted_key)
	        recipient.encrypted_key = utils_1$b.toBase64url(encoded.encrypted_key);
	    if (encoded.header)
	        recipient.header = encoded.header;
	    return recipient;
	}
	function decode$c(encoded) {
	    const jwe = {
	        ciphertext: utils_1$b.toBase64url(encoded.ciphertext),
	        protected: utils_1$b.toBase64url(encoded.protected),
	        iv: utils_1$b.toBase64url(encoded.iv),
	        tag: utils_1$b.toBase64url(encoded.tag),
	    };
	    if (encoded.aad)
	        jwe.aad = utils_1$b.toBase64url(encoded.aad);
	    if (encoded.recipients)
	        jwe.recipients = encoded.recipients.map(decodeRecipient);
	    if (encoded.unprotected)
	        jwe.unprotected = encoded.unprotected;
	    return jwe;
	}
	encryption.default = {
	    fromSplit,
	    decode: decode$c,
	    encode: encode$e,
	};

	const CID_CBOR_TAG$1 = 42;
	function cidEncoder(obj) {
	  if (obj.asCID !== obj) {
	    return null;
	  }
	  const cid = CID$6.asCID(obj);
	  if (!cid) {
	    return null;
	  }
	  const bytes = new Uint8Array(cid.bytes.byteLength + 1);
	  bytes.set(cid.bytes, 1);
	  return [
	    new Token(Type.tag, CID_CBOR_TAG$1),
	    new Token(Type.bytes, bytes)
	  ];
	}
	function undefinedEncoder() {
	  throw new Error('`undefined` is not supported by the IPLD Data Model and cannot be encoded');
	}
	function numberEncoder(num) {
	  if (Number.isNaN(num)) {
	    throw new Error('`NaN` is not supported by the IPLD Data Model and cannot be encoded');
	  }
	  if (num === Infinity || num === -Infinity) {
	    throw new Error('`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded');
	  }
	  return null;
	}
	const encodeOptions = {
	  float64: true,
	  typeEncoders: {
	    Object: cidEncoder,
	    undefined: undefinedEncoder,
	    number: numberEncoder
	  }
	};
	function cidDecoder$1(bytes) {
	  if (bytes[0] !== 0) {
	    throw new Error('Invalid CID for CBOR tag 42; expected leading 0x00');
	  }
	  return CID$6.decode(bytes.subarray(1));
	}
	const decodeOptions$1 = {
	  allowIndefinite: false,
	  allowUndefined: false,
	  allowNaN: false,
	  allowInfinity: false,
	  allowBigInt: true,
	  strict: true,
	  useMaps: false,
	  tags: []
	};
	decodeOptions$1.tags[CID_CBOR_TAG$1] = cidDecoder$1;
	const name$5 = 'dag-cbor';
	const code$5 = 113;
	const encode$d = node => encode$j(node, encodeOptions);
	const decode$b = data => decode$h(data, decodeOptions$1);

	var esm = /*#__PURE__*/Object.freeze({
		__proto__: null,
		name: name$5,
		code: code$5,
		encode: encode$d,
		decode: decode$b
	});

	var require$$2$3 = /*@__PURE__*/getAugmentedNamespace(esm);

	var __createBinding$8 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$8 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$8 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$8(result, mod, k);
	    __setModuleDefault$8(result, mod);
	    return result;
	};
	var __importDefault$f = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(lib$5, "__esModule", { value: true });
	var decode_1 = lib$5.decode = encode_1$2 = lib$5.encode = toGeneral_1 = lib$5.toGeneral = code$4 = lib$5.code = name$4 = lib$5.name = void 0;
	const signing_1 = __importDefault$f(signing);
	const encryption_1 = __importDefault$f(encryption);
	const cbor = __importStar$8(require$$2$3);
	var name$4 = lib$5.name = 'dag-jose';
	var code$4 = lib$5.code = 133;
	function isDagJWS(jose) {
	    return ('payload' in jose &&
	        typeof jose.payload === 'string' &&
	        'signatures' in jose &&
	        Array.isArray(jose.signatures));
	}
	function isEncodedJWS(jose) {
	    return ('payload' in jose &&
	        jose.payload instanceof Uint8Array &&
	        'signatures' in jose &&
	        Array.isArray(jose.signatures));
	}
	function isEncodedJWE(jose) {
	    return ('ciphertext' in jose &&
	        jose.ciphertext instanceof Uint8Array &&
	        'iv' in jose &&
	        jose.iv instanceof Uint8Array &&
	        'protected' in jose &&
	        jose.protected instanceof Uint8Array &&
	        'tag' in jose &&
	        jose.tag instanceof Uint8Array);
	}
	function isDagJWE(jose) {
	    return ('ciphertext' in jose &&
	        typeof jose.ciphertext === 'string' &&
	        'iv' in jose &&
	        typeof jose.iv === 'string' &&
	        'protected' in jose &&
	        typeof jose.protected === 'string' &&
	        'tag' in jose &&
	        typeof jose.tag === 'string');
	}
	function toGeneral(jose) {
	    if (typeof jose === 'string') {
	        const split = jose.split('.');
	        if (split.length === 3) {
	            return signing_1.default.fromSplit(split);
	        }
	        else if (split.length === 5) {
	            return encryption_1.default.fromSplit(split);
	        }
	        throw new Error('Not a valid JOSE string');
	    }
	    if (isDagJWS(jose) || isDagJWE(jose)) {
	        return jose;
	    }
	    throw new Error('Not a valid unencoded JOSE object');
	}
	var toGeneral_1 = lib$5.toGeneral = toGeneral;
	function encode$c(obj) {
	    if (typeof obj === 'string') {
	        obj = toGeneral(obj);
	    }
	    let encodedJose;
	    if (isDagJWS(obj)) {
	        encodedJose = signing_1.default.encode(obj);
	    }
	    else if (isDagJWE(obj)) {
	        encodedJose = encryption_1.default.encode(obj);
	    }
	    else {
	        throw new Error('Not a valid JOSE object');
	    }
	    return new Uint8Array(cbor.encode(encodedJose));
	}
	var encode_1$2 = lib$5.encode = encode$c;
	function decode$a(data) {
	    let encoded;
	    try {
	        encoded = cbor.decode(data);
	    }
	    catch (e) {
	        throw new Error('Not a valid DAG-JOSE object');
	    }
	    if (isEncodedJWS(encoded)) {
	        return signing_1.default.decode(encoded);
	    }
	    else if (isEncodedJWE(encoded)) {
	        return encryption_1.default.decode(encoded);
	    }
	    else {
	        throw new Error('Not a valid DAG-JOSE object');
	    }
	}
	decode_1 = lib$5.decode = decode$a;

	var dagJOSE = /*#__PURE__*/Object.freeze(/*#__PURE__*/_mergeNamespaces({
		__proto__: null,
		get decode () { return decode_1; },
		get encode () { return encode_1$2; },
		get toGeneral () { return toGeneral_1; },
		get code () { return code$4; },
		get name () { return name$4; },
		'default': lib$5
	}, [lib$5]));

	const code$3 = 0;
	const name$3 = 'identity';
	const encode$b = coerce;
	const digest = input => create$7(code$3, encode$b(input));
	const identity$2 = {
	  code: code$3,
	  name: name$3,
	  encode: encode$b,
	  digest
	};

	var identity$3 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		identity: identity$2
	});

	const identity$1 = from$3({
	  prefix: '\0',
	  name: 'identity',
	  encode: buf => toString$9(buf),
	  decode: str => fromString$7(str)
	});

	var identityBase = /*#__PURE__*/Object.freeze({
		__proto__: null,
		identity: identity$1
	});

	const base2 = rfc4648({
	  prefix: '0',
	  name: 'base2',
	  alphabet: '01',
	  bitsPerChar: 1
	});

	var base2$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		base2: base2
	});

	const base8 = rfc4648({
	  prefix: '7',
	  name: 'base8',
	  alphabet: '01234567',
	  bitsPerChar: 3
	});

	var base8$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		base8: base8
	});

	const base10 = baseX({
	  prefix: '9',
	  name: 'base10',
	  alphabet: '0123456789'
	});

	var base10$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		base10: base10
	});

	const base16 = rfc4648({
	  prefix: 'f',
	  name: 'base16',
	  alphabet: '0123456789abcdef',
	  bitsPerChar: 4
	});
	const base16upper = rfc4648({
	  prefix: 'F',
	  name: 'base16upper',
	  alphabet: '0123456789ABCDEF',
	  bitsPerChar: 4
	});

	var base16$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		base16: base16,
		base16upper: base16upper
	});

	const base36 = baseX({
	  prefix: 'k',
	  name: 'base36',
	  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'
	});
	const base36upper = baseX({
	  prefix: 'K',
	  name: 'base36upper',
	  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
	});

	var base36$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		base36: base36,
		base36upper: base36upper
	});

	const sha = name => async data => new Uint8Array(await crypto.subtle.digest(name, data));
	const sha256$b = from$2({
	  name: 'sha2-256',
	  code: 18,
	  encode: sha('SHA-256')
	});
	const sha512$1 = from$2({
	  name: 'sha2-512',
	  code: 19,
	  encode: sha('SHA-512')
	});

	var sha2Browser = /*#__PURE__*/Object.freeze({
		__proto__: null,
		sha256: sha256$b,
		sha512: sha512$1
	});

	const name$2 = 'raw';
	const code$2 = 85;
	const encode$a = node => coerce(node);
	const decode$9 = data => coerce(data);

	var raw = /*#__PURE__*/Object.freeze({
		__proto__: null,
		name: name$2,
		code: code$2,
		encode: encode$a,
		decode: decode$9
	});

	const textEncoder = new TextEncoder();
	const textDecoder = new TextDecoder();
	const name$1 = 'json';
	const code$1 = 512;
	const encode$9 = node => textEncoder.encode(JSON.stringify(node));
	const decode$8 = data => JSON.parse(textDecoder.decode(data));

	var json = /*#__PURE__*/Object.freeze({
		__proto__: null,
		name: name$1,
		code: code$1,
		encode: encode$9,
		decode: decode$8
	});

	const bases = {
	  ...identityBase,
	  ...base2$1,
	  ...base8$1,
	  ...base10$1,
	  ...base16$1,
	  ...base32$5,
	  ...base36$1,
	  ...base58,
	  ...base64$3
	};
	const hashes = {
	  ...sha2Browser,
	  ...identity$3
	};
	const codecs = {
	  raw,
	  json
	};

	function initAssets() {
	}

	class NotInitializedError extends Error {
	  constructor(message = 'not initialized') {
	    super(message);
	    this.name = 'NotInitializedError';
	    this.code = NotInitializedError.code;
	  }
	}
	NotInitializedError.code = 'ERR_NOT_INITIALIZED';
	class AlreadyInitializingError extends Error {
	  constructor(message = 'cannot initialize an initializing node') {
	    super(message);
	    this.name = 'AlreadyInitializingError';
	    this.code = AlreadyInitializedError.code;
	  }
	}
	AlreadyInitializingError.code = 'ERR_ALREADY_INITIALIZING';
	class AlreadyInitializedError extends Error {
	  constructor(message = 'cannot re-initialize an initialized node') {
	    super(message);
	    this.name = 'AlreadyInitializedError';
	    this.code = AlreadyInitializedError.code;
	  }
	}
	AlreadyInitializedError.code = 'ERR_ALREADY_INITIALIZED';
	class NotStartedError extends Error {
	  constructor(message = 'not started') {
	    super(message);
	    this.name = 'NotStartedError';
	    this.code = NotStartedError.code;
	  }
	}
	NotStartedError.code = 'ERR_NOT_STARTED';
	class AlreadyStartingError extends Error {
	  constructor(message = 'cannot start, already startin') {
	    super(message);
	    this.name = 'AlreadyStartingError';
	    this.code = AlreadyStartingError.code;
	  }
	}
	AlreadyStartingError.code = 'ERR_ALREADY_STARTING';
	class AlreadyStartedError extends Error {
	  constructor(message = 'cannot start, already started') {
	    super(message);
	    this.name = 'AlreadyStartedError';
	    this.code = AlreadyStartedError.code;
	  }
	}
	AlreadyStartedError.code = 'ERR_ALREADY_STARTED';
	class NotEnabledError extends Error {
	  constructor(message = 'not enabled') {
	    super(message);
	    this.name = 'NotEnabledError';
	    this.code = NotEnabledError.code;
	  }
	}
	NotEnabledError.code = 'ERR_NOT_ENABLED';

	function createCodec(name, prefix, encode, decode) {
	  return {
	    name,
	    prefix,
	    encoder: {
	      name,
	      prefix,
	      encode
	    },
	    decoder: { decode }
	  };
	}
	const string = createCodec('utf8', 'u', buf => {
	  const decoder = new TextDecoder('utf8');
	  return 'u' + decoder.decode(buf);
	}, str => {
	  const encoder = new TextEncoder();
	  return encoder.encode(str.substring(1));
	});
	const ascii = createCodec('ascii', 'a', buf => {
	  let string = 'a';
	  for (let i = 0; i < buf.length; i++) {
	    string += String.fromCharCode(buf[i]);
	  }
	  return string;
	}, str => {
	  str = str.substring(1);
	  const buf = new Uint8Array(str.length);
	  for (let i = 0; i < str.length; i++) {
	    buf[i] = str.charCodeAt(i);
	  }
	  return buf;
	});
	const BASES = {
	  utf8: string,
	  'utf-8': string,
	  hex: bases.base16,
	  latin1: ascii,
	  ascii: ascii,
	  binary: ascii,
	  ...bases
	};

	function fromString$4(string, encoding = 'utf8') {
	  const base = BASES[encoding];
	  if (!base) {
	    throw new Error(`Unsupported encoding "${ encoding }"`);
	  }
	  return base.decoder.decode(`${ base.prefix }${ string }`);
	}

	var fromString$5 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		fromString: fromString$4
	});

	var require$$2$2 = /*@__PURE__*/getAugmentedNamespace(base58);

	var require$$5$4 = /*@__PURE__*/getAugmentedNamespace(base32$5);

	var require$$6 = /*@__PURE__*/getAugmentedNamespace(digest$1);

	const word = '[a-fA-F\\d:]';
	const b = options => options && options.includeBoundaries ?
		`(?:(?<=\\s|^)(?=${word})|(?<=${word})(?=\\s|$))` :
		'';

	const v4 = '(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}';

	const v6seg = '[a-fA-F\\d]{1,4}';
	const v6$1 = `
(?:
(?:${v6seg}:){7}(?:${v6seg}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8
(?:${v6seg}:){6}(?:${v4}|:${v6seg}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4
(?:${v6seg}:){5}(?::${v4}|(?::${v6seg}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4
(?:${v6seg}:){4}(?:(?::${v6seg}){0,1}:${v4}|(?::${v6seg}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4
(?:${v6seg}:){3}(?:(?::${v6seg}){0,2}:${v4}|(?::${v6seg}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4
(?:${v6seg}:){2}(?:(?::${v6seg}){0,3}:${v4}|(?::${v6seg}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4
(?:${v6seg}:){1}(?:(?::${v6seg}){0,4}:${v4}|(?::${v6seg}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4
(?::(?:(?::${v6seg}){0,5}:${v4}|(?::${v6seg}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4
)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1
`.replace(/\s*\/\/.*$/gm, '').replace(/\n/g, '').trim();

	// Pre-compile only the exact regexes because adding a global flag make regexes stateful
	const v46Exact = new RegExp(`(?:^${v4}$)|(?:^${v6$1}$)`);
	const v4exact = new RegExp(`^${v4}$`);
	const v6exact = new RegExp(`^${v6$1}$`);

	const ip$2 = options => options && options.exact ?
		v46Exact :
		new RegExp(`(?:${b(options)}${v4}${b(options)})|(?:${b(options)}${v6$1}${b(options)})`, 'g');

	ip$2.v4 = options => options && options.exact ? v4exact : new RegExp(`${b(options)}${v4}${b(options)}`, 'g');
	ip$2.v6 = options => options && options.exact ? v6exact : new RegExp(`${b(options)}${v6$1}${b(options)}`, 'g');

	var ipRegex$1 = ip$2;

	const ipRegex = ipRegex$1;

	const isIp$1 = string => ipRegex({exact: true}).test(string);
	isIp$1.v4 = string => ipRegex.v4({exact: true}).test(string);
	isIp$1.v6 = string => ipRegex.v6({exact: true}).test(string);
	isIp$1.version = string => isIp$1(string) ? (isIp$1.v4(string) ? 4 : 6) : undefined;

	var isIp_1 = isIp$1;

	function toString$6(array, encoding = 'utf8') {
	  const base = BASES[encoding];
	  if (!base) {
	    throw new Error(`Unsupported encoding "${ encoding }"`);
	  }
	  return base.encoder.encode(array).substring(1);
	}

	var toString$7 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		toString: toString$6
	});

	var require$$8 = /*@__PURE__*/getAugmentedNamespace(toString$7);

	const isIp = isIp_1;
	const { toString: uint8ArrayToString$m } = require$$8;

	const isIP = isIp;
	const isV4 = isIp.v4;
	const isV6 = isIp.v6;

	// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7
	// @ts-ignore - this is copied from the link above better to keep it the same
	const toBytes$1 = function (ip, buff, offset) {
	  offset = ~~offset;

	  let result;

	  if (isV4(ip)) {
	    result = buff || new Uint8Array(offset + 4);
	    // @ts-ignore
	    // eslint-disable-next-line array-callback-return
	    ip.split(/\./g).map(function (byte) {
	      result[offset++] = parseInt(byte, 10) & 0xff;
	    });
	  } else if (isV6(ip)) {
	    const sections = ip.split(':', 8);

	    let i;
	    for (i = 0; i < sections.length; i++) {
	      const isv4 = isV4(sections[i]);
	      let v4Buffer;

	      if (isv4) {
	        v4Buffer = toBytes$1(sections[i]);
	        sections[i] = uint8ArrayToString$m(v4Buffer.slice(0, 2), 'base16');
	      }

	      if (v4Buffer && ++i < 8) {
	        sections.splice(i, 0, uint8ArrayToString$m(v4Buffer.slice(2, 4), 'base16'));
	      }
	    }

	    if (sections[0] === '') {
	      while (sections.length < 8) sections.unshift('0');
	    } else if (sections[sections.length - 1] === '') {
	      while (sections.length < 8) sections.push('0');
	    } else if (sections.length < 8) {
	      for (i = 0; i < sections.length && sections[i] !== ''; i++);
	      const argv = [i, '1'];
	      for (i = 9 - sections.length; i > 0; i--) {
	        argv.push('0');
	      }
	      sections.splice.apply(sections, argv);
	    }

	    result = buff || new Uint8Array(offset + 16);
	    for (i = 0; i < sections.length; i++) {
	      const word = parseInt(sections[i], 16);
	      result[offset++] = (word >> 8) & 0xff;
	      result[offset++] = word & 0xff;
	    }
	  }

	  if (!result) {
	    throw Error('Invalid ip address: ' + ip)
	  }

	  return result
	};

	// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63
	// @ts-ignore - this is copied from the link above better to keep it the same
	const toString$5 = function (buff, offset, length) {
	  offset = ~~offset;
	  length = length || (buff.length - offset);

	  const result = [];
	  let string;
	  const view = new DataView(buff.buffer);
	  if (length === 4) {
	    // IPv4
	    for (let i = 0; i < length; i++) {
	      result.push(buff[offset + i]);
	    }
	    string = result.join('.');
	  } else if (length === 16) {
	    // IPv6
	    for (let i = 0; i < length; i += 2) {
	      result.push(view.getUint16(offset + i).toString(16));
	    }
	    string = result.join(':');
	    string = string.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3');
	    string = string.replace(/:{3,4}/, '::');
	  }

	  return string
	};

	var ip$1 = {
	  isIP,
	  isV4,
	  isV6,
	  toBytes: toBytes$1,
	  toString: toString$5
	};

	/** @typedef {import("./types").Protocol} Protocol */

	/**
	 * Protocols
	 *
	 * @param {number | string} proto
	 * @returns {Protocol}
	 */
	function Protocols$1 (proto) {
	  if (typeof (proto) === 'number') {
	    if (Protocols$1.codes[proto]) {
	      return Protocols$1.codes[proto]
	    }

	    throw new Error('no protocol with code: ' + proto)
	  } else if (typeof (proto) === 'string') {
	    if (Protocols$1.names[proto]) {
	      return Protocols$1.names[proto]
	    }

	    throw new Error('no protocol with name: ' + proto)
	  }

	  throw new Error('invalid protocol id type: ' + proto)
	}

	const V = -1;
	Protocols$1.lengthPrefixedVarSize = V;
	Protocols$1.V = V;

	/** @type {Array<[number, number, string, (string|boolean)?, string?]>} */
	Protocols$1.table = [
	  [4, 32, 'ip4'],
	  [6, 16, 'tcp'],
	  [33, 16, 'dccp'],
	  [41, 128, 'ip6'],
	  [42, V, 'ip6zone'],
	  [53, V, 'dns', 'resolvable'],
	  [54, V, 'dns4', 'resolvable'],
	  [55, V, 'dns6', 'resolvable'],
	  [56, V, 'dnsaddr', 'resolvable'],
	  [132, 16, 'sctp'],
	  [273, 16, 'udp'],
	  [275, 0, 'p2p-webrtc-star'],
	  [276, 0, 'p2p-webrtc-direct'],
	  [277, 0, 'p2p-stardust'],
	  [290, 0, 'p2p-circuit'],
	  [301, 0, 'udt'],
	  [302, 0, 'utp'],
	  [400, V, 'unix', false, 'path'],
	  // `ipfs` is added before `p2p` for legacy support.
	  // All text representations will default to `p2p`, but `ipfs` will
	  // still be supported
	  [421, V, 'ipfs'],
	  // `p2p` is the preferred name for 421, and is now the default
	  [421, V, 'p2p'],
	  [443, 0, 'https'],
	  [444, 96, 'onion'],
	  [445, 296, 'onion3'],
	  [446, V, 'garlic64'],
	  [460, 0, 'quic'],
	  [477, 0, 'ws'],
	  [478, 0, 'wss'],
	  [479, 0, 'p2p-websocket-star'],
	  [480, 0, 'http'],
	  [777, V, 'memory']
	];
	/** @type {Record<string,Protocol>} */
	Protocols$1.names = {};
	/** @type {Record<number,Protocol>} */
	Protocols$1.codes = {};

	// populate tables
	Protocols$1.table.map(row => {
	  const proto = p.apply(null, row);
	  Protocols$1.codes[proto.code] = proto;
	  Protocols$1.names[proto.name] = proto;
	  return null
	});

	Protocols$1.object = p;

	/**
	 *
	 * Create a protocol
	 *
	 * @param {number} code
	 * @param {number} size
	 * @param {string} name
	 * @param {any} [resolvable]
	 * @param {any} [path]
	 * @returns {Protocol}
	 */
	function p (code, size, name, resolvable, path) {
	  return {
	    code,
	    size,
	    name,
	    resolvable: Boolean(resolvable),
	    path: Boolean(path)
	  }
	}

	var protocolsTable = Protocols$1;

	var encode_1$1 = encode$8;

	var MSB$3 = 0x80
	  , REST$3 = 0x7F
	  , MSBALL$1 = ~REST$3
	  , INT$1 = Math.pow(2, 31);

	function encode$8(num, out, offset) {
	  if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {
	    encode$8.bytes = 0;
	    throw new RangeError('Could not encode varint')
	  }
	  out = out || [];
	  offset = offset || 0;
	  var oldOffset = offset;

	  while(num >= INT$1) {
	    out[offset++] = (num & 0xFF) | MSB$3;
	    num /= 128;
	  }
	  while(num & MSBALL$1) {
	    out[offset++] = (num & 0xFF) | MSB$3;
	    num >>>= 7;
	  }
	  out[offset] = num | 0;
	  
	  encode$8.bytes = offset - oldOffset + 1;
	  
	  return out
	}

	var decode$7 = read$3;

	var MSB$2 = 0x80
	  , REST$2 = 0x7F;

	function read$3(buf, offset) {
	  var res    = 0
	    , offset = offset || 0
	    , shift  = 0
	    , counter = offset
	    , b
	    , l = buf.length;

	  do {
	    if (counter >= l || shift > 49) {
	      read$3.bytes = 0;
	      throw new RangeError('Could not decode varint')
	    }
	    b = buf[counter++];
	    res += shift < 28
	      ? (b & REST$2) << shift
	      : (b & REST$2) * Math.pow(2, shift);
	    shift += 7;
	  } while (b >= MSB$2)

	  read$3.bytes = counter - offset;

	  return res
	}

	var N1$1 = Math.pow(2,  7);
	var N2$1 = Math.pow(2, 14);
	var N3$1 = Math.pow(2, 21);
	var N4$1 = Math.pow(2, 28);
	var N5$1 = Math.pow(2, 35);
	var N6$1 = Math.pow(2, 42);
	var N7$1 = Math.pow(2, 49);
	var N8$1 = Math.pow(2, 56);
	var N9$1 = Math.pow(2, 63);

	var length$5 = function (value) {
	  return (
	    value < N1$1 ? 1
	  : value < N2$1 ? 2
	  : value < N3$1 ? 3
	  : value < N4$1 ? 4
	  : value < N5$1 ? 5
	  : value < N6$1 ? 6
	  : value < N7$1 ? 7
	  : value < N8$1 ? 8
	  : value < N9$1 ? 9
	  :              10
	  )
	};

	var varint$9 = {
	    encode: encode_1$1
	  , decode: decode$7
	  , encodingLength: length$5
	};

	var require$$5$3 = /*@__PURE__*/getAugmentedNamespace(fromString$5);

	function concat$2(arrays, length) {
	  if (!length) {
	    length = arrays.reduce((acc, curr) => acc + curr.length, 0);
	  }
	  const output = new Uint8Array(length);
	  let offset = 0;
	  for (const arr of arrays) {
	    output.set(arr, offset);
	    offset += arr.length;
	  }
	  return output;
	}

	var concat$3 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		concat: concat$2
	});

	var require$$9 = /*@__PURE__*/getAugmentedNamespace(concat$3);

	const ip = ip$1;
	const protocols$3 = protocolsTable;
	const { CID: CID$5 } = require$$0$3;
	const { base32: base32$3 } = require$$5$4;
	const { base58btc: base58btc$5 } = require$$2$2;
	const Digest$1 = require$$6;
	const varint$8 = varint$9;
	const { toString: uint8ArrayToString$l } = require$$8;
	const { fromString: uint8ArrayFromString$e } = require$$5$3;
	const { concat: uint8ArrayConcat$7 } = require$$9;

	var convert$2 = Convert;

	// converts (serializes) addresses
	/**
	 * @param {string} proto
	 * @param {string | Uint8Array} a
	 */
	function Convert (proto, a) {
	  if (a instanceof Uint8Array) {
	    return Convert.toString(proto, a)
	  } else {
	    return Convert.toBytes(proto, a)
	  }
	}

	/**
	 * Convert [code,Uint8Array] to string
	 *
	 * @param {number|string} proto
	 * @param {Uint8Array} buf
	 * @returns {string}
	 */
	Convert.toString = function convertToString (proto, buf) {
	  const protocol = protocols$3(proto);
	  switch (protocol.code) {
	    case 4: // ipv4
	    case 41: // ipv6
	      return bytes2ip(buf)

	    case 6: // tcp
	    case 273: // udp
	    case 33: // dccp
	    case 132: // sctp
	      return bytes2port(buf).toString()

	    case 53: // dns
	    case 54: // dns4
	    case 55: // dns6
	    case 56: // dnsaddr
	    case 400: // unix
	    case 777: // memory
	      return bytes2str(buf)

	    case 421: // ipfs
	      return bytes2mh(buf)
	    case 444: // onion
	      return bytes2onion(buf)
	    case 445: // onion3
	      return bytes2onion(buf)
	    default:
	      return uint8ArrayToString$l(buf, 'base16') // no clue. convert to hex
	  }
	};

	Convert.toBytes = function convertToBytes (/** @type {string | number } */ proto, /** @type {string} */ str) {
	  const protocol = protocols$3(proto);
	  switch (protocol.code) {
	    case 4: // ipv4
	      return ip2bytes(str)
	    case 41: // ipv6
	      return ip2bytes(str)

	    case 6: // tcp
	    case 273: // udp
	    case 33: // dccp
	    case 132: // sctp
	      return port2bytes(parseInt(str, 10))

	    case 53: // dns
	    case 54: // dns4
	    case 55: // dns6
	    case 56: // dnsaddr
	    case 400: // unix
	    case 777: // memory
	      return str2bytes(str)

	    case 421: // ipfs
	      return mh2bytes(str)
	    case 444: // onion
	      return onion2bytes(str)
	    case 445: // onion3
	      return onion32bytes(str)
	    default:
	      return uint8ArrayFromString$e(str, 'base16') // no clue. convert from hex
	  }
	};

	/**
	 * @param {string} ipString
	 */
	function ip2bytes (ipString) {
	  if (!ip.isIP(ipString)) {
	    throw new Error('invalid ip address')
	  }
	  return ip.toBytes(ipString)
	}

	/**
	 * @param {Uint8Array} ipBuff
	 */
	function bytes2ip (ipBuff) {
	  const ipString = ip.toString(ipBuff);
	  if (!ipString || !ip.isIP(ipString)) {
	    throw new Error('invalid ip address')
	  }
	  return ipString
	}

	/**
	 * @param {number} port
	 */
	function port2bytes (port) {
	  const buf = new ArrayBuffer(2);
	  const view = new DataView(buf);
	  view.setUint16(0, port);

	  return new Uint8Array(buf)
	}

	/**
	 * @param {Uint8Array} buf
	 */
	function bytes2port (buf) {
	  const view = new DataView(buf.buffer);
	  return view.getUint16(buf.byteOffset)
	}

	/**
	 * @param {string} str
	 */
	function str2bytes (str) {
	  const buf = uint8ArrayFromString$e(str);
	  const size = Uint8Array.from(varint$8.encode(buf.length));
	  return uint8ArrayConcat$7([size, buf], size.length + buf.length)
	}

	/**
	 * @param {Uint8Array} buf
	 */
	function bytes2str (buf) {
	  const size = varint$8.decode(buf);
	  buf = buf.slice(varint$8.decode.bytes);

	  if (buf.length !== size) {
	    throw new Error('inconsistent lengths')
	  }

	  return uint8ArrayToString$l(buf)
	}

	/**
	 * @param {string} hash - base58btc string
	 */
	function mh2bytes (hash) {
	  let mh;

	  if (hash[0] === 'Q' || hash[0] === '1') {
	    mh = Digest$1.decode(base58btc$5.decode(`z${hash}`)).bytes;
	  } else {
	    mh = CID$5.parse(hash).multihash.bytes;
	  }

	  // the address is a varint prefixed multihash string representation
	  const size = Uint8Array.from(varint$8.encode(mh.length));
	  return uint8ArrayConcat$7([size, mh], size.length + mh.length)
	}

	/**
	 * Converts bytes to bas58btc string
	 *
	 * @param {Uint8Array} buf
	 * @returns {string} base58btc string
	 */
	function bytes2mh (buf) {
	  const size = varint$8.decode(buf);
	  const address = buf.slice(varint$8.decode.bytes);

	  if (address.length !== size) {
	    throw new Error('inconsistent lengths')
	  }

	  return uint8ArrayToString$l(address, 'base58btc')
	}

	/**
	 * @param {string} str
	 */
	function onion2bytes (str) {
	  const addr = str.split(':');
	  if (addr.length !== 2) {
	    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number')
	  }
	  if (addr[0].length !== 16) {
	    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion address.')
	  }

	  // onion addresses do not include the multibase prefix, add it before decoding
	  const buf = base32$3.decode('b' + addr[0]);

	  // onion port number
	  const port = parseInt(addr[1], 10);
	  if (port < 1 || port > 65536) {
	    throw new Error('Port number is not in range(1, 65536)')
	  }
	  const portBuf = port2bytes(port);
	  return uint8ArrayConcat$7([buf, portBuf], buf.length + portBuf.length)
	}

	/**
	 * @param {string} str
	 */
	function onion32bytes (str) {
	  const addr = str.split(':');
	  if (addr.length !== 2) {
	    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number')
	  }
	  if (addr[0].length !== 56) {
	    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion3 address.')
	  }
	  // onion addresses do not include the multibase prefix, add it before decoding
	  const buf = base32$3.decode('b' + addr[0]);

	  // onion port number
	  const port = parseInt(addr[1], 10);
	  if (port < 1 || port > 65536) {
	    throw new Error('Port number is not in range(1, 65536)')
	  }
	  const portBuf = port2bytes(port);
	  return uint8ArrayConcat$7([buf, portBuf], buf.length + portBuf.length)
	}

	/**
	 * @param {Uint8Array} buf
	 */
	function bytes2onion (buf) {
	  const addrBytes = buf.slice(0, buf.length - 2);
	  const portBytes = buf.slice(buf.length - 2);
	  const addr = uint8ArrayToString$l(addrBytes, 'base32');
	  const port = bytes2port(portBytes);
	  return addr + ':' + port
	}

	const convert$1 = convert$2;
	const protocols$2 = protocolsTable;
	const varint$7 = varint$9;
	const { concat: uint8ArrayConcat$6 } = require$$9;
	const { toString: uint8ArrayToString$k } = require$$8;

	// export codec
	var codec$1 = {
	  stringToStringTuples,
	  stringTuplesToString,

	  tuplesToStringTuples,
	  stringTuplesToTuples,

	  bytesToTuples,
	  tuplesToBytes,

	  bytesToString,
	  stringToBytes,

	  fromString: fromString$3,
	  fromBytes: fromBytes$1,
	  validateBytes,
	  isValidBytes,
	  cleanPath,

	  ParseError,
	  protoFromTuple,

	  sizeForAddr
	};

	// string -> [[str name, str addr]... ]
	/**
	 * @param {string} str
	 */
	function stringToStringTuples (str) {
	  const tuples = [];
	  const parts = str.split('/').slice(1); // skip first empty elem
	  if (parts.length === 1 && parts[0] === '') {
	    return []
	  }

	  for (let p = 0; p < parts.length; p++) {
	    const part = parts[p];
	    const proto = protocols$2(part);

	    if (proto.size === 0) {
	      tuples.push([part]);
	      continue
	    }

	    p++; // advance addr part
	    if (p >= parts.length) {
	      throw ParseError('invalid address: ' + str)
	    }

	    // if it's a path proto, take the rest
	    if (proto.path) {
	      tuples.push([
	        part,
	        // TODO: should we need to check each path part to see if it's a proto?
	        // This would allow for other protocols to be added after a unix path,
	        // however it would have issues if the path had a protocol name in the path
	        cleanPath(parts.slice(p).join('/'))
	      ]);
	      break
	    }

	    tuples.push([part, parts[p]]);
	  }

	  return tuples
	}

	// [[str name, str addr]... ] -> string
	/**
	 * @param {[number, string?][]} tuples
	 */
	function stringTuplesToString (tuples) {
	  /** @type {Array<string | undefined>} */
	  const parts = [];
	  tuples.map((tup) => {
	    const proto = protoFromTuple(tup);
	    parts.push(proto.name);
	    if (tup.length > 1) {
	      parts.push(tup[1]);
	    }
	    return null
	  });

	  return cleanPath(parts.join('/'))
	}

	// [[str name, str addr]... ] -> [[int code, Uint8Array]... ]
	/**
	 * @param {Array<string[] | string >} tuples
	 * @returns {[number , Uint8Array?][]}
	 */
	function stringTuplesToTuples (tuples) {
	  return tuples.map((tup) => {
	    if (!Array.isArray(tup)) {
	      tup = [tup];
	    }
	    const proto = protoFromTuple(tup);
	    if (tup.length > 1) {
	      return [proto.code, convert$1.toBytes(proto.code, tup[1])]
	    }
	    return [proto.code]
	  })
	}

	/**
	 * Convert tuples to string tuples
	 *
	 * [[int code, Uint8Array]... ] -> [[int code, str addr]... ]
	 *
	 * @param {Array<[number, Uint8Array?]>} tuples
	 * @returns {Array<[number, string?]>}
	 */

	function tuplesToStringTuples (tuples) {
	  return tuples.map(tup => {
	    const proto = protoFromTuple(tup);
	    if (tup[1]) {
	      return [proto.code, convert$1.toString(proto.code, tup[1])]
	    }
	    return [proto.code]
	  })
	}

	// [[int code, Uint8Array ]... ] -> Uint8Array
	/**
	 * @param {[number, Uint8Array?][]} tuples
	 */
	function tuplesToBytes (tuples) {
	  return fromBytes$1(uint8ArrayConcat$6(tuples.map((/** @type {any[]} */ tup) => {
	    const proto = protoFromTuple(tup);
	    let buf = Uint8Array.from(varint$7.encode(proto.code));

	    if (tup.length > 1) {
	      buf = uint8ArrayConcat$6([buf, tup[1]]); // add address buffer
	    }

	    return buf
	  })))
	}

	/**
	 * @param {import("./types").Protocol} p
	 * @param {Uint8Array | number[]} addr
	 */
	function sizeForAddr (p, addr) {
	  if (p.size > 0) {
	    return p.size / 8
	  } else if (p.size === 0) {
	    return 0
	  } else {
	    const size = varint$7.decode(addr);
	    return size + varint$7.decode.bytes
	  }
	}

	/**
	 *
	 * @param {Uint8Array} buf
	 * @returns {Array<[number, Uint8Array?]>}
	 */
	function bytesToTuples (buf) {
	  /** @type {Array<[number, Uint8Array?]>} */
	  const tuples = [];
	  let i = 0;
	  while (i < buf.length) {
	    const code = varint$7.decode(buf, i);
	    const n = varint$7.decode.bytes;

	    const p = protocols$2(code);

	    const size = sizeForAddr(p, buf.slice(i + n));

	    if (size === 0) {
	      tuples.push([code]);
	      i += n;
	      continue
	    }

	    const addr = buf.slice(i + n, i + n + size);

	    i += (size + n);

	    if (i > buf.length) { // did not end _exactly_ at buffer.length
	      throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString$k(buf, 'base16'))
	    }

	    // ok, tuple seems good.
	    tuples.push([code, addr]);
	  }

	  return tuples
	}

	// Uint8Array -> String
	/**
	 * @param {Uint8Array} buf
	 */
	function bytesToString (buf) {
	  const a = bytesToTuples(buf);
	  const b = tuplesToStringTuples(a);
	  return stringTuplesToString(b)
	}

	// String -> Uint8Array
	/**
	 * @param {string} str
	 */
	function stringToBytes (str) {
	  str = cleanPath(str);
	  const a = stringToStringTuples(str);
	  const b = stringTuplesToTuples(a);

	  return tuplesToBytes(b)
	}

	// String -> Uint8Array
	/**
	 * @param {string} str
	 */
	function fromString$3 (str) {
	  return stringToBytes(str)
	}

	// Uint8Array -> Uint8Array
	/**
	 * @param {Uint8Array} buf
	 */
	function fromBytes$1 (buf) {
	  const err = validateBytes(buf);
	  if (err) throw err
	  return Uint8Array.from(buf) // copy
	}

	/**
	 * @param {Uint8Array} buf
	 */
	function validateBytes (buf) {
	  try {
	    bytesToTuples(buf); // try to parse. will throw if breaks
	  } catch (err) {
	    return err
	  }
	}

	/**
	 * @param {Uint8Array} buf
	 */
	function isValidBytes (buf) {
	  return validateBytes(buf) === undefined
	}

	/**
	 * @param {string} str
	 */
	function cleanPath (str) {
	  return '/' + str.trim().split('/').filter((/** @type {any} */ a) => a).join('/')
	}

	/**
	 * @param {string} str
	 */
	function ParseError (str) {
	  return new Error('Error parsing address: ' + str)
	}

	/**
	 * @param {any[]} tup
	 */
	function protoFromTuple (tup) {
	  const proto = protocols$2(tup[0]);
	  return proto
	}

	function equals$1(a, b) {
	  if (a === b) {
	    return true;
	  }
	  if (a.byteLength !== b.byteLength) {
	    return false;
	  }
	  for (let i = 0; i < a.byteLength; i++) {
	    if (a[i] !== b[i]) {
	      return false;
	    }
	  }
	  return true;
	}

	var equals$2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		equals: equals$1
	});

	var require$$7$1 = /*@__PURE__*/getAugmentedNamespace(equals$2);

	const codec = codec$1;
	const protocols$1 = protocolsTable;
	const varint$6 = varint$9;
	const { CID: CID$4 } = require$$0$3;
	const { base58btc: base58btc$4 } = require$$2$2;
	const errCode$p = errCode$q;
	const inspect$2 = Symbol.for('nodejs.util.inspect.custom');
	const { toString: uint8ArrayToString$j } = require$$8;
	const { equals: uint8ArrayEquals$7 } = require$$7$1;

	/**
	 * @typedef {(addr: Multiaddr) => Promise<string[]>} Resolver
	 * @typedef {string | Multiaddr | Uint8Array | null} MultiaddrInput
	 * @typedef {import('./types').MultiaddrObject} MultiaddrObject
	 * @typedef {import('./types').Protocol} Protocol
	 */

	/** @type {Map<string, Resolver>} */
	const resolvers$2 = new Map();
	const symbol$1 = Symbol.for('@multiformats/js-multiaddr/multiaddr');

	/**
	 * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from
	 * a Uint8Array, String or another Multiaddr instance
	 * public key.
	 *
	 */
	class Multiaddr$l {
	  /**
	   * @example
	   * ```js
	   * new Multiaddr('/ip4/127.0.0.1/tcp/4001')
	   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>
	   * ```
	   *
	   * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)
	   */
	  constructor (addr) {
	    // default
	    if (addr == null) {
	      addr = '';
	    }

	    // Define symbol
	    Object.defineProperty(this, symbol$1, { value: true });

	    if (addr instanceof Uint8Array) {
	      /** @type {Uint8Array} - The raw bytes representing this multiaddress */
	      this.bytes = codec.fromBytes(addr);
	    } else if (typeof addr === 'string') {
	      if (addr.length > 0 && addr.charAt(0) !== '/') {
	        throw new Error(`multiaddr "${addr}" must start with a "/"`)
	      }
	      this.bytes = codec.fromString(addr);
	    } else if (Multiaddr$l.isMultiaddr(addr)) { // Multiaddr
	      this.bytes = codec.fromBytes(addr.bytes); // validate + copy buffer
	    } else {
	      throw new Error('addr must be a string, Buffer, or another Multiaddr')
	    }
	  }

	  /**
	   * Returns Multiaddr as a String
	   *
	   * @example
	   * ```js
	   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toString()
	   * // '/ip4/127.0.0.1/tcp/4001'
	   * ```
	   */
	  toString () {
	    return codec.bytesToString(this.bytes)
	  }

	  /**
	   * Returns Multiaddr as a JSON encoded object
	   *
	   * @example
	   * ```js
	   * JSON.stringify(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))
	   * // '/ip4/127.0.0.1/tcp/4001'
	   * ```
	   */
	  toJSON () {
	    return this.toString()
	  }

	  /**
	   * Returns Multiaddr as a convinient options object to be used with net.createConnection
	   *
	   * @example
	   * ```js
	   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()
	   * // { family: 4, host: '127.0.0.1', transport: 'tcp', port: 4001 }
	   * ```
	   */
	  toOptions () {
	    /** @type {MultiaddrObject} */
	    const opts = {};
	    const parsed = this.toString().split('/');
	    opts.family = parsed[1] === 'ip4' ? 4 : 6;
	    opts.host = parsed[2];
	    opts.transport = parsed[3];
	    opts.port = parseInt(parsed[4]);
	    return opts
	  }

	  /**
	   * Returns the protocols the Multiaddr is defined with, as an array of objects, in
	   * left-to-right order. Each object contains the protocol code, protocol name,
	   * and the size of its address space in bits.
	   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)
	   *
	   * @example
	   * ```js
	   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protos()
	   * // [ { code: 4, size: 32, name: 'ip4' },
	   * //   { code: 6, size: 16, name: 'tcp' } ]
	   * ```
	   *
	   * @returns {Protocol[]} protocols - All the protocols the address is composed of
	   */
	  protos () {
	    return this.protoCodes().map(code => Object.assign({}, protocols$1(code)))
	  }

	  /**
	   * Returns the codes of the protocols in left-to-right order.
	   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)
	   *
	   * @example
	   * ```js
	   * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()
	   * // [ 4, 6 ]
	   * ```
	   *
	   * @returns {number[]} protocol codes
	   */
	  protoCodes () {
	    const codes = [];
	    const buf = this.bytes;
	    let i = 0;
	    while (i < buf.length) {
	      const code = varint$6.decode(buf, i);
	      const n = varint$6.decode.bytes;

	      const p = protocols$1(code);
	      const size = codec.sizeForAddr(p, buf.slice(i + n));

	      i += (size + n);
	      codes.push(code);
	    }

	    return codes
	  }

	  /**
	   * Returns the names of the protocols in left-to-right order.
	   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)
	   *
	   * @example
	   * ```js
	   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()
	   * // [ 'ip4', 'tcp' ]
	   * ```
	   *
	   * @returns {string[]} protocol names
	   */
	  protoNames () {
	    return this.protos().map(proto => proto.name)
	  }

	  /**
	   * Returns a tuple of parts
	   *
	   * @example
	   * ```js
	   * new Multiaddr("/ip4/127.0.0.1/tcp/4001").tuples()
	   * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]
	   * ```
	   */
	  tuples () {
	    return codec.bytesToTuples(this.bytes)
	  }

	  /**
	   * Returns a tuple of string/number parts
	   * - tuples[][0] = code of protocol
	   * - tuples[][1] = contents of address
	   *
	   * @example
	   * ```js
	   * new Multiaddr("/ip4/127.0.0.1/tcp/4001").stringTuples()
	   * // [ [ 4, '127.0.0.1' ], [ 6, '4001' ] ]
	   * ```
	   */
	  stringTuples () {
	    const t = codec.bytesToTuples(this.bytes);
	    return codec.tuplesToStringTuples(t)
	  }

	  /**
	   * Encapsulates a Multiaddr in another Multiaddr
	   *
	   * @example
	   * ```js
	   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')
	   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>
	   *
	   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')
	   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>
	   *
	   * const mh3 = mh1.encapsulate(mh2)
	   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>
	   *
	   * mh3.toString()
	   * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'
	   * ```
	   *
	   * @param {MultiaddrInput} addr - Multiaddr to add into this Multiaddr
	   */
	  encapsulate (addr) {
	    addr = new Multiaddr$l(addr);
	    return new Multiaddr$l(this.toString() + addr.toString())
	  }

	  /**
	   * Decapsulates a Multiaddr from another Multiaddr
	   *
	   * @example
	   * ```js
	   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')
	   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>
	   *
	   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')
	   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>
	   *
	   * const mh3 = mh1.encapsulate(mh2)
	   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>
	   *
	   * mh3.decapsulate(mh2).toString()
	   * // '/ip4/8.8.8.8/tcp/1080'
	   * ```
	   *
	   * @param {Multiaddr | string} addr - Multiaddr to remove from this Multiaddr
	   * @returns {Multiaddr}
	   */
	  decapsulate (addr) {
	    const addrString = addr.toString();
	    const s = this.toString();
	    const i = s.lastIndexOf(addrString);
	    if (i < 0) {
	      throw new Error('Address ' + this + ' does not contain subaddress: ' + addr)
	    }
	    return new Multiaddr$l(s.slice(0, i))
	  }

	  /**
	   * A more reliable version of `decapsulate` if you are targeting a
	   * specific code, such as 421 (the `p2p` protocol code). The last index of the code
	   * will be removed from the `Multiaddr`, and a new instance will be returned.
	   * If the code is not present, the original `Multiaddr` is returned.
	   *
	   * @example
	   * ```js
	   * const addr = new Multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')
	   * // <Multiaddr 0400... - /ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC>
	   *
	   * addr.decapsulateCode(421).toString()
	   * // '/ip4/0.0.0.0/tcp/8080'
	   *
	   * new Multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()
	   * // '/ip4/127.0.0.1/tcp/8080'
	   * ```
	   *
	   * @param {number} code - The code of the protocol to decapsulate from this Multiaddr
	   * @returns {Multiaddr}
	   */
	  decapsulateCode (code) {
	    const tuples = this.tuples();
	    for (let i = tuples.length - 1; i >= 0; i--) {
	      if (tuples[i][0] === code) {
	        return new Multiaddr$l(codec.tuplesToBytes(tuples.slice(0, i)))
	      }
	    }
	    return this
	  }

	  /**
	   * Extract the peerId if the multiaddr contains one
	   *
	   * @example
	   * ```js
	   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')
	   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string>
	   *
	   * // should return QmValidBase58string or null if the id is missing or invalid
	   * const peerId = mh1.getPeerId()
	   * ```
	   *
	   * @returns {string | null} peerId - The id of the peer or null if invalid or missing from the ma
	   */
	  getPeerId () {
	    try {
	      const tuples = this.stringTuples().filter((tuple) => {
	        if (tuple[0] === protocols$1.names.ipfs.code) {
	          return true
	        }
	        return false
	      });

	      // Get the last ipfs tuple ['ipfs', 'peerid string']
	      const tuple = tuples.pop();
	      if (tuple && tuple[1]) {
	        const peerIdStr = tuple[1];

	        // peer id is base58btc encoded string but not multibase encoded so add the `z`
	        // prefix so we can validate that it is correctly encoded
	        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {
	          return uint8ArrayToString$j(base58btc$4.decode(`z${peerIdStr}`), 'base58btc')
	        }

	        // try to parse peer id as CID
	        return uint8ArrayToString$j(CID$4.parse(peerIdStr).multihash.bytes, 'base58btc')
	      }

	      return null
	    } catch (e) {
	      return null
	    }
	  }

	  /**
	   * Extract the path if the multiaddr contains one
	   *
	   * @example
	   * ```js
	   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')
	   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock>
	   *
	   * // should return utf8 string or null if the id is missing or invalid
	   * const path = mh1.getPath()
	   * ```js
	   *
	   * @returns {string | null} path - The path of the multiaddr, or null if no path protocol is present
	   */
	  getPath () {
	    let path = null;
	    try {
	      path = this.stringTuples().filter((tuple) => {
	        const proto = protocols$1(tuple[0]);
	        if (proto.path) {
	          return true
	        }
	        return false
	      })[0][1];

	      if (!path) {
	        path = null;
	      }
	    } catch (e) {
	      path = null;
	    }
	    return path
	  }

	  /**
	   * Checks if two Multiaddrs are the same
	   *
	   * @example
	   * ```js
	   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')
	   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>
	   *
	   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')
	   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>
	   *
	   * mh1.equals(mh1)
	   * // true
	   *
	   * mh1.equals(mh2)
	   * // false
	   * ```
	   *
	   * @param {Multiaddr} addr
	   * @returns {boolean}
	   */
	  equals (addr) {
	    return uint8ArrayEquals$7(this.bytes, addr.bytes)
	  }

	  /**
	   * Resolve multiaddr if containing resolvable hostname.
	   *
	   * @example
	   * ```js
	   * Multiaddr.resolvers.set('dnsaddr', resolverFunction)
	   * const mh1 = new Multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb')
	   * const resolvedMultiaddrs = await mh1.resolve()
	   * // [
	   * //   <Multiaddr 04934b5353060fa1a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,
	   * //   <Multiaddr 04934b53530601bbde03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,
	   * //   <Multiaddr 04934b535391020fa1cc03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>
	   * // ]
	   * ```
	   *
	   * @returns {Promise<Array<Multiaddr>>}
	   */
	  async resolve () {
	    const resolvableProto = this.protos().find((p) => p.resolvable);

	    // Multiaddr is not resolvable?
	    if (!resolvableProto) {
	      return [this]
	    }

	    const resolver = resolvers$2.get(resolvableProto.name);
	    if (!resolver) {
	      throw errCode$p(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER')
	    }

	    const addresses = await resolver(this);
	    return addresses.map((a) => new Multiaddr$l(a))
	  }

	  /**
	   * Gets a Multiaddrs node-friendly address object. Note that protocol information
	   * is left out: in Node (and most network systems) the protocol is unknowable
	   * given only the address.
	   *
	   * Has to be a ThinWaist Address, otherwise throws error
	   *
	   * @example
	   * ```js
	   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()
	   * // {family: 4, address: '127.0.0.1', port: 4001}
	   * ```
	   *
	   * @returns {{family: 4 | 6, address: string, port: number}}
	   * @throws {Error} Throws error if Multiaddr is not a Thin Waist address
	   */
	  nodeAddress () {
	    const codes = this.protoCodes();
	    const names = this.protoNames();
	    const parts = this.toString().split('/').slice(1);

	    if (parts.length < 4) {
	      throw new Error('multiaddr must have a valid format: "/{ip4, ip6, dns4, dns6}/{address}/{tcp, udp}/{port}".')
	    } else if (codes[0] !== 4 && codes[0] !== 41 && codes[0] !== 54 && codes[0] !== 55) {
	      throw new Error(`no protocol with name: "'${names[0]}'". Must have a valid family name: "{ip4, ip6, dns4, dns6}".`)
	    } else if (parts[2] !== 'tcp' && parts[2] !== 'udp') {
	      throw new Error(`no protocol with name: "'${names[1]}'". Must have a valid transport protocol: "{tcp, udp}".`)
	    }

	    return {
	      family: (codes[0] === 41 || codes[0] === 55) ? 6 : 4,
	      address: parts[1],
	      port: parseInt(parts[3]) // tcp or udp port
	    }
	  }

	  /**
	   * Returns if a Multiaddr is a Thin Waist address or not.
	   *
	   * Thin Waist is if a Multiaddr adheres to the standard combination of:
	   *
	   * `{IPv4, IPv6}/{TCP, UDP}`
	   *
	   * @example
	   * ```js
	   * const mh1 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')
	   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>
	   * const mh2 = new Multiaddr('/ip4/192.168.2.1/tcp/5001')
	   * // <Multiaddr 04c0a80201061389 - /ip4/192.168.2.1/tcp/5001>
	   * const mh3 = mh1.encapsulate(mh2)
	   * // <Multiaddr 047f000001060fa104c0a80201061389 - /ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001>
	   * const mh4 = new Multiaddr('/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a')
	   * // <Multiaddr 047f0000010607d0de039302a503221220d52ebb89d85b02a284948203a62ff28389c57c9f42beec4ec20db76a64835843 - /ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a>
	   * mh1.isThinWaistAddress()
	   * // true
	   * mh2.isThinWaistAddress()
	   * // true
	   * mh3.isThinWaistAddress()
	   * // false
	   * mh4.isThinWaistAddress()
	   * // false
	   * ```
	   *
	   * @param {Multiaddr} [addr] - Defaults to using `this` instance
	   */
	  isThinWaistAddress (addr) {
	    const protos = (addr || this).protos();

	    if (protos.length !== 2) {
	      return false
	    }

	    if (protos[0].code !== 4 && protos[0].code !== 41) {
	      return false
	    }
	    if (protos[1].code !== 6 && protos[1].code !== 273) {
	      return false
	    }
	    return true
	  }

	  /**
	   * Creates a Multiaddr from a node-friendly address object
	   *
	   * @example
	   * ```js
	   * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')
	   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>
	   * ```
	   *
	   * @param {{family: 4 | 6, address: string, port: number}} addr
	   * @param {string} transport
	   */
	  static fromNodeAddress (addr, transport) {
	    if (!addr) { throw new Error('requires node address object') }
	    if (!transport) { throw new Error('requires transport protocol') }
	    let ip;
	    switch (addr.family) {
	      case 4:
	        ip = 'ip4';
	        break
	      case 6:
	        ip = 'ip6';
	        break
	      default:
	        throw Error(`Invalid addr family. Got '${addr.family}' instead of 4 or 6`)
	    }
	    return new Multiaddr$l('/' + [ip, addr.address, transport, addr.port].join('/'))
	  }

	  /**
	   * Returns if something is a Multiaddr that is a name
	   *
	   * @param {Multiaddr} addr
	   * @returns {boolean} isName
	   */
	  static isName (addr) {
	    if (!Multiaddr$l.isMultiaddr(addr)) {
	      return false
	    }

	    // if a part of the multiaddr is resolvable, then return true
	    return addr.protos().some((proto) => proto.resolvable)
	  }

	  /**
	   * Check if object is a CID instance
	   *
	   * @param {any} value
	   * @returns {value is Multiaddr}
	   */
	  static isMultiaddr (value) {
	    return value instanceof Multiaddr$l || Boolean(value && value[symbol$1])
	  }

	  /**
	   * Returns Multiaddr as a human-readable string.
	   * For post Node.js v10.0.0.
	   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect
	   *
	   * @example
	   * ```js
	   * console.log(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))
	   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'
	   * ```
	   *
	   * @returns {string}
	   */
	  [inspect$2] () {
	    return '<Multiaddr ' +
	    uint8ArrayToString$j(this.bytes, 'base16') + ' - ' +
	    codec.bytesToString(this.bytes) + '>'
	  }

	  /**
	   * Returns Multiaddr as a human-readable string.
	   * Fallback for pre Node.js v10.0.0.
	   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect
	   *
	   * @example
	   * ```js
	   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').inspect()
	   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'
	   * ```
	   *
	   * @returns {string}
	   */
	  inspect () {
	    return '<Multiaddr ' +
	      uint8ArrayToString$j(this.bytes, 'base16') + ' - ' +
	      codec.bytesToString(this.bytes) + '>'
	  }
	}

	/**
	 * Object containing table, names and codes of all supported protocols.
	 * To get the protocol values from a Multiaddr, you can use
	 * [`.protos()`](#multiaddrprotos),
	 * [`.protoCodes()`](#multiaddrprotocodes) or
	 * [`.protoNames()`](#multiaddrprotonames)
	 *
	 * @returns {{table: Array, names: Object, codes: Object}}
	 */
	Multiaddr$l.protocols = protocols$1;

	Multiaddr$l.resolvers = resolvers$2;

	/**
	 * Static factory
	 *
	 * @param {MultiaddrInput} addr
	 */
	function multiaddr (addr) {
	  return new Multiaddr$l(addr)
	}

	var src$s = { Multiaddr: Multiaddr$l, multiaddr, protocols: protocols$1, resolvers: resolvers$2 };

	const { Multiaddr: Multiaddr$k } = src$s;

	/**
	 * @typedef {import('./types').MatchesFunction} MatchesFunction
	 * @typedef {import('./types').PartialMatchesFunction} PartialMatchesFunction
	 * @typedef {import('./types').Mafmt} Mafmt
	 */

	/*
	 * Valid combinations
	 */
	const DNS4 = base('dns4');
	const DNS6 = base('dns6');
	const DNSADDR = base('dnsaddr');
	const DNS = or(
	  base('dns'),
	  DNSADDR,
	  DNS4,
	  DNS6
	);

	const IP = or(base('ip4'), base('ip6'));
	const TCP = or(
	  and(IP, base('tcp')),
	  and(DNS, base('tcp'))
	);
	const UDP = and(IP, base('udp'));
	const UTP = and(UDP, base('utp'));

	const QUIC = and(UDP, base('quic'));

	const WebSockets$1 = or(
	  and(TCP, base('ws')),
	  and(DNS, base('ws'))
	);

	const WebSocketsSecure = or(
	  and(TCP, base('wss')),
	  and(DNS, base('wss'))
	);

	const HTTP$2 = or(
	  and(TCP, base('http')),
	  and(IP, base('http')),
	  and(DNS, base('http'))
	);

	const HTTPS = or(
	  and(TCP, base('https')),
	  and(IP, base('https')),
	  and(DNS, base('https'))
	);

	const WebRTCStar$1 = or(
	  and(WebSockets$1, base('p2p-webrtc-star'), base('p2p')),
	  and(WebSocketsSecure, base('p2p-webrtc-star'), base('p2p')),
	  and(WebSockets$1, base('p2p-webrtc-star')),
	  and(WebSocketsSecure, base('p2p-webrtc-star'))
	);

	const WebSocketStar = or(
	  and(WebSockets$1, base('p2p-websocket-star'), base('p2p')),
	  and(WebSocketsSecure, base('p2p-websocket-star'), base('p2p')),
	  and(WebSockets$1, base('p2p-websocket-star')),
	  and(WebSocketsSecure, base('p2p-websocket-star'))
	);

	const WebRTCDirect = or(
	  and(HTTP$2, base('p2p-webrtc-direct'), base('p2p')),
	  and(HTTPS, base('p2p-webrtc-direct'), base('p2p')),
	  and(HTTP$2, base('p2p-webrtc-direct')),
	  and(HTTPS, base('p2p-webrtc-direct'))
	);

	const Reliable = or(
	  WebSockets$1,
	  WebSocketsSecure,
	  HTTP$2,
	  HTTPS,
	  WebRTCStar$1,
	  WebRTCDirect,
	  TCP,
	  UTP,
	  QUIC,
	  DNS
	);

	// Unlike ws-star, stardust can run over any transport thus removing the requirement for websockets (but don't even think about running a stardust server over webrtc-star ;) )
	const Stardust = or(
	  and(Reliable, base('p2p-stardust'), base('p2p')),
	  and(Reliable, base('p2p-stardust'))
	);

	const _P2P = or(
	  and(Reliable, base('p2p')),
	  WebRTCStar$1,
	  WebRTCDirect,
	  base('p2p')
	);

	const _Circuit = or(
	  and(_P2P, base('p2p-circuit'), _P2P),
	  and(_P2P, base('p2p-circuit')),
	  and(base('p2p-circuit'), _P2P),
	  and(Reliable, base('p2p-circuit')),
	  and(base('p2p-circuit'), Reliable),
	  base('p2p-circuit')
	);

	const CircuitRecursive = () => or(
	  and(_Circuit, CircuitRecursive),
	  _Circuit
	);

	const Circuit$2 = CircuitRecursive();

	const P2P = or(
	  and(Circuit$2, _P2P, Circuit$2),
	  and(_P2P, Circuit$2),
	  and(Circuit$2, _P2P),
	  Circuit$2,
	  _P2P
	);

	var src$r = {
	  DNS,
	  DNS4,
	  DNS6,
	  DNSADDR,
	  IP,
	  TCP,
	  UDP,
	  QUIC,
	  UTP,
	  HTTP: HTTP$2,
	  HTTPS,
	  WebSockets: WebSockets$1,
	  WebSocketsSecure,
	  WebSocketStar,
	  WebRTCStar: WebRTCStar$1,
	  WebRTCDirect,
	  Reliable,
	  Stardust,
	  Circuit: Circuit$2,
	  P2P,
	  IPFS: P2P
	};

	/*
	 * Validation funcs
	 */

	/**
	 * @param {PartialMatchesFunction} partialMatch
	 */
	function makeMatchesFunction (partialMatch) {
	  /**
	   * @type {MatchesFunction}
	   */
	  function matches (a) {
	    if (!Multiaddr$k.isMultiaddr(a)) {
	      try {
	        a = new Multiaddr$k(a);
	      } catch (err) { // catch error
	        return false // also if it's invalid it's propably not matching as well so return false
	      }
	    }
	    const out = partialMatch(a.protoNames());
	    if (out === null) {
	      return false
	    }

	    if (out === true || out === false) {
	      return out
	    }

	    return out.length === 0
	  }

	  return matches
	}

	/**
	 * @param {Array<Mafmt | (() => Mafmt)>} args
	 * @returns {Mafmt}
	 */
	function and (...args) {
	  /**
	   * @type {PartialMatchesFunction}
	   */
	  function partialMatch (a) {
	    if (a.length < args.length) {
	      return null
	    }

	    /** @type {boolean | string[] | null} */
	    let out = a;

	    args.some((arg) => {
	      out = typeof arg === 'function'
	        ? arg().partialMatch(a)
	        : arg.partialMatch(a);

	      if (Array.isArray(out)) {
	        a = out;
	      }

	      if (out === null) {
	        return true
	      }

	      return false
	    });

	    return out
	  }

	  return {
	    toString: function () { return '{ ' + args.join(' ') + ' }' },
	    input: args,
	    matches: makeMatchesFunction(partialMatch),
	    partialMatch: partialMatch
	  }
	}

	/**
	 * @param {Array<Mafmt | (() => Mafmt)>} args
	 * @returns {Mafmt}
	 */
	function or (...args) {
	  /**
	   * @type {PartialMatchesFunction}
	   */
	  function partialMatch (a) {
	    let out = null;
	    args.some((arg) => {
	      const res = typeof arg === 'function'
	        ? arg().partialMatch(a)
	        : arg.partialMatch(a);
	      if (res) {
	        out = res;
	        return true
	      }
	      return false
	    });

	    return out
	  }

	  const result = {
	    toString: function () { return '{ ' + args.join(' ') + ' }' },
	    input: args,
	    matches: makeMatchesFunction(partialMatch),
	    partialMatch: partialMatch
	  };

	  return result
	}

	/**
	 * @param {string} n
	 * @returns {Mafmt}
	 */
	function base (n) {
	  const name = n;

	  /**
	   * @type {MatchesFunction}
	   */
	  function matches (a) {
	    let ma;

	    if (typeof a === 'string' || a instanceof Uint8Array) {
	      try {
	        ma = new Multiaddr$k(a);
	      } catch (err) { // catch error
	        return false // also if it's invalid it's probably not matching as well so return false
	      }
	    } else {
	      ma = a;
	    }

	    const pnames = ma.protoNames();
	    if (pnames.length === 1 && pnames[0] === name) {
	      return true
	    }
	    return false
	  }

	  /**
	   * @type {PartialMatchesFunction}
	   */
	  function partialMatch (protos) {
	    if (protos.length === 0) {
	      return null
	    }

	    if (protos[0] === name) {
	      return protos.slice(1)
	    }
	    return null
	  }

	  return {
	    toString: function () { return name },
	    matches: matches,
	    partialMatch: partialMatch
	  }
	}

	const isReactNative$1 =
	    typeof navigator !== 'undefined' &&
	    navigator.product === 'ReactNative';

	function getDefaultBase () {
	  if (isReactNative$1) {
	    return 'http://localhost'
	  }
	  // in some environments i.e. cloudflare workers location is not available
	  if (!self.location) {
	    return ''
	  }

	  return self.location.protocol + '//' + self.location.host
	}

	const URL$3 = self.URL;
	const defaultBase$1 = getDefaultBase();

	class URLWithLegacySupport$2 {
	  constructor (url = '', base = defaultBase$1) {
	    this.super = new URL$3(url, base);
	    this.path = this.pathname + this.search;
	    this.auth =
	            this.username && this.password
	              ? this.username + ':' + this.password
	              : null;

	    this.query =
	            this.search && this.search.startsWith('?')
	              ? this.search.slice(1)
	              : null;
	  }

	  get hash () {
	    return this.super.hash
	  }

	  get host () {
	    return this.super.host
	  }

	  get hostname () {
	    return this.super.hostname
	  }

	  get href () {
	    return this.super.href
	  }

	  get origin () {
	    return this.super.origin
	  }

	  get password () {
	    return this.super.password
	  }

	  get pathname () {
	    return this.super.pathname
	  }

	  get port () {
	    return this.super.port
	  }

	  get protocol () {
	    return this.super.protocol
	  }

	  get search () {
	    return this.super.search
	  }

	  get searchParams () {
	    return this.super.searchParams
	  }

	  get username () {
	    return this.super.username
	  }

	  set hash (hash) {
	    this.super.hash = hash;
	  }

	  set host (host) {
	    this.super.host = host;
	  }

	  set hostname (hostname) {
	    this.super.hostname = hostname;
	  }

	  set href (href) {
	    this.super.href = href;
	  }

	  set password (password) {
	    this.super.password = password;
	  }

	  set pathname (pathname) {
	    this.super.pathname = pathname;
	  }

	  set port (port) {
	    this.super.port = port;
	  }

	  set protocol (protocol) {
	    this.super.protocol = protocol;
	  }

	  set search (search) {
	    this.super.search = search;
	  }

	  set username (username) {
	    this.super.username = username;
	  }

	  /**
	   * @param {any} o
	   */
	  static createObjectURL (o) {
	    return URL$3.createObjectURL(o)
	  }

	  /**
	   * @param {string} o
	   */
	  static revokeObjectURL (o) {
	    URL$3.revokeObjectURL(o);
	  }

	  toJSON () {
	    return this.super.toJSON()
	  }

	  toString () {
	    return this.super.toString()
	  }

	  format () {
	    return this.toString()
	  }
	}

	/**
	 * @param {string | import('url').UrlObject} obj
	 */
	function format$4 (obj) {
	  if (typeof obj === 'string') {
	    const url = new URL$3(obj);

	    return url.toString()
	  }

	  if (!(obj instanceof URL$3)) {
	    const userPass =
	            // @ts-ignore its not supported in node but we normalise
	            obj.username && obj.password
	              // @ts-ignore its not supported in node but we normalise
	              ? `${obj.username}:${obj.password}@`
	              : '';
	    const auth = obj.auth ? obj.auth + '@' : '';
	    const port = obj.port ? ':' + obj.port : '';
	    const protocol = obj.protocol ? obj.protocol + '//' : '';
	    const host = obj.host || '';
	    const hostname = obj.hostname || '';
	    const search = obj.search || (obj.query ? '?' + obj.query : '');
	    const hash = obj.hash || '';
	    const pathname = obj.pathname || '';
	    // @ts-ignore - path is not supported in node but we normalise
	    const path = obj.path || pathname + search;

	    return `${protocol}${userPass || auth}${
            host || hostname + port
        }${path}${hash}`
	  }
	}

	var urlBrowser = {
	  URLWithLegacySupport: URLWithLegacySupport$2,
	  URLSearchParams: self.URLSearchParams,
	  defaultBase: defaultBase$1,
	  format: format$4
	};

	const { URLWithLegacySupport: URLWithLegacySupport$1, format: format$3 } = urlBrowser;

	/**
	 * @param {string | undefined} url
	 * @param {any} [location]
	 * @param {any} [protocolMap]
	 * @param {any} [defaultProtocol]
	 */
	var relative$2 = (url, location = {}, protocolMap = {}, defaultProtocol) => {
	  let protocol = location.protocol
	    ? location.protocol.replace(':', '')
	    : 'http';

	  // Check protocol map
	  protocol = (protocolMap[protocol] || defaultProtocol || protocol) + ':';
	  let urlParsed;

	  try {
	    urlParsed = new URLWithLegacySupport$1(url);
	  } catch (err) {
	    urlParsed = {};
	  }

	  const base = Object.assign({}, location, {
	    protocol: protocol || urlParsed.protocol,
	    host: location.host || urlParsed.host
	  });

	  return new URLWithLegacySupport$1(url, format$3(base)).toString()
	};

	const {
	  URLWithLegacySupport,
	  format: format$2,
	  URLSearchParams: URLSearchParams$2,
	  defaultBase
	} = urlBrowser;
	const relative$1 = relative$2;

	var isoUrl = {
	  URL: URLWithLegacySupport,
	  URLSearchParams: URLSearchParams$2,
	  format: format$2,
	  relative: relative$1,
	  defaultBase
	};

	const { base58btc: base58btc$3 } = require$$2$2;
	const { base32: base32$2 } = require$$5$4;
	const Digest = require$$6;
	const { Multiaddr: Multiaddr$j } = src$s;
	const mafmt$3 = src$r;
	const { CID: CID$3 } = require$$0$3;
	const { URL: URL$2 } = isoUrl;
	const { toString: uint8ArrayToString$i } = require$$8;

	const pathGatewayPattern = /^https?:\/\/[^/]+\/(ip[fn]s)\/([^/?#]+)/;
	const pathPattern = /^\/(ip[fn]s)\/([^/?#]+)/;
	const defaultProtocolMatch = 1;
	const defaultHashMath = 2;

	// CID, libp2p-key or DNSLink
	const subdomainGatewayPattern = /^https?:\/\/([^/]+)\.(ip[fn]s)\.[^/?]+/;
	const subdomainIdMatch = 1;
	const subdomainProtocolMatch = 2;

	// Fully qualified domain name (FQDN) that has an explicit .tld suffix
	const fqdnWithTld = /^(([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])\.)+([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])$/;

	/**
	 * @param {*} hash
	 */
	function isMultihash (hash) {
	  const formatted = convertToString(hash);
	  try {
	    Digest.decode(base58btc$3.decode('z' + formatted));
	  } catch {
	    return false
	  }

	  return true
	}

	/**
	 * @param {*} hash
	 */
	function isBase32EncodedMultibase (hash) {
	  try {
	    base32$2.decode(hash);
	  } catch {
	    return false
	  }

	  return true
	}

	/**
	 * @param {*} hash
	 */
	function isCID (hash) {
	  try {
	    if (typeof hash === 'string') {
	      return Boolean(CID$3.parse(hash))
	    }

	    if (hash instanceof Uint8Array) {
	      return Boolean(CID$3.decode(hash))
	    }

	    return Boolean(CID$3.asCID(hash)) // eslint-disable-line no-new
	  } catch (e) {
	    return false
	  }
	}

	/**
	 * @param {*} input
	 */
	function isMultiaddr (input) {
	  if (!input) return false
	  if (Multiaddr$j.isMultiaddr(input)) return true
	  try {
	    new Multiaddr$j(input); // eslint-disable-line no-new
	    return true
	  } catch (e) {
	    return false
	  }
	}

	/**
	 * @param {string | Uint8Array | Multiaddr} input
	 */
	function isPeerMultiaddr (input) {
	  return isMultiaddr(input) && mafmt$3.P2P.matches(input)
	}

	/**
	 * @param {string | Uint8Array} input
	 * @param {RegExp | string} pattern
	 * @param {number} [protocolMatch=1]
	 * @param {number} [hashMatch=2]
	 */
	function isIpfs (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {
	  const formatted = convertToString(input);
	  if (!formatted) {
	    return false
	  }

	  const match = formatted.match(pattern);
	  if (!match) {
	    return false
	  }

	  if (match[protocolMatch] !== 'ipfs') {
	    return false
	  }

	  let hash = match[hashMatch];

	  if (hash && pattern === subdomainGatewayPattern) {
	    // when doing checks for subdomain context
	    // ensure hash is case-insensitive
	    // (browsers force-lowercase authority component anyway)
	    hash = hash.toLowerCase();
	  }

	  return isCID(hash)
	}

	/**
	 *
	 * @param {string | Uint8Array} input
	 * @param {string | RegExp} pattern
	 * @param {number} [protocolMatch=1]
	 * @param {number} [hashMatch=1]
	 */
	function isIpns (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {
	  const formatted = convertToString(input);
	  if (!formatted) {
	    return false
	  }
	  const match = formatted.match(pattern);
	  if (!match) {
	    return false
	  }

	  if (match[protocolMatch] !== 'ipns') {
	    return false
	  }

	  let ipnsId = match[hashMatch];

	  if (ipnsId && pattern === subdomainGatewayPattern) {
	    // when doing checks for subdomain context
	    // ensure ipnsId is case-insensitive
	    // (browsers force-lowercase authority compotent anyway)
	    ipnsId = ipnsId.toLowerCase();
	    // Check if it is cidv1
	    if (isCID(ipnsId)) return true
	    // Check if it looks like FQDN
	    try {
	      if (!ipnsId.includes('.') && ipnsId.includes('-')) {
	        // name without tld, assuming its inlined into a single DNS label
	        // (https://github.com/ipfs/in-web-browsers/issues/169)
	        // en-wikipedia--on--ipfs-org → en.wikipedia-on-ipfs.org
	        ipnsId = ipnsId.replace(/--/g, '@').replace(/-/g, '.').replace(/@/g, '-');
	      }
	      // URL implementation in web browsers forces lowercase of the hostname
	      const { hostname } = new URL$2(`http://${ipnsId}`); // eslint-disable-line no-new
	      // Check if potential FQDN has an explicit TLD
	      return fqdnWithTld.test(hostname)
	    } catch (e) {
	      return false
	    }
	  }

	  return true
	}

	/**
	 * @param {any} input
	 */
	function isString$1 (input) {
	  return typeof input === 'string'
	}

	/**
	 * @param {Uint8Array | string} input
	 */
	function convertToString (input) {
	  if (input instanceof Uint8Array) {
	    return uint8ArrayToString$i(input, 'base58btc')
	  }

	  if (isString$1(input)) {
	    return input
	  }

	  return false
	}

	/**
	 * @param {string | Uint8Array} url
	 */
	const ipfsSubdomain = (url) => isIpfs(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch);
	/**
	 * @param {string | Uint8Array} url
	 */
	const ipnsSubdomain = (url) => isIpns(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch);
	/**
	 * @param {string | Uint8Array} url
	 */
	const subdomain = (url) => ipfsSubdomain(url) || ipnsSubdomain(url);

	/**
	 * @param {string | Uint8Array} url
	 */
	const ipfsUrl = (url) => isIpfs(url, pathGatewayPattern) || ipfsSubdomain(url);
	/**
	 * @param {string | Uint8Array} url
	 */
	const ipnsUrl = (url) => isIpns(url, pathGatewayPattern) || ipnsSubdomain(url);
	/**
	 * @param {string | Uint8Array} url
	 */
	const url$2 = (url) => ipfsUrl(url) || ipnsUrl(url) || subdomain(url);

	/**
	 * @param {string | Uint8Array} path
	 */
	const path = (path) => isIpfs(path, pathPattern) || isIpns(path, pathPattern);

	var src$q = {
	  multihash: isMultihash,
	  multiaddr: isMultiaddr,
	  peerMultiaddr: isPeerMultiaddr,
	  cid: isCID,
	  /**
	   * @param {CID | string | Uint8Array} cid
	   */
	  base32cid: (cid) => (isBase32EncodedMultibase(cid) && isCID(cid)),
	  ipfsSubdomain,
	  ipnsSubdomain,
	  subdomain,
	  subdomainGatewayPattern,
	  ipfsUrl,
	  ipnsUrl,
	  url: url$2,
	  pathGatewayPattern: pathGatewayPattern,
	  /**
	   * @param {string | Uint8Array} path
	   */
	  ipfsPath: (path) => isIpfs(path, pathPattern),
	  /**
	   * @param {string | Uint8Array} path
	   */
	  ipnsPath: (path) => isIpns(path, pathPattern),
	  path,
	  pathPattern,
	  /**
	   * @param {string | Uint8Array} x
	   */
	  urlOrPath: (x) => url$2(x) || path(x),
	  /**
	   * @param {string | Uint8Array | CID} path
	   */
	  cidPath: path => isString$1(path) && !isCID(path) && isIpfs(`/ipfs/${path}`, pathPattern)
	};

	let urlAlphabet =
	  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict';

	let random$1 = bytes => crypto.getRandomValues(new Uint8Array(bytes));
	let customRandom = (alphabet, defaultSize, getRandom) => {
	  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1;
	  let step = -~((1.6 * mask * defaultSize) / alphabet.length);
	  return (size = defaultSize) => {
	    let id = '';
	    while (true) {
	      let bytes = getRandom(step);
	      let j = step;
	      while (j--) {
	        id += alphabet[bytes[j] & mask] || '';
	        if (id.length === size) return id
	      }
	    }
	  }
	};
	let customAlphabet = (alphabet, size = 21) =>
	  customRandom(alphabet, size, random$1);
	let nanoid$2 = (size = 21) => {
	  let id = '';
	  let bytes = crypto.getRandomValues(new Uint8Array(size));
	  while (size--) {
	    let byte = bytes[size] & 63;
	    if (byte < 36) {
	      id += byte.toString(36);
	    } else if (byte < 62) {
	      id += (byte - 26).toString(36).toUpperCase();
	    } else if (byte < 63) {
	      id += '_';
	    } else {
	      id += '-';
	    }
	  }
	  return id
	};

	var index_browser$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		nanoid: nanoid$2,
		customAlphabet: customAlphabet,
		customRandom: customRandom,
		urlAlphabet: urlAlphabet,
		random: random$1
	});

	const pathSepS = '/';
	const pathSepB = new TextEncoder().encode(pathSepS);
	const pathSep = pathSepB[0];
	class Key$5 {
	  constructor(s, clean) {
	    if (typeof s === 'string') {
	      this._buf = fromString$4(s);
	    } else if (s instanceof Uint8Array) {
	      this._buf = s;
	    } else {
	      throw new Error('Invalid key, should be String of Uint8Array');
	    }
	    if (clean == null) {
	      clean = true;
	    }
	    if (clean) {
	      this.clean();
	    }
	    if (this._buf.byteLength === 0 || this._buf[0] !== pathSep) {
	      throw new Error('Invalid key');
	    }
	  }
	  toString(encoding = 'utf8') {
	    return toString$6(this._buf, encoding);
	  }
	  uint8Array() {
	    return this._buf;
	  }
	  get [Symbol.toStringTag]() {
	    return `Key(${ this.toString() })`;
	  }
	  static withNamespaces(list) {
	    return new Key$5(list.join(pathSepS));
	  }
	  static random() {
	    return new Key$5(nanoid$2().replace(/-/g, ''));
	  }
	  static asKey(other) {
	    if (other instanceof Uint8Array || typeof other === 'string') {
	      return new Key$5(other);
	    }
	    if (other.uint8Array) {
	      return new Key$5(other.uint8Array());
	    }
	    return null;
	  }
	  clean() {
	    if (!this._buf || this._buf.byteLength === 0) {
	      this._buf = pathSepB;
	    }
	    if (this._buf[0] !== pathSep) {
	      const bytes = new Uint8Array(this._buf.byteLength + 1);
	      bytes.fill(pathSep, 0, 1);
	      bytes.set(this._buf, 1);
	      this._buf = bytes;
	    }
	    while (this._buf.byteLength > 1 && this._buf[this._buf.byteLength - 1] === pathSep) {
	      this._buf = this._buf.subarray(0, -1);
	    }
	  }
	  less(key) {
	    const list1 = this.list();
	    const list2 = key.list();
	    for (let i = 0; i < list1.length; i++) {
	      if (list2.length < i + 1) {
	        return false;
	      }
	      const c1 = list1[i];
	      const c2 = list2[i];
	      if (c1 < c2) {
	        return true;
	      } else if (c1 > c2) {
	        return false;
	      }
	    }
	    return list1.length < list2.length;
	  }
	  reverse() {
	    return Key$5.withNamespaces(this.list().slice().reverse());
	  }
	  namespaces() {
	    return this.list();
	  }
	  baseNamespace() {
	    const ns = this.namespaces();
	    return ns[ns.length - 1];
	  }
	  list() {
	    return this.toString().split(pathSepS).slice(1);
	  }
	  type() {
	    return namespaceType(this.baseNamespace());
	  }
	  name() {
	    return namespaceValue(this.baseNamespace());
	  }
	  instance(s) {
	    return new Key$5(this.toString() + ':' + s);
	  }
	  path() {
	    let p = this.parent().toString();
	    if (!p.endsWith(pathSepS)) {
	      p += pathSepS;
	    }
	    p += this.type();
	    return new Key$5(p);
	  }
	  parent() {
	    const list = this.list();
	    if (list.length === 1) {
	      return new Key$5(pathSepS);
	    }
	    return new Key$5(list.slice(0, -1).join(pathSepS));
	  }
	  child(key) {
	    if (this.toString() === pathSepS) {
	      return key;
	    } else if (key.toString() === pathSepS) {
	      return this;
	    }
	    return new Key$5(this.toString() + key.toString(), false);
	  }
	  isAncestorOf(other) {
	    if (other.toString() === this.toString()) {
	      return false;
	    }
	    return other.toString().startsWith(this.toString());
	  }
	  isDecendantOf(other) {
	    if (other.toString() === this.toString()) {
	      return false;
	    }
	    return this.toString().startsWith(other.toString());
	  }
	  isTopLevel() {
	    return this.list().length === 1;
	  }
	  concat(...keys) {
	    return Key$5.withNamespaces([
	      ...this.namespaces(),
	      ...flatten(keys.map(key => key.namespaces()))
	    ]);
	  }
	}
	function namespaceType(ns) {
	  const parts = ns.split(':');
	  if (parts.length < 2) {
	    return '';
	  }
	  return parts.slice(0, -1).join(':');
	}
	function namespaceValue(ns) {
	  const parts = ns.split(':');
	  return parts[parts.length - 1];
	}
	function flatten(arr) {
	  return [].concat(...arr);
	}

	var key = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Key: Key$5
	});

	var timeBrowser = function getTime () {
	  return Date.now()
	};

	const getTime = timeBrowser;

	class Retimer {
	  constructor (callback, timeout, args) {
	    const that = this;

	    this._started = getTime();
	    this._rescheduled = 0;
	    this._scheduled = timeout;
	    this._args = args;
	    this._triggered = false;

	    this._timerWrapper = () => {
	      if (that._rescheduled > 0) {
	        that._scheduled = that._rescheduled - (getTime() - that._started);
	        that._schedule(that._scheduled);
	      } else {
	        that._triggered = true;
	        callback.apply(null, that._args);
	      }
	    };

	    this._timer = setTimeout(this._timerWrapper, timeout);
	  }

	  reschedule (timeout) {
	    if (!timeout) {
	      timeout = this._scheduled;
	    }
	    const now = getTime();
	    if ((now + timeout) - (this._started + this._scheduled) < 0) {
	      clearTimeout(this._timer);
	      this._schedule(timeout);
	    } else if (!this._triggered) {
	      this._started = now;
	      this._rescheduled = timeout;
	    } else {
	      this._schedule(timeout);
	    }
	  }

	  _schedule (timeout) {
	    this._triggered = false;
	    this._started = getTime();
	    this._rescheduled = 0;
	    this._scheduled = timeout;
	    this._timer = setTimeout(this._timerWrapper, timeout);
	  }

	  clear () {
	    clearTimeout(this._timer);
	  }
	}

	function retimer$4 () {
	  if (typeof arguments[0] !== 'function') {
	    throw new Error('callback needed')
	  }

	  if (typeof arguments[1] !== 'number') {
	    throw new Error('timeout needed')
	  }

	  let args;

	  if (arguments.length > 0) {
	    args = new Array(arguments.length - 2);

	    /* eslint-disable no-var */
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i + 2];
	    }
	  }

	  return new Retimer(arguments[0], arguments[1], args)
	}

	var retimer_1 = retimer$4;

	const { AbortController: AbortController$2 } = globalThis;

	// @ts-expect-error no types
	const retimer$3 = retimer_1;

	class TimeoutController$7 extends AbortController$2 {
	  /**
	   * @constructor
	   * @param {number} ms milliseconds
	   */
	  constructor (ms) {
	    super();
	    this._ms = ms;
	    this._timer = retimer$3(() => this.abort(), ms);
	    // Patch for safari not supported extending built in classes
	    Object.setPrototypeOf(this, TimeoutController$7.prototype);
	  }

	  /**
	   * Aborts the controller and clears the timer
	   */
	  abort () {
	    this._timer.clear();
	    return super.abort()
	  }

	  /**
	   * Clears the timer
	   */
	  clear () {
	    this._timer.clear();
	  }

	  /**
	   * Resets the timer
	   */
	  reset () {
	    this._timer.clear();
	    this._timer = retimer$3(() => this.abort(), this._ms);
	  }
	}

	var timeoutAbortController = {
	  TimeoutController: TimeoutController$7
	};

	var anySignal$7 = {exports: {}};

	const { AbortController: AbortController$1 } = globalThis;

	/**
	 * Takes an array of AbortSignals and returns a single signal.
	 * If any signals are aborted, the returned signal will be aborted.
	 * @param {Array<AbortSignal>} signals
	 * @returns {AbortSignal}
	 */
	function anySignal$6 (signals) {
	  const controller = new AbortController$1();

	  function onAbort () {
	    controller.abort();

	    for (const signal of signals) {
	      if (!signal || !signal.removeEventListener) continue
	      signal.removeEventListener('abort', onAbort);
	    }
	  }

	  for (const signal of signals) {
	    if (!signal || !signal.addEventListener) continue
	    if (signal.aborted) {
	      onAbort();
	      break
	    }
	    signal.addEventListener('abort', onAbort);
	  }

	  return controller.signal
	}

	anySignal$7.exports = anySignal$6;
	var anySignal_2 = anySignal$7.exports.anySignal = anySignal$6;

	let durationRE = /(-?(?:\d+\.?\d*|\d*\.?\d+)(?:e[-+]?\d+)?)\s*([\p{L}]*)/uig;


	/**
	 * conversion ratios
	 */

	parse$1.nanosecond =
	parse$1.ns = 1 / 1e6;

	parse$1['µs'] =
	parse$1['μs'] =
	parse$1.us =
	parse$1.microsecond = 1 / 1e3;

	parse$1.millisecond =
	parse$1.ms =
	parse$1[''] = 1;

	parse$1.second =
	parse$1.sec =
	parse$1.s = parse$1.ms * 1000;

	parse$1.minute =
	parse$1.min =
	parse$1.m = parse$1.s * 60;

	parse$1.hour =
	parse$1.hr =
	parse$1.h = parse$1.m * 60;

	parse$1.day =
	parse$1.d = parse$1.h * 24;

	parse$1.week =
	parse$1.wk =
	parse$1.w = parse$1.d * 7;

	parse$1.month =
	parse$1.b =
	parse$1.d * (365.25 / 12);

	parse$1.year =
	parse$1.yr =
	parse$1.y = parse$1.d * 365.25;

	/**
	 * convert `str` to ms
	 *
	 * @param {String} str
	 * @param {String} format
	 * @return {Number}
	 */

	function parse$1(str='', format='ms'){
	  var result = null;
	  // ignore commas/placeholders
	  str = (str+'').replace(/(\d)[,_](\d)/g, '$1$2');
	  str.replace(durationRE, function(_, n, units){
	    units = unitRatio(units);
	    if (units) result = (result || 0) + parseFloat(n, 10) * units;
	  });

	  return result && (result / (unitRatio(format) || 1))
	}

	function unitRatio(str) {
	  return parse$1[str] || parse$1[str.toLowerCase().replace(/s$/, '')]
	}

	class TimeoutError$6 extends Error {
	  constructor(message = 'request timed out') {
	    super(message);
	    this.name = 'TimeoutError';
	    this.code = TimeoutError$6.code;
	  }
	}
	TimeoutError$6.code = 'ERR_TIMEOUT';

	function withTimeoutOption(fn, optionsArgIndex) {
	  return (...args) => {
	    const options = args[optionsArgIndex == null ? args.length - 1 : optionsArgIndex];
	    if (!options || !options.timeout)
	      return fn(...args);
	    const timeout = typeof options.timeout === 'string' ? parse$1(options.timeout) : options.timeout;
	    const controller = new timeoutAbortController.TimeoutController(timeout);
	    options.signal = anySignal_2([
	      options.signal,
	      controller.signal
	    ]);
	    const fnRes = fn(...args);
	    const timeoutPromise = new Promise((_resolve, reject) => {
	      controller.signal.addEventListener('abort', () => {
	        reject(new TimeoutError$6());
	      });
	    });
	    const start = Date.now();
	    const maybeThrowTimeoutError = () => {
	      if (controller.signal.aborted) {
	        throw new TimeoutError$6();
	      }
	      const timeTaken = Date.now() - start;
	      if (timeTaken > timeout) {
	        controller.abort();
	        throw new TimeoutError$6();
	      }
	    };
	    if (fnRes[Symbol.asyncIterator]) {
	      return async function* () {
	        const it = fnRes[Symbol.asyncIterator]();
	        try {
	          while (true) {
	            const {value, done} = await Promise.race([
	              it.next(),
	              timeoutPromise
	            ]);
	            if (done) {
	              break;
	            }
	            maybeThrowTimeoutError();
	            yield value;
	          }
	        } catch (err) {
	          maybeThrowTimeoutError();
	          throw err;
	        } finally {
	          controller.clear();
	          if (it.return) {
	            it.return();
	          }
	        }
	      }();
	    }
	    return (async () => {
	      try {
	        const res = await Promise.race([
	          fnRes,
	          timeoutPromise
	        ]);
	        maybeThrowTimeoutError();
	        return res;
	      } catch (err) {
	        maybeThrowTimeoutError();
	        throw err;
	      } finally {
	        controller.clear();
	      }
	    })();
	  };
	}

	const IPFS_PREFIX$1 = '/ipfs/';
	function toCidAndPath(string) {
	  if (string instanceof Uint8Array) {
	    try {
	      string = CID$6.decode(string);
	    } catch (err) {
	      throw errCode$q(err, 'ERR_INVALID_CID');
	    }
	  }
	  let cid = CID$6.asCID(string);
	  if (cid) {
	    return {
	      cid,
	      path: undefined
	    };
	  }
	  string = string.toString();
	  if (string.startsWith(IPFS_PREFIX$1)) {
	    string = string.substring(IPFS_PREFIX$1.length);
	  }
	  const parts = string.split('/');
	  let path;
	  try {
	    cid = CID$6.parse(parts.shift() || '');
	  } catch (err) {
	    throw errCode$q(err, 'ERR_INVALID_CID');
	  }
	  if (parts.length) {
	    path = `/${ parts.join('/') }`;
	  }
	  return {
	    cid,
	    path
	  };
	}

	const ERR_BAD_PATH = 'ERR_BAD_PATH';
	const OFFLINE_ERROR = 'This command must be run in online mode. Try running \'ipfs daemon\' first.';
	const MFS_ROOT_KEY$2 = new Key$5('/local/filesroot');
	const MFS_MAX_CHUNK_SIZE = 262144;
	const normalizePath = pathStr => {
	  const cid = CID$6.asCID(pathStr);
	  if (cid) {
	    return `/ipfs/${ pathStr }`;
	  }
	  const str = pathStr.toString();
	  try {
	    return `/ipfs/${ CID$6.parse(str) }`;
	  } catch {
	  }
	  if (src$q.path(str)) {
	    return str;
	  } else {
	    throw errCode$q(new Error(`invalid path: ${ pathStr }`), ERR_BAD_PATH);
	  }
	};
	const normalizeCidPath = path => {
	  if (path instanceof Uint8Array) {
	    return CID$6.decode(path).toString();
	  }
	  path = path.toString();
	  if (path.indexOf('/ipfs/') === 0) {
	    path = path.substring('/ipfs/'.length);
	  }
	  if (path.charAt(path.length - 1) === '/') {
	    path = path.substring(0, path.length - 1);
	  }
	  return path;
	};
	const resolvePath$1 = async function (repo, codecs, ipfsPath, options = {}) {
	  const {cid, path} = toCidAndPath(ipfsPath);
	  if (path) {
	    options.path = path;
	  }
	  let lastCid = cid;
	  let lastRemainderPath = options.path || '';
	  if (lastRemainderPath.startsWith('/')) {
	    lastRemainderPath = lastRemainderPath.substring(1);
	  }
	  if (options.path) {
	    try {
	      for await (const {value, remainderPath} of resolve$5(cid, options.path, codecs, repo, { signal: options.signal })) {
	        if (!CID$6.asCID(value)) {
	          break;
	        }
	        lastRemainderPath = remainderPath;
	        lastCid = value;
	      }
	    } catch (err) {
	      if (err.message.startsWith('Object has no property')) {
	        err.message = `no link named "${ lastRemainderPath.split('/')[0] }" under ${ lastCid }`;
	        err.code = 'ERR_NO_LINK';
	      }
	      throw err;
	    }
	  }
	  return {
	    cid: lastCid,
	    remainderPath: lastRemainderPath || ''
	  };
	};
	const mapFile = file => {
	  if (file.type !== 'file' && file.type !== 'directory' && file.type !== 'raw') {
	    throw new Error(`Unknown node type '${ file.type }'`);
	  }
	  const output = {
	    cid: file.cid,
	    path: file.path,
	    name: file.name,
	    size: file.size,
	    type: 'file'
	  };
	  if (file.type === 'directory') {
	    output.type = 'dir';
	  }
	  if (file.type === 'file') {
	    output.size = file.unixfs.fileSize();
	  }
	  if (file.type === 'file' || file.type === 'directory') {
	    output.mode = file.unixfs.mode;
	    if (file.unixfs.mtime !== undefined) {
	      output.mtime = file.unixfs.mtime;
	    }
	  }
	  return output;
	};
	const withTimeout = withTimeoutOption(async (promise, _options) => await promise);
	const resolve$5 = async function* (cid, path, codecs, repo, options) {
	  const load = async cid => {
	    const codec = await codecs.getCodec(cid.code);
	    const block = await repo.blocks.get(cid, options);
	    return codec.decode(block);
	  };
	  const parts = path.split('/').filter(Boolean);
	  let value = await load(cid);
	  let lastCid = cid;
	  while (parts.length) {
	    const key = parts.shift();
	    if (!key) {
	      throw errCode$q(new Error(`Could not resolve path "${ path }"`), 'ERR_INVALID_PATH');
	    }
	    if (cid.code === code$8 && Array.isArray(value.Links)) {
	      const link = value.Links.find(l => l.Name === key);
	      if (link) {
	        yield {
	          value: link.Hash,
	          remainderPath: parts.join('/')
	        };
	        value = await load(link.Hash);
	        lastCid = link.Hash;
	        continue;
	      }
	    }
	    if (Object.prototype.hasOwnProperty.call(value, key)) {
	      value = value[key];
	      yield {
	        value,
	        remainderPath: parts.join('/')
	      };
	    } else {
	      throw errCode$q(new Error(`no link named "${ key }" under ${ lastCid }`), 'ERR_NO_LINK');
	    }
	    if (CID$6.asCID(value)) {
	      lastCid = value;
	      value = await load(value);
	    }
	  }
	  yield {
	    value,
	    remainderPath: ''
	  };
	};

	class Service {
	  static create({start, stop}) {
	    return new Service(start, stop);
	  }
	  static async start(service, options) {
	    const {state, activate} = service;
	    switch (state.status) {
	    case 'stopped': {
	        try {
	          const promise = activate(options);
	          service.state = {
	            status: 'starting',
	            ready: promise
	          };
	          const result = await promise;
	          service.state = {
	            status: 'started',
	            value: result
	          };
	          return result;
	        } catch (error) {
	          service.state = { status: 'stopped' };
	          throw error;
	        }
	      }
	    case 'starting': {
	        throw new AlreadyStartingError();
	      }
	    case 'started': {
	        throw new AlreadyStartedError();
	      }
	    case 'stopping': {
	        await state.ready;
	        return await Service.start(service, options);
	      }
	    default: {
	        return Service.panic(service);
	      }
	    }
	  }
	  static async stop(service) {
	    const {state, deactivate} = service;
	    switch (state.status) {
	    case 'stopped': {
	        break;
	      }
	    case 'starting': {
	        try {
	          await state.ready;
	        } catch (_) {
	        }
	        return await Service.stop(service);
	      }
	    case 'stopping': {
	        return await state.ready;
	      }
	    case 'started': {
	        if (deactivate) {
	          await deactivate(state.value);
	        }
	        service.state = { status: 'stopped' };
	        break;
	      }
	    default: {
	        Service.panic(state);
	      }
	    }
	  }
	  static try({state}) {
	    switch (state.status) {
	    case 'started':
	      return state.value;
	    default:
	      return null;
	    }
	  }
	  static async use({state}, options) {
	    switch (state.status) {
	    case 'started':
	      return state.value;
	    case 'starting':
	      return await withTimeout(state.ready, options);
	    default:
	      throw new NotStartedError();
	    }
	  }
	  static panic({state}) {
	    const status = JSON.stringify({ status: state.status });
	    throw RangeError(`Service in invalid state ${ status }, should never happen if you see this please report a bug`);
	  }
	  constructor(activate, deactivate) {
	    this.activate = activate;
	    this.deactivate = deactivate;
	    this.state = { status: 'stopped' };
	  }
	  async use(options) {
	    return await Service.use(this, options);
	  }
	  try() {
	    return Service.try(this);
	  }
	}

	function createStart$1({network, preload, peerId, keychain, repo, ipns, mfsPreload, print, hashers, options}) {
	  const start = async () => {
	    const {libp2p} = await Service.start(network, {
	      peerId,
	      repo,
	      print,
	      hashers,
	      options
	    });
	    await Promise.all([
	      ipns.startOnline({
	        keychain,
	        libp2p,
	        peerId,
	        repo
	      }),
	      preload.start(),
	      mfsPreload.start()
	    ]);
	  };
	  return start;
	}

	function createStop$1({network, preload, ipns, repo, mfsPreload}) {
	  const stop = async () => {
	    await Promise.all([
	      preload.stop(),
	      ipns.stop(),
	      mfsPreload.stop()
	    ]);
	    await Service.stop(network);
	    await repo.close();
	  };
	  return stop;
	}

	var hashlru = function (max) {

	  if (!max) throw Error('hashlru must have a max value, of type number, greater than 0')

	  var size = 0, cache = Object.create(null), _cache = Object.create(null);

	  function update (key, value) {
	    cache[key] = value;
	    size ++;
	    if(size >= max) {
	      size = 0;
	      _cache = cache;
	      cache = Object.create(null);
	    }
	  }

	  return {
	    has: function (key) {
	      return cache[key] !== undefined || _cache[key] !== undefined
	    },
	    remove: function (key) {
	      if(cache[key] !== undefined)
	        cache[key] = undefined;
	      if(_cache[key] !== undefined)
	        _cache[key] = undefined;
	    },
	    get: function (key) {
	      var v = cache[key];
	      if(v !== undefined) return v
	      if((v = _cache[key]) !== undefined) {
	        update(key, v);
	        return v
	      }
	    },
	    set: function (key, value) {
	      if(cache[key] !== undefined) cache[key] = value;
	      else update(key, value);
	    },
	    clear: function () {
	      cache = Object.create(null);
	      _cache = Object.create(null);
	    }
	  }
	};

	class TLRU$1 {
	  constructor(maxSize) {
	    this.lru = hashlru(maxSize);
	  }
	  get(key) {
	    const value = this.lru.get(key);
	    if (value) {
	      if (value.expire && value.expire < Date.now()) {
	        this.lru.remove(key);
	        return undefined;
	      }
	      return value.value;
	    }
	    return undefined;
	  }
	  set(key, value, ttl) {
	    this.lru.set(key, {
	      value,
	      expire: Date.now() + ttl
	    });
	  }
	  has(key) {
	    const value = this.get(key);
	    if (value) {
	      return true;
	    }
	    return false;
	  }
	  remove(key) {
	    this.lru.remove(key);
	  }
	  clear() {
	    this.lru.clear();
	  }
	}

	var dist$1 = {};

	var eventemitter3 = {exports: {}};

	(function (module) {

	var has = Object.prototype.hasOwnProperty
	  , prefix = '~';

	/**
	 * Constructor to create a storage for our `EE` objects.
	 * An `Events` instance is a plain object whose properties are event names.
	 *
	 * @constructor
	 * @private
	 */
	function Events() {}

	//
	// We try to not inherit from `Object.prototype`. In some engines creating an
	// instance in this way is faster than calling `Object.create(null)` directly.
	// If `Object.create(null)` is not supported we prefix the event names with a
	// character to make sure that the built-in object properties are not
	// overridden or used as an attack vector.
	//
	if (Object.create) {
	  Events.prototype = Object.create(null);

	  //
	  // This hack is needed because the `__proto__` property is still inherited in
	  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
	  //
	  if (!new Events().__proto__) prefix = false;
	}

	/**
	 * Representation of a single event listener.
	 *
	 * @param {Function} fn The listener function.
	 * @param {*} context The context to invoke the listener with.
	 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
	 * @constructor
	 * @private
	 */
	function EE(fn, context, once) {
	  this.fn = fn;
	  this.context = context;
	  this.once = once || false;
	}

	/**
	 * Add a listener for a given event.
	 *
	 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} context The context to invoke the listener with.
	 * @param {Boolean} once Specify if the listener is a one-time listener.
	 * @returns {EventEmitter}
	 * @private
	 */
	function addListener(emitter, event, fn, context, once) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('The listener must be a function');
	  }

	  var listener = new EE(fn, context || emitter, once)
	    , evt = prefix ? prefix + event : event;

	  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
	  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
	  else emitter._events[evt] = [emitter._events[evt], listener];

	  return emitter;
	}

	/**
	 * Clear event by name.
	 *
	 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
	 * @param {(String|Symbol)} evt The Event name.
	 * @private
	 */
	function clearEvent(emitter, evt) {
	  if (--emitter._eventsCount === 0) emitter._events = new Events();
	  else delete emitter._events[evt];
	}

	/**
	 * Minimal `EventEmitter` interface that is molded against the Node.js
	 * `EventEmitter` interface.
	 *
	 * @constructor
	 * @public
	 */
	function EventEmitter() {
	  this._events = new Events();
	  this._eventsCount = 0;
	}

	/**
	 * Return an array listing the events for which the emitter has registered
	 * listeners.
	 *
	 * @returns {Array}
	 * @public
	 */
	EventEmitter.prototype.eventNames = function eventNames() {
	  var names = []
	    , events
	    , name;

	  if (this._eventsCount === 0) return names;

	  for (name in (events = this._events)) {
	    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
	  }

	  if (Object.getOwnPropertySymbols) {
	    return names.concat(Object.getOwnPropertySymbols(events));
	  }

	  return names;
	};

	/**
	 * Return the listeners registered for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Array} The registered listeners.
	 * @public
	 */
	EventEmitter.prototype.listeners = function listeners(event) {
	  var evt = prefix ? prefix + event : event
	    , handlers = this._events[evt];

	  if (!handlers) return [];
	  if (handlers.fn) return [handlers.fn];

	  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
	    ee[i] = handlers[i].fn;
	  }

	  return ee;
	};

	/**
	 * Return the number of listeners listening to a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Number} The number of listeners.
	 * @public
	 */
	EventEmitter.prototype.listenerCount = function listenerCount(event) {
	  var evt = prefix ? prefix + event : event
	    , listeners = this._events[evt];

	  if (!listeners) return 0;
	  if (listeners.fn) return 1;
	  return listeners.length;
	};

	/**
	 * Calls each of the listeners registered for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @returns {Boolean} `true` if the event had listeners, else `false`.
	 * @public
	 */
	EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
	  var evt = prefix ? prefix + event : event;

	  if (!this._events[evt]) return false;

	  var listeners = this._events[evt]
	    , len = arguments.length
	    , args
	    , i;

	  if (listeners.fn) {
	    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

	    switch (len) {
	      case 1: return listeners.fn.call(listeners.context), true;
	      case 2: return listeners.fn.call(listeners.context, a1), true;
	      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
	      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
	      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
	      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
	    }

	    for (i = 1, args = new Array(len -1); i < len; i++) {
	      args[i - 1] = arguments[i];
	    }

	    listeners.fn.apply(listeners.context, args);
	  } else {
	    var length = listeners.length
	      , j;

	    for (i = 0; i < length; i++) {
	      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

	      switch (len) {
	        case 1: listeners[i].fn.call(listeners[i].context); break;
	        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
	        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
	        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
	        default:
	          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
	            args[j - 1] = arguments[j];
	          }

	          listeners[i].fn.apply(listeners[i].context, args);
	      }
	    }
	  }

	  return true;
	};

	/**
	 * Add a listener for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} [context=this] The context to invoke the listener with.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.on = function on(event, fn, context) {
	  return addListener(this, event, fn, context, false);
	};

	/**
	 * Add a one-time listener for a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn The listener function.
	 * @param {*} [context=this] The context to invoke the listener with.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.once = function once(event, fn, context) {
	  return addListener(this, event, fn, context, true);
	};

	/**
	 * Remove the listeners of a given event.
	 *
	 * @param {(String|Symbol)} event The event name.
	 * @param {Function} fn Only remove the listeners that match this function.
	 * @param {*} context Only remove the listeners that have this context.
	 * @param {Boolean} once Only remove one-time listeners.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
	  var evt = prefix ? prefix + event : event;

	  if (!this._events[evt]) return this;
	  if (!fn) {
	    clearEvent(this, evt);
	    return this;
	  }

	  var listeners = this._events[evt];

	  if (listeners.fn) {
	    if (
	      listeners.fn === fn &&
	      (!once || listeners.once) &&
	      (!context || listeners.context === context)
	    ) {
	      clearEvent(this, evt);
	    }
	  } else {
	    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
	      if (
	        listeners[i].fn !== fn ||
	        (once && !listeners[i].once) ||
	        (context && listeners[i].context !== context)
	      ) {
	        events.push(listeners[i]);
	      }
	    }

	    //
	    // Reset the array, or remove it completely if we have no more listeners.
	    //
	    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
	    else clearEvent(this, evt);
	  }

	  return this;
	};

	/**
	 * Remove all listeners, or those of the specified event.
	 *
	 * @param {(String|Symbol)} [event] The event name.
	 * @returns {EventEmitter} `this`.
	 * @public
	 */
	EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
	  var evt;

	  if (event) {
	    evt = prefix ? prefix + event : event;
	    if (this._events[evt]) clearEvent(this, evt);
	  } else {
	    this._events = new Events();
	    this._eventsCount = 0;
	  }

	  return this;
	};

	//
	// Alias methods names because people roll like that.
	//
	EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
	EventEmitter.prototype.addListener = EventEmitter.prototype.on;

	//
	// Expose the prefix.
	//
	EventEmitter.prefixed = prefix;

	//
	// Allow `EventEmitter` to be imported as module namespace.
	//
	EventEmitter.EventEmitter = EventEmitter;

	//
	// Expose the module.
	//
	{
	  module.exports = EventEmitter;
	}
	}(eventemitter3));

	var pTimeout$4 = {exports: {}};

	var pFinally$1 = (promise, onFinally) => {
		onFinally = onFinally || (() => {});

		return promise.then(
			val => new Promise(resolve => {
				resolve(onFinally());
			}).then(() => val),
			err => new Promise(resolve => {
				resolve(onFinally());
			}).then(() => {
				throw err;
			})
		);
	};

	const pFinally = pFinally$1;

	class TimeoutError$5 extends Error {
		constructor(message) {
			super(message);
			this.name = 'TimeoutError';
		}
	}

	const pTimeout$3 = (promise, milliseconds, fallback) => new Promise((resolve, reject) => {
		if (typeof milliseconds !== 'number' || milliseconds < 0) {
			throw new TypeError('Expected `milliseconds` to be a positive number');
		}

		if (milliseconds === Infinity) {
			resolve(promise);
			return;
		}

		const timer = setTimeout(() => {
			if (typeof fallback === 'function') {
				try {
					resolve(fallback());
				} catch (error) {
					reject(error);
				}

				return;
			}

			const message = typeof fallback === 'string' ? fallback : `Promise timed out after ${milliseconds} milliseconds`;
			const timeoutError = fallback instanceof Error ? fallback : new TimeoutError$5(message);

			if (typeof promise.cancel === 'function') {
				promise.cancel();
			}

			reject(timeoutError);
		}, milliseconds);

		// TODO: Use native `finally` keyword when targeting Node.js 10
		pFinally(
			// eslint-disable-next-line promise/prefer-await-to-then
			promise.then(resolve, reject),
			() => {
				clearTimeout(timer);
			}
		);
	});

	pTimeout$4.exports = pTimeout$3;
	// TODO: Remove this for the next major release
	pTimeout$4.exports.default = pTimeout$3;

	pTimeout$4.exports.TimeoutError = TimeoutError$5;

	var priorityQueue = {};

	var lowerBound$1 = {};

	Object.defineProperty(lowerBound$1, "__esModule", { value: true });
	// Port of lower_bound from https://en.cppreference.com/w/cpp/algorithm/lower_bound
	// Used to compute insertion index to keep queue sorted after insertion
	function lowerBound(array, value, comparator) {
	    let first = 0;
	    let count = array.length;
	    while (count > 0) {
	        const step = (count / 2) | 0;
	        let it = first + step;
	        if (comparator(array[it], value) <= 0) {
	            first = ++it;
	            count -= step + 1;
	        }
	        else {
	            count = step;
	        }
	    }
	    return first;
	}
	lowerBound$1.default = lowerBound;

	Object.defineProperty(priorityQueue, "__esModule", { value: true });
	const lower_bound_1 = lowerBound$1;
	class PriorityQueue {
	    constructor() {
	        this._queue = [];
	    }
	    enqueue(run, options) {
	        options = Object.assign({ priority: 0 }, options);
	        const element = {
	            priority: options.priority,
	            run
	        };
	        if (this.size && this._queue[this.size - 1].priority >= options.priority) {
	            this._queue.push(element);
	            return;
	        }
	        const index = lower_bound_1.default(this._queue, element, (a, b) => b.priority - a.priority);
	        this._queue.splice(index, 0, element);
	    }
	    dequeue() {
	        const item = this._queue.shift();
	        return item === null || item === void 0 ? void 0 : item.run;
	    }
	    filter(options) {
	        return this._queue.filter((element) => element.priority === options.priority).map((element) => element.run);
	    }
	    get size() {
	        return this._queue.length;
	    }
	}
	priorityQueue.default = PriorityQueue;

	Object.defineProperty(dist$1, "__esModule", { value: true });
	const EventEmitter$o = eventemitter3.exports;
	const p_timeout_1 = pTimeout$4.exports;
	const priority_queue_1 = priorityQueue;
	// eslint-disable-next-line @typescript-eslint/no-empty-function
	const empty$3 = () => { };
	const timeoutError = new p_timeout_1.TimeoutError();
	/**
	Promise queue with concurrency control.
	*/
	class PQueue$2 extends EventEmitter$o {
	    constructor(options) {
	        var _a, _b, _c, _d;
	        super();
	        this._intervalCount = 0;
	        this._intervalEnd = 0;
	        this._pendingCount = 0;
	        this._resolveEmpty = empty$3;
	        this._resolveIdle = empty$3;
	        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
	        options = Object.assign({ carryoverConcurrencyCount: false, intervalCap: Infinity, interval: 0, concurrency: Infinity, autoStart: true, queueClass: priority_queue_1.default }, options);
	        if (!(typeof options.intervalCap === 'number' && options.intervalCap >= 1)) {
	            throw new TypeError(`Expected \`intervalCap\` to be a number from 1 and up, got \`${(_b = (_a = options.intervalCap) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : ''}\` (${typeof options.intervalCap})`);
	        }
	        if (options.interval === undefined || !(Number.isFinite(options.interval) && options.interval >= 0)) {
	            throw new TypeError(`Expected \`interval\` to be a finite number >= 0, got \`${(_d = (_c = options.interval) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : ''}\` (${typeof options.interval})`);
	        }
	        this._carryoverConcurrencyCount = options.carryoverConcurrencyCount;
	        this._isIntervalIgnored = options.intervalCap === Infinity || options.interval === 0;
	        this._intervalCap = options.intervalCap;
	        this._interval = options.interval;
	        this._queue = new options.queueClass();
	        this._queueClass = options.queueClass;
	        this.concurrency = options.concurrency;
	        this._timeout = options.timeout;
	        this._throwOnTimeout = options.throwOnTimeout === true;
	        this._isPaused = options.autoStart === false;
	    }
	    get _doesIntervalAllowAnother() {
	        return this._isIntervalIgnored || this._intervalCount < this._intervalCap;
	    }
	    get _doesConcurrentAllowAnother() {
	        return this._pendingCount < this._concurrency;
	    }
	    _next() {
	        this._pendingCount--;
	        this._tryToStartAnother();
	        this.emit('next');
	    }
	    _resolvePromises() {
	        this._resolveEmpty();
	        this._resolveEmpty = empty$3;
	        if (this._pendingCount === 0) {
	            this._resolveIdle();
	            this._resolveIdle = empty$3;
	            this.emit('idle');
	        }
	    }
	    _onResumeInterval() {
	        this._onInterval();
	        this._initializeIntervalIfNeeded();
	        this._timeoutId = undefined;
	    }
	    _isIntervalPaused() {
	        const now = Date.now();
	        if (this._intervalId === undefined) {
	            const delay = this._intervalEnd - now;
	            if (delay < 0) {
	                // Act as the interval was done
	                // We don't need to resume it here because it will be resumed on line 160
	                this._intervalCount = (this._carryoverConcurrencyCount) ? this._pendingCount : 0;
	            }
	            else {
	                // Act as the interval is pending
	                if (this._timeoutId === undefined) {
	                    this._timeoutId = setTimeout(() => {
	                        this._onResumeInterval();
	                    }, delay);
	                }
	                return true;
	            }
	        }
	        return false;
	    }
	    _tryToStartAnother() {
	        if (this._queue.size === 0) {
	            // We can clear the interval ("pause")
	            // Because we can redo it later ("resume")
	            if (this._intervalId) {
	                clearInterval(this._intervalId);
	            }
	            this._intervalId = undefined;
	            this._resolvePromises();
	            return false;
	        }
	        if (!this._isPaused) {
	            const canInitializeInterval = !this._isIntervalPaused();
	            if (this._doesIntervalAllowAnother && this._doesConcurrentAllowAnother) {
	                const job = this._queue.dequeue();
	                if (!job) {
	                    return false;
	                }
	                this.emit('active');
	                job();
	                if (canInitializeInterval) {
	                    this._initializeIntervalIfNeeded();
	                }
	                return true;
	            }
	        }
	        return false;
	    }
	    _initializeIntervalIfNeeded() {
	        if (this._isIntervalIgnored || this._intervalId !== undefined) {
	            return;
	        }
	        this._intervalId = setInterval(() => {
	            this._onInterval();
	        }, this._interval);
	        this._intervalEnd = Date.now() + this._interval;
	    }
	    _onInterval() {
	        if (this._intervalCount === 0 && this._pendingCount === 0 && this._intervalId) {
	            clearInterval(this._intervalId);
	            this._intervalId = undefined;
	        }
	        this._intervalCount = this._carryoverConcurrencyCount ? this._pendingCount : 0;
	        this._processQueue();
	    }
	    /**
	    Executes all queued functions until it reaches the limit.
	    */
	    _processQueue() {
	        // eslint-disable-next-line no-empty
	        while (this._tryToStartAnother()) { }
	    }
	    get concurrency() {
	        return this._concurrency;
	    }
	    set concurrency(newConcurrency) {
	        if (!(typeof newConcurrency === 'number' && newConcurrency >= 1)) {
	            throw new TypeError(`Expected \`concurrency\` to be a number from 1 and up, got \`${newConcurrency}\` (${typeof newConcurrency})`);
	        }
	        this._concurrency = newConcurrency;
	        this._processQueue();
	    }
	    /**
	    Adds a sync or async task to the queue. Always returns a promise.
	    */
	    async add(fn, options = {}) {
	        return new Promise((resolve, reject) => {
	            const run = async () => {
	                this._pendingCount++;
	                this._intervalCount++;
	                try {
	                    const operation = (this._timeout === undefined && options.timeout === undefined) ? fn() : p_timeout_1.default(Promise.resolve(fn()), (options.timeout === undefined ? this._timeout : options.timeout), () => {
	                        if (options.throwOnTimeout === undefined ? this._throwOnTimeout : options.throwOnTimeout) {
	                            reject(timeoutError);
	                        }
	                        return undefined;
	                    });
	                    resolve(await operation);
	                }
	                catch (error) {
	                    reject(error);
	                }
	                this._next();
	            };
	            this._queue.enqueue(run, options);
	            this._tryToStartAnother();
	            this.emit('add');
	        });
	    }
	    /**
	    Same as `.add()`, but accepts an array of sync or async functions.

	    @returns A promise that resolves when all functions are resolved.
	    */
	    async addAll(functions, options) {
	        return Promise.all(functions.map(async (function_) => this.add(function_, options)));
	    }
	    /**
	    Start (or resume) executing enqueued tasks within concurrency limit. No need to call this if queue is not paused (via `options.autoStart = false` or by `.pause()` method.)
	    */
	    start() {
	        if (!this._isPaused) {
	            return this;
	        }
	        this._isPaused = false;
	        this._processQueue();
	        return this;
	    }
	    /**
	    Put queue execution on hold.
	    */
	    pause() {
	        this._isPaused = true;
	    }
	    /**
	    Clear the queue.
	    */
	    clear() {
	        this._queue = new this._queueClass();
	    }
	    /**
	    Can be called multiple times. Useful if you for example add additional items at a later time.

	    @returns A promise that settles when the queue becomes empty.
	    */
	    async onEmpty() {
	        // Instantly resolve if the queue is empty
	        if (this._queue.size === 0) {
	            return;
	        }
	        return new Promise(resolve => {
	            const existingResolve = this._resolveEmpty;
	            this._resolveEmpty = () => {
	                existingResolve();
	                resolve();
	            };
	        });
	    }
	    /**
	    The difference with `.onEmpty` is that `.onIdle` guarantees that all work from the queue has finished. `.onEmpty` merely signals that the queue is empty, but it could mean that some promises haven't completed yet.

	    @returns A promise that settles when the queue becomes empty, and all promises have completed; `queue.size === 0 && queue.pending === 0`.
	    */
	    async onIdle() {
	        // Instantly resolve if none pending and if nothing else is queued
	        if (this._pendingCount === 0 && this._queue.size === 0) {
	            return;
	        }
	        return new Promise(resolve => {
	            const existingResolve = this._resolveIdle;
	            this._resolveIdle = () => {
	                existingResolve();
	                resolve();
	            };
	        });
	    }
	    /**
	    Size of the queue.
	    */
	    get size() {
	        return this._queue.size;
	    }
	    /**
	    Size of the queue, filtered by the given options.

	    For example, this can be used to find the number of items remaining in the queue with a specific priority level.
	    */
	    sizeBy(options) {
	        // eslint-disable-next-line unicorn/no-fn-reference-in-iterator
	        return this._queue.filter(options).length;
	    }
	    /**
	    Number of pending promises.
	    */
	    get pending() {
	        return this._pendingCount;
	    }
	    /**
	    Whether the queue is currently paused.
	    */
	    get isPaused() {
	        return this._isPaused;
	    }
	    get timeout() {
	        return this._timeout;
	    }
	    /**
	    Set the timeout for future operations.
	    */
	    set timeout(milliseconds) {
	        this._timeout = milliseconds;
	    }
	}
	var _default = dist$1.default = PQueue$2;

	var error = {};

	class TimeoutError$4 extends Error {
	  constructor (message = 'Request timed out') {
	    super(message);
	    this.name = 'TimeoutError';
	  }
	}
	error.TimeoutError = TimeoutError$4;

	class AbortError$6 extends Error {
	  constructor (message = 'The operation was aborted.') {
	    super(message);
	    this.name = 'AbortError';
	  }
	}
	error.AbortError = AbortError$6;

	class HTTPError$1 extends Error {
	  /**
	   * @param {Response} response
	   */
	  constructor (response) {
	    super(response.statusText);
	    this.name = 'HTTPError';
	    this.response = response;
	  }
	}
	error.HTTPError = HTTPError$1;

	var fetch$4 = {exports: {}};

	var globSourceImport = {};

	var _nodeResolve_empty = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': globSourceImport
	});

	var require$$0$2 = /*@__PURE__*/getAugmentedNamespace(_nodeResolve_empty);

	var src$p = {exports: {}};

	var browser$9 = {exports: {}};

	(function (module, exports) {

	// ref: https://github.com/tc39/proposal-global
	var getGlobal = function () {
		// the only reliable means to get the global object is
		// `Function('return this')()`
		// However, this causes CSP violations in Chrome apps.
		if (typeof self !== 'undefined') { return self; }
		if (typeof window !== 'undefined') { return window; }
		if (typeof global !== 'undefined') { return global; }
		throw new Error('unable to locate global object');
	};

	var global = getGlobal();

	module.exports = exports = global.fetch;

	// Needed for TypeScript and Webpack.
	if (global.fetch) {
		exports.default = global.fetch.bind(global);
	}

	exports.Headers = global.Headers;
	exports.Request = global.Request;
	exports.Response = global.Response;
	}(browser$9, browser$9.exports));

	if (globalThis.fetch && globalThis.Headers && globalThis.Request && globalThis.Response) {
	  src$p.exports = {
	    default: globalThis.fetch,
	    Headers: globalThis.Headers,
	    Request: globalThis.Request,
	    Response: globalThis.Response
	  };
	} else {
	  src$p.exports = {
	    default: browser$9.exports.default,
	    Headers: browser$9.exports.Headers,
	    Request: browser$9.exports.Request,
	    Response: browser$9.exports.Response
	  };
	}

	const { isElectronMain } = env$1;

	if (isElectronMain) {
	  fetch$4.exports = require$$0$2;
	} else {
	// use window.fetch if it is available, fall back to node-fetch if not
	  fetch$4.exports = src$p.exports;
	}

	const { TimeoutError: TimeoutError$3, AbortError: AbortError$5 } = error;
	const { Response: Response$1, Request: Request$2, Headers: Headers$3, default: fetch$3 } = fetch$4.exports;

	/**
	 * @typedef {import('../types').FetchOptions} FetchOptions
	 * @typedef {import('../types').ProgressFn} ProgressFn
	 */

	/**
	 * Fetch with progress
	 *
	 * @param {string | Request} url
	 * @param {FetchOptions} [options]
	 * @returns {Promise<ResponseWithURL>}
	 */
	const fetchWithProgress = (url, options = {}) => {
	  const request = new XMLHttpRequest();
	  request.open(options.method || 'GET', url.toString(), true);

	  const { timeout, headers } = options;

	  if (timeout && timeout > 0 && timeout < Infinity) {
	    request.timeout = timeout;
	  }

	  if (options.overrideMimeType != null) {
	    request.overrideMimeType(options.overrideMimeType);
	  }

	  if (headers) {
	    for (const [name, value] of new Headers$3(headers)) {
	      request.setRequestHeader(name, value);
	    }
	  }

	  if (options.signal) {
	    options.signal.onabort = () => request.abort();
	  }

	  if (options.onUploadProgress) {
	    request.upload.onprogress = options.onUploadProgress;
	  }

	  // Note: Need to use `arraybuffer` here instead of `blob` because `Blob`
	  // instances coming from JSDOM are not compatible with `Response` from
	  // node-fetch (which is the setup we get when testing with jest because
	  // it uses JSDOM which does not provide a global fetch
	  // https://github.com/jsdom/jsdom/issues/1724)
	  request.responseType = 'arraybuffer';

	  return new Promise((resolve, reject) => {
	    /**
	     * @param {Event} event
	     */
	    const handleEvent = (event) => {
	      switch (event.type) {
	        case 'error': {
	          resolve(Response$1.error());
	          break
	        }
	        case 'load': {
	          resolve(
	            new ResponseWithURL(request.responseURL, request.response, {
	              status: request.status,
	              statusText: request.statusText,
	              headers: parseHeaders(request.getAllResponseHeaders())
	            })
	          );
	          break
	        }
	        case 'timeout': {
	          reject(new TimeoutError$3());
	          break
	        }
	        case 'abort': {
	          reject(new AbortError$5());
	          break
	        }
	      }
	    };
	    request.onerror = handleEvent;
	    request.onload = handleEvent;
	    request.ontimeout = handleEvent;
	    request.onabort = handleEvent;

	    // @ts-expect-error options.body can be a node readable stream, which isn't compatible with XHR, but this
	    // file is a browser override so you won't get a node readable stream so ignore the error
	    request.send(options.body);
	  })
	};

	const fetchWithStreaming = fetch$3;

	/**
	 * @param {string | Request} url
	 * @param {FetchOptions} options
	 */
	const fetchWith = (url, options = {}) =>
	  (options.onUploadProgress != null)
	    ? fetchWithProgress(url, options)
	    : fetchWithStreaming(url, options);

	/**
	 * Parse Headers from a XMLHttpRequest
	 *
	 * @param {string} input
	 * @returns {Headers}
	 */
	const parseHeaders = (input) => {
	  const headers = new Headers$3();
	  for (const line of input.trim().split(/[\r\n]+/)) {
	    const index = line.indexOf(': ');
	    if (index > 0) {
	      headers.set(line.slice(0, index), line.slice(index + 1));
	    }
	  }

	  return headers
	};

	class ResponseWithURL extends Response$1 {
	  /**
	   * @param {string} url
	   * @param {BodyInit} body
	   * @param {ResponseInit} options
	   */
	  constructor (url, body, options) {
	    super(body, options);
	    Object.defineProperty(this, 'url', { value: url });
	  }
	}

	var fetch_browser = {
	  fetch: fetchWith,
	  Request: Request$2,
	  Headers: Headers$3
	};

	/* eslint-disable no-undef */

	const { fetch: fetch$2, Request: Request$1, Headers: Headers$2 } = fetch_browser;
	const { TimeoutError: TimeoutError$2, HTTPError } = error;
	const merge$6 = mergeOptions$k.bind({ ignoreUndefined: true });
	const { URL: URL$1, URLSearchParams: URLSearchParams$1 } = isoUrl;
	const anySignal$5 = anySignal$7.exports;

	/**
	 * @typedef {import('stream').Readable} NodeReadableStream
	 * @typedef {import('./types').HTTPOptions} HTTPOptions
	 * @typedef {import('./types').ExtendedResponse} ExtendedResponse
	 */

	/**
	 * @template TResponse
	 * @param {Promise<TResponse>} promise
	 * @param {number | undefined} ms
	 * @param {AbortController} abortController
	 * @returns {Promise<TResponse>}
	 */
	const timeout$1 = (promise, ms, abortController) => {
	  if (ms === undefined) {
	    return promise
	  }

	  const start = Date.now();

	  const timedOut = () => {
	    const time = Date.now() - start;

	    return time >= ms
	  };

	  return new Promise((resolve, reject) => {
	    const timeoutID = setTimeout(() => {
	      if (timedOut()) {
	        reject(new TimeoutError$2());
	        abortController.abort();
	      }
	    }, ms);

	    /**
	     * @param {(value: any) => void } next
	     */
	    const after = (next) => {
	      /**
	       * @param {any} res
	       */
	      const fn = (res) => {
	        clearTimeout(timeoutID);

	        if (timedOut()) {
	          reject(new TimeoutError$2());
	          return
	        }

	        next(res);
	      };
	      return fn
	    };

	    promise
	      .then(after(resolve), after(reject));
	  })
	};

	const defaults = {
	  throwHttpErrors: true,
	  credentials: 'same-origin'
	};

	class HTTP$1 {
	  /**
	   *
	   * @param {HTTPOptions} options
	   */
	  constructor (options = {}) {
	    /** @type {HTTPOptions} */
	    this.opts = merge$6(defaults, options);
	  }

	  /**
	   * Fetch
	   *
	   * @param {string | Request} resource
	   * @param {HTTPOptions} options
	   * @returns {Promise<ExtendedResponse>}
	   */
	  async fetch (resource, options = {}) {
	    /** @type {HTTPOptions} */
	    const opts = merge$6(this.opts, options);
	    const headers = new Headers$2(opts.headers);

	    // validate resource type
	    if (typeof resource !== 'string' && !(resource instanceof URL$1 || resource instanceof Request$1)) {
	      throw new TypeError('`resource` must be a string, URL, or Request')
	    }

	    const url = new URL$1(resource.toString(), opts.base);

	    const {
	      searchParams,
	      transformSearchParams,
	      json
	    } = opts;

	    if (searchParams) {
	      if (typeof transformSearchParams === 'function') {
	        // @ts-ignore
	        url.search = transformSearchParams(new URLSearchParams$1(opts.searchParams));
	      } else {
	        // @ts-ignore
	        url.search = new URLSearchParams$1(opts.searchParams);
	      }
	    }

	    if (json) {
	      opts.body = JSON.stringify(opts.json);
	      headers.set('content-type', 'application/json');
	    }

	    const abortController = new AbortController();
	    // @ts-ignore
	    const signal = anySignal$5([abortController.signal, opts.signal]);

	    const response = await timeout$1(
	      fetch$2(
	        url.toString(),
	        {
	          ...opts,
	          signal,
	          timeout: undefined,
	          headers
	        }
	      ),
	      opts.timeout,
	      abortController
	    );

	    if (!response.ok && opts.throwHttpErrors) {
	      if (opts.handleError) {
	        await opts.handleError(response);
	      }
	      throw new HTTPError(response)
	    }

	    response.iterator = function () {
	      return fromStream(response.body)
	    };

	    response.ndjson = async function * () {
	      for await (const chunk of ndjson(response.iterator())) {
	        if (options.transform) {
	          yield options.transform(chunk);
	        } else {
	          yield chunk;
	        }
	      }
	    };

	    return response
	  }

	  /**
	   * @param {string | Request} resource
	   * @param {HTTPOptions} options
	   */
	  post (resource, options = {}) {
	    return this.fetch(resource, { ...options, method: 'POST' })
	  }

	  /**
	   * @param {string | Request} resource
	   * @param {HTTPOptions} options
	   */
	  get (resource, options = {}) {
	    return this.fetch(resource, { ...options, method: 'GET' })
	  }

	  /**
	   * @param {string | Request} resource
	   * @param {HTTPOptions} options
	   */
	  put (resource, options = {}) {
	    return this.fetch(resource, { ...options, method: 'PUT' })
	  }

	  /**
	   * @param {string | Request} resource
	   * @param {HTTPOptions} options
	   */
	  delete (resource, options = {}) {
	    return this.fetch(resource, { ...options, method: 'DELETE' })
	  }

	  /**
	   * @param {string | Request} resource
	   * @param {HTTPOptions} options
	   */
	  options (resource, options = {}) {
	    return this.fetch(resource, { ...options, method: 'OPTIONS' })
	  }
	}

	/**
	 * Parses NDJSON chunks from an iterator
	 *
	 * @param {AsyncIterable<Uint8Array>} source
	 * @returns {AsyncIterable<any>}
	 */
	const ndjson = async function * (source) {
	  const decoder = new TextDecoder();
	  let buf = '';

	  for await (const chunk of source) {
	    buf += decoder.decode(chunk, { stream: true });
	    const lines = buf.split(/\r?\n/);

	    for (let i = 0; i < lines.length - 1; i++) {
	      const l = lines[i].trim();
	      if (l.length > 0) {
	        yield JSON.parse(l);
	      }
	    }
	    buf = lines[lines.length - 1];
	  }
	  buf += decoder.decode();
	  buf = buf.trim();
	  if (buf.length !== 0) {
	    yield JSON.parse(buf);
	  }
	};

	/**
	 * Stream to AsyncIterable
	 *
	 * @template TChunk
	 * @param {ReadableStream<TChunk> | NodeReadableStream | null} source
	 * @returns {AsyncIterable<TChunk>}
	 */
	const fromStream = (source) => {
	  // Workaround for https://github.com/node-fetch/node-fetch/issues/766
	  if (isNodeReadableStream(source)) {
	    const iter = source[Symbol.asyncIterator]();
	    return {
	      [Symbol.asyncIterator] () {
	        return {
	          next: iter.next.bind(iter),
	          return (value) {
	            source.destroy();
	            if (typeof iter.return === 'function') {
	              return iter.return()
	            }
	            return Promise.resolve({ done: true, value })
	          }
	        }
	      }
	    }
	  }

	  if (isWebReadableStream(source)) {
	    const reader = source.getReader();
	    return (async function * () {
	      try {
	        while (true) {
	          // Read from the stream
	          const { done, value } = await reader.read();
	          // Exit if we're done
	          if (done) return
	          // Else yield the chunk
	          if (value) {
	            yield value;
	          }
	        }
	      } finally {
	        reader.releaseLock();
	      }
	    })()
	  }

	  if (isAsyncIterable$1(source)) {
	    return source
	  }

	  throw new TypeError('Body can\'t be converted to AsyncIterable')
	};

	/**
	 * Check if it's an AsyncIterable
	 *
	 * @template {unknown} TChunk
	 * @template {any} Other
	 * @param {Other|AsyncIterable<TChunk>} value
	 * @returns {value is AsyncIterable<TChunk>}
	 */
	const isAsyncIterable$1 = (value) => {
	  return typeof value === 'object' &&
	  value !== null &&
	  typeof /** @type {any} */(value)[Symbol.asyncIterator] === 'function'
	};

	/**
	 * Check for web readable stream
	 *
	 * @template {unknown} TChunk
	 * @template {any} Other
	 * @param {Other|ReadableStream<TChunk>} value
	 * @returns {value is ReadableStream<TChunk>}
	 */
	const isWebReadableStream = (value) => {
	  return value && typeof /** @type {any} */(value).getReader === 'function'
	};

	/**
	 * @param {any} value
	 * @returns {value is NodeReadableStream}
	 */
	const isNodeReadableStream = (value) =>
	  Object.prototype.hasOwnProperty.call(value, 'readable') &&
	  Object.prototype.hasOwnProperty.call(value, 'writable');

	HTTP$1.HTTPError = HTTPError;
	HTTP$1.TimeoutError = TimeoutError$2;
	HTTP$1.streamToAsyncIterator = fromStream;

	/**
	 * @param {string | Request} resource
	 * @param {HTTPOptions} [options]
	 */
	HTTP$1.post = (resource, options) => new HTTP$1(options).post(resource, options);

	/**
	 * @param {string | Request} resource
	 * @param {HTTPOptions} [options]
	 */
	HTTP$1.get = (resource, options) => new HTTP$1(options).get(resource, options);

	/**
	 * @param {string | Request} resource
	 * @param {HTTPOptions} [options]
	 */
	HTTP$1.put = (resource, options) => new HTTP$1(options).put(resource, options);

	/**
	 * @param {string | Request} resource
	 * @param {HTTPOptions} [options]
	 */
	HTTP$1.delete = (resource, options) => new HTTP$1(options).delete(resource, options);

	/**
	 * @param {string | Request} resource
	 * @param {HTTPOptions} [options]
	 */
	HTTP$1.options = (resource, options) => new HTTP$1(options).options(resource, options);

	var http = HTTP$1;

	const cache$2 = new TLRU$1(1000);
	const ttl = 60 * 1000;
	const Queue$7 = _default.default ? _default.default : _default;
	const httpQueue$1 = new Queue$7({ concurrency: 4 });
	const ipfsPath = response => {
	  if (response.Path)
	    return response.Path;
	  throw new Error(response.Message);
	};
	async function resolveDnslink(fqdn, opts) {
	  const resolve = async (fqdn, opts = {}) => {
	    const searchParams = new URLSearchParams(opts);
	    searchParams.set('arg', fqdn);
	    const query = searchParams.toString();
	    if (!opts.nocache && cache$2.has(query)) {
	      const response = cache$2.get(query);
	      return ipfsPath(response);
	    }
	    const response = await httpQueue$1.add(async () => {
	      const res = await http.get('https://ipfs.io/api/v0/dns', { searchParams });
	      const query = new URL(res.url).search.slice(1);
	      const json = await res.json();
	      cache$2.set(query, json, ttl);
	      return json;
	    });
	    return ipfsPath(response);
	  };
	  return resolve(fqdn, opts);
	}

	function fqdnFixups(domain) {
	  if (domain.endsWith('.eth')) {
	    domain = domain.replace(/.eth$/, '.eth.link');
	  }
	  return domain;
	}
	function createDns$1() {
	  const resolveDNS = async (domain, options = { recursive: true }) => {
	    if (typeof domain !== 'string') {
	      throw new Error('Invalid arguments, domain must be a string');
	    }
	    domain = fqdnFixups(domain);
	    return resolveDnslink(domain, options);
	  };
	  return withTimeoutOption(resolveDNS);
	}

	function createIsOnline$1({network}) {
	  return () => {
	    const net = network.try();
	    return net != null && Boolean(net.libp2p.isStarted());
	  };
	}

	var src$o = {exports: {}};

	var require$$2$1 = /*@__PURE__*/getAugmentedNamespace(base36$1);

	var require$$5$2 = /*@__PURE__*/getAugmentedNamespace(base16$1);

	/*eslint-disable*/

	var $protobuf$a = minimal;

	// Common aliases
	var $Reader$i = $protobuf$a.Reader, $Writer$i = $protobuf$a.Writer, $util$h = $protobuf$a.util;

	// Exported root namespace
	var $root$i = $protobuf$a.roots["libp2p-crypto-keys"] || ($protobuf$a.roots["libp2p-crypto-keys"] = {});

	/**
	 * KeyType enum.
	 * @exports KeyType
	 * @enum {number}
	 * @property {number} RSA=0 RSA value
	 * @property {number} Ed25519=1 Ed25519 value
	 * @property {number} Secp256k1=2 Secp256k1 value
	 */
	$root$i.KeyType = (function() {
	    var valuesById = {}, values = Object.create(valuesById);
	    values[valuesById[0] = "RSA"] = 0;
	    values[valuesById[1] = "Ed25519"] = 1;
	    values[valuesById[2] = "Secp256k1"] = 2;
	    return values;
	})();

	$root$i.PublicKey = (function() {

	    /**
	     * Properties of a PublicKey.
	     * @exports IPublicKey
	     * @interface IPublicKey
	     * @property {KeyType} Type PublicKey Type
	     * @property {Uint8Array} Data PublicKey Data
	     */

	    /**
	     * Constructs a new PublicKey.
	     * @exports PublicKey
	     * @classdesc Represents a PublicKey.
	     * @implements IPublicKey
	     * @constructor
	     * @param {IPublicKey=} [p] Properties to set
	     */
	    function PublicKey(p) {
	        if (p)
	            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                if (p[ks[i]] != null)
	                    this[ks[i]] = p[ks[i]];
	    }

	    /**
	     * PublicKey Type.
	     * @member {KeyType} Type
	     * @memberof PublicKey
	     * @instance
	     */
	    PublicKey.prototype.Type = 0;

	    /**
	     * PublicKey Data.
	     * @member {Uint8Array} Data
	     * @memberof PublicKey
	     * @instance
	     */
	    PublicKey.prototype.Data = $util$h.newBuffer([]);

	    /**
	     * Encodes the specified PublicKey message. Does not implicitly {@link PublicKey.verify|verify} messages.
	     * @function encode
	     * @memberof PublicKey
	     * @static
	     * @param {IPublicKey} m PublicKey message or plain object to encode
	     * @param {$protobuf.Writer} [w] Writer to encode to
	     * @returns {$protobuf.Writer} Writer
	     */
	    PublicKey.encode = function encode(m, w) {
	        if (!w)
	            w = $Writer$i.create();
	        w.uint32(8).int32(m.Type);
	        w.uint32(18).bytes(m.Data);
	        return w;
	    };

	    /**
	     * Decodes a PublicKey message from the specified reader or buffer.
	     * @function decode
	     * @memberof PublicKey
	     * @static
	     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	     * @param {number} [l] Message length if known beforehand
	     * @returns {PublicKey} PublicKey
	     * @throws {Error} If the payload is not a reader or valid buffer
	     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	     */
	    PublicKey.decode = function decode(r, l) {
	        if (!(r instanceof $Reader$i))
	            r = $Reader$i.create(r);
	        var c = l === undefined ? r.len : r.pos + l, m = new $root$i.PublicKey();
	        while (r.pos < c) {
	            var t = r.uint32();
	            switch (t >>> 3) {
	            case 1:
	                m.Type = r.int32();
	                break;
	            case 2:
	                m.Data = r.bytes();
	                break;
	            default:
	                r.skipType(t & 7);
	                break;
	            }
	        }
	        if (!m.hasOwnProperty("Type"))
	            throw $util$h.ProtocolError("missing required 'Type'", { instance: m });
	        if (!m.hasOwnProperty("Data"))
	            throw $util$h.ProtocolError("missing required 'Data'", { instance: m });
	        return m;
	    };

	    /**
	     * Creates a PublicKey message from a plain object. Also converts values to their respective internal types.
	     * @function fromObject
	     * @memberof PublicKey
	     * @static
	     * @param {Object.<string,*>} d Plain object
	     * @returns {PublicKey} PublicKey
	     */
	    PublicKey.fromObject = function fromObject(d) {
	        if (d instanceof $root$i.PublicKey)
	            return d;
	        var m = new $root$i.PublicKey();
	        switch (d.Type) {
	        case "RSA":
	        case 0:
	            m.Type = 0;
	            break;
	        case "Ed25519":
	        case 1:
	            m.Type = 1;
	            break;
	        case "Secp256k1":
	        case 2:
	            m.Type = 2;
	            break;
	        }
	        if (d.Data != null) {
	            if (typeof d.Data === "string")
	                $util$h.base64.decode(d.Data, m.Data = $util$h.newBuffer($util$h.base64.length(d.Data)), 0);
	            else if (d.Data.length)
	                m.Data = d.Data;
	        }
	        return m;
	    };

	    /**
	     * Creates a plain object from a PublicKey message. Also converts values to other types if specified.
	     * @function toObject
	     * @memberof PublicKey
	     * @static
	     * @param {PublicKey} m PublicKey
	     * @param {$protobuf.IConversionOptions} [o] Conversion options
	     * @returns {Object.<string,*>} Plain object
	     */
	    PublicKey.toObject = function toObject(m, o) {
	        if (!o)
	            o = {};
	        var d = {};
	        if (o.defaults) {
	            d.Type = o.enums === String ? "RSA" : 0;
	            if (o.bytes === String)
	                d.Data = "";
	            else {
	                d.Data = [];
	                if (o.bytes !== Array)
	                    d.Data = $util$h.newBuffer(d.Data);
	            }
	        }
	        if (m.Type != null && m.hasOwnProperty("Type")) {
	            d.Type = o.enums === String ? $root$i.KeyType[m.Type] : m.Type;
	        }
	        if (m.Data != null && m.hasOwnProperty("Data")) {
	            d.Data = o.bytes === String ? $util$h.base64.encode(m.Data, 0, m.Data.length) : o.bytes === Array ? Array.prototype.slice.call(m.Data) : m.Data;
	        }
	        return d;
	    };

	    /**
	     * Converts this PublicKey to JSON.
	     * @function toJSON
	     * @memberof PublicKey
	     * @instance
	     * @returns {Object.<string,*>} JSON object
	     */
	    PublicKey.prototype.toJSON = function toJSON() {
	        return this.constructor.toObject(this, $protobuf$a.util.toJSONOptions);
	    };

	    return PublicKey;
	})();

	$root$i.PrivateKey = (function() {

	    /**
	     * Properties of a PrivateKey.
	     * @exports IPrivateKey
	     * @interface IPrivateKey
	     * @property {KeyType} Type PrivateKey Type
	     * @property {Uint8Array} Data PrivateKey Data
	     */

	    /**
	     * Constructs a new PrivateKey.
	     * @exports PrivateKey
	     * @classdesc Represents a PrivateKey.
	     * @implements IPrivateKey
	     * @constructor
	     * @param {IPrivateKey=} [p] Properties to set
	     */
	    function PrivateKey(p) {
	        if (p)
	            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                if (p[ks[i]] != null)
	                    this[ks[i]] = p[ks[i]];
	    }

	    /**
	     * PrivateKey Type.
	     * @member {KeyType} Type
	     * @memberof PrivateKey
	     * @instance
	     */
	    PrivateKey.prototype.Type = 0;

	    /**
	     * PrivateKey Data.
	     * @member {Uint8Array} Data
	     * @memberof PrivateKey
	     * @instance
	     */
	    PrivateKey.prototype.Data = $util$h.newBuffer([]);

	    /**
	     * Encodes the specified PrivateKey message. Does not implicitly {@link PrivateKey.verify|verify} messages.
	     * @function encode
	     * @memberof PrivateKey
	     * @static
	     * @param {IPrivateKey} m PrivateKey message or plain object to encode
	     * @param {$protobuf.Writer} [w] Writer to encode to
	     * @returns {$protobuf.Writer} Writer
	     */
	    PrivateKey.encode = function encode(m, w) {
	        if (!w)
	            w = $Writer$i.create();
	        w.uint32(8).int32(m.Type);
	        w.uint32(18).bytes(m.Data);
	        return w;
	    };

	    /**
	     * Decodes a PrivateKey message from the specified reader or buffer.
	     * @function decode
	     * @memberof PrivateKey
	     * @static
	     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	     * @param {number} [l] Message length if known beforehand
	     * @returns {PrivateKey} PrivateKey
	     * @throws {Error} If the payload is not a reader or valid buffer
	     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	     */
	    PrivateKey.decode = function decode(r, l) {
	        if (!(r instanceof $Reader$i))
	            r = $Reader$i.create(r);
	        var c = l === undefined ? r.len : r.pos + l, m = new $root$i.PrivateKey();
	        while (r.pos < c) {
	            var t = r.uint32();
	            switch (t >>> 3) {
	            case 1:
	                m.Type = r.int32();
	                break;
	            case 2:
	                m.Data = r.bytes();
	                break;
	            default:
	                r.skipType(t & 7);
	                break;
	            }
	        }
	        if (!m.hasOwnProperty("Type"))
	            throw $util$h.ProtocolError("missing required 'Type'", { instance: m });
	        if (!m.hasOwnProperty("Data"))
	            throw $util$h.ProtocolError("missing required 'Data'", { instance: m });
	        return m;
	    };

	    /**
	     * Creates a PrivateKey message from a plain object. Also converts values to their respective internal types.
	     * @function fromObject
	     * @memberof PrivateKey
	     * @static
	     * @param {Object.<string,*>} d Plain object
	     * @returns {PrivateKey} PrivateKey
	     */
	    PrivateKey.fromObject = function fromObject(d) {
	        if (d instanceof $root$i.PrivateKey)
	            return d;
	        var m = new $root$i.PrivateKey();
	        switch (d.Type) {
	        case "RSA":
	        case 0:
	            m.Type = 0;
	            break;
	        case "Ed25519":
	        case 1:
	            m.Type = 1;
	            break;
	        case "Secp256k1":
	        case 2:
	            m.Type = 2;
	            break;
	        }
	        if (d.Data != null) {
	            if (typeof d.Data === "string")
	                $util$h.base64.decode(d.Data, m.Data = $util$h.newBuffer($util$h.base64.length(d.Data)), 0);
	            else if (d.Data.length)
	                m.Data = d.Data;
	        }
	        return m;
	    };

	    /**
	     * Creates a plain object from a PrivateKey message. Also converts values to other types if specified.
	     * @function toObject
	     * @memberof PrivateKey
	     * @static
	     * @param {PrivateKey} m PrivateKey
	     * @param {$protobuf.IConversionOptions} [o] Conversion options
	     * @returns {Object.<string,*>} Plain object
	     */
	    PrivateKey.toObject = function toObject(m, o) {
	        if (!o)
	            o = {};
	        var d = {};
	        if (o.defaults) {
	            d.Type = o.enums === String ? "RSA" : 0;
	            if (o.bytes === String)
	                d.Data = "";
	            else {
	                d.Data = [];
	                if (o.bytes !== Array)
	                    d.Data = $util$h.newBuffer(d.Data);
	            }
	        }
	        if (m.Type != null && m.hasOwnProperty("Type")) {
	            d.Type = o.enums === String ? $root$i.KeyType[m.Type] : m.Type;
	        }
	        if (m.Data != null && m.hasOwnProperty("Data")) {
	            d.Data = o.bytes === String ? $util$h.base64.encode(m.Data, 0, m.Data.length) : o.bytes === Array ? Array.prototype.slice.call(m.Data) : m.Data;
	        }
	        return d;
	    };

	    /**
	     * Converts this PrivateKey to JSON.
	     * @function toJSON
	     * @memberof PrivateKey
	     * @instance
	     * @returns {Object.<string,*>} JSON object
	     */
	    PrivateKey.prototype.toJSON = function toJSON() {
	        return this.constructor.toObject(this, $protobuf$a.util.toJSONOptions);
	    };

	    return PrivateKey;
	})();

	var keys$3 = $root$i;

	/**
	 * Node.js module for Forge.
	 *
	 * @author Dave Longley
	 *
	 * Copyright 2011-2016 Digital Bazaar, Inc.
	 */

	var forge$z = {
	  // default options
	  options: {
	    usePureJavaScript: false
	  }
	};

	var lookup$1 = [];
	var revLookup = [];
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
	var inited = false;
	function init$1 () {
	  inited = true;
	  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	  for (var i = 0, len = code.length; i < len; ++i) {
	    lookup$1[i] = code[i];
	    revLookup[code.charCodeAt(i)] = i;
	  }

	  revLookup['-'.charCodeAt(0)] = 62;
	  revLookup['_'.charCodeAt(0)] = 63;
	}

	function toByteArray (b64) {
	  if (!inited) {
	    init$1();
	  }
	  var i, j, l, tmp, placeHolders, arr;
	  var len = b64.length;

	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

	  // base64 is 4/3 + up to two characters of the original data
	  arr = new Arr(len * 3 / 4 - placeHolders);

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len;

	  var L = 0;

	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
	    arr[L++] = (tmp >> 16) & 0xFF;
	    arr[L++] = (tmp >> 8) & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
	    arr[L++] = tmp & 0xFF;
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
	    arr[L++] = (tmp >> 8) & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup$1[num >> 18 & 0x3F] + lookup$1[num >> 12 & 0x3F] + lookup$1[num >> 6 & 0x3F] + lookup$1[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp;
	  var output = [];
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
	    output.push(tripletToBase64(tmp));
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  if (!inited) {
	    init$1();
	  }
	  var tmp;
	  var len = uint8.length;
	  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
	  var output = '';
	  var parts = [];
	  var maxChunkLength = 16383; // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1];
	    output += lookup$1[tmp >> 2];
	    output += lookup$1[(tmp << 4) & 0x3F];
	    output += '==';
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
	    output += lookup$1[tmp >> 10];
	    output += lookup$1[(tmp >> 4) & 0x3F];
	    output += lookup$1[(tmp << 2) & 0x3F];
	    output += '=';
	  }

	  parts.push(output);

	  return parts.join('')
	}

	function read$2 (buffer, offset, isLE, mLen, nBytes) {
	  var e, m;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = -7;
	  var i = isLE ? (nBytes - 1) : 0;
	  var d = isLE ? -1 : 1;
	  var s = buffer[offset + i];

	  i += d;

	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	function write$2 (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
	  var i = isLE ? 0 : (nBytes - 1);
	  var d = isLE ? 1 : -1;
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

	  value = Math.abs(value);

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }

	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128;
	}

	var toString$4 = {}.toString;

	var isArray$1 = Array.isArray || function (arr) {
	  return toString$4.call(arr) == '[object Array]';
	};

	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */

	var INSPECT_MAX_BYTES = 50;

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer$h.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
	  ? global$1.TYPED_ARRAY_SUPPORT
	  : true;

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	var _kMaxLength = kMaxLength();

	function kMaxLength () {
	  return Buffer$h.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer$h.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length);
	    that.__proto__ = Buffer$h.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer$h(length);
	    }
	    that.length = length;
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer$h (arg, encodingOrOffset, length) {
	  if (!Buffer$h.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$h)) {
	    return new Buffer$h(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from$1(this, arg, encodingOrOffset, length)
	}

	Buffer$h.poolSize = 8192; // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer$h._augment = function (arr) {
	  arr.__proto__ = Buffer$h.prototype;
	  return arr
	};

	function from$1 (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString$2(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer$h.from = function (value, encodingOrOffset, length) {
	  return from$1(null, value, encodingOrOffset, length)
	};

	if (Buffer$h.TYPED_ARRAY_SUPPORT) {
	  Buffer$h.prototype.__proto__ = Uint8Array.prototype;
	  Buffer$h.__proto__ = Uint8Array;
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc$1 (that, size, fill, encoding) {
	  assertSize(size);
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer$h.alloc = function (size, fill, encoding) {
	  return alloc$1(null, size, fill, encoding)
	};

	function allocUnsafe (that, size) {
	  assertSize(size);
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
	  if (!Buffer$h.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0;
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer$h.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	};
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer$h.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	};

	function fromString$2 (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8';
	  }

	  if (!Buffer$h.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0;
	  that = createBuffer(that, length);

	  var actual = that.write(string, encoding);

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual);
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0;
	  that = createBuffer(that, length);
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255;
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array);
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset);
	  } else {
	    array = new Uint8Array(array, byteOffset, length);
	  }

	  if (Buffer$h.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array;
	    that.__proto__ = Buffer$h.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array);
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (internalIsBuffer(obj)) {
	    var len = checked(obj.length) | 0;
	    that = createBuffer(that, len);

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len);
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray$1(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0;
	  }
	  return Buffer$h.alloc(+length)
	}
	Buffer$h.isBuffer = isBuffer$3;
	function internalIsBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer$h.compare = function compare (a, b) {
	  if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	Buffer$h.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	};

	Buffer$h.concat = function concat (list, length) {
	  if (!isArray$1(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer$h.alloc(0)
	  }

	  var i;
	  if (length === undefined) {
	    length = 0;
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length;
	    }
	  }

	  var buffer = Buffer$h.allocUnsafe(length);
	  var pos = 0;
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i];
	    if (!internalIsBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos);
	    pos += buf.length;
	  }
	  return buffer
	};

	function byteLength (string, encoding) {
	  if (internalIsBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string;
	  }

	  var len = string.length;
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	}
	Buffer$h.byteLength = byteLength;

	function slowToString (encoding, start, end) {
	  var loweredCase = false;

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0;
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length;
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0;
	  start >>>= 0;

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8';

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase();
	        loweredCase = true;
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer$h.prototype._isBuffer = true;

	function swap (b, n, m) {
	  var i = b[n];
	  b[n] = b[m];
	  b[m] = i;
	}

	Buffer$h.prototype.swap16 = function swap16 () {
	  var len = this.length;
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1);
	  }
	  return this
	};

	Buffer$h.prototype.swap32 = function swap32 () {
	  var len = this.length;
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3);
	    swap(this, i + 1, i + 2);
	  }
	  return this
	};

	Buffer$h.prototype.swap64 = function swap64 () {
	  var len = this.length;
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7);
	    swap(this, i + 1, i + 6);
	    swap(this, i + 2, i + 5);
	    swap(this, i + 3, i + 4);
	  }
	  return this
	};

	Buffer$h.prototype.toString = function toString () {
	  var length = this.length | 0;
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	};

	Buffer$h.prototype.equals = function equals (b) {
	  if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer$h.compare(this, b) === 0
	};

	Buffer$h.prototype.inspect = function inspect () {
	  var str = '';
	  var max = INSPECT_MAX_BYTES;
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
	    if (this.length > max) str += ' ... ';
	  }
	  return '<Buffer ' + str + '>'
	};

	Buffer$h.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!internalIsBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0;
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0;
	  }
	  if (thisStart === undefined) {
	    thisStart = 0;
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length;
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0;
	  end >>>= 0;
	  thisStart >>>= 0;
	  thisEnd >>>= 0;

	  if (this === target) return 0

	  var x = thisEnd - thisStart;
	  var y = end - start;
	  var len = Math.min(x, y);

	  var thisCopy = this.slice(thisStart, thisEnd);
	  var targetCopy = target.slice(start, end);

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i];
	      y = targetCopy[i];
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	};

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset;
	    byteOffset = 0;
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff;
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000;
	  }
	  byteOffset = +byteOffset;  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1);
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1;
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0;
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer$h.from(val, encoding);
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (internalIsBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF; // Search for a byte value [0-255]
	    if (Buffer$h.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1;
	  var arrLength = arr.length;
	  var valLength = val.length;

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase();
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2;
	      arrLength /= 2;
	      valLength /= 2;
	      byteOffset /= 2;
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i;
	  if (dir) {
	    var foundIndex = -1;
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i;
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex;
	        foundIndex = -1;
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true;
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false;
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer$h.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	};

	Buffer$h.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	};

	Buffer$h.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	};

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0;
	  var remaining = buf.length - offset;
	  if (!length) {
	    length = remaining;
	  } else {
	    length = Number(length);
	    if (length > remaining) {
	      length = remaining;
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length;
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2;
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16);
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed;
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer$h.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8';
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset;
	    length = this.length;
	    offset = 0;
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0;
	    if (isFinite(length)) {
	      length = length | 0;
	      if (encoding === undefined) encoding = 'utf8';
	    } else {
	      encoding = length;
	      length = undefined;
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset;
	  if (length === undefined || length > remaining) length = remaining;

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8';

	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	};

	Buffer$h.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	};

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return fromByteArray(buf)
	  } else {
	    return fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end);
	  var res = [];

	  var i = start;
	  while (i < end) {
	    var firstByte = buf[i];
	    var codePoint = null;
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1;

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint;

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte;
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1];
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          fourthByte = buf[i + 3];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint;
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD;
	      bytesPerSequence = 1;
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000;
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
	      codePoint = 0xDC00 | codePoint & 0x3FF;
	    }

	    res.push(codePoint);
	    i += bytesPerSequence;
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000;

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length;
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = '';
	  var i = 0;
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    );
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F);
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i]);
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length;

	  if (!start || start < 0) start = 0;
	  if (!end || end < 0 || end > len) end = len;

	  var out = '';
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i]);
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end);
	  var res = '';
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
	  }
	  return res
	}

	Buffer$h.prototype.slice = function slice (start, end) {
	  var len = this.length;
	  start = ~~start;
	  end = end === undefined ? len : ~~end;

	  if (start < 0) {
	    start += len;
	    if (start < 0) start = 0;
	  } else if (start > len) {
	    start = len;
	  }

	  if (end < 0) {
	    end += len;
	    if (end < 0) end = 0;
	  } else if (end > len) {
	    end = len;
	  }

	  if (end < start) end = start;

	  var newBuf;
	  if (Buffer$h.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end);
	    newBuf.__proto__ = Buffer$h.prototype;
	  } else {
	    var sliceLen = end - start;
	    newBuf = new Buffer$h(sliceLen, undefined);
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start];
	    }
	  }

	  return newBuf
	};

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer$h.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }

	  return val
	};

	Buffer$h.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length);
	  }

	  var val = this[offset + --byteLength];
	  var mul = 1;
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul;
	  }

	  return val
	};

	Buffer$h.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  return this[offset]
	};

	Buffer$h.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return this[offset] | (this[offset + 1] << 8)
	};

	Buffer$h.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return (this[offset] << 8) | this[offset + 1]
	};

	Buffer$h.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	};

	Buffer$h.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	};

	Buffer$h.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer$h.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);

	  var i = byteLength;
	  var mul = 1;
	  var val = this[offset + --i];
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul;
	  }
	  mul *= 0x80;

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);

	  return val
	};

	Buffer$h.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	};

	Buffer$h.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset] | (this[offset + 1] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer$h.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset + 1] | (this[offset] << 8);
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	};

	Buffer$h.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	};

	Buffer$h.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	};

	Buffer$h.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return read$2(this, offset, true, 23, 4)
	};

	Buffer$h.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return read$2(this, offset, false, 23, 4)
	};

	Buffer$h.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return read$2(this, offset, true, 52, 8)
	};

	Buffer$h.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return read$2(this, offset, false, 52, 8)
	};

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer$h.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var mul = 1;
	  var i = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$h.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$h.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
	  if (!Buffer$h.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8;
	  }
	}

	Buffer$h.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer$h.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2
	};

	Buffer$h.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer$h.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = (value & 0xff);
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2
	};

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
	  }
	}

	Buffer$h.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer$h.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 1] = (value >>> 8);
	    this[offset] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4
	};

	Buffer$h.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer$h.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4
	};

	Buffer$h.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = 0;
	  var mul = 1;
	  var sub = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$h.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);

	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }

	  var i = byteLength - 1;
	  var mul = 1;
	  var sub = 0;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
	  }

	  return offset + byteLength
	};

	Buffer$h.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
	  if (!Buffer$h.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  if (value < 0) value = 0xff + value + 1;
	  this[offset] = (value & 0xff);
	  return offset + 1
	};

	Buffer$h.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer$h.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2
	};

	Buffer$h.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer$h.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8);
	    this[offset + 1] = (value & 0xff);
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2
	};

	Buffer$h.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (Buffer$h.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff);
	    this[offset + 1] = (value >>> 8);
	    this[offset + 2] = (value >>> 16);
	    this[offset + 3] = (value >>> 24);
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4
	};

	Buffer$h.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (value < 0) value = 0xffffffff + value + 1;
	  if (Buffer$h.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24);
	    this[offset + 1] = (value >>> 16);
	    this[offset + 2] = (value >>> 8);
	    this[offset + 3] = (value & 0xff);
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4
	};

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4);
	  }
	  write$2(buf, value, offset, littleEndian, 23, 4);
	  return offset + 4
	}

	Buffer$h.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	};

	Buffer$h.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	};

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8);
	  }
	  write$2(buf, value, offset, littleEndian, 52, 8);
	  return offset + 8
	}

	Buffer$h.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	};

	Buffer$h.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	};

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer$h.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0;
	  if (!end && end !== 0) end = this.length;
	  if (targetStart >= target.length) targetStart = target.length;
	  if (!targetStart) targetStart = 0;
	  if (end > 0 && end < start) end = start;

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length;
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start;
	  }

	  var len = end - start;
	  var i;

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else if (len < 1000 || !Buffer$h.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    );
	  }

	  return len
	};

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer$h.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start;
	      start = 0;
	      end = this.length;
	    } else if (typeof end === 'string') {
	      encoding = end;
	      end = this.length;
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0);
	      if (code < 256) {
	        val = code;
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer$h.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255;
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0;
	  end = end === undefined ? this.length : end >>> 0;

	  if (!val) val = 0;

	  var i;
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val;
	    }
	  } else {
	    var bytes = internalIsBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer$h(val, encoding).toString());
	    var len = bytes.length;
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len];
	    }
	  }

	  return this
	};

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '=';
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity;
	  var codePoint;
	  var length = string.length;
	  var leadSurrogate = null;
	  var bytes = [];

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i);

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint;

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	        leadSurrogate = codePoint;
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	    }

	    leadSurrogate = null;

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint);
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      );
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF);
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo;
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i);
	    hi = c >> 8;
	    lo = c % 256;
	    byteArray.push(lo);
	    byteArray.push(hi);
	  }

	  return byteArray
	}


	function base64ToBytes (str) {
	  return toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i];
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}


	// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
	// The _isBuffer check is for Safari 5-7 support, because it's missing
	// Object.prototype.constructor. Remove this eventually
	function isBuffer$3(obj) {
	  return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
	}

	function isFastBuffer (obj) {
	  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
	}

	// For Node v0.10 support. Remove this eventually.
	function isSlowBuffer (obj) {
	  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
	}

	var bufferEs6 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Buffer: Buffer$h,
		INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
		SlowBuffer: SlowBuffer,
		isBuffer: isBuffer$3,
		kMaxLength: _kMaxLength
	});

	var util$8 = {exports: {}};

	var api = {};
	var baseN$1 = api;

	// baseN alphabet indexes
	var _reverseAlphabets = {};

	/**
	 * BaseN-encodes a Uint8Array using the given alphabet.
	 *
	 * @param input the Uint8Array to encode.
	 * @param maxline the maximum number of encoded characters per line to use,
	 *          defaults to none.
	 *
	 * @return the baseN-encoded output string.
	 */
	api.encode = function(input, alphabet, maxline) {
	  if(typeof alphabet !== 'string') {
	    throw new TypeError('"alphabet" must be a string.');
	  }
	  if(maxline !== undefined && typeof maxline !== 'number') {
	    throw new TypeError('"maxline" must be a number.');
	  }

	  var output = '';

	  if(!(input instanceof Uint8Array)) {
	    // assume forge byte buffer
	    output = _encodeWithByteBuffer(input, alphabet);
	  } else {
	    var i = 0;
	    var base = alphabet.length;
	    var first = alphabet.charAt(0);
	    var digits = [0];
	    for(i = 0; i < input.length; ++i) {
	      for(var j = 0, carry = input[i]; j < digits.length; ++j) {
	        carry += digits[j] << 8;
	        digits[j] = carry % base;
	        carry = (carry / base) | 0;
	      }

	      while(carry > 0) {
	        digits.push(carry % base);
	        carry = (carry / base) | 0;
	      }
	    }

	    // deal with leading zeros
	    for(i = 0; input[i] === 0 && i < input.length - 1; ++i) {
	      output += first;
	    }
	    // convert digits to a string
	    for(i = digits.length - 1; i >= 0; --i) {
	      output += alphabet[digits[i]];
	    }
	  }

	  if(maxline) {
	    var regex = new RegExp('.{1,' + maxline + '}', 'g');
	    output = output.match(regex).join('\r\n');
	  }

	  return output;
	};

	/**
	 * Decodes a baseN-encoded (using the given alphabet) string to a
	 * Uint8Array.
	 *
	 * @param input the baseN-encoded input string.
	 *
	 * @return the Uint8Array.
	 */
	api.decode = function(input, alphabet) {
	  if(typeof input !== 'string') {
	    throw new TypeError('"input" must be a string.');
	  }
	  if(typeof alphabet !== 'string') {
	    throw new TypeError('"alphabet" must be a string.');
	  }

	  var table = _reverseAlphabets[alphabet];
	  if(!table) {
	    // compute reverse alphabet
	    table = _reverseAlphabets[alphabet] = [];
	    for(var i = 0; i < alphabet.length; ++i) {
	      table[alphabet.charCodeAt(i)] = i;
	    }
	  }

	  // remove whitespace characters
	  input = input.replace(/\s/g, '');

	  var base = alphabet.length;
	  var first = alphabet.charAt(0);
	  var bytes = [0];
	  for(var i = 0; i < input.length; i++) {
	    var value = table[input.charCodeAt(i)];
	    if(value === undefined) {
	      return;
	    }

	    for(var j = 0, carry = value; j < bytes.length; ++j) {
	      carry += bytes[j] * base;
	      bytes[j] = carry & 0xff;
	      carry >>= 8;
	    }

	    while(carry > 0) {
	      bytes.push(carry & 0xff);
	      carry >>= 8;
	    }
	  }

	  // deal with leading zeros
	  for(var k = 0; input[k] === first && k < input.length - 1; ++k) {
	    bytes.push(0);
	  }

	  if(typeof Buffer$h !== 'undefined') {
	    return Buffer$h.from(bytes.reverse());
	  }

	  return new Uint8Array(bytes.reverse());
	};

	function _encodeWithByteBuffer(input, alphabet) {
	  var i = 0;
	  var base = alphabet.length;
	  var first = alphabet.charAt(0);
	  var digits = [0];
	  for(i = 0; i < input.length(); ++i) {
	    for(var j = 0, carry = input.at(i); j < digits.length; ++j) {
	      carry += digits[j] << 8;
	      digits[j] = carry % base;
	      carry = (carry / base) | 0;
	    }

	    while(carry > 0) {
	      digits.push(carry % base);
	      carry = (carry / base) | 0;
	    }
	  }

	  var output = '';

	  // deal with leading zeros
	  for(i = 0; input.at(i) === 0 && i < input.length() - 1; ++i) {
	    output += first;
	  }
	  // convert digits to a string
	  for(i = digits.length - 1; i >= 0; --i) {
	    output += alphabet[digits[i]];
	  }

	  return output;
	}

	var forge$y = forge$z;
	var baseN = baseN$1;

	/* Utilities API */
	var util$7 = util$8.exports = forge$y.util = forge$y.util || {};

	// define setImmediate and nextTick
	(function() {
	  // use native nextTick (unless we're in webpack)
	  // webpack (or better node-libs-browser polyfill) sets process.browser.
	  // this way we can detect webpack properly
	  if(typeof process$3 !== 'undefined' && process$3.nextTick && !process$3.browser) {
	    util$7.nextTick = process$3.nextTick;
	    if(typeof setImmediate === 'function') {
	      util$7.setImmediate = setImmediate;
	    } else {
	      // polyfill setImmediate with nextTick, older versions of node
	      // (those w/o setImmediate) won't totally starve IO
	      util$7.setImmediate = util$7.nextTick;
	    }
	    return;
	  }

	  // polyfill nextTick with native setImmediate
	  if(typeof setImmediate === 'function') {
	    util$7.setImmediate = function() { return setImmediate.apply(undefined, arguments); };
	    util$7.nextTick = function(callback) {
	      return setImmediate(callback);
	    };
	    return;
	  }

	  /* Note: A polyfill upgrade pattern is used here to allow combining
	  polyfills. For example, MutationObserver is fast, but blocks UI updates,
	  so it needs to allow UI updates periodically, so it falls back on
	  postMessage or setTimeout. */

	  // polyfill with setTimeout
	  util$7.setImmediate = function(callback) {
	    setTimeout(callback, 0);
	  };

	  // upgrade polyfill to use postMessage
	  if(typeof window !== 'undefined' &&
	    typeof window.postMessage === 'function') {
	    var msg = 'forge.setImmediate';
	    var callbacks = [];
	    util$7.setImmediate = function(callback) {
	      callbacks.push(callback);
	      // only send message when one hasn't been sent in
	      // the current turn of the event loop
	      if(callbacks.length === 1) {
	        window.postMessage(msg, '*');
	      }
	    };
	    function handler(event) {
	      if(event.source === window && event.data === msg) {
	        event.stopPropagation();
	        var copy = callbacks.slice();
	        callbacks.length = 0;
	        copy.forEach(function(callback) {
	          callback();
	        });
	      }
	    }
	    window.addEventListener('message', handler, true);
	  }

	  // upgrade polyfill to use MutationObserver
	  if(typeof MutationObserver !== 'undefined') {
	    // polyfill with MutationObserver
	    var now = Date.now();
	    var attr = true;
	    var div = document.createElement('div');
	    var callbacks = [];
	    new MutationObserver(function() {
	      var copy = callbacks.slice();
	      callbacks.length = 0;
	      copy.forEach(function(callback) {
	        callback();
	      });
	    }).observe(div, {attributes: true});
	    var oldSetImmediate = util$7.setImmediate;
	    util$7.setImmediate = function(callback) {
	      if(Date.now() - now > 15) {
	        now = Date.now();
	        oldSetImmediate(callback);
	      } else {
	        callbacks.push(callback);
	        // only trigger observer when it hasn't been triggered in
	        // the current turn of the event loop
	        if(callbacks.length === 1) {
	          div.setAttribute('a', attr = !attr);
	        }
	      }
	    };
	  }

	  util$7.nextTick = util$7.setImmediate;
	})();

	// check if running under Node.js
	util$7.isNodejs =
	  typeof process$3 !== 'undefined' && process$3.versions && process$3.versions.node;


	// 'self' will also work in Web Workers (instance of WorkerGlobalScope) while
	// it will point to `window` in the main thread.
	// To remain compatible with older browsers, we fall back to 'window' if 'self'
	// is not available.
	util$7.globalScope = (function() {
	  if(util$7.isNodejs) {
	    return commonjsGlobal;
	  }

	  return typeof self === 'undefined' ? window : self;
	})();

	// define isArray
	util$7.isArray = Array.isArray || function(x) {
	  return Object.prototype.toString.call(x) === '[object Array]';
	};

	// define isArrayBuffer
	util$7.isArrayBuffer = function(x) {
	  return typeof ArrayBuffer !== 'undefined' && x instanceof ArrayBuffer;
	};

	// define isArrayBufferView
	util$7.isArrayBufferView = function(x) {
	  return x && util$7.isArrayBuffer(x.buffer) && x.byteLength !== undefined;
	};

	/**
	 * Ensure a bits param is 8, 16, 24, or 32. Used to validate input for
	 * algorithms where bit manipulation, JavaScript limitations, and/or algorithm
	 * design only allow for byte operations of a limited size.
	 *
	 * @param n number of bits.
	 *
	 * Throw Error if n invalid.
	 */
	function _checkBitsParam(n) {
	  if(!(n === 8 || n === 16 || n === 24 || n === 32)) {
	    throw new Error('Only 8, 16, 24, or 32 bits supported: ' + n);
	  }
	}

	// TODO: set ByteBuffer to best available backing
	util$7.ByteBuffer = ByteStringBuffer;

	/** Buffer w/BinaryString backing */

	/**
	 * Constructor for a binary string backed byte buffer.
	 *
	 * @param [b] the bytes to wrap (either encoded as string, one byte per
	 *          character, or as an ArrayBuffer or Typed Array).
	 */
	function ByteStringBuffer(b) {
	  // TODO: update to match DataBuffer API

	  // the data in this buffer
	  this.data = '';
	  // the pointer for reading from this buffer
	  this.read = 0;

	  if(typeof b === 'string') {
	    this.data = b;
	  } else if(util$7.isArrayBuffer(b) || util$7.isArrayBufferView(b)) {
	    if(typeof Buffer$h !== 'undefined' && b instanceof Buffer$h) {
	      this.data = b.toString('binary');
	    } else {
	      // convert native buffer to forge buffer
	      // FIXME: support native buffers internally instead
	      var arr = new Uint8Array(b);
	      try {
	        this.data = String.fromCharCode.apply(null, arr);
	      } catch(e) {
	        for(var i = 0; i < arr.length; ++i) {
	          this.putByte(arr[i]);
	        }
	      }
	    }
	  } else if(b instanceof ByteStringBuffer ||
	    (typeof b === 'object' && typeof b.data === 'string' &&
	    typeof b.read === 'number')) {
	    // copy existing buffer
	    this.data = b.data;
	    this.read = b.read;
	  }

	  // used for v8 optimization
	  this._constructedStringLength = 0;
	}
	util$7.ByteStringBuffer = ByteStringBuffer;

	/* Note: This is an optimization for V8-based browsers. When V8 concatenates
	  a string, the strings are only joined logically using a "cons string" or
	  "constructed/concatenated string". These containers keep references to one
	  another and can result in very large memory usage. For example, if a 2MB
	  string is constructed by concatenating 4 bytes together at a time, the
	  memory usage will be ~44MB; so ~22x increase. The strings are only joined
	  together when an operation requiring their joining takes place, such as
	  substr(). This function is called when adding data to this buffer to ensure
	  these types of strings are periodically joined to reduce the memory
	  footprint. */
	var _MAX_CONSTRUCTED_STRING_LENGTH = 4096;
	util$7.ByteStringBuffer.prototype._optimizeConstructedString = function(x) {
	  this._constructedStringLength += x;
	  if(this._constructedStringLength > _MAX_CONSTRUCTED_STRING_LENGTH) {
	    // this substr() should cause the constructed string to join
	    this.data.substr(0, 1);
	    this._constructedStringLength = 0;
	  }
	};

	/**
	 * Gets the number of bytes in this buffer.
	 *
	 * @return the number of bytes in this buffer.
	 */
	util$7.ByteStringBuffer.prototype.length = function() {
	  return this.data.length - this.read;
	};

	/**
	 * Gets whether or not this buffer is empty.
	 *
	 * @return true if this buffer is empty, false if not.
	 */
	util$7.ByteStringBuffer.prototype.isEmpty = function() {
	  return this.length() <= 0;
	};

	/**
	 * Puts a byte in this buffer.
	 *
	 * @param b the byte to put.
	 *
	 * @return this buffer.
	 */
	util$7.ByteStringBuffer.prototype.putByte = function(b) {
	  return this.putBytes(String.fromCharCode(b));
	};

	/**
	 * Puts a byte in this buffer N times.
	 *
	 * @param b the byte to put.
	 * @param n the number of bytes of value b to put.
	 *
	 * @return this buffer.
	 */
	util$7.ByteStringBuffer.prototype.fillWithByte = function(b, n) {
	  b = String.fromCharCode(b);
	  var d = this.data;
	  while(n > 0) {
	    if(n & 1) {
	      d += b;
	    }
	    n >>>= 1;
	    if(n > 0) {
	      b += b;
	    }
	  }
	  this.data = d;
	  this._optimizeConstructedString(n);
	  return this;
	};

	/**
	 * Puts bytes in this buffer.
	 *
	 * @param bytes the bytes (as a binary encoded string) to put.
	 *
	 * @return this buffer.
	 */
	util$7.ByteStringBuffer.prototype.putBytes = function(bytes) {
	  this.data += bytes;
	  this._optimizeConstructedString(bytes.length);
	  return this;
	};

	/**
	 * Puts a UTF-16 encoded string into this buffer.
	 *
	 * @param str the string to put.
	 *
	 * @return this buffer.
	 */
	util$7.ByteStringBuffer.prototype.putString = function(str) {
	  return this.putBytes(util$7.encodeUtf8(str));
	};

	/**
	 * Puts a 16-bit integer in this buffer in big-endian order.
	 *
	 * @param i the 16-bit integer.
	 *
	 * @return this buffer.
	 */
	util$7.ByteStringBuffer.prototype.putInt16 = function(i) {
	  return this.putBytes(
	    String.fromCharCode(i >> 8 & 0xFF) +
	    String.fromCharCode(i & 0xFF));
	};

	/**
	 * Puts a 24-bit integer in this buffer in big-endian order.
	 *
	 * @param i the 24-bit integer.
	 *
	 * @return this buffer.
	 */
	util$7.ByteStringBuffer.prototype.putInt24 = function(i) {
	  return this.putBytes(
	    String.fromCharCode(i >> 16 & 0xFF) +
	    String.fromCharCode(i >> 8 & 0xFF) +
	    String.fromCharCode(i & 0xFF));
	};

	/**
	 * Puts a 32-bit integer in this buffer in big-endian order.
	 *
	 * @param i the 32-bit integer.
	 *
	 * @return this buffer.
	 */
	util$7.ByteStringBuffer.prototype.putInt32 = function(i) {
	  return this.putBytes(
	    String.fromCharCode(i >> 24 & 0xFF) +
	    String.fromCharCode(i >> 16 & 0xFF) +
	    String.fromCharCode(i >> 8 & 0xFF) +
	    String.fromCharCode(i & 0xFF));
	};

	/**
	 * Puts a 16-bit integer in this buffer in little-endian order.
	 *
	 * @param i the 16-bit integer.
	 *
	 * @return this buffer.
	 */
	util$7.ByteStringBuffer.prototype.putInt16Le = function(i) {
	  return this.putBytes(
	    String.fromCharCode(i & 0xFF) +
	    String.fromCharCode(i >> 8 & 0xFF));
	};

	/**
	 * Puts a 24-bit integer in this buffer in little-endian order.
	 *
	 * @param i the 24-bit integer.
	 *
	 * @return this buffer.
	 */
	util$7.ByteStringBuffer.prototype.putInt24Le = function(i) {
	  return this.putBytes(
	    String.fromCharCode(i & 0xFF) +
	    String.fromCharCode(i >> 8 & 0xFF) +
	    String.fromCharCode(i >> 16 & 0xFF));
	};

	/**
	 * Puts a 32-bit integer in this buffer in little-endian order.
	 *
	 * @param i the 32-bit integer.
	 *
	 * @return this buffer.
	 */
	util$7.ByteStringBuffer.prototype.putInt32Le = function(i) {
	  return this.putBytes(
	    String.fromCharCode(i & 0xFF) +
	    String.fromCharCode(i >> 8 & 0xFF) +
	    String.fromCharCode(i >> 16 & 0xFF) +
	    String.fromCharCode(i >> 24 & 0xFF));
	};

	/**
	 * Puts an n-bit integer in this buffer in big-endian order.
	 *
	 * @param i the n-bit integer.
	 * @param n the number of bits in the integer (8, 16, 24, or 32).
	 *
	 * @return this buffer.
	 */
	util$7.ByteStringBuffer.prototype.putInt = function(i, n) {
	  _checkBitsParam(n);
	  var bytes = '';
	  do {
	    n -= 8;
	    bytes += String.fromCharCode((i >> n) & 0xFF);
	  } while(n > 0);
	  return this.putBytes(bytes);
	};

	/**
	 * Puts a signed n-bit integer in this buffer in big-endian order. Two's
	 * complement representation is used.
	 *
	 * @param i the n-bit integer.
	 * @param n the number of bits in the integer (8, 16, 24, or 32).
	 *
	 * @return this buffer.
	 */
	util$7.ByteStringBuffer.prototype.putSignedInt = function(i, n) {
	  // putInt checks n
	  if(i < 0) {
	    i += 2 << (n - 1);
	  }
	  return this.putInt(i, n);
	};

	/**
	 * Puts the given buffer into this buffer.
	 *
	 * @param buffer the buffer to put into this one.
	 *
	 * @return this buffer.
	 */
	util$7.ByteStringBuffer.prototype.putBuffer = function(buffer) {
	  return this.putBytes(buffer.getBytes());
	};

	/**
	 * Gets a byte from this buffer and advances the read pointer by 1.
	 *
	 * @return the byte.
	 */
	util$7.ByteStringBuffer.prototype.getByte = function() {
	  return this.data.charCodeAt(this.read++);
	};

	/**
	 * Gets a uint16 from this buffer in big-endian order and advances the read
	 * pointer by 2.
	 *
	 * @return the uint16.
	 */
	util$7.ByteStringBuffer.prototype.getInt16 = function() {
	  var rval = (
	    this.data.charCodeAt(this.read) << 8 ^
	    this.data.charCodeAt(this.read + 1));
	  this.read += 2;
	  return rval;
	};

	/**
	 * Gets a uint24 from this buffer in big-endian order and advances the read
	 * pointer by 3.
	 *
	 * @return the uint24.
	 */
	util$7.ByteStringBuffer.prototype.getInt24 = function() {
	  var rval = (
	    this.data.charCodeAt(this.read) << 16 ^
	    this.data.charCodeAt(this.read + 1) << 8 ^
	    this.data.charCodeAt(this.read + 2));
	  this.read += 3;
	  return rval;
	};

	/**
	 * Gets a uint32 from this buffer in big-endian order and advances the read
	 * pointer by 4.
	 *
	 * @return the word.
	 */
	util$7.ByteStringBuffer.prototype.getInt32 = function() {
	  var rval = (
	    this.data.charCodeAt(this.read) << 24 ^
	    this.data.charCodeAt(this.read + 1) << 16 ^
	    this.data.charCodeAt(this.read + 2) << 8 ^
	    this.data.charCodeAt(this.read + 3));
	  this.read += 4;
	  return rval;
	};

	/**
	 * Gets a uint16 from this buffer in little-endian order and advances the read
	 * pointer by 2.
	 *
	 * @return the uint16.
	 */
	util$7.ByteStringBuffer.prototype.getInt16Le = function() {
	  var rval = (
	    this.data.charCodeAt(this.read) ^
	    this.data.charCodeAt(this.read + 1) << 8);
	  this.read += 2;
	  return rval;
	};

	/**
	 * Gets a uint24 from this buffer in little-endian order and advances the read
	 * pointer by 3.
	 *
	 * @return the uint24.
	 */
	util$7.ByteStringBuffer.prototype.getInt24Le = function() {
	  var rval = (
	    this.data.charCodeAt(this.read) ^
	    this.data.charCodeAt(this.read + 1) << 8 ^
	    this.data.charCodeAt(this.read + 2) << 16);
	  this.read += 3;
	  return rval;
	};

	/**
	 * Gets a uint32 from this buffer in little-endian order and advances the read
	 * pointer by 4.
	 *
	 * @return the word.
	 */
	util$7.ByteStringBuffer.prototype.getInt32Le = function() {
	  var rval = (
	    this.data.charCodeAt(this.read) ^
	    this.data.charCodeAt(this.read + 1) << 8 ^
	    this.data.charCodeAt(this.read + 2) << 16 ^
	    this.data.charCodeAt(this.read + 3) << 24);
	  this.read += 4;
	  return rval;
	};

	/**
	 * Gets an n-bit integer from this buffer in big-endian order and advances the
	 * read pointer by ceil(n/8).
	 *
	 * @param n the number of bits in the integer (8, 16, 24, or 32).
	 *
	 * @return the integer.
	 */
	util$7.ByteStringBuffer.prototype.getInt = function(n) {
	  _checkBitsParam(n);
	  var rval = 0;
	  do {
	    // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.
	    rval = (rval << 8) + this.data.charCodeAt(this.read++);
	    n -= 8;
	  } while(n > 0);
	  return rval;
	};

	/**
	 * Gets a signed n-bit integer from this buffer in big-endian order, using
	 * two's complement, and advances the read pointer by n/8.
	 *
	 * @param n the number of bits in the integer (8, 16, 24, or 32).
	 *
	 * @return the integer.
	 */
	util$7.ByteStringBuffer.prototype.getSignedInt = function(n) {
	  // getInt checks n
	  var x = this.getInt(n);
	  var max = 2 << (n - 2);
	  if(x >= max) {
	    x -= max << 1;
	  }
	  return x;
	};

	/**
	 * Reads bytes out as a binary encoded string and clears them from the
	 * buffer. Note that the resulting string is binary encoded (in node.js this
	 * encoding is referred to as `binary`, it is *not* `utf8`).
	 *
	 * @param count the number of bytes to read, undefined or null for all.
	 *
	 * @return a binary encoded string of bytes.
	 */
	util$7.ByteStringBuffer.prototype.getBytes = function(count) {
	  var rval;
	  if(count) {
	    // read count bytes
	    count = Math.min(this.length(), count);
	    rval = this.data.slice(this.read, this.read + count);
	    this.read += count;
	  } else if(count === 0) {
	    rval = '';
	  } else {
	    // read all bytes, optimize to only copy when needed
	    rval = (this.read === 0) ? this.data : this.data.slice(this.read);
	    this.clear();
	  }
	  return rval;
	};

	/**
	 * Gets a binary encoded string of the bytes from this buffer without
	 * modifying the read pointer.
	 *
	 * @param count the number of bytes to get, omit to get all.
	 *
	 * @return a string full of binary encoded characters.
	 */
	util$7.ByteStringBuffer.prototype.bytes = function(count) {
	  return (typeof(count) === 'undefined' ?
	    this.data.slice(this.read) :
	    this.data.slice(this.read, this.read + count));
	};

	/**
	 * Gets a byte at the given index without modifying the read pointer.
	 *
	 * @param i the byte index.
	 *
	 * @return the byte.
	 */
	util$7.ByteStringBuffer.prototype.at = function(i) {
	  return this.data.charCodeAt(this.read + i);
	};

	/**
	 * Puts a byte at the given index without modifying the read pointer.
	 *
	 * @param i the byte index.
	 * @param b the byte to put.
	 *
	 * @return this buffer.
	 */
	util$7.ByteStringBuffer.prototype.setAt = function(i, b) {
	  this.data = this.data.substr(0, this.read + i) +
	    String.fromCharCode(b) +
	    this.data.substr(this.read + i + 1);
	  return this;
	};

	/**
	 * Gets the last byte without modifying the read pointer.
	 *
	 * @return the last byte.
	 */
	util$7.ByteStringBuffer.prototype.last = function() {
	  return this.data.charCodeAt(this.data.length - 1);
	};

	/**
	 * Creates a copy of this buffer.
	 *
	 * @return the copy.
	 */
	util$7.ByteStringBuffer.prototype.copy = function() {
	  var c = util$7.createBuffer(this.data);
	  c.read = this.read;
	  return c;
	};

	/**
	 * Compacts this buffer.
	 *
	 * @return this buffer.
	 */
	util$7.ByteStringBuffer.prototype.compact = function() {
	  if(this.read > 0) {
	    this.data = this.data.slice(this.read);
	    this.read = 0;
	  }
	  return this;
	};

	/**
	 * Clears this buffer.
	 *
	 * @return this buffer.
	 */
	util$7.ByteStringBuffer.prototype.clear = function() {
	  this.data = '';
	  this.read = 0;
	  return this;
	};

	/**
	 * Shortens this buffer by triming bytes off of the end of this buffer.
	 *
	 * @param count the number of bytes to trim off.
	 *
	 * @return this buffer.
	 */
	util$7.ByteStringBuffer.prototype.truncate = function(count) {
	  var len = Math.max(0, this.length() - count);
	  this.data = this.data.substr(this.read, len);
	  this.read = 0;
	  return this;
	};

	/**
	 * Converts this buffer to a hexadecimal string.
	 *
	 * @return a hexadecimal string.
	 */
	util$7.ByteStringBuffer.prototype.toHex = function() {
	  var rval = '';
	  for(var i = this.read; i < this.data.length; ++i) {
	    var b = this.data.charCodeAt(i);
	    if(b < 16) {
	      rval += '0';
	    }
	    rval += b.toString(16);
	  }
	  return rval;
	};

	/**
	 * Converts this buffer to a UTF-16 string (standard JavaScript string).
	 *
	 * @return a UTF-16 string.
	 */
	util$7.ByteStringBuffer.prototype.toString = function() {
	  return util$7.decodeUtf8(this.bytes());
	};

	/** End Buffer w/BinaryString backing */

	/** Buffer w/UInt8Array backing */

	/**
	 * FIXME: Experimental. Do not use yet.
	 *
	 * Constructor for an ArrayBuffer-backed byte buffer.
	 *
	 * The buffer may be constructed from a string, an ArrayBuffer, DataView, or a
	 * TypedArray.
	 *
	 * If a string is given, its encoding should be provided as an option,
	 * otherwise it will default to 'binary'. A 'binary' string is encoded such
	 * that each character is one byte in length and size.
	 *
	 * If an ArrayBuffer, DataView, or TypedArray is given, it will be used
	 * *directly* without any copying. Note that, if a write to the buffer requires
	 * more space, the buffer will allocate a new backing ArrayBuffer to
	 * accommodate. The starting read and write offsets for the buffer may be
	 * given as options.
	 *
	 * @param [b] the initial bytes for this buffer.
	 * @param options the options to use:
	 *          [readOffset] the starting read offset to use (default: 0).
	 *          [writeOffset] the starting write offset to use (default: the
	 *            length of the first parameter).
	 *          [growSize] the minimum amount, in bytes, to grow the buffer by to
	 *            accommodate writes (default: 1024).
	 *          [encoding] the encoding ('binary', 'utf8', 'utf16', 'hex') for the
	 *            first parameter, if it is a string (default: 'binary').
	 */
	function DataBuffer(b, options) {
	  // default options
	  options = options || {};

	  // pointers for read from/write to buffer
	  this.read = options.readOffset || 0;
	  this.growSize = options.growSize || 1024;

	  var isArrayBuffer = util$7.isArrayBuffer(b);
	  var isArrayBufferView = util$7.isArrayBufferView(b);
	  if(isArrayBuffer || isArrayBufferView) {
	    // use ArrayBuffer directly
	    if(isArrayBuffer) {
	      this.data = new DataView(b);
	    } else {
	      // TODO: adjust read/write offset based on the type of view
	      // or specify that this must be done in the options ... that the
	      // offsets are byte-based
	      this.data = new DataView(b.buffer, b.byteOffset, b.byteLength);
	    }
	    this.write = ('writeOffset' in options ?
	      options.writeOffset : this.data.byteLength);
	    return;
	  }

	  // initialize to empty array buffer and add any given bytes using putBytes
	  this.data = new DataView(new ArrayBuffer(0));
	  this.write = 0;

	  if(b !== null && b !== undefined) {
	    this.putBytes(b);
	  }

	  if('writeOffset' in options) {
	    this.write = options.writeOffset;
	  }
	}
	util$7.DataBuffer = DataBuffer;

	/**
	 * Gets the number of bytes in this buffer.
	 *
	 * @return the number of bytes in this buffer.
	 */
	util$7.DataBuffer.prototype.length = function() {
	  return this.write - this.read;
	};

	/**
	 * Gets whether or not this buffer is empty.
	 *
	 * @return true if this buffer is empty, false if not.
	 */
	util$7.DataBuffer.prototype.isEmpty = function() {
	  return this.length() <= 0;
	};

	/**
	 * Ensures this buffer has enough empty space to accommodate the given number
	 * of bytes. An optional parameter may be given that indicates a minimum
	 * amount to grow the buffer if necessary. If the parameter is not given,
	 * the buffer will be grown by some previously-specified default amount
	 * or heuristic.
	 *
	 * @param amount the number of bytes to accommodate.
	 * @param [growSize] the minimum amount, in bytes, to grow the buffer by if
	 *          necessary.
	 */
	util$7.DataBuffer.prototype.accommodate = function(amount, growSize) {
	  if(this.length() >= amount) {
	    return this;
	  }
	  growSize = Math.max(growSize || this.growSize, amount);

	  // grow buffer
	  var src = new Uint8Array(
	    this.data.buffer, this.data.byteOffset, this.data.byteLength);
	  var dst = new Uint8Array(this.length() + growSize);
	  dst.set(src);
	  this.data = new DataView(dst.buffer);

	  return this;
	};

	/**
	 * Puts a byte in this buffer.
	 *
	 * @param b the byte to put.
	 *
	 * @return this buffer.
	 */
	util$7.DataBuffer.prototype.putByte = function(b) {
	  this.accommodate(1);
	  this.data.setUint8(this.write++, b);
	  return this;
	};

	/**
	 * Puts a byte in this buffer N times.
	 *
	 * @param b the byte to put.
	 * @param n the number of bytes of value b to put.
	 *
	 * @return this buffer.
	 */
	util$7.DataBuffer.prototype.fillWithByte = function(b, n) {
	  this.accommodate(n);
	  for(var i = 0; i < n; ++i) {
	    this.data.setUint8(b);
	  }
	  return this;
	};

	/**
	 * Puts bytes in this buffer. The bytes may be given as a string, an
	 * ArrayBuffer, a DataView, or a TypedArray.
	 *
	 * @param bytes the bytes to put.
	 * @param [encoding] the encoding for the first parameter ('binary', 'utf8',
	 *          'utf16', 'hex'), if it is a string (default: 'binary').
	 *
	 * @return this buffer.
	 */
	util$7.DataBuffer.prototype.putBytes = function(bytes, encoding) {
	  if(util$7.isArrayBufferView(bytes)) {
	    var src = new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);
	    var len = src.byteLength - src.byteOffset;
	    this.accommodate(len);
	    var dst = new Uint8Array(this.data.buffer, this.write);
	    dst.set(src);
	    this.write += len;
	    return this;
	  }

	  if(util$7.isArrayBuffer(bytes)) {
	    var src = new Uint8Array(bytes);
	    this.accommodate(src.byteLength);
	    var dst = new Uint8Array(this.data.buffer);
	    dst.set(src, this.write);
	    this.write += src.byteLength;
	    return this;
	  }

	  // bytes is a util.DataBuffer or equivalent
	  if(bytes instanceof util$7.DataBuffer ||
	    (typeof bytes === 'object' &&
	    typeof bytes.read === 'number' && typeof bytes.write === 'number' &&
	    util$7.isArrayBufferView(bytes.data))) {
	    var src = new Uint8Array(bytes.data.byteLength, bytes.read, bytes.length());
	    this.accommodate(src.byteLength);
	    var dst = new Uint8Array(bytes.data.byteLength, this.write);
	    dst.set(src);
	    this.write += src.byteLength;
	    return this;
	  }

	  if(bytes instanceof util$7.ByteStringBuffer) {
	    // copy binary string and process as the same as a string parameter below
	    bytes = bytes.data;
	    encoding = 'binary';
	  }

	  // string conversion
	  encoding = encoding || 'binary';
	  if(typeof bytes === 'string') {
	    var view;

	    // decode from string
	    if(encoding === 'hex') {
	      this.accommodate(Math.ceil(bytes.length / 2));
	      view = new Uint8Array(this.data.buffer, this.write);
	      this.write += util$7.binary.hex.decode(bytes, view, this.write);
	      return this;
	    }
	    if(encoding === 'base64') {
	      this.accommodate(Math.ceil(bytes.length / 4) * 3);
	      view = new Uint8Array(this.data.buffer, this.write);
	      this.write += util$7.binary.base64.decode(bytes, view, this.write);
	      return this;
	    }

	    // encode text as UTF-8 bytes
	    if(encoding === 'utf8') {
	      // encode as UTF-8 then decode string as raw binary
	      bytes = util$7.encodeUtf8(bytes);
	      encoding = 'binary';
	    }

	    // decode string as raw binary
	    if(encoding === 'binary' || encoding === 'raw') {
	      // one byte per character
	      this.accommodate(bytes.length);
	      view = new Uint8Array(this.data.buffer, this.write);
	      this.write += util$7.binary.raw.decode(view);
	      return this;
	    }

	    // encode text as UTF-16 bytes
	    if(encoding === 'utf16') {
	      // two bytes per character
	      this.accommodate(bytes.length * 2);
	      view = new Uint16Array(this.data.buffer, this.write);
	      this.write += util$7.text.utf16.encode(view);
	      return this;
	    }

	    throw new Error('Invalid encoding: ' + encoding);
	  }

	  throw Error('Invalid parameter: ' + bytes);
	};

	/**
	 * Puts the given buffer into this buffer.
	 *
	 * @param buffer the buffer to put into this one.
	 *
	 * @return this buffer.
	 */
	util$7.DataBuffer.prototype.putBuffer = function(buffer) {
	  this.putBytes(buffer);
	  buffer.clear();
	  return this;
	};

	/**
	 * Puts a string into this buffer.
	 *
	 * @param str the string to put.
	 * @param [encoding] the encoding for the string (default: 'utf16').
	 *
	 * @return this buffer.
	 */
	util$7.DataBuffer.prototype.putString = function(str) {
	  return this.putBytes(str, 'utf16');
	};

	/**
	 * Puts a 16-bit integer in this buffer in big-endian order.
	 *
	 * @param i the 16-bit integer.
	 *
	 * @return this buffer.
	 */
	util$7.DataBuffer.prototype.putInt16 = function(i) {
	  this.accommodate(2);
	  this.data.setInt16(this.write, i);
	  this.write += 2;
	  return this;
	};

	/**
	 * Puts a 24-bit integer in this buffer in big-endian order.
	 *
	 * @param i the 24-bit integer.
	 *
	 * @return this buffer.
	 */
	util$7.DataBuffer.prototype.putInt24 = function(i) {
	  this.accommodate(3);
	  this.data.setInt16(this.write, i >> 8 & 0xFFFF);
	  this.data.setInt8(this.write, i >> 16 & 0xFF);
	  this.write += 3;
	  return this;
	};

	/**
	 * Puts a 32-bit integer in this buffer in big-endian order.
	 *
	 * @param i the 32-bit integer.
	 *
	 * @return this buffer.
	 */
	util$7.DataBuffer.prototype.putInt32 = function(i) {
	  this.accommodate(4);
	  this.data.setInt32(this.write, i);
	  this.write += 4;
	  return this;
	};

	/**
	 * Puts a 16-bit integer in this buffer in little-endian order.
	 *
	 * @param i the 16-bit integer.
	 *
	 * @return this buffer.
	 */
	util$7.DataBuffer.prototype.putInt16Le = function(i) {
	  this.accommodate(2);
	  this.data.setInt16(this.write, i, true);
	  this.write += 2;
	  return this;
	};

	/**
	 * Puts a 24-bit integer in this buffer in little-endian order.
	 *
	 * @param i the 24-bit integer.
	 *
	 * @return this buffer.
	 */
	util$7.DataBuffer.prototype.putInt24Le = function(i) {
	  this.accommodate(3);
	  this.data.setInt8(this.write, i >> 16 & 0xFF);
	  this.data.setInt16(this.write, i >> 8 & 0xFFFF, true);
	  this.write += 3;
	  return this;
	};

	/**
	 * Puts a 32-bit integer in this buffer in little-endian order.
	 *
	 * @param i the 32-bit integer.
	 *
	 * @return this buffer.
	 */
	util$7.DataBuffer.prototype.putInt32Le = function(i) {
	  this.accommodate(4);
	  this.data.setInt32(this.write, i, true);
	  this.write += 4;
	  return this;
	};

	/**
	 * Puts an n-bit integer in this buffer in big-endian order.
	 *
	 * @param i the n-bit integer.
	 * @param n the number of bits in the integer (8, 16, 24, or 32).
	 *
	 * @return this buffer.
	 */
	util$7.DataBuffer.prototype.putInt = function(i, n) {
	  _checkBitsParam(n);
	  this.accommodate(n / 8);
	  do {
	    n -= 8;
	    this.data.setInt8(this.write++, (i >> n) & 0xFF);
	  } while(n > 0);
	  return this;
	};

	/**
	 * Puts a signed n-bit integer in this buffer in big-endian order. Two's
	 * complement representation is used.
	 *
	 * @param i the n-bit integer.
	 * @param n the number of bits in the integer.
	 *
	 * @return this buffer.
	 */
	util$7.DataBuffer.prototype.putSignedInt = function(i, n) {
	  _checkBitsParam(n);
	  this.accommodate(n / 8);
	  if(i < 0) {
	    i += 2 << (n - 1);
	  }
	  return this.putInt(i, n);
	};

	/**
	 * Gets a byte from this buffer and advances the read pointer by 1.
	 *
	 * @return the byte.
	 */
	util$7.DataBuffer.prototype.getByte = function() {
	  return this.data.getInt8(this.read++);
	};

	/**
	 * Gets a uint16 from this buffer in big-endian order and advances the read
	 * pointer by 2.
	 *
	 * @return the uint16.
	 */
	util$7.DataBuffer.prototype.getInt16 = function() {
	  var rval = this.data.getInt16(this.read);
	  this.read += 2;
	  return rval;
	};

	/**
	 * Gets a uint24 from this buffer in big-endian order and advances the read
	 * pointer by 3.
	 *
	 * @return the uint24.
	 */
	util$7.DataBuffer.prototype.getInt24 = function() {
	  var rval = (
	    this.data.getInt16(this.read) << 8 ^
	    this.data.getInt8(this.read + 2));
	  this.read += 3;
	  return rval;
	};

	/**
	 * Gets a uint32 from this buffer in big-endian order and advances the read
	 * pointer by 4.
	 *
	 * @return the word.
	 */
	util$7.DataBuffer.prototype.getInt32 = function() {
	  var rval = this.data.getInt32(this.read);
	  this.read += 4;
	  return rval;
	};

	/**
	 * Gets a uint16 from this buffer in little-endian order and advances the read
	 * pointer by 2.
	 *
	 * @return the uint16.
	 */
	util$7.DataBuffer.prototype.getInt16Le = function() {
	  var rval = this.data.getInt16(this.read, true);
	  this.read += 2;
	  return rval;
	};

	/**
	 * Gets a uint24 from this buffer in little-endian order and advances the read
	 * pointer by 3.
	 *
	 * @return the uint24.
	 */
	util$7.DataBuffer.prototype.getInt24Le = function() {
	  var rval = (
	    this.data.getInt8(this.read) ^
	    this.data.getInt16(this.read + 1, true) << 8);
	  this.read += 3;
	  return rval;
	};

	/**
	 * Gets a uint32 from this buffer in little-endian order and advances the read
	 * pointer by 4.
	 *
	 * @return the word.
	 */
	util$7.DataBuffer.prototype.getInt32Le = function() {
	  var rval = this.data.getInt32(this.read, true);
	  this.read += 4;
	  return rval;
	};

	/**
	 * Gets an n-bit integer from this buffer in big-endian order and advances the
	 * read pointer by n/8.
	 *
	 * @param n the number of bits in the integer (8, 16, 24, or 32).
	 *
	 * @return the integer.
	 */
	util$7.DataBuffer.prototype.getInt = function(n) {
	  _checkBitsParam(n);
	  var rval = 0;
	  do {
	    // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.
	    rval = (rval << 8) + this.data.getInt8(this.read++);
	    n -= 8;
	  } while(n > 0);
	  return rval;
	};

	/**
	 * Gets a signed n-bit integer from this buffer in big-endian order, using
	 * two's complement, and advances the read pointer by n/8.
	 *
	 * @param n the number of bits in the integer (8, 16, 24, or 32).
	 *
	 * @return the integer.
	 */
	util$7.DataBuffer.prototype.getSignedInt = function(n) {
	  // getInt checks n
	  var x = this.getInt(n);
	  var max = 2 << (n - 2);
	  if(x >= max) {
	    x -= max << 1;
	  }
	  return x;
	};

	/**
	 * Reads bytes out as a binary encoded string and clears them from the
	 * buffer.
	 *
	 * @param count the number of bytes to read, undefined or null for all.
	 *
	 * @return a binary encoded string of bytes.
	 */
	util$7.DataBuffer.prototype.getBytes = function(count) {
	  // TODO: deprecate this method, it is poorly named and
	  // this.toString('binary') replaces it
	  // add a toTypedArray()/toArrayBuffer() function
	  var rval;
	  if(count) {
	    // read count bytes
	    count = Math.min(this.length(), count);
	    rval = this.data.slice(this.read, this.read + count);
	    this.read += count;
	  } else if(count === 0) {
	    rval = '';
	  } else {
	    // read all bytes, optimize to only copy when needed
	    rval = (this.read === 0) ? this.data : this.data.slice(this.read);
	    this.clear();
	  }
	  return rval;
	};

	/**
	 * Gets a binary encoded string of the bytes from this buffer without
	 * modifying the read pointer.
	 *
	 * @param count the number of bytes to get, omit to get all.
	 *
	 * @return a string full of binary encoded characters.
	 */
	util$7.DataBuffer.prototype.bytes = function(count) {
	  // TODO: deprecate this method, it is poorly named, add "getString()"
	  return (typeof(count) === 'undefined' ?
	    this.data.slice(this.read) :
	    this.data.slice(this.read, this.read + count));
	};

	/**
	 * Gets a byte at the given index without modifying the read pointer.
	 *
	 * @param i the byte index.
	 *
	 * @return the byte.
	 */
	util$7.DataBuffer.prototype.at = function(i) {
	  return this.data.getUint8(this.read + i);
	};

	/**
	 * Puts a byte at the given index without modifying the read pointer.
	 *
	 * @param i the byte index.
	 * @param b the byte to put.
	 *
	 * @return this buffer.
	 */
	util$7.DataBuffer.prototype.setAt = function(i, b) {
	  this.data.setUint8(i, b);
	  return this;
	};

	/**
	 * Gets the last byte without modifying the read pointer.
	 *
	 * @return the last byte.
	 */
	util$7.DataBuffer.prototype.last = function() {
	  return this.data.getUint8(this.write - 1);
	};

	/**
	 * Creates a copy of this buffer.
	 *
	 * @return the copy.
	 */
	util$7.DataBuffer.prototype.copy = function() {
	  return new util$7.DataBuffer(this);
	};

	/**
	 * Compacts this buffer.
	 *
	 * @return this buffer.
	 */
	util$7.DataBuffer.prototype.compact = function() {
	  if(this.read > 0) {
	    var src = new Uint8Array(this.data.buffer, this.read);
	    var dst = new Uint8Array(src.byteLength);
	    dst.set(src);
	    this.data = new DataView(dst);
	    this.write -= this.read;
	    this.read = 0;
	  }
	  return this;
	};

	/**
	 * Clears this buffer.
	 *
	 * @return this buffer.
	 */
	util$7.DataBuffer.prototype.clear = function() {
	  this.data = new DataView(new ArrayBuffer(0));
	  this.read = this.write = 0;
	  return this;
	};

	/**
	 * Shortens this buffer by triming bytes off of the end of this buffer.
	 *
	 * @param count the number of bytes to trim off.
	 *
	 * @return this buffer.
	 */
	util$7.DataBuffer.prototype.truncate = function(count) {
	  this.write = Math.max(0, this.length() - count);
	  this.read = Math.min(this.read, this.write);
	  return this;
	};

	/**
	 * Converts this buffer to a hexadecimal string.
	 *
	 * @return a hexadecimal string.
	 */
	util$7.DataBuffer.prototype.toHex = function() {
	  var rval = '';
	  for(var i = this.read; i < this.data.byteLength; ++i) {
	    var b = this.data.getUint8(i);
	    if(b < 16) {
	      rval += '0';
	    }
	    rval += b.toString(16);
	  }
	  return rval;
	};

	/**
	 * Converts this buffer to a string, using the given encoding. If no
	 * encoding is given, 'utf8' (UTF-8) is used.
	 *
	 * @param [encoding] the encoding to use: 'binary', 'utf8', 'utf16', 'hex',
	 *          'base64' (default: 'utf8').
	 *
	 * @return a string representation of the bytes in this buffer.
	 */
	util$7.DataBuffer.prototype.toString = function(encoding) {
	  var view = new Uint8Array(this.data, this.read, this.length());
	  encoding = encoding || 'utf8';

	  // encode to string
	  if(encoding === 'binary' || encoding === 'raw') {
	    return util$7.binary.raw.encode(view);
	  }
	  if(encoding === 'hex') {
	    return util$7.binary.hex.encode(view);
	  }
	  if(encoding === 'base64') {
	    return util$7.binary.base64.encode(view);
	  }

	  // decode to text
	  if(encoding === 'utf8') {
	    return util$7.text.utf8.decode(view);
	  }
	  if(encoding === 'utf16') {
	    return util$7.text.utf16.decode(view);
	  }

	  throw new Error('Invalid encoding: ' + encoding);
	};

	/** End Buffer w/UInt8Array backing */

	/**
	 * Creates a buffer that stores bytes. A value may be given to populate the
	 * buffer with data. This value can either be string of encoded bytes or a
	 * regular string of characters. When passing a string of binary encoded
	 * bytes, the encoding `raw` should be given. This is also the default. When
	 * passing a string of characters, the encoding `utf8` should be given.
	 *
	 * @param [input] a string with encoded bytes to store in the buffer.
	 * @param [encoding] (default: 'raw', other: 'utf8').
	 */
	util$7.createBuffer = function(input, encoding) {
	  // TODO: deprecate, use new ByteBuffer() instead
	  encoding = encoding || 'raw';
	  if(input !== undefined && encoding === 'utf8') {
	    input = util$7.encodeUtf8(input);
	  }
	  return new util$7.ByteBuffer(input);
	};

	/**
	 * Fills a string with a particular value. If you want the string to be a byte
	 * string, pass in String.fromCharCode(theByte).
	 *
	 * @param c the character to fill the string with, use String.fromCharCode
	 *          to fill the string with a byte value.
	 * @param n the number of characters of value c to fill with.
	 *
	 * @return the filled string.
	 */
	util$7.fillString = function(c, n) {
	  var s = '';
	  while(n > 0) {
	    if(n & 1) {
	      s += c;
	    }
	    n >>>= 1;
	    if(n > 0) {
	      c += c;
	    }
	  }
	  return s;
	};

	/**
	 * Performs a per byte XOR between two byte strings and returns the result as a
	 * string of bytes.
	 *
	 * @param s1 first string of bytes.
	 * @param s2 second string of bytes.
	 * @param n the number of bytes to XOR.
	 *
	 * @return the XOR'd result.
	 */
	util$7.xorBytes = function(s1, s2, n) {
	  var s3 = '';
	  var b = '';
	  var t = '';
	  var i = 0;
	  var c = 0;
	  for(; n > 0; --n, ++i) {
	    b = s1.charCodeAt(i) ^ s2.charCodeAt(i);
	    if(c >= 10) {
	      s3 += t;
	      t = '';
	      c = 0;
	    }
	    t += String.fromCharCode(b);
	    ++c;
	  }
	  s3 += t;
	  return s3;
	};

	/**
	 * Converts a hex string into a 'binary' encoded string of bytes.
	 *
	 * @param hex the hexadecimal string to convert.
	 *
	 * @return the binary-encoded string of bytes.
	 */
	util$7.hexToBytes = function(hex) {
	  // TODO: deprecate: "Deprecated. Use util.binary.hex.decode instead."
	  var rval = '';
	  var i = 0;
	  if(hex.length & 1 == 1) {
	    // odd number of characters, convert first character alone
	    i = 1;
	    rval += String.fromCharCode(parseInt(hex[0], 16));
	  }
	  // convert 2 characters (1 byte) at a time
	  for(; i < hex.length; i += 2) {
	    rval += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
	  }
	  return rval;
	};

	/**
	 * Converts a 'binary' encoded string of bytes to hex.
	 *
	 * @param bytes the byte string to convert.
	 *
	 * @return the string of hexadecimal characters.
	 */
	util$7.bytesToHex = function(bytes) {
	  // TODO: deprecate: "Deprecated. Use util.binary.hex.encode instead."
	  return util$7.createBuffer(bytes).toHex();
	};

	/**
	 * Converts an 32-bit integer to 4-big-endian byte string.
	 *
	 * @param i the integer.
	 *
	 * @return the byte string.
	 */
	util$7.int32ToBytes = function(i) {
	  return (
	    String.fromCharCode(i >> 24 & 0xFF) +
	    String.fromCharCode(i >> 16 & 0xFF) +
	    String.fromCharCode(i >> 8 & 0xFF) +
	    String.fromCharCode(i & 0xFF));
	};

	// base64 characters, reverse mapping
	var _base64 =
	  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	var _base64Idx = [
	/*43 -43 = 0*/
	/*'+',  1,  2,  3,'/' */
	   62, -1, -1, -1, 63,

	/*'0','1','2','3','4','5','6','7','8','9' */
	   52, 53, 54, 55, 56, 57, 58, 59, 60, 61,

	/*15, 16, 17,'=', 19, 20, 21 */
	  -1, -1, -1, 64, -1, -1, -1,

	/*65 - 43 = 22*/
	/*'A','B','C','D','E','F','G','H','I','J','K','L','M', */
	   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,

	/*'N','O','P','Q','R','S','T','U','V','W','X','Y','Z' */
	   13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,

	/*91 - 43 = 48 */
	/*48, 49, 50, 51, 52, 53 */
	  -1, -1, -1, -1, -1, -1,

	/*97 - 43 = 54*/
	/*'a','b','c','d','e','f','g','h','i','j','k','l','m' */
	   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,

	/*'n','o','p','q','r','s','t','u','v','w','x','y','z' */
	   39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51
	];

	// base58 characters (Bitcoin alphabet)
	var _base58 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';

	/**
	 * Base64 encodes a 'binary' encoded string of bytes.
	 *
	 * @param input the binary encoded string of bytes to base64-encode.
	 * @param maxline the maximum number of encoded characters per line to use,
	 *          defaults to none.
	 *
	 * @return the base64-encoded output.
	 */
	util$7.encode64 = function(input, maxline) {
	  // TODO: deprecate: "Deprecated. Use util.binary.base64.encode instead."
	  var line = '';
	  var output = '';
	  var chr1, chr2, chr3;
	  var i = 0;
	  while(i < input.length) {
	    chr1 = input.charCodeAt(i++);
	    chr2 = input.charCodeAt(i++);
	    chr3 = input.charCodeAt(i++);

	    // encode 4 character group
	    line += _base64.charAt(chr1 >> 2);
	    line += _base64.charAt(((chr1 & 3) << 4) | (chr2 >> 4));
	    if(isNaN(chr2)) {
	      line += '==';
	    } else {
	      line += _base64.charAt(((chr2 & 15) << 2) | (chr3 >> 6));
	      line += isNaN(chr3) ? '=' : _base64.charAt(chr3 & 63);
	    }

	    if(maxline && line.length > maxline) {
	      output += line.substr(0, maxline) + '\r\n';
	      line = line.substr(maxline);
	    }
	  }
	  output += line;
	  return output;
	};

	/**
	 * Base64 decodes a string into a 'binary' encoded string of bytes.
	 *
	 * @param input the base64-encoded input.
	 *
	 * @return the binary encoded string.
	 */
	util$7.decode64 = function(input) {
	  // TODO: deprecate: "Deprecated. Use util.binary.base64.decode instead."

	  // remove all non-base64 characters
	  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');

	  var output = '';
	  var enc1, enc2, enc3, enc4;
	  var i = 0;

	  while(i < input.length) {
	    enc1 = _base64Idx[input.charCodeAt(i++) - 43];
	    enc2 = _base64Idx[input.charCodeAt(i++) - 43];
	    enc3 = _base64Idx[input.charCodeAt(i++) - 43];
	    enc4 = _base64Idx[input.charCodeAt(i++) - 43];

	    output += String.fromCharCode((enc1 << 2) | (enc2 >> 4));
	    if(enc3 !== 64) {
	      // decoded at least 2 bytes
	      output += String.fromCharCode(((enc2 & 15) << 4) | (enc3 >> 2));
	      if(enc4 !== 64) {
	        // decoded 3 bytes
	        output += String.fromCharCode(((enc3 & 3) << 6) | enc4);
	      }
	    }
	  }

	  return output;
	};

	/**
	 * Encodes the given string of characters (a standard JavaScript
	 * string) as a binary encoded string where the bytes represent
	 * a UTF-8 encoded string of characters. Non-ASCII characters will be
	 * encoded as multiple bytes according to UTF-8.
	 *
	 * @param str a standard string of characters to encode.
	 *
	 * @return the binary encoded string.
	 */
	util$7.encodeUtf8 = function(str) {
	  return unescape(encodeURIComponent(str));
	};

	/**
	 * Decodes a binary encoded string that contains bytes that
	 * represent a UTF-8 encoded string of characters -- into a
	 * string of characters (a standard JavaScript string).
	 *
	 * @param str the binary encoded string to decode.
	 *
	 * @return the resulting standard string of characters.
	 */
	util$7.decodeUtf8 = function(str) {
	  return decodeURIComponent(escape(str));
	};

	// binary encoding/decoding tools
	// FIXME: Experimental. Do not use yet.
	util$7.binary = {
	  raw: {},
	  hex: {},
	  base64: {},
	  base58: {},
	  baseN : {
	    encode: baseN.encode,
	    decode: baseN.decode
	  }
	};

	/**
	 * Encodes a Uint8Array as a binary-encoded string. This encoding uses
	 * a value between 0 and 255 for each character.
	 *
	 * @param bytes the Uint8Array to encode.
	 *
	 * @return the binary-encoded string.
	 */
	util$7.binary.raw.encode = function(bytes) {
	  return String.fromCharCode.apply(null, bytes);
	};

	/**
	 * Decodes a binary-encoded string to a Uint8Array. This encoding uses
	 * a value between 0 and 255 for each character.
	 *
	 * @param str the binary-encoded string to decode.
	 * @param [output] an optional Uint8Array to write the output to; if it
	 *          is too small, an exception will be thrown.
	 * @param [offset] the start offset for writing to the output (default: 0).
	 *
	 * @return the Uint8Array or the number of bytes written if output was given.
	 */
	util$7.binary.raw.decode = function(str, output, offset) {
	  var out = output;
	  if(!out) {
	    out = new Uint8Array(str.length);
	  }
	  offset = offset || 0;
	  var j = offset;
	  for(var i = 0; i < str.length; ++i) {
	    out[j++] = str.charCodeAt(i);
	  }
	  return output ? (j - offset) : out;
	};

	/**
	 * Encodes a 'binary' string, ArrayBuffer, DataView, TypedArray, or
	 * ByteBuffer as a string of hexadecimal characters.
	 *
	 * @param bytes the bytes to convert.
	 *
	 * @return the string of hexadecimal characters.
	 */
	util$7.binary.hex.encode = util$7.bytesToHex;

	/**
	 * Decodes a hex-encoded string to a Uint8Array.
	 *
	 * @param hex the hexadecimal string to convert.
	 * @param [output] an optional Uint8Array to write the output to; if it
	 *          is too small, an exception will be thrown.
	 * @param [offset] the start offset for writing to the output (default: 0).
	 *
	 * @return the Uint8Array or the number of bytes written if output was given.
	 */
	util$7.binary.hex.decode = function(hex, output, offset) {
	  var out = output;
	  if(!out) {
	    out = new Uint8Array(Math.ceil(hex.length / 2));
	  }
	  offset = offset || 0;
	  var i = 0, j = offset;
	  if(hex.length & 1) {
	    // odd number of characters, convert first character alone
	    i = 1;
	    out[j++] = parseInt(hex[0], 16);
	  }
	  // convert 2 characters (1 byte) at a time
	  for(; i < hex.length; i += 2) {
	    out[j++] = parseInt(hex.substr(i, 2), 16);
	  }
	  return output ? (j - offset) : out;
	};

	/**
	 * Base64-encodes a Uint8Array.
	 *
	 * @param input the Uint8Array to encode.
	 * @param maxline the maximum number of encoded characters per line to use,
	 *          defaults to none.
	 *
	 * @return the base64-encoded output string.
	 */
	util$7.binary.base64.encode = function(input, maxline) {
	  var line = '';
	  var output = '';
	  var chr1, chr2, chr3;
	  var i = 0;
	  while(i < input.byteLength) {
	    chr1 = input[i++];
	    chr2 = input[i++];
	    chr3 = input[i++];

	    // encode 4 character group
	    line += _base64.charAt(chr1 >> 2);
	    line += _base64.charAt(((chr1 & 3) << 4) | (chr2 >> 4));
	    if(isNaN(chr2)) {
	      line += '==';
	    } else {
	      line += _base64.charAt(((chr2 & 15) << 2) | (chr3 >> 6));
	      line += isNaN(chr3) ? '=' : _base64.charAt(chr3 & 63);
	    }

	    if(maxline && line.length > maxline) {
	      output += line.substr(0, maxline) + '\r\n';
	      line = line.substr(maxline);
	    }
	  }
	  output += line;
	  return output;
	};

	/**
	 * Decodes a base64-encoded string to a Uint8Array.
	 *
	 * @param input the base64-encoded input string.
	 * @param [output] an optional Uint8Array to write the output to; if it
	 *          is too small, an exception will be thrown.
	 * @param [offset] the start offset for writing to the output (default: 0).
	 *
	 * @return the Uint8Array or the number of bytes written if output was given.
	 */
	util$7.binary.base64.decode = function(input, output, offset) {
	  var out = output;
	  if(!out) {
	    out = new Uint8Array(Math.ceil(input.length / 4) * 3);
	  }

	  // remove all non-base64 characters
	  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');

	  offset = offset || 0;
	  var enc1, enc2, enc3, enc4;
	  var i = 0, j = offset;

	  while(i < input.length) {
	    enc1 = _base64Idx[input.charCodeAt(i++) - 43];
	    enc2 = _base64Idx[input.charCodeAt(i++) - 43];
	    enc3 = _base64Idx[input.charCodeAt(i++) - 43];
	    enc4 = _base64Idx[input.charCodeAt(i++) - 43];

	    out[j++] = (enc1 << 2) | (enc2 >> 4);
	    if(enc3 !== 64) {
	      // decoded at least 2 bytes
	      out[j++] = ((enc2 & 15) << 4) | (enc3 >> 2);
	      if(enc4 !== 64) {
	        // decoded 3 bytes
	        out[j++] = ((enc3 & 3) << 6) | enc4;
	      }
	    }
	  }

	  // make sure result is the exact decoded length
	  return output ? (j - offset) : out.subarray(0, j);
	};

	// add support for base58 encoding/decoding with Bitcoin alphabet
	util$7.binary.base58.encode = function(input, maxline) {
	  return util$7.binary.baseN.encode(input, _base58, maxline);
	};
	util$7.binary.base58.decode = function(input, maxline) {
	  return util$7.binary.baseN.decode(input, _base58, maxline);
	};

	// text encoding/decoding tools
	// FIXME: Experimental. Do not use yet.
	util$7.text = {
	  utf8: {},
	  utf16: {}
	};

	/**
	 * Encodes the given string as UTF-8 in a Uint8Array.
	 *
	 * @param str the string to encode.
	 * @param [output] an optional Uint8Array to write the output to; if it
	 *          is too small, an exception will be thrown.
	 * @param [offset] the start offset for writing to the output (default: 0).
	 *
	 * @return the Uint8Array or the number of bytes written if output was given.
	 */
	util$7.text.utf8.encode = function(str, output, offset) {
	  str = util$7.encodeUtf8(str);
	  var out = output;
	  if(!out) {
	    out = new Uint8Array(str.length);
	  }
	  offset = offset || 0;
	  var j = offset;
	  for(var i = 0; i < str.length; ++i) {
	    out[j++] = str.charCodeAt(i);
	  }
	  return output ? (j - offset) : out;
	};

	/**
	 * Decodes the UTF-8 contents from a Uint8Array.
	 *
	 * @param bytes the Uint8Array to decode.
	 *
	 * @return the resulting string.
	 */
	util$7.text.utf8.decode = function(bytes) {
	  return util$7.decodeUtf8(String.fromCharCode.apply(null, bytes));
	};

	/**
	 * Encodes the given string as UTF-16 in a Uint8Array.
	 *
	 * @param str the string to encode.
	 * @param [output] an optional Uint8Array to write the output to; if it
	 *          is too small, an exception will be thrown.
	 * @param [offset] the start offset for writing to the output (default: 0).
	 *
	 * @return the Uint8Array or the number of bytes written if output was given.
	 */
	util$7.text.utf16.encode = function(str, output, offset) {
	  var out = output;
	  if(!out) {
	    out = new Uint8Array(str.length * 2);
	  }
	  var view = new Uint16Array(out.buffer);
	  offset = offset || 0;
	  var j = offset;
	  var k = offset;
	  for(var i = 0; i < str.length; ++i) {
	    view[k++] = str.charCodeAt(i);
	    j += 2;
	  }
	  return output ? (j - offset) : out;
	};

	/**
	 * Decodes the UTF-16 contents from a Uint8Array.
	 *
	 * @param bytes the Uint8Array to decode.
	 *
	 * @return the resulting string.
	 */
	util$7.text.utf16.decode = function(bytes) {
	  return String.fromCharCode.apply(null, new Uint16Array(bytes.buffer));
	};

	/**
	 * Deflates the given data using a flash interface.
	 *
	 * @param api the flash interface.
	 * @param bytes the data.
	 * @param raw true to return only raw deflate data, false to include zlib
	 *          header and trailer.
	 *
	 * @return the deflated data as a string.
	 */
	util$7.deflate = function(api, bytes, raw) {
	  bytes = util$7.decode64(api.deflate(util$7.encode64(bytes)).rval);

	  // strip zlib header and trailer if necessary
	  if(raw) {
	    // zlib header is 2 bytes (CMF,FLG) where FLG indicates that
	    // there is a 4-byte DICT (alder-32) block before the data if
	    // its 5th bit is set
	    var start = 2;
	    var flg = bytes.charCodeAt(1);
	    if(flg & 0x20) {
	      start = 6;
	    }
	    // zlib trailer is 4 bytes of adler-32
	    bytes = bytes.substring(start, bytes.length - 4);
	  }

	  return bytes;
	};

	/**
	 * Inflates the given data using a flash interface.
	 *
	 * @param api the flash interface.
	 * @param bytes the data.
	 * @param raw true if the incoming data has no zlib header or trailer and is
	 *          raw DEFLATE data.
	 *
	 * @return the inflated data as a string, null on error.
	 */
	util$7.inflate = function(api, bytes, raw) {
	  // TODO: add zlib header and trailer if necessary/possible
	  var rval = api.inflate(util$7.encode64(bytes)).rval;
	  return (rval === null) ? null : util$7.decode64(rval);
	};

	/**
	 * Sets a storage object.
	 *
	 * @param api the storage interface.
	 * @param id the storage ID to use.
	 * @param obj the storage object, null to remove.
	 */
	var _setStorageObject = function(api, id, obj) {
	  if(!api) {
	    throw new Error('WebStorage not available.');
	  }

	  var rval;
	  if(obj === null) {
	    rval = api.removeItem(id);
	  } else {
	    // json-encode and base64-encode object
	    obj = util$7.encode64(JSON.stringify(obj));
	    rval = api.setItem(id, obj);
	  }

	  // handle potential flash error
	  if(typeof(rval) !== 'undefined' && rval.rval !== true) {
	    var error = new Error(rval.error.message);
	    error.id = rval.error.id;
	    error.name = rval.error.name;
	    throw error;
	  }
	};

	/**
	 * Gets a storage object.
	 *
	 * @param api the storage interface.
	 * @param id the storage ID to use.
	 *
	 * @return the storage object entry or null if none exists.
	 */
	var _getStorageObject = function(api, id) {
	  if(!api) {
	    throw new Error('WebStorage not available.');
	  }

	  // get the existing entry
	  var rval = api.getItem(id);

	  /* Note: We check api.init because we can't do (api == localStorage)
	    on IE because of "Class doesn't support Automation" exception. Only
	    the flash api has an init method so this works too, but we need a
	    better solution in the future. */

	  // flash returns item wrapped in an object, handle special case
	  if(api.init) {
	    if(rval.rval === null) {
	      if(rval.error) {
	        var error = new Error(rval.error.message);
	        error.id = rval.error.id;
	        error.name = rval.error.name;
	        throw error;
	      }
	      // no error, but also no item
	      rval = null;
	    } else {
	      rval = rval.rval;
	    }
	  }

	  // handle decoding
	  if(rval !== null) {
	    // base64-decode and json-decode data
	    rval = JSON.parse(util$7.decode64(rval));
	  }

	  return rval;
	};

	/**
	 * Stores an item in local storage.
	 *
	 * @param api the storage interface.
	 * @param id the storage ID to use.
	 * @param key the key for the item.
	 * @param data the data for the item (any javascript object/primitive).
	 */
	var _setItem = function(api, id, key, data) {
	  // get storage object
	  var obj = _getStorageObject(api, id);
	  if(obj === null) {
	    // create a new storage object
	    obj = {};
	  }
	  // update key
	  obj[key] = data;

	  // set storage object
	  _setStorageObject(api, id, obj);
	};

	/**
	 * Gets an item from local storage.
	 *
	 * @param api the storage interface.
	 * @param id the storage ID to use.
	 * @param key the key for the item.
	 *
	 * @return the item.
	 */
	var _getItem = function(api, id, key) {
	  // get storage object
	  var rval = _getStorageObject(api, id);
	  if(rval !== null) {
	    // return data at key
	    rval = (key in rval) ? rval[key] : null;
	  }

	  return rval;
	};

	/**
	 * Removes an item from local storage.
	 *
	 * @param api the storage interface.
	 * @param id the storage ID to use.
	 * @param key the key for the item.
	 */
	var _removeItem = function(api, id, key) {
	  // get storage object
	  var obj = _getStorageObject(api, id);
	  if(obj !== null && key in obj) {
	    // remove key
	    delete obj[key];

	    // see if entry has no keys remaining
	    var empty = true;
	    for(var prop in obj) {
	      empty = false;
	      break;
	    }
	    if(empty) {
	      // remove entry entirely if no keys are left
	      obj = null;
	    }

	    // set storage object
	    _setStorageObject(api, id, obj);
	  }
	};

	/**
	 * Clears the local disk storage identified by the given ID.
	 *
	 * @param api the storage interface.
	 * @param id the storage ID to use.
	 */
	var _clearItems = function(api, id) {
	  _setStorageObject(api, id, null);
	};

	/**
	 * Calls a storage function.
	 *
	 * @param func the function to call.
	 * @param args the arguments for the function.
	 * @param location the location argument.
	 *
	 * @return the return value from the function.
	 */
	var _callStorageFunction = function(func, args, location) {
	  var rval = null;

	  // default storage types
	  if(typeof(location) === 'undefined') {
	    location = ['web', 'flash'];
	  }

	  // apply storage types in order of preference
	  var type;
	  var done = false;
	  var exception = null;
	  for(var idx in location) {
	    type = location[idx];
	    try {
	      if(type === 'flash' || type === 'both') {
	        if(args[0] === null) {
	          throw new Error('Flash local storage not available.');
	        }
	        rval = func.apply(this, args);
	        done = (type === 'flash');
	      }
	      if(type === 'web' || type === 'both') {
	        args[0] = localStorage;
	        rval = func.apply(this, args);
	        done = true;
	      }
	    } catch(ex) {
	      exception = ex;
	    }
	    if(done) {
	      break;
	    }
	  }

	  if(!done) {
	    throw exception;
	  }

	  return rval;
	};

	/**
	 * Stores an item on local disk.
	 *
	 * The available types of local storage include 'flash', 'web', and 'both'.
	 *
	 * The type 'flash' refers to flash local storage (SharedObject). In order
	 * to use flash local storage, the 'api' parameter must be valid. The type
	 * 'web' refers to WebStorage, if supported by the browser. The type 'both'
	 * refers to storing using both 'flash' and 'web', not just one or the
	 * other.
	 *
	 * The location array should list the storage types to use in order of
	 * preference:
	 *
	 * ['flash']: flash only storage
	 * ['web']: web only storage
	 * ['both']: try to store in both
	 * ['flash','web']: store in flash first, but if not available, 'web'
	 * ['web','flash']: store in web first, but if not available, 'flash'
	 *
	 * The location array defaults to: ['web', 'flash']
	 *
	 * @param api the flash interface, null to use only WebStorage.
	 * @param id the storage ID to use.
	 * @param key the key for the item.
	 * @param data the data for the item (any javascript object/primitive).
	 * @param location an array with the preferred types of storage to use.
	 */
	util$7.setItem = function(api, id, key, data, location) {
	  _callStorageFunction(_setItem, arguments, location);
	};

	/**
	 * Gets an item on local disk.
	 *
	 * Set setItem() for details on storage types.
	 *
	 * @param api the flash interface, null to use only WebStorage.
	 * @param id the storage ID to use.
	 * @param key the key for the item.
	 * @param location an array with the preferred types of storage to use.
	 *
	 * @return the item.
	 */
	util$7.getItem = function(api, id, key, location) {
	  return _callStorageFunction(_getItem, arguments, location);
	};

	/**
	 * Removes an item on local disk.
	 *
	 * Set setItem() for details on storage types.
	 *
	 * @param api the flash interface.
	 * @param id the storage ID to use.
	 * @param key the key for the item.
	 * @param location an array with the preferred types of storage to use.
	 */
	util$7.removeItem = function(api, id, key, location) {
	  _callStorageFunction(_removeItem, arguments, location);
	};

	/**
	 * Clears the local disk storage identified by the given ID.
	 *
	 * Set setItem() for details on storage types.
	 *
	 * @param api the flash interface if flash is available.
	 * @param id the storage ID to use.
	 * @param location an array with the preferred types of storage to use.
	 */
	util$7.clearItems = function(api, id, location) {
	  _callStorageFunction(_clearItems, arguments, location);
	};

	/**
	 * Check if an object is empty.
	 *
	 * Taken from:
	 * http://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object-from-json/679937#679937
	 *
	 * @param object the object to check.
	 */
	util$7.isEmpty = function(obj) {
	  for(var prop in obj) {
	    if(obj.hasOwnProperty(prop)) {
	      return false;
	    }
	  }
	  return true;
	};

	/**
	 * Format with simple printf-style interpolation.
	 *
	 * %%: literal '%'
	 * %s,%o: convert next argument into a string.
	 *
	 * @param format the string to format.
	 * @param ... arguments to interpolate into the format string.
	 */
	util$7.format = function(format) {
	  var re = /%./g;
	  // current match
	  var match;
	  // current part
	  var part;
	  // current arg index
	  var argi = 0;
	  // collected parts to recombine later
	  var parts = [];
	  // last index found
	  var last = 0;
	  // loop while matches remain
	  while((match = re.exec(format))) {
	    part = format.substring(last, re.lastIndex - 2);
	    // don't add empty strings (ie, parts between %s%s)
	    if(part.length > 0) {
	      parts.push(part);
	    }
	    last = re.lastIndex;
	    // switch on % code
	    var code = match[0][1];
	    switch(code) {
	    case 's':
	    case 'o':
	      // check if enough arguments were given
	      if(argi < arguments.length) {
	        parts.push(arguments[argi++ + 1]);
	      } else {
	        parts.push('<?>');
	      }
	      break;
	    // FIXME: do proper formating for numbers, etc
	    //case 'f':
	    //case 'd':
	    case '%':
	      parts.push('%');
	      break;
	    default:
	      parts.push('<%' + code + '?>');
	    }
	  }
	  // add trailing part of format string
	  parts.push(format.substring(last));
	  return parts.join('');
	};

	/**
	 * Formats a number.
	 *
	 * http://snipplr.com/view/5945/javascript-numberformat--ported-from-php/
	 */
	util$7.formatNumber = function(number, decimals, dec_point, thousands_sep) {
	  // http://kevin.vanzonneveld.net
	  // +   original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
	  // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
	  // +     bugfix by: Michael White (http://crestidg.com)
	  // +     bugfix by: Benjamin Lupton
	  // +     bugfix by: Allan Jensen (http://www.winternet.no)
	  // +    revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
	  // *     example 1: number_format(1234.5678, 2, '.', '');
	  // *     returns 1: 1234.57

	  var n = number, c = isNaN(decimals = Math.abs(decimals)) ? 2 : decimals;
	  var d = dec_point === undefined ? ',' : dec_point;
	  var t = thousands_sep === undefined ?
	   '.' : thousands_sep, s = n < 0 ? '-' : '';
	  var i = parseInt((n = Math.abs(+n || 0).toFixed(c)), 10) + '';
	  var j = (i.length > 3) ? i.length % 3 : 0;
	  return s + (j ? i.substr(0, j) + t : '') +
	    i.substr(j).replace(/(\d{3})(?=\d)/g, '$1' + t) +
	    (c ? d + Math.abs(n - i).toFixed(c).slice(2) : '');
	};

	/**
	 * Formats a byte size.
	 *
	 * http://snipplr.com/view/5949/format-humanize-file-byte-size-presentation-in-javascript/
	 */
	util$7.formatSize = function(size) {
	  if(size >= 1073741824) {
	    size = util$7.formatNumber(size / 1073741824, 2, '.', '') + ' GiB';
	  } else if(size >= 1048576) {
	    size = util$7.formatNumber(size / 1048576, 2, '.', '') + ' MiB';
	  } else if(size >= 1024) {
	    size = util$7.formatNumber(size / 1024, 0) + ' KiB';
	  } else {
	    size = util$7.formatNumber(size, 0) + ' bytes';
	  }
	  return size;
	};

	/**
	 * Converts an IPv4 or IPv6 string representation into bytes (in network order).
	 *
	 * @param ip the IPv4 or IPv6 address to convert.
	 *
	 * @return the 4-byte IPv6 or 16-byte IPv6 address or null if the address can't
	 *         be parsed.
	 */
	util$7.bytesFromIP = function(ip) {
	  if(ip.indexOf('.') !== -1) {
	    return util$7.bytesFromIPv4(ip);
	  }
	  if(ip.indexOf(':') !== -1) {
	    return util$7.bytesFromIPv6(ip);
	  }
	  return null;
	};

	/**
	 * Converts an IPv4 string representation into bytes (in network order).
	 *
	 * @param ip the IPv4 address to convert.
	 *
	 * @return the 4-byte address or null if the address can't be parsed.
	 */
	util$7.bytesFromIPv4 = function(ip) {
	  ip = ip.split('.');
	  if(ip.length !== 4) {
	    return null;
	  }
	  var b = util$7.createBuffer();
	  for(var i = 0; i < ip.length; ++i) {
	    var num = parseInt(ip[i], 10);
	    if(isNaN(num)) {
	      return null;
	    }
	    b.putByte(num);
	  }
	  return b.getBytes();
	};

	/**
	 * Converts an IPv6 string representation into bytes (in network order).
	 *
	 * @param ip the IPv6 address to convert.
	 *
	 * @return the 16-byte address or null if the address can't be parsed.
	 */
	util$7.bytesFromIPv6 = function(ip) {
	  var blanks = 0;
	  ip = ip.split(':').filter(function(e) {
	    if(e.length === 0) ++blanks;
	    return true;
	  });
	  var zeros = (8 - ip.length + blanks) * 2;
	  var b = util$7.createBuffer();
	  for(var i = 0; i < 8; ++i) {
	    if(!ip[i] || ip[i].length === 0) {
	      b.fillWithByte(0, zeros);
	      zeros = 0;
	      continue;
	    }
	    var bytes = util$7.hexToBytes(ip[i]);
	    if(bytes.length < 2) {
	      b.putByte(0);
	    }
	    b.putBytes(bytes);
	  }
	  return b.getBytes();
	};

	/**
	 * Converts 4-bytes into an IPv4 string representation or 16-bytes into
	 * an IPv6 string representation. The bytes must be in network order.
	 *
	 * @param bytes the bytes to convert.
	 *
	 * @return the IPv4 or IPv6 string representation if 4 or 16 bytes,
	 *         respectively, are given, otherwise null.
	 */
	util$7.bytesToIP = function(bytes) {
	  if(bytes.length === 4) {
	    return util$7.bytesToIPv4(bytes);
	  }
	  if(bytes.length === 16) {
	    return util$7.bytesToIPv6(bytes);
	  }
	  return null;
	};

	/**
	 * Converts 4-bytes into an IPv4 string representation. The bytes must be
	 * in network order.
	 *
	 * @param bytes the bytes to convert.
	 *
	 * @return the IPv4 string representation or null for an invalid # of bytes.
	 */
	util$7.bytesToIPv4 = function(bytes) {
	  if(bytes.length !== 4) {
	    return null;
	  }
	  var ip = [];
	  for(var i = 0; i < bytes.length; ++i) {
	    ip.push(bytes.charCodeAt(i));
	  }
	  return ip.join('.');
	};

	/**
	 * Converts 16-bytes into an IPv16 string representation. The bytes must be
	 * in network order.
	 *
	 * @param bytes the bytes to convert.
	 *
	 * @return the IPv16 string representation or null for an invalid # of bytes.
	 */
	util$7.bytesToIPv6 = function(bytes) {
	  if(bytes.length !== 16) {
	    return null;
	  }
	  var ip = [];
	  var zeroGroups = [];
	  var zeroMaxGroup = 0;
	  for(var i = 0; i < bytes.length; i += 2) {
	    var hex = util$7.bytesToHex(bytes[i] + bytes[i + 1]);
	    // canonicalize zero representation
	    while(hex[0] === '0' && hex !== '0') {
	      hex = hex.substr(1);
	    }
	    if(hex === '0') {
	      var last = zeroGroups[zeroGroups.length - 1];
	      var idx = ip.length;
	      if(!last || idx !== last.end + 1) {
	        zeroGroups.push({start: idx, end: idx});
	      } else {
	        last.end = idx;
	        if((last.end - last.start) >
	          (zeroGroups[zeroMaxGroup].end - zeroGroups[zeroMaxGroup].start)) {
	          zeroMaxGroup = zeroGroups.length - 1;
	        }
	      }
	    }
	    ip.push(hex);
	  }
	  if(zeroGroups.length > 0) {
	    var group = zeroGroups[zeroMaxGroup];
	    // only shorten group of length > 0
	    if(group.end - group.start > 0) {
	      ip.splice(group.start, group.end - group.start + 1, '');
	      if(group.start === 0) {
	        ip.unshift('');
	      }
	      if(group.end === 7) {
	        ip.push('');
	      }
	    }
	  }
	  return ip.join(':');
	};

	/**
	 * Estimates the number of processes that can be run concurrently. If
	 * creating Web Workers, keep in mind that the main JavaScript process needs
	 * its own core.
	 *
	 * @param options the options to use:
	 *          update true to force an update (not use the cached value).
	 * @param callback(err, max) called once the operation completes.
	 */
	util$7.estimateCores = function(options, callback) {
	  if(typeof options === 'function') {
	    callback = options;
	    options = {};
	  }
	  options = options || {};
	  if('cores' in util$7 && !options.update) {
	    return callback(null, util$7.cores);
	  }
	  if(typeof navigator !== 'undefined' &&
	    'hardwareConcurrency' in navigator &&
	    navigator.hardwareConcurrency > 0) {
	    util$7.cores = navigator.hardwareConcurrency;
	    return callback(null, util$7.cores);
	  }
	  if(typeof Worker === 'undefined') {
	    // workers not available
	    util$7.cores = 1;
	    return callback(null, util$7.cores);
	  }
	  if(typeof Blob === 'undefined') {
	    // can't estimate, default to 2
	    util$7.cores = 2;
	    return callback(null, util$7.cores);
	  }

	  // create worker concurrency estimation code as blob
	  var blobUrl = URL.createObjectURL(new Blob(['(',
	    function() {
	      self.addEventListener('message', function(e) {
	        // run worker for 4 ms
	        var st = Date.now();
	        var et = st + 4;
	        self.postMessage({st: st, et: et});
	      });
	    }.toString(),
	  ')()'], {type: 'application/javascript'}));

	  // take 5 samples using 16 workers
	  sample([], 5, 16);

	  function sample(max, samples, numWorkers) {
	    if(samples === 0) {
	      // get overlap average
	      var avg = Math.floor(max.reduce(function(avg, x) {
	        return avg + x;
	      }, 0) / max.length);
	      util$7.cores = Math.max(1, avg);
	      URL.revokeObjectURL(blobUrl);
	      return callback(null, util$7.cores);
	    }
	    map(numWorkers, function(err, results) {
	      max.push(reduce(numWorkers, results));
	      sample(max, samples - 1, numWorkers);
	    });
	  }

	  function map(numWorkers, callback) {
	    var workers = [];
	    var results = [];
	    for(var i = 0; i < numWorkers; ++i) {
	      var worker = new Worker(blobUrl);
	      worker.addEventListener('message', function(e) {
	        results.push(e.data);
	        if(results.length === numWorkers) {
	          for(var i = 0; i < numWorkers; ++i) {
	            workers[i].terminate();
	          }
	          callback(null, results);
	        }
	      });
	      workers.push(worker);
	    }
	    for(var i = 0; i < numWorkers; ++i) {
	      workers[i].postMessage(i);
	    }
	  }

	  function reduce(numWorkers, results) {
	    // find overlapping time windows
	    var overlaps = [];
	    for(var n = 0; n < numWorkers; ++n) {
	      var r1 = results[n];
	      var overlap = overlaps[n] = [];
	      for(var i = 0; i < numWorkers; ++i) {
	        if(n === i) {
	          continue;
	        }
	        var r2 = results[i];
	        if((r1.st > r2.st && r1.st < r2.et) ||
	          (r2.st > r1.st && r2.st < r1.et)) {
	          overlap.push(i);
	        }
	      }
	    }
	    // get maximum overlaps ... don't include overlapping worker itself
	    // as the main JS process was also being scheduled during the work and
	    // would have to be subtracted from the estimate anyway
	    return overlaps.reduce(function(max, overlap) {
	      return Math.max(max, overlap.length);
	    }, 0);
	  }
	};

	/**
	 * Object IDs for ASN.1.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
	 */

	var forge$x = forge$z;

	forge$x.pki = forge$x.pki || {};
	var oids$2 = forge$x.pki.oids = forge$x.oids = forge$x.oids || {};

	// set id to name mapping and name to id mapping
	function _IN(id, name) {
	  oids$2[id] = name;
	  oids$2[name] = id;
	}
	// set id to name mapping only
	function _I_(id, name) {
	  oids$2[id] = name;
	}

	// algorithm OIDs
	_IN('1.2.840.113549.1.1.1', 'rsaEncryption');
	// Note: md2 & md4 not implemented
	//_IN('1.2.840.113549.1.1.2', 'md2WithRSAEncryption');
	//_IN('1.2.840.113549.1.1.3', 'md4WithRSAEncryption');
	_IN('1.2.840.113549.1.1.4', 'md5WithRSAEncryption');
	_IN('1.2.840.113549.1.1.5', 'sha1WithRSAEncryption');
	_IN('1.2.840.113549.1.1.7', 'RSAES-OAEP');
	_IN('1.2.840.113549.1.1.8', 'mgf1');
	_IN('1.2.840.113549.1.1.9', 'pSpecified');
	_IN('1.2.840.113549.1.1.10', 'RSASSA-PSS');
	_IN('1.2.840.113549.1.1.11', 'sha256WithRSAEncryption');
	_IN('1.2.840.113549.1.1.12', 'sha384WithRSAEncryption');
	_IN('1.2.840.113549.1.1.13', 'sha512WithRSAEncryption');
	// Edwards-curve Digital Signature Algorithm (EdDSA) Ed25519
	_IN('1.3.101.112', 'EdDSA25519');

	_IN('1.2.840.10040.4.3', 'dsa-with-sha1');

	_IN('1.3.14.3.2.7', 'desCBC');

	_IN('1.3.14.3.2.26', 'sha1');
	// Deprecated equivalent of sha1WithRSAEncryption
	_IN('1.3.14.3.2.29', 'sha1WithRSASignature');
	_IN('2.16.840.1.101.3.4.2.1', 'sha256');
	_IN('2.16.840.1.101.3.4.2.2', 'sha384');
	_IN('2.16.840.1.101.3.4.2.3', 'sha512');
	_IN('1.2.840.113549.2.5', 'md5');

	// pkcs#7 content types
	_IN('1.2.840.113549.1.7.1', 'data');
	_IN('1.2.840.113549.1.7.2', 'signedData');
	_IN('1.2.840.113549.1.7.3', 'envelopedData');
	_IN('1.2.840.113549.1.7.4', 'signedAndEnvelopedData');
	_IN('1.2.840.113549.1.7.5', 'digestedData');
	_IN('1.2.840.113549.1.7.6', 'encryptedData');

	// pkcs#9 oids
	_IN('1.2.840.113549.1.9.1', 'emailAddress');
	_IN('1.2.840.113549.1.9.2', 'unstructuredName');
	_IN('1.2.840.113549.1.9.3', 'contentType');
	_IN('1.2.840.113549.1.9.4', 'messageDigest');
	_IN('1.2.840.113549.1.9.5', 'signingTime');
	_IN('1.2.840.113549.1.9.6', 'counterSignature');
	_IN('1.2.840.113549.1.9.7', 'challengePassword');
	_IN('1.2.840.113549.1.9.8', 'unstructuredAddress');
	_IN('1.2.840.113549.1.9.14', 'extensionRequest');

	_IN('1.2.840.113549.1.9.20', 'friendlyName');
	_IN('1.2.840.113549.1.9.21', 'localKeyId');
	_IN('1.2.840.113549.1.9.22.1', 'x509Certificate');

	// pkcs#12 safe bags
	_IN('1.2.840.113549.1.12.10.1.1', 'keyBag');
	_IN('1.2.840.113549.1.12.10.1.2', 'pkcs8ShroudedKeyBag');
	_IN('1.2.840.113549.1.12.10.1.3', 'certBag');
	_IN('1.2.840.113549.1.12.10.1.4', 'crlBag');
	_IN('1.2.840.113549.1.12.10.1.5', 'secretBag');
	_IN('1.2.840.113549.1.12.10.1.6', 'safeContentsBag');

	// password-based-encryption for pkcs#12
	_IN('1.2.840.113549.1.5.13', 'pkcs5PBES2');
	_IN('1.2.840.113549.1.5.12', 'pkcs5PBKDF2');

	_IN('1.2.840.113549.1.12.1.1', 'pbeWithSHAAnd128BitRC4');
	_IN('1.2.840.113549.1.12.1.2', 'pbeWithSHAAnd40BitRC4');
	_IN('1.2.840.113549.1.12.1.3', 'pbeWithSHAAnd3-KeyTripleDES-CBC');
	_IN('1.2.840.113549.1.12.1.4', 'pbeWithSHAAnd2-KeyTripleDES-CBC');
	_IN('1.2.840.113549.1.12.1.5', 'pbeWithSHAAnd128BitRC2-CBC');
	_IN('1.2.840.113549.1.12.1.6', 'pbewithSHAAnd40BitRC2-CBC');

	// hmac OIDs
	_IN('1.2.840.113549.2.7', 'hmacWithSHA1');
	_IN('1.2.840.113549.2.8', 'hmacWithSHA224');
	_IN('1.2.840.113549.2.9', 'hmacWithSHA256');
	_IN('1.2.840.113549.2.10', 'hmacWithSHA384');
	_IN('1.2.840.113549.2.11', 'hmacWithSHA512');

	// symmetric key algorithm oids
	_IN('1.2.840.113549.3.7', 'des-EDE3-CBC');
	_IN('2.16.840.1.101.3.4.1.2', 'aes128-CBC');
	_IN('2.16.840.1.101.3.4.1.22', 'aes192-CBC');
	_IN('2.16.840.1.101.3.4.1.42', 'aes256-CBC');

	// certificate issuer/subject OIDs
	_IN('2.5.4.3', 'commonName');
	_IN('2.5.4.4', 'surname');
	_IN('2.5.4.5', 'serialNumber');
	_IN('2.5.4.6', 'countryName');
	_IN('2.5.4.7', 'localityName');
	_IN('2.5.4.8', 'stateOrProvinceName');
	_IN('2.5.4.9', 'streetAddress');
	_IN('2.5.4.10', 'organizationName');
	_IN('2.5.4.11', 'organizationalUnitName');
	_IN('2.5.4.12', 'title');
	_IN('2.5.4.13', 'description');
	_IN('2.5.4.15', 'businessCategory');
	_IN('2.5.4.17', 'postalCode');
	_IN('2.5.4.42', 'givenName');
	_IN('1.3.6.1.4.1.311.60.2.1.2', 'jurisdictionOfIncorporationStateOrProvinceName');
	_IN('1.3.6.1.4.1.311.60.2.1.3', 'jurisdictionOfIncorporationCountryName');

	// X.509 extension OIDs
	_IN('2.16.840.1.113730.1.1', 'nsCertType');
	_IN('2.16.840.1.113730.1.13', 'nsComment'); // deprecated in theory; still widely used
	_I_('2.5.29.1', 'authorityKeyIdentifier'); // deprecated, use .35
	_I_('2.5.29.2', 'keyAttributes'); // obsolete use .37 or .15
	_I_('2.5.29.3', 'certificatePolicies'); // deprecated, use .32
	_I_('2.5.29.4', 'keyUsageRestriction'); // obsolete use .37 or .15
	_I_('2.5.29.5', 'policyMapping'); // deprecated use .33
	_I_('2.5.29.6', 'subtreesConstraint'); // obsolete use .30
	_I_('2.5.29.7', 'subjectAltName'); // deprecated use .17
	_I_('2.5.29.8', 'issuerAltName'); // deprecated use .18
	_I_('2.5.29.9', 'subjectDirectoryAttributes');
	_I_('2.5.29.10', 'basicConstraints'); // deprecated use .19
	_I_('2.5.29.11', 'nameConstraints'); // deprecated use .30
	_I_('2.5.29.12', 'policyConstraints'); // deprecated use .36
	_I_('2.5.29.13', 'basicConstraints'); // deprecated use .19
	_IN('2.5.29.14', 'subjectKeyIdentifier');
	_IN('2.5.29.15', 'keyUsage');
	_I_('2.5.29.16', 'privateKeyUsagePeriod');
	_IN('2.5.29.17', 'subjectAltName');
	_IN('2.5.29.18', 'issuerAltName');
	_IN('2.5.29.19', 'basicConstraints');
	_I_('2.5.29.20', 'cRLNumber');
	_I_('2.5.29.21', 'cRLReason');
	_I_('2.5.29.22', 'expirationDate');
	_I_('2.5.29.23', 'instructionCode');
	_I_('2.5.29.24', 'invalidityDate');
	_I_('2.5.29.25', 'cRLDistributionPoints'); // deprecated use .31
	_I_('2.5.29.26', 'issuingDistributionPoint'); // deprecated use .28
	_I_('2.5.29.27', 'deltaCRLIndicator');
	_I_('2.5.29.28', 'issuingDistributionPoint');
	_I_('2.5.29.29', 'certificateIssuer');
	_I_('2.5.29.30', 'nameConstraints');
	_IN('2.5.29.31', 'cRLDistributionPoints');
	_IN('2.5.29.32', 'certificatePolicies');
	_I_('2.5.29.33', 'policyMappings');
	_I_('2.5.29.34', 'policyConstraints'); // deprecated use .36
	_IN('2.5.29.35', 'authorityKeyIdentifier');
	_I_('2.5.29.36', 'policyConstraints');
	_IN('2.5.29.37', 'extKeyUsage');
	_I_('2.5.29.46', 'freshestCRL');
	_I_('2.5.29.54', 'inhibitAnyPolicy');

	// extKeyUsage purposes
	_IN('1.3.6.1.4.1.11129.2.4.2', 'timestampList');
	_IN('1.3.6.1.5.5.7.1.1', 'authorityInfoAccess');
	_IN('1.3.6.1.5.5.7.3.1', 'serverAuth');
	_IN('1.3.6.1.5.5.7.3.2', 'clientAuth');
	_IN('1.3.6.1.5.5.7.3.3', 'codeSigning');
	_IN('1.3.6.1.5.5.7.3.4', 'emailProtection');
	_IN('1.3.6.1.5.5.7.3.8', 'timeStamping');

	/**
	 * Javascript implementation of Abstract Syntax Notation Number One.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
	 *
	 * An API for storing data using the Abstract Syntax Notation Number One
	 * format using DER (Distinguished Encoding Rules) encoding. This encoding is
	 * commonly used to store data for PKI, i.e. X.509 Certificates, and this
	 * implementation exists for that purpose.
	 *
	 * Abstract Syntax Notation Number One (ASN.1) is used to define the abstract
	 * syntax of information without restricting the way the information is encoded
	 * for transmission. It provides a standard that allows for open systems
	 * communication. ASN.1 defines the syntax of information data and a number of
	 * simple data types as well as a notation for describing them and specifying
	 * values for them.
	 *
	 * The RSA algorithm creates public and private keys that are often stored in
	 * X.509 or PKCS#X formats -- which use ASN.1 (encoded in DER format). This
	 * class provides the most basic functionality required to store and load DSA
	 * keys that are encoded according to ASN.1.
	 *
	 * The most common binary encodings for ASN.1 are BER (Basic Encoding Rules)
	 * and DER (Distinguished Encoding Rules). DER is just a subset of BER that
	 * has stricter requirements for how data must be encoded.
	 *
	 * Each ASN.1 structure has a tag (a byte identifying the ASN.1 structure type)
	 * and a byte array for the value of this ASN1 structure which may be data or a
	 * list of ASN.1 structures.
	 *
	 * Each ASN.1 structure using BER is (Tag-Length-Value):
	 *
	 * | byte 0 | bytes X | bytes Y |
	 * |--------|---------|----------
	 * |  tag   | length  |  value  |
	 *
	 * ASN.1 allows for tags to be of "High-tag-number form" which allows a tag to
	 * be two or more octets, but that is not supported by this class. A tag is
	 * only 1 byte. Bits 1-5 give the tag number (ie the data type within a
	 * particular 'class'), 6 indicates whether or not the ASN.1 value is
	 * constructed from other ASN.1 values, and bits 7 and 8 give the 'class'. If
	 * bits 7 and 8 are both zero, the class is UNIVERSAL. If only bit 7 is set,
	 * then the class is APPLICATION. If only bit 8 is set, then the class is
	 * CONTEXT_SPECIFIC. If both bits 7 and 8 are set, then the class is PRIVATE.
	 * The tag numbers for the data types for the class UNIVERSAL are listed below:
	 *
	 * UNIVERSAL 0 Reserved for use by the encoding rules
	 * UNIVERSAL 1 Boolean type
	 * UNIVERSAL 2 Integer type
	 * UNIVERSAL 3 Bitstring type
	 * UNIVERSAL 4 Octetstring type
	 * UNIVERSAL 5 Null type
	 * UNIVERSAL 6 Object identifier type
	 * UNIVERSAL 7 Object descriptor type
	 * UNIVERSAL 8 External type and Instance-of type
	 * UNIVERSAL 9 Real type
	 * UNIVERSAL 10 Enumerated type
	 * UNIVERSAL 11 Embedded-pdv type
	 * UNIVERSAL 12 UTF8String type
	 * UNIVERSAL 13 Relative object identifier type
	 * UNIVERSAL 14-15 Reserved for future editions
	 * UNIVERSAL 16 Sequence and Sequence-of types
	 * UNIVERSAL 17 Set and Set-of types
	 * UNIVERSAL 18-22, 25-30 Character string types
	 * UNIVERSAL 23-24 Time types
	 *
	 * The length of an ASN.1 structure is specified after the tag identifier.
	 * There is a definite form and an indefinite form. The indefinite form may
	 * be used if the encoding is constructed and not all immediately available.
	 * The indefinite form is encoded using a length byte with only the 8th bit
	 * set. The end of the constructed object is marked using end-of-contents
	 * octets (two zero bytes).
	 *
	 * The definite form looks like this:
	 *
	 * The length may take up 1 or more bytes, it depends on the length of the
	 * value of the ASN.1 structure. DER encoding requires that if the ASN.1
	 * structure has a value that has a length greater than 127, more than 1 byte
	 * will be used to store its length, otherwise just one byte will be used.
	 * This is strict.
	 *
	 * In the case that the length of the ASN.1 value is less than 127, 1 octet
	 * (byte) is used to store the "short form" length. The 8th bit has a value of
	 * 0 indicating the length is "short form" and not "long form" and bits 7-1
	 * give the length of the data. (The 8th bit is the left-most, most significant
	 * bit: also known as big endian or network format).
	 *
	 * In the case that the length of the ASN.1 value is greater than 127, 2 to
	 * 127 octets (bytes) are used to store the "long form" length. The first
	 * byte's 8th bit is set to 1 to indicate the length is "long form." Bits 7-1
	 * give the number of additional octets. All following octets are in base 256
	 * with the most significant digit first (typical big-endian binary unsigned
	 * integer storage). So, for instance, if the length of a value was 257, the
	 * first byte would be set to:
	 *
	 * 10000010 = 130 = 0x82.
	 *
	 * This indicates there are 2 octets (base 256) for the length. The second and
	 * third bytes (the octets just mentioned) would store the length in base 256:
	 *
	 * octet 2: 00000001 = 1 * 256^1 = 256
	 * octet 3: 00000001 = 1 * 256^0 = 1
	 * total = 257
	 *
	 * The algorithm for converting a js integer value of 257 to base-256 is:
	 *
	 * var value = 257;
	 * var bytes = [];
	 * bytes[0] = (value >>> 8) & 0xFF; // most significant byte first
	 * bytes[1] = value & 0xFF;        // least significant byte last
	 *
	 * On the ASN.1 UNIVERSAL Object Identifier (OID) type:
	 *
	 * An OID can be written like: "value1.value2.value3...valueN"
	 *
	 * The DER encoding rules:
	 *
	 * The first byte has the value 40 * value1 + value2.
	 * The following bytes, if any, encode the remaining values. Each value is
	 * encoded in base 128, most significant digit first (big endian), with as
	 * few digits as possible, and the most significant bit of each byte set
	 * to 1 except the last in each value's encoding. For example: Given the
	 * OID "1.2.840.113549", its DER encoding is (remember each byte except the
	 * last one in each encoding is OR'd with 0x80):
	 *
	 * byte 1: 40 * 1 + 2 = 42 = 0x2A.
	 * bytes 2-3: 128 * 6 + 72 = 840 = 6 72 = 6 72 = 0x0648 = 0x8648
	 * bytes 4-6: 16384 * 6 + 128 * 119 + 13 = 6 119 13 = 0x06770D = 0x86F70D
	 *
	 * The final value is: 0x2A864886F70D.
	 * The full OID (including ASN.1 tag and length of 6 bytes) is:
	 * 0x06062A864886F70D
	 */

	var forge$w = forge$z;



	/* ASN.1 API */
	var asn1$5 = forge$w.asn1 = forge$w.asn1 || {};

	/**
	 * ASN.1 classes.
	 */
	asn1$5.Class = {
	  UNIVERSAL:        0x00,
	  APPLICATION:      0x40,
	  CONTEXT_SPECIFIC: 0x80,
	  PRIVATE:          0xC0
	};

	/**
	 * ASN.1 types. Not all types are supported by this implementation, only
	 * those necessary to implement a simple PKI are implemented.
	 */
	asn1$5.Type = {
	  NONE:             0,
	  BOOLEAN:          1,
	  INTEGER:          2,
	  BITSTRING:        3,
	  OCTETSTRING:      4,
	  NULL:             5,
	  OID:              6,
	  ODESC:            7,
	  EXTERNAL:         8,
	  REAL:             9,
	  ENUMERATED:      10,
	  EMBEDDED:        11,
	  UTF8:            12,
	  ROID:            13,
	  SEQUENCE:        16,
	  SET:             17,
	  PRINTABLESTRING: 19,
	  IA5STRING:       22,
	  UTCTIME:         23,
	  GENERALIZEDTIME: 24,
	  BMPSTRING:       30
	};

	/**
	 * Creates a new asn1 object.
	 *
	 * @param tagClass the tag class for the object.
	 * @param type the data type (tag number) for the object.
	 * @param constructed true if the asn1 object is in constructed form.
	 * @param value the value for the object, if it is not constructed.
	 * @param [options] the options to use:
	 *          [bitStringContents] the plain BIT STRING content including padding
	 *            byte.
	 *
	 * @return the asn1 object.
	 */
	asn1$5.create = function(tagClass, type, constructed, value, options) {
	  /* An asn1 object has a tagClass, a type, a constructed flag, and a
	    value. The value's type depends on the constructed flag. If
	    constructed, it will contain a list of other asn1 objects. If not,
	    it will contain the ASN.1 value as an array of bytes formatted
	    according to the ASN.1 data type. */

	  // remove undefined values
	  if(forge$w.util.isArray(value)) {
	    var tmp = [];
	    for(var i = 0; i < value.length; ++i) {
	      if(value[i] !== undefined) {
	        tmp.push(value[i]);
	      }
	    }
	    value = tmp;
	  }

	  var obj = {
	    tagClass: tagClass,
	    type: type,
	    constructed: constructed,
	    composed: constructed || forge$w.util.isArray(value),
	    value: value
	  };
	  if(options && 'bitStringContents' in options) {
	    // TODO: copy byte buffer if it's a buffer not a string
	    obj.bitStringContents = options.bitStringContents;
	    // TODO: add readonly flag to avoid this overhead
	    // save copy to detect changes
	    obj.original = asn1$5.copy(obj);
	  }
	  return obj;
	};

	/**
	 * Copies an asn1 object.
	 *
	 * @param obj the asn1 object.
	 * @param [options] copy options:
	 *          [excludeBitStringContents] true to not copy bitStringContents
	 *
	 * @return the a copy of the asn1 object.
	 */
	asn1$5.copy = function(obj, options) {
	  var copy;

	  if(forge$w.util.isArray(obj)) {
	    copy = [];
	    for(var i = 0; i < obj.length; ++i) {
	      copy.push(asn1$5.copy(obj[i], options));
	    }
	    return copy;
	  }

	  if(typeof obj === 'string') {
	    // TODO: copy byte buffer if it's a buffer not a string
	    return obj;
	  }

	  copy = {
	    tagClass: obj.tagClass,
	    type: obj.type,
	    constructed: obj.constructed,
	    composed: obj.composed,
	    value: asn1$5.copy(obj.value, options)
	  };
	  if(options && !options.excludeBitStringContents) {
	    // TODO: copy byte buffer if it's a buffer not a string
	    copy.bitStringContents = obj.bitStringContents;
	  }
	  return copy;
	};

	/**
	 * Compares asn1 objects for equality.
	 *
	 * Note this function does not run in constant time.
	 *
	 * @param obj1 the first asn1 object.
	 * @param obj2 the second asn1 object.
	 * @param [options] compare options:
	 *          [includeBitStringContents] true to compare bitStringContents
	 *
	 * @return true if the asn1 objects are equal.
	 */
	asn1$5.equals = function(obj1, obj2, options) {
	  if(forge$w.util.isArray(obj1)) {
	    if(!forge$w.util.isArray(obj2)) {
	      return false;
	    }
	    if(obj1.length !== obj2.length) {
	      return false;
	    }
	    for(var i = 0; i < obj1.length; ++i) {
	      if(!asn1$5.equals(obj1[i], obj2[i])) {
	        return false;
	      }
	    }
	    return true;
	  }

	  if(typeof obj1 !== typeof obj2) {
	    return false;
	  }

	  if(typeof obj1 === 'string') {
	    return obj1 === obj2;
	  }

	  var equal = obj1.tagClass === obj2.tagClass &&
	    obj1.type === obj2.type &&
	    obj1.constructed === obj2.constructed &&
	    obj1.composed === obj2.composed &&
	    asn1$5.equals(obj1.value, obj2.value);
	  if(options && options.includeBitStringContents) {
	    equal = equal && (obj1.bitStringContents === obj2.bitStringContents);
	  }

	  return equal;
	};

	/**
	 * Gets the length of a BER-encoded ASN.1 value.
	 *
	 * In case the length is not specified, undefined is returned.
	 *
	 * @param b the BER-encoded ASN.1 byte buffer, starting with the first
	 *          length byte.
	 *
	 * @return the length of the BER-encoded ASN.1 value or undefined.
	 */
	asn1$5.getBerValueLength = function(b) {
	  // TODO: move this function and related DER/BER functions to a der.js
	  // file; better abstract ASN.1 away from der/ber.
	  var b2 = b.getByte();
	  if(b2 === 0x80) {
	    return undefined;
	  }

	  // see if the length is "short form" or "long form" (bit 8 set)
	  var length;
	  var longForm = b2 & 0x80;
	  if(!longForm) {
	    // length is just the first byte
	    length = b2;
	  } else {
	    // the number of bytes the length is specified in bits 7 through 1
	    // and each length byte is in big-endian base-256
	    length = b.getInt((b2 & 0x7F) << 3);
	  }
	  return length;
	};

	/**
	 * Check if the byte buffer has enough bytes. Throws an Error if not.
	 *
	 * @param bytes the byte buffer to parse from.
	 * @param remaining the bytes remaining in the current parsing state.
	 * @param n the number of bytes the buffer must have.
	 */
	function _checkBufferLength(bytes, remaining, n) {
	  if(n > remaining) {
	    var error = new Error('Too few bytes to parse DER.');
	    error.available = bytes.length();
	    error.remaining = remaining;
	    error.requested = n;
	    throw error;
	  }
	}

	/**
	 * Gets the length of a BER-encoded ASN.1 value.
	 *
	 * In case the length is not specified, undefined is returned.
	 *
	 * @param bytes the byte buffer to parse from.
	 * @param remaining the bytes remaining in the current parsing state.
	 *
	 * @return the length of the BER-encoded ASN.1 value or undefined.
	 */
	var _getValueLength = function(bytes, remaining) {
	  // TODO: move this function and related DER/BER functions to a der.js
	  // file; better abstract ASN.1 away from der/ber.
	  // fromDer already checked that this byte exists
	  var b2 = bytes.getByte();
	  remaining--;
	  if(b2 === 0x80) {
	    return undefined;
	  }

	  // see if the length is "short form" or "long form" (bit 8 set)
	  var length;
	  var longForm = b2 & 0x80;
	  if(!longForm) {
	    // length is just the first byte
	    length = b2;
	  } else {
	    // the number of bytes the length is specified in bits 7 through 1
	    // and each length byte is in big-endian base-256
	    var longFormBytes = b2 & 0x7F;
	    _checkBufferLength(bytes, remaining, longFormBytes);
	    length = bytes.getInt(longFormBytes << 3);
	  }
	  // FIXME: this will only happen for 32 bit getInt with high bit set
	  if(length < 0) {
	    throw new Error('Negative length: ' + length);
	  }
	  return length;
	};

	/**
	 * Parses an asn1 object from a byte buffer in DER format.
	 *
	 * @param bytes the byte buffer to parse from.
	 * @param [strict] true to be strict when checking value lengths, false to
	 *          allow truncated values (default: true).
	 * @param [options] object with options or boolean strict flag
	 *          [strict] true to be strict when checking value lengths, false to
	 *            allow truncated values (default: true).
	 *          [decodeBitStrings] true to attempt to decode the content of
	 *            BIT STRINGs (not OCTET STRINGs) using strict mode. Note that
	 *            without schema support to understand the data context this can
	 *            erroneously decode values that happen to be valid ASN.1. This
	 *            flag will be deprecated or removed as soon as schema support is
	 *            available. (default: true)
	 *
	 * @return the parsed asn1 object.
	 */
	asn1$5.fromDer = function(bytes, options) {
	  if(options === undefined) {
	    options = {
	      strict: true,
	      decodeBitStrings: true
	    };
	  }
	  if(typeof options === 'boolean') {
	    options = {
	      strict: options,
	      decodeBitStrings: true
	    };
	  }
	  if(!('strict' in options)) {
	    options.strict = true;
	  }
	  if(!('decodeBitStrings' in options)) {
	    options.decodeBitStrings = true;
	  }

	  // wrap in buffer if needed
	  if(typeof bytes === 'string') {
	    bytes = forge$w.util.createBuffer(bytes);
	  }

	  return _fromDer(bytes, bytes.length(), 0, options);
	};

	/**
	 * Internal function to parse an asn1 object from a byte buffer in DER format.
	 *
	 * @param bytes the byte buffer to parse from.
	 * @param remaining the number of bytes remaining for this chunk.
	 * @param depth the current parsing depth.
	 * @param options object with same options as fromDer().
	 *
	 * @return the parsed asn1 object.
	 */
	function _fromDer(bytes, remaining, depth, options) {
	  // temporary storage for consumption calculations
	  var start;

	  // minimum length for ASN.1 DER structure is 2
	  _checkBufferLength(bytes, remaining, 2);

	  // get the first byte
	  var b1 = bytes.getByte();
	  // consumed one byte
	  remaining--;

	  // get the tag class
	  var tagClass = (b1 & 0xC0);

	  // get the type (bits 1-5)
	  var type = b1 & 0x1F;

	  // get the variable value length and adjust remaining bytes
	  start = bytes.length();
	  var length = _getValueLength(bytes, remaining);
	  remaining -= start - bytes.length();

	  // ensure there are enough bytes to get the value
	  if(length !== undefined && length > remaining) {
	    if(options.strict) {
	      var error = new Error('Too few bytes to read ASN.1 value.');
	      error.available = bytes.length();
	      error.remaining = remaining;
	      error.requested = length;
	      throw error;
	    }
	    // Note: be lenient with truncated values and use remaining state bytes
	    length = remaining;
	  }

	  // value storage
	  var value;
	  // possible BIT STRING contents storage
	  var bitStringContents;

	  // constructed flag is bit 6 (32 = 0x20) of the first byte
	  var constructed = ((b1 & 0x20) === 0x20);
	  if(constructed) {
	    // parse child asn1 objects from the value
	    value = [];
	    if(length === undefined) {
	      // asn1 object of indefinite length, read until end tag
	      for(;;) {
	        _checkBufferLength(bytes, remaining, 2);
	        if(bytes.bytes(2) === String.fromCharCode(0, 0)) {
	          bytes.getBytes(2);
	          remaining -= 2;
	          break;
	        }
	        start = bytes.length();
	        value.push(_fromDer(bytes, remaining, depth + 1, options));
	        remaining -= start - bytes.length();
	      }
	    } else {
	      // parsing asn1 object of definite length
	      while(length > 0) {
	        start = bytes.length();
	        value.push(_fromDer(bytes, length, depth + 1, options));
	        remaining -= start - bytes.length();
	        length -= start - bytes.length();
	      }
	    }
	  }

	  // if a BIT STRING, save the contents including padding
	  if(value === undefined && tagClass === asn1$5.Class.UNIVERSAL &&
	    type === asn1$5.Type.BITSTRING) {
	    bitStringContents = bytes.bytes(length);
	  }

	  // determine if a non-constructed value should be decoded as a composed
	  // value that contains other ASN.1 objects. BIT STRINGs (and OCTET STRINGs)
	  // can be used this way.
	  if(value === undefined && options.decodeBitStrings &&
	    tagClass === asn1$5.Class.UNIVERSAL &&
	    // FIXME: OCTET STRINGs not yet supported here
	    // .. other parts of forge expect to decode OCTET STRINGs manually
	    (type === asn1$5.Type.BITSTRING /*|| type === asn1.Type.OCTETSTRING*/) &&
	    length > 1) {
	    // save read position
	    var savedRead = bytes.read;
	    var savedRemaining = remaining;
	    var unused = 0;
	    if(type === asn1$5.Type.BITSTRING) {
	      /* The first octet gives the number of bits by which the length of the
	        bit string is less than the next multiple of eight (this is called
	        the "number of unused bits").

	        The second and following octets give the value of the bit string
	        converted to an octet string. */
	      _checkBufferLength(bytes, remaining, 1);
	      unused = bytes.getByte();
	      remaining--;
	    }
	    // if all bits are used, maybe the BIT/OCTET STRING holds ASN.1 objs
	    if(unused === 0) {
	      try {
	        // attempt to parse child asn1 object from the value
	        // (stored in array to signal composed value)
	        start = bytes.length();
	        var subOptions = {
	          // enforce strict mode to avoid parsing ASN.1 from plain data
	          verbose: options.verbose,
	          strict: true,
	          decodeBitStrings: true
	        };
	        var composed = _fromDer(bytes, remaining, depth + 1, subOptions);
	        var used = start - bytes.length();
	        remaining -= used;
	        if(type == asn1$5.Type.BITSTRING) {
	          used++;
	        }

	        // if the data all decoded and the class indicates UNIVERSAL or
	        // CONTEXT_SPECIFIC then assume we've got an encapsulated ASN.1 object
	        var tc = composed.tagClass;
	        if(used === length &&
	          (tc === asn1$5.Class.UNIVERSAL || tc === asn1$5.Class.CONTEXT_SPECIFIC)) {
	          value = [composed];
	        }
	      } catch(ex) {
	      }
	    }
	    if(value === undefined) {
	      // restore read position
	      bytes.read = savedRead;
	      remaining = savedRemaining;
	    }
	  }

	  if(value === undefined) {
	    // asn1 not constructed or composed, get raw value
	    // TODO: do DER to OID conversion and vice-versa in .toDer?

	    if(length === undefined) {
	      if(options.strict) {
	        throw new Error('Non-constructed ASN.1 object of indefinite length.');
	      }
	      // be lenient and use remaining state bytes
	      length = remaining;
	    }

	    if(type === asn1$5.Type.BMPSTRING) {
	      value = '';
	      for(; length > 0; length -= 2) {
	        _checkBufferLength(bytes, remaining, 2);
	        value += String.fromCharCode(bytes.getInt16());
	        remaining -= 2;
	      }
	    } else {
	      value = bytes.getBytes(length);
	    }
	  }

	  // add BIT STRING contents if available
	  var asn1Options = bitStringContents === undefined ? null : {
	    bitStringContents: bitStringContents
	  };

	  // create and return asn1 object
	  return asn1$5.create(tagClass, type, constructed, value, asn1Options);
	}

	/**
	 * Converts the given asn1 object to a buffer of bytes in DER format.
	 *
	 * @param asn1 the asn1 object to convert to bytes.
	 *
	 * @return the buffer of bytes.
	 */
	asn1$5.toDer = function(obj) {
	  var bytes = forge$w.util.createBuffer();

	  // build the first byte
	  var b1 = obj.tagClass | obj.type;

	  // for storing the ASN.1 value
	  var value = forge$w.util.createBuffer();

	  // use BIT STRING contents if available and data not changed
	  var useBitStringContents = false;
	  if('bitStringContents' in obj) {
	    useBitStringContents = true;
	    if(obj.original) {
	      useBitStringContents = asn1$5.equals(obj, obj.original);
	    }
	  }

	  if(useBitStringContents) {
	    value.putBytes(obj.bitStringContents);
	  } else if(obj.composed) {
	    // if composed, use each child asn1 object's DER bytes as value
	    // turn on 6th bit (0x20 = 32) to indicate asn1 is constructed
	    // from other asn1 objects
	    if(obj.constructed) {
	      b1 |= 0x20;
	    } else {
	      // type is a bit string, add unused bits of 0x00
	      value.putByte(0x00);
	    }

	    // add all of the child DER bytes together
	    for(var i = 0; i < obj.value.length; ++i) {
	      if(obj.value[i] !== undefined) {
	        value.putBuffer(asn1$5.toDer(obj.value[i]));
	      }
	    }
	  } else {
	    // use asn1.value directly
	    if(obj.type === asn1$5.Type.BMPSTRING) {
	      for(var i = 0; i < obj.value.length; ++i) {
	        value.putInt16(obj.value.charCodeAt(i));
	      }
	    } else {
	      // ensure integer is minimally-encoded
	      // TODO: should all leading bytes be stripped vs just one?
	      // .. ex '00 00 01' => '01'?
	      if(obj.type === asn1$5.Type.INTEGER &&
	        obj.value.length > 1 &&
	        // leading 0x00 for positive integer
	        ((obj.value.charCodeAt(0) === 0 &&
	        (obj.value.charCodeAt(1) & 0x80) === 0) ||
	        // leading 0xFF for negative integer
	        (obj.value.charCodeAt(0) === 0xFF &&
	        (obj.value.charCodeAt(1) & 0x80) === 0x80))) {
	        value.putBytes(obj.value.substr(1));
	      } else {
	        value.putBytes(obj.value);
	      }
	    }
	  }

	  // add tag byte
	  bytes.putByte(b1);

	  // use "short form" encoding
	  if(value.length() <= 127) {
	    // one byte describes the length
	    // bit 8 = 0 and bits 7-1 = length
	    bytes.putByte(value.length() & 0x7F);
	  } else {
	    // use "long form" encoding
	    // 2 to 127 bytes describe the length
	    // first byte: bit 8 = 1 and bits 7-1 = # of additional bytes
	    // other bytes: length in base 256, big-endian
	    var len = value.length();
	    var lenBytes = '';
	    do {
	      lenBytes += String.fromCharCode(len & 0xFF);
	      len = len >>> 8;
	    } while(len > 0);

	    // set first byte to # bytes used to store the length and turn on
	    // bit 8 to indicate long-form length is used
	    bytes.putByte(lenBytes.length | 0x80);

	    // concatenate length bytes in reverse since they were generated
	    // little endian and we need big endian
	    for(var i = lenBytes.length - 1; i >= 0; --i) {
	      bytes.putByte(lenBytes.charCodeAt(i));
	    }
	  }

	  // concatenate value bytes
	  bytes.putBuffer(value);
	  return bytes;
	};

	/**
	 * Converts an OID dot-separated string to a byte buffer. The byte buffer
	 * contains only the DER-encoded value, not any tag or length bytes.
	 *
	 * @param oid the OID dot-separated string.
	 *
	 * @return the byte buffer.
	 */
	asn1$5.oidToDer = function(oid) {
	  // split OID into individual values
	  var values = oid.split('.');
	  var bytes = forge$w.util.createBuffer();

	  // first byte is 40 * value1 + value2
	  bytes.putByte(40 * parseInt(values[0], 10) + parseInt(values[1], 10));
	  // other bytes are each value in base 128 with 8th bit set except for
	  // the last byte for each value
	  var last, valueBytes, value, b;
	  for(var i = 2; i < values.length; ++i) {
	    // produce value bytes in reverse because we don't know how many
	    // bytes it will take to store the value
	    last = true;
	    valueBytes = [];
	    value = parseInt(values[i], 10);
	    do {
	      b = value & 0x7F;
	      value = value >>> 7;
	      // if value is not last, then turn on 8th bit
	      if(!last) {
	        b |= 0x80;
	      }
	      valueBytes.push(b);
	      last = false;
	    } while(value > 0);

	    // add value bytes in reverse (needs to be in big endian)
	    for(var n = valueBytes.length - 1; n >= 0; --n) {
	      bytes.putByte(valueBytes[n]);
	    }
	  }

	  return bytes;
	};

	/**
	 * Converts a DER-encoded byte buffer to an OID dot-separated string. The
	 * byte buffer should contain only the DER-encoded value, not any tag or
	 * length bytes.
	 *
	 * @param bytes the byte buffer.
	 *
	 * @return the OID dot-separated string.
	 */
	asn1$5.derToOid = function(bytes) {
	  var oid;

	  // wrap in buffer if needed
	  if(typeof bytes === 'string') {
	    bytes = forge$w.util.createBuffer(bytes);
	  }

	  // first byte is 40 * value1 + value2
	  var b = bytes.getByte();
	  oid = Math.floor(b / 40) + '.' + (b % 40);

	  // other bytes are each value in base 128 with 8th bit set except for
	  // the last byte for each value
	  var value = 0;
	  while(bytes.length() > 0) {
	    b = bytes.getByte();
	    value = value << 7;
	    // not the last byte for the value
	    if(b & 0x80) {
	      value += b & 0x7F;
	    } else {
	      // last byte
	      oid += '.' + (value + b);
	      value = 0;
	    }
	  }

	  return oid;
	};

	/**
	 * Converts a UTCTime value to a date.
	 *
	 * Note: GeneralizedTime has 4 digits for the year and is used for X.509
	 * dates past 2049. Parsing that structure hasn't been implemented yet.
	 *
	 * @param utc the UTCTime value to convert.
	 *
	 * @return the date.
	 */
	asn1$5.utcTimeToDate = function(utc) {
	  /* The following formats can be used:

	    YYMMDDhhmmZ
	    YYMMDDhhmm+hh'mm'
	    YYMMDDhhmm-hh'mm'
	    YYMMDDhhmmssZ
	    YYMMDDhhmmss+hh'mm'
	    YYMMDDhhmmss-hh'mm'

	    Where:

	    YY is the least significant two digits of the year
	    MM is the month (01 to 12)
	    DD is the day (01 to 31)
	    hh is the hour (00 to 23)
	    mm are the minutes (00 to 59)
	    ss are the seconds (00 to 59)
	    Z indicates that local time is GMT, + indicates that local time is
	    later than GMT, and - indicates that local time is earlier than GMT
	    hh' is the absolute value of the offset from GMT in hours
	    mm' is the absolute value of the offset from GMT in minutes */
	  var date = new Date();

	  // if YY >= 50 use 19xx, if YY < 50 use 20xx
	  var year = parseInt(utc.substr(0, 2), 10);
	  year = (year >= 50) ? 1900 + year : 2000 + year;
	  var MM = parseInt(utc.substr(2, 2), 10) - 1; // use 0-11 for month
	  var DD = parseInt(utc.substr(4, 2), 10);
	  var hh = parseInt(utc.substr(6, 2), 10);
	  var mm = parseInt(utc.substr(8, 2), 10);
	  var ss = 0;

	  // not just YYMMDDhhmmZ
	  if(utc.length > 11) {
	    // get character after minutes
	    var c = utc.charAt(10);
	    var end = 10;

	    // see if seconds are present
	    if(c !== '+' && c !== '-') {
	      // get seconds
	      ss = parseInt(utc.substr(10, 2), 10);
	      end += 2;
	    }
	  }

	  // update date
	  date.setUTCFullYear(year, MM, DD);
	  date.setUTCHours(hh, mm, ss, 0);

	  if(end) {
	    // get +/- after end of time
	    c = utc.charAt(end);
	    if(c === '+' || c === '-') {
	      // get hours+minutes offset
	      var hhoffset = parseInt(utc.substr(end + 1, 2), 10);
	      var mmoffset = parseInt(utc.substr(end + 4, 2), 10);

	      // calculate offset in milliseconds
	      var offset = hhoffset * 60 + mmoffset;
	      offset *= 60000;

	      // apply offset
	      if(c === '+') {
	        date.setTime(+date - offset);
	      } else {
	        date.setTime(+date + offset);
	      }
	    }
	  }

	  return date;
	};

	/**
	 * Converts a GeneralizedTime value to a date.
	 *
	 * @param gentime the GeneralizedTime value to convert.
	 *
	 * @return the date.
	 */
	asn1$5.generalizedTimeToDate = function(gentime) {
	  /* The following formats can be used:

	    YYYYMMDDHHMMSS
	    YYYYMMDDHHMMSS.fff
	    YYYYMMDDHHMMSSZ
	    YYYYMMDDHHMMSS.fffZ
	    YYYYMMDDHHMMSS+hh'mm'
	    YYYYMMDDHHMMSS.fff+hh'mm'
	    YYYYMMDDHHMMSS-hh'mm'
	    YYYYMMDDHHMMSS.fff-hh'mm'

	    Where:

	    YYYY is the year
	    MM is the month (01 to 12)
	    DD is the day (01 to 31)
	    hh is the hour (00 to 23)
	    mm are the minutes (00 to 59)
	    ss are the seconds (00 to 59)
	    .fff is the second fraction, accurate to three decimal places
	    Z indicates that local time is GMT, + indicates that local time is
	    later than GMT, and - indicates that local time is earlier than GMT
	    hh' is the absolute value of the offset from GMT in hours
	    mm' is the absolute value of the offset from GMT in minutes */
	  var date = new Date();

	  var YYYY = parseInt(gentime.substr(0, 4), 10);
	  var MM = parseInt(gentime.substr(4, 2), 10) - 1; // use 0-11 for month
	  var DD = parseInt(gentime.substr(6, 2), 10);
	  var hh = parseInt(gentime.substr(8, 2), 10);
	  var mm = parseInt(gentime.substr(10, 2), 10);
	  var ss = parseInt(gentime.substr(12, 2), 10);
	  var fff = 0;
	  var offset = 0;
	  var isUTC = false;

	  if(gentime.charAt(gentime.length - 1) === 'Z') {
	    isUTC = true;
	  }

	  var end = gentime.length - 5, c = gentime.charAt(end);
	  if(c === '+' || c === '-') {
	    // get hours+minutes offset
	    var hhoffset = parseInt(gentime.substr(end + 1, 2), 10);
	    var mmoffset = parseInt(gentime.substr(end + 4, 2), 10);

	    // calculate offset in milliseconds
	    offset = hhoffset * 60 + mmoffset;
	    offset *= 60000;

	    // apply offset
	    if(c === '+') {
	      offset *= -1;
	    }

	    isUTC = true;
	  }

	  // check for second fraction
	  if(gentime.charAt(14) === '.') {
	    fff = parseFloat(gentime.substr(14), 10) * 1000;
	  }

	  if(isUTC) {
	    date.setUTCFullYear(YYYY, MM, DD);
	    date.setUTCHours(hh, mm, ss, fff);

	    // apply offset
	    date.setTime(+date + offset);
	  } else {
	    date.setFullYear(YYYY, MM, DD);
	    date.setHours(hh, mm, ss, fff);
	  }

	  return date;
	};

	/**
	 * Converts a date to a UTCTime value.
	 *
	 * Note: GeneralizedTime has 4 digits for the year and is used for X.509
	 * dates past 2049. Converting to a GeneralizedTime hasn't been
	 * implemented yet.
	 *
	 * @param date the date to convert.
	 *
	 * @return the UTCTime value.
	 */
	asn1$5.dateToUtcTime = function(date) {
	  // TODO: validate; currently assumes proper format
	  if(typeof date === 'string') {
	    return date;
	  }

	  var rval = '';

	  // create format YYMMDDhhmmssZ
	  var format = [];
	  format.push(('' + date.getUTCFullYear()).substr(2));
	  format.push('' + (date.getUTCMonth() + 1));
	  format.push('' + date.getUTCDate());
	  format.push('' + date.getUTCHours());
	  format.push('' + date.getUTCMinutes());
	  format.push('' + date.getUTCSeconds());

	  // ensure 2 digits are used for each format entry
	  for(var i = 0; i < format.length; ++i) {
	    if(format[i].length < 2) {
	      rval += '0';
	    }
	    rval += format[i];
	  }
	  rval += 'Z';

	  return rval;
	};

	/**
	 * Converts a date to a GeneralizedTime value.
	 *
	 * @param date the date to convert.
	 *
	 * @return the GeneralizedTime value as a string.
	 */
	asn1$5.dateToGeneralizedTime = function(date) {
	  // TODO: validate; currently assumes proper format
	  if(typeof date === 'string') {
	    return date;
	  }

	  var rval = '';

	  // create format YYYYMMDDHHMMSSZ
	  var format = [];
	  format.push('' + date.getUTCFullYear());
	  format.push('' + (date.getUTCMonth() + 1));
	  format.push('' + date.getUTCDate());
	  format.push('' + date.getUTCHours());
	  format.push('' + date.getUTCMinutes());
	  format.push('' + date.getUTCSeconds());

	  // ensure 2 digits are used for each format entry
	  for(var i = 0; i < format.length; ++i) {
	    if(format[i].length < 2) {
	      rval += '0';
	    }
	    rval += format[i];
	  }
	  rval += 'Z';

	  return rval;
	};

	/**
	 * Converts a javascript integer to a DER-encoded byte buffer to be used
	 * as the value for an INTEGER type.
	 *
	 * @param x the integer.
	 *
	 * @return the byte buffer.
	 */
	asn1$5.integerToDer = function(x) {
	  var rval = forge$w.util.createBuffer();
	  if(x >= -0x80 && x < 0x80) {
	    return rval.putSignedInt(x, 8);
	  }
	  if(x >= -0x8000 && x < 0x8000) {
	    return rval.putSignedInt(x, 16);
	  }
	  if(x >= -0x800000 && x < 0x800000) {
	    return rval.putSignedInt(x, 24);
	  }
	  if(x >= -0x80000000 && x < 0x80000000) {
	    return rval.putSignedInt(x, 32);
	  }
	  var error = new Error('Integer too large; max is 32-bits.');
	  error.integer = x;
	  throw error;
	};

	/**
	 * Converts a DER-encoded byte buffer to a javascript integer. This is
	 * typically used to decode the value of an INTEGER type.
	 *
	 * @param bytes the byte buffer.
	 *
	 * @return the integer.
	 */
	asn1$5.derToInteger = function(bytes) {
	  // wrap in buffer if needed
	  if(typeof bytes === 'string') {
	    bytes = forge$w.util.createBuffer(bytes);
	  }

	  var n = bytes.length() * 8;
	  if(n > 32) {
	    throw new Error('Integer too large; max is 32-bits.');
	  }
	  return bytes.getSignedInt(n);
	};

	/**
	 * Validates that the given ASN.1 object is at least a super set of the
	 * given ASN.1 structure. Only tag classes and types are checked. An
	 * optional map may also be provided to capture ASN.1 values while the
	 * structure is checked.
	 *
	 * To capture an ASN.1 value, set an object in the validator's 'capture'
	 * parameter to the key to use in the capture map. To capture the full
	 * ASN.1 object, specify 'captureAsn1'. To capture BIT STRING bytes, including
	 * the leading unused bits counter byte, specify 'captureBitStringContents'.
	 * To capture BIT STRING bytes, without the leading unused bits counter byte,
	 * specify 'captureBitStringValue'.
	 *
	 * Objects in the validator may set a field 'optional' to true to indicate
	 * that it isn't necessary to pass validation.
	 *
	 * @param obj the ASN.1 object to validate.
	 * @param v the ASN.1 structure validator.
	 * @param capture an optional map to capture values in.
	 * @param errors an optional array for storing validation errors.
	 *
	 * @return true on success, false on failure.
	 */
	asn1$5.validate = function(obj, v, capture, errors) {
	  var rval = false;

	  // ensure tag class and type are the same if specified
	  if((obj.tagClass === v.tagClass || typeof(v.tagClass) === 'undefined') &&
	    (obj.type === v.type || typeof(v.type) === 'undefined')) {
	    // ensure constructed flag is the same if specified
	    if(obj.constructed === v.constructed ||
	      typeof(v.constructed) === 'undefined') {
	      rval = true;

	      // handle sub values
	      if(v.value && forge$w.util.isArray(v.value)) {
	        var j = 0;
	        for(var i = 0; rval && i < v.value.length; ++i) {
	          rval = v.value[i].optional || false;
	          if(obj.value[j]) {
	            rval = asn1$5.validate(obj.value[j], v.value[i], capture, errors);
	            if(rval) {
	              ++j;
	            } else if(v.value[i].optional) {
	              rval = true;
	            }
	          }
	          if(!rval && errors) {
	            errors.push(
	              '[' + v.name + '] ' +
	              'Tag class "' + v.tagClass + '", type "' +
	              v.type + '" expected value length "' +
	              v.value.length + '", got "' +
	              obj.value.length + '"');
	          }
	        }
	      }

	      if(rval && capture) {
	        if(v.capture) {
	          capture[v.capture] = obj.value;
	        }
	        if(v.captureAsn1) {
	          capture[v.captureAsn1] = obj;
	        }
	        if(v.captureBitStringContents && 'bitStringContents' in obj) {
	          capture[v.captureBitStringContents] = obj.bitStringContents;
	        }
	        if(v.captureBitStringValue && 'bitStringContents' in obj) {
	          if(obj.bitStringContents.length < 2) {
	            capture[v.captureBitStringValue] = '';
	          } else {
	            // FIXME: support unused bits with data shifting
	            var unused = obj.bitStringContents.charCodeAt(0);
	            if(unused !== 0) {
	              throw new Error(
	                'captureBitStringValue only supported for zero unused bits');
	            }
	            capture[v.captureBitStringValue] = obj.bitStringContents.slice(1);
	          }
	        }
	      }
	    } else if(errors) {
	      errors.push(
	        '[' + v.name + '] ' +
	        'Expected constructed "' + v.constructed + '", got "' +
	        obj.constructed + '"');
	    }
	  } else if(errors) {
	    if(obj.tagClass !== v.tagClass) {
	      errors.push(
	        '[' + v.name + '] ' +
	        'Expected tag class "' + v.tagClass + '", got "' +
	        obj.tagClass + '"');
	    }
	    if(obj.type !== v.type) {
	      errors.push(
	        '[' + v.name + '] ' +
	        'Expected type "' + v.type + '", got "' + obj.type + '"');
	    }
	  }
	  return rval;
	};

	// regex for testing for non-latin characters
	var _nonLatinRegex = /[^\\u0000-\\u00ff]/;

	/**
	 * Pretty prints an ASN.1 object to a string.
	 *
	 * @param obj the object to write out.
	 * @param level the level in the tree.
	 * @param indentation the indentation to use.
	 *
	 * @return the string.
	 */
	asn1$5.prettyPrint = function(obj, level, indentation) {
	  var rval = '';

	  // set default level and indentation
	  level = level || 0;
	  indentation = indentation || 2;

	  // start new line for deep levels
	  if(level > 0) {
	    rval += '\n';
	  }

	  // create indent
	  var indent = '';
	  for(var i = 0; i < level * indentation; ++i) {
	    indent += ' ';
	  }

	  // print class:type
	  rval += indent + 'Tag: ';
	  switch(obj.tagClass) {
	  case asn1$5.Class.UNIVERSAL:
	    rval += 'Universal:';
	    break;
	  case asn1$5.Class.APPLICATION:
	    rval += 'Application:';
	    break;
	  case asn1$5.Class.CONTEXT_SPECIFIC:
	    rval += 'Context-Specific:';
	    break;
	  case asn1$5.Class.PRIVATE:
	    rval += 'Private:';
	    break;
	  }

	  if(obj.tagClass === asn1$5.Class.UNIVERSAL) {
	    rval += obj.type;

	    // known types
	    switch(obj.type) {
	    case asn1$5.Type.NONE:
	      rval += ' (None)';
	      break;
	    case asn1$5.Type.BOOLEAN:
	      rval += ' (Boolean)';
	      break;
	    case asn1$5.Type.INTEGER:
	      rval += ' (Integer)';
	      break;
	    case asn1$5.Type.BITSTRING:
	      rval += ' (Bit string)';
	      break;
	    case asn1$5.Type.OCTETSTRING:
	      rval += ' (Octet string)';
	      break;
	    case asn1$5.Type.NULL:
	      rval += ' (Null)';
	      break;
	    case asn1$5.Type.OID:
	      rval += ' (Object Identifier)';
	      break;
	    case asn1$5.Type.ODESC:
	      rval += ' (Object Descriptor)';
	      break;
	    case asn1$5.Type.EXTERNAL:
	      rval += ' (External or Instance of)';
	      break;
	    case asn1$5.Type.REAL:
	      rval += ' (Real)';
	      break;
	    case asn1$5.Type.ENUMERATED:
	      rval += ' (Enumerated)';
	      break;
	    case asn1$5.Type.EMBEDDED:
	      rval += ' (Embedded PDV)';
	      break;
	    case asn1$5.Type.UTF8:
	      rval += ' (UTF8)';
	      break;
	    case asn1$5.Type.ROID:
	      rval += ' (Relative Object Identifier)';
	      break;
	    case asn1$5.Type.SEQUENCE:
	      rval += ' (Sequence)';
	      break;
	    case asn1$5.Type.SET:
	      rval += ' (Set)';
	      break;
	    case asn1$5.Type.PRINTABLESTRING:
	      rval += ' (Printable String)';
	      break;
	    case asn1$5.Type.IA5String:
	      rval += ' (IA5String (ASCII))';
	      break;
	    case asn1$5.Type.UTCTIME:
	      rval += ' (UTC time)';
	      break;
	    case asn1$5.Type.GENERALIZEDTIME:
	      rval += ' (Generalized time)';
	      break;
	    case asn1$5.Type.BMPSTRING:
	      rval += ' (BMP String)';
	      break;
	    }
	  } else {
	    rval += obj.type;
	  }

	  rval += '\n';
	  rval += indent + 'Constructed: ' + obj.constructed + '\n';

	  if(obj.composed) {
	    var subvalues = 0;
	    var sub = '';
	    for(var i = 0; i < obj.value.length; ++i) {
	      if(obj.value[i] !== undefined) {
	        subvalues += 1;
	        sub += asn1$5.prettyPrint(obj.value[i], level + 1, indentation);
	        if((i + 1) < obj.value.length) {
	          sub += ',';
	        }
	      }
	    }
	    rval += indent + 'Sub values: ' + subvalues + sub;
	  } else {
	    rval += indent + 'Value: ';
	    if(obj.type === asn1$5.Type.OID) {
	      var oid = asn1$5.derToOid(obj.value);
	      rval += oid;
	      if(forge$w.pki && forge$w.pki.oids) {
	        if(oid in forge$w.pki.oids) {
	          rval += ' (' + forge$w.pki.oids[oid] + ') ';
	        }
	      }
	    }
	    if(obj.type === asn1$5.Type.INTEGER) {
	      try {
	        rval += asn1$5.derToInteger(obj.value);
	      } catch(ex) {
	        rval += '0x' + forge$w.util.bytesToHex(obj.value);
	      }
	    } else if(obj.type === asn1$5.Type.BITSTRING) {
	      // TODO: shift bits as needed to display without padding
	      if(obj.value.length > 1) {
	        // remove unused bits field
	        rval += '0x' + forge$w.util.bytesToHex(obj.value.slice(1));
	      } else {
	        rval += '(none)';
	      }
	      // show unused bit count
	      if(obj.value.length > 0) {
	        var unused = obj.value.charCodeAt(0);
	        if(unused == 1) {
	          rval += ' (1 unused bit shown)';
	        } else if(unused > 1) {
	          rval += ' (' + unused + ' unused bits shown)';
	        }
	      }
	    } else if(obj.type === asn1$5.Type.OCTETSTRING) {
	      if(!_nonLatinRegex.test(obj.value)) {
	        rval += '(' + obj.value + ') ';
	      }
	      rval += '0x' + forge$w.util.bytesToHex(obj.value);
	    } else if(obj.type === asn1$5.Type.UTF8) {
	      rval += forge$w.util.decodeUtf8(obj.value);
	    } else if(obj.type === asn1$5.Type.PRINTABLESTRING ||
	      obj.type === asn1$5.Type.IA5String) {
	      rval += obj.value;
	    } else if(_nonLatinRegex.test(obj.value)) {
	      rval += '0x' + forge$w.util.bytesToHex(obj.value);
	    } else if(obj.value.length === 0) {
	      rval += '[null]';
	    } else {
	      rval += obj.value;
	    }
	  }

	  return rval;
	};

	/**
	 * Cipher base API.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
	 */

	var forge$v = forge$z;


	forge$v.cipher = forge$v.cipher || {};

	// registered algorithms
	forge$v.cipher.algorithms = forge$v.cipher.algorithms || {};

	/**
	 * Creates a cipher object that can be used to encrypt data using the given
	 * algorithm and key. The algorithm may be provided as a string value for a
	 * previously registered algorithm or it may be given as a cipher algorithm
	 * API object.
	 *
	 * @param algorithm the algorithm to use, either a string or an algorithm API
	 *          object.
	 * @param key the key to use, as a binary-encoded string of bytes or a
	 *          byte buffer.
	 *
	 * @return the cipher.
	 */
	forge$v.cipher.createCipher = function(algorithm, key) {
	  var api = algorithm;
	  if(typeof api === 'string') {
	    api = forge$v.cipher.getAlgorithm(api);
	    if(api) {
	      api = api();
	    }
	  }
	  if(!api) {
	    throw new Error('Unsupported algorithm: ' + algorithm);
	  }

	  // assume block cipher
	  return new forge$v.cipher.BlockCipher({
	    algorithm: api,
	    key: key,
	    decrypt: false
	  });
	};

	/**
	 * Creates a decipher object that can be used to decrypt data using the given
	 * algorithm and key. The algorithm may be provided as a string value for a
	 * previously registered algorithm or it may be given as a cipher algorithm
	 * API object.
	 *
	 * @param algorithm the algorithm to use, either a string or an algorithm API
	 *          object.
	 * @param key the key to use, as a binary-encoded string of bytes or a
	 *          byte buffer.
	 *
	 * @return the cipher.
	 */
	forge$v.cipher.createDecipher = function(algorithm, key) {
	  var api = algorithm;
	  if(typeof api === 'string') {
	    api = forge$v.cipher.getAlgorithm(api);
	    if(api) {
	      api = api();
	    }
	  }
	  if(!api) {
	    throw new Error('Unsupported algorithm: ' + algorithm);
	  }

	  // assume block cipher
	  return new forge$v.cipher.BlockCipher({
	    algorithm: api,
	    key: key,
	    decrypt: true
	  });
	};

	/**
	 * Registers an algorithm by name. If the name was already registered, the
	 * algorithm API object will be overwritten.
	 *
	 * @param name the name of the algorithm.
	 * @param algorithm the algorithm API object.
	 */
	forge$v.cipher.registerAlgorithm = function(name, algorithm) {
	  name = name.toUpperCase();
	  forge$v.cipher.algorithms[name] = algorithm;
	};

	/**
	 * Gets a registered algorithm by name.
	 *
	 * @param name the name of the algorithm.
	 *
	 * @return the algorithm, if found, null if not.
	 */
	forge$v.cipher.getAlgorithm = function(name) {
	  name = name.toUpperCase();
	  if(name in forge$v.cipher.algorithms) {
	    return forge$v.cipher.algorithms[name];
	  }
	  return null;
	};

	var BlockCipher = forge$v.cipher.BlockCipher = function(options) {
	  this.algorithm = options.algorithm;
	  this.mode = this.algorithm.mode;
	  this.blockSize = this.mode.blockSize;
	  this._finish = false;
	  this._input = null;
	  this.output = null;
	  this._op = options.decrypt ? this.mode.decrypt : this.mode.encrypt;
	  this._decrypt = options.decrypt;
	  this.algorithm.initialize(options);
	};

	/**
	 * Starts or restarts the encryption or decryption process, whichever
	 * was previously configured.
	 *
	 * For non-GCM mode, the IV may be a binary-encoded string of bytes, an array
	 * of bytes, a byte buffer, or an array of 32-bit integers. If the IV is in
	 * bytes, then it must be Nb (16) bytes in length. If the IV is given in as
	 * 32-bit integers, then it must be 4 integers long.
	 *
	 * Note: an IV is not required or used in ECB mode.
	 *
	 * For GCM-mode, the IV must be given as a binary-encoded string of bytes or
	 * a byte buffer. The number of bytes should be 12 (96 bits) as recommended
	 * by NIST SP-800-38D but another length may be given.
	 *
	 * @param options the options to use:
	 *          iv the initialization vector to use as a binary-encoded string of
	 *            bytes, null to reuse the last ciphered block from a previous
	 *            update() (this "residue" method is for legacy support only).
	 *          additionalData additional authentication data as a binary-encoded
	 *            string of bytes, for 'GCM' mode, (default: none).
	 *          tagLength desired length of authentication tag, in bits, for
	 *            'GCM' mode (0-128, default: 128).
	 *          tag the authentication tag to check if decrypting, as a
	 *             binary-encoded string of bytes.
	 *          output the output the buffer to write to, null to create one.
	 */
	BlockCipher.prototype.start = function(options) {
	  options = options || {};
	  var opts = {};
	  for(var key in options) {
	    opts[key] = options[key];
	  }
	  opts.decrypt = this._decrypt;
	  this._finish = false;
	  this._input = forge$v.util.createBuffer();
	  this.output = options.output || forge$v.util.createBuffer();
	  this.mode.start(opts);
	};

	/**
	 * Updates the next block according to the cipher mode.
	 *
	 * @param input the buffer to read from.
	 */
	BlockCipher.prototype.update = function(input) {
	  if(input) {
	    // input given, so empty it into the input buffer
	    this._input.putBuffer(input);
	  }

	  // do cipher operation until it needs more input and not finished
	  while(!this._op.call(this.mode, this._input, this.output, this._finish) &&
	    !this._finish) {}

	  // free consumed memory from input buffer
	  this._input.compact();
	};

	/**
	 * Finishes encrypting or decrypting.
	 *
	 * @param pad a padding function to use in CBC mode, null for default,
	 *          signature(blockSize, buffer, decrypt).
	 *
	 * @return true if successful, false on error.
	 */
	BlockCipher.prototype.finish = function(pad) {
	  // backwards-compatibility w/deprecated padding API
	  // Note: will overwrite padding functions even after another start() call
	  if(pad && (this.mode.name === 'ECB' || this.mode.name === 'CBC')) {
	    this.mode.pad = function(input) {
	      return pad(this.blockSize, input, false);
	    };
	    this.mode.unpad = function(output) {
	      return pad(this.blockSize, output, true);
	    };
	  }

	  // build options for padding and afterFinish functions
	  var options = {};
	  options.decrypt = this._decrypt;

	  // get # of bytes that won't fill a block
	  options.overflow = this._input.length() % this.blockSize;

	  if(!this._decrypt && this.mode.pad) {
	    if(!this.mode.pad(this._input, options)) {
	      return false;
	    }
	  }

	  // do final update
	  this._finish = true;
	  this.update();

	  if(this._decrypt && this.mode.unpad) {
	    if(!this.mode.unpad(this.output, options)) {
	      return false;
	    }
	  }

	  if(this.mode.afterFinish) {
	    if(!this.mode.afterFinish(this.output, options)) {
	      return false;
	    }
	  }

	  return true;
	};

	/**
	 * Supported cipher modes.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
	 */

	var forge$u = forge$z;


	forge$u.cipher = forge$u.cipher || {};

	// supported cipher modes
	var modes = forge$u.cipher.modes = forge$u.cipher.modes || {};

	/** Electronic codebook (ECB) (Don't use this; it's not secure) **/

	modes.ecb = function(options) {
	  options = options || {};
	  this.name = 'ECB';
	  this.cipher = options.cipher;
	  this.blockSize = options.blockSize || 16;
	  this._ints = this.blockSize / 4;
	  this._inBlock = new Array(this._ints);
	  this._outBlock = new Array(this._ints);
	};

	modes.ecb.prototype.start = function(options) {};

	modes.ecb.prototype.encrypt = function(input, output, finish) {
	  // not enough input to encrypt
	  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {
	    return true;
	  }

	  // get next block
	  for(var i = 0; i < this._ints; ++i) {
	    this._inBlock[i] = input.getInt32();
	  }

	  // encrypt block
	  this.cipher.encrypt(this._inBlock, this._outBlock);

	  // write output
	  for(var i = 0; i < this._ints; ++i) {
	    output.putInt32(this._outBlock[i]);
	  }
	};

	modes.ecb.prototype.decrypt = function(input, output, finish) {
	  // not enough input to decrypt
	  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {
	    return true;
	  }

	  // get next block
	  for(var i = 0; i < this._ints; ++i) {
	    this._inBlock[i] = input.getInt32();
	  }

	  // decrypt block
	  this.cipher.decrypt(this._inBlock, this._outBlock);

	  // write output
	  for(var i = 0; i < this._ints; ++i) {
	    output.putInt32(this._outBlock[i]);
	  }
	};

	modes.ecb.prototype.pad = function(input, options) {
	  // add PKCS#7 padding to block (each pad byte is the
	  // value of the number of pad bytes)
	  var padding = (input.length() === this.blockSize ?
	    this.blockSize : (this.blockSize - input.length()));
	  input.fillWithByte(padding, padding);
	  return true;
	};

	modes.ecb.prototype.unpad = function(output, options) {
	  // check for error: input data not a multiple of blockSize
	  if(options.overflow > 0) {
	    return false;
	  }

	  // ensure padding byte count is valid
	  var len = output.length();
	  var count = output.at(len - 1);
	  if(count > (this.blockSize << 2)) {
	    return false;
	  }

	  // trim off padding bytes
	  output.truncate(count);
	  return true;
	};

	/** Cipher-block Chaining (CBC) **/

	modes.cbc = function(options) {
	  options = options || {};
	  this.name = 'CBC';
	  this.cipher = options.cipher;
	  this.blockSize = options.blockSize || 16;
	  this._ints = this.blockSize / 4;
	  this._inBlock = new Array(this._ints);
	  this._outBlock = new Array(this._ints);
	};

	modes.cbc.prototype.start = function(options) {
	  // Note: legacy support for using IV residue (has security flaws)
	  // if IV is null, reuse block from previous processing
	  if(options.iv === null) {
	    // must have a previous block
	    if(!this._prev) {
	      throw new Error('Invalid IV parameter.');
	    }
	    this._iv = this._prev.slice(0);
	  } else if(!('iv' in options)) {
	    throw new Error('Invalid IV parameter.');
	  } else {
	    // save IV as "previous" block
	    this._iv = transformIV(options.iv, this.blockSize);
	    this._prev = this._iv.slice(0);
	  }
	};

	modes.cbc.prototype.encrypt = function(input, output, finish) {
	  // not enough input to encrypt
	  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {
	    return true;
	  }

	  // get next block
	  // CBC XOR's IV (or previous block) with plaintext
	  for(var i = 0; i < this._ints; ++i) {
	    this._inBlock[i] = this._prev[i] ^ input.getInt32();
	  }

	  // encrypt block
	  this.cipher.encrypt(this._inBlock, this._outBlock);

	  // write output, save previous block
	  for(var i = 0; i < this._ints; ++i) {
	    output.putInt32(this._outBlock[i]);
	  }
	  this._prev = this._outBlock;
	};

	modes.cbc.prototype.decrypt = function(input, output, finish) {
	  // not enough input to decrypt
	  if(input.length() < this.blockSize && !(finish && input.length() > 0)) {
	    return true;
	  }

	  // get next block
	  for(var i = 0; i < this._ints; ++i) {
	    this._inBlock[i] = input.getInt32();
	  }

	  // decrypt block
	  this.cipher.decrypt(this._inBlock, this._outBlock);

	  // write output, save previous ciphered block
	  // CBC XOR's IV (or previous block) with ciphertext
	  for(var i = 0; i < this._ints; ++i) {
	    output.putInt32(this._prev[i] ^ this._outBlock[i]);
	  }
	  this._prev = this._inBlock.slice(0);
	};

	modes.cbc.prototype.pad = function(input, options) {
	  // add PKCS#7 padding to block (each pad byte is the
	  // value of the number of pad bytes)
	  var padding = (input.length() === this.blockSize ?
	    this.blockSize : (this.blockSize - input.length()));
	  input.fillWithByte(padding, padding);
	  return true;
	};

	modes.cbc.prototype.unpad = function(output, options) {
	  // check for error: input data not a multiple of blockSize
	  if(options.overflow > 0) {
	    return false;
	  }

	  // ensure padding byte count is valid
	  var len = output.length();
	  var count = output.at(len - 1);
	  if(count > (this.blockSize << 2)) {
	    return false;
	  }

	  // trim off padding bytes
	  output.truncate(count);
	  return true;
	};

	/** Cipher feedback (CFB) **/

	modes.cfb = function(options) {
	  options = options || {};
	  this.name = 'CFB';
	  this.cipher = options.cipher;
	  this.blockSize = options.blockSize || 16;
	  this._ints = this.blockSize / 4;
	  this._inBlock = null;
	  this._outBlock = new Array(this._ints);
	  this._partialBlock = new Array(this._ints);
	  this._partialOutput = forge$u.util.createBuffer();
	  this._partialBytes = 0;
	};

	modes.cfb.prototype.start = function(options) {
	  if(!('iv' in options)) {
	    throw new Error('Invalid IV parameter.');
	  }
	  // use IV as first input
	  this._iv = transformIV(options.iv, this.blockSize);
	  this._inBlock = this._iv.slice(0);
	  this._partialBytes = 0;
	};

	modes.cfb.prototype.encrypt = function(input, output, finish) {
	  // not enough input to encrypt
	  var inputLength = input.length();
	  if(inputLength === 0) {
	    return true;
	  }

	  // encrypt block
	  this.cipher.encrypt(this._inBlock, this._outBlock);

	  // handle full block
	  if(this._partialBytes === 0 && inputLength >= this.blockSize) {
	    // XOR input with output, write input as output
	    for(var i = 0; i < this._ints; ++i) {
	      this._inBlock[i] = input.getInt32() ^ this._outBlock[i];
	      output.putInt32(this._inBlock[i]);
	    }
	    return;
	  }

	  // handle partial block
	  var partialBytes = (this.blockSize - inputLength) % this.blockSize;
	  if(partialBytes > 0) {
	    partialBytes = this.blockSize - partialBytes;
	  }

	  // XOR input with output, write input as partial output
	  this._partialOutput.clear();
	  for(var i = 0; i < this._ints; ++i) {
	    this._partialBlock[i] = input.getInt32() ^ this._outBlock[i];
	    this._partialOutput.putInt32(this._partialBlock[i]);
	  }

	  if(partialBytes > 0) {
	    // block still incomplete, restore input buffer
	    input.read -= this.blockSize;
	  } else {
	    // block complete, update input block
	    for(var i = 0; i < this._ints; ++i) {
	      this._inBlock[i] = this._partialBlock[i];
	    }
	  }

	  // skip any previous partial bytes
	  if(this._partialBytes > 0) {
	    this._partialOutput.getBytes(this._partialBytes);
	  }

	  if(partialBytes > 0 && !finish) {
	    output.putBytes(this._partialOutput.getBytes(
	      partialBytes - this._partialBytes));
	    this._partialBytes = partialBytes;
	    return true;
	  }

	  output.putBytes(this._partialOutput.getBytes(
	    inputLength - this._partialBytes));
	  this._partialBytes = 0;
	};

	modes.cfb.prototype.decrypt = function(input, output, finish) {
	  // not enough input to decrypt
	  var inputLength = input.length();
	  if(inputLength === 0) {
	    return true;
	  }

	  // encrypt block (CFB always uses encryption mode)
	  this.cipher.encrypt(this._inBlock, this._outBlock);

	  // handle full block
	  if(this._partialBytes === 0 && inputLength >= this.blockSize) {
	    // XOR input with output, write input as output
	    for(var i = 0; i < this._ints; ++i) {
	      this._inBlock[i] = input.getInt32();
	      output.putInt32(this._inBlock[i] ^ this._outBlock[i]);
	    }
	    return;
	  }

	  // handle partial block
	  var partialBytes = (this.blockSize - inputLength) % this.blockSize;
	  if(partialBytes > 0) {
	    partialBytes = this.blockSize - partialBytes;
	  }

	  // XOR input with output, write input as partial output
	  this._partialOutput.clear();
	  for(var i = 0; i < this._ints; ++i) {
	    this._partialBlock[i] = input.getInt32();
	    this._partialOutput.putInt32(this._partialBlock[i] ^ this._outBlock[i]);
	  }

	  if(partialBytes > 0) {
	    // block still incomplete, restore input buffer
	    input.read -= this.blockSize;
	  } else {
	    // block complete, update input block
	    for(var i = 0; i < this._ints; ++i) {
	      this._inBlock[i] = this._partialBlock[i];
	    }
	  }

	  // skip any previous partial bytes
	  if(this._partialBytes > 0) {
	    this._partialOutput.getBytes(this._partialBytes);
	  }

	  if(partialBytes > 0 && !finish) {
	    output.putBytes(this._partialOutput.getBytes(
	      partialBytes - this._partialBytes));
	    this._partialBytes = partialBytes;
	    return true;
	  }

	  output.putBytes(this._partialOutput.getBytes(
	    inputLength - this._partialBytes));
	  this._partialBytes = 0;
	};

	/** Output feedback (OFB) **/

	modes.ofb = function(options) {
	  options = options || {};
	  this.name = 'OFB';
	  this.cipher = options.cipher;
	  this.blockSize = options.blockSize || 16;
	  this._ints = this.blockSize / 4;
	  this._inBlock = null;
	  this._outBlock = new Array(this._ints);
	  this._partialOutput = forge$u.util.createBuffer();
	  this._partialBytes = 0;
	};

	modes.ofb.prototype.start = function(options) {
	  if(!('iv' in options)) {
	    throw new Error('Invalid IV parameter.');
	  }
	  // use IV as first input
	  this._iv = transformIV(options.iv, this.blockSize);
	  this._inBlock = this._iv.slice(0);
	  this._partialBytes = 0;
	};

	modes.ofb.prototype.encrypt = function(input, output, finish) {
	  // not enough input to encrypt
	  var inputLength = input.length();
	  if(input.length() === 0) {
	    return true;
	  }

	  // encrypt block (OFB always uses encryption mode)
	  this.cipher.encrypt(this._inBlock, this._outBlock);

	  // handle full block
	  if(this._partialBytes === 0 && inputLength >= this.blockSize) {
	    // XOR input with output and update next input
	    for(var i = 0; i < this._ints; ++i) {
	      output.putInt32(input.getInt32() ^ this._outBlock[i]);
	      this._inBlock[i] = this._outBlock[i];
	    }
	    return;
	  }

	  // handle partial block
	  var partialBytes = (this.blockSize - inputLength) % this.blockSize;
	  if(partialBytes > 0) {
	    partialBytes = this.blockSize - partialBytes;
	  }

	  // XOR input with output
	  this._partialOutput.clear();
	  for(var i = 0; i < this._ints; ++i) {
	    this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
	  }

	  if(partialBytes > 0) {
	    // block still incomplete, restore input buffer
	    input.read -= this.blockSize;
	  } else {
	    // block complete, update input block
	    for(var i = 0; i < this._ints; ++i) {
	      this._inBlock[i] = this._outBlock[i];
	    }
	  }

	  // skip any previous partial bytes
	  if(this._partialBytes > 0) {
	    this._partialOutput.getBytes(this._partialBytes);
	  }

	  if(partialBytes > 0 && !finish) {
	    output.putBytes(this._partialOutput.getBytes(
	      partialBytes - this._partialBytes));
	    this._partialBytes = partialBytes;
	    return true;
	  }

	  output.putBytes(this._partialOutput.getBytes(
	    inputLength - this._partialBytes));
	  this._partialBytes = 0;
	};

	modes.ofb.prototype.decrypt = modes.ofb.prototype.encrypt;

	/** Counter (CTR) **/

	modes.ctr = function(options) {
	  options = options || {};
	  this.name = 'CTR';
	  this.cipher = options.cipher;
	  this.blockSize = options.blockSize || 16;
	  this._ints = this.blockSize / 4;
	  this._inBlock = null;
	  this._outBlock = new Array(this._ints);
	  this._partialOutput = forge$u.util.createBuffer();
	  this._partialBytes = 0;
	};

	modes.ctr.prototype.start = function(options) {
	  if(!('iv' in options)) {
	    throw new Error('Invalid IV parameter.');
	  }
	  // use IV as first input
	  this._iv = transformIV(options.iv, this.blockSize);
	  this._inBlock = this._iv.slice(0);
	  this._partialBytes = 0;
	};

	modes.ctr.prototype.encrypt = function(input, output, finish) {
	  // not enough input to encrypt
	  var inputLength = input.length();
	  if(inputLength === 0) {
	    return true;
	  }

	  // encrypt block (CTR always uses encryption mode)
	  this.cipher.encrypt(this._inBlock, this._outBlock);

	  // handle full block
	  if(this._partialBytes === 0 && inputLength >= this.blockSize) {
	    // XOR input with output
	    for(var i = 0; i < this._ints; ++i) {
	      output.putInt32(input.getInt32() ^ this._outBlock[i]);
	    }
	  } else {
	    // handle partial block
	    var partialBytes = (this.blockSize - inputLength) % this.blockSize;
	    if(partialBytes > 0) {
	      partialBytes = this.blockSize - partialBytes;
	    }

	    // XOR input with output
	    this._partialOutput.clear();
	    for(var i = 0; i < this._ints; ++i) {
	      this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
	    }

	    if(partialBytes > 0) {
	      // block still incomplete, restore input buffer
	      input.read -= this.blockSize;
	    }

	    // skip any previous partial bytes
	    if(this._partialBytes > 0) {
	      this._partialOutput.getBytes(this._partialBytes);
	    }

	    if(partialBytes > 0 && !finish) {
	      output.putBytes(this._partialOutput.getBytes(
	        partialBytes - this._partialBytes));
	      this._partialBytes = partialBytes;
	      return true;
	    }

	    output.putBytes(this._partialOutput.getBytes(
	      inputLength - this._partialBytes));
	    this._partialBytes = 0;
	  }

	  // block complete, increment counter (input block)
	  inc32(this._inBlock);
	};

	modes.ctr.prototype.decrypt = modes.ctr.prototype.encrypt;

	/** Galois/Counter Mode (GCM) **/

	modes.gcm = function(options) {
	  options = options || {};
	  this.name = 'GCM';
	  this.cipher = options.cipher;
	  this.blockSize = options.blockSize || 16;
	  this._ints = this.blockSize / 4;
	  this._inBlock = new Array(this._ints);
	  this._outBlock = new Array(this._ints);
	  this._partialOutput = forge$u.util.createBuffer();
	  this._partialBytes = 0;

	  // R is actually this value concatenated with 120 more zero bits, but
	  // we only XOR against R so the other zeros have no effect -- we just
	  // apply this value to the first integer in a block
	  this._R = 0xE1000000;
	};

	modes.gcm.prototype.start = function(options) {
	  if(!('iv' in options)) {
	    throw new Error('Invalid IV parameter.');
	  }
	  // ensure IV is a byte buffer
	  var iv = forge$u.util.createBuffer(options.iv);

	  // no ciphered data processed yet
	  this._cipherLength = 0;

	  // default additional data is none
	  var additionalData;
	  if('additionalData' in options) {
	    additionalData = forge$u.util.createBuffer(options.additionalData);
	  } else {
	    additionalData = forge$u.util.createBuffer();
	  }

	  // default tag length is 128 bits
	  if('tagLength' in options) {
	    this._tagLength = options.tagLength;
	  } else {
	    this._tagLength = 128;
	  }

	  // if tag is given, ensure tag matches tag length
	  this._tag = null;
	  if(options.decrypt) {
	    // save tag to check later
	    this._tag = forge$u.util.createBuffer(options.tag).getBytes();
	    if(this._tag.length !== (this._tagLength / 8)) {
	      throw new Error('Authentication tag does not match tag length.');
	    }
	  }

	  // create tmp storage for hash calculation
	  this._hashBlock = new Array(this._ints);

	  // no tag generated yet
	  this.tag = null;

	  // generate hash subkey
	  // (apply block cipher to "zero" block)
	  this._hashSubkey = new Array(this._ints);
	  this.cipher.encrypt([0, 0, 0, 0], this._hashSubkey);

	  // generate table M
	  // use 4-bit tables (32 component decomposition of a 16 byte value)
	  // 8-bit tables take more space and are known to have security
	  // vulnerabilities (in native implementations)
	  this.componentBits = 4;
	  this._m = this.generateHashTable(this._hashSubkey, this.componentBits);

	  // Note: support IV length different from 96 bits? (only supporting
	  // 96 bits is recommended by NIST SP-800-38D)
	  // generate J_0
	  var ivLength = iv.length();
	  if(ivLength === 12) {
	    // 96-bit IV
	    this._j0 = [iv.getInt32(), iv.getInt32(), iv.getInt32(), 1];
	  } else {
	    // IV is NOT 96-bits
	    this._j0 = [0, 0, 0, 0];
	    while(iv.length() > 0) {
	      this._j0 = this.ghash(
	        this._hashSubkey, this._j0,
	        [iv.getInt32(), iv.getInt32(), iv.getInt32(), iv.getInt32()]);
	    }
	    this._j0 = this.ghash(
	      this._hashSubkey, this._j0, [0, 0].concat(from64To32(ivLength * 8)));
	  }

	  // generate ICB (initial counter block)
	  this._inBlock = this._j0.slice(0);
	  inc32(this._inBlock);
	  this._partialBytes = 0;

	  // consume authentication data
	  additionalData = forge$u.util.createBuffer(additionalData);
	  // save additional data length as a BE 64-bit number
	  this._aDataLength = from64To32(additionalData.length() * 8);
	  // pad additional data to 128 bit (16 byte) block size
	  var overflow = additionalData.length() % this.blockSize;
	  if(overflow) {
	    additionalData.fillWithByte(0, this.blockSize - overflow);
	  }
	  this._s = [0, 0, 0, 0];
	  while(additionalData.length() > 0) {
	    this._s = this.ghash(this._hashSubkey, this._s, [
	      additionalData.getInt32(),
	      additionalData.getInt32(),
	      additionalData.getInt32(),
	      additionalData.getInt32()
	    ]);
	  }
	};

	modes.gcm.prototype.encrypt = function(input, output, finish) {
	  // not enough input to encrypt
	  var inputLength = input.length();
	  if(inputLength === 0) {
	    return true;
	  }

	  // encrypt block
	  this.cipher.encrypt(this._inBlock, this._outBlock);

	  // handle full block
	  if(this._partialBytes === 0 && inputLength >= this.blockSize) {
	    // XOR input with output
	    for(var i = 0; i < this._ints; ++i) {
	      output.putInt32(this._outBlock[i] ^= input.getInt32());
	    }
	    this._cipherLength += this.blockSize;
	  } else {
	    // handle partial block
	    var partialBytes = (this.blockSize - inputLength) % this.blockSize;
	    if(partialBytes > 0) {
	      partialBytes = this.blockSize - partialBytes;
	    }

	    // XOR input with output
	    this._partialOutput.clear();
	    for(var i = 0; i < this._ints; ++i) {
	      this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
	    }

	    if(partialBytes <= 0 || finish) {
	      // handle overflow prior to hashing
	      if(finish) {
	        // get block overflow
	        var overflow = inputLength % this.blockSize;
	        this._cipherLength += overflow;
	        // truncate for hash function
	        this._partialOutput.truncate(this.blockSize - overflow);
	      } else {
	        this._cipherLength += this.blockSize;
	      }

	      // get output block for hashing
	      for(var i = 0; i < this._ints; ++i) {
	        this._outBlock[i] = this._partialOutput.getInt32();
	      }
	      this._partialOutput.read -= this.blockSize;
	    }

	    // skip any previous partial bytes
	    if(this._partialBytes > 0) {
	      this._partialOutput.getBytes(this._partialBytes);
	    }

	    if(partialBytes > 0 && !finish) {
	      // block still incomplete, restore input buffer, get partial output,
	      // and return early
	      input.read -= this.blockSize;
	      output.putBytes(this._partialOutput.getBytes(
	        partialBytes - this._partialBytes));
	      this._partialBytes = partialBytes;
	      return true;
	    }

	    output.putBytes(this._partialOutput.getBytes(
	      inputLength - this._partialBytes));
	    this._partialBytes = 0;
	  }

	  // update hash block S
	  this._s = this.ghash(this._hashSubkey, this._s, this._outBlock);

	  // increment counter (input block)
	  inc32(this._inBlock);
	};

	modes.gcm.prototype.decrypt = function(input, output, finish) {
	  // not enough input to decrypt
	  var inputLength = input.length();
	  if(inputLength < this.blockSize && !(finish && inputLength > 0)) {
	    return true;
	  }

	  // encrypt block (GCM always uses encryption mode)
	  this.cipher.encrypt(this._inBlock, this._outBlock);

	  // increment counter (input block)
	  inc32(this._inBlock);

	  // update hash block S
	  this._hashBlock[0] = input.getInt32();
	  this._hashBlock[1] = input.getInt32();
	  this._hashBlock[2] = input.getInt32();
	  this._hashBlock[3] = input.getInt32();
	  this._s = this.ghash(this._hashSubkey, this._s, this._hashBlock);

	  // XOR hash input with output
	  for(var i = 0; i < this._ints; ++i) {
	    output.putInt32(this._outBlock[i] ^ this._hashBlock[i]);
	  }

	  // increment cipher data length
	  if(inputLength < this.blockSize) {
	    this._cipherLength += inputLength % this.blockSize;
	  } else {
	    this._cipherLength += this.blockSize;
	  }
	};

	modes.gcm.prototype.afterFinish = function(output, options) {
	  var rval = true;

	  // handle overflow
	  if(options.decrypt && options.overflow) {
	    output.truncate(this.blockSize - options.overflow);
	  }

	  // handle authentication tag
	  this.tag = forge$u.util.createBuffer();

	  // concatenate additional data length with cipher length
	  var lengths = this._aDataLength.concat(from64To32(this._cipherLength * 8));

	  // include lengths in hash
	  this._s = this.ghash(this._hashSubkey, this._s, lengths);

	  // do GCTR(J_0, S)
	  var tag = [];
	  this.cipher.encrypt(this._j0, tag);
	  for(var i = 0; i < this._ints; ++i) {
	    this.tag.putInt32(this._s[i] ^ tag[i]);
	  }

	  // trim tag to length
	  this.tag.truncate(this.tag.length() % (this._tagLength / 8));

	  // check authentication tag
	  if(options.decrypt && this.tag.bytes() !== this._tag) {
	    rval = false;
	  }

	  return rval;
	};

	/**
	 * See NIST SP-800-38D 6.3 (Algorithm 1). This function performs Galois
	 * field multiplication. The field, GF(2^128), is defined by the polynomial:
	 *
	 * x^128 + x^7 + x^2 + x + 1
	 *
	 * Which is represented in little-endian binary form as: 11100001 (0xe1). When
	 * the value of a coefficient is 1, a bit is set. The value R, is the
	 * concatenation of this value and 120 zero bits, yielding a 128-bit value
	 * which matches the block size.
	 *
	 * This function will multiply two elements (vectors of bytes), X and Y, in
	 * the field GF(2^128). The result is initialized to zero. For each bit of
	 * X (out of 128), x_i, if x_i is set, then the result is multiplied (XOR'd)
	 * by the current value of Y. For each bit, the value of Y will be raised by
	 * a power of x (multiplied by the polynomial x). This can be achieved by
	 * shifting Y once to the right. If the current value of Y, prior to being
	 * multiplied by x, has 0 as its LSB, then it is a 127th degree polynomial.
	 * Otherwise, we must divide by R after shifting to find the remainder.
	 *
	 * @param x the first block to multiply by the second.
	 * @param y the second block to multiply by the first.
	 *
	 * @return the block result of the multiplication.
	 */
	modes.gcm.prototype.multiply = function(x, y) {
	  var z_i = [0, 0, 0, 0];
	  var v_i = y.slice(0);

	  // calculate Z_128 (block has 128 bits)
	  for(var i = 0; i < 128; ++i) {
	    // if x_i is 0, Z_{i+1} = Z_i (unchanged)
	    // else Z_{i+1} = Z_i ^ V_i
	    // get x_i by finding 32-bit int position, then left shift 1 by remainder
	    var x_i = x[(i / 32) | 0] & (1 << (31 - i % 32));
	    if(x_i) {
	      z_i[0] ^= v_i[0];
	      z_i[1] ^= v_i[1];
	      z_i[2] ^= v_i[2];
	      z_i[3] ^= v_i[3];
	    }

	    // if LSB(V_i) is 1, V_i = V_i >> 1
	    // else V_i = (V_i >> 1) ^ R
	    this.pow(v_i, v_i);
	  }

	  return z_i;
	};

	modes.gcm.prototype.pow = function(x, out) {
	  // if LSB(x) is 1, x = x >>> 1
	  // else x = (x >>> 1) ^ R
	  var lsb = x[3] & 1;

	  // always do x >>> 1:
	  // starting with the rightmost integer, shift each integer to the right
	  // one bit, pulling in the bit from the integer to the left as its top
	  // most bit (do this for the last 3 integers)
	  for(var i = 3; i > 0; --i) {
	    out[i] = (x[i] >>> 1) | ((x[i - 1] & 1) << 31);
	  }
	  // shift the first integer normally
	  out[0] = x[0] >>> 1;

	  // if lsb was not set, then polynomial had a degree of 127 and doesn't
	  // need to divided; otherwise, XOR with R to find the remainder; we only
	  // need to XOR the first integer since R technically ends w/120 zero bits
	  if(lsb) {
	    out[0] ^= this._R;
	  }
	};

	modes.gcm.prototype.tableMultiply = function(x) {
	  // assumes 4-bit tables are used
	  var z = [0, 0, 0, 0];
	  for(var i = 0; i < 32; ++i) {
	    var idx = (i / 8) | 0;
	    var x_i = (x[idx] >>> ((7 - (i % 8)) * 4)) & 0xF;
	    var ah = this._m[i][x_i];
	    z[0] ^= ah[0];
	    z[1] ^= ah[1];
	    z[2] ^= ah[2];
	    z[3] ^= ah[3];
	  }
	  return z;
	};

	/**
	 * A continuing version of the GHASH algorithm that operates on a single
	 * block. The hash block, last hash value (Ym) and the new block to hash
	 * are given.
	 *
	 * @param h the hash block.
	 * @param y the previous value for Ym, use [0, 0, 0, 0] for a new hash.
	 * @param x the block to hash.
	 *
	 * @return the hashed value (Ym).
	 */
	modes.gcm.prototype.ghash = function(h, y, x) {
	  y[0] ^= x[0];
	  y[1] ^= x[1];
	  y[2] ^= x[2];
	  y[3] ^= x[3];
	  return this.tableMultiply(y);
	  //return this.multiply(y, h);
	};

	/**
	 * Precomputes a table for multiplying against the hash subkey. This
	 * mechanism provides a substantial speed increase over multiplication
	 * performed without a table. The table-based multiplication this table is
	 * for solves X * H by multiplying each component of X by H and then
	 * composing the results together using XOR.
	 *
	 * This function can be used to generate tables with different bit sizes
	 * for the components, however, this implementation assumes there are
	 * 32 components of X (which is a 16 byte vector), therefore each component
	 * takes 4-bits (so the table is constructed with bits=4).
	 *
	 * @param h the hash subkey.
	 * @param bits the bit size for a component.
	 */
	modes.gcm.prototype.generateHashTable = function(h, bits) {
	  // TODO: There are further optimizations that would use only the
	  // first table M_0 (or some variant) along with a remainder table;
	  // this can be explored in the future
	  var multiplier = 8 / bits;
	  var perInt = 4 * multiplier;
	  var size = 16 * multiplier;
	  var m = new Array(size);
	  for(var i = 0; i < size; ++i) {
	    var tmp = [0, 0, 0, 0];
	    var idx = (i / perInt) | 0;
	    var shft = ((perInt - 1 - (i % perInt)) * bits);
	    tmp[idx] = (1 << (bits - 1)) << shft;
	    m[i] = this.generateSubHashTable(this.multiply(tmp, h), bits);
	  }
	  return m;
	};

	/**
	 * Generates a table for multiplying against the hash subkey for one
	 * particular component (out of all possible component values).
	 *
	 * @param mid the pre-multiplied value for the middle key of the table.
	 * @param bits the bit size for a component.
	 */
	modes.gcm.prototype.generateSubHashTable = function(mid, bits) {
	  // compute the table quickly by minimizing the number of
	  // POW operations -- they only need to be performed for powers of 2,
	  // all other entries can be composed from those powers using XOR
	  var size = 1 << bits;
	  var half = size >>> 1;
	  var m = new Array(size);
	  m[half] = mid.slice(0);
	  var i = half >>> 1;
	  while(i > 0) {
	    // raise m0[2 * i] and store in m0[i]
	    this.pow(m[2 * i], m[i] = []);
	    i >>= 1;
	  }
	  i = 2;
	  while(i < half) {
	    for(var j = 1; j < i; ++j) {
	      var m_i = m[i];
	      var m_j = m[j];
	      m[i + j] = [
	        m_i[0] ^ m_j[0],
	        m_i[1] ^ m_j[1],
	        m_i[2] ^ m_j[2],
	        m_i[3] ^ m_j[3]
	      ];
	    }
	    i *= 2;
	  }
	  m[0] = [0, 0, 0, 0];
	  /* Note: We could avoid storing these by doing composition during multiply
	  calculate top half using composition by speed is preferred. */
	  for(i = half + 1; i < size; ++i) {
	    var c = m[i ^ half];
	    m[i] = [mid[0] ^ c[0], mid[1] ^ c[1], mid[2] ^ c[2], mid[3] ^ c[3]];
	  }
	  return m;
	};

	/** Utility functions */

	function transformIV(iv, blockSize) {
	  if(typeof iv === 'string') {
	    // convert iv string into byte buffer
	    iv = forge$u.util.createBuffer(iv);
	  }

	  if(forge$u.util.isArray(iv) && iv.length > 4) {
	    // convert iv byte array into byte buffer
	    var tmp = iv;
	    iv = forge$u.util.createBuffer();
	    for(var i = 0; i < tmp.length; ++i) {
	      iv.putByte(tmp[i]);
	    }
	  }

	  if(iv.length() < blockSize) {
	    throw new Error(
	      'Invalid IV length; got ' + iv.length() +
	      ' bytes and expected ' + blockSize + ' bytes.');
	  }

	  if(!forge$u.util.isArray(iv)) {
	    // convert iv byte buffer into 32-bit integer array
	    var ints = [];
	    var blocks = blockSize / 4;
	    for(var i = 0; i < blocks; ++i) {
	      ints.push(iv.getInt32());
	    }
	    iv = ints;
	  }

	  return iv;
	}

	function inc32(block) {
	  // increment last 32 bits of block only
	  block[block.length - 1] = (block[block.length - 1] + 1) & 0xFFFFFFFF;
	}

	function from64To32(num) {
	  // convert 64-bit number to two BE Int32s
	  return [(num / 0x100000000) | 0, num & 0xFFFFFFFF];
	}

	/**
	 * Advanced Encryption Standard (AES) implementation.
	 *
	 * This implementation is based on the public domain library 'jscrypto' which
	 * was written by:
	 *
	 * Emily Stark (estark@stanford.edu)
	 * Mike Hamburg (mhamburg@stanford.edu)
	 * Dan Boneh (dabo@cs.stanford.edu)
	 *
	 * Parts of this code are based on the OpenSSL implementation of AES:
	 * http://www.openssl.org
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
	 */

	var forge$t = forge$z;




	/* AES API */
	forge$t.aes = forge$t.aes || {};

	/**
	 * Deprecated. Instead, use:
	 *
	 * var cipher = forge.cipher.createCipher('AES-<mode>', key);
	 * cipher.start({iv: iv});
	 *
	 * Creates an AES cipher object to encrypt data using the given symmetric key.
	 * The output will be stored in the 'output' member of the returned cipher.
	 *
	 * The key and iv may be given as a string of bytes, an array of bytes,
	 * a byte buffer, or an array of 32-bit words.
	 *
	 * @param key the symmetric key to use.
	 * @param iv the initialization vector to use.
	 * @param output the buffer to write to, null to create one.
	 * @param mode the cipher mode to use (default: 'CBC').
	 *
	 * @return the cipher.
	 */
	forge$t.aes.startEncrypting = function(key, iv, output, mode) {
	  var cipher = _createCipher$1({
	    key: key,
	    output: output,
	    decrypt: false,
	    mode: mode
	  });
	  cipher.start(iv);
	  return cipher;
	};

	/**
	 * Deprecated. Instead, use:
	 *
	 * var cipher = forge.cipher.createCipher('AES-<mode>', key);
	 *
	 * Creates an AES cipher object to encrypt data using the given symmetric key.
	 *
	 * The key may be given as a string of bytes, an array of bytes, a
	 * byte buffer, or an array of 32-bit words.
	 *
	 * @param key the symmetric key to use.
	 * @param mode the cipher mode to use (default: 'CBC').
	 *
	 * @return the cipher.
	 */
	forge$t.aes.createEncryptionCipher = function(key, mode) {
	  return _createCipher$1({
	    key: key,
	    output: null,
	    decrypt: false,
	    mode: mode
	  });
	};

	/**
	 * Deprecated. Instead, use:
	 *
	 * var decipher = forge.cipher.createDecipher('AES-<mode>', key);
	 * decipher.start({iv: iv});
	 *
	 * Creates an AES cipher object to decrypt data using the given symmetric key.
	 * The output will be stored in the 'output' member of the returned cipher.
	 *
	 * The key and iv may be given as a string of bytes, an array of bytes,
	 * a byte buffer, or an array of 32-bit words.
	 *
	 * @param key the symmetric key to use.
	 * @param iv the initialization vector to use.
	 * @param output the buffer to write to, null to create one.
	 * @param mode the cipher mode to use (default: 'CBC').
	 *
	 * @return the cipher.
	 */
	forge$t.aes.startDecrypting = function(key, iv, output, mode) {
	  var cipher = _createCipher$1({
	    key: key,
	    output: output,
	    decrypt: true,
	    mode: mode
	  });
	  cipher.start(iv);
	  return cipher;
	};

	/**
	 * Deprecated. Instead, use:
	 *
	 * var decipher = forge.cipher.createDecipher('AES-<mode>', key);
	 *
	 * Creates an AES cipher object to decrypt data using the given symmetric key.
	 *
	 * The key may be given as a string of bytes, an array of bytes, a
	 * byte buffer, or an array of 32-bit words.
	 *
	 * @param key the symmetric key to use.
	 * @param mode the cipher mode to use (default: 'CBC').
	 *
	 * @return the cipher.
	 */
	forge$t.aes.createDecryptionCipher = function(key, mode) {
	  return _createCipher$1({
	    key: key,
	    output: null,
	    decrypt: true,
	    mode: mode
	  });
	};

	/**
	 * Creates a new AES cipher algorithm object.
	 *
	 * @param name the name of the algorithm.
	 * @param mode the mode factory function.
	 *
	 * @return the AES algorithm object.
	 */
	forge$t.aes.Algorithm = function(name, mode) {
	  if(!init) {
	    initialize();
	  }
	  var self = this;
	  self.name = name;
	  self.mode = new mode({
	    blockSize: 16,
	    cipher: {
	      encrypt: function(inBlock, outBlock) {
	        return _updateBlock$1(self._w, inBlock, outBlock, false);
	      },
	      decrypt: function(inBlock, outBlock) {
	        return _updateBlock$1(self._w, inBlock, outBlock, true);
	      }
	    }
	  });
	  self._init = false;
	};

	/**
	 * Initializes this AES algorithm by expanding its key.
	 *
	 * @param options the options to use.
	 *          key the key to use with this algorithm.
	 *          decrypt true if the algorithm should be initialized for decryption,
	 *            false for encryption.
	 */
	forge$t.aes.Algorithm.prototype.initialize = function(options) {
	  if(this._init) {
	    return;
	  }

	  var key = options.key;
	  var tmp;

	  /* Note: The key may be a string of bytes, an array of bytes, a byte
	    buffer, or an array of 32-bit integers. If the key is in bytes, then
	    it must be 16, 24, or 32 bytes in length. If it is in 32-bit
	    integers, it must be 4, 6, or 8 integers long. */

	  if(typeof key === 'string' &&
	    (key.length === 16 || key.length === 24 || key.length === 32)) {
	    // convert key string into byte buffer
	    key = forge$t.util.createBuffer(key);
	  } else if(forge$t.util.isArray(key) &&
	    (key.length === 16 || key.length === 24 || key.length === 32)) {
	    // convert key integer array into byte buffer
	    tmp = key;
	    key = forge$t.util.createBuffer();
	    for(var i = 0; i < tmp.length; ++i) {
	      key.putByte(tmp[i]);
	    }
	  }

	  // convert key byte buffer into 32-bit integer array
	  if(!forge$t.util.isArray(key)) {
	    tmp = key;
	    key = [];

	    // key lengths of 16, 24, 32 bytes allowed
	    var len = tmp.length();
	    if(len === 16 || len === 24 || len === 32) {
	      len = len >>> 2;
	      for(var i = 0; i < len; ++i) {
	        key.push(tmp.getInt32());
	      }
	    }
	  }

	  // key must be an array of 32-bit integers by now
	  if(!forge$t.util.isArray(key) ||
	    !(key.length === 4 || key.length === 6 || key.length === 8)) {
	    throw new Error('Invalid key parameter.');
	  }

	  // encryption operation is always used for these modes
	  var mode = this.mode.name;
	  var encryptOp = (['CFB', 'OFB', 'CTR', 'GCM'].indexOf(mode) !== -1);

	  // do key expansion
	  this._w = _expandKey(key, options.decrypt && !encryptOp);
	  this._init = true;
	};

	/**
	 * Expands a key. Typically only used for testing.
	 *
	 * @param key the symmetric key to expand, as an array of 32-bit words.
	 * @param decrypt true to expand for decryption, false for encryption.
	 *
	 * @return the expanded key.
	 */
	forge$t.aes._expandKey = function(key, decrypt) {
	  if(!init) {
	    initialize();
	  }
	  return _expandKey(key, decrypt);
	};

	/**
	 * Updates a single block. Typically only used for testing.
	 *
	 * @param w the expanded key to use.
	 * @param input an array of block-size 32-bit words.
	 * @param output an array of block-size 32-bit words.
	 * @param decrypt true to decrypt, false to encrypt.
	 */
	forge$t.aes._updateBlock = _updateBlock$1;

	/** Register AES algorithms **/

	registerAlgorithm$1('AES-ECB', forge$t.cipher.modes.ecb);
	registerAlgorithm$1('AES-CBC', forge$t.cipher.modes.cbc);
	registerAlgorithm$1('AES-CFB', forge$t.cipher.modes.cfb);
	registerAlgorithm$1('AES-OFB', forge$t.cipher.modes.ofb);
	registerAlgorithm$1('AES-CTR', forge$t.cipher.modes.ctr);
	registerAlgorithm$1('AES-GCM', forge$t.cipher.modes.gcm);

	function registerAlgorithm$1(name, mode) {
	  var factory = function() {
	    return new forge$t.aes.Algorithm(name, mode);
	  };
	  forge$t.cipher.registerAlgorithm(name, factory);
	}

	/** AES implementation **/

	var init = false; // not yet initialized
	var Nb = 4;       // number of words comprising the state (AES = 4)
	var sbox;         // non-linear substitution table used in key expansion
	var isbox;        // inversion of sbox
	var rcon;         // round constant word array
	var mix;          // mix-columns table
	var imix;         // inverse mix-columns table

	/**
	 * Performs initialization, ie: precomputes tables to optimize for speed.
	 *
	 * One way to understand how AES works is to imagine that 'addition' and
	 * 'multiplication' are interfaces that require certain mathematical
	 * properties to hold true (ie: they are associative) but they might have
	 * different implementations and produce different kinds of results ...
	 * provided that their mathematical properties remain true. AES defines
	 * its own methods of addition and multiplication but keeps some important
	 * properties the same, ie: associativity and distributivity. The
	 * explanation below tries to shed some light on how AES defines addition
	 * and multiplication of bytes and 32-bit words in order to perform its
	 * encryption and decryption algorithms.
	 *
	 * The basics:
	 *
	 * The AES algorithm views bytes as binary representations of polynomials
	 * that have either 1 or 0 as the coefficients. It defines the addition
	 * or subtraction of two bytes as the XOR operation. It also defines the
	 * multiplication of two bytes as a finite field referred to as GF(2^8)
	 * (Note: 'GF' means "Galois Field" which is a field that contains a finite
	 * number of elements so GF(2^8) has 256 elements).
	 *
	 * This means that any two bytes can be represented as binary polynomials;
	 * when they multiplied together and modularly reduced by an irreducible
	 * polynomial of the 8th degree, the results are the field GF(2^8). The
	 * specific irreducible polynomial that AES uses in hexadecimal is 0x11b.
	 * This multiplication is associative with 0x01 as the identity:
	 *
	 * (b * 0x01 = GF(b, 0x01) = b).
	 *
	 * The operation GF(b, 0x02) can be performed at the byte level by left
	 * shifting b once and then XOR'ing it (to perform the modular reduction)
	 * with 0x11b if b is >= 128. Repeated application of the multiplication
	 * of 0x02 can be used to implement the multiplication of any two bytes.
	 *
	 * For instance, multiplying 0x57 and 0x13, denoted as GF(0x57, 0x13), can
	 * be performed by factoring 0x13 into 0x01, 0x02, and 0x10. Then these
	 * factors can each be multiplied by 0x57 and then added together. To do
	 * the multiplication, values for 0x57 multiplied by each of these 3 factors
	 * can be precomputed and stored in a table. To add them, the values from
	 * the table are XOR'd together.
	 *
	 * AES also defines addition and multiplication of words, that is 4-byte
	 * numbers represented as polynomials of 3 degrees where the coefficients
	 * are the values of the bytes.
	 *
	 * The word [a0, a1, a2, a3] is a polynomial a3x^3 + a2x^2 + a1x + a0.
	 *
	 * Addition is performed by XOR'ing like powers of x. Multiplication
	 * is performed in two steps, the first is an algebriac expansion as
	 * you would do normally (where addition is XOR). But the result is
	 * a polynomial larger than 3 degrees and thus it cannot fit in a word. So
	 * next the result is modularly reduced by an AES-specific polynomial of
	 * degree 4 which will always produce a polynomial of less than 4 degrees
	 * such that it will fit in a word. In AES, this polynomial is x^4 + 1.
	 *
	 * The modular product of two polynomials 'a' and 'b' is thus:
	 *
	 * d(x) = d3x^3 + d2x^2 + d1x + d0
	 * with
	 * d0 = GF(a0, b0) ^ GF(a3, b1) ^ GF(a2, b2) ^ GF(a1, b3)
	 * d1 = GF(a1, b0) ^ GF(a0, b1) ^ GF(a3, b2) ^ GF(a2, b3)
	 * d2 = GF(a2, b0) ^ GF(a1, b1) ^ GF(a0, b2) ^ GF(a3, b3)
	 * d3 = GF(a3, b0) ^ GF(a2, b1) ^ GF(a1, b2) ^ GF(a0, b3)
	 *
	 * As a matrix:
	 *
	 * [d0] = [a0 a3 a2 a1][b0]
	 * [d1]   [a1 a0 a3 a2][b1]
	 * [d2]   [a2 a1 a0 a3][b2]
	 * [d3]   [a3 a2 a1 a0][b3]
	 *
	 * Special polynomials defined by AES (0x02 == {02}):
	 * a(x)    = {03}x^3 + {01}x^2 + {01}x + {02}
	 * a^-1(x) = {0b}x^3 + {0d}x^2 + {09}x + {0e}.
	 *
	 * These polynomials are used in the MixColumns() and InverseMixColumns()
	 * operations, respectively, to cause each element in the state to affect
	 * the output (referred to as diffusing).
	 *
	 * RotWord() uses: a0 = a1 = a2 = {00} and a3 = {01}, which is the
	 * polynomial x3.
	 *
	 * The ShiftRows() method modifies the last 3 rows in the state (where
	 * the state is 4 words with 4 bytes per word) by shifting bytes cyclically.
	 * The 1st byte in the second row is moved to the end of the row. The 1st
	 * and 2nd bytes in the third row are moved to the end of the row. The 1st,
	 * 2nd, and 3rd bytes are moved in the fourth row.
	 *
	 * More details on how AES arithmetic works:
	 *
	 * In the polynomial representation of binary numbers, XOR performs addition
	 * and subtraction and multiplication in GF(2^8) denoted as GF(a, b)
	 * corresponds with the multiplication of polynomials modulo an irreducible
	 * polynomial of degree 8. In other words, for AES, GF(a, b) will multiply
	 * polynomial 'a' with polynomial 'b' and then do a modular reduction by
	 * an AES-specific irreducible polynomial of degree 8.
	 *
	 * A polynomial is irreducible if its only divisors are one and itself. For
	 * the AES algorithm, this irreducible polynomial is:
	 *
	 * m(x) = x^8 + x^4 + x^3 + x + 1,
	 *
	 * or {01}{1b} in hexadecimal notation, where each coefficient is a bit:
	 * 100011011 = 283 = 0x11b.
	 *
	 * For example, GF(0x57, 0x83) = 0xc1 because
	 *
	 * 0x57 = 87  = 01010111 = x^6 + x^4 + x^2 + x + 1
	 * 0x85 = 131 = 10000101 = x^7 + x + 1
	 *
	 * (x^6 + x^4 + x^2 + x + 1) * (x^7 + x + 1)
	 * =  x^13 + x^11 + x^9 + x^8 + x^7 +
	 *    x^7 + x^5 + x^3 + x^2 + x +
	 *    x^6 + x^4 + x^2 + x + 1
	 * =  x^13 + x^11 + x^9 + x^8 + x^6 + x^5 + x^4 + x^3 + 1 = y
	 *    y modulo (x^8 + x^4 + x^3 + x + 1)
	 * =  x^7 + x^6 + 1.
	 *
	 * The modular reduction by m(x) guarantees the result will be a binary
	 * polynomial of less than degree 8, so that it can fit in a byte.
	 *
	 * The operation to multiply a binary polynomial b with x (the polynomial
	 * x in binary representation is 00000010) is:
	 *
	 * b_7x^8 + b_6x^7 + b_5x^6 + b_4x^5 + b_3x^4 + b_2x^3 + b_1x^2 + b_0x^1
	 *
	 * To get GF(b, x) we must reduce that by m(x). If b_7 is 0 (that is the
	 * most significant bit is 0 in b) then the result is already reduced. If
	 * it is 1, then we can reduce it by subtracting m(x) via an XOR.
	 *
	 * It follows that multiplication by x (00000010 or 0x02) can be implemented
	 * by performing a left shift followed by a conditional bitwise XOR with
	 * 0x1b. This operation on bytes is denoted by xtime(). Multiplication by
	 * higher powers of x can be implemented by repeated application of xtime().
	 *
	 * By adding intermediate results, multiplication by any constant can be
	 * implemented. For instance:
	 *
	 * GF(0x57, 0x13) = 0xfe because:
	 *
	 * xtime(b) = (b & 128) ? (b << 1 ^ 0x11b) : (b << 1)
	 *
	 * Note: We XOR with 0x11b instead of 0x1b because in javascript our
	 * datatype for b can be larger than 1 byte, so a left shift will not
	 * automatically eliminate bits that overflow a byte ... by XOR'ing the
	 * overflow bit with 1 (the extra one from 0x11b) we zero it out.
	 *
	 * GF(0x57, 0x02) = xtime(0x57) = 0xae
	 * GF(0x57, 0x04) = xtime(0xae) = 0x47
	 * GF(0x57, 0x08) = xtime(0x47) = 0x8e
	 * GF(0x57, 0x10) = xtime(0x8e) = 0x07
	 *
	 * GF(0x57, 0x13) = GF(0x57, (0x01 ^ 0x02 ^ 0x10))
	 *
	 * And by the distributive property (since XOR is addition and GF() is
	 * multiplication):
	 *
	 * = GF(0x57, 0x01) ^ GF(0x57, 0x02) ^ GF(0x57, 0x10)
	 * = 0x57 ^ 0xae ^ 0x07
	 * = 0xfe.
	 */
	function initialize() {
	  init = true;

	  /* Populate the Rcon table. These are the values given by
	    [x^(i-1),{00},{00},{00}] where x^(i-1) are powers of x (and x = 0x02)
	    in the field of GF(2^8), where i starts at 1.

	    rcon[0] = [0x00, 0x00, 0x00, 0x00]
	    rcon[1] = [0x01, 0x00, 0x00, 0x00] 2^(1-1) = 2^0 = 1
	    rcon[2] = [0x02, 0x00, 0x00, 0x00] 2^(2-1) = 2^1 = 2
	    ...
	    rcon[9]  = [0x1B, 0x00, 0x00, 0x00] 2^(9-1)  = 2^8 = 0x1B
	    rcon[10] = [0x36, 0x00, 0x00, 0x00] 2^(10-1) = 2^9 = 0x36

	    We only store the first byte because it is the only one used.
	  */
	  rcon = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36];

	  // compute xtime table which maps i onto GF(i, 0x02)
	  var xtime = new Array(256);
	  for(var i = 0; i < 128; ++i) {
	    xtime[i] = i << 1;
	    xtime[i + 128] = (i + 128) << 1 ^ 0x11B;
	  }

	  // compute all other tables
	  sbox = new Array(256);
	  isbox = new Array(256);
	  mix = new Array(4);
	  imix = new Array(4);
	  for(var i = 0; i < 4; ++i) {
	    mix[i] = new Array(256);
	    imix[i] = new Array(256);
	  }
	  var e = 0, ei = 0, e2, e4, e8, sx, sx2, me, ime;
	  for(var i = 0; i < 256; ++i) {
	    /* We need to generate the SubBytes() sbox and isbox tables so that
	      we can perform byte substitutions. This requires us to traverse
	      all of the elements in GF, find their multiplicative inverses,
	      and apply to each the following affine transformation:

	      bi' = bi ^ b(i + 4) mod 8 ^ b(i + 5) mod 8 ^ b(i + 6) mod 8 ^
	            b(i + 7) mod 8 ^ ci
	      for 0 <= i < 8, where bi is the ith bit of the byte, and ci is the
	      ith bit of a byte c with the value {63} or {01100011}.

	      It is possible to traverse every possible value in a Galois field
	      using what is referred to as a 'generator'. There are many
	      generators (128 out of 256): 3,5,6,9,11,82 to name a few. To fully
	      traverse GF we iterate 255 times, multiplying by our generator
	      each time.

	      On each iteration we can determine the multiplicative inverse for
	      the current element.

	      Suppose there is an element in GF 'e'. For a given generator 'g',
	      e = g^x. The multiplicative inverse of e is g^(255 - x). It turns
	      out that if use the inverse of a generator as another generator
	      it will produce all of the corresponding multiplicative inverses
	      at the same time. For this reason, we choose 5 as our inverse
	      generator because it only requires 2 multiplies and 1 add and its
	      inverse, 82, requires relatively few operations as well.

	      In order to apply the affine transformation, the multiplicative
	      inverse 'ei' of 'e' can be repeatedly XOR'd (4 times) with a
	      bit-cycling of 'ei'. To do this 'ei' is first stored in 's' and
	      'x'. Then 's' is left shifted and the high bit of 's' is made the
	      low bit. The resulting value is stored in 's'. Then 'x' is XOR'd
	      with 's' and stored in 'x'. On each subsequent iteration the same
	      operation is performed. When 4 iterations are complete, 'x' is
	      XOR'd with 'c' (0x63) and the transformed value is stored in 'x'.
	      For example:

	      s = 01000001
	      x = 01000001

	      iteration 1: s = 10000010, x ^= s
	      iteration 2: s = 00000101, x ^= s
	      iteration 3: s = 00001010, x ^= s
	      iteration 4: s = 00010100, x ^= s
	      x ^= 0x63

	      This can be done with a loop where s = (s << 1) | (s >> 7). However,
	      it can also be done by using a single 16-bit (in this case 32-bit)
	      number 'sx'. Since XOR is an associative operation, we can set 'sx'
	      to 'ei' and then XOR it with 'sx' left-shifted 1,2,3, and 4 times.
	      The most significant bits will flow into the high 8 bit positions
	      and be correctly XOR'd with one another. All that remains will be
	      to cycle the high 8 bits by XOR'ing them all with the lower 8 bits
	      afterwards.

	      At the same time we're populating sbox and isbox we can precompute
	      the multiplication we'll need to do to do MixColumns() later.
	    */

	    // apply affine transformation
	    sx = ei ^ (ei << 1) ^ (ei << 2) ^ (ei << 3) ^ (ei << 4);
	    sx = (sx >> 8) ^ (sx & 255) ^ 0x63;

	    // update tables
	    sbox[e] = sx;
	    isbox[sx] = e;

	    /* Mixing columns is done using matrix multiplication. The columns
	      that are to be mixed are each a single word in the current state.
	      The state has Nb columns (4 columns). Therefore each column is a
	      4 byte word. So to mix the columns in a single column 'c' where
	      its rows are r0, r1, r2, and r3, we use the following matrix
	      multiplication:

	      [2 3 1 1]*[r0,c]=[r'0,c]
	      [1 2 3 1] [r1,c] [r'1,c]
	      [1 1 2 3] [r2,c] [r'2,c]
	      [3 1 1 2] [r3,c] [r'3,c]

	      r0, r1, r2, and r3 are each 1 byte of one of the words in the
	      state (a column). To do matrix multiplication for each mixed
	      column c' we multiply the corresponding row from the left matrix
	      with the corresponding column from the right matrix. In total, we
	      get 4 equations:

	      r0,c' = 2*r0,c + 3*r1,c + 1*r2,c + 1*r3,c
	      r1,c' = 1*r0,c + 2*r1,c + 3*r2,c + 1*r3,c
	      r2,c' = 1*r0,c + 1*r1,c + 2*r2,c + 3*r3,c
	      r3,c' = 3*r0,c + 1*r1,c + 1*r2,c + 2*r3,c

	      As usual, the multiplication is as previously defined and the
	      addition is XOR. In order to optimize mixing columns we can store
	      the multiplication results in tables. If you think of the whole
	      column as a word (it might help to visualize by mentally rotating
	      the equations above by counterclockwise 90 degrees) then you can
	      see that it would be useful to map the multiplications performed on
	      each byte (r0, r1, r2, r3) onto a word as well. For instance, we
	      could map 2*r0,1*r0,1*r0,3*r0 onto a word by storing 2*r0 in the
	      highest 8 bits and 3*r0 in the lowest 8 bits (with the other two
	      respectively in the middle). This means that a table can be
	      constructed that uses r0 as an index to the word. We can do the
	      same with r1, r2, and r3, creating a total of 4 tables.

	      To construct a full c', we can just look up each byte of c in
	      their respective tables and XOR the results together.

	      Also, to build each table we only have to calculate the word
	      for 2,1,1,3 for every byte ... which we can do on each iteration
	      of this loop since we will iterate over every byte. After we have
	      calculated 2,1,1,3 we can get the results for the other tables
	      by cycling the byte at the end to the beginning. For instance
	      we can take the result of table 2,1,1,3 and produce table 3,2,1,1
	      by moving the right most byte to the left most position just like
	      how you can imagine the 3 moved out of 2,1,1,3 and to the front
	      to produce 3,2,1,1.

	      There is another optimization in that the same multiples of
	      the current element we need in order to advance our generator
	      to the next iteration can be reused in performing the 2,1,1,3
	      calculation. We also calculate the inverse mix column tables,
	      with e,9,d,b being the inverse of 2,1,1,3.

	      When we're done, and we need to actually mix columns, the first
	      byte of each state word should be put through mix[0] (2,1,1,3),
	      the second through mix[1] (3,2,1,1) and so forth. Then they should
	      be XOR'd together to produce the fully mixed column.
	    */

	    // calculate mix and imix table values
	    sx2 = xtime[sx];
	    e2 = xtime[e];
	    e4 = xtime[e2];
	    e8 = xtime[e4];
	    me =
	      (sx2 << 24) ^  // 2
	      (sx << 16) ^   // 1
	      (sx << 8) ^    // 1
	      (sx ^ sx2);    // 3
	    ime =
	      (e2 ^ e4 ^ e8) << 24 ^  // E (14)
	      (e ^ e8) << 16 ^        // 9
	      (e ^ e4 ^ e8) << 8 ^    // D (13)
	      (e ^ e2 ^ e8);          // B (11)
	    // produce each of the mix tables by rotating the 2,1,1,3 value
	    for(var n = 0; n < 4; ++n) {
	      mix[n][e] = me;
	      imix[n][sx] = ime;
	      // cycle the right most byte to the left most position
	      // ie: 2,1,1,3 becomes 3,2,1,1
	      me = me << 24 | me >>> 8;
	      ime = ime << 24 | ime >>> 8;
	    }

	    // get next element and inverse
	    if(e === 0) {
	      // 1 is the inverse of 1
	      e = ei = 1;
	    } else {
	      // e = 2e + 2*2*2*(10e)) = multiply e by 82 (chosen generator)
	      // ei = ei + 2*2*ei = multiply ei by 5 (inverse generator)
	      e = e2 ^ xtime[xtime[xtime[e2 ^ e8]]];
	      ei ^= xtime[xtime[ei]];
	    }
	  }
	}

	/**
	 * Generates a key schedule using the AES key expansion algorithm.
	 *
	 * The AES algorithm takes the Cipher Key, K, and performs a Key Expansion
	 * routine to generate a key schedule. The Key Expansion generates a total
	 * of Nb*(Nr + 1) words: the algorithm requires an initial set of Nb words,
	 * and each of the Nr rounds requires Nb words of key data. The resulting
	 * key schedule consists of a linear array of 4-byte words, denoted [wi ],
	 * with i in the range 0 <= i < Nb(Nr + 1).
	 *
	 * KeyExpansion(byte key[4*Nk], word w[Nb*(Nr+1)], Nk)
	 * AES-128 (Nb=4, Nk=4, Nr=10)
	 * AES-192 (Nb=4, Nk=6, Nr=12)
	 * AES-256 (Nb=4, Nk=8, Nr=14)
	 * Note: Nr=Nk+6.
	 *
	 * Nb is the number of columns (32-bit words) comprising the State (or
	 * number of bytes in a block). For AES, Nb=4.
	 *
	 * @param key the key to schedule (as an array of 32-bit words).
	 * @param decrypt true to modify the key schedule to decrypt, false not to.
	 *
	 * @return the generated key schedule.
	 */
	function _expandKey(key, decrypt) {
	  // copy the key's words to initialize the key schedule
	  var w = key.slice(0);

	  /* RotWord() will rotate a word, moving the first byte to the last
	    byte's position (shifting the other bytes left).

	    We will be getting the value of Rcon at i / Nk. 'i' will iterate
	    from Nk to (Nb * Nr+1). Nk = 4 (4 byte key), Nb = 4 (4 words in
	    a block), Nr = Nk + 6 (10). Therefore 'i' will iterate from
	    4 to 44 (exclusive). Each time we iterate 4 times, i / Nk will
	    increase by 1. We use a counter iNk to keep track of this.
	   */

	  // go through the rounds expanding the key
	  var temp, iNk = 1;
	  var Nk = w.length;
	  var Nr1 = Nk + 6 + 1;
	  var end = Nb * Nr1;
	  for(var i = Nk; i < end; ++i) {
	    temp = w[i - 1];
	    if(i % Nk === 0) {
	      // temp = SubWord(RotWord(temp)) ^ Rcon[i / Nk]
	      temp =
	        sbox[temp >>> 16 & 255] << 24 ^
	        sbox[temp >>> 8 & 255] << 16 ^
	        sbox[temp & 255] << 8 ^
	        sbox[temp >>> 24] ^ (rcon[iNk] << 24);
	      iNk++;
	    } else if(Nk > 6 && (i % Nk === 4)) {
	      // temp = SubWord(temp)
	      temp =
	        sbox[temp >>> 24] << 24 ^
	        sbox[temp >>> 16 & 255] << 16 ^
	        sbox[temp >>> 8 & 255] << 8 ^
	        sbox[temp & 255];
	    }
	    w[i] = w[i - Nk] ^ temp;
	  }

	  /* When we are updating a cipher block we always use the code path for
	     encryption whether we are decrypting or not (to shorten code and
	     simplify the generation of look up tables). However, because there
	     are differences in the decryption algorithm, other than just swapping
	     in different look up tables, we must transform our key schedule to
	     account for these changes:

	     1. The decryption algorithm gets its key rounds in reverse order.
	     2. The decryption algorithm adds the round key before mixing columns
	       instead of afterwards.

	     We don't need to modify our key schedule to handle the first case,
	     we can just traverse the key schedule in reverse order when decrypting.

	     The second case requires a little work.

	     The tables we built for performing rounds will take an input and then
	     perform SubBytes() and MixColumns() or, for the decrypt version,
	     InvSubBytes() and InvMixColumns(). But the decrypt algorithm requires
	     us to AddRoundKey() before InvMixColumns(). This means we'll need to
	     apply some transformations to the round key to inverse-mix its columns
	     so they'll be correct for moving AddRoundKey() to after the state has
	     had its columns inverse-mixed.

	     To inverse-mix the columns of the state when we're decrypting we use a
	     lookup table that will apply InvSubBytes() and InvMixColumns() at the
	     same time. However, the round key's bytes are not inverse-substituted
	     in the decryption algorithm. To get around this problem, we can first
	     substitute the bytes in the round key so that when we apply the
	     transformation via the InvSubBytes()+InvMixColumns() table, it will
	     undo our substitution leaving us with the original value that we
	     want -- and then inverse-mix that value.

	     This change will correctly alter our key schedule so that we can XOR
	     each round key with our already transformed decryption state. This
	     allows us to use the same code path as the encryption algorithm.

	     We make one more change to the decryption key. Since the decryption
	     algorithm runs in reverse from the encryption algorithm, we reverse
	     the order of the round keys to avoid having to iterate over the key
	     schedule backwards when running the encryption algorithm later in
	     decryption mode. In addition to reversing the order of the round keys,
	     we also swap each round key's 2nd and 4th rows. See the comments
	     section where rounds are performed for more details about why this is
	     done. These changes are done inline with the other substitution
	     described above.
	  */
	  if(decrypt) {
	    var tmp;
	    var m0 = imix[0];
	    var m1 = imix[1];
	    var m2 = imix[2];
	    var m3 = imix[3];
	    var wnew = w.slice(0);
	    end = w.length;
	    for(var i = 0, wi = end - Nb; i < end; i += Nb, wi -= Nb) {
	      // do not sub the first or last round key (round keys are Nb
	      // words) as no column mixing is performed before they are added,
	      // but do change the key order
	      if(i === 0 || i === (end - Nb)) {
	        wnew[i] = w[wi];
	        wnew[i + 1] = w[wi + 3];
	        wnew[i + 2] = w[wi + 2];
	        wnew[i + 3] = w[wi + 1];
	      } else {
	        // substitute each round key byte because the inverse-mix
	        // table will inverse-substitute it (effectively cancel the
	        // substitution because round key bytes aren't sub'd in
	        // decryption mode) and swap indexes 3 and 1
	        for(var n = 0; n < Nb; ++n) {
	          tmp = w[wi + n];
	          wnew[i + (3&-n)] =
	            m0[sbox[tmp >>> 24]] ^
	            m1[sbox[tmp >>> 16 & 255]] ^
	            m2[sbox[tmp >>> 8 & 255]] ^
	            m3[sbox[tmp & 255]];
	        }
	      }
	    }
	    w = wnew;
	  }

	  return w;
	}

	/**
	 * Updates a single block (16 bytes) using AES. The update will either
	 * encrypt or decrypt the block.
	 *
	 * @param w the key schedule.
	 * @param input the input block (an array of 32-bit words).
	 * @param output the updated output block.
	 * @param decrypt true to decrypt the block, false to encrypt it.
	 */
	function _updateBlock$1(w, input, output, decrypt) {
	  /*
	  Cipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)])
	  begin
	    byte state[4,Nb]
	    state = in
	    AddRoundKey(state, w[0, Nb-1])
	    for round = 1 step 1 to Nr-1
	      SubBytes(state)
	      ShiftRows(state)
	      MixColumns(state)
	      AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])
	    end for
	    SubBytes(state)
	    ShiftRows(state)
	    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
	    out = state
	  end

	  InvCipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)])
	  begin
	    byte state[4,Nb]
	    state = in
	    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
	    for round = Nr-1 step -1 downto 1
	      InvShiftRows(state)
	      InvSubBytes(state)
	      AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])
	      InvMixColumns(state)
	    end for
	    InvShiftRows(state)
	    InvSubBytes(state)
	    AddRoundKey(state, w[0, Nb-1])
	    out = state
	  end
	  */

	  // Encrypt: AddRoundKey(state, w[0, Nb-1])
	  // Decrypt: AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
	  var Nr = w.length / 4 - 1;
	  var m0, m1, m2, m3, sub;
	  if(decrypt) {
	    m0 = imix[0];
	    m1 = imix[1];
	    m2 = imix[2];
	    m3 = imix[3];
	    sub = isbox;
	  } else {
	    m0 = mix[0];
	    m1 = mix[1];
	    m2 = mix[2];
	    m3 = mix[3];
	    sub = sbox;
	  }
	  var a, b, c, d, a2, b2, c2;
	  a = input[0] ^ w[0];
	  b = input[decrypt ? 3 : 1] ^ w[1];
	  c = input[2] ^ w[2];
	  d = input[decrypt ? 1 : 3] ^ w[3];
	  var i = 3;

	  /* In order to share code we follow the encryption algorithm when both
	    encrypting and decrypting. To account for the changes required in the
	    decryption algorithm, we use different lookup tables when decrypting
	    and use a modified key schedule to account for the difference in the
	    order of transformations applied when performing rounds. We also get
	    key rounds in reverse order (relative to encryption). */
	  for(var round = 1; round < Nr; ++round) {
	    /* As described above, we'll be using table lookups to perform the
	      column mixing. Each column is stored as a word in the state (the
	      array 'input' has one column as a word at each index). In order to
	      mix a column, we perform these transformations on each row in c,
	      which is 1 byte in each word. The new column for c0 is c'0:

	               m0      m1      m2      m3
	      r0,c'0 = 2*r0,c0 + 3*r1,c0 + 1*r2,c0 + 1*r3,c0
	      r1,c'0 = 1*r0,c0 + 2*r1,c0 + 3*r2,c0 + 1*r3,c0
	      r2,c'0 = 1*r0,c0 + 1*r1,c0 + 2*r2,c0 + 3*r3,c0
	      r3,c'0 = 3*r0,c0 + 1*r1,c0 + 1*r2,c0 + 2*r3,c0

	      So using mix tables where c0 is a word with r0 being its upper
	      8 bits and r3 being its lower 8 bits:

	      m0[c0 >> 24] will yield this word: [2*r0,1*r0,1*r0,3*r0]
	      ...
	      m3[c0 & 255] will yield this word: [1*r3,1*r3,3*r3,2*r3]

	      Therefore to mix the columns in each word in the state we
	      do the following (& 255 omitted for brevity):
	      c'0,r0 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
	      c'0,r1 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
	      c'0,r2 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
	      c'0,r3 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]

	      However, before mixing, the algorithm requires us to perform
	      ShiftRows(). The ShiftRows() transformation cyclically shifts the
	      last 3 rows of the state over different offsets. The first row
	      (r = 0) is not shifted.

	      s'_r,c = s_r,(c + shift(r, Nb) mod Nb
	      for 0 < r < 4 and 0 <= c < Nb and
	      shift(1, 4) = 1
	      shift(2, 4) = 2
	      shift(3, 4) = 3.

	      This causes the first byte in r = 1 to be moved to the end of
	      the row, the first 2 bytes in r = 2 to be moved to the end of
	      the row, the first 3 bytes in r = 3 to be moved to the end of
	      the row:

	      r1: [c0 c1 c2 c3] => [c1 c2 c3 c0]
	      r2: [c0 c1 c2 c3]    [c2 c3 c0 c1]
	      r3: [c0 c1 c2 c3]    [c3 c0 c1 c2]

	      We can make these substitutions inline with our column mixing to
	      generate an updated set of equations to produce each word in the
	      state (note the columns have changed positions):

	      c0 c1 c2 c3 => c0 c1 c2 c3
	      c0 c1 c2 c3    c1 c2 c3 c0  (cycled 1 byte)
	      c0 c1 c2 c3    c2 c3 c0 c1  (cycled 2 bytes)
	      c0 c1 c2 c3    c3 c0 c1 c2  (cycled 3 bytes)

	      Therefore:

	      c'0 = 2*r0,c0 + 3*r1,c1 + 1*r2,c2 + 1*r3,c3
	      c'0 = 1*r0,c0 + 2*r1,c1 + 3*r2,c2 + 1*r3,c3
	      c'0 = 1*r0,c0 + 1*r1,c1 + 2*r2,c2 + 3*r3,c3
	      c'0 = 3*r0,c0 + 1*r1,c1 + 1*r2,c2 + 2*r3,c3

	      c'1 = 2*r0,c1 + 3*r1,c2 + 1*r2,c3 + 1*r3,c0
	      c'1 = 1*r0,c1 + 2*r1,c2 + 3*r2,c3 + 1*r3,c0
	      c'1 = 1*r0,c1 + 1*r1,c2 + 2*r2,c3 + 3*r3,c0
	      c'1 = 3*r0,c1 + 1*r1,c2 + 1*r2,c3 + 2*r3,c0

	      ... and so forth for c'2 and c'3. The important distinction is
	      that the columns are cycling, with c0 being used with the m0
	      map when calculating c0, but c1 being used with the m0 map when
	      calculating c1 ... and so forth.

	      When performing the inverse we transform the mirror image and
	      skip the bottom row, instead of the top one, and move upwards:

	      c3 c2 c1 c0 => c0 c3 c2 c1  (cycled 3 bytes) *same as encryption
	      c3 c2 c1 c0    c1 c0 c3 c2  (cycled 2 bytes)
	      c3 c2 c1 c0    c2 c1 c0 c3  (cycled 1 byte)  *same as encryption
	      c3 c2 c1 c0    c3 c2 c1 c0

	      If you compare the resulting matrices for ShiftRows()+MixColumns()
	      and for InvShiftRows()+InvMixColumns() the 2nd and 4th columns are
	      different (in encrypt mode vs. decrypt mode). So in order to use
	      the same code to handle both encryption and decryption, we will
	      need to do some mapping.

	      If in encryption mode we let a=c0, b=c1, c=c2, d=c3, and r<N> be
	      a row number in the state, then the resulting matrix in encryption
	      mode for applying the above transformations would be:

	      r1: a b c d
	      r2: b c d a
	      r3: c d a b
	      r4: d a b c

	      If we did the same in decryption mode we would get:

	      r1: a d c b
	      r2: b a d c
	      r3: c b a d
	      r4: d c b a

	      If instead we swap d and b (set b=c3 and d=c1), then we get:

	      r1: a b c d
	      r2: d a b c
	      r3: c d a b
	      r4: b c d a

	      Now the 1st and 3rd rows are the same as the encryption matrix. All
	      we need to do then to make the mapping exactly the same is to swap
	      the 2nd and 4th rows when in decryption mode. To do this without
	      having to do it on each iteration, we swapped the 2nd and 4th rows
	      in the decryption key schedule. We also have to do the swap above
	      when we first pull in the input and when we set the final output. */
	    a2 =
	      m0[a >>> 24] ^
	      m1[b >>> 16 & 255] ^
	      m2[c >>> 8 & 255] ^
	      m3[d & 255] ^ w[++i];
	    b2 =
	      m0[b >>> 24] ^
	      m1[c >>> 16 & 255] ^
	      m2[d >>> 8 & 255] ^
	      m3[a & 255] ^ w[++i];
	    c2 =
	      m0[c >>> 24] ^
	      m1[d >>> 16 & 255] ^
	      m2[a >>> 8 & 255] ^
	      m3[b & 255] ^ w[++i];
	    d =
	      m0[d >>> 24] ^
	      m1[a >>> 16 & 255] ^
	      m2[b >>> 8 & 255] ^
	      m3[c & 255] ^ w[++i];
	    a = a2;
	    b = b2;
	    c = c2;
	  }

	  /*
	    Encrypt:
	    SubBytes(state)
	    ShiftRows(state)
	    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])

	    Decrypt:
	    InvShiftRows(state)
	    InvSubBytes(state)
	    AddRoundKey(state, w[0, Nb-1])
	   */
	  // Note: rows are shifted inline
	  output[0] =
	    (sub[a >>> 24] << 24) ^
	    (sub[b >>> 16 & 255] << 16) ^
	    (sub[c >>> 8 & 255] << 8) ^
	    (sub[d & 255]) ^ w[++i];
	  output[decrypt ? 3 : 1] =
	    (sub[b >>> 24] << 24) ^
	    (sub[c >>> 16 & 255] << 16) ^
	    (sub[d >>> 8 & 255] << 8) ^
	    (sub[a & 255]) ^ w[++i];
	  output[2] =
	    (sub[c >>> 24] << 24) ^
	    (sub[d >>> 16 & 255] << 16) ^
	    (sub[a >>> 8 & 255] << 8) ^
	    (sub[b & 255]) ^ w[++i];
	  output[decrypt ? 1 : 3] =
	    (sub[d >>> 24] << 24) ^
	    (sub[a >>> 16 & 255] << 16) ^
	    (sub[b >>> 8 & 255] << 8) ^
	    (sub[c & 255]) ^ w[++i];
	}

	/**
	 * Deprecated. Instead, use:
	 *
	 * forge.cipher.createCipher('AES-<mode>', key);
	 * forge.cipher.createDecipher('AES-<mode>', key);
	 *
	 * Creates a deprecated AES cipher object. This object's mode will default to
	 * CBC (cipher-block-chaining).
	 *
	 * The key and iv may be given as a string of bytes, an array of bytes, a
	 * byte buffer, or an array of 32-bit words.
	 *
	 * @param options the options to use.
	 *          key the symmetric key to use.
	 *          output the buffer to write to.
	 *          decrypt true for decryption, false for encryption.
	 *          mode the cipher mode to use (default: 'CBC').
	 *
	 * @return the cipher.
	 */
	function _createCipher$1(options) {
	  options = options || {};
	  var mode = (options.mode || 'CBC').toUpperCase();
	  var algorithm = 'AES-' + mode;

	  var cipher;
	  if(options.decrypt) {
	    cipher = forge$t.cipher.createDecipher(algorithm, options.key);
	  } else {
	    cipher = forge$t.cipher.createCipher(algorithm, options.key);
	  }

	  // backwards compatible start API
	  var start = cipher.start;
	  cipher.start = function(iv, options) {
	    // backwards compatibility: support second arg as output buffer
	    var output = null;
	    if(options instanceof forge$t.util.ByteBuffer) {
	      output = options;
	      options = {};
	    }
	    options = options || {};
	    options.output = output;
	    options.iv = iv;
	    start.call(cipher, options);
	  };

	  return cipher;
	}

	/**
	 * DES (Data Encryption Standard) implementation.
	 *
	 * This implementation supports DES as well as 3DES-EDE in ECB and CBC mode.
	 * It is based on the BSD-licensed implementation by Paul Tero:
	 *
	 * Paul Tero, July 2001
	 * http://www.tero.co.uk/des/
	 *
	 * Optimised for performance with large blocks by
	 * Michael Hayworth, November 2001
	 * http://www.netdealing.com
	 *
	 * THIS SOFTWARE IS PROVIDED "AS IS" AND
	 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
	 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
	 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
	 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
	 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
	 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
	 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
	 * SUCH DAMAGE.
	 *
	 * @author Stefan Siegl
	 * @author Dave Longley
	 *
	 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
	 * Copyright (c) 2012-2014 Digital Bazaar, Inc.
	 */

	var forge$s = forge$z;




	/* DES API */
	forge$s.des = forge$s.des || {};

	/**
	 * Deprecated. Instead, use:
	 *
	 * var cipher = forge.cipher.createCipher('DES-<mode>', key);
	 * cipher.start({iv: iv});
	 *
	 * Creates an DES cipher object to encrypt data using the given symmetric key.
	 * The output will be stored in the 'output' member of the returned cipher.
	 *
	 * The key and iv may be given as binary-encoded strings of bytes or
	 * byte buffers.
	 *
	 * @param key the symmetric key to use (64 or 192 bits).
	 * @param iv the initialization vector to use.
	 * @param output the buffer to write to, null to create one.
	 * @param mode the cipher mode to use (default: 'CBC' if IV is
	 *          given, 'ECB' if null).
	 *
	 * @return the cipher.
	 */
	forge$s.des.startEncrypting = function(key, iv, output, mode) {
	  var cipher = _createCipher({
	    key: key,
	    output: output,
	    decrypt: false,
	    mode: mode || (iv === null ? 'ECB' : 'CBC')
	  });
	  cipher.start(iv);
	  return cipher;
	};

	/**
	 * Deprecated. Instead, use:
	 *
	 * var cipher = forge.cipher.createCipher('DES-<mode>', key);
	 *
	 * Creates an DES cipher object to encrypt data using the given symmetric key.
	 *
	 * The key may be given as a binary-encoded string of bytes or a byte buffer.
	 *
	 * @param key the symmetric key to use (64 or 192 bits).
	 * @param mode the cipher mode to use (default: 'CBC').
	 *
	 * @return the cipher.
	 */
	forge$s.des.createEncryptionCipher = function(key, mode) {
	  return _createCipher({
	    key: key,
	    output: null,
	    decrypt: false,
	    mode: mode
	  });
	};

	/**
	 * Deprecated. Instead, use:
	 *
	 * var decipher = forge.cipher.createDecipher('DES-<mode>', key);
	 * decipher.start({iv: iv});
	 *
	 * Creates an DES cipher object to decrypt data using the given symmetric key.
	 * The output will be stored in the 'output' member of the returned cipher.
	 *
	 * The key and iv may be given as binary-encoded strings of bytes or
	 * byte buffers.
	 *
	 * @param key the symmetric key to use (64 or 192 bits).
	 * @param iv the initialization vector to use.
	 * @param output the buffer to write to, null to create one.
	 * @param mode the cipher mode to use (default: 'CBC' if IV is
	 *          given, 'ECB' if null).
	 *
	 * @return the cipher.
	 */
	forge$s.des.startDecrypting = function(key, iv, output, mode) {
	  var cipher = _createCipher({
	    key: key,
	    output: output,
	    decrypt: true,
	    mode: mode || (iv === null ? 'ECB' : 'CBC')
	  });
	  cipher.start(iv);
	  return cipher;
	};

	/**
	 * Deprecated. Instead, use:
	 *
	 * var decipher = forge.cipher.createDecipher('DES-<mode>', key);
	 *
	 * Creates an DES cipher object to decrypt data using the given symmetric key.
	 *
	 * The key may be given as a binary-encoded string of bytes or a byte buffer.
	 *
	 * @param key the symmetric key to use (64 or 192 bits).
	 * @param mode the cipher mode to use (default: 'CBC').
	 *
	 * @return the cipher.
	 */
	forge$s.des.createDecryptionCipher = function(key, mode) {
	  return _createCipher({
	    key: key,
	    output: null,
	    decrypt: true,
	    mode: mode
	  });
	};

	/**
	 * Creates a new DES cipher algorithm object.
	 *
	 * @param name the name of the algorithm.
	 * @param mode the mode factory function.
	 *
	 * @return the DES algorithm object.
	 */
	forge$s.des.Algorithm = function(name, mode) {
	  var self = this;
	  self.name = name;
	  self.mode = new mode({
	    blockSize: 8,
	    cipher: {
	      encrypt: function(inBlock, outBlock) {
	        return _updateBlock(self._keys, inBlock, outBlock, false);
	      },
	      decrypt: function(inBlock, outBlock) {
	        return _updateBlock(self._keys, inBlock, outBlock, true);
	      }
	    }
	  });
	  self._init = false;
	};

	/**
	 * Initializes this DES algorithm by expanding its key.
	 *
	 * @param options the options to use.
	 *          key the key to use with this algorithm.
	 *          decrypt true if the algorithm should be initialized for decryption,
	 *            false for encryption.
	 */
	forge$s.des.Algorithm.prototype.initialize = function(options) {
	  if(this._init) {
	    return;
	  }

	  var key = forge$s.util.createBuffer(options.key);
	  if(this.name.indexOf('3DES') === 0) {
	    if(key.length() !== 24) {
	      throw new Error('Invalid Triple-DES key size: ' + key.length() * 8);
	    }
	  }

	  // do key expansion to 16 or 48 subkeys (single or triple DES)
	  this._keys = _createKeys(key);
	  this._init = true;
	};

	/** Register DES algorithms **/

	registerAlgorithm('DES-ECB', forge$s.cipher.modes.ecb);
	registerAlgorithm('DES-CBC', forge$s.cipher.modes.cbc);
	registerAlgorithm('DES-CFB', forge$s.cipher.modes.cfb);
	registerAlgorithm('DES-OFB', forge$s.cipher.modes.ofb);
	registerAlgorithm('DES-CTR', forge$s.cipher.modes.ctr);

	registerAlgorithm('3DES-ECB', forge$s.cipher.modes.ecb);
	registerAlgorithm('3DES-CBC', forge$s.cipher.modes.cbc);
	registerAlgorithm('3DES-CFB', forge$s.cipher.modes.cfb);
	registerAlgorithm('3DES-OFB', forge$s.cipher.modes.ofb);
	registerAlgorithm('3DES-CTR', forge$s.cipher.modes.ctr);

	function registerAlgorithm(name, mode) {
	  var factory = function() {
	    return new forge$s.des.Algorithm(name, mode);
	  };
	  forge$s.cipher.registerAlgorithm(name, factory);
	}

	/** DES implementation **/

	var spfunction1 = [0x1010400,0,0x10000,0x1010404,0x1010004,0x10404,0x4,0x10000,0x400,0x1010400,0x1010404,0x400,0x1000404,0x1010004,0x1000000,0x4,0x404,0x1000400,0x1000400,0x10400,0x10400,0x1010000,0x1010000,0x1000404,0x10004,0x1000004,0x1000004,0x10004,0,0x404,0x10404,0x1000000,0x10000,0x1010404,0x4,0x1010000,0x1010400,0x1000000,0x1000000,0x400,0x1010004,0x10000,0x10400,0x1000004,0x400,0x4,0x1000404,0x10404,0x1010404,0x10004,0x1010000,0x1000404,0x1000004,0x404,0x10404,0x1010400,0x404,0x1000400,0x1000400,0,0x10004,0x10400,0,0x1010004];
	var spfunction2 = [-0x7fef7fe0,-0x7fff8000,0x8000,0x108020,0x100000,0x20,-0x7fefffe0,-0x7fff7fe0,-0x7fffffe0,-0x7fef7fe0,-0x7fef8000,-0x80000000,-0x7fff8000,0x100000,0x20,-0x7fefffe0,0x108000,0x100020,-0x7fff7fe0,0,-0x80000000,0x8000,0x108020,-0x7ff00000,0x100020,-0x7fffffe0,0,0x108000,0x8020,-0x7fef8000,-0x7ff00000,0x8020,0,0x108020,-0x7fefffe0,0x100000,-0x7fff7fe0,-0x7ff00000,-0x7fef8000,0x8000,-0x7ff00000,-0x7fff8000,0x20,-0x7fef7fe0,0x108020,0x20,0x8000,-0x80000000,0x8020,-0x7fef8000,0x100000,-0x7fffffe0,0x100020,-0x7fff7fe0,-0x7fffffe0,0x100020,0x108000,0,-0x7fff8000,0x8020,-0x80000000,-0x7fefffe0,-0x7fef7fe0,0x108000];
	var spfunction3 = [0x208,0x8020200,0,0x8020008,0x8000200,0,0x20208,0x8000200,0x20008,0x8000008,0x8000008,0x20000,0x8020208,0x20008,0x8020000,0x208,0x8000000,0x8,0x8020200,0x200,0x20200,0x8020000,0x8020008,0x20208,0x8000208,0x20200,0x20000,0x8000208,0x8,0x8020208,0x200,0x8000000,0x8020200,0x8000000,0x20008,0x208,0x20000,0x8020200,0x8000200,0,0x200,0x20008,0x8020208,0x8000200,0x8000008,0x200,0,0x8020008,0x8000208,0x20000,0x8000000,0x8020208,0x8,0x20208,0x20200,0x8000008,0x8020000,0x8000208,0x208,0x8020000,0x20208,0x8,0x8020008,0x20200];
	var spfunction4 = [0x802001,0x2081,0x2081,0x80,0x802080,0x800081,0x800001,0x2001,0,0x802000,0x802000,0x802081,0x81,0,0x800080,0x800001,0x1,0x2000,0x800000,0x802001,0x80,0x800000,0x2001,0x2080,0x800081,0x1,0x2080,0x800080,0x2000,0x802080,0x802081,0x81,0x800080,0x800001,0x802000,0x802081,0x81,0,0,0x802000,0x2080,0x800080,0x800081,0x1,0x802001,0x2081,0x2081,0x80,0x802081,0x81,0x1,0x2000,0x800001,0x2001,0x802080,0x800081,0x2001,0x2080,0x800000,0x802001,0x80,0x800000,0x2000,0x802080];
	var spfunction5 = [0x100,0x2080100,0x2080000,0x42000100,0x80000,0x100,0x40000000,0x2080000,0x40080100,0x80000,0x2000100,0x40080100,0x42000100,0x42080000,0x80100,0x40000000,0x2000000,0x40080000,0x40080000,0,0x40000100,0x42080100,0x42080100,0x2000100,0x42080000,0x40000100,0,0x42000000,0x2080100,0x2000000,0x42000000,0x80100,0x80000,0x42000100,0x100,0x2000000,0x40000000,0x2080000,0x42000100,0x40080100,0x2000100,0x40000000,0x42080000,0x2080100,0x40080100,0x100,0x2000000,0x42080000,0x42080100,0x80100,0x42000000,0x42080100,0x2080000,0,0x40080000,0x42000000,0x80100,0x2000100,0x40000100,0x80000,0,0x40080000,0x2080100,0x40000100];
	var spfunction6 = [0x20000010,0x20400000,0x4000,0x20404010,0x20400000,0x10,0x20404010,0x400000,0x20004000,0x404010,0x400000,0x20000010,0x400010,0x20004000,0x20000000,0x4010,0,0x400010,0x20004010,0x4000,0x404000,0x20004010,0x10,0x20400010,0x20400010,0,0x404010,0x20404000,0x4010,0x404000,0x20404000,0x20000000,0x20004000,0x10,0x20400010,0x404000,0x20404010,0x400000,0x4010,0x20000010,0x400000,0x20004000,0x20000000,0x4010,0x20000010,0x20404010,0x404000,0x20400000,0x404010,0x20404000,0,0x20400010,0x10,0x4000,0x20400000,0x404010,0x4000,0x400010,0x20004010,0,0x20404000,0x20000000,0x400010,0x20004010];
	var spfunction7 = [0x200000,0x4200002,0x4000802,0,0x800,0x4000802,0x200802,0x4200800,0x4200802,0x200000,0,0x4000002,0x2,0x4000000,0x4200002,0x802,0x4000800,0x200802,0x200002,0x4000800,0x4000002,0x4200000,0x4200800,0x200002,0x4200000,0x800,0x802,0x4200802,0x200800,0x2,0x4000000,0x200800,0x4000000,0x200800,0x200000,0x4000802,0x4000802,0x4200002,0x4200002,0x2,0x200002,0x4000000,0x4000800,0x200000,0x4200800,0x802,0x200802,0x4200800,0x802,0x4000002,0x4200802,0x4200000,0x200800,0,0x2,0x4200802,0,0x200802,0x4200000,0x800,0x4000002,0x4000800,0x800,0x200002];
	var spfunction8 = [0x10001040,0x1000,0x40000,0x10041040,0x10000000,0x10001040,0x40,0x10000000,0x40040,0x10040000,0x10041040,0x41000,0x10041000,0x41040,0x1000,0x40,0x10040000,0x10000040,0x10001000,0x1040,0x41000,0x40040,0x10040040,0x10041000,0x1040,0,0,0x10040040,0x10000040,0x10001000,0x41040,0x40000,0x41040,0x40000,0x10041000,0x1000,0x40,0x10040040,0x1000,0x41040,0x10001000,0x40,0x10000040,0x10040000,0x10040040,0x10000000,0x40000,0x10001040,0,0x10041040,0x40040,0x10000040,0x10040000,0x10001000,0x10001040,0,0x10041040,0x41000,0x41000,0x1040,0x1040,0x40040,0x10000000,0x10041000];

	/**
	 * Create necessary sub keys.
	 *
	 * @param key the 64-bit or 192-bit key.
	 *
	 * @return the expanded keys.
	 */
	function _createKeys(key) {
	  var pc2bytes0  = [0,0x4,0x20000000,0x20000004,0x10000,0x10004,0x20010000,0x20010004,0x200,0x204,0x20000200,0x20000204,0x10200,0x10204,0x20010200,0x20010204],
	      pc2bytes1  = [0,0x1,0x100000,0x100001,0x4000000,0x4000001,0x4100000,0x4100001,0x100,0x101,0x100100,0x100101,0x4000100,0x4000101,0x4100100,0x4100101],
	      pc2bytes2  = [0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808,0,0x8,0x800,0x808,0x1000000,0x1000008,0x1000800,0x1000808],
	      pc2bytes3  = [0,0x200000,0x8000000,0x8200000,0x2000,0x202000,0x8002000,0x8202000,0x20000,0x220000,0x8020000,0x8220000,0x22000,0x222000,0x8022000,0x8222000],
	      pc2bytes4  = [0,0x40000,0x10,0x40010,0,0x40000,0x10,0x40010,0x1000,0x41000,0x1010,0x41010,0x1000,0x41000,0x1010,0x41010],
	      pc2bytes5  = [0,0x400,0x20,0x420,0,0x400,0x20,0x420,0x2000000,0x2000400,0x2000020,0x2000420,0x2000000,0x2000400,0x2000020,0x2000420],
	      pc2bytes6  = [0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002,0,0x10000000,0x80000,0x10080000,0x2,0x10000002,0x80002,0x10080002],
	      pc2bytes7  = [0,0x10000,0x800,0x10800,0x20000000,0x20010000,0x20000800,0x20010800,0x20000,0x30000,0x20800,0x30800,0x20020000,0x20030000,0x20020800,0x20030800],
	      pc2bytes8  = [0,0x40000,0,0x40000,0x2,0x40002,0x2,0x40002,0x2000000,0x2040000,0x2000000,0x2040000,0x2000002,0x2040002,0x2000002,0x2040002],
	      pc2bytes9  = [0,0x10000000,0x8,0x10000008,0,0x10000000,0x8,0x10000008,0x400,0x10000400,0x408,0x10000408,0x400,0x10000400,0x408,0x10000408],
	      pc2bytes10 = [0,0x20,0,0x20,0x100000,0x100020,0x100000,0x100020,0x2000,0x2020,0x2000,0x2020,0x102000,0x102020,0x102000,0x102020],
	      pc2bytes11 = [0,0x1000000,0x200,0x1000200,0x200000,0x1200000,0x200200,0x1200200,0x4000000,0x5000000,0x4000200,0x5000200,0x4200000,0x5200000,0x4200200,0x5200200],
	      pc2bytes12 = [0,0x1000,0x8000000,0x8001000,0x80000,0x81000,0x8080000,0x8081000,0x10,0x1010,0x8000010,0x8001010,0x80010,0x81010,0x8080010,0x8081010],
	      pc2bytes13 = [0,0x4,0x100,0x104,0,0x4,0x100,0x104,0x1,0x5,0x101,0x105,0x1,0x5,0x101,0x105];

	  // how many iterations (1 for des, 3 for triple des)
	  // changed by Paul 16/6/2007 to use Triple DES for 9+ byte keys
	  var iterations = key.length() > 8 ? 3 : 1;

	  // stores the return keys
	  var keys = [];

	  // now define the left shifts which need to be done
	  var shifts = [0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0];

	  var n = 0, tmp;
	  for(var j = 0; j < iterations; j++) {
	    var left = key.getInt32();
	    var right = key.getInt32();

	    tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;
	    right ^= tmp;
	    left ^= (tmp << 4);

	    tmp = ((right >>> -16) ^ left) & 0x0000ffff;
	    left ^= tmp;
	    right ^= (tmp << -16);

	    tmp = ((left >>> 2) ^ right) & 0x33333333;
	    right ^= tmp;
	    left ^= (tmp << 2);

	    tmp = ((right >>> -16) ^ left) & 0x0000ffff;
	    left ^= tmp;
	    right ^= (tmp << -16);

	    tmp = ((left >>> 1) ^ right) & 0x55555555;
	    right ^= tmp;
	    left ^= (tmp << 1);

	    tmp = ((right >>> 8) ^ left) & 0x00ff00ff;
	    left ^= tmp;
	    right ^= (tmp << 8);

	    tmp = ((left >>> 1) ^ right) & 0x55555555;
	    right ^= tmp;
	    left ^= (tmp << 1);

	    // right needs to be shifted and OR'd with last four bits of left
	    tmp = (left << 8) | ((right >>> 20) & 0x000000f0);

	    // left needs to be put upside down
	    left = ((right << 24) | ((right << 8) & 0xff0000) |
	      ((right >>> 8) & 0xff00) | ((right >>> 24) & 0xf0));
	    right = tmp;

	    // now go through and perform these shifts on the left and right keys
	    for(var i = 0; i < shifts.length; ++i) {
	      //shift the keys either one or two bits to the left
	      if(shifts[i]) {
	        left = (left << 2) | (left >>> 26);
	        right = (right << 2) | (right >>> 26);
	      } else {
	        left = (left << 1) | (left >>> 27);
	        right = (right << 1) | (right >>> 27);
	      }
	      left &= -0xf;
	      right &= -0xf;

	      // now apply PC-2, in such a way that E is easier when encrypting or
	      // decrypting this conversion will look like PC-2 except only the last 6
	      // bits of each byte are used rather than 48 consecutive bits and the
	      // order of lines will be according to how the S selection functions will
	      // be applied: S2, S4, S6, S8, S1, S3, S5, S7
	      var lefttmp = (
	        pc2bytes0[left >>> 28] | pc2bytes1[(left >>> 24) & 0xf] |
	        pc2bytes2[(left >>> 20) & 0xf] | pc2bytes3[(left >>> 16) & 0xf] |
	        pc2bytes4[(left >>> 12) & 0xf] | pc2bytes5[(left >>> 8) & 0xf] |
	        pc2bytes6[(left >>> 4) & 0xf]);
	      var righttmp = (
	        pc2bytes7[right >>> 28] | pc2bytes8[(right >>> 24) & 0xf] |
	        pc2bytes9[(right >>> 20) & 0xf] | pc2bytes10[(right >>> 16) & 0xf] |
	        pc2bytes11[(right >>> 12) & 0xf] | pc2bytes12[(right >>> 8) & 0xf] |
	        pc2bytes13[(right >>> 4) & 0xf]);
	      tmp = ((righttmp >>> 16) ^ lefttmp) & 0x0000ffff;
	      keys[n++] = lefttmp ^ tmp;
	      keys[n++] = righttmp ^ (tmp << 16);
	    }
	  }

	  return keys;
	}

	/**
	 * Updates a single block (1 byte) using DES. The update will either
	 * encrypt or decrypt the block.
	 *
	 * @param keys the expanded keys.
	 * @param input the input block (an array of 32-bit words).
	 * @param output the updated output block.
	 * @param decrypt true to decrypt the block, false to encrypt it.
	 */
	function _updateBlock(keys, input, output, decrypt) {
	  // set up loops for single or triple DES
	  var iterations = keys.length === 32 ? 3 : 9;
	  var looping;
	  if(iterations === 3) {
	    looping = decrypt ? [30, -2, -2] : [0, 32, 2];
	  } else {
	    looping = (decrypt ?
	      [94, 62, -2, 32, 64, 2, 30, -2, -2] :
	      [0, 32, 2, 62, 30, -2, 64, 96, 2]);
	  }

	  var tmp;

	  var left = input[0];
	  var right = input[1];

	  // first each 64 bit chunk of the message must be permuted according to IP
	  tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;
	  right ^= tmp;
	  left ^= (tmp << 4);

	  tmp = ((left >>> 16) ^ right) & 0x0000ffff;
	  right ^= tmp;
	  left ^= (tmp << 16);

	  tmp = ((right >>> 2) ^ left) & 0x33333333;
	  left ^= tmp;
	  right ^= (tmp << 2);

	  tmp = ((right >>> 8) ^ left) & 0x00ff00ff;
	  left ^= tmp;
	  right ^= (tmp << 8);

	  tmp = ((left >>> 1) ^ right) & 0x55555555;
	  right ^= tmp;
	  left ^= (tmp << 1);

	  // rotate left 1 bit
	  left = ((left << 1) | (left >>> 31));
	  right = ((right << 1) | (right >>> 31));

	  for(var j = 0; j < iterations; j += 3) {
	    var endloop = looping[j + 1];
	    var loopinc = looping[j + 2];

	    // now go through and perform the encryption or decryption
	    for(var i = looping[j]; i != endloop; i += loopinc) {
	      var right1 = right ^ keys[i];
	      var right2 = ((right >>> 4) | (right << 28)) ^ keys[i + 1];

	      // passing these bytes through the S selection functions
	      tmp = left;
	      left = right;
	      right = tmp ^ (
	        spfunction2[(right1 >>> 24) & 0x3f] |
	        spfunction4[(right1 >>> 16) & 0x3f] |
	        spfunction6[(right1 >>>  8) & 0x3f] |
	        spfunction8[right1 & 0x3f] |
	        spfunction1[(right2 >>> 24) & 0x3f] |
	        spfunction3[(right2 >>> 16) & 0x3f] |
	        spfunction5[(right2 >>>  8) & 0x3f] |
	        spfunction7[right2 & 0x3f]);
	    }
	    // unreverse left and right
	    tmp = left;
	    left = right;
	    right = tmp;
	  }

	  // rotate right 1 bit
	  left = ((left >>> 1) | (left << 31));
	  right = ((right >>> 1) | (right << 31));

	  // now perform IP-1, which is IP in the opposite direction
	  tmp = ((left >>> 1) ^ right) & 0x55555555;
	  right ^= tmp;
	  left ^= (tmp << 1);

	  tmp = ((right >>> 8) ^ left) & 0x00ff00ff;
	  left ^= tmp;
	  right ^= (tmp << 8);

	  tmp = ((right >>> 2) ^ left) & 0x33333333;
	  left ^= tmp;
	  right ^= (tmp << 2);

	  tmp = ((left >>> 16) ^ right) & 0x0000ffff;
	  right ^= tmp;
	  left ^= (tmp << 16);

	  tmp = ((left >>> 4) ^ right) & 0x0f0f0f0f;
	  right ^= tmp;
	  left ^= (tmp << 4);

	  output[0] = left;
	  output[1] = right;
	}

	/**
	 * Deprecated. Instead, use:
	 *
	 * forge.cipher.createCipher('DES-<mode>', key);
	 * forge.cipher.createDecipher('DES-<mode>', key);
	 *
	 * Creates a deprecated DES cipher object. This object's mode will default to
	 * CBC (cipher-block-chaining).
	 *
	 * The key may be given as a binary-encoded string of bytes or a byte buffer.
	 *
	 * @param options the options to use.
	 *          key the symmetric key to use (64 or 192 bits).
	 *          output the buffer to write to.
	 *          decrypt true for decryption, false for encryption.
	 *          mode the cipher mode to use (default: 'CBC').
	 *
	 * @return the cipher.
	 */
	function _createCipher(options) {
	  options = options || {};
	  var mode = (options.mode || 'CBC').toUpperCase();
	  var algorithm = 'DES-' + mode;

	  var cipher;
	  if(options.decrypt) {
	    cipher = forge$s.cipher.createDecipher(algorithm, options.key);
	  } else {
	    cipher = forge$s.cipher.createCipher(algorithm, options.key);
	  }

	  // backwards compatible start API
	  var start = cipher.start;
	  cipher.start = function(iv, options) {
	    // backwards compatibility: support second arg as output buffer
	    var output = null;
	    if(options instanceof forge$s.util.ByteBuffer) {
	      output = options;
	      options = {};
	    }
	    options = options || {};
	    options.output = output;
	    options.iv = iv;
	    start.call(cipher, options);
	  };

	  return cipher;
	}

	/**
	 * Node.js module for Forge message digests.
	 *
	 * @author Dave Longley
	 *
	 * Copyright 2011-2017 Digital Bazaar, Inc.
	 */

	var forge$r = forge$z;

	forge$r.md = forge$r.md || {};
	forge$r.md.algorithms = forge$r.md.algorithms || {};

	/**
	 * Hash-based Message Authentication Code implementation. Requires a message
	 * digest object that can be obtained, for example, from forge.md.sha1 or
	 * forge.md.md5.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2012 Digital Bazaar, Inc. All rights reserved.
	 */

	var forge$q = forge$z;



	/* HMAC API */
	var hmac$4 = forge$q.hmac = forge$q.hmac || {};

	/**
	 * Creates an HMAC object that uses the given message digest object.
	 *
	 * @return an HMAC object.
	 */
	hmac$4.create = function() {
	  // the hmac key to use
	  var _key = null;

	  // the message digest to use
	  var _md = null;

	  // the inner padding
	  var _ipadding = null;

	  // the outer padding
	  var _opadding = null;

	  // hmac context
	  var ctx = {};

	  /**
	   * Starts or restarts the HMAC with the given key and message digest.
	   *
	   * @param md the message digest to use, null to reuse the previous one,
	   *           a string to use builtin 'sha1', 'md5', 'sha256'.
	   * @param key the key to use as a string, array of bytes, byte buffer,
	   *           or null to reuse the previous key.
	   */
	  ctx.start = function(md, key) {
	    if(md !== null) {
	      if(typeof md === 'string') {
	        // create builtin message digest
	        md = md.toLowerCase();
	        if(md in forge$q.md.algorithms) {
	          _md = forge$q.md.algorithms[md].create();
	        } else {
	          throw new Error('Unknown hash algorithm "' + md + '"');
	        }
	      } else {
	        // store message digest
	        _md = md;
	      }
	    }

	    if(key === null) {
	      // reuse previous key
	      key = _key;
	    } else {
	      if(typeof key === 'string') {
	        // convert string into byte buffer
	        key = forge$q.util.createBuffer(key);
	      } else if(forge$q.util.isArray(key)) {
	        // convert byte array into byte buffer
	        var tmp = key;
	        key = forge$q.util.createBuffer();
	        for(var i = 0; i < tmp.length; ++i) {
	          key.putByte(tmp[i]);
	        }
	      }

	      // if key is longer than blocksize, hash it
	      var keylen = key.length();
	      if(keylen > _md.blockLength) {
	        _md.start();
	        _md.update(key.bytes());
	        key = _md.digest();
	      }

	      // mix key into inner and outer padding
	      // ipadding = [0x36 * blocksize] ^ key
	      // opadding = [0x5C * blocksize] ^ key
	      _ipadding = forge$q.util.createBuffer();
	      _opadding = forge$q.util.createBuffer();
	      keylen = key.length();
	      for(var i = 0; i < keylen; ++i) {
	        var tmp = key.at(i);
	        _ipadding.putByte(0x36 ^ tmp);
	        _opadding.putByte(0x5C ^ tmp);
	      }

	      // if key is shorter than blocksize, add additional padding
	      if(keylen < _md.blockLength) {
	        var tmp = _md.blockLength - keylen;
	        for(var i = 0; i < tmp; ++i) {
	          _ipadding.putByte(0x36);
	          _opadding.putByte(0x5C);
	        }
	      }
	      _key = key;
	      _ipadding = _ipadding.bytes();
	      _opadding = _opadding.bytes();
	    }

	    // digest is done like so: hash(opadding | hash(ipadding | message))

	    // prepare to do inner hash
	    // hash(ipadding | message)
	    _md.start();
	    _md.update(_ipadding);
	  };

	  /**
	   * Updates the HMAC with the given message bytes.
	   *
	   * @param bytes the bytes to update with.
	   */
	  ctx.update = function(bytes) {
	    _md.update(bytes);
	  };

	  /**
	   * Produces the Message Authentication Code (MAC).
	   *
	   * @return a byte buffer containing the digest value.
	   */
	  ctx.getMac = function() {
	    // digest is done like so: hash(opadding | hash(ipadding | message))
	    // here we do the outer hashing
	    var inner = _md.digest().bytes();
	    _md.start();
	    _md.update(_opadding);
	    _md.update(inner);
	    return _md.digest();
	  };
	  // alias for getMac
	  ctx.digest = ctx.getMac;

	  return ctx;
	};

	var empty$1 = {};

	var empty$2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': empty$1
	});

	var require$$1$7 = /*@__PURE__*/getAugmentedNamespace(empty$2);

	var forge$p = forge$z;




	var pkcs5 = forge$p.pkcs5 = forge$p.pkcs5 || {};

	var crypto$a;
	if(forge$p.util.isNodejs && !forge$p.options.usePureJavaScript) {
	  crypto$a = require$$1$7;
	}

	/**
	 * Derives a key from a password.
	 *
	 * @param p the password as a binary-encoded string of bytes.
	 * @param s the salt as a binary-encoded string of bytes.
	 * @param c the iteration count, a positive integer.
	 * @param dkLen the intended length, in bytes, of the derived key,
	 *          (max: 2^32 - 1) * hash length of the PRF.
	 * @param [md] the message digest (or algorithm identifier as a string) to use
	 *          in the PRF, defaults to SHA-1.
	 * @param [callback(err, key)] presence triggers asynchronous version, called
	 *          once the operation completes.
	 *
	 * @return the derived key, as a binary-encoded string of bytes, for the
	 *           synchronous version (if no callback is specified).
	 */
	var pbkdf2$1 = forge$p.pbkdf2 = pkcs5.pbkdf2 = function(
	  p, s, c, dkLen, md, callback) {
	  if(typeof md === 'function') {
	    callback = md;
	    md = null;
	  }

	  // use native implementation if possible and not disabled, note that
	  // some node versions only support SHA-1, others allow digest to be changed
	  if(forge$p.util.isNodejs && !forge$p.options.usePureJavaScript &&
	    crypto$a.pbkdf2 && (md === null || typeof md !== 'object') &&
	    (crypto$a.pbkdf2Sync.length > 4 || (!md || md === 'sha1'))) {
	    if(typeof md !== 'string') {
	      // default prf to SHA-1
	      md = 'sha1';
	    }
	    p = Buffer$h.from(p, 'binary');
	    s = Buffer$h.from(s, 'binary');
	    if(!callback) {
	      if(crypto$a.pbkdf2Sync.length === 4) {
	        return crypto$a.pbkdf2Sync(p, s, c, dkLen).toString('binary');
	      }
	      return crypto$a.pbkdf2Sync(p, s, c, dkLen, md).toString('binary');
	    }
	    if(crypto$a.pbkdf2Sync.length === 4) {
	      return crypto$a.pbkdf2(p, s, c, dkLen, function(err, key) {
	        if(err) {
	          return callback(err);
	        }
	        callback(null, key.toString('binary'));
	      });
	    }
	    return crypto$a.pbkdf2(p, s, c, dkLen, md, function(err, key) {
	      if(err) {
	        return callback(err);
	      }
	      callback(null, key.toString('binary'));
	    });
	  }

	  if(typeof md === 'undefined' || md === null) {
	    // default prf to SHA-1
	    md = 'sha1';
	  }
	  if(typeof md === 'string') {
	    if(!(md in forge$p.md.algorithms)) {
	      throw new Error('Unknown hash algorithm: ' + md);
	    }
	    md = forge$p.md[md].create();
	  }

	  var hLen = md.digestLength;

	  /* 1. If dkLen > (2^32 - 1) * hLen, output "derived key too long" and
	    stop. */
	  if(dkLen > (0xFFFFFFFF * hLen)) {
	    var err = new Error('Derived key is too long.');
	    if(callback) {
	      return callback(err);
	    }
	    throw err;
	  }

	  /* 2. Let len be the number of hLen-octet blocks in the derived key,
	    rounding up, and let r be the number of octets in the last
	    block:

	    len = CEIL(dkLen / hLen),
	    r = dkLen - (len - 1) * hLen. */
	  var len = Math.ceil(dkLen / hLen);
	  var r = dkLen - (len - 1) * hLen;

	  /* 3. For each block of the derived key apply the function F defined
	    below to the password P, the salt S, the iteration count c, and
	    the block index to compute the block:

	    T_1 = F(P, S, c, 1),
	    T_2 = F(P, S, c, 2),
	    ...
	    T_len = F(P, S, c, len),

	    where the function F is defined as the exclusive-or sum of the
	    first c iterates of the underlying pseudorandom function PRF
	    applied to the password P and the concatenation of the salt S
	    and the block index i:

	    F(P, S, c, i) = u_1 XOR u_2 XOR ... XOR u_c

	    where

	    u_1 = PRF(P, S || INT(i)),
	    u_2 = PRF(P, u_1),
	    ...
	    u_c = PRF(P, u_{c-1}).

	    Here, INT(i) is a four-octet encoding of the integer i, most
	    significant octet first. */
	  var prf = forge$p.hmac.create();
	  prf.start(md, p);
	  var dk = '';
	  var xor, u_c, u_c1;

	  // sync version
	  if(!callback) {
	    for(var i = 1; i <= len; ++i) {
	      // PRF(P, S || INT(i)) (first iteration)
	      prf.start(null, null);
	      prf.update(s);
	      prf.update(forge$p.util.int32ToBytes(i));
	      xor = u_c1 = prf.digest().getBytes();

	      // PRF(P, u_{c-1}) (other iterations)
	      for(var j = 2; j <= c; ++j) {
	        prf.start(null, null);
	        prf.update(u_c1);
	        u_c = prf.digest().getBytes();
	        // F(p, s, c, i)
	        xor = forge$p.util.xorBytes(xor, u_c, hLen);
	        u_c1 = u_c;
	      }

	      /* 4. Concatenate the blocks and extract the first dkLen octets to
	        produce a derived key DK:

	        DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */
	      dk += (i < len) ? xor : xor.substr(0, r);
	    }
	    /* 5. Output the derived key DK. */
	    return dk;
	  }

	  // async version
	  var i = 1, j;
	  function outer() {
	    if(i > len) {
	      // done
	      return callback(null, dk);
	    }

	    // PRF(P, S || INT(i)) (first iteration)
	    prf.start(null, null);
	    prf.update(s);
	    prf.update(forge$p.util.int32ToBytes(i));
	    xor = u_c1 = prf.digest().getBytes();

	    // PRF(P, u_{c-1}) (other iterations)
	    j = 2;
	    inner();
	  }

	  function inner() {
	    if(j <= c) {
	      prf.start(null, null);
	      prf.update(u_c1);
	      u_c = prf.digest().getBytes();
	      // F(p, s, c, i)
	      xor = forge$p.util.xorBytes(xor, u_c, hLen);
	      u_c1 = u_c;
	      ++j;
	      return forge$p.util.setImmediate(inner);
	    }

	    /* 4. Concatenate the blocks and extract the first dkLen octets to
	      produce a derived key DK:

	      DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */
	    dk += (i < len) ? xor : xor.substr(0, r);

	    ++i;
	    outer();
	  }

	  outer();
	};

	/**
	 * Javascript implementation of basic PEM (Privacy Enhanced Mail) algorithms.
	 *
	 * See: RFC 1421.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2013-2014 Digital Bazaar, Inc.
	 *
	 * A Forge PEM object has the following fields:
	 *
	 * type: identifies the type of message (eg: "RSA PRIVATE KEY").
	 *
	 * procType: identifies the type of processing performed on the message,
	 *   it has two subfields: version and type, eg: 4,ENCRYPTED.
	 *
	 * contentDomain: identifies the type of content in the message, typically
	 *   only uses the value: "RFC822".
	 *
	 * dekInfo: identifies the message encryption algorithm and mode and includes
	 *   any parameters for the algorithm, it has two subfields: algorithm and
	 *   parameters, eg: DES-CBC,F8143EDE5960C597.
	 *
	 * headers: contains all other PEM encapsulated headers -- where order is
	 *   significant (for pairing data like recipient ID + key info).
	 *
	 * body: the binary-encoded body.
	 */

	var forge$o = forge$z;


	// shortcut for pem API
	var pem = forge$o.pem = forge$o.pem || {};

	/**
	 * Encodes (serializes) the given PEM object.
	 *
	 * @param msg the PEM message object to encode.
	 * @param options the options to use:
	 *          maxline the maximum characters per line for the body, (default: 64).
	 *
	 * @return the PEM-formatted string.
	 */
	pem.encode = function(msg, options) {
	  options = options || {};
	  var rval = '-----BEGIN ' + msg.type + '-----\r\n';

	  // encode special headers
	  var header;
	  if(msg.procType) {
	    header = {
	      name: 'Proc-Type',
	      values: [String(msg.procType.version), msg.procType.type]
	    };
	    rval += foldHeader(header);
	  }
	  if(msg.contentDomain) {
	    header = {name: 'Content-Domain', values: [msg.contentDomain]};
	    rval += foldHeader(header);
	  }
	  if(msg.dekInfo) {
	    header = {name: 'DEK-Info', values: [msg.dekInfo.algorithm]};
	    if(msg.dekInfo.parameters) {
	      header.values.push(msg.dekInfo.parameters);
	    }
	    rval += foldHeader(header);
	  }

	  if(msg.headers) {
	    // encode all other headers
	    for(var i = 0; i < msg.headers.length; ++i) {
	      rval += foldHeader(msg.headers[i]);
	    }
	  }

	  // terminate header
	  if(msg.procType) {
	    rval += '\r\n';
	  }

	  // add body
	  rval += forge$o.util.encode64(msg.body, options.maxline || 64) + '\r\n';

	  rval += '-----END ' + msg.type + '-----\r\n';
	  return rval;
	};

	/**
	 * Decodes (deserializes) all PEM messages found in the given string.
	 *
	 * @param str the PEM-formatted string to decode.
	 *
	 * @return the PEM message objects in an array.
	 */
	pem.decode = function(str) {
	  var rval = [];

	  // split string into PEM messages (be lenient w/EOF on BEGIN line)
	  var rMessage = /\s*-----BEGIN ([A-Z0-9- ]+)-----\r?\n?([\x21-\x7e\s]+?(?:\r?\n\r?\n))?([:A-Za-z0-9+\/=\s]+?)-----END \1-----/g;
	  var rHeader = /([\x21-\x7e]+):\s*([\x21-\x7e\s^:]+)/;
	  var rCRLF = /\r?\n/;
	  var match;
	  while(true) {
	    match = rMessage.exec(str);
	    if(!match) {
	      break;
	    }

	    // accept "NEW CERTIFICATE REQUEST" as "CERTIFICATE REQUEST"
	    // https://datatracker.ietf.org/doc/html/rfc7468#section-7
	    var type = match[1];
	    if(type === 'NEW CERTIFICATE REQUEST') {
	      type = 'CERTIFICATE REQUEST';
	    }

	    var msg = {
	      type: type,
	      procType: null,
	      contentDomain: null,
	      dekInfo: null,
	      headers: [],
	      body: forge$o.util.decode64(match[3])
	    };
	    rval.push(msg);

	    // no headers
	    if(!match[2]) {
	      continue;
	    }

	    // parse headers
	    var lines = match[2].split(rCRLF);
	    var li = 0;
	    while(match && li < lines.length) {
	      // get line, trim any rhs whitespace
	      var line = lines[li].replace(/\s+$/, '');

	      // RFC2822 unfold any following folded lines
	      for(var nl = li + 1; nl < lines.length; ++nl) {
	        var next = lines[nl];
	        if(!/\s/.test(next[0])) {
	          break;
	        }
	        line += next;
	        li = nl;
	      }

	      // parse header
	      match = line.match(rHeader);
	      if(match) {
	        var header = {name: match[1], values: []};
	        var values = match[2].split(',');
	        for(var vi = 0; vi < values.length; ++vi) {
	          header.values.push(ltrim(values[vi]));
	        }

	        // Proc-Type must be the first header
	        if(!msg.procType) {
	          if(header.name !== 'Proc-Type') {
	            throw new Error('Invalid PEM formatted message. The first ' +
	              'encapsulated header must be "Proc-Type".');
	          } else if(header.values.length !== 2) {
	            throw new Error('Invalid PEM formatted message. The "Proc-Type" ' +
	              'header must have two subfields.');
	          }
	          msg.procType = {version: values[0], type: values[1]};
	        } else if(!msg.contentDomain && header.name === 'Content-Domain') {
	          // special-case Content-Domain
	          msg.contentDomain = values[0] || '';
	        } else if(!msg.dekInfo && header.name === 'DEK-Info') {
	          // special-case DEK-Info
	          if(header.values.length === 0) {
	            throw new Error('Invalid PEM formatted message. The "DEK-Info" ' +
	              'header must have at least one subfield.');
	          }
	          msg.dekInfo = {algorithm: values[0], parameters: values[1] || null};
	        } else {
	          msg.headers.push(header);
	        }
	      }

	      ++li;
	    }

	    if(msg.procType === 'ENCRYPTED' && !msg.dekInfo) {
	      throw new Error('Invalid PEM formatted message. The "DEK-Info" ' +
	        'header must be present if "Proc-Type" is "ENCRYPTED".');
	    }
	  }

	  if(rval.length === 0) {
	    throw new Error('Invalid PEM formatted message.');
	  }

	  return rval;
	};

	function foldHeader(header) {
	  var rval = header.name + ': ';

	  // ensure values with CRLF are folded
	  var values = [];
	  var insertSpace = function(match, $1) {
	    return ' ' + $1;
	  };
	  for(var i = 0; i < header.values.length; ++i) {
	    values.push(header.values[i].replace(/^(\S+\r\n)/, insertSpace));
	  }
	  rval += values.join(',') + '\r\n';

	  // do folding
	  var length = 0;
	  var candidate = -1;
	  for(var i = 0; i < rval.length; ++i, ++length) {
	    if(length > 65 && candidate !== -1) {
	      var insert = rval[candidate];
	      if(insert === ',') {
	        ++candidate;
	        rval = rval.substr(0, candidate) + '\r\n ' + rval.substr(candidate);
	      } else {
	        rval = rval.substr(0, candidate) +
	          '\r\n' + insert + rval.substr(candidate + 1);
	      }
	      length = (i - candidate - 1);
	      candidate = -1;
	      ++i;
	    } else if(rval[i] === ' ' || rval[i] === '\t' || rval[i] === ',') {
	      candidate = i;
	    }
	  }

	  return rval;
	}

	function ltrim(str) {
	  return str.replace(/^\s+/, '');
	}

	/**
	 * Secure Hash Algorithm with 256-bit digest (SHA-256) implementation.
	 *
	 * See FIPS 180-2 for details.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
	 */

	var forge$n = forge$z;



	var sha256$a = forge$n.sha256 = forge$n.sha256 || {};
	forge$n.md.sha256 = forge$n.md.algorithms.sha256 = sha256$a;

	/**
	 * Creates a SHA-256 message digest object.
	 *
	 * @return a message digest object.
	 */
	sha256$a.create = function() {
	  // do initialization as necessary
	  if(!_initialized$2) {
	    _init$2();
	  }

	  // SHA-256 state contains eight 32-bit integers
	  var _state = null;

	  // input buffer
	  var _input = forge$n.util.createBuffer();

	  // used for word storage
	  var _w = new Array(64);

	  // message digest object
	  var md = {
	    algorithm: 'sha256',
	    blockLength: 64,
	    digestLength: 32,
	    // 56-bit length of message so far (does not including padding)
	    messageLength: 0,
	    // true message length
	    fullMessageLength: null,
	    // size of message length in bytes
	    messageLengthSize: 8
	  };

	  /**
	   * Starts the digest.
	   *
	   * @return this digest object.
	   */
	  md.start = function() {
	    // up to 56-bit message length for convenience
	    md.messageLength = 0;

	    // full message length (set md.messageLength64 for backwards-compatibility)
	    md.fullMessageLength = md.messageLength64 = [];
	    var int32s = md.messageLengthSize / 4;
	    for(var i = 0; i < int32s; ++i) {
	      md.fullMessageLength.push(0);
	    }
	    _input = forge$n.util.createBuffer();
	    _state = {
	      h0: 0x6A09E667,
	      h1: 0xBB67AE85,
	      h2: 0x3C6EF372,
	      h3: 0xA54FF53A,
	      h4: 0x510E527F,
	      h5: 0x9B05688C,
	      h6: 0x1F83D9AB,
	      h7: 0x5BE0CD19
	    };
	    return md;
	  };
	  // start digest automatically for first time
	  md.start();

	  /**
	   * Updates the digest with the given message input. The given input can
	   * treated as raw input (no encoding will be applied) or an encoding of
	   * 'utf8' maybe given to encode the input using UTF-8.
	   *
	   * @param msg the message input to update with.
	   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
	   *
	   * @return this digest object.
	   */
	  md.update = function(msg, encoding) {
	    if(encoding === 'utf8') {
	      msg = forge$n.util.encodeUtf8(msg);
	    }

	    // update message length
	    var len = msg.length;
	    md.messageLength += len;
	    len = [(len / 0x100000000) >>> 0, len >>> 0];
	    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {
	      md.fullMessageLength[i] += len[1];
	      len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);
	      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
	      len[0] = ((len[1] / 0x100000000) >>> 0);
	    }

	    // add bytes to input buffer
	    _input.putBytes(msg);

	    // process bytes
	    _update$2(_state, _w, _input);

	    // compact input buffer every 2K or if empty
	    if(_input.read > 2048 || _input.length() === 0) {
	      _input.compact();
	    }

	    return md;
	  };

	  /**
	   * Produces the digest.
	   *
	   * @return a byte buffer containing the digest value.
	   */
	  md.digest = function() {
	    /* Note: Here we copy the remaining bytes in the input buffer and
	    add the appropriate SHA-256 padding. Then we do the final update
	    on a copy of the state so that if the user wants to get
	    intermediate digests they can do so. */

	    /* Determine the number of bytes that must be added to the message
	    to ensure its length is congruent to 448 mod 512. In other words,
	    the data to be digested must be a multiple of 512 bits (or 128 bytes).
	    This data includes the message, some padding, and the length of the
	    message. Since the length of the message will be encoded as 8 bytes (64
	    bits), that means that the last segment of the data must have 56 bytes
	    (448 bits) of message and padding. Therefore, the length of the message
	    plus the padding must be congruent to 448 mod 512 because
	    512 - 128 = 448.

	    In order to fill up the message length it must be filled with
	    padding that begins with 1 bit followed by all 0 bits. Padding
	    must *always* be present, so if the message length is already
	    congruent to 448 mod 512, then 512 padding bits must be added. */

	    var finalBlock = forge$n.util.createBuffer();
	    finalBlock.putBytes(_input.bytes());

	    // compute remaining size to be digested (include message length size)
	    var remaining = (
	      md.fullMessageLength[md.fullMessageLength.length - 1] +
	      md.messageLengthSize);

	    // add padding for overflow blockSize - overflow
	    // _padding starts with 1 byte with first bit is set (byte value 128), then
	    // there may be up to (blockSize - 1) other pad bytes
	    var overflow = remaining & (md.blockLength - 1);
	    finalBlock.putBytes(_padding$2.substr(0, md.blockLength - overflow));

	    // serialize message length in bits in big-endian order; since length
	    // is stored in bytes we multiply by 8 and add carry from next int
	    var next, carry;
	    var bits = md.fullMessageLength[0] * 8;
	    for(var i = 0; i < md.fullMessageLength.length - 1; ++i) {
	      next = md.fullMessageLength[i + 1] * 8;
	      carry = (next / 0x100000000) >>> 0;
	      bits += carry;
	      finalBlock.putInt32(bits >>> 0);
	      bits = next >>> 0;
	    }
	    finalBlock.putInt32(bits);

	    var s2 = {
	      h0: _state.h0,
	      h1: _state.h1,
	      h2: _state.h2,
	      h3: _state.h3,
	      h4: _state.h4,
	      h5: _state.h5,
	      h6: _state.h6,
	      h7: _state.h7
	    };
	    _update$2(s2, _w, finalBlock);
	    var rval = forge$n.util.createBuffer();
	    rval.putInt32(s2.h0);
	    rval.putInt32(s2.h1);
	    rval.putInt32(s2.h2);
	    rval.putInt32(s2.h3);
	    rval.putInt32(s2.h4);
	    rval.putInt32(s2.h5);
	    rval.putInt32(s2.h6);
	    rval.putInt32(s2.h7);
	    return rval;
	  };

	  return md;
	};

	// sha-256 padding bytes not initialized yet
	var _padding$2 = null;
	var _initialized$2 = false;

	// table of constants
	var _k$1 = null;

	/**
	 * Initializes the constant tables.
	 */
	function _init$2() {
	  // create padding
	  _padding$2 = String.fromCharCode(128);
	  _padding$2 += forge$n.util.fillString(String.fromCharCode(0x00), 64);

	  // create K table for SHA-256
	  _k$1 = [
	    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
	    0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
	    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
	    0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
	    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
	    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
	    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
	    0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
	    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
	    0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
	    0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
	    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
	    0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
	    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];

	  // now initialized
	  _initialized$2 = true;
	}

	/**
	 * Updates a SHA-256 state with the given byte buffer.
	 *
	 * @param s the SHA-256 state to update.
	 * @param w the array to use to store words.
	 * @param bytes the byte buffer to update with.
	 */
	function _update$2(s, w, bytes) {
	  // consume 512 bit (64 byte) chunks
	  var t1, t2, s0, s1, ch, maj, i, a, b, c, d, e, f, g, h;
	  var len = bytes.length();
	  while(len >= 64) {
	    // the w array will be populated with sixteen 32-bit big-endian words
	    // and then extended into 64 32-bit words according to SHA-256
	    for(i = 0; i < 16; ++i) {
	      w[i] = bytes.getInt32();
	    }
	    for(; i < 64; ++i) {
	      // XOR word 2 words ago rot right 17, rot right 19, shft right 10
	      t1 = w[i - 2];
	      t1 =
	        ((t1 >>> 17) | (t1 << 15)) ^
	        ((t1 >>> 19) | (t1 << 13)) ^
	        (t1 >>> 10);
	      // XOR word 15 words ago rot right 7, rot right 18, shft right 3
	      t2 = w[i - 15];
	      t2 =
	        ((t2 >>> 7) | (t2 << 25)) ^
	        ((t2 >>> 18) | (t2 << 14)) ^
	        (t2 >>> 3);
	      // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^32
	      w[i] = (t1 + w[i - 7] + t2 + w[i - 16]) | 0;
	    }

	    // initialize hash value for this chunk
	    a = s.h0;
	    b = s.h1;
	    c = s.h2;
	    d = s.h3;
	    e = s.h4;
	    f = s.h5;
	    g = s.h6;
	    h = s.h7;

	    // round function
	    for(i = 0; i < 64; ++i) {
	      // Sum1(e)
	      s1 =
	        ((e >>> 6) | (e << 26)) ^
	        ((e >>> 11) | (e << 21)) ^
	        ((e >>> 25) | (e << 7));
	      // Ch(e, f, g) (optimized the same way as SHA-1)
	      ch = g ^ (e & (f ^ g));
	      // Sum0(a)
	      s0 =
	        ((a >>> 2) | (a << 30)) ^
	        ((a >>> 13) | (a << 19)) ^
	        ((a >>> 22) | (a << 10));
	      // Maj(a, b, c) (optimized the same way as SHA-1)
	      maj = (a & b) | (c & (a ^ b));

	      // main algorithm
	      t1 = h + s1 + ch + _k$1[i] + w[i];
	      t2 = s0 + maj;
	      h = g;
	      g = f;
	      f = e;
	      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
	      // can't truncate with `| 0`
	      e = (d + t1) >>> 0;
	      d = c;
	      c = b;
	      b = a;
	      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
	      // can't truncate with `| 0`
	      a = (t1 + t2) >>> 0;
	    }

	    // update hash state
	    s.h0 = (s.h0 + a) | 0;
	    s.h1 = (s.h1 + b) | 0;
	    s.h2 = (s.h2 + c) | 0;
	    s.h3 = (s.h3 + d) | 0;
	    s.h4 = (s.h4 + e) | 0;
	    s.h5 = (s.h5 + f) | 0;
	    s.h6 = (s.h6 + g) | 0;
	    s.h7 = (s.h7 + h) | 0;
	    len -= 64;
	  }
	}

	var forge$m = forge$z;


	var _crypto$1 = null;
	if(forge$m.util.isNodejs && !forge$m.options.usePureJavaScript &&
	  !process$3.versions['node-webkit']) {
	  _crypto$1 = require$$1$7;
	}

	/* PRNG API */
	var prng = forge$m.prng = forge$m.prng || {};

	/**
	 * Creates a new PRNG context.
	 *
	 * A PRNG plugin must be passed in that will provide:
	 *
	 * 1. A function that initializes the key and seed of a PRNG context. It
	 *   will be given a 16 byte key and a 16 byte seed. Any key expansion
	 *   or transformation of the seed from a byte string into an array of
	 *   integers (or similar) should be performed.
	 * 2. The cryptographic function used by the generator. It takes a key and
	 *   a seed.
	 * 3. A seed increment function. It takes the seed and returns seed + 1.
	 * 4. An api to create a message digest.
	 *
	 * For an example, see random.js.
	 *
	 * @param plugin the PRNG plugin to use.
	 */
	prng.create = function(plugin) {
	  var ctx = {
	    plugin: plugin,
	    key: null,
	    seed: null,
	    time: null,
	    // number of reseeds so far
	    reseeds: 0,
	    // amount of data generated so far
	    generated: 0,
	    // no initial key bytes
	    keyBytes: ''
	  };

	  // create 32 entropy pools (each is a message digest)
	  var md = plugin.md;
	  var pools = new Array(32);
	  for(var i = 0; i < 32; ++i) {
	    pools[i] = md.create();
	  }
	  ctx.pools = pools;

	  // entropy pools are written to cyclically, starting at index 0
	  ctx.pool = 0;

	  /**
	   * Generates random bytes. The bytes may be generated synchronously or
	   * asynchronously. Web workers must use the asynchronous interface or
	   * else the behavior is undefined.
	   *
	   * @param count the number of random bytes to generate.
	   * @param [callback(err, bytes)] called once the operation completes.
	   *
	   * @return count random bytes as a string.
	   */
	  ctx.generate = function(count, callback) {
	    // do synchronously
	    if(!callback) {
	      return ctx.generateSync(count);
	    }

	    // simple generator using counter-based CBC
	    var cipher = ctx.plugin.cipher;
	    var increment = ctx.plugin.increment;
	    var formatKey = ctx.plugin.formatKey;
	    var formatSeed = ctx.plugin.formatSeed;
	    var b = forge$m.util.createBuffer();

	    // paranoid deviation from Fortuna:
	    // reset key for every request to protect previously
	    // generated random bytes should the key be discovered;
	    // there is no 100ms based reseeding because of this
	    // forced reseed for every `generate` call
	    ctx.key = null;

	    generate();

	    function generate(err) {
	      if(err) {
	        return callback(err);
	      }

	      // sufficient bytes generated
	      if(b.length() >= count) {
	        return callback(null, b.getBytes(count));
	      }

	      // if amount of data generated is greater than 1 MiB, trigger reseed
	      if(ctx.generated > 0xfffff) {
	        ctx.key = null;
	      }

	      if(ctx.key === null) {
	        // prevent stack overflow
	        return forge$m.util.nextTick(function() {
	          _reseed(generate);
	        });
	      }

	      // generate the random bytes
	      var bytes = cipher(ctx.key, ctx.seed);
	      ctx.generated += bytes.length;
	      b.putBytes(bytes);

	      // generate bytes for a new key and seed
	      ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));
	      ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));

	      forge$m.util.setImmediate(generate);
	    }
	  };

	  /**
	   * Generates random bytes synchronously.
	   *
	   * @param count the number of random bytes to generate.
	   *
	   * @return count random bytes as a string.
	   */
	  ctx.generateSync = function(count) {
	    // simple generator using counter-based CBC
	    var cipher = ctx.plugin.cipher;
	    var increment = ctx.plugin.increment;
	    var formatKey = ctx.plugin.formatKey;
	    var formatSeed = ctx.plugin.formatSeed;

	    // paranoid deviation from Fortuna:
	    // reset key for every request to protect previously
	    // generated random bytes should the key be discovered;
	    // there is no 100ms based reseeding because of this
	    // forced reseed for every `generateSync` call
	    ctx.key = null;

	    var b = forge$m.util.createBuffer();
	    while(b.length() < count) {
	      // if amount of data generated is greater than 1 MiB, trigger reseed
	      if(ctx.generated > 0xfffff) {
	        ctx.key = null;
	      }

	      if(ctx.key === null) {
	        _reseedSync();
	      }

	      // generate the random bytes
	      var bytes = cipher(ctx.key, ctx.seed);
	      ctx.generated += bytes.length;
	      b.putBytes(bytes);

	      // generate bytes for a new key and seed
	      ctx.key = formatKey(cipher(ctx.key, increment(ctx.seed)));
	      ctx.seed = formatSeed(cipher(ctx.key, ctx.seed));
	    }

	    return b.getBytes(count);
	  };

	  /**
	   * Private function that asynchronously reseeds a generator.
	   *
	   * @param callback(err) called once the operation completes.
	   */
	  function _reseed(callback) {
	    if(ctx.pools[0].messageLength >= 32) {
	      _seed();
	      return callback();
	    }
	    // not enough seed data...
	    var needed = (32 - ctx.pools[0].messageLength) << 5;
	    ctx.seedFile(needed, function(err, bytes) {
	      if(err) {
	        return callback(err);
	      }
	      ctx.collect(bytes);
	      _seed();
	      callback();
	    });
	  }

	  /**
	   * Private function that synchronously reseeds a generator.
	   */
	  function _reseedSync() {
	    if(ctx.pools[0].messageLength >= 32) {
	      return _seed();
	    }
	    // not enough seed data...
	    var needed = (32 - ctx.pools[0].messageLength) << 5;
	    ctx.collect(ctx.seedFileSync(needed));
	    _seed();
	  }

	  /**
	   * Private function that seeds a generator once enough bytes are available.
	   */
	  function _seed() {
	    // update reseed count
	    ctx.reseeds = (ctx.reseeds === 0xffffffff) ? 0 : ctx.reseeds + 1;

	    // goal is to update `key` via:
	    // key = hash(key + s)
	    //   where 's' is all collected entropy from selected pools, then...

	    // create a plugin-based message digest
	    var md = ctx.plugin.md.create();

	    // consume current key bytes
	    md.update(ctx.keyBytes);

	    // digest the entropy of pools whose index k meet the
	    // condition 'n mod 2^k == 0' where n is the number of reseeds
	    var _2powK = 1;
	    for(var k = 0; k < 32; ++k) {
	      if(ctx.reseeds % _2powK === 0) {
	        md.update(ctx.pools[k].digest().getBytes());
	        ctx.pools[k].start();
	      }
	      _2powK = _2powK << 1;
	    }

	    // get digest for key bytes
	    ctx.keyBytes = md.digest().getBytes();

	    // paranoid deviation from Fortuna:
	    // update `seed` via `seed = hash(key)`
	    // instead of initializing to zero once and only
	    // ever incrementing it
	    md.start();
	    md.update(ctx.keyBytes);
	    var seedBytes = md.digest().getBytes();

	    // update state
	    ctx.key = ctx.plugin.formatKey(ctx.keyBytes);
	    ctx.seed = ctx.plugin.formatSeed(seedBytes);
	    ctx.generated = 0;
	  }

	  /**
	   * The built-in default seedFile. This seedFile is used when entropy
	   * is needed immediately.
	   *
	   * @param needed the number of bytes that are needed.
	   *
	   * @return the random bytes.
	   */
	  function defaultSeedFile(needed) {
	    // use window.crypto.getRandomValues strong source of entropy if available
	    var getRandomValues = null;
	    var globalScope = forge$m.util.globalScope;
	    var _crypto = globalScope.crypto || globalScope.msCrypto;
	    if(_crypto && _crypto.getRandomValues) {
	      getRandomValues = function(arr) {
	        return _crypto.getRandomValues(arr);
	      };
	    }

	    var b = forge$m.util.createBuffer();
	    if(getRandomValues) {
	      while(b.length() < needed) {
	        // max byte length is 65536 before QuotaExceededError is thrown
	        // http://www.w3.org/TR/WebCryptoAPI/#RandomSource-method-getRandomValues
	        var count = Math.max(1, Math.min(needed - b.length(), 65536) / 4);
	        var entropy = new Uint32Array(Math.floor(count));
	        try {
	          getRandomValues(entropy);
	          for(var i = 0; i < entropy.length; ++i) {
	            b.putInt32(entropy[i]);
	          }
	        } catch(e) {
	          /* only ignore QuotaExceededError */
	          if(!(typeof QuotaExceededError !== 'undefined' &&
	            e instanceof QuotaExceededError)) {
	            throw e;
	          }
	        }
	      }
	    }

	    // be sad and add some weak random data
	    if(b.length() < needed) {
	      /* Draws from Park-Miller "minimal standard" 31 bit PRNG,
	      implemented with David G. Carta's optimization: with 32 bit math
	      and without division (Public Domain). */
	      var hi, lo, next;
	      var seed = Math.floor(Math.random() * 0x010000);
	      while(b.length() < needed) {
	        lo = 16807 * (seed & 0xFFFF);
	        hi = 16807 * (seed >> 16);
	        lo += (hi & 0x7FFF) << 16;
	        lo += hi >> 15;
	        lo = (lo & 0x7FFFFFFF) + (lo >> 31);
	        seed = lo & 0xFFFFFFFF;

	        // consume lower 3 bytes of seed
	        for(var i = 0; i < 3; ++i) {
	          // throw in more pseudo random
	          next = seed >>> (i << 3);
	          next ^= Math.floor(Math.random() * 0x0100);
	          b.putByte(next & 0xFF);
	        }
	      }
	    }

	    return b.getBytes(needed);
	  }
	  // initialize seed file APIs
	  if(_crypto$1) {
	    // use nodejs async API
	    ctx.seedFile = function(needed, callback) {
	      _crypto$1.randomBytes(needed, function(err, bytes) {
	        if(err) {
	          return callback(err);
	        }
	        callback(null, bytes.toString());
	      });
	    };
	    // use nodejs sync API
	    ctx.seedFileSync = function(needed) {
	      return _crypto$1.randomBytes(needed).toString();
	    };
	  } else {
	    ctx.seedFile = function(needed, callback) {
	      try {
	        callback(null, defaultSeedFile(needed));
	      } catch(e) {
	        callback(e);
	      }
	    };
	    ctx.seedFileSync = defaultSeedFile;
	  }

	  /**
	   * Adds entropy to a prng ctx's accumulator.
	   *
	   * @param bytes the bytes of entropy as a string.
	   */
	  ctx.collect = function(bytes) {
	    // iterate over pools distributing entropy cyclically
	    var count = bytes.length;
	    for(var i = 0; i < count; ++i) {
	      ctx.pools[ctx.pool].update(bytes.substr(i, 1));
	      ctx.pool = (ctx.pool === 31) ? 0 : ctx.pool + 1;
	    }
	  };

	  /**
	   * Collects an integer of n bits.
	   *
	   * @param i the integer entropy.
	   * @param n the number of bits in the integer.
	   */
	  ctx.collectInt = function(i, n) {
	    var bytes = '';
	    for(var x = 0; x < n; x += 8) {
	      bytes += String.fromCharCode((i >> x) & 0xFF);
	    }
	    ctx.collect(bytes);
	  };

	  /**
	   * Registers a Web Worker to receive immediate entropy from the main thread.
	   * This method is required until Web Workers can access the native crypto
	   * API. This method should be called twice for each created worker, once in
	   * the main thread, and once in the worker itself.
	   *
	   * @param worker the worker to register.
	   */
	  ctx.registerWorker = function(worker) {
	    // worker receives random bytes
	    if(worker === self) {
	      ctx.seedFile = function(needed, callback) {
	        function listener(e) {
	          var data = e.data;
	          if(data.forge && data.forge.prng) {
	            self.removeEventListener('message', listener);
	            callback(data.forge.prng.err, data.forge.prng.bytes);
	          }
	        }
	        self.addEventListener('message', listener);
	        self.postMessage({forge: {prng: {needed: needed}}});
	      };
	    } else {
	      // main thread sends random bytes upon request
	      var listener = function(e) {
	        var data = e.data;
	        if(data.forge && data.forge.prng) {
	          ctx.seedFile(data.forge.prng.needed, function(err, bytes) {
	            worker.postMessage({forge: {prng: {err: err, bytes: bytes}}});
	          });
	        }
	      };
	      // TODO: do we need to remove the event listener when the worker dies?
	      worker.addEventListener('message', listener);
	    }
	  };

	  return ctx;
	};

	/**
	 * An API for getting cryptographically-secure random bytes. The bytes are
	 * generated using the Fortuna algorithm devised by Bruce Schneier and
	 * Niels Ferguson.
	 *
	 * Getting strong random bytes is not yet easy to do in javascript. The only
	 * truish random entropy that can be collected is from the mouse, keyboard, or
	 * from timing with respect to page loads, etc. This generator makes a poor
	 * attempt at providing random bytes when those sources haven't yet provided
	 * enough entropy to initially seed or to reseed the PRNG.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2009-2014 Digital Bazaar, Inc.
	 */

	var forge$l = forge$z;





	(function() {

	// forge.random already defined
	if(forge$l.random && forge$l.random.getBytes) {
	  return;
	}

	(function(jQuery) {

	// the default prng plugin, uses AES-128
	var prng_aes = {};
	var _prng_aes_output = new Array(4);
	var _prng_aes_buffer = forge$l.util.createBuffer();
	prng_aes.formatKey = function(key) {
	  // convert the key into 32-bit integers
	  var tmp = forge$l.util.createBuffer(key);
	  key = new Array(4);
	  key[0] = tmp.getInt32();
	  key[1] = tmp.getInt32();
	  key[2] = tmp.getInt32();
	  key[3] = tmp.getInt32();

	  // return the expanded key
	  return forge$l.aes._expandKey(key, false);
	};
	prng_aes.formatSeed = function(seed) {
	  // convert seed into 32-bit integers
	  var tmp = forge$l.util.createBuffer(seed);
	  seed = new Array(4);
	  seed[0] = tmp.getInt32();
	  seed[1] = tmp.getInt32();
	  seed[2] = tmp.getInt32();
	  seed[3] = tmp.getInt32();
	  return seed;
	};
	prng_aes.cipher = function(key, seed) {
	  forge$l.aes._updateBlock(key, seed, _prng_aes_output, false);
	  _prng_aes_buffer.putInt32(_prng_aes_output[0]);
	  _prng_aes_buffer.putInt32(_prng_aes_output[1]);
	  _prng_aes_buffer.putInt32(_prng_aes_output[2]);
	  _prng_aes_buffer.putInt32(_prng_aes_output[3]);
	  return _prng_aes_buffer.getBytes();
	};
	prng_aes.increment = function(seed) {
	  // FIXME: do we care about carry or signed issues?
	  ++seed[3];
	  return seed;
	};
	prng_aes.md = forge$l.md.sha256;

	/**
	 * Creates a new PRNG.
	 */
	function spawnPrng() {
	  var ctx = forge$l.prng.create(prng_aes);

	  /**
	   * Gets random bytes. If a native secure crypto API is unavailable, this
	   * method tries to make the bytes more unpredictable by drawing from data that
	   * can be collected from the user of the browser, eg: mouse movement.
	   *
	   * If a callback is given, this method will be called asynchronously.
	   *
	   * @param count the number of random bytes to get.
	   * @param [callback(err, bytes)] called once the operation completes.
	   *
	   * @return the random bytes in a string.
	   */
	  ctx.getBytes = function(count, callback) {
	    return ctx.generate(count, callback);
	  };

	  /**
	   * Gets random bytes asynchronously. If a native secure crypto API is
	   * unavailable, this method tries to make the bytes more unpredictable by
	   * drawing from data that can be collected from the user of the browser,
	   * eg: mouse movement.
	   *
	   * @param count the number of random bytes to get.
	   *
	   * @return the random bytes in a string.
	   */
	  ctx.getBytesSync = function(count) {
	    return ctx.generate(count);
	  };

	  return ctx;
	}

	// create default prng context
	var _ctx = spawnPrng();

	// add other sources of entropy only if window.crypto.getRandomValues is not
	// available -- otherwise this source will be automatically used by the prng
	var getRandomValues = null;
	var globalScope = forge$l.util.globalScope;
	var _crypto = globalScope.crypto || globalScope.msCrypto;
	if(_crypto && _crypto.getRandomValues) {
	  getRandomValues = function(arr) {
	    return _crypto.getRandomValues(arr);
	  };
	}

	if((!forge$l.util.isNodejs && !getRandomValues)) {

	  // get load time entropy
	  _ctx.collectInt(+new Date(), 32);

	  // add some entropy from navigator object
	  if(typeof(navigator) !== 'undefined') {
	    var _navBytes = '';
	    for(var key in navigator) {
	      try {
	        if(typeof(navigator[key]) == 'string') {
	          _navBytes += navigator[key];
	        }
	      } catch(e) {
	        /* Some navigator keys might not be accessible, e.g. the geolocation
	          attribute throws an exception if touched in Mozilla chrome://
	          context.

	          Silently ignore this and just don't use this as a source of
	          entropy. */
	      }
	    }
	    _ctx.collect(_navBytes);
	    _navBytes = null;
	  }

	  // add mouse and keyboard collectors if jquery is available
	  if(jQuery) {
	    // set up mouse entropy capture
	    jQuery().mousemove(function(e) {
	      // add mouse coords
	      _ctx.collectInt(e.clientX, 16);
	      _ctx.collectInt(e.clientY, 16);
	    });

	    // set up keyboard entropy capture
	    jQuery().keypress(function(e) {
	      _ctx.collectInt(e.charCode, 8);
	    });
	  }
	}

	/* Random API */
	if(!forge$l.random) {
	  forge$l.random = _ctx;
	} else {
	  // extend forge.random with _ctx
	  for(var key in _ctx) {
	    forge$l.random[key] = _ctx[key];
	  }
	}

	// expose spawn PRNG
	forge$l.random.createInstance = spawnPrng;

	})(typeof(jQuery) !== 'undefined' ? jQuery : null);

	})();

	/**
	 * RC2 implementation.
	 *
	 * @author Stefan Siegl
	 *
	 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
	 *
	 * Information on the RC2 cipher is available from RFC #2268,
	 * http://www.ietf.org/rfc/rfc2268.txt
	 */

	var forge$k = forge$z;


	var piTable = [
	  0xd9, 0x78, 0xf9, 0xc4, 0x19, 0xdd, 0xb5, 0xed, 0x28, 0xe9, 0xfd, 0x79, 0x4a, 0xa0, 0xd8, 0x9d,
	  0xc6, 0x7e, 0x37, 0x83, 0x2b, 0x76, 0x53, 0x8e, 0x62, 0x4c, 0x64, 0x88, 0x44, 0x8b, 0xfb, 0xa2,
	  0x17, 0x9a, 0x59, 0xf5, 0x87, 0xb3, 0x4f, 0x13, 0x61, 0x45, 0x6d, 0x8d, 0x09, 0x81, 0x7d, 0x32,
	  0xbd, 0x8f, 0x40, 0xeb, 0x86, 0xb7, 0x7b, 0x0b, 0xf0, 0x95, 0x21, 0x22, 0x5c, 0x6b, 0x4e, 0x82,
	  0x54, 0xd6, 0x65, 0x93, 0xce, 0x60, 0xb2, 0x1c, 0x73, 0x56, 0xc0, 0x14, 0xa7, 0x8c, 0xf1, 0xdc,
	  0x12, 0x75, 0xca, 0x1f, 0x3b, 0xbe, 0xe4, 0xd1, 0x42, 0x3d, 0xd4, 0x30, 0xa3, 0x3c, 0xb6, 0x26,
	  0x6f, 0xbf, 0x0e, 0xda, 0x46, 0x69, 0x07, 0x57, 0x27, 0xf2, 0x1d, 0x9b, 0xbc, 0x94, 0x43, 0x03,
	  0xf8, 0x11, 0xc7, 0xf6, 0x90, 0xef, 0x3e, 0xe7, 0x06, 0xc3, 0xd5, 0x2f, 0xc8, 0x66, 0x1e, 0xd7,
	  0x08, 0xe8, 0xea, 0xde, 0x80, 0x52, 0xee, 0xf7, 0x84, 0xaa, 0x72, 0xac, 0x35, 0x4d, 0x6a, 0x2a,
	  0x96, 0x1a, 0xd2, 0x71, 0x5a, 0x15, 0x49, 0x74, 0x4b, 0x9f, 0xd0, 0x5e, 0x04, 0x18, 0xa4, 0xec,
	  0xc2, 0xe0, 0x41, 0x6e, 0x0f, 0x51, 0xcb, 0xcc, 0x24, 0x91, 0xaf, 0x50, 0xa1, 0xf4, 0x70, 0x39,
	  0x99, 0x7c, 0x3a, 0x85, 0x23, 0xb8, 0xb4, 0x7a, 0xfc, 0x02, 0x36, 0x5b, 0x25, 0x55, 0x97, 0x31,
	  0x2d, 0x5d, 0xfa, 0x98, 0xe3, 0x8a, 0x92, 0xae, 0x05, 0xdf, 0x29, 0x10, 0x67, 0x6c, 0xba, 0xc9,
	  0xd3, 0x00, 0xe6, 0xcf, 0xe1, 0x9e, 0xa8, 0x2c, 0x63, 0x16, 0x01, 0x3f, 0x58, 0xe2, 0x89, 0xa9,
	  0x0d, 0x38, 0x34, 0x1b, 0xab, 0x33, 0xff, 0xb0, 0xbb, 0x48, 0x0c, 0x5f, 0xb9, 0xb1, 0xcd, 0x2e,
	  0xc5, 0xf3, 0xdb, 0x47, 0xe5, 0xa5, 0x9c, 0x77, 0x0a, 0xa6, 0x20, 0x68, 0xfe, 0x7f, 0xc1, 0xad
	];

	var s = [1, 2, 3, 5];

	/**
	 * Rotate a word left by given number of bits.
	 *
	 * Bits that are shifted out on the left are put back in on the right
	 * hand side.
	 *
	 * @param word The word to shift left.
	 * @param bits The number of bits to shift by.
	 * @return The rotated word.
	 */
	var rol = function(word, bits) {
	  return ((word << bits) & 0xffff) | ((word & 0xffff) >> (16 - bits));
	};

	/**
	 * Rotate a word right by given number of bits.
	 *
	 * Bits that are shifted out on the right are put back in on the left
	 * hand side.
	 *
	 * @param word The word to shift right.
	 * @param bits The number of bits to shift by.
	 * @return The rotated word.
	 */
	var ror = function(word, bits) {
	  return ((word & 0xffff) >> bits) | ((word << (16 - bits)) & 0xffff);
	};

	/* RC2 API */
	forge$k.rc2 = forge$k.rc2 || {};

	/**
	 * Perform RC2 key expansion as per RFC #2268, section 2.
	 *
	 * @param key variable-length user key (between 1 and 128 bytes)
	 * @param effKeyBits number of effective key bits (default: 128)
	 * @return the expanded RC2 key (ByteBuffer of 128 bytes)
	 */
	forge$k.rc2.expandKey = function(key, effKeyBits) {
	  if(typeof key === 'string') {
	    key = forge$k.util.createBuffer(key);
	  }
	  effKeyBits = effKeyBits || 128;

	  /* introduce variables that match the names used in RFC #2268 */
	  var L = key;
	  var T = key.length();
	  var T1 = effKeyBits;
	  var T8 = Math.ceil(T1 / 8);
	  var TM = 0xff >> (T1 & 0x07);
	  var i;

	  for(i = T; i < 128; i++) {
	    L.putByte(piTable[(L.at(i - 1) + L.at(i - T)) & 0xff]);
	  }

	  L.setAt(128 - T8, piTable[L.at(128 - T8) & TM]);

	  for(i = 127 - T8; i >= 0; i--) {
	    L.setAt(i, piTable[L.at(i + 1) ^ L.at(i + T8)]);
	  }

	  return L;
	};

	/**
	 * Creates a RC2 cipher object.
	 *
	 * @param key the symmetric key to use (as base for key generation).
	 * @param bits the number of effective key bits.
	 * @param encrypt false for decryption, true for encryption.
	 *
	 * @return the cipher.
	 */
	var createCipher = function(key, bits, encrypt) {
	  var _finish = false, _input = null, _output = null, _iv = null;
	  var mixRound, mashRound;
	  var i, j, K = [];

	  /* Expand key and fill into K[] Array */
	  key = forge$k.rc2.expandKey(key, bits);
	  for(i = 0; i < 64; i++) {
	    K.push(key.getInt16Le());
	  }

	  if(encrypt) {
	    /**
	     * Perform one mixing round "in place".
	     *
	     * @param R Array of four words to perform mixing on.
	     */
	    mixRound = function(R) {
	      for(i = 0; i < 4; i++) {
	        R[i] += K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) +
	          ((~R[(i + 3) % 4]) & R[(i + 1) % 4]);
	        R[i] = rol(R[i], s[i]);
	        j++;
	      }
	    };

	    /**
	     * Perform one mashing round "in place".
	     *
	     * @param R Array of four words to perform mashing on.
	     */
	    mashRound = function(R) {
	      for(i = 0; i < 4; i++) {
	        R[i] += K[R[(i + 3) % 4] & 63];
	      }
	    };
	  } else {
	    /**
	     * Perform one r-mixing round "in place".
	     *
	     * @param R Array of four words to perform mixing on.
	     */
	    mixRound = function(R) {
	      for(i = 3; i >= 0; i--) {
	        R[i] = ror(R[i], s[i]);
	        R[i] -= K[j] + (R[(i + 3) % 4] & R[(i + 2) % 4]) +
	          ((~R[(i + 3) % 4]) & R[(i + 1) % 4]);
	        j--;
	      }
	    };

	    /**
	     * Perform one r-mashing round "in place".
	     *
	     * @param R Array of four words to perform mashing on.
	     */
	    mashRound = function(R) {
	      for(i = 3; i >= 0; i--) {
	        R[i] -= K[R[(i + 3) % 4] & 63];
	      }
	    };
	  }

	  /**
	   * Run the specified cipher execution plan.
	   *
	   * This function takes four words from the input buffer, applies the IV on
	   * it (if requested) and runs the provided execution plan.
	   *
	   * The plan must be put together in form of a array of arrays.  Where the
	   * outer one is simply a list of steps to perform and the inner one needs
	   * to have two elements: the first one telling how many rounds to perform,
	   * the second one telling what to do (i.e. the function to call).
	   *
	   * @param {Array} plan The plan to execute.
	   */
	  var runPlan = function(plan) {
	    var R = [];

	    /* Get data from input buffer and fill the four words into R */
	    for(i = 0; i < 4; i++) {
	      var val = _input.getInt16Le();

	      if(_iv !== null) {
	        if(encrypt) {
	          /* We're encrypting, apply the IV first. */
	          val ^= _iv.getInt16Le();
	        } else {
	          /* We're decryption, keep cipher text for next block. */
	          _iv.putInt16Le(val);
	        }
	      }

	      R.push(val & 0xffff);
	    }

	    /* Reset global "j" variable as per spec. */
	    j = encrypt ? 0 : 63;

	    /* Run execution plan. */
	    for(var ptr = 0; ptr < plan.length; ptr++) {
	      for(var ctr = 0; ctr < plan[ptr][0]; ctr++) {
	        plan[ptr][1](R);
	      }
	    }

	    /* Write back result to output buffer. */
	    for(i = 0; i < 4; i++) {
	      if(_iv !== null) {
	        if(encrypt) {
	          /* We're encrypting in CBC-mode, feed back encrypted bytes into
	             IV buffer to carry it forward to next block. */
	          _iv.putInt16Le(R[i]);
	        } else {
	          R[i] ^= _iv.getInt16Le();
	        }
	      }

	      _output.putInt16Le(R[i]);
	    }
	  };

	  /* Create cipher object */
	  var cipher = null;
	  cipher = {
	    /**
	     * Starts or restarts the encryption or decryption process, whichever
	     * was previously configured.
	     *
	     * To use the cipher in CBC mode, iv may be given either as a string
	     * of bytes, or as a byte buffer.  For ECB mode, give null as iv.
	     *
	     * @param iv the initialization vector to use, null for ECB mode.
	     * @param output the output the buffer to write to, null to create one.
	     */
	    start: function(iv, output) {
	      if(iv) {
	        /* CBC mode */
	        if(typeof iv === 'string') {
	          iv = forge$k.util.createBuffer(iv);
	        }
	      }

	      _finish = false;
	      _input = forge$k.util.createBuffer();
	      _output = output || new forge$k.util.createBuffer();
	      _iv = iv;

	      cipher.output = _output;
	    },

	    /**
	     * Updates the next block.
	     *
	     * @param input the buffer to read from.
	     */
	    update: function(input) {
	      if(!_finish) {
	        // not finishing, so fill the input buffer with more input
	        _input.putBuffer(input);
	      }

	      while(_input.length() >= 8) {
	        runPlan([
	            [ 5, mixRound ],
	            [ 1, mashRound ],
	            [ 6, mixRound ],
	            [ 1, mashRound ],
	            [ 5, mixRound ]
	          ]);
	      }
	    },

	    /**
	     * Finishes encrypting or decrypting.
	     *
	     * @param pad a padding function to use, null for PKCS#7 padding,
	     *           signature(blockSize, buffer, decrypt).
	     *
	     * @return true if successful, false on error.
	     */
	    finish: function(pad) {
	      var rval = true;

	      if(encrypt) {
	        if(pad) {
	          rval = pad(8, _input, !encrypt);
	        } else {
	          // add PKCS#7 padding to block (each pad byte is the
	          // value of the number of pad bytes)
	          var padding = (_input.length() === 8) ? 8 : (8 - _input.length());
	          _input.fillWithByte(padding, padding);
	        }
	      }

	      if(rval) {
	        // do final update
	        _finish = true;
	        cipher.update();
	      }

	      if(!encrypt) {
	        // check for error: input data not a multiple of block size
	        rval = (_input.length() === 0);
	        if(rval) {
	          if(pad) {
	            rval = pad(8, _output, !encrypt);
	          } else {
	            // ensure padding byte count is valid
	            var len = _output.length();
	            var count = _output.at(len - 1);

	            if(count > len) {
	              rval = false;
	            } else {
	              // trim off padding bytes
	              _output.truncate(count);
	            }
	          }
	        }
	      }

	      return rval;
	    }
	  };

	  return cipher;
	};

	/**
	 * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the
	 * given symmetric key. The output will be stored in the 'output' member
	 * of the returned cipher.
	 *
	 * The key and iv may be given as a string of bytes or a byte buffer.
	 * The cipher is initialized to use 128 effective key bits.
	 *
	 * @param key the symmetric key to use.
	 * @param iv the initialization vector to use.
	 * @param output the buffer to write to, null to create one.
	 *
	 * @return the cipher.
	 */
	forge$k.rc2.startEncrypting = function(key, iv, output) {
	  var cipher = forge$k.rc2.createEncryptionCipher(key, 128);
	  cipher.start(iv, output);
	  return cipher;
	};

	/**
	 * Creates an RC2 cipher object to encrypt data in ECB or CBC mode using the
	 * given symmetric key.
	 *
	 * The key may be given as a string of bytes or a byte buffer.
	 *
	 * To start encrypting call start() on the cipher with an iv and optional
	 * output buffer.
	 *
	 * @param key the symmetric key to use.
	 *
	 * @return the cipher.
	 */
	forge$k.rc2.createEncryptionCipher = function(key, bits) {
	  return createCipher(key, bits, true);
	};

	/**
	 * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the
	 * given symmetric key. The output will be stored in the 'output' member
	 * of the returned cipher.
	 *
	 * The key and iv may be given as a string of bytes or a byte buffer.
	 * The cipher is initialized to use 128 effective key bits.
	 *
	 * @param key the symmetric key to use.
	 * @param iv the initialization vector to use.
	 * @param output the buffer to write to, null to create one.
	 *
	 * @return the cipher.
	 */
	forge$k.rc2.startDecrypting = function(key, iv, output) {
	  var cipher = forge$k.rc2.createDecryptionCipher(key, 128);
	  cipher.start(iv, output);
	  return cipher;
	};

	/**
	 * Creates an RC2 cipher object to decrypt data in ECB or CBC mode using the
	 * given symmetric key.
	 *
	 * The key may be given as a string of bytes or a byte buffer.
	 *
	 * To start decrypting call start() on the cipher with an iv and optional
	 * output buffer.
	 *
	 * @param key the symmetric key to use.
	 *
	 * @return the cipher.
	 */
	forge$k.rc2.createDecryptionCipher = function(key, bits) {
	  return createCipher(key, bits, false);
	};

	// Copyright (c) 2005  Tom Wu
	// All Rights Reserved.
	// See "LICENSE" for details.

	// Basic JavaScript BN library - subset useful for RSA encryption.

	/*
	Licensing (LICENSE)
	-------------------

	This software is covered under the following copyright:
	*/
	/*
	 * Copyright (c) 2003-2005  Tom Wu
	 * All Rights Reserved.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * "Software"), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
	 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
	 *
	 * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
	 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
	 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
	 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
	 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
	 *
	 * In addition, the following condition applies:
	 *
	 * All redistributions must retain an intact copy of this copyright notice
	 * and disclaimer.
	 */
	/*
	Address all questions regarding this license to:

	  Tom Wu
	  tjw@cs.Stanford.EDU
	*/
	var forge$j = forge$z;

	forge$j.jsbn = forge$j.jsbn || {};

	// Bits per digit
	var dbits;

	// (public) Constructor
	function BigInteger$2(a,b,c) {
	  this.data = [];
	  if(a != null)
	    if("number" == typeof a) this.fromNumber(a,b,c);
	    else if(b == null && "string" != typeof a) this.fromString(a,256);
	    else this.fromString(a,b);
	}
	forge$j.jsbn.BigInteger = BigInteger$2;

	// return new, unset BigInteger
	function nbi() { return new BigInteger$2(null); }

	// am: Compute w_j += (x*this_i), propagate carries,
	// c is initial carry, returns final carry.
	// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
	// We need to select the fastest one that works in this environment.

	// am1: use a single mult and divide to get the high bits,
	// max digit bits should be 26 because
	// max internal value = 2*dvalue^2-2*dvalue (< 2^53)
	function am1(i,x,w,j,c,n) {
	  while(--n >= 0) {
	    var v = x*this.data[i++]+w.data[j]+c;
	    c = Math.floor(v/0x4000000);
	    w.data[j++] = v&0x3ffffff;
	  }
	  return c;
	}
	// am2 avoids a big mult-and-extract completely.
	// Max digit bits should be <= 30 because we do bitwise ops
	// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
	function am2(i,x,w,j,c,n) {
	  var xl = x&0x7fff, xh = x>>15;
	  while(--n >= 0) {
	    var l = this.data[i]&0x7fff;
	    var h = this.data[i++]>>15;
	    var m = xh*l+h*xl;
	    l = xl*l+((m&0x7fff)<<15)+w.data[j]+(c&0x3fffffff);
	    c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
	    w.data[j++] = l&0x3fffffff;
	  }
	  return c;
	}
	// Alternately, set max digit bits to 28 since some
	// browsers slow down when dealing with 32-bit numbers.
	function am3(i,x,w,j,c,n) {
	  var xl = x&0x3fff, xh = x>>14;
	  while(--n >= 0) {
	    var l = this.data[i]&0x3fff;
	    var h = this.data[i++]>>14;
	    var m = xh*l+h*xl;
	    l = xl*l+((m&0x3fff)<<14)+w.data[j]+c;
	    c = (l>>28)+(m>>14)+xh*h;
	    w.data[j++] = l&0xfffffff;
	  }
	  return c;
	}

	// node.js (no browser)
	if(typeof(navigator) === 'undefined')
	{
	   BigInteger$2.prototype.am = am3;
	   dbits = 28;
	} else if((navigator.appName == "Microsoft Internet Explorer")) {
	  BigInteger$2.prototype.am = am2;
	  dbits = 30;
	} else if((navigator.appName != "Netscape")) {
	  BigInteger$2.prototype.am = am1;
	  dbits = 26;
	} else { // Mozilla/Netscape seems to prefer am3
	  BigInteger$2.prototype.am = am3;
	  dbits = 28;
	}

	BigInteger$2.prototype.DB = dbits;
	BigInteger$2.prototype.DM = ((1<<dbits)-1);
	BigInteger$2.prototype.DV = (1<<dbits);

	var BI_FP = 52;
	BigInteger$2.prototype.FV = Math.pow(2,BI_FP);
	BigInteger$2.prototype.F1 = BI_FP-dbits;
	BigInteger$2.prototype.F2 = 2*dbits-BI_FP;

	// Digit conversions
	var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
	var BI_RC = new Array();
	var rr,vv;
	rr = "0".charCodeAt(0);
	for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
	rr = "a".charCodeAt(0);
	for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
	rr = "A".charCodeAt(0);
	for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

	function int2char(n) { return BI_RM.charAt(n); }
	function intAt(s,i) {
	  var c = BI_RC[s.charCodeAt(i)];
	  return (c==null)?-1:c;
	}

	// (protected) copy this to r
	function bnpCopyTo(r) {
	  for(var i = this.t-1; i >= 0; --i) r.data[i] = this.data[i];
	  r.t = this.t;
	  r.s = this.s;
	}

	// (protected) set from integer value x, -DV <= x < DV
	function bnpFromInt(x) {
	  this.t = 1;
	  this.s = (x<0)?-1:0;
	  if(x > 0) this.data[0] = x;
	  else if(x < -1) this.data[0] = x+this.DV;
	  else this.t = 0;
	}

	// return bigint initialized to value
	function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

	// (protected) set from string and radix
	function bnpFromString(s,b) {
	  var k;
	  if(b == 16) k = 4;
	  else if(b == 8) k = 3;
	  else if(b == 256) k = 8; // byte array
	  else if(b == 2) k = 1;
	  else if(b == 32) k = 5;
	  else if(b == 4) k = 2;
	  else { this.fromRadix(s,b); return; }
	  this.t = 0;
	  this.s = 0;
	  var i = s.length, mi = false, sh = 0;
	  while(--i >= 0) {
	    var x = (k==8)?s[i]&0xff:intAt(s,i);
	    if(x < 0) {
	      if(s.charAt(i) == "-") mi = true;
	      continue;
	    }
	    mi = false;
	    if(sh == 0)
	      this.data[this.t++] = x;
	    else if(sh+k > this.DB) {
	      this.data[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
	      this.data[this.t++] = (x>>(this.DB-sh));
	    } else
	      this.data[this.t-1] |= x<<sh;
	    sh += k;
	    if(sh >= this.DB) sh -= this.DB;
	  }
	  if(k == 8 && (s[0]&0x80) != 0) {
	    this.s = -1;
	    if(sh > 0) this.data[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
	  }
	  this.clamp();
	  if(mi) BigInteger$2.ZERO.subTo(this,this);
	}

	// (protected) clamp off excess high words
	function bnpClamp() {
	  var c = this.s&this.DM;
	  while(this.t > 0 && this.data[this.t-1] == c) --this.t;
	}

	// (public) return string representation in given radix
	function bnToString(b) {
	  if(this.s < 0) return "-"+this.negate().toString(b);
	  var k;
	  if(b == 16) k = 4;
	  else if(b == 8) k = 3;
	  else if(b == 2) k = 1;
	  else if(b == 32) k = 5;
	  else if(b == 4) k = 2;
	  else return this.toRadix(b);
	  var km = (1<<k)-1, d, m = false, r = "", i = this.t;
	  var p = this.DB-(i*this.DB)%k;
	  if(i-- > 0) {
	    if(p < this.DB && (d = this.data[i]>>p) > 0) { m = true; r = int2char(d); }
	    while(i >= 0) {
	      if(p < k) {
	        d = (this.data[i]&((1<<p)-1))<<(k-p);
	        d |= this.data[--i]>>(p+=this.DB-k);
	      } else {
	        d = (this.data[i]>>(p-=k))&km;
	        if(p <= 0) { p += this.DB; --i; }
	      }
	      if(d > 0) m = true;
	      if(m) r += int2char(d);
	    }
	  }
	  return m?r:"0";
	}

	// (public) -this
	function bnNegate() { var r = nbi(); BigInteger$2.ZERO.subTo(this,r); return r; }

	// (public) |this|
	function bnAbs() { return (this.s<0)?this.negate():this; }

	// (public) return + if this > a, - if this < a, 0 if equal
	function bnCompareTo(a) {
	  var r = this.s-a.s;
	  if(r != 0) return r;
	  var i = this.t;
	  r = i-a.t;
	  if(r != 0) return (this.s<0)?-r:r;
	  while(--i >= 0) if((r=this.data[i]-a.data[i]) != 0) return r;
	  return 0;
	}

	// returns bit length of the integer x
	function nbits(x) {
	  var r = 1, t;
	  if((t=x>>>16) != 0) { x = t; r += 16; }
	  if((t=x>>8) != 0) { x = t; r += 8; }
	  if((t=x>>4) != 0) { x = t; r += 4; }
	  if((t=x>>2) != 0) { x = t; r += 2; }
	  if((t=x>>1) != 0) { x = t; r += 1; }
	  return r;
	}

	// (public) return the number of bits in "this"
	function bnBitLength() {
	  if(this.t <= 0) return 0;
	  return this.DB*(this.t-1)+nbits(this.data[this.t-1]^(this.s&this.DM));
	}

	// (protected) r = this << n*DB
	function bnpDLShiftTo(n,r) {
	  var i;
	  for(i = this.t-1; i >= 0; --i) r.data[i+n] = this.data[i];
	  for(i = n-1; i >= 0; --i) r.data[i] = 0;
	  r.t = this.t+n;
	  r.s = this.s;
	}

	// (protected) r = this >> n*DB
	function bnpDRShiftTo(n,r) {
	  for(var i = n; i < this.t; ++i) r.data[i-n] = this.data[i];
	  r.t = Math.max(this.t-n,0);
	  r.s = this.s;
	}

	// (protected) r = this << n
	function bnpLShiftTo(n,r) {
	  var bs = n%this.DB;
	  var cbs = this.DB-bs;
	  var bm = (1<<cbs)-1;
	  var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
	  for(i = this.t-1; i >= 0; --i) {
	    r.data[i+ds+1] = (this.data[i]>>cbs)|c;
	    c = (this.data[i]&bm)<<bs;
	  }
	  for(i = ds-1; i >= 0; --i) r.data[i] = 0;
	  r.data[ds] = c;
	  r.t = this.t+ds+1;
	  r.s = this.s;
	  r.clamp();
	}

	// (protected) r = this >> n
	function bnpRShiftTo(n,r) {
	  r.s = this.s;
	  var ds = Math.floor(n/this.DB);
	  if(ds >= this.t) { r.t = 0; return; }
	  var bs = n%this.DB;
	  var cbs = this.DB-bs;
	  var bm = (1<<bs)-1;
	  r.data[0] = this.data[ds]>>bs;
	  for(var i = ds+1; i < this.t; ++i) {
	    r.data[i-ds-1] |= (this.data[i]&bm)<<cbs;
	    r.data[i-ds] = this.data[i]>>bs;
	  }
	  if(bs > 0) r.data[this.t-ds-1] |= (this.s&bm)<<cbs;
	  r.t = this.t-ds;
	  r.clamp();
	}

	// (protected) r = this - a
	function bnpSubTo(a,r) {
	  var i = 0, c = 0, m = Math.min(a.t,this.t);
	  while(i < m) {
	    c += this.data[i]-a.data[i];
	    r.data[i++] = c&this.DM;
	    c >>= this.DB;
	  }
	  if(a.t < this.t) {
	    c -= a.s;
	    while(i < this.t) {
	      c += this.data[i];
	      r.data[i++] = c&this.DM;
	      c >>= this.DB;
	    }
	    c += this.s;
	  } else {
	    c += this.s;
	    while(i < a.t) {
	      c -= a.data[i];
	      r.data[i++] = c&this.DM;
	      c >>= this.DB;
	    }
	    c -= a.s;
	  }
	  r.s = (c<0)?-1:0;
	  if(c < -1) r.data[i++] = this.DV+c;
	  else if(c > 0) r.data[i++] = c;
	  r.t = i;
	  r.clamp();
	}

	// (protected) r = this * a, r != this,a (HAC 14.12)
	// "this" should be the larger one if appropriate.
	function bnpMultiplyTo(a,r) {
	  var x = this.abs(), y = a.abs();
	  var i = x.t;
	  r.t = i+y.t;
	  while(--i >= 0) r.data[i] = 0;
	  for(i = 0; i < y.t; ++i) r.data[i+x.t] = x.am(0,y.data[i],r,i,0,x.t);
	  r.s = 0;
	  r.clamp();
	  if(this.s != a.s) BigInteger$2.ZERO.subTo(r,r);
	}

	// (protected) r = this^2, r != this (HAC 14.16)
	function bnpSquareTo(r) {
	  var x = this.abs();
	  var i = r.t = 2*x.t;
	  while(--i >= 0) r.data[i] = 0;
	  for(i = 0; i < x.t-1; ++i) {
	    var c = x.am(i,x.data[i],r,2*i,0,1);
	    if((r.data[i+x.t]+=x.am(i+1,2*x.data[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
	      r.data[i+x.t] -= x.DV;
	      r.data[i+x.t+1] = 1;
	    }
	  }
	  if(r.t > 0) r.data[r.t-1] += x.am(i,x.data[i],r,2*i,0,1);
	  r.s = 0;
	  r.clamp();
	}

	// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
	// r != q, this != m.  q or r may be null.
	function bnpDivRemTo(m,q,r) {
	  var pm = m.abs();
	  if(pm.t <= 0) return;
	  var pt = this.abs();
	  if(pt.t < pm.t) {
	    if(q != null) q.fromInt(0);
	    if(r != null) this.copyTo(r);
	    return;
	  }
	  if(r == null) r = nbi();
	  var y = nbi(), ts = this.s, ms = m.s;
	  var nsh = this.DB-nbits(pm.data[pm.t-1]);	// normalize modulus
	  if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); } else { pm.copyTo(y); pt.copyTo(r); }
	  var ys = y.t;
	  var y0 = y.data[ys-1];
	  if(y0 == 0) return;
	  var yt = y0*(1<<this.F1)+((ys>1)?y.data[ys-2]>>this.F2:0);
	  var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
	  var i = r.t, j = i-ys, t = (q==null)?nbi():q;
	  y.dlShiftTo(j,t);
	  if(r.compareTo(t) >= 0) {
	    r.data[r.t++] = 1;
	    r.subTo(t,r);
	  }
	  BigInteger$2.ONE.dlShiftTo(ys,t);
	  t.subTo(y,y);	// "negative" y so we can replace sub with am later
	  while(y.t < ys) y.data[y.t++] = 0;
	  while(--j >= 0) {
	    // Estimate quotient digit
	    var qd = (r.data[--i]==y0)?this.DM:Math.floor(r.data[i]*d1+(r.data[i-1]+e)*d2);
	    if((r.data[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
	      y.dlShiftTo(j,t);
	      r.subTo(t,r);
	      while(r.data[i] < --qd) r.subTo(t,r);
	    }
	  }
	  if(q != null) {
	    r.drShiftTo(ys,q);
	    if(ts != ms) BigInteger$2.ZERO.subTo(q,q);
	  }
	  r.t = ys;
	  r.clamp();
	  if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
	  if(ts < 0) BigInteger$2.ZERO.subTo(r,r);
	}

	// (public) this mod a
	function bnMod(a) {
	  var r = nbi();
	  this.abs().divRemTo(a,null,r);
	  if(this.s < 0 && r.compareTo(BigInteger$2.ZERO) > 0) a.subTo(r,r);
	  return r;
	}

	// Modular reduction using "classic" algorithm
	function Classic(m) { this.m = m; }
	function cConvert(x) {
	  if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
	  else return x;
	}
	function cRevert(x) { return x; }
	function cReduce(x) { x.divRemTo(this.m,null,x); }
	function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
	function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

	Classic.prototype.convert = cConvert;
	Classic.prototype.revert = cRevert;
	Classic.prototype.reduce = cReduce;
	Classic.prototype.mulTo = cMulTo;
	Classic.prototype.sqrTo = cSqrTo;

	// (protected) return "-1/this % 2^DB"; useful for Mont. reduction
	// justification:
	//         xy == 1 (mod m)
	//         xy =  1+km
	//   xy(2-xy) = (1+km)(1-km)
	// x[y(2-xy)] = 1-k^2m^2
	// x[y(2-xy)] == 1 (mod m^2)
	// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
	// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
	// JS multiply "overflows" differently from C/C++, so care is needed here.
	function bnpInvDigit() {
	  if(this.t < 1) return 0;
	  var x = this.data[0];
	  if((x&1) == 0) return 0;
	  var y = x&3;		// y == 1/x mod 2^2
	  y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
	  y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
	  y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
	  // last step - calculate inverse mod DV directly;
	  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
	  y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
	  // we really want the negative inverse, and -DV < y < DV
	  return (y>0)?this.DV-y:-y;
	}

	// Montgomery reduction
	function Montgomery(m) {
	  this.m = m;
	  this.mp = m.invDigit();
	  this.mpl = this.mp&0x7fff;
	  this.mph = this.mp>>15;
	  this.um = (1<<(m.DB-15))-1;
	  this.mt2 = 2*m.t;
	}

	// xR mod m
	function montConvert(x) {
	  var r = nbi();
	  x.abs().dlShiftTo(this.m.t,r);
	  r.divRemTo(this.m,null,r);
	  if(x.s < 0 && r.compareTo(BigInteger$2.ZERO) > 0) this.m.subTo(r,r);
	  return r;
	}

	// x/R mod m
	function montRevert(x) {
	  var r = nbi();
	  x.copyTo(r);
	  this.reduce(r);
	  return r;
	}

	// x = x/R mod m (HAC 14.32)
	function montReduce(x) {
	  while(x.t <= this.mt2)	// pad x so am has enough room later
	    x.data[x.t++] = 0;
	  for(var i = 0; i < this.m.t; ++i) {
	    // faster way of calculating u0 = x.data[i]*mp mod DV
	    var j = x.data[i]&0x7fff;
	    var u0 = (j*this.mpl+(((j*this.mph+(x.data[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
	    // use am to combine the multiply-shift-add into one call
	    j = i+this.m.t;
	    x.data[j] += this.m.am(0,u0,x,i,0,this.m.t);
	    // propagate carry
	    while(x.data[j] >= x.DV) { x.data[j] -= x.DV; x.data[++j]++; }
	  }
	  x.clamp();
	  x.drShiftTo(this.m.t,x);
	  if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
	}

	// r = "x^2/R mod m"; x != r
	function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

	// r = "xy/R mod m"; x,y != r
	function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

	Montgomery.prototype.convert = montConvert;
	Montgomery.prototype.revert = montRevert;
	Montgomery.prototype.reduce = montReduce;
	Montgomery.prototype.mulTo = montMulTo;
	Montgomery.prototype.sqrTo = montSqrTo;

	// (protected) true iff this is even
	function bnpIsEven() { return ((this.t>0)?(this.data[0]&1):this.s) == 0; }

	// (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
	function bnpExp(e,z) {
	  if(e > 0xffffffff || e < 1) return BigInteger$2.ONE;
	  var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
	  g.copyTo(r);
	  while(--i >= 0) {
	    z.sqrTo(r,r2);
	    if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
	    else { var t = r; r = r2; r2 = t; }
	  }
	  return z.revert(r);
	}

	// (public) this^e % m, 0 <= e < 2^32
	function bnModPowInt(e,m) {
	  var z;
	  if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
	  return this.exp(e,z);
	}

	// protected
	BigInteger$2.prototype.copyTo = bnpCopyTo;
	BigInteger$2.prototype.fromInt = bnpFromInt;
	BigInteger$2.prototype.fromString = bnpFromString;
	BigInteger$2.prototype.clamp = bnpClamp;
	BigInteger$2.prototype.dlShiftTo = bnpDLShiftTo;
	BigInteger$2.prototype.drShiftTo = bnpDRShiftTo;
	BigInteger$2.prototype.lShiftTo = bnpLShiftTo;
	BigInteger$2.prototype.rShiftTo = bnpRShiftTo;
	BigInteger$2.prototype.subTo = bnpSubTo;
	BigInteger$2.prototype.multiplyTo = bnpMultiplyTo;
	BigInteger$2.prototype.squareTo = bnpSquareTo;
	BigInteger$2.prototype.divRemTo = bnpDivRemTo;
	BigInteger$2.prototype.invDigit = bnpInvDigit;
	BigInteger$2.prototype.isEven = bnpIsEven;
	BigInteger$2.prototype.exp = bnpExp;

	// public
	BigInteger$2.prototype.toString = bnToString;
	BigInteger$2.prototype.negate = bnNegate;
	BigInteger$2.prototype.abs = bnAbs;
	BigInteger$2.prototype.compareTo = bnCompareTo;
	BigInteger$2.prototype.bitLength = bnBitLength;
	BigInteger$2.prototype.mod = bnMod;
	BigInteger$2.prototype.modPowInt = bnModPowInt;

	// "constants"
	BigInteger$2.ZERO = nbv(0);
	BigInteger$2.ONE = nbv(1);

	// jsbn2 lib

	//Copyright (c) 2005-2009  Tom Wu
	//All Rights Reserved.
	//See "LICENSE" for details (See jsbn.js for LICENSE).

	//Extended JavaScript BN functions, required for RSA private ops.

	//Version 1.1: new BigInteger("0", 10) returns "proper" zero

	//(public)
	function bnClone() { var r = nbi(); this.copyTo(r); return r; }

	//(public) return value as integer
	function bnIntValue() {
	if(this.s < 0) {
	 if(this.t == 1) return this.data[0]-this.DV;
	 else if(this.t == 0) return -1;
	} else if(this.t == 1) return this.data[0];
	else if(this.t == 0) return 0;
	// assumes 16 < DB < 32
	return ((this.data[1]&((1<<(32-this.DB))-1))<<this.DB)|this.data[0];
	}

	//(public) return value as byte
	function bnByteValue() { return (this.t==0)?this.s:(this.data[0]<<24)>>24; }

	//(public) return value as short (assumes DB>=16)
	function bnShortValue() { return (this.t==0)?this.s:(this.data[0]<<16)>>16; }

	//(protected) return x s.t. r^x < DV
	function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

	//(public) 0 if this == 0, 1 if this > 0
	function bnSigNum() {
	if(this.s < 0) return -1;
	else if(this.t <= 0 || (this.t == 1 && this.data[0] <= 0)) return 0;
	else return 1;
	}

	//(protected) convert to radix string
	function bnpToRadix(b) {
	if(b == null) b = 10;
	if(this.signum() == 0 || b < 2 || b > 36) return "0";
	var cs = this.chunkSize(b);
	var a = Math.pow(b,cs);
	var d = nbv(a), y = nbi(), z = nbi(), r = "";
	this.divRemTo(d,y,z);
	while(y.signum() > 0) {
	 r = (a+z.intValue()).toString(b).substr(1) + r;
	 y.divRemTo(d,y,z);
	}
	return z.intValue().toString(b) + r;
	}

	//(protected) convert from radix string
	function bnpFromRadix(s,b) {
	this.fromInt(0);
	if(b == null) b = 10;
	var cs = this.chunkSize(b);
	var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
	for(var i = 0; i < s.length; ++i) {
	 var x = intAt(s,i);
	 if(x < 0) {
	   if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
	   continue;
	 }
	 w = b*w+x;
	 if(++j >= cs) {
	   this.dMultiply(d);
	   this.dAddOffset(w,0);
	   j = 0;
	   w = 0;
	 }
	}
	if(j > 0) {
	 this.dMultiply(Math.pow(b,j));
	 this.dAddOffset(w,0);
	}
	if(mi) BigInteger$2.ZERO.subTo(this,this);
	}

	//(protected) alternate constructor
	function bnpFromNumber(a,b,c) {
	if("number" == typeof b) {
	 // new BigInteger(int,int,RNG)
	 if(a < 2) this.fromInt(1);
	 else {
	   this.fromNumber(a,c);
	   if(!this.testBit(a-1))  // force MSB set
	     this.bitwiseTo(BigInteger$2.ONE.shiftLeft(a-1),op_or,this);
	   if(this.isEven()) this.dAddOffset(1,0); // force odd
	   while(!this.isProbablePrime(b)) {
	     this.dAddOffset(2,0);
	     if(this.bitLength() > a) this.subTo(BigInteger$2.ONE.shiftLeft(a-1),this);
	   }
	 }
	} else {
	 // new BigInteger(int,RNG)
	 var x = new Array(), t = a&7;
	 x.length = (a>>3)+1;
	 b.nextBytes(x);
	 if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;
	 this.fromString(x,256);
	}
	}

	//(public) convert to bigendian byte array
	function bnToByteArray() {
	var i = this.t, r = new Array();
	r[0] = this.s;
	var p = this.DB-(i*this.DB)%8, d, k = 0;
	if(i-- > 0) {
	 if(p < this.DB && (d = this.data[i]>>p) != (this.s&this.DM)>>p)
	   r[k++] = d|(this.s<<(this.DB-p));
	 while(i >= 0) {
	   if(p < 8) {
	     d = (this.data[i]&((1<<p)-1))<<(8-p);
	     d |= this.data[--i]>>(p+=this.DB-8);
	   } else {
	     d = (this.data[i]>>(p-=8))&0xff;
	     if(p <= 0) { p += this.DB; --i; }
	   }
	   if((d&0x80) != 0) d |= -256;
	   if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;
	   if(k > 0 || d != this.s) r[k++] = d;
	 }
	}
	return r;
	}

	function bnEquals(a) { return(this.compareTo(a)==0); }
	function bnMin(a) { return (this.compareTo(a)<0)?this:a; }
	function bnMax(a) { return (this.compareTo(a)>0)?this:a; }

	//(protected) r = this op a (bitwise)
	function bnpBitwiseTo(a,op,r) {
	var i, f, m = Math.min(a.t,this.t);
	for(i = 0; i < m; ++i) r.data[i] = op(this.data[i],a.data[i]);
	if(a.t < this.t) {
	 f = a.s&this.DM;
	 for(i = m; i < this.t; ++i) r.data[i] = op(this.data[i],f);
	 r.t = this.t;
	} else {
	 f = this.s&this.DM;
	 for(i = m; i < a.t; ++i) r.data[i] = op(f,a.data[i]);
	 r.t = a.t;
	}
	r.s = op(this.s,a.s);
	r.clamp();
	}

	//(public) this & a
	function op_and(x,y) { return x&y; }
	function bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }

	//(public) this | a
	function op_or(x,y) { return x|y; }
	function bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }

	//(public) this ^ a
	function op_xor(x,y) { return x^y; }
	function bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }

	//(public) this & ~a
	function op_andnot(x,y) { return x&~y; }
	function bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }

	//(public) ~this
	function bnNot() {
	var r = nbi();
	for(var i = 0; i < this.t; ++i) r.data[i] = this.DM&~this.data[i];
	r.t = this.t;
	r.s = ~this.s;
	return r;
	}

	//(public) this << n
	function bnShiftLeft(n) {
	var r = nbi();
	if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);
	return r;
	}

	//(public) this >> n
	function bnShiftRight(n) {
	var r = nbi();
	if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);
	return r;
	}

	//return index of lowest 1-bit in x, x < 2^31
	function lbit(x) {
	if(x == 0) return -1;
	var r = 0;
	if((x&0xffff) == 0) { x >>= 16; r += 16; }
	if((x&0xff) == 0) { x >>= 8; r += 8; }
	if((x&0xf) == 0) { x >>= 4; r += 4; }
	if((x&3) == 0) { x >>= 2; r += 2; }
	if((x&1) == 0) ++r;
	return r;
	}

	//(public) returns index of lowest 1-bit (or -1 if none)
	function bnGetLowestSetBit() {
	for(var i = 0; i < this.t; ++i)
	 if(this.data[i] != 0) return i*this.DB+lbit(this.data[i]);
	if(this.s < 0) return this.t*this.DB;
	return -1;
	}

	//return number of 1 bits in x
	function cbit(x) {
	var r = 0;
	while(x != 0) { x &= x-1; ++r; }
	return r;
	}

	//(public) return number of set bits
	function bnBitCount() {
	var r = 0, x = this.s&this.DM;
	for(var i = 0; i < this.t; ++i) r += cbit(this.data[i]^x);
	return r;
	}

	//(public) true iff nth bit is set
	function bnTestBit(n) {
	var j = Math.floor(n/this.DB);
	if(j >= this.t) return(this.s!=0);
	return((this.data[j]&(1<<(n%this.DB)))!=0);
	}

	//(protected) this op (1<<n)
	function bnpChangeBit(n,op) {
	var r = BigInteger$2.ONE.shiftLeft(n);
	this.bitwiseTo(r,op,r);
	return r;
	}

	//(public) this | (1<<n)
	function bnSetBit(n) { return this.changeBit(n,op_or); }

	//(public) this & ~(1<<n)
	function bnClearBit(n) { return this.changeBit(n,op_andnot); }

	//(public) this ^ (1<<n)
	function bnFlipBit(n) { return this.changeBit(n,op_xor); }

	//(protected) r = this + a
	function bnpAddTo(a,r) {
	var i = 0, c = 0, m = Math.min(a.t,this.t);
	while(i < m) {
	 c += this.data[i]+a.data[i];
	 r.data[i++] = c&this.DM;
	 c >>= this.DB;
	}
	if(a.t < this.t) {
	 c += a.s;
	 while(i < this.t) {
	   c += this.data[i];
	   r.data[i++] = c&this.DM;
	   c >>= this.DB;
	 }
	 c += this.s;
	} else {
	 c += this.s;
	 while(i < a.t) {
	   c += a.data[i];
	   r.data[i++] = c&this.DM;
	   c >>= this.DB;
	 }
	 c += a.s;
	}
	r.s = (c<0)?-1:0;
	if(c > 0) r.data[i++] = c;
	else if(c < -1) r.data[i++] = this.DV+c;
	r.t = i;
	r.clamp();
	}

	//(public) this + a
	function bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }

	//(public) this - a
	function bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }

	//(public) this * a
	function bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }

	//(public) this / a
	function bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }

	//(public) this % a
	function bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }

	//(public) [this/a,this%a]
	function bnDivideAndRemainder(a) {
	var q = nbi(), r = nbi();
	this.divRemTo(a,q,r);
	return new Array(q,r);
	}

	//(protected) this *= n, this >= 0, 1 < n < DV
	function bnpDMultiply(n) {
	this.data[this.t] = this.am(0,n-1,this,0,0,this.t);
	++this.t;
	this.clamp();
	}

	//(protected) this += n << w words, this >= 0
	function bnpDAddOffset(n,w) {
	if(n == 0) return;
	while(this.t <= w) this.data[this.t++] = 0;
	this.data[w] += n;
	while(this.data[w] >= this.DV) {
	 this.data[w] -= this.DV;
	 if(++w >= this.t) this.data[this.t++] = 0;
	 ++this.data[w];
	}
	}

	//A "null" reducer
	function NullExp() {}
	function nNop(x) { return x; }
	function nMulTo(x,y,r) { x.multiplyTo(y,r); }
	function nSqrTo(x,r) { x.squareTo(r); }

	NullExp.prototype.convert = nNop;
	NullExp.prototype.revert = nNop;
	NullExp.prototype.mulTo = nMulTo;
	NullExp.prototype.sqrTo = nSqrTo;

	//(public) this^e
	function bnPow(e) { return this.exp(e,new NullExp()); }

	//(protected) r = lower n words of "this * a", a.t <= n
	//"this" should be the larger one if appropriate.
	function bnpMultiplyLowerTo(a,n,r) {
	var i = Math.min(this.t+a.t,n);
	r.s = 0; // assumes a,this >= 0
	r.t = i;
	while(i > 0) r.data[--i] = 0;
	var j;
	for(j = r.t-this.t; i < j; ++i) r.data[i+this.t] = this.am(0,a.data[i],r,i,0,this.t);
	for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a.data[i],r,i,0,n-i);
	r.clamp();
	}

	//(protected) r = "this * a" without lower n words, n > 0
	//"this" should be the larger one if appropriate.
	function bnpMultiplyUpperTo(a,n,r) {
	--n;
	var i = r.t = this.t+a.t-n;
	r.s = 0; // assumes a,this >= 0
	while(--i >= 0) r.data[i] = 0;
	for(i = Math.max(n-this.t,0); i < a.t; ++i)
	 r.data[this.t+i-n] = this.am(n-i,a.data[i],r,0,0,this.t+i-n);
	r.clamp();
	r.drShiftTo(1,r);
	}

	//Barrett modular reduction
	function Barrett(m) {
	// setup Barrett
	this.r2 = nbi();
	this.q3 = nbi();
	BigInteger$2.ONE.dlShiftTo(2*m.t,this.r2);
	this.mu = this.r2.divide(m);
	this.m = m;
	}

	function barrettConvert(x) {
	if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);
	else if(x.compareTo(this.m) < 0) return x;
	else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }
	}

	function barrettRevert(x) { return x; }

	//x = x mod m (HAC 14.42)
	function barrettReduce(x) {
	x.drShiftTo(this.m.t-1,this.r2);
	if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }
	this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);
	this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);
	while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);
	x.subTo(this.r2,x);
	while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
	}

	//r = x^2 mod m; x != r
	function barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

	//r = x*y mod m; x,y != r
	function barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

	Barrett.prototype.convert = barrettConvert;
	Barrett.prototype.revert = barrettRevert;
	Barrett.prototype.reduce = barrettReduce;
	Barrett.prototype.mulTo = barrettMulTo;
	Barrett.prototype.sqrTo = barrettSqrTo;

	//(public) this^e % m (HAC 14.85)
	function bnModPow(e,m) {
	var i = e.bitLength(), k, r = nbv(1), z;
	if(i <= 0) return r;
	else if(i < 18) k = 1;
	else if(i < 48) k = 3;
	else if(i < 144) k = 4;
	else if(i < 768) k = 5;
	else k = 6;
	if(i < 8)
	 z = new Classic(m);
	else if(m.isEven())
	 z = new Barrett(m);
	else
	 z = new Montgomery(m);

	// precomputation
	var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;
	g[1] = z.convert(this);
	if(k > 1) {
	 var g2 = nbi();
	 z.sqrTo(g[1],g2);
	 while(n <= km) {
	   g[n] = nbi();
	   z.mulTo(g2,g[n-2],g[n]);
	   n += 2;
	 }
	}

	var j = e.t-1, w, is1 = true, r2 = nbi(), t;
	i = nbits(e.data[j])-1;
	while(j >= 0) {
	 if(i >= k1) w = (e.data[j]>>(i-k1))&km;
	 else {
	   w = (e.data[j]&((1<<(i+1))-1))<<(k1-i);
	   if(j > 0) w |= e.data[j-1]>>(this.DB+i-k1);
	 }

	 n = k;
	 while((w&1) == 0) { w >>= 1; --n; }
	 if((i -= n) < 0) { i += this.DB; --j; }
	 if(is1) {  // ret == 1, don't bother squaring or multiplying it
	   g[w].copyTo(r);
	   is1 = false;
	 } else {
	   while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }
	   if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }
	   z.mulTo(r2,g[w],r);
	 }

	 while(j >= 0 && (e.data[j]&(1<<i)) == 0) {
	   z.sqrTo(r,r2); t = r; r = r2; r2 = t;
	   if(--i < 0) { i = this.DB-1; --j; }
	 }
	}
	return z.revert(r);
	}

	//(public) gcd(this,a) (HAC 14.54)
	function bnGCD(a) {
	var x = (this.s<0)?this.negate():this.clone();
	var y = (a.s<0)?a.negate():a.clone();
	if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }
	var i = x.getLowestSetBit(), g = y.getLowestSetBit();
	if(g < 0) return x;
	if(i < g) g = i;
	if(g > 0) {
	 x.rShiftTo(g,x);
	 y.rShiftTo(g,y);
	}
	while(x.signum() > 0) {
	 if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);
	 if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);
	 if(x.compareTo(y) >= 0) {
	   x.subTo(y,x);
	   x.rShiftTo(1,x);
	 } else {
	   y.subTo(x,y);
	   y.rShiftTo(1,y);
	 }
	}
	if(g > 0) y.lShiftTo(g,y);
	return y;
	}

	//(protected) this % n, n < 2^26
	function bnpModInt(n) {
	if(n <= 0) return 0;
	var d = this.DV%n, r = (this.s<0)?n-1:0;
	if(this.t > 0)
	 if(d == 0) r = this.data[0]%n;
	 else for(var i = this.t-1; i >= 0; --i) r = (d*r+this.data[i])%n;
	return r;
	}

	//(public) 1/this % m (HAC 14.61)
	function bnModInverse(m) {
	var ac = m.isEven();
	if((this.isEven() && ac) || m.signum() == 0) return BigInteger$2.ZERO;
	var u = m.clone(), v = this.clone();
	var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);
	while(u.signum() != 0) {
	 while(u.isEven()) {
	   u.rShiftTo(1,u);
	   if(ac) {
	     if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }
	     a.rShiftTo(1,a);
	   } else if(!b.isEven()) b.subTo(m,b);
	   b.rShiftTo(1,b);
	 }
	 while(v.isEven()) {
	   v.rShiftTo(1,v);
	   if(ac) {
	     if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }
	     c.rShiftTo(1,c);
	   } else if(!d.isEven()) d.subTo(m,d);
	   d.rShiftTo(1,d);
	 }
	 if(u.compareTo(v) >= 0) {
	   u.subTo(v,u);
	   if(ac) a.subTo(c,a);
	   b.subTo(d,b);
	 } else {
	   v.subTo(u,v);
	   if(ac) c.subTo(a,c);
	   d.subTo(b,d);
	 }
	}
	if(v.compareTo(BigInteger$2.ONE) != 0) return BigInteger$2.ZERO;
	if(d.compareTo(m) >= 0) return d.subtract(m);
	if(d.signum() < 0) d.addTo(m,d); else return d;
	if(d.signum() < 0) return d.add(m); else return d;
	}

	var lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509];
	var lplim = (1<<26)/lowprimes[lowprimes.length-1];

	//(public) test primality with certainty >= 1-.5^t
	function bnIsProbablePrime(t) {
	var i, x = this.abs();
	if(x.t == 1 && x.data[0] <= lowprimes[lowprimes.length-1]) {
	 for(i = 0; i < lowprimes.length; ++i)
	   if(x.data[0] == lowprimes[i]) return true;
	 return false;
	}
	if(x.isEven()) return false;
	i = 1;
	while(i < lowprimes.length) {
	 var m = lowprimes[i], j = i+1;
	 while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];
	 m = x.modInt(m);
	 while(i < j) if(m%lowprimes[i++] == 0) return false;
	}
	return x.millerRabin(t);
	}

	//(protected) true if probably prime (HAC 4.24, Miller-Rabin)
	function bnpMillerRabin(t) {
	var n1 = this.subtract(BigInteger$2.ONE);
	var k = n1.getLowestSetBit();
	if(k <= 0) return false;
	var r = n1.shiftRight(k);
	var prng = bnGetPrng();
	var a;
	for(var i = 0; i < t; ++i) {
	 // select witness 'a' at random from between 1 and n1
	 do {
	   a = new BigInteger$2(this.bitLength(), prng);
	 }
	 while(a.compareTo(BigInteger$2.ONE) <= 0 || a.compareTo(n1) >= 0);
	 var y = a.modPow(r,this);
	 if(y.compareTo(BigInteger$2.ONE) != 0 && y.compareTo(n1) != 0) {
	   var j = 1;
	   while(j++ < k && y.compareTo(n1) != 0) {
	     y = y.modPowInt(2,this);
	     if(y.compareTo(BigInteger$2.ONE) == 0) return false;
	   }
	   if(y.compareTo(n1) != 0) return false;
	 }
	}
	return true;
	}

	// get pseudo random number generator
	function bnGetPrng() {
	  // create prng with api that matches BigInteger secure random
	  return {
	    // x is an array to fill with bytes
	    nextBytes: function(x) {
	      for(var i = 0; i < x.length; ++i) {
	        x[i] = Math.floor(Math.random() * 0x0100);
	      }
	    }
	  };
	}

	//protected
	BigInteger$2.prototype.chunkSize = bnpChunkSize;
	BigInteger$2.prototype.toRadix = bnpToRadix;
	BigInteger$2.prototype.fromRadix = bnpFromRadix;
	BigInteger$2.prototype.fromNumber = bnpFromNumber;
	BigInteger$2.prototype.bitwiseTo = bnpBitwiseTo;
	BigInteger$2.prototype.changeBit = bnpChangeBit;
	BigInteger$2.prototype.addTo = bnpAddTo;
	BigInteger$2.prototype.dMultiply = bnpDMultiply;
	BigInteger$2.prototype.dAddOffset = bnpDAddOffset;
	BigInteger$2.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
	BigInteger$2.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
	BigInteger$2.prototype.modInt = bnpModInt;
	BigInteger$2.prototype.millerRabin = bnpMillerRabin;

	//public
	BigInteger$2.prototype.clone = bnClone;
	BigInteger$2.prototype.intValue = bnIntValue;
	BigInteger$2.prototype.byteValue = bnByteValue;
	BigInteger$2.prototype.shortValue = bnShortValue;
	BigInteger$2.prototype.signum = bnSigNum;
	BigInteger$2.prototype.toByteArray = bnToByteArray;
	BigInteger$2.prototype.equals = bnEquals;
	BigInteger$2.prototype.min = bnMin;
	BigInteger$2.prototype.max = bnMax;
	BigInteger$2.prototype.and = bnAnd;
	BigInteger$2.prototype.or = bnOr;
	BigInteger$2.prototype.xor = bnXor;
	BigInteger$2.prototype.andNot = bnAndNot;
	BigInteger$2.prototype.not = bnNot;
	BigInteger$2.prototype.shiftLeft = bnShiftLeft;
	BigInteger$2.prototype.shiftRight = bnShiftRight;
	BigInteger$2.prototype.getLowestSetBit = bnGetLowestSetBit;
	BigInteger$2.prototype.bitCount = bnBitCount;
	BigInteger$2.prototype.testBit = bnTestBit;
	BigInteger$2.prototype.setBit = bnSetBit;
	BigInteger$2.prototype.clearBit = bnClearBit;
	BigInteger$2.prototype.flipBit = bnFlipBit;
	BigInteger$2.prototype.add = bnAdd;
	BigInteger$2.prototype.subtract = bnSubtract;
	BigInteger$2.prototype.multiply = bnMultiply;
	BigInteger$2.prototype.divide = bnDivide;
	BigInteger$2.prototype.remainder = bnRemainder;
	BigInteger$2.prototype.divideAndRemainder = bnDivideAndRemainder;
	BigInteger$2.prototype.modPow = bnModPow;
	BigInteger$2.prototype.modInverse = bnModInverse;
	BigInteger$2.prototype.pow = bnPow;
	BigInteger$2.prototype.gcd = bnGCD;
	BigInteger$2.prototype.isProbablePrime = bnIsProbablePrime;

	/**
	 * Secure Hash Algorithm with 160-bit digest (SHA-1) implementation.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
	 */

	var forge$i = forge$z;



	var sha1 = forge$i.sha1 = forge$i.sha1 || {};
	forge$i.md.sha1 = forge$i.md.algorithms.sha1 = sha1;

	/**
	 * Creates a SHA-1 message digest object.
	 *
	 * @return a message digest object.
	 */
	sha1.create = function() {
	  // do initialization as necessary
	  if(!_initialized$1) {
	    _init$1();
	  }

	  // SHA-1 state contains five 32-bit integers
	  var _state = null;

	  // input buffer
	  var _input = forge$i.util.createBuffer();

	  // used for word storage
	  var _w = new Array(80);

	  // message digest object
	  var md = {
	    algorithm: 'sha1',
	    blockLength: 64,
	    digestLength: 20,
	    // 56-bit length of message so far (does not including padding)
	    messageLength: 0,
	    // true message length
	    fullMessageLength: null,
	    // size of message length in bytes
	    messageLengthSize: 8
	  };

	  /**
	   * Starts the digest.
	   *
	   * @return this digest object.
	   */
	  md.start = function() {
	    // up to 56-bit message length for convenience
	    md.messageLength = 0;

	    // full message length (set md.messageLength64 for backwards-compatibility)
	    md.fullMessageLength = md.messageLength64 = [];
	    var int32s = md.messageLengthSize / 4;
	    for(var i = 0; i < int32s; ++i) {
	      md.fullMessageLength.push(0);
	    }
	    _input = forge$i.util.createBuffer();
	    _state = {
	      h0: 0x67452301,
	      h1: 0xEFCDAB89,
	      h2: 0x98BADCFE,
	      h3: 0x10325476,
	      h4: 0xC3D2E1F0
	    };
	    return md;
	  };
	  // start digest automatically for first time
	  md.start();

	  /**
	   * Updates the digest with the given message input. The given input can
	   * treated as raw input (no encoding will be applied) or an encoding of
	   * 'utf8' maybe given to encode the input using UTF-8.
	   *
	   * @param msg the message input to update with.
	   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
	   *
	   * @return this digest object.
	   */
	  md.update = function(msg, encoding) {
	    if(encoding === 'utf8') {
	      msg = forge$i.util.encodeUtf8(msg);
	    }

	    // update message length
	    var len = msg.length;
	    md.messageLength += len;
	    len = [(len / 0x100000000) >>> 0, len >>> 0];
	    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {
	      md.fullMessageLength[i] += len[1];
	      len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);
	      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
	      len[0] = ((len[1] / 0x100000000) >>> 0);
	    }

	    // add bytes to input buffer
	    _input.putBytes(msg);

	    // process bytes
	    _update$1(_state, _w, _input);

	    // compact input buffer every 2K or if empty
	    if(_input.read > 2048 || _input.length() === 0) {
	      _input.compact();
	    }

	    return md;
	  };

	  /**
	   * Produces the digest.
	   *
	   * @return a byte buffer containing the digest value.
	   */
	  md.digest = function() {
	    /* Note: Here we copy the remaining bytes in the input buffer and
	    add the appropriate SHA-1 padding. Then we do the final update
	    on a copy of the state so that if the user wants to get
	    intermediate digests they can do so. */

	    /* Determine the number of bytes that must be added to the message
	    to ensure its length is congruent to 448 mod 512. In other words,
	    the data to be digested must be a multiple of 512 bits (or 128 bytes).
	    This data includes the message, some padding, and the length of the
	    message. Since the length of the message will be encoded as 8 bytes (64
	    bits), that means that the last segment of the data must have 56 bytes
	    (448 bits) of message and padding. Therefore, the length of the message
	    plus the padding must be congruent to 448 mod 512 because
	    512 - 128 = 448.

	    In order to fill up the message length it must be filled with
	    padding that begins with 1 bit followed by all 0 bits. Padding
	    must *always* be present, so if the message length is already
	    congruent to 448 mod 512, then 512 padding bits must be added. */

	    var finalBlock = forge$i.util.createBuffer();
	    finalBlock.putBytes(_input.bytes());

	    // compute remaining size to be digested (include message length size)
	    var remaining = (
	      md.fullMessageLength[md.fullMessageLength.length - 1] +
	      md.messageLengthSize);

	    // add padding for overflow blockSize - overflow
	    // _padding starts with 1 byte with first bit is set (byte value 128), then
	    // there may be up to (blockSize - 1) other pad bytes
	    var overflow = remaining & (md.blockLength - 1);
	    finalBlock.putBytes(_padding$1.substr(0, md.blockLength - overflow));

	    // serialize message length in bits in big-endian order; since length
	    // is stored in bytes we multiply by 8 and add carry from next int
	    var next, carry;
	    var bits = md.fullMessageLength[0] * 8;
	    for(var i = 0; i < md.fullMessageLength.length - 1; ++i) {
	      next = md.fullMessageLength[i + 1] * 8;
	      carry = (next / 0x100000000) >>> 0;
	      bits += carry;
	      finalBlock.putInt32(bits >>> 0);
	      bits = next >>> 0;
	    }
	    finalBlock.putInt32(bits);

	    var s2 = {
	      h0: _state.h0,
	      h1: _state.h1,
	      h2: _state.h2,
	      h3: _state.h3,
	      h4: _state.h4
	    };
	    _update$1(s2, _w, finalBlock);
	    var rval = forge$i.util.createBuffer();
	    rval.putInt32(s2.h0);
	    rval.putInt32(s2.h1);
	    rval.putInt32(s2.h2);
	    rval.putInt32(s2.h3);
	    rval.putInt32(s2.h4);
	    return rval;
	  };

	  return md;
	};

	// sha-1 padding bytes not initialized yet
	var _padding$1 = null;
	var _initialized$1 = false;

	/**
	 * Initializes the constant tables.
	 */
	function _init$1() {
	  // create padding
	  _padding$1 = String.fromCharCode(128);
	  _padding$1 += forge$i.util.fillString(String.fromCharCode(0x00), 64);

	  // now initialized
	  _initialized$1 = true;
	}

	/**
	 * Updates a SHA-1 state with the given byte buffer.
	 *
	 * @param s the SHA-1 state to update.
	 * @param w the array to use to store words.
	 * @param bytes the byte buffer to update with.
	 */
	function _update$1(s, w, bytes) {
	  // consume 512 bit (64 byte) chunks
	  var t, a, b, c, d, e, f, i;
	  var len = bytes.length();
	  while(len >= 64) {
	    // the w array will be populated with sixteen 32-bit big-endian words
	    // and then extended into 80 32-bit words according to SHA-1 algorithm
	    // and for 32-79 using Max Locktyukhin's optimization

	    // initialize hash value for this chunk
	    a = s.h0;
	    b = s.h1;
	    c = s.h2;
	    d = s.h3;
	    e = s.h4;

	    // round 1
	    for(i = 0; i < 16; ++i) {
	      t = bytes.getInt32();
	      w[i] = t;
	      f = d ^ (b & (c ^ d));
	      t = ((a << 5) | (a >>> 27)) + f + e + 0x5A827999 + t;
	      e = d;
	      d = c;
	      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
	      c = ((b << 30) | (b >>> 2)) >>> 0;
	      b = a;
	      a = t;
	    }
	    for(; i < 20; ++i) {
	      t = (w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);
	      t = (t << 1) | (t >>> 31);
	      w[i] = t;
	      f = d ^ (b & (c ^ d));
	      t = ((a << 5) | (a >>> 27)) + f + e + 0x5A827999 + t;
	      e = d;
	      d = c;
	      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
	      c = ((b << 30) | (b >>> 2)) >>> 0;
	      b = a;
	      a = t;
	    }
	    // round 2
	    for(; i < 32; ++i) {
	      t = (w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]);
	      t = (t << 1) | (t >>> 31);
	      w[i] = t;
	      f = b ^ c ^ d;
	      t = ((a << 5) | (a >>> 27)) + f + e + 0x6ED9EBA1 + t;
	      e = d;
	      d = c;
	      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
	      c = ((b << 30) | (b >>> 2)) >>> 0;
	      b = a;
	      a = t;
	    }
	    for(; i < 40; ++i) {
	      t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);
	      t = (t << 2) | (t >>> 30);
	      w[i] = t;
	      f = b ^ c ^ d;
	      t = ((a << 5) | (a >>> 27)) + f + e + 0x6ED9EBA1 + t;
	      e = d;
	      d = c;
	      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
	      c = ((b << 30) | (b >>> 2)) >>> 0;
	      b = a;
	      a = t;
	    }
	    // round 3
	    for(; i < 60; ++i) {
	      t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);
	      t = (t << 2) | (t >>> 30);
	      w[i] = t;
	      f = (b & c) | (d & (b ^ c));
	      t = ((a << 5) | (a >>> 27)) + f + e + 0x8F1BBCDC + t;
	      e = d;
	      d = c;
	      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
	      c = ((b << 30) | (b >>> 2)) >>> 0;
	      b = a;
	      a = t;
	    }
	    // round 4
	    for(; i < 80; ++i) {
	      t = (w[i - 6] ^ w[i - 16] ^ w[i - 28] ^ w[i - 32]);
	      t = (t << 2) | (t >>> 30);
	      w[i] = t;
	      f = b ^ c ^ d;
	      t = ((a << 5) | (a >>> 27)) + f + e + 0xCA62C1D6 + t;
	      e = d;
	      d = c;
	      // `>>> 0` necessary to avoid iOS/Safari 10 optimization bug
	      c = ((b << 30) | (b >>> 2)) >>> 0;
	      b = a;
	      a = t;
	    }

	    // update hash state
	    s.h0 = (s.h0 + a) | 0;
	    s.h1 = (s.h1 + b) | 0;
	    s.h2 = (s.h2 + c) | 0;
	    s.h3 = (s.h3 + d) | 0;
	    s.h4 = (s.h4 + e) | 0;

	    len -= 64;
	  }
	}

	/**
	 * Partial implementation of PKCS#1 v2.2: RSA-OEAP
	 *
	 * Modified but based on the following MIT and BSD licensed code:
	 *
	 * https://github.com/kjur/jsjws/blob/master/rsa.js:
	 *
	 * The 'jsjws'(JSON Web Signature JavaScript Library) License
	 *
	 * Copyright (c) 2012 Kenji Urushima
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 *
	 * http://webrsa.cvs.sourceforge.net/viewvc/webrsa/Client/RSAES-OAEP.js?content-type=text%2Fplain:
	 *
	 * RSAES-OAEP.js
	 * $Id: RSAES-OAEP.js,v 1.1.1.1 2003/03/19 15:37:20 ellispritchard Exp $
	 * JavaScript Implementation of PKCS #1 v2.1 RSA CRYPTOGRAPHY STANDARD (RSA Laboratories, June 14, 2002)
	 * Copyright (C) Ellis Pritchard, Guardian Unlimited 2003.
	 * Contact: ellis@nukinetics.com
	 * Distributed under the BSD License.
	 *
	 * Official documentation: http://www.rsa.com/rsalabs/node.asp?id=2125
	 *
	 * @author Evan Jones (http://evanjones.ca/)
	 * @author Dave Longley
	 *
	 * Copyright (c) 2013-2014 Digital Bazaar, Inc.
	 */

	var forge$h = forge$z;




	// shortcut for PKCS#1 API
	var pkcs1 = forge$h.pkcs1 = forge$h.pkcs1 || {};

	/**
	 * Encode the given RSAES-OAEP message (M) using key, with optional label (L)
	 * and seed.
	 *
	 * This method does not perform RSA encryption, it only encodes the message
	 * using RSAES-OAEP.
	 *
	 * @param key the RSA key to use.
	 * @param message the message to encode.
	 * @param options the options to use:
	 *          label an optional label to use.
	 *          seed the seed to use.
	 *          md the message digest object to use, undefined for SHA-1.
	 *          mgf1 optional mgf1 parameters:
	 *            md the message digest object to use for MGF1.
	 *
	 * @return the encoded message bytes.
	 */
	pkcs1.encode_rsa_oaep = function(key, message, options) {
	  // parse arguments
	  var label;
	  var seed;
	  var md;
	  var mgf1Md;
	  // legacy args (label, seed, md)
	  if(typeof options === 'string') {
	    label = options;
	    seed = arguments[3] || undefined;
	    md = arguments[4] || undefined;
	  } else if(options) {
	    label = options.label || undefined;
	    seed = options.seed || undefined;
	    md = options.md || undefined;
	    if(options.mgf1 && options.mgf1.md) {
	      mgf1Md = options.mgf1.md;
	    }
	  }

	  // default OAEP to SHA-1 message digest
	  if(!md) {
	    md = forge$h.md.sha1.create();
	  } else {
	    md.start();
	  }

	  // default MGF-1 to same as OAEP
	  if(!mgf1Md) {
	    mgf1Md = md;
	  }

	  // compute length in bytes and check output
	  var keyLength = Math.ceil(key.n.bitLength() / 8);
	  var maxLength = keyLength - 2 * md.digestLength - 2;
	  if(message.length > maxLength) {
	    var error = new Error('RSAES-OAEP input message length is too long.');
	    error.length = message.length;
	    error.maxLength = maxLength;
	    throw error;
	  }

	  if(!label) {
	    label = '';
	  }
	  md.update(label, 'raw');
	  var lHash = md.digest();

	  var PS = '';
	  var PS_length = maxLength - message.length;
	  for(var i = 0; i < PS_length; i++) {
	    PS += '\x00';
	  }

	  var DB = lHash.getBytes() + PS + '\x01' + message;

	  if(!seed) {
	    seed = forge$h.random.getBytes(md.digestLength);
	  } else if(seed.length !== md.digestLength) {
	    var error = new Error('Invalid RSAES-OAEP seed. The seed length must ' +
	      'match the digest length.');
	    error.seedLength = seed.length;
	    error.digestLength = md.digestLength;
	    throw error;
	  }

	  var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);
	  var maskedDB = forge$h.util.xorBytes(DB, dbMask, DB.length);

	  var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);
	  var maskedSeed = forge$h.util.xorBytes(seed, seedMask, seed.length);

	  // return encoded message
	  return '\x00' + maskedSeed + maskedDB;
	};

	/**
	 * Decode the given RSAES-OAEP encoded message (EM) using key, with optional
	 * label (L).
	 *
	 * This method does not perform RSA decryption, it only decodes the message
	 * using RSAES-OAEP.
	 *
	 * @param key the RSA key to use.
	 * @param em the encoded message to decode.
	 * @param options the options to use:
	 *          label an optional label to use.
	 *          md the message digest object to use for OAEP, undefined for SHA-1.
	 *          mgf1 optional mgf1 parameters:
	 *            md the message digest object to use for MGF1.
	 *
	 * @return the decoded message bytes.
	 */
	pkcs1.decode_rsa_oaep = function(key, em, options) {
	  // parse args
	  var label;
	  var md;
	  var mgf1Md;
	  // legacy args
	  if(typeof options === 'string') {
	    label = options;
	    md = arguments[3] || undefined;
	  } else if(options) {
	    label = options.label || undefined;
	    md = options.md || undefined;
	    if(options.mgf1 && options.mgf1.md) {
	      mgf1Md = options.mgf1.md;
	    }
	  }

	  // compute length in bytes
	  var keyLength = Math.ceil(key.n.bitLength() / 8);

	  if(em.length !== keyLength) {
	    var error = new Error('RSAES-OAEP encoded message length is invalid.');
	    error.length = em.length;
	    error.expectedLength = keyLength;
	    throw error;
	  }

	  // default OAEP to SHA-1 message digest
	  if(md === undefined) {
	    md = forge$h.md.sha1.create();
	  } else {
	    md.start();
	  }

	  // default MGF-1 to same as OAEP
	  if(!mgf1Md) {
	    mgf1Md = md;
	  }

	  if(keyLength < 2 * md.digestLength + 2) {
	    throw new Error('RSAES-OAEP key is too short for the hash function.');
	  }

	  if(!label) {
	    label = '';
	  }
	  md.update(label, 'raw');
	  var lHash = md.digest().getBytes();

	  // split the message into its parts
	  var y = em.charAt(0);
	  var maskedSeed = em.substring(1, md.digestLength + 1);
	  var maskedDB = em.substring(1 + md.digestLength);

	  var seedMask = rsa_mgf1(maskedDB, md.digestLength, mgf1Md);
	  var seed = forge$h.util.xorBytes(maskedSeed, seedMask, maskedSeed.length);

	  var dbMask = rsa_mgf1(seed, keyLength - md.digestLength - 1, mgf1Md);
	  var db = forge$h.util.xorBytes(maskedDB, dbMask, maskedDB.length);

	  var lHashPrime = db.substring(0, md.digestLength);

	  // constant time check that all values match what is expected
	  var error = (y !== '\x00');

	  // constant time check lHash vs lHashPrime
	  for(var i = 0; i < md.digestLength; ++i) {
	    error |= (lHash.charAt(i) !== lHashPrime.charAt(i));
	  }

	  // "constant time" find the 0x1 byte separating the padding (zeros) from the
	  // message
	  // TODO: It must be possible to do this in a better/smarter way?
	  var in_ps = 1;
	  var index = md.digestLength;
	  for(var j = md.digestLength; j < db.length; j++) {
	    var code = db.charCodeAt(j);

	    var is_0 = (code & 0x1) ^ 0x1;

	    // non-zero if not 0 or 1 in the ps section
	    var error_mask = in_ps ? 0xfffe : 0x0000;
	    error |= (code & error_mask);

	    // latch in_ps to zero after we find 0x1
	    in_ps = in_ps & is_0;
	    index += in_ps;
	  }

	  if(error || db.charCodeAt(index) !== 0x1) {
	    throw new Error('Invalid RSAES-OAEP padding.');
	  }

	  return db.substring(index + 1);
	};

	function rsa_mgf1(seed, maskLength, hash) {
	  // default to SHA-1 message digest
	  if(!hash) {
	    hash = forge$h.md.sha1.create();
	  }
	  var t = '';
	  var count = Math.ceil(maskLength / hash.digestLength);
	  for(var i = 0; i < count; ++i) {
	    var c = String.fromCharCode(
	      (i >> 24) & 0xFF, (i >> 16) & 0xFF, (i >> 8) & 0xFF, i & 0xFF);
	    hash.start();
	    hash.update(seed + c);
	    t += hash.digest().getBytes();
	  }
	  return t.substring(0, maskLength);
	}

	/**
	 * Prime number generation API.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2014 Digital Bazaar, Inc.
	 */

	var forge$g = forge$z;




	(function() {

	// forge.prime already defined
	if(forge$g.prime) {
	  return;
	}

	/* PRIME API */
	var prime = forge$g.prime = forge$g.prime || {};

	var BigInteger = forge$g.jsbn.BigInteger;

	// primes are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29
	var GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];
	var THIRTY = new BigInteger(null);
	THIRTY.fromInt(30);
	var op_or = function(x, y) {return x|y;};

	/**
	 * Generates a random probable prime with the given number of bits.
	 *
	 * Alternative algorithms can be specified by name as a string or as an
	 * object with custom options like so:
	 *
	 * {
	 *   name: 'PRIMEINC',
	 *   options: {
	 *     maxBlockTime: <the maximum amount of time to block the main
	 *       thread before allowing I/O other JS to run>,
	 *     millerRabinTests: <the number of miller-rabin tests to run>,
	 *     workerScript: <the worker script URL>,
	 *     workers: <the number of web workers (if supported) to use,
	 *       -1 to use estimated cores minus one>.
	 *     workLoad: the size of the work load, ie: number of possible prime
	 *       numbers for each web worker to check per work assignment,
	 *       (default: 100).
	 *   }
	 * }
	 *
	 * @param bits the number of bits for the prime number.
	 * @param options the options to use.
	 *          [algorithm] the algorithm to use (default: 'PRIMEINC').
	 *          [prng] a custom crypto-secure pseudo-random number generator to use,
	 *            that must define "getBytesSync".
	 *
	 * @return callback(err, num) called once the operation completes.
	 */
	prime.generateProbablePrime = function(bits, options, callback) {
	  if(typeof options === 'function') {
	    callback = options;
	    options = {};
	  }
	  options = options || {};

	  // default to PRIMEINC algorithm
	  var algorithm = options.algorithm || 'PRIMEINC';
	  if(typeof algorithm === 'string') {
	    algorithm = {name: algorithm};
	  }
	  algorithm.options = algorithm.options || {};

	  // create prng with api that matches BigInteger secure random
	  var prng = options.prng || forge$g.random;
	  var rng = {
	    // x is an array to fill with bytes
	    nextBytes: function(x) {
	      var b = prng.getBytesSync(x.length);
	      for(var i = 0; i < x.length; ++i) {
	        x[i] = b.charCodeAt(i);
	      }
	    }
	  };

	  if(algorithm.name === 'PRIMEINC') {
	    return primeincFindPrime(bits, rng, algorithm.options, callback);
	  }

	  throw new Error('Invalid prime generation algorithm: ' + algorithm.name);
	};

	function primeincFindPrime(bits, rng, options, callback) {
	  if('workers' in options) {
	    return primeincFindPrimeWithWorkers(bits, rng, options, callback);
	  }
	  return primeincFindPrimeWithoutWorkers(bits, rng, options, callback);
	}

	function primeincFindPrimeWithoutWorkers(bits, rng, options, callback) {
	  // initialize random number
	  var num = generateRandom(bits, rng);

	  /* Note: All primes are of the form 30k+i for i < 30 and gcd(30, i)=1. The
	  number we are given is always aligned at 30k + 1. Each time the number is
	  determined not to be prime we add to get to the next 'i', eg: if the number
	  was at 30k + 1 we add 6. */
	  var deltaIdx = 0;

	  // get required number of MR tests
	  var mrTests = getMillerRabinTests(num.bitLength());
	  if('millerRabinTests' in options) {
	    mrTests = options.millerRabinTests;
	  }

	  // find prime nearest to 'num' for maxBlockTime ms
	  // 10 ms gives 5ms of leeway for other calculations before dropping
	  // below 60fps (1000/60 == 16.67), but in reality, the number will
	  // likely be higher due to an 'atomic' big int modPow
	  var maxBlockTime = 10;
	  if('maxBlockTime' in options) {
	    maxBlockTime = options.maxBlockTime;
	  }

	  _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback);
	}

	function _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback) {
	  var start = +new Date();
	  do {
	    // overflow, regenerate random number
	    if(num.bitLength() > bits) {
	      num = generateRandom(bits, rng);
	    }
	    // do primality test
	    if(num.isProbablePrime(mrTests)) {
	      return callback(null, num);
	    }
	    // get next potential prime
	    num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);
	  } while(maxBlockTime < 0 || (+new Date() - start < maxBlockTime));

	  // keep trying later
	  forge$g.util.setImmediate(function() {
	    _primeinc(num, bits, rng, deltaIdx, mrTests, maxBlockTime, callback);
	  });
	}

	// NOTE: This algorithm is indeterminate in nature because workers
	// run in parallel looking at different segments of numbers. Even if this
	// algorithm is run twice with the same input from a predictable RNG, it
	// may produce different outputs.
	function primeincFindPrimeWithWorkers(bits, rng, options, callback) {
	  // web workers unavailable
	  if(typeof Worker === 'undefined') {
	    return primeincFindPrimeWithoutWorkers(bits, rng, options, callback);
	  }

	  // initialize random number
	  var num = generateRandom(bits, rng);

	  // use web workers to generate keys
	  var numWorkers = options.workers;
	  var workLoad = options.workLoad || 100;
	  var range = workLoad * 30 / 8;
	  var workerScript = options.workerScript || 'forge/prime.worker.js';
	  if(numWorkers === -1) {
	    return forge$g.util.estimateCores(function(err, cores) {
	      if(err) {
	        // default to 2
	        cores = 2;
	      }
	      numWorkers = cores - 1;
	      generate();
	    });
	  }
	  generate();

	  function generate() {
	    // require at least 1 worker
	    numWorkers = Math.max(1, numWorkers);

	    // TODO: consider optimizing by starting workers outside getPrime() ...
	    // note that in order to clean up they will have to be made internally
	    // asynchronous which may actually be slower

	    // start workers immediately
	    var workers = [];
	    for(var i = 0; i < numWorkers; ++i) {
	      // FIXME: fix path or use blob URLs
	      workers[i] = new Worker(workerScript);
	    }

	    // listen for requests from workers and assign ranges to find prime
	    for(var i = 0; i < numWorkers; ++i) {
	      workers[i].addEventListener('message', workerMessage);
	    }

	    /* Note: The distribution of random numbers is unknown. Therefore, each
	    web worker is continuously allocated a range of numbers to check for a
	    random number until one is found.

	    Every 30 numbers will be checked just 8 times, because prime numbers
	    have the form:

	    30k+i, for i < 30 and gcd(30, i)=1 (there are 8 values of i for this)

	    Therefore, if we want a web worker to run N checks before asking for
	    a new range of numbers, each range must contain N*30/8 numbers.

	    For 100 checks (workLoad), this is a range of 375. */

	    var found = false;
	    function workerMessage(e) {
	      // ignore message, prime already found
	      if(found) {
	        return;
	      }
	      var data = e.data;
	      if(data.found) {
	        // terminate all workers
	        for(var i = 0; i < workers.length; ++i) {
	          workers[i].terminate();
	        }
	        found = true;
	        return callback(null, new BigInteger(data.prime, 16));
	      }

	      // overflow, regenerate random number
	      if(num.bitLength() > bits) {
	        num = generateRandom(bits, rng);
	      }

	      // assign new range to check
	      var hex = num.toString(16);

	      // start prime search
	      e.target.postMessage({
	        hex: hex,
	        workLoad: workLoad
	      });

	      num.dAddOffset(range, 0);
	    }
	  }
	}

	/**
	 * Generates a random number using the given number of bits and RNG.
	 *
	 * @param bits the number of bits for the number.
	 * @param rng the random number generator to use.
	 *
	 * @return the random number.
	 */
	function generateRandom(bits, rng) {
	  var num = new BigInteger(bits, rng);
	  // force MSB set
	  var bits1 = bits - 1;
	  if(!num.testBit(bits1)) {
	    num.bitwiseTo(BigInteger.ONE.shiftLeft(bits1), op_or, num);
	  }
	  // align number on 30k+1 boundary
	  num.dAddOffset(31 - num.mod(THIRTY).byteValue(), 0);
	  return num;
	}

	/**
	 * Returns the required number of Miller-Rabin tests to generate a
	 * prime with an error probability of (1/2)^80.
	 *
	 * See Handbook of Applied Cryptography Chapter 4, Table 4.4.
	 *
	 * @param bits the bit size.
	 *
	 * @return the required number of iterations.
	 */
	function getMillerRabinTests(bits) {
	  if(bits <= 100) return 27;
	  if(bits <= 150) return 18;
	  if(bits <= 200) return 15;
	  if(bits <= 250) return 12;
	  if(bits <= 300) return 9;
	  if(bits <= 350) return 8;
	  if(bits <= 400) return 7;
	  if(bits <= 500) return 6;
	  if(bits <= 600) return 5;
	  if(bits <= 800) return 4;
	  if(bits <= 1250) return 3;
	  return 2;
	}

	})();

	/**
	 * Javascript implementation of basic RSA algorithms.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
	 *
	 * The only algorithm currently supported for PKI is RSA.
	 *
	 * An RSA key is often stored in ASN.1 DER format. The SubjectPublicKeyInfo
	 * ASN.1 structure is composed of an algorithm of type AlgorithmIdentifier
	 * and a subjectPublicKey of type bit string.
	 *
	 * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters
	 * for the algorithm, if any. In the case of RSA, there aren't any.
	 *
	 * SubjectPublicKeyInfo ::= SEQUENCE {
	 *   algorithm AlgorithmIdentifier,
	 *   subjectPublicKey BIT STRING
	 * }
	 *
	 * AlgorithmIdentifer ::= SEQUENCE {
	 *   algorithm OBJECT IDENTIFIER,
	 *   parameters ANY DEFINED BY algorithm OPTIONAL
	 * }
	 *
	 * For an RSA public key, the subjectPublicKey is:
	 *
	 * RSAPublicKey ::= SEQUENCE {
	 *   modulus            INTEGER,    -- n
	 *   publicExponent     INTEGER     -- e
	 * }
	 *
	 * PrivateKeyInfo ::= SEQUENCE {
	 *   version                   Version,
	 *   privateKeyAlgorithm       PrivateKeyAlgorithmIdentifier,
	 *   privateKey                PrivateKey,
	 *   attributes           [0]  IMPLICIT Attributes OPTIONAL
	 * }
	 *
	 * Version ::= INTEGER
	 * PrivateKeyAlgorithmIdentifier ::= AlgorithmIdentifier
	 * PrivateKey ::= OCTET STRING
	 * Attributes ::= SET OF Attribute
	 *
	 * An RSA private key as the following structure:
	 *
	 * RSAPrivateKey ::= SEQUENCE {
	 *   version Version,
	 *   modulus INTEGER, -- n
	 *   publicExponent INTEGER, -- e
	 *   privateExponent INTEGER, -- d
	 *   prime1 INTEGER, -- p
	 *   prime2 INTEGER, -- q
	 *   exponent1 INTEGER, -- d mod (p-1)
	 *   exponent2 INTEGER, -- d mod (q-1)
	 *   coefficient INTEGER -- (inverse of q) mod p
	 * }
	 *
	 * Version ::= INTEGER
	 *
	 * The OID for the RSA key algorithm is: 1.2.840.113549.1.1.1
	 */

	var forge$f = forge$z;








	if(typeof BigInteger$1 === 'undefined') {
	  var BigInteger$1 = forge$f.jsbn.BigInteger;
	}

	var _crypto = forge$f.util.isNodejs ? require$$1$7 : null;

	// shortcut for asn.1 API
	var asn1$4 = forge$f.asn1;

	// shortcut for util API
	var util$6 = forge$f.util;

	/*
	 * RSA encryption and decryption, see RFC 2313.
	 */
	forge$f.pki = forge$f.pki || {};
	forge$f.pki.rsa = forge$f.rsa = forge$f.rsa || {};
	var pki$3 = forge$f.pki;

	// for finding primes, which are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29
	var GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];

	// validator for a PrivateKeyInfo structure
	var privateKeyValidator = {
	  // PrivateKeyInfo
	  name: 'PrivateKeyInfo',
	  tagClass: asn1$4.Class.UNIVERSAL,
	  type: asn1$4.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    // Version (INTEGER)
	    name: 'PrivateKeyInfo.version',
	    tagClass: asn1$4.Class.UNIVERSAL,
	    type: asn1$4.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyVersion'
	  }, {
	    // privateKeyAlgorithm
	    name: 'PrivateKeyInfo.privateKeyAlgorithm',
	    tagClass: asn1$4.Class.UNIVERSAL,
	    type: asn1$4.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'AlgorithmIdentifier.algorithm',
	      tagClass: asn1$4.Class.UNIVERSAL,
	      type: asn1$4.Type.OID,
	      constructed: false,
	      capture: 'privateKeyOid'
	    }]
	  }, {
	    // PrivateKey
	    name: 'PrivateKeyInfo',
	    tagClass: asn1$4.Class.UNIVERSAL,
	    type: asn1$4.Type.OCTETSTRING,
	    constructed: false,
	    capture: 'privateKey'
	  }]
	};

	// validator for an RSA private key
	var rsaPrivateKeyValidator = {
	  // RSAPrivateKey
	  name: 'RSAPrivateKey',
	  tagClass: asn1$4.Class.UNIVERSAL,
	  type: asn1$4.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    // Version (INTEGER)
	    name: 'RSAPrivateKey.version',
	    tagClass: asn1$4.Class.UNIVERSAL,
	    type: asn1$4.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyVersion'
	  }, {
	    // modulus (n)
	    name: 'RSAPrivateKey.modulus',
	    tagClass: asn1$4.Class.UNIVERSAL,
	    type: asn1$4.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyModulus'
	  }, {
	    // publicExponent (e)
	    name: 'RSAPrivateKey.publicExponent',
	    tagClass: asn1$4.Class.UNIVERSAL,
	    type: asn1$4.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyPublicExponent'
	  }, {
	    // privateExponent (d)
	    name: 'RSAPrivateKey.privateExponent',
	    tagClass: asn1$4.Class.UNIVERSAL,
	    type: asn1$4.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyPrivateExponent'
	  }, {
	    // prime1 (p)
	    name: 'RSAPrivateKey.prime1',
	    tagClass: asn1$4.Class.UNIVERSAL,
	    type: asn1$4.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyPrime1'
	  }, {
	    // prime2 (q)
	    name: 'RSAPrivateKey.prime2',
	    tagClass: asn1$4.Class.UNIVERSAL,
	    type: asn1$4.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyPrime2'
	  }, {
	    // exponent1 (d mod (p-1))
	    name: 'RSAPrivateKey.exponent1',
	    tagClass: asn1$4.Class.UNIVERSAL,
	    type: asn1$4.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyExponent1'
	  }, {
	    // exponent2 (d mod (q-1))
	    name: 'RSAPrivateKey.exponent2',
	    tagClass: asn1$4.Class.UNIVERSAL,
	    type: asn1$4.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyExponent2'
	  }, {
	    // coefficient ((inverse of q) mod p)
	    name: 'RSAPrivateKey.coefficient',
	    tagClass: asn1$4.Class.UNIVERSAL,
	    type: asn1$4.Type.INTEGER,
	    constructed: false,
	    capture: 'privateKeyCoefficient'
	  }]
	};

	// validator for an RSA public key
	var rsaPublicKeyValidator = {
	  // RSAPublicKey
	  name: 'RSAPublicKey',
	  tagClass: asn1$4.Class.UNIVERSAL,
	  type: asn1$4.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    // modulus (n)
	    name: 'RSAPublicKey.modulus',
	    tagClass: asn1$4.Class.UNIVERSAL,
	    type: asn1$4.Type.INTEGER,
	    constructed: false,
	    capture: 'publicKeyModulus'
	  }, {
	    // publicExponent (e)
	    name: 'RSAPublicKey.exponent',
	    tagClass: asn1$4.Class.UNIVERSAL,
	    type: asn1$4.Type.INTEGER,
	    constructed: false,
	    capture: 'publicKeyExponent'
	  }]
	};

	// validator for an SubjectPublicKeyInfo structure
	// Note: Currently only works with an RSA public key
	var publicKeyValidator$1 = forge$f.pki.rsa.publicKeyValidator = {
	  name: 'SubjectPublicKeyInfo',
	  tagClass: asn1$4.Class.UNIVERSAL,
	  type: asn1$4.Type.SEQUENCE,
	  constructed: true,
	  captureAsn1: 'subjectPublicKeyInfo',
	  value: [{
	    name: 'SubjectPublicKeyInfo.AlgorithmIdentifier',
	    tagClass: asn1$4.Class.UNIVERSAL,
	    type: asn1$4.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'AlgorithmIdentifier.algorithm',
	      tagClass: asn1$4.Class.UNIVERSAL,
	      type: asn1$4.Type.OID,
	      constructed: false,
	      capture: 'publicKeyOid'
	    }]
	  }, {
	    // subjectPublicKey
	    name: 'SubjectPublicKeyInfo.subjectPublicKey',
	    tagClass: asn1$4.Class.UNIVERSAL,
	    type: asn1$4.Type.BITSTRING,
	    constructed: false,
	    value: [{
	      // RSAPublicKey
	      name: 'SubjectPublicKeyInfo.subjectPublicKey.RSAPublicKey',
	      tagClass: asn1$4.Class.UNIVERSAL,
	      type: asn1$4.Type.SEQUENCE,
	      constructed: true,
	      optional: true,
	      captureAsn1: 'rsaPublicKey'
	    }]
	  }]
	};

	/**
	 * Wrap digest in DigestInfo object.
	 *
	 * This function implements EMSA-PKCS1-v1_5-ENCODE as per RFC 3447.
	 *
	 * DigestInfo ::= SEQUENCE {
	 *   digestAlgorithm DigestAlgorithmIdentifier,
	 *   digest Digest
	 * }
	 *
	 * DigestAlgorithmIdentifier ::= AlgorithmIdentifier
	 * Digest ::= OCTET STRING
	 *
	 * @param md the message digest object with the hash to sign.
	 *
	 * @return the encoded message (ready for RSA encrytion)
	 */
	var emsaPkcs1v15encode = function(md) {
	  // get the oid for the algorithm
	  var oid;
	  if(md.algorithm in pki$3.oids) {
	    oid = pki$3.oids[md.algorithm];
	  } else {
	    var error = new Error('Unknown message digest algorithm.');
	    error.algorithm = md.algorithm;
	    throw error;
	  }
	  var oidBytes = asn1$4.oidToDer(oid).getBytes();

	  // create the digest info
	  var digestInfo = asn1$4.create(
	    asn1$4.Class.UNIVERSAL, asn1$4.Type.SEQUENCE, true, []);
	  var digestAlgorithm = asn1$4.create(
	    asn1$4.Class.UNIVERSAL, asn1$4.Type.SEQUENCE, true, []);
	  digestAlgorithm.value.push(asn1$4.create(
	    asn1$4.Class.UNIVERSAL, asn1$4.Type.OID, false, oidBytes));
	  digestAlgorithm.value.push(asn1$4.create(
	    asn1$4.Class.UNIVERSAL, asn1$4.Type.NULL, false, ''));
	  var digest = asn1$4.create(
	    asn1$4.Class.UNIVERSAL, asn1$4.Type.OCTETSTRING,
	    false, md.digest().getBytes());
	  digestInfo.value.push(digestAlgorithm);
	  digestInfo.value.push(digest);

	  // encode digest info
	  return asn1$4.toDer(digestInfo).getBytes();
	};

	/**
	 * Performs x^c mod n (RSA encryption or decryption operation).
	 *
	 * @param x the number to raise and mod.
	 * @param key the key to use.
	 * @param pub true if the key is public, false if private.
	 *
	 * @return the result of x^c mod n.
	 */
	var _modPow = function(x, key, pub) {
	  if(pub) {
	    return x.modPow(key.e, key.n);
	  }

	  if(!key.p || !key.q) {
	    // allow calculation without CRT params (slow)
	    return x.modPow(key.d, key.n);
	  }

	  // pre-compute dP, dQ, and qInv if necessary
	  if(!key.dP) {
	    key.dP = key.d.mod(key.p.subtract(BigInteger$1.ONE));
	  }
	  if(!key.dQ) {
	    key.dQ = key.d.mod(key.q.subtract(BigInteger$1.ONE));
	  }
	  if(!key.qInv) {
	    key.qInv = key.q.modInverse(key.p);
	  }

	  /* Chinese remainder theorem (CRT) states:

	    Suppose n1, n2, ..., nk are positive integers which are pairwise
	    coprime (n1 and n2 have no common factors other than 1). For any
	    integers x1, x2, ..., xk there exists an integer x solving the
	    system of simultaneous congruences (where ~= means modularly
	    congruent so a ~= b mod n means a mod n = b mod n):

	    x ~= x1 mod n1
	    x ~= x2 mod n2
	    ...
	    x ~= xk mod nk

	    This system of congruences has a single simultaneous solution x
	    between 0 and n - 1. Furthermore, each xk solution and x itself
	    is congruent modulo the product n = n1*n2*...*nk.
	    So x1 mod n = x2 mod n = xk mod n = x mod n.

	    The single simultaneous solution x can be solved with the following
	    equation:

	    x = sum(xi*ri*si) mod n where ri = n/ni and si = ri^-1 mod ni.

	    Where x is less than n, xi = x mod ni.

	    For RSA we are only concerned with k = 2. The modulus n = pq, where
	    p and q are coprime. The RSA decryption algorithm is:

	    y = x^d mod n

	    Given the above:

	    x1 = x^d mod p
	    r1 = n/p = q
	    s1 = q^-1 mod p
	    x2 = x^d mod q
	    r2 = n/q = p
	    s2 = p^-1 mod q

	    So y = (x1r1s1 + x2r2s2) mod n
	         = ((x^d mod p)q(q^-1 mod p) + (x^d mod q)p(p^-1 mod q)) mod n

	    According to Fermat's Little Theorem, if the modulus P is prime,
	    for any integer A not evenly divisible by P, A^(P-1) ~= 1 mod P.
	    Since A is not divisible by P it follows that if:
	    N ~= M mod (P - 1), then A^N mod P = A^M mod P. Therefore:

	    A^N mod P = A^(M mod (P - 1)) mod P. (The latter takes less effort
	    to calculate). In order to calculate x^d mod p more quickly the
	    exponent d mod (p - 1) is stored in the RSA private key (the same
	    is done for x^d mod q). These values are referred to as dP and dQ
	    respectively. Therefore we now have:

	    y = ((x^dP mod p)q(q^-1 mod p) + (x^dQ mod q)p(p^-1 mod q)) mod n

	    Since we'll be reducing x^dP by modulo p (same for q) we can also
	    reduce x by p (and q respectively) before hand. Therefore, let

	    xp = ((x mod p)^dP mod p), and
	    xq = ((x mod q)^dQ mod q), yielding:

	    y = (xp*q*(q^-1 mod p) + xq*p*(p^-1 mod q)) mod n

	    This can be further reduced to a simple algorithm that only
	    requires 1 inverse (the q inverse is used) to be used and stored.
	    The algorithm is called Garner's algorithm. If qInv is the
	    inverse of q, we simply calculate:

	    y = (qInv*(xp - xq) mod p) * q + xq

	    However, there are two further complications. First, we need to
	    ensure that xp > xq to prevent signed BigIntegers from being used
	    so we add p until this is true (since we will be mod'ing with
	    p anyway). Then, there is a known timing attack on algorithms
	    using the CRT. To mitigate this risk, "cryptographic blinding"
	    should be used. This requires simply generating a random number r
	    between 0 and n-1 and its inverse and multiplying x by r^e before
	    calculating y and then multiplying y by r^-1 afterwards. Note that
	    r must be coprime with n (gcd(r, n) === 1) in order to have an
	    inverse.
	  */

	  // cryptographic blinding
	  var r;
	  do {
	    r = new BigInteger$1(
	      forge$f.util.bytesToHex(forge$f.random.getBytes(key.n.bitLength() / 8)),
	      16);
	  } while(r.compareTo(key.n) >= 0 || !r.gcd(key.n).equals(BigInteger$1.ONE));
	  x = x.multiply(r.modPow(key.e, key.n)).mod(key.n);

	  // calculate xp and xq
	  var xp = x.mod(key.p).modPow(key.dP, key.p);
	  var xq = x.mod(key.q).modPow(key.dQ, key.q);

	  // xp must be larger than xq to avoid signed bit usage
	  while(xp.compareTo(xq) < 0) {
	    xp = xp.add(key.p);
	  }

	  // do last step
	  var y = xp.subtract(xq)
	    .multiply(key.qInv).mod(key.p)
	    .multiply(key.q).add(xq);

	  // remove effect of random for cryptographic blinding
	  y = y.multiply(r.modInverse(key.n)).mod(key.n);

	  return y;
	};

	/**
	 * NOTE: THIS METHOD IS DEPRECATED, use 'sign' on a private key object or
	 * 'encrypt' on a public key object instead.
	 *
	 * Performs RSA encryption.
	 *
	 * The parameter bt controls whether to put padding bytes before the
	 * message passed in. Set bt to either true or false to disable padding
	 * completely (in order to handle e.g. EMSA-PSS encoding seperately before),
	 * signaling whether the encryption operation is a public key operation
	 * (i.e. encrypting data) or not, i.e. private key operation (data signing).
	 *
	 * For PKCS#1 v1.5 padding pass in the block type to use, i.e. either 0x01
	 * (for signing) or 0x02 (for encryption). The key operation mode (private
	 * or public) is derived from this flag in that case).
	 *
	 * @param m the message to encrypt as a byte string.
	 * @param key the RSA key to use.
	 * @param bt for PKCS#1 v1.5 padding, the block type to use
	 *   (0x01 for private key, 0x02 for public),
	 *   to disable padding: true = public key, false = private key.
	 *
	 * @return the encrypted bytes as a string.
	 */
	pki$3.rsa.encrypt = function(m, key, bt) {
	  var pub = bt;
	  var eb;

	  // get the length of the modulus in bytes
	  var k = Math.ceil(key.n.bitLength() / 8);

	  if(bt !== false && bt !== true) {
	    // legacy, default to PKCS#1 v1.5 padding
	    pub = (bt === 0x02);
	    eb = _encodePkcs1_v1_5(m, key, bt);
	  } else {
	    eb = forge$f.util.createBuffer();
	    eb.putBytes(m);
	  }

	  // load encryption block as big integer 'x'
	  // FIXME: hex conversion inefficient, get BigInteger w/byte strings
	  var x = new BigInteger$1(eb.toHex(), 16);

	  // do RSA encryption
	  var y = _modPow(x, key, pub);

	  // convert y into the encrypted data byte string, if y is shorter in
	  // bytes than k, then prepend zero bytes to fill up ed
	  // FIXME: hex conversion inefficient, get BigInteger w/byte strings
	  var yhex = y.toString(16);
	  var ed = forge$f.util.createBuffer();
	  var zeros = k - Math.ceil(yhex.length / 2);
	  while(zeros > 0) {
	    ed.putByte(0x00);
	    --zeros;
	  }
	  ed.putBytes(forge$f.util.hexToBytes(yhex));
	  return ed.getBytes();
	};

	/**
	 * NOTE: THIS METHOD IS DEPRECATED, use 'decrypt' on a private key object or
	 * 'verify' on a public key object instead.
	 *
	 * Performs RSA decryption.
	 *
	 * The parameter ml controls whether to apply PKCS#1 v1.5 padding
	 * or not.  Set ml = false to disable padding removal completely
	 * (in order to handle e.g. EMSA-PSS later on) and simply pass back
	 * the RSA encryption block.
	 *
	 * @param ed the encrypted data to decrypt in as a byte string.
	 * @param key the RSA key to use.
	 * @param pub true for a public key operation, false for private.
	 * @param ml the message length, if known, false to disable padding.
	 *
	 * @return the decrypted message as a byte string.
	 */
	pki$3.rsa.decrypt = function(ed, key, pub, ml) {
	  // get the length of the modulus in bytes
	  var k = Math.ceil(key.n.bitLength() / 8);

	  // error if the length of the encrypted data ED is not k
	  if(ed.length !== k) {
	    var error = new Error('Encrypted message length is invalid.');
	    error.length = ed.length;
	    error.expected = k;
	    throw error;
	  }

	  // convert encrypted data into a big integer
	  // FIXME: hex conversion inefficient, get BigInteger w/byte strings
	  var y = new BigInteger$1(forge$f.util.createBuffer(ed).toHex(), 16);

	  // y must be less than the modulus or it wasn't the result of
	  // a previous mod operation (encryption) using that modulus
	  if(y.compareTo(key.n) >= 0) {
	    throw new Error('Encrypted message is invalid.');
	  }

	  // do RSA decryption
	  var x = _modPow(y, key, pub);

	  // create the encryption block, if x is shorter in bytes than k, then
	  // prepend zero bytes to fill up eb
	  // FIXME: hex conversion inefficient, get BigInteger w/byte strings
	  var xhex = x.toString(16);
	  var eb = forge$f.util.createBuffer();
	  var zeros = k - Math.ceil(xhex.length / 2);
	  while(zeros > 0) {
	    eb.putByte(0x00);
	    --zeros;
	  }
	  eb.putBytes(forge$f.util.hexToBytes(xhex));

	  if(ml !== false) {
	    // legacy, default to PKCS#1 v1.5 padding
	    return _decodePkcs1_v1_5(eb.getBytes(), key, pub);
	  }

	  // return message
	  return eb.getBytes();
	};

	/**
	 * Creates an RSA key-pair generation state object. It is used to allow
	 * key-generation to be performed in steps. It also allows for a UI to
	 * display progress updates.
	 *
	 * @param bits the size for the private key in bits, defaults to 2048.
	 * @param e the public exponent to use, defaults to 65537 (0x10001).
	 * @param [options] the options to use.
	 *          prng a custom crypto-secure pseudo-random number generator to use,
	 *            that must define "getBytesSync".
	 *          algorithm the algorithm to use (default: 'PRIMEINC').
	 *
	 * @return the state object to use to generate the key-pair.
	 */
	pki$3.rsa.createKeyPairGenerationState = function(bits, e, options) {
	  // TODO: migrate step-based prime generation code to forge.prime

	  // set default bits
	  if(typeof(bits) === 'string') {
	    bits = parseInt(bits, 10);
	  }
	  bits = bits || 2048;

	  // create prng with api that matches BigInteger secure random
	  options = options || {};
	  var prng = options.prng || forge$f.random;
	  var rng = {
	    // x is an array to fill with bytes
	    nextBytes: function(x) {
	      var b = prng.getBytesSync(x.length);
	      for(var i = 0; i < x.length; ++i) {
	        x[i] = b.charCodeAt(i);
	      }
	    }
	  };

	  var algorithm = options.algorithm || 'PRIMEINC';

	  // create PRIMEINC algorithm state
	  var rval;
	  if(algorithm === 'PRIMEINC') {
	    rval = {
	      algorithm: algorithm,
	      state: 0,
	      bits: bits,
	      rng: rng,
	      eInt: e || 65537,
	      e: new BigInteger$1(null),
	      p: null,
	      q: null,
	      qBits: bits >> 1,
	      pBits: bits - (bits >> 1),
	      pqState: 0,
	      num: null,
	      keys: null
	    };
	    rval.e.fromInt(rval.eInt);
	  } else {
	    throw new Error('Invalid key generation algorithm: ' + algorithm);
	  }

	  return rval;
	};

	/**
	 * Attempts to runs the key-generation algorithm for at most n seconds
	 * (approximately) using the given state. When key-generation has completed,
	 * the keys will be stored in state.keys.
	 *
	 * To use this function to update a UI while generating a key or to prevent
	 * causing browser lockups/warnings, set "n" to a value other than 0. A
	 * simple pattern for generating a key and showing a progress indicator is:
	 *
	 * var state = pki.rsa.createKeyPairGenerationState(2048);
	 * var step = function() {
	 *   // step key-generation, run algorithm for 100 ms, repeat
	 *   if(!forge.pki.rsa.stepKeyPairGenerationState(state, 100)) {
	 *     setTimeout(step, 1);
	 *   } else {
	 *     // key-generation complete
	 *     // TODO: turn off progress indicator here
	 *     // TODO: use the generated key-pair in "state.keys"
	 *   }
	 * };
	 * // TODO: turn on progress indicator here
	 * setTimeout(step, 0);
	 *
	 * @param state the state to use.
	 * @param n the maximum number of milliseconds to run the algorithm for, 0
	 *          to run the algorithm to completion.
	 *
	 * @return true if the key-generation completed, false if not.
	 */
	pki$3.rsa.stepKeyPairGenerationState = function(state, n) {
	  // set default algorithm if not set
	  if(!('algorithm' in state)) {
	    state.algorithm = 'PRIMEINC';
	  }

	  // TODO: migrate step-based prime generation code to forge.prime
	  // TODO: abstract as PRIMEINC algorithm

	  // do key generation (based on Tom Wu's rsa.js, see jsbn.js license)
	  // with some minor optimizations and designed to run in steps

	  // local state vars
	  var THIRTY = new BigInteger$1(null);
	  THIRTY.fromInt(30);
	  var deltaIdx = 0;
	  var op_or = function(x, y) {return x | y;};

	  // keep stepping until time limit is reached or done
	  var t1 = +new Date();
	  var t2;
	  var total = 0;
	  while(state.keys === null && (n <= 0 || total < n)) {
	    // generate p or q
	    if(state.state === 0) {
	      /* Note: All primes are of the form:

	        30k+i, for i < 30 and gcd(30, i)=1, where there are 8 values for i

	        When we generate a random number, we always align it at 30k + 1. Each
	        time the number is determined not to be prime we add to get to the
	        next 'i', eg: if the number was at 30k + 1 we add 6. */
	      var bits = (state.p === null) ? state.pBits : state.qBits;
	      var bits1 = bits - 1;

	      // get a random number
	      if(state.pqState === 0) {
	        state.num = new BigInteger$1(bits, state.rng);
	        // force MSB set
	        if(!state.num.testBit(bits1)) {
	          state.num.bitwiseTo(
	            BigInteger$1.ONE.shiftLeft(bits1), op_or, state.num);
	        }
	        // align number on 30k+1 boundary
	        state.num.dAddOffset(31 - state.num.mod(THIRTY).byteValue(), 0);
	        deltaIdx = 0;

	        ++state.pqState;
	      } else if(state.pqState === 1) {
	        // try to make the number a prime
	        if(state.num.bitLength() > bits) {
	          // overflow, try again
	          state.pqState = 0;
	          // do primality test
	        } else if(state.num.isProbablePrime(
	          _getMillerRabinTests(state.num.bitLength()))) {
	          ++state.pqState;
	        } else {
	          // get next potential prime
	          state.num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);
	        }
	      } else if(state.pqState === 2) {
	        // ensure number is coprime with e
	        state.pqState =
	          (state.num.subtract(BigInteger$1.ONE).gcd(state.e)
	            .compareTo(BigInteger$1.ONE) === 0) ? 3 : 0;
	      } else if(state.pqState === 3) {
	        // store p or q
	        state.pqState = 0;
	        if(state.p === null) {
	          state.p = state.num;
	        } else {
	          state.q = state.num;
	        }

	        // advance state if both p and q are ready
	        if(state.p !== null && state.q !== null) {
	          ++state.state;
	        }
	        state.num = null;
	      }
	    } else if(state.state === 1) {
	      // ensure p is larger than q (swap them if not)
	      if(state.p.compareTo(state.q) < 0) {
	        state.num = state.p;
	        state.p = state.q;
	        state.q = state.num;
	      }
	      ++state.state;
	    } else if(state.state === 2) {
	      // compute phi: (p - 1)(q - 1) (Euler's totient function)
	      state.p1 = state.p.subtract(BigInteger$1.ONE);
	      state.q1 = state.q.subtract(BigInteger$1.ONE);
	      state.phi = state.p1.multiply(state.q1);
	      ++state.state;
	    } else if(state.state === 3) {
	      // ensure e and phi are coprime
	      if(state.phi.gcd(state.e).compareTo(BigInteger$1.ONE) === 0) {
	        // phi and e are coprime, advance
	        ++state.state;
	      } else {
	        // phi and e aren't coprime, so generate a new p and q
	        state.p = null;
	        state.q = null;
	        state.state = 0;
	      }
	    } else if(state.state === 4) {
	      // create n, ensure n is has the right number of bits
	      state.n = state.p.multiply(state.q);

	      // ensure n is right number of bits
	      if(state.n.bitLength() === state.bits) {
	        // success, advance
	        ++state.state;
	      } else {
	        // failed, get new q
	        state.q = null;
	        state.state = 0;
	      }
	    } else if(state.state === 5) {
	      // set keys
	      var d = state.e.modInverse(state.phi);
	      state.keys = {
	        privateKey: pki$3.rsa.setPrivateKey(
	          state.n, state.e, d, state.p, state.q,
	          d.mod(state.p1), d.mod(state.q1),
	          state.q.modInverse(state.p)),
	        publicKey: pki$3.rsa.setPublicKey(state.n, state.e)
	      };
	    }

	    // update timing
	    t2 = +new Date();
	    total += t2 - t1;
	    t1 = t2;
	  }

	  return state.keys !== null;
	};

	/**
	 * Generates an RSA public-private key pair in a single call.
	 *
	 * To generate a key-pair in steps (to allow for progress updates and to
	 * prevent blocking or warnings in slow browsers) then use the key-pair
	 * generation state functions.
	 *
	 * To generate a key-pair asynchronously (either through web-workers, if
	 * available, or by breaking up the work on the main thread), pass a
	 * callback function.
	 *
	 * @param [bits] the size for the private key in bits, defaults to 2048.
	 * @param [e] the public exponent to use, defaults to 65537.
	 * @param [options] options for key-pair generation, if given then 'bits'
	 *            and 'e' must *not* be given:
	 *          bits the size for the private key in bits, (default: 2048).
	 *          e the public exponent to use, (default: 65537 (0x10001)).
	 *          workerScript the worker script URL.
	 *          workers the number of web workers (if supported) to use,
	 *            (default: 2).
	 *          workLoad the size of the work load, ie: number of possible prime
	 *            numbers for each web worker to check per work assignment,
	 *            (default: 100).
	 *          prng a custom crypto-secure pseudo-random number generator to use,
	 *            that must define "getBytesSync". Disables use of native APIs.
	 *          algorithm the algorithm to use (default: 'PRIMEINC').
	 * @param [callback(err, keypair)] called once the operation completes.
	 *
	 * @return an object with privateKey and publicKey properties.
	 */
	pki$3.rsa.generateKeyPair = function(bits, e, options, callback) {
	  // (bits), (options), (callback)
	  if(arguments.length === 1) {
	    if(typeof bits === 'object') {
	      options = bits;
	      bits = undefined;
	    } else if(typeof bits === 'function') {
	      callback = bits;
	      bits = undefined;
	    }
	  } else if(arguments.length === 2) {
	    // (bits, e), (bits, options), (bits, callback), (options, callback)
	    if(typeof bits === 'number') {
	      if(typeof e === 'function') {
	        callback = e;
	        e = undefined;
	      } else if(typeof e !== 'number') {
	        options = e;
	        e = undefined;
	      }
	    } else {
	      options = bits;
	      callback = e;
	      bits = undefined;
	      e = undefined;
	    }
	  } else if(arguments.length === 3) {
	    // (bits, e, options), (bits, e, callback), (bits, options, callback)
	    if(typeof e === 'number') {
	      if(typeof options === 'function') {
	        callback = options;
	        options = undefined;
	      }
	    } else {
	      callback = options;
	      options = e;
	      e = undefined;
	    }
	  }
	  options = options || {};
	  if(bits === undefined) {
	    bits = options.bits || 2048;
	  }
	  if(e === undefined) {
	    e = options.e || 0x10001;
	  }

	  // use native code if permitted, available, and parameters are acceptable
	  if(!options.prng &&
	    bits >= 256 && bits <= 16384 && (e === 0x10001 || e === 3)) {
	    if(callback) {
	      // try native async
	      if(_detectNodeCrypto('generateKeyPair')) {
	        return _crypto.generateKeyPair('rsa', {
	          modulusLength: bits,
	          publicExponent: e,
	          publicKeyEncoding: {
	            type: 'spki',
	            format: 'pem'
	          },
	          privateKeyEncoding: {
	            type: 'pkcs8',
	            format: 'pem'
	          }
	        }, function(err, pub, priv) {
	          if(err) {
	            return callback(err);
	          }
	          callback(null, {
	            privateKey: pki$3.privateKeyFromPem(priv),
	            publicKey: pki$3.publicKeyFromPem(pub)
	          });
	        });
	      }
	      if(_detectSubtleCrypto('generateKey') &&
	        _detectSubtleCrypto('exportKey')) {
	        // use standard native generateKey
	        return util$6.globalScope.crypto.subtle.generateKey({
	          name: 'RSASSA-PKCS1-v1_5',
	          modulusLength: bits,
	          publicExponent: _intToUint8Array(e),
	          hash: {name: 'SHA-256'}
	        }, true /* key can be exported*/, ['sign', 'verify'])
	        .then(function(pair) {
	          return util$6.globalScope.crypto.subtle.exportKey(
	            'pkcs8', pair.privateKey);
	        // avoiding catch(function(err) {...}) to support IE <= 8
	        }).then(undefined, function(err) {
	          callback(err);
	        }).then(function(pkcs8) {
	          if(pkcs8) {
	            var privateKey = pki$3.privateKeyFromAsn1(
	              asn1$4.fromDer(forge$f.util.createBuffer(pkcs8)));
	            callback(null, {
	              privateKey: privateKey,
	              publicKey: pki$3.setRsaPublicKey(privateKey.n, privateKey.e)
	            });
	          }
	        });
	      }
	      if(_detectSubtleMsCrypto('generateKey') &&
	        _detectSubtleMsCrypto('exportKey')) {
	        var genOp = util$6.globalScope.msCrypto.subtle.generateKey({
	          name: 'RSASSA-PKCS1-v1_5',
	          modulusLength: bits,
	          publicExponent: _intToUint8Array(e),
	          hash: {name: 'SHA-256'}
	        }, true /* key can be exported*/, ['sign', 'verify']);
	        genOp.oncomplete = function(e) {
	          var pair = e.target.result;
	          var exportOp = util$6.globalScope.msCrypto.subtle.exportKey(
	            'pkcs8', pair.privateKey);
	          exportOp.oncomplete = function(e) {
	            var pkcs8 = e.target.result;
	            var privateKey = pki$3.privateKeyFromAsn1(
	              asn1$4.fromDer(forge$f.util.createBuffer(pkcs8)));
	            callback(null, {
	              privateKey: privateKey,
	              publicKey: pki$3.setRsaPublicKey(privateKey.n, privateKey.e)
	            });
	          };
	          exportOp.onerror = function(err) {
	            callback(err);
	          };
	        };
	        genOp.onerror = function(err) {
	          callback(err);
	        };
	        return;
	      }
	    } else {
	      // try native sync
	      if(_detectNodeCrypto('generateKeyPairSync')) {
	        var keypair = _crypto.generateKeyPairSync('rsa', {
	          modulusLength: bits,
	          publicExponent: e,
	          publicKeyEncoding: {
	            type: 'spki',
	            format: 'pem'
	          },
	          privateKeyEncoding: {
	            type: 'pkcs8',
	            format: 'pem'
	          }
	        });
	        return {
	          privateKey: pki$3.privateKeyFromPem(keypair.privateKey),
	          publicKey: pki$3.publicKeyFromPem(keypair.publicKey)
	        };
	      }
	    }
	  }

	  // use JavaScript implementation
	  var state = pki$3.rsa.createKeyPairGenerationState(bits, e, options);
	  if(!callback) {
	    pki$3.rsa.stepKeyPairGenerationState(state, 0);
	    return state.keys;
	  }
	  _generateKeyPair(state, options, callback);
	};

	/**
	 * Sets an RSA public key from BigIntegers modulus and exponent.
	 *
	 * @param n the modulus.
	 * @param e the exponent.
	 *
	 * @return the public key.
	 */
	pki$3.setRsaPublicKey = pki$3.rsa.setPublicKey = function(n, e) {
	  var key = {
	    n: n,
	    e: e
	  };

	  /**
	   * Encrypts the given data with this public key. Newer applications
	   * should use the 'RSA-OAEP' decryption scheme, 'RSAES-PKCS1-V1_5' is for
	   * legacy applications.
	   *
	   * @param data the byte string to encrypt.
	   * @param scheme the encryption scheme to use:
	   *          'RSAES-PKCS1-V1_5' (default),
	   *          'RSA-OAEP',
	   *          'RAW', 'NONE', or null to perform raw RSA encryption,
	   *          an object with an 'encode' property set to a function
	   *          with the signature 'function(data, key)' that returns
	   *          a binary-encoded string representing the encoded data.
	   * @param schemeOptions any scheme-specific options.
	   *
	   * @return the encrypted byte string.
	   */
	  key.encrypt = function(data, scheme, schemeOptions) {
	    if(typeof scheme === 'string') {
	      scheme = scheme.toUpperCase();
	    } else if(scheme === undefined) {
	      scheme = 'RSAES-PKCS1-V1_5';
	    }

	    if(scheme === 'RSAES-PKCS1-V1_5') {
	      scheme = {
	        encode: function(m, key, pub) {
	          return _encodePkcs1_v1_5(m, key, 0x02).getBytes();
	        }
	      };
	    } else if(scheme === 'RSA-OAEP' || scheme === 'RSAES-OAEP') {
	      scheme = {
	        encode: function(m, key) {
	          return forge$f.pkcs1.encode_rsa_oaep(key, m, schemeOptions);
	        }
	      };
	    } else if(['RAW', 'NONE', 'NULL', null].indexOf(scheme) !== -1) {
	      scheme = {encode: function(e) {return e;}};
	    } else if(typeof scheme === 'string') {
	      throw new Error('Unsupported encryption scheme: "' + scheme + '".');
	    }

	    // do scheme-based encoding then rsa encryption
	    var e = scheme.encode(data, key, true);
	    return pki$3.rsa.encrypt(e, key, true);
	  };

	  /**
	   * Verifies the given signature against the given digest.
	   *
	   * PKCS#1 supports multiple (currently two) signature schemes:
	   * RSASSA-PKCS1-V1_5 and RSASSA-PSS.
	   *
	   * By default this implementation uses the "old scheme", i.e.
	   * RSASSA-PKCS1-V1_5, in which case once RSA-decrypted, the
	   * signature is an OCTET STRING that holds a DigestInfo.
	   *
	   * DigestInfo ::= SEQUENCE {
	   *   digestAlgorithm DigestAlgorithmIdentifier,
	   *   digest Digest
	   * }
	   * DigestAlgorithmIdentifier ::= AlgorithmIdentifier
	   * Digest ::= OCTET STRING
	   *
	   * To perform PSS signature verification, provide an instance
	   * of Forge PSS object as the scheme parameter.
	   *
	   * @param digest the message digest hash to compare against the signature,
	   *          as a binary-encoded string.
	   * @param signature the signature to verify, as a binary-encoded string.
	   * @param scheme signature verification scheme to use:
	   *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,
	   *          a Forge PSS object for RSASSA-PSS,
	   *          'NONE' or null for none, DigestInfo will not be expected, but
	   *            PKCS#1 v1.5 padding will still be used.
	   *
	   * @return true if the signature was verified, false if not.
	   */
	  key.verify = function(digest, signature, scheme) {
	    if(typeof scheme === 'string') {
	      scheme = scheme.toUpperCase();
	    } else if(scheme === undefined) {
	      scheme = 'RSASSA-PKCS1-V1_5';
	    }

	    if(scheme === 'RSASSA-PKCS1-V1_5') {
	      scheme = {
	        verify: function(digest, d) {
	          // remove padding
	          d = _decodePkcs1_v1_5(d, key, true);
	          // d is ASN.1 BER-encoded DigestInfo
	          var obj = asn1$4.fromDer(d);
	          // compare the given digest to the decrypted one
	          return digest === obj.value[1].value;
	        }
	      };
	    } else if(scheme === 'NONE' || scheme === 'NULL' || scheme === null) {
	      scheme = {
	        verify: function(digest, d) {
	          // remove padding
	          d = _decodePkcs1_v1_5(d, key, true);
	          return digest === d;
	        }
	      };
	    }

	    // do rsa decryption w/o any decoding, then verify -- which does decoding
	    var d = pki$3.rsa.decrypt(signature, key, true, false);
	    return scheme.verify(digest, d, key.n.bitLength());
	  };

	  return key;
	};

	/**
	 * Sets an RSA private key from BigIntegers modulus, exponent, primes,
	 * prime exponents, and modular multiplicative inverse.
	 *
	 * @param n the modulus.
	 * @param e the public exponent.
	 * @param d the private exponent ((inverse of e) mod n).
	 * @param p the first prime.
	 * @param q the second prime.
	 * @param dP exponent1 (d mod (p-1)).
	 * @param dQ exponent2 (d mod (q-1)).
	 * @param qInv ((inverse of q) mod p)
	 *
	 * @return the private key.
	 */
	pki$3.setRsaPrivateKey = pki$3.rsa.setPrivateKey = function(
	  n, e, d, p, q, dP, dQ, qInv) {
	  var key = {
	    n: n,
	    e: e,
	    d: d,
	    p: p,
	    q: q,
	    dP: dP,
	    dQ: dQ,
	    qInv: qInv
	  };

	  /**
	   * Decrypts the given data with this private key. The decryption scheme
	   * must match the one used to encrypt the data.
	   *
	   * @param data the byte string to decrypt.
	   * @param scheme the decryption scheme to use:
	   *          'RSAES-PKCS1-V1_5' (default),
	   *          'RSA-OAEP',
	   *          'RAW', 'NONE', or null to perform raw RSA decryption.
	   * @param schemeOptions any scheme-specific options.
	   *
	   * @return the decrypted byte string.
	   */
	  key.decrypt = function(data, scheme, schemeOptions) {
	    if(typeof scheme === 'string') {
	      scheme = scheme.toUpperCase();
	    } else if(scheme === undefined) {
	      scheme = 'RSAES-PKCS1-V1_5';
	    }

	    // do rsa decryption w/o any decoding
	    var d = pki$3.rsa.decrypt(data, key, false, false);

	    if(scheme === 'RSAES-PKCS1-V1_5') {
	      scheme = {decode: _decodePkcs1_v1_5};
	    } else if(scheme === 'RSA-OAEP' || scheme === 'RSAES-OAEP') {
	      scheme = {
	        decode: function(d, key) {
	          return forge$f.pkcs1.decode_rsa_oaep(key, d, schemeOptions);
	        }
	      };
	    } else if(['RAW', 'NONE', 'NULL', null].indexOf(scheme) !== -1) {
	      scheme = {decode: function(d) {return d;}};
	    } else {
	      throw new Error('Unsupported encryption scheme: "' + scheme + '".');
	    }

	    // decode according to scheme
	    return scheme.decode(d, key, false);
	  };

	  /**
	   * Signs the given digest, producing a signature.
	   *
	   * PKCS#1 supports multiple (currently two) signature schemes:
	   * RSASSA-PKCS1-V1_5 and RSASSA-PSS.
	   *
	   * By default this implementation uses the "old scheme", i.e.
	   * RSASSA-PKCS1-V1_5. In order to generate a PSS signature, provide
	   * an instance of Forge PSS object as the scheme parameter.
	   *
	   * @param md the message digest object with the hash to sign.
	   * @param scheme the signature scheme to use:
	   *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,
	   *          a Forge PSS object for RSASSA-PSS,
	   *          'NONE' or null for none, DigestInfo will not be used but
	   *            PKCS#1 v1.5 padding will still be used.
	   *
	   * @return the signature as a byte string.
	   */
	  key.sign = function(md, scheme) {
	    /* Note: The internal implementation of RSA operations is being
	      transitioned away from a PKCS#1 v1.5 hard-coded scheme. Some legacy
	      code like the use of an encoding block identifier 'bt' will eventually
	      be removed. */

	    // private key operation
	    var bt = false;

	    if(typeof scheme === 'string') {
	      scheme = scheme.toUpperCase();
	    }

	    if(scheme === undefined || scheme === 'RSASSA-PKCS1-V1_5') {
	      scheme = {encode: emsaPkcs1v15encode};
	      bt = 0x01;
	    } else if(scheme === 'NONE' || scheme === 'NULL' || scheme === null) {
	      scheme = {encode: function() {return md;}};
	      bt = 0x01;
	    }

	    // encode and then encrypt
	    var d = scheme.encode(md, key.n.bitLength());
	    return pki$3.rsa.encrypt(d, key, bt);
	  };

	  return key;
	};

	/**
	 * Wraps an RSAPrivateKey ASN.1 object in an ASN.1 PrivateKeyInfo object.
	 *
	 * @param rsaKey the ASN.1 RSAPrivateKey.
	 *
	 * @return the ASN.1 PrivateKeyInfo.
	 */
	pki$3.wrapRsaPrivateKey = function(rsaKey) {
	  // PrivateKeyInfo
	  return asn1$4.create(asn1$4.Class.UNIVERSAL, asn1$4.Type.SEQUENCE, true, [
	    // version (0)
	    asn1$4.create(asn1$4.Class.UNIVERSAL, asn1$4.Type.INTEGER, false,
	      asn1$4.integerToDer(0).getBytes()),
	    // privateKeyAlgorithm
	    asn1$4.create(asn1$4.Class.UNIVERSAL, asn1$4.Type.SEQUENCE, true, [
	      asn1$4.create(
	        asn1$4.Class.UNIVERSAL, asn1$4.Type.OID, false,
	        asn1$4.oidToDer(pki$3.oids.rsaEncryption).getBytes()),
	      asn1$4.create(asn1$4.Class.UNIVERSAL, asn1$4.Type.NULL, false, '')
	    ]),
	    // PrivateKey
	    asn1$4.create(asn1$4.Class.UNIVERSAL, asn1$4.Type.OCTETSTRING, false,
	      asn1$4.toDer(rsaKey).getBytes())
	  ]);
	};

	/**
	 * Converts a private key from an ASN.1 object.
	 *
	 * @param obj the ASN.1 representation of a PrivateKeyInfo containing an
	 *          RSAPrivateKey or an RSAPrivateKey.
	 *
	 * @return the private key.
	 */
	pki$3.privateKeyFromAsn1 = function(obj) {
	  // get PrivateKeyInfo
	  var capture = {};
	  var errors = [];
	  if(asn1$4.validate(obj, privateKeyValidator, capture, errors)) {
	    obj = asn1$4.fromDer(forge$f.util.createBuffer(capture.privateKey));
	  }

	  // get RSAPrivateKey
	  capture = {};
	  errors = [];
	  if(!asn1$4.validate(obj, rsaPrivateKeyValidator, capture, errors)) {
	    var error = new Error('Cannot read private key. ' +
	      'ASN.1 object does not contain an RSAPrivateKey.');
	    error.errors = errors;
	    throw error;
	  }

	  // Note: Version is currently ignored.
	  // capture.privateKeyVersion
	  // FIXME: inefficient, get a BigInteger that uses byte strings
	  var n, e, d, p, q, dP, dQ, qInv;
	  n = forge$f.util.createBuffer(capture.privateKeyModulus).toHex();
	  e = forge$f.util.createBuffer(capture.privateKeyPublicExponent).toHex();
	  d = forge$f.util.createBuffer(capture.privateKeyPrivateExponent).toHex();
	  p = forge$f.util.createBuffer(capture.privateKeyPrime1).toHex();
	  q = forge$f.util.createBuffer(capture.privateKeyPrime2).toHex();
	  dP = forge$f.util.createBuffer(capture.privateKeyExponent1).toHex();
	  dQ = forge$f.util.createBuffer(capture.privateKeyExponent2).toHex();
	  qInv = forge$f.util.createBuffer(capture.privateKeyCoefficient).toHex();

	  // set private key
	  return pki$3.setRsaPrivateKey(
	    new BigInteger$1(n, 16),
	    new BigInteger$1(e, 16),
	    new BigInteger$1(d, 16),
	    new BigInteger$1(p, 16),
	    new BigInteger$1(q, 16),
	    new BigInteger$1(dP, 16),
	    new BigInteger$1(dQ, 16),
	    new BigInteger$1(qInv, 16));
	};

	/**
	 * Converts a private key to an ASN.1 RSAPrivateKey.
	 *
	 * @param key the private key.
	 *
	 * @return the ASN.1 representation of an RSAPrivateKey.
	 */
	pki$3.privateKeyToAsn1 = pki$3.privateKeyToRSAPrivateKey = function(key) {
	  // RSAPrivateKey
	  return asn1$4.create(asn1$4.Class.UNIVERSAL, asn1$4.Type.SEQUENCE, true, [
	    // version (0 = only 2 primes, 1 multiple primes)
	    asn1$4.create(asn1$4.Class.UNIVERSAL, asn1$4.Type.INTEGER, false,
	      asn1$4.integerToDer(0).getBytes()),
	    // modulus (n)
	    asn1$4.create(asn1$4.Class.UNIVERSAL, asn1$4.Type.INTEGER, false,
	      _bnToBytes(key.n)),
	    // publicExponent (e)
	    asn1$4.create(asn1$4.Class.UNIVERSAL, asn1$4.Type.INTEGER, false,
	      _bnToBytes(key.e)),
	    // privateExponent (d)
	    asn1$4.create(asn1$4.Class.UNIVERSAL, asn1$4.Type.INTEGER, false,
	      _bnToBytes(key.d)),
	    // privateKeyPrime1 (p)
	    asn1$4.create(asn1$4.Class.UNIVERSAL, asn1$4.Type.INTEGER, false,
	      _bnToBytes(key.p)),
	    // privateKeyPrime2 (q)
	    asn1$4.create(asn1$4.Class.UNIVERSAL, asn1$4.Type.INTEGER, false,
	      _bnToBytes(key.q)),
	    // privateKeyExponent1 (dP)
	    asn1$4.create(asn1$4.Class.UNIVERSAL, asn1$4.Type.INTEGER, false,
	      _bnToBytes(key.dP)),
	    // privateKeyExponent2 (dQ)
	    asn1$4.create(asn1$4.Class.UNIVERSAL, asn1$4.Type.INTEGER, false,
	      _bnToBytes(key.dQ)),
	    // coefficient (qInv)
	    asn1$4.create(asn1$4.Class.UNIVERSAL, asn1$4.Type.INTEGER, false,
	      _bnToBytes(key.qInv))
	  ]);
	};

	/**
	 * Converts a public key from an ASN.1 SubjectPublicKeyInfo or RSAPublicKey.
	 *
	 * @param obj the asn1 representation of a SubjectPublicKeyInfo or RSAPublicKey.
	 *
	 * @return the public key.
	 */
	pki$3.publicKeyFromAsn1 = function(obj) {
	  // get SubjectPublicKeyInfo
	  var capture = {};
	  var errors = [];
	  if(asn1$4.validate(obj, publicKeyValidator$1, capture, errors)) {
	    // get oid
	    var oid = asn1$4.derToOid(capture.publicKeyOid);
	    if(oid !== pki$3.oids.rsaEncryption) {
	      var error = new Error('Cannot read public key. Unknown OID.');
	      error.oid = oid;
	      throw error;
	    }
	    obj = capture.rsaPublicKey;
	  }

	  // get RSA params
	  errors = [];
	  if(!asn1$4.validate(obj, rsaPublicKeyValidator, capture, errors)) {
	    var error = new Error('Cannot read public key. ' +
	      'ASN.1 object does not contain an RSAPublicKey.');
	    error.errors = errors;
	    throw error;
	  }

	  // FIXME: inefficient, get a BigInteger that uses byte strings
	  var n = forge$f.util.createBuffer(capture.publicKeyModulus).toHex();
	  var e = forge$f.util.createBuffer(capture.publicKeyExponent).toHex();

	  // set public key
	  return pki$3.setRsaPublicKey(
	    new BigInteger$1(n, 16),
	    new BigInteger$1(e, 16));
	};

	/**
	 * Converts a public key to an ASN.1 SubjectPublicKeyInfo.
	 *
	 * @param key the public key.
	 *
	 * @return the asn1 representation of a SubjectPublicKeyInfo.
	 */
	pki$3.publicKeyToAsn1 = pki$3.publicKeyToSubjectPublicKeyInfo = function(key) {
	  // SubjectPublicKeyInfo
	  return asn1$4.create(asn1$4.Class.UNIVERSAL, asn1$4.Type.SEQUENCE, true, [
	    // AlgorithmIdentifier
	    asn1$4.create(asn1$4.Class.UNIVERSAL, asn1$4.Type.SEQUENCE, true, [
	      // algorithm
	      asn1$4.create(asn1$4.Class.UNIVERSAL, asn1$4.Type.OID, false,
	        asn1$4.oidToDer(pki$3.oids.rsaEncryption).getBytes()),
	      // parameters (null)
	      asn1$4.create(asn1$4.Class.UNIVERSAL, asn1$4.Type.NULL, false, '')
	    ]),
	    // subjectPublicKey
	    asn1$4.create(asn1$4.Class.UNIVERSAL, asn1$4.Type.BITSTRING, false, [
	      pki$3.publicKeyToRSAPublicKey(key)
	    ])
	  ]);
	};

	/**
	 * Converts a public key to an ASN.1 RSAPublicKey.
	 *
	 * @param key the public key.
	 *
	 * @return the asn1 representation of a RSAPublicKey.
	 */
	pki$3.publicKeyToRSAPublicKey = function(key) {
	  // RSAPublicKey
	  return asn1$4.create(asn1$4.Class.UNIVERSAL, asn1$4.Type.SEQUENCE, true, [
	    // modulus (n)
	    asn1$4.create(asn1$4.Class.UNIVERSAL, asn1$4.Type.INTEGER, false,
	      _bnToBytes(key.n)),
	    // publicExponent (e)
	    asn1$4.create(asn1$4.Class.UNIVERSAL, asn1$4.Type.INTEGER, false,
	      _bnToBytes(key.e))
	  ]);
	};

	/**
	 * Encodes a message using PKCS#1 v1.5 padding.
	 *
	 * @param m the message to encode.
	 * @param key the RSA key to use.
	 * @param bt the block type to use, i.e. either 0x01 (for signing) or 0x02
	 *          (for encryption).
	 *
	 * @return the padded byte buffer.
	 */
	function _encodePkcs1_v1_5(m, key, bt) {
	  var eb = forge$f.util.createBuffer();

	  // get the length of the modulus in bytes
	  var k = Math.ceil(key.n.bitLength() / 8);

	  /* use PKCS#1 v1.5 padding */
	  if(m.length > (k - 11)) {
	    var error = new Error('Message is too long for PKCS#1 v1.5 padding.');
	    error.length = m.length;
	    error.max = k - 11;
	    throw error;
	  }

	  /* A block type BT, a padding string PS, and the data D shall be
	    formatted into an octet string EB, the encryption block:

	    EB = 00 || BT || PS || 00 || D

	    The block type BT shall be a single octet indicating the structure of
	    the encryption block. For this version of the document it shall have
	    value 00, 01, or 02. For a private-key operation, the block type
	    shall be 00 or 01. For a public-key operation, it shall be 02.

	    The padding string PS shall consist of k-3-||D|| octets. For block
	    type 00, the octets shall have value 00; for block type 01, they
	    shall have value FF; and for block type 02, they shall be
	    pseudorandomly generated and nonzero. This makes the length of the
	    encryption block EB equal to k. */

	  // build the encryption block
	  eb.putByte(0x00);
	  eb.putByte(bt);

	  // create the padding
	  var padNum = k - 3 - m.length;
	  var padByte;
	  // private key op
	  if(bt === 0x00 || bt === 0x01) {
	    padByte = (bt === 0x00) ? 0x00 : 0xFF;
	    for(var i = 0; i < padNum; ++i) {
	      eb.putByte(padByte);
	    }
	  } else {
	    // public key op
	    // pad with random non-zero values
	    while(padNum > 0) {
	      var numZeros = 0;
	      var padBytes = forge$f.random.getBytes(padNum);
	      for(var i = 0; i < padNum; ++i) {
	        padByte = padBytes.charCodeAt(i);
	        if(padByte === 0) {
	          ++numZeros;
	        } else {
	          eb.putByte(padByte);
	        }
	      }
	      padNum = numZeros;
	    }
	  }

	  // zero followed by message
	  eb.putByte(0x00);
	  eb.putBytes(m);

	  return eb;
	}

	/**
	 * Decodes a message using PKCS#1 v1.5 padding.
	 *
	 * @param em the message to decode.
	 * @param key the RSA key to use.
	 * @param pub true if the key is a public key, false if it is private.
	 * @param ml the message length, if specified.
	 *
	 * @return the decoded bytes.
	 */
	function _decodePkcs1_v1_5(em, key, pub, ml) {
	  // get the length of the modulus in bytes
	  var k = Math.ceil(key.n.bitLength() / 8);

	  /* It is an error if any of the following conditions occurs:

	    1. The encryption block EB cannot be parsed unambiguously.
	    2. The padding string PS consists of fewer than eight octets
	      or is inconsisent with the block type BT.
	    3. The decryption process is a public-key operation and the block
	      type BT is not 00 or 01, or the decryption process is a
	      private-key operation and the block type is not 02.
	   */

	  // parse the encryption block
	  var eb = forge$f.util.createBuffer(em);
	  var first = eb.getByte();
	  var bt = eb.getByte();
	  if(first !== 0x00 ||
	    (pub && bt !== 0x00 && bt !== 0x01) ||
	    (!pub && bt != 0x02) ||
	    (pub && bt === 0x00 && typeof(ml) === 'undefined')) {
	    throw new Error('Encryption block is invalid.');
	  }

	  var padNum = 0;
	  if(bt === 0x00) {
	    // check all padding bytes for 0x00
	    padNum = k - 3 - ml;
	    for(var i = 0; i < padNum; ++i) {
	      if(eb.getByte() !== 0x00) {
	        throw new Error('Encryption block is invalid.');
	      }
	    }
	  } else if(bt === 0x01) {
	    // find the first byte that isn't 0xFF, should be after all padding
	    padNum = 0;
	    while(eb.length() > 1) {
	      if(eb.getByte() !== 0xFF) {
	        --eb.read;
	        break;
	      }
	      ++padNum;
	    }
	  } else if(bt === 0x02) {
	    // look for 0x00 byte
	    padNum = 0;
	    while(eb.length() > 1) {
	      if(eb.getByte() === 0x00) {
	        --eb.read;
	        break;
	      }
	      ++padNum;
	    }
	  }

	  // zero must be 0x00 and padNum must be (k - 3 - message length)
	  var zero = eb.getByte();
	  if(zero !== 0x00 || padNum !== (k - 3 - eb.length())) {
	    throw new Error('Encryption block is invalid.');
	  }

	  return eb.getBytes();
	}

	/**
	 * Runs the key-generation algorithm asynchronously, either in the background
	 * via Web Workers, or using the main thread and setImmediate.
	 *
	 * @param state the key-pair generation state.
	 * @param [options] options for key-pair generation:
	 *          workerScript the worker script URL.
	 *          workers the number of web workers (if supported) to use,
	 *            (default: 2, -1 to use estimated cores minus one).
	 *          workLoad the size of the work load, ie: number of possible prime
	 *            numbers for each web worker to check per work assignment,
	 *            (default: 100).
	 * @param callback(err, keypair) called once the operation completes.
	 */
	function _generateKeyPair(state, options, callback) {
	  if(typeof options === 'function') {
	    callback = options;
	    options = {};
	  }
	  options = options || {};

	  var opts = {
	    algorithm: {
	      name: options.algorithm || 'PRIMEINC',
	      options: {
	        workers: options.workers || 2,
	        workLoad: options.workLoad || 100,
	        workerScript: options.workerScript
	      }
	    }
	  };
	  if('prng' in options) {
	    opts.prng = options.prng;
	  }

	  generate();

	  function generate() {
	    // find p and then q (done in series to simplify)
	    getPrime(state.pBits, function(err, num) {
	      if(err) {
	        return callback(err);
	      }
	      state.p = num;
	      if(state.q !== null) {
	        return finish(err, state.q);
	      }
	      getPrime(state.qBits, finish);
	    });
	  }

	  function getPrime(bits, callback) {
	    forge$f.prime.generateProbablePrime(bits, opts, callback);
	  }

	  function finish(err, num) {
	    if(err) {
	      return callback(err);
	    }

	    // set q
	    state.q = num;

	    // ensure p is larger than q (swap them if not)
	    if(state.p.compareTo(state.q) < 0) {
	      var tmp = state.p;
	      state.p = state.q;
	      state.q = tmp;
	    }

	    // ensure p is coprime with e
	    if(state.p.subtract(BigInteger$1.ONE).gcd(state.e)
	      .compareTo(BigInteger$1.ONE) !== 0) {
	      state.p = null;
	      generate();
	      return;
	    }

	    // ensure q is coprime with e
	    if(state.q.subtract(BigInteger$1.ONE).gcd(state.e)
	      .compareTo(BigInteger$1.ONE) !== 0) {
	      state.q = null;
	      getPrime(state.qBits, finish);
	      return;
	    }

	    // compute phi: (p - 1)(q - 1) (Euler's totient function)
	    state.p1 = state.p.subtract(BigInteger$1.ONE);
	    state.q1 = state.q.subtract(BigInteger$1.ONE);
	    state.phi = state.p1.multiply(state.q1);

	    // ensure e and phi are coprime
	    if(state.phi.gcd(state.e).compareTo(BigInteger$1.ONE) !== 0) {
	      // phi and e aren't coprime, so generate a new p and q
	      state.p = state.q = null;
	      generate();
	      return;
	    }

	    // create n, ensure n is has the right number of bits
	    state.n = state.p.multiply(state.q);
	    if(state.n.bitLength() !== state.bits) {
	      // failed, get new q
	      state.q = null;
	      getPrime(state.qBits, finish);
	      return;
	    }

	    // set keys
	    var d = state.e.modInverse(state.phi);
	    state.keys = {
	      privateKey: pki$3.rsa.setPrivateKey(
	        state.n, state.e, d, state.p, state.q,
	        d.mod(state.p1), d.mod(state.q1),
	        state.q.modInverse(state.p)),
	      publicKey: pki$3.rsa.setPublicKey(state.n, state.e)
	    };

	    callback(null, state.keys);
	  }
	}

	/**
	 * Converts a positive BigInteger into 2's-complement big-endian bytes.
	 *
	 * @param b the big integer to convert.
	 *
	 * @return the bytes.
	 */
	function _bnToBytes(b) {
	  // prepend 0x00 if first byte >= 0x80
	  var hex = b.toString(16);
	  if(hex[0] >= '8') {
	    hex = '00' + hex;
	  }
	  var bytes = forge$f.util.hexToBytes(hex);

	  // ensure integer is minimally-encoded
	  if(bytes.length > 1 &&
	    // leading 0x00 for positive integer
	    ((bytes.charCodeAt(0) === 0 &&
	    (bytes.charCodeAt(1) & 0x80) === 0) ||
	    // leading 0xFF for negative integer
	    (bytes.charCodeAt(0) === 0xFF &&
	    (bytes.charCodeAt(1) & 0x80) === 0x80))) {
	    return bytes.substr(1);
	  }
	  return bytes;
	}

	/**
	 * Returns the required number of Miller-Rabin tests to generate a
	 * prime with an error probability of (1/2)^80.
	 *
	 * See Handbook of Applied Cryptography Chapter 4, Table 4.4.
	 *
	 * @param bits the bit size.
	 *
	 * @return the required number of iterations.
	 */
	function _getMillerRabinTests(bits) {
	  if(bits <= 100) return 27;
	  if(bits <= 150) return 18;
	  if(bits <= 200) return 15;
	  if(bits <= 250) return 12;
	  if(bits <= 300) return 9;
	  if(bits <= 350) return 8;
	  if(bits <= 400) return 7;
	  if(bits <= 500) return 6;
	  if(bits <= 600) return 5;
	  if(bits <= 800) return 4;
	  if(bits <= 1250) return 3;
	  return 2;
	}

	/**
	 * Performs feature detection on the Node crypto interface.
	 *
	 * @param fn the feature (function) to detect.
	 *
	 * @return true if detected, false if not.
	 */
	function _detectNodeCrypto(fn) {
	  return forge$f.util.isNodejs && typeof _crypto[fn] === 'function';
	}

	/**
	 * Performs feature detection on the SubtleCrypto interface.
	 *
	 * @param fn the feature (function) to detect.
	 *
	 * @return true if detected, false if not.
	 */
	function _detectSubtleCrypto(fn) {
	  return (typeof util$6.globalScope !== 'undefined' &&
	    typeof util$6.globalScope.crypto === 'object' &&
	    typeof util$6.globalScope.crypto.subtle === 'object' &&
	    typeof util$6.globalScope.crypto.subtle[fn] === 'function');
	}

	/**
	 * Performs feature detection on the deprecated Microsoft Internet Explorer
	 * outdated SubtleCrypto interface. This function should only be used after
	 * checking for the modern, standard SubtleCrypto interface.
	 *
	 * @param fn the feature (function) to detect.
	 *
	 * @return true if detected, false if not.
	 */
	function _detectSubtleMsCrypto(fn) {
	  return (typeof util$6.globalScope !== 'undefined' &&
	    typeof util$6.globalScope.msCrypto === 'object' &&
	    typeof util$6.globalScope.msCrypto.subtle === 'object' &&
	    typeof util$6.globalScope.msCrypto.subtle[fn] === 'function');
	}

	function _intToUint8Array(x) {
	  var bytes = forge$f.util.hexToBytes(x.toString(16));
	  var buffer = new Uint8Array(bytes.length);
	  for(var i = 0; i < bytes.length; ++i) {
	    buffer[i] = bytes.charCodeAt(i);
	  }
	  return buffer;
	}

	/**
	 * Password-based encryption functions.
	 *
	 * @author Dave Longley
	 * @author Stefan Siegl <stesie@brokenpipe.de>
	 *
	 * Copyright (c) 2010-2013 Digital Bazaar, Inc.
	 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
	 *
	 * An EncryptedPrivateKeyInfo:
	 *
	 * EncryptedPrivateKeyInfo ::= SEQUENCE {
	 *   encryptionAlgorithm  EncryptionAlgorithmIdentifier,
	 *   encryptedData        EncryptedData }
	 *
	 * EncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
	 *
	 * EncryptedData ::= OCTET STRING
	 */

	var forge$e = forge$z;












	if(typeof BigInteger === 'undefined') {
	  var BigInteger = forge$e.jsbn.BigInteger;
	}

	// shortcut for asn.1 API
	var asn1$3 = forge$e.asn1;

	/* Password-based encryption implementation. */
	var pki$2 = forge$e.pki = forge$e.pki || {};
	pki$2.pbe = forge$e.pbe = forge$e.pbe || {};
	var oids$1 = pki$2.oids;

	// validator for an EncryptedPrivateKeyInfo structure
	// Note: Currently only works w/algorithm params
	var encryptedPrivateKeyValidator = {
	  name: 'EncryptedPrivateKeyInfo',
	  tagClass: asn1$3.Class.UNIVERSAL,
	  type: asn1$3.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'EncryptedPrivateKeyInfo.encryptionAlgorithm',
	    tagClass: asn1$3.Class.UNIVERSAL,
	    type: asn1$3.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'AlgorithmIdentifier.algorithm',
	      tagClass: asn1$3.Class.UNIVERSAL,
	      type: asn1$3.Type.OID,
	      constructed: false,
	      capture: 'encryptionOid'
	    }, {
	      name: 'AlgorithmIdentifier.parameters',
	      tagClass: asn1$3.Class.UNIVERSAL,
	      type: asn1$3.Type.SEQUENCE,
	      constructed: true,
	      captureAsn1: 'encryptionParams'
	    }]
	  }, {
	    // encryptedData
	    name: 'EncryptedPrivateKeyInfo.encryptedData',
	    tagClass: asn1$3.Class.UNIVERSAL,
	    type: asn1$3.Type.OCTETSTRING,
	    constructed: false,
	    capture: 'encryptedData'
	  }]
	};

	// validator for a PBES2Algorithms structure
	// Note: Currently only works w/PBKDF2 + AES encryption schemes
	var PBES2AlgorithmsValidator = {
	  name: 'PBES2Algorithms',
	  tagClass: asn1$3.Class.UNIVERSAL,
	  type: asn1$3.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'PBES2Algorithms.keyDerivationFunc',
	    tagClass: asn1$3.Class.UNIVERSAL,
	    type: asn1$3.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'PBES2Algorithms.keyDerivationFunc.oid',
	      tagClass: asn1$3.Class.UNIVERSAL,
	      type: asn1$3.Type.OID,
	      constructed: false,
	      capture: 'kdfOid'
	    }, {
	      name: 'PBES2Algorithms.params',
	      tagClass: asn1$3.Class.UNIVERSAL,
	      type: asn1$3.Type.SEQUENCE,
	      constructed: true,
	      value: [{
	        name: 'PBES2Algorithms.params.salt',
	        tagClass: asn1$3.Class.UNIVERSAL,
	        type: asn1$3.Type.OCTETSTRING,
	        constructed: false,
	        capture: 'kdfSalt'
	      }, {
	        name: 'PBES2Algorithms.params.iterationCount',
	        tagClass: asn1$3.Class.UNIVERSAL,
	        type: asn1$3.Type.INTEGER,
	        constructed: false,
	        capture: 'kdfIterationCount'
	      }, {
	        name: 'PBES2Algorithms.params.keyLength',
	        tagClass: asn1$3.Class.UNIVERSAL,
	        type: asn1$3.Type.INTEGER,
	        constructed: false,
	        optional: true,
	        capture: 'keyLength'
	      }, {
	        // prf
	        name: 'PBES2Algorithms.params.prf',
	        tagClass: asn1$3.Class.UNIVERSAL,
	        type: asn1$3.Type.SEQUENCE,
	        constructed: true,
	        optional: true,
	        value: [{
	          name: 'PBES2Algorithms.params.prf.algorithm',
	          tagClass: asn1$3.Class.UNIVERSAL,
	          type: asn1$3.Type.OID,
	          constructed: false,
	          capture: 'prfOid'
	        }]
	      }]
	    }]
	  }, {
	    name: 'PBES2Algorithms.encryptionScheme',
	    tagClass: asn1$3.Class.UNIVERSAL,
	    type: asn1$3.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'PBES2Algorithms.encryptionScheme.oid',
	      tagClass: asn1$3.Class.UNIVERSAL,
	      type: asn1$3.Type.OID,
	      constructed: false,
	      capture: 'encOid'
	    }, {
	      name: 'PBES2Algorithms.encryptionScheme.iv',
	      tagClass: asn1$3.Class.UNIVERSAL,
	      type: asn1$3.Type.OCTETSTRING,
	      constructed: false,
	      capture: 'encIv'
	    }]
	  }]
	};

	var pkcs12PbeParamsValidator = {
	  name: 'pkcs-12PbeParams',
	  tagClass: asn1$3.Class.UNIVERSAL,
	  type: asn1$3.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'pkcs-12PbeParams.salt',
	    tagClass: asn1$3.Class.UNIVERSAL,
	    type: asn1$3.Type.OCTETSTRING,
	    constructed: false,
	    capture: 'salt'
	  }, {
	    name: 'pkcs-12PbeParams.iterations',
	    tagClass: asn1$3.Class.UNIVERSAL,
	    type: asn1$3.Type.INTEGER,
	    constructed: false,
	    capture: 'iterations'
	  }]
	};

	/**
	 * Encrypts a ASN.1 PrivateKeyInfo object, producing an EncryptedPrivateKeyInfo.
	 *
	 * PBES2Algorithms ALGORITHM-IDENTIFIER ::=
	 *   { {PBES2-params IDENTIFIED BY id-PBES2}, ...}
	 *
	 * id-PBES2 OBJECT IDENTIFIER ::= {pkcs-5 13}
	 *
	 * PBES2-params ::= SEQUENCE {
	 *   keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},
	 *   encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}
	 * }
	 *
	 * PBES2-KDFs ALGORITHM-IDENTIFIER ::=
	 *   { {PBKDF2-params IDENTIFIED BY id-PBKDF2}, ... }
	 *
	 * PBES2-Encs ALGORITHM-IDENTIFIER ::= { ... }
	 *
	 * PBKDF2-params ::= SEQUENCE {
	 *   salt CHOICE {
	 *     specified OCTET STRING,
	 *     otherSource AlgorithmIdentifier {{PBKDF2-SaltSources}}
	 *   },
	 *   iterationCount INTEGER (1..MAX),
	 *   keyLength INTEGER (1..MAX) OPTIONAL,
	 *   prf AlgorithmIdentifier {{PBKDF2-PRFs}} DEFAULT algid-hmacWithSHA1
	 * }
	 *
	 * @param obj the ASN.1 PrivateKeyInfo object.
	 * @param password the password to encrypt with.
	 * @param options:
	 *          algorithm the encryption algorithm to use
	 *            ('aes128', 'aes192', 'aes256', '3des'), defaults to 'aes128'.
	 *          count the iteration count to use.
	 *          saltSize the salt size to use.
	 *          prfAlgorithm the PRF message digest algorithm to use
	 *            ('sha1', 'sha224', 'sha256', 'sha384', 'sha512')
	 *
	 * @return the ASN.1 EncryptedPrivateKeyInfo.
	 */
	pki$2.encryptPrivateKeyInfo = function(obj, password, options) {
	  // set default options
	  options = options || {};
	  options.saltSize = options.saltSize || 8;
	  options.count = options.count || 2048;
	  options.algorithm = options.algorithm || 'aes128';
	  options.prfAlgorithm = options.prfAlgorithm || 'sha1';

	  // generate PBE params
	  var salt = forge$e.random.getBytesSync(options.saltSize);
	  var count = options.count;
	  var countBytes = asn1$3.integerToDer(count);
	  var dkLen;
	  var encryptionAlgorithm;
	  var encryptedData;
	  if(options.algorithm.indexOf('aes') === 0 || options.algorithm === 'des') {
	    // do PBES2
	    var ivLen, encOid, cipherFn;
	    switch(options.algorithm) {
	    case 'aes128':
	      dkLen = 16;
	      ivLen = 16;
	      encOid = oids$1['aes128-CBC'];
	      cipherFn = forge$e.aes.createEncryptionCipher;
	      break;
	    case 'aes192':
	      dkLen = 24;
	      ivLen = 16;
	      encOid = oids$1['aes192-CBC'];
	      cipherFn = forge$e.aes.createEncryptionCipher;
	      break;
	    case 'aes256':
	      dkLen = 32;
	      ivLen = 16;
	      encOid = oids$1['aes256-CBC'];
	      cipherFn = forge$e.aes.createEncryptionCipher;
	      break;
	    case 'des':
	      dkLen = 8;
	      ivLen = 8;
	      encOid = oids$1['desCBC'];
	      cipherFn = forge$e.des.createEncryptionCipher;
	      break;
	    default:
	      var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');
	      error.algorithm = options.algorithm;
	      throw error;
	    }

	    // get PRF message digest
	    var prfAlgorithm = 'hmacWith' + options.prfAlgorithm.toUpperCase();
	    var md = prfAlgorithmToMessageDigest(prfAlgorithm);

	    // encrypt private key using pbe SHA-1 and AES/DES
	    var dk = forge$e.pkcs5.pbkdf2(password, salt, count, dkLen, md);
	    var iv = forge$e.random.getBytesSync(ivLen);
	    var cipher = cipherFn(dk);
	    cipher.start(iv);
	    cipher.update(asn1$3.toDer(obj));
	    cipher.finish();
	    encryptedData = cipher.output.getBytes();

	    // get PBKDF2-params
	    var params = createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm);

	    encryptionAlgorithm = asn1$3.create(
	      asn1$3.Class.UNIVERSAL, asn1$3.Type.SEQUENCE, true, [
	      asn1$3.create(asn1$3.Class.UNIVERSAL, asn1$3.Type.OID, false,
	        asn1$3.oidToDer(oids$1['pkcs5PBES2']).getBytes()),
	      asn1$3.create(asn1$3.Class.UNIVERSAL, asn1$3.Type.SEQUENCE, true, [
	        // keyDerivationFunc
	        asn1$3.create(asn1$3.Class.UNIVERSAL, asn1$3.Type.SEQUENCE, true, [
	          asn1$3.create(asn1$3.Class.UNIVERSAL, asn1$3.Type.OID, false,
	            asn1$3.oidToDer(oids$1['pkcs5PBKDF2']).getBytes()),
	          // PBKDF2-params
	          params
	        ]),
	        // encryptionScheme
	        asn1$3.create(asn1$3.Class.UNIVERSAL, asn1$3.Type.SEQUENCE, true, [
	          asn1$3.create(asn1$3.Class.UNIVERSAL, asn1$3.Type.OID, false,
	            asn1$3.oidToDer(encOid).getBytes()),
	          // iv
	          asn1$3.create(
	            asn1$3.Class.UNIVERSAL, asn1$3.Type.OCTETSTRING, false, iv)
	        ])
	      ])
	    ]);
	  } else if(options.algorithm === '3des') {
	    // Do PKCS12 PBE
	    dkLen = 24;

	    var saltBytes = new forge$e.util.ByteBuffer(salt);
	    var dk = pki$2.pbe.generatePkcs12Key(password, saltBytes, 1, count, dkLen);
	    var iv = pki$2.pbe.generatePkcs12Key(password, saltBytes, 2, count, dkLen);
	    var cipher = forge$e.des.createEncryptionCipher(dk);
	    cipher.start(iv);
	    cipher.update(asn1$3.toDer(obj));
	    cipher.finish();
	    encryptedData = cipher.output.getBytes();

	    encryptionAlgorithm = asn1$3.create(
	      asn1$3.Class.UNIVERSAL, asn1$3.Type.SEQUENCE, true, [
	      asn1$3.create(asn1$3.Class.UNIVERSAL, asn1$3.Type.OID, false,
	        asn1$3.oidToDer(oids$1['pbeWithSHAAnd3-KeyTripleDES-CBC']).getBytes()),
	      // pkcs-12PbeParams
	      asn1$3.create(asn1$3.Class.UNIVERSAL, asn1$3.Type.SEQUENCE, true, [
	        // salt
	        asn1$3.create(asn1$3.Class.UNIVERSAL, asn1$3.Type.OCTETSTRING, false, salt),
	        // iteration count
	        asn1$3.create(asn1$3.Class.UNIVERSAL, asn1$3.Type.INTEGER, false,
	          countBytes.getBytes())
	      ])
	    ]);
	  } else {
	    var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');
	    error.algorithm = options.algorithm;
	    throw error;
	  }

	  // EncryptedPrivateKeyInfo
	  var rval = asn1$3.create(asn1$3.Class.UNIVERSAL, asn1$3.Type.SEQUENCE, true, [
	    // encryptionAlgorithm
	    encryptionAlgorithm,
	    // encryptedData
	    asn1$3.create(
	      asn1$3.Class.UNIVERSAL, asn1$3.Type.OCTETSTRING, false, encryptedData)
	  ]);
	  return rval;
	};

	/**
	 * Decrypts a ASN.1 PrivateKeyInfo object.
	 *
	 * @param obj the ASN.1 EncryptedPrivateKeyInfo object.
	 * @param password the password to decrypt with.
	 *
	 * @return the ASN.1 PrivateKeyInfo on success, null on failure.
	 */
	pki$2.decryptPrivateKeyInfo = function(obj, password) {
	  var rval = null;

	  // get PBE params
	  var capture = {};
	  var errors = [];
	  if(!asn1$3.validate(obj, encryptedPrivateKeyValidator, capture, errors)) {
	    var error = new Error('Cannot read encrypted private key. ' +
	      'ASN.1 object is not a supported EncryptedPrivateKeyInfo.');
	    error.errors = errors;
	    throw error;
	  }

	  // get cipher
	  var oid = asn1$3.derToOid(capture.encryptionOid);
	  var cipher = pki$2.pbe.getCipher(oid, capture.encryptionParams, password);

	  // get encrypted data
	  var encrypted = forge$e.util.createBuffer(capture.encryptedData);

	  cipher.update(encrypted);
	  if(cipher.finish()) {
	    rval = asn1$3.fromDer(cipher.output);
	  }

	  return rval;
	};

	/**
	 * Converts a EncryptedPrivateKeyInfo to PEM format.
	 *
	 * @param epki the EncryptedPrivateKeyInfo.
	 * @param maxline the maximum characters per line, defaults to 64.
	 *
	 * @return the PEM-formatted encrypted private key.
	 */
	pki$2.encryptedPrivateKeyToPem = function(epki, maxline) {
	  // convert to DER, then PEM-encode
	  var msg = {
	    type: 'ENCRYPTED PRIVATE KEY',
	    body: asn1$3.toDer(epki).getBytes()
	  };
	  return forge$e.pem.encode(msg, {maxline: maxline});
	};

	/**
	 * Converts a PEM-encoded EncryptedPrivateKeyInfo to ASN.1 format. Decryption
	 * is not performed.
	 *
	 * @param pem the EncryptedPrivateKeyInfo in PEM-format.
	 *
	 * @return the ASN.1 EncryptedPrivateKeyInfo.
	 */
	pki$2.encryptedPrivateKeyFromPem = function(pem) {
	  var msg = forge$e.pem.decode(pem)[0];

	  if(msg.type !== 'ENCRYPTED PRIVATE KEY') {
	    var error = new Error('Could not convert encrypted private key from PEM; ' +
	      'PEM header type is "ENCRYPTED PRIVATE KEY".');
	    error.headerType = msg.type;
	    throw error;
	  }
	  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
	    throw new Error('Could not convert encrypted private key from PEM; ' +
	      'PEM is encrypted.');
	  }

	  // convert DER to ASN.1 object
	  return asn1$3.fromDer(msg.body);
	};

	/**
	 * Encrypts an RSA private key. By default, the key will be wrapped in
	 * a PrivateKeyInfo and encrypted to produce a PKCS#8 EncryptedPrivateKeyInfo.
	 * This is the standard, preferred way to encrypt a private key.
	 *
	 * To produce a non-standard PEM-encrypted private key that uses encapsulated
	 * headers to indicate the encryption algorithm (old-style non-PKCS#8 OpenSSL
	 * private key encryption), set the 'legacy' option to true. Note: Using this
	 * option will cause the iteration count to be forced to 1.
	 *
	 * Note: The 'des' algorithm is supported, but it is not considered to be
	 * secure because it only uses a single 56-bit key. If possible, it is highly
	 * recommended that a different algorithm be used.
	 *
	 * @param rsaKey the RSA key to encrypt.
	 * @param password the password to use.
	 * @param options:
	 *          algorithm: the encryption algorithm to use
	 *            ('aes128', 'aes192', 'aes256', '3des', 'des').
	 *          count: the iteration count to use.
	 *          saltSize: the salt size to use.
	 *          legacy: output an old non-PKCS#8 PEM-encrypted+encapsulated
	 *            headers (DEK-Info) private key.
	 *
	 * @return the PEM-encoded ASN.1 EncryptedPrivateKeyInfo.
	 */
	pki$2.encryptRsaPrivateKey = function(rsaKey, password, options) {
	  // standard PKCS#8
	  options = options || {};
	  if(!options.legacy) {
	    // encrypt PrivateKeyInfo
	    var rval = pki$2.wrapRsaPrivateKey(pki$2.privateKeyToAsn1(rsaKey));
	    rval = pki$2.encryptPrivateKeyInfo(rval, password, options);
	    return pki$2.encryptedPrivateKeyToPem(rval);
	  }

	  // legacy non-PKCS#8
	  var algorithm;
	  var iv;
	  var dkLen;
	  var cipherFn;
	  switch(options.algorithm) {
	  case 'aes128':
	    algorithm = 'AES-128-CBC';
	    dkLen = 16;
	    iv = forge$e.random.getBytesSync(16);
	    cipherFn = forge$e.aes.createEncryptionCipher;
	    break;
	  case 'aes192':
	    algorithm = 'AES-192-CBC';
	    dkLen = 24;
	    iv = forge$e.random.getBytesSync(16);
	    cipherFn = forge$e.aes.createEncryptionCipher;
	    break;
	  case 'aes256':
	    algorithm = 'AES-256-CBC';
	    dkLen = 32;
	    iv = forge$e.random.getBytesSync(16);
	    cipherFn = forge$e.aes.createEncryptionCipher;
	    break;
	  case '3des':
	    algorithm = 'DES-EDE3-CBC';
	    dkLen = 24;
	    iv = forge$e.random.getBytesSync(8);
	    cipherFn = forge$e.des.createEncryptionCipher;
	    break;
	  case 'des':
	    algorithm = 'DES-CBC';
	    dkLen = 8;
	    iv = forge$e.random.getBytesSync(8);
	    cipherFn = forge$e.des.createEncryptionCipher;
	    break;
	  default:
	    var error = new Error('Could not encrypt RSA private key; unsupported ' +
	      'encryption algorithm "' + options.algorithm + '".');
	    error.algorithm = options.algorithm;
	    throw error;
	  }

	  // encrypt private key using OpenSSL legacy key derivation
	  var dk = forge$e.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);
	  var cipher = cipherFn(dk);
	  cipher.start(iv);
	  cipher.update(asn1$3.toDer(pki$2.privateKeyToAsn1(rsaKey)));
	  cipher.finish();

	  var msg = {
	    type: 'RSA PRIVATE KEY',
	    procType: {
	      version: '4',
	      type: 'ENCRYPTED'
	    },
	    dekInfo: {
	      algorithm: algorithm,
	      parameters: forge$e.util.bytesToHex(iv).toUpperCase()
	    },
	    body: cipher.output.getBytes()
	  };
	  return forge$e.pem.encode(msg);
	};

	/**
	 * Decrypts an RSA private key.
	 *
	 * @param pem the PEM-formatted EncryptedPrivateKeyInfo to decrypt.
	 * @param password the password to use.
	 *
	 * @return the RSA key on success, null on failure.
	 */
	pki$2.decryptRsaPrivateKey = function(pem, password) {
	  var rval = null;

	  var msg = forge$e.pem.decode(pem)[0];

	  if(msg.type !== 'ENCRYPTED PRIVATE KEY' &&
	    msg.type !== 'PRIVATE KEY' &&
	    msg.type !== 'RSA PRIVATE KEY') {
	    var error = new Error('Could not convert private key from PEM; PEM header type ' +
	      'is not "ENCRYPTED PRIVATE KEY", "PRIVATE KEY", or "RSA PRIVATE KEY".');
	    error.headerType = error;
	    throw error;
	  }

	  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
	    var dkLen;
	    var cipherFn;
	    switch(msg.dekInfo.algorithm) {
	    case 'DES-CBC':
	      dkLen = 8;
	      cipherFn = forge$e.des.createDecryptionCipher;
	      break;
	    case 'DES-EDE3-CBC':
	      dkLen = 24;
	      cipherFn = forge$e.des.createDecryptionCipher;
	      break;
	    case 'AES-128-CBC':
	      dkLen = 16;
	      cipherFn = forge$e.aes.createDecryptionCipher;
	      break;
	    case 'AES-192-CBC':
	      dkLen = 24;
	      cipherFn = forge$e.aes.createDecryptionCipher;
	      break;
	    case 'AES-256-CBC':
	      dkLen = 32;
	      cipherFn = forge$e.aes.createDecryptionCipher;
	      break;
	    case 'RC2-40-CBC':
	      dkLen = 5;
	      cipherFn = function(key) {
	        return forge$e.rc2.createDecryptionCipher(key, 40);
	      };
	      break;
	    case 'RC2-64-CBC':
	      dkLen = 8;
	      cipherFn = function(key) {
	        return forge$e.rc2.createDecryptionCipher(key, 64);
	      };
	      break;
	    case 'RC2-128-CBC':
	      dkLen = 16;
	      cipherFn = function(key) {
	        return forge$e.rc2.createDecryptionCipher(key, 128);
	      };
	      break;
	    default:
	      var error = new Error('Could not decrypt private key; unsupported ' +
	        'encryption algorithm "' + msg.dekInfo.algorithm + '".');
	      error.algorithm = msg.dekInfo.algorithm;
	      throw error;
	    }

	    // use OpenSSL legacy key derivation
	    var iv = forge$e.util.hexToBytes(msg.dekInfo.parameters);
	    var dk = forge$e.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);
	    var cipher = cipherFn(dk);
	    cipher.start(iv);
	    cipher.update(forge$e.util.createBuffer(msg.body));
	    if(cipher.finish()) {
	      rval = cipher.output.getBytes();
	    } else {
	      return rval;
	    }
	  } else {
	    rval = msg.body;
	  }

	  if(msg.type === 'ENCRYPTED PRIVATE KEY') {
	    rval = pki$2.decryptPrivateKeyInfo(asn1$3.fromDer(rval), password);
	  } else {
	    // decryption already performed above
	    rval = asn1$3.fromDer(rval);
	  }

	  if(rval !== null) {
	    rval = pki$2.privateKeyFromAsn1(rval);
	  }

	  return rval;
	};

	/**
	 * Derives a PKCS#12 key.
	 *
	 * @param password the password to derive the key material from, null or
	 *          undefined for none.
	 * @param salt the salt, as a ByteBuffer, to use.
	 * @param id the PKCS#12 ID byte (1 = key material, 2 = IV, 3 = MAC).
	 * @param iter the iteration count.
	 * @param n the number of bytes to derive from the password.
	 * @param md the message digest to use, defaults to SHA-1.
	 *
	 * @return a ByteBuffer with the bytes derived from the password.
	 */
	pki$2.pbe.generatePkcs12Key = function(password, salt, id, iter, n, md) {
	  var j, l;

	  if(typeof md === 'undefined' || md === null) {
	    if(!('sha1' in forge$e.md)) {
	      throw new Error('"sha1" hash algorithm unavailable.');
	    }
	    md = forge$e.md.sha1.create();
	  }

	  var u = md.digestLength;
	  var v = md.blockLength;
	  var result = new forge$e.util.ByteBuffer();

	  /* Convert password to Unicode byte buffer + trailing 0-byte. */
	  var passBuf = new forge$e.util.ByteBuffer();
	  if(password !== null && password !== undefined) {
	    for(l = 0; l < password.length; l++) {
	      passBuf.putInt16(password.charCodeAt(l));
	    }
	    passBuf.putInt16(0);
	  }

	  /* Length of salt and password in BYTES. */
	  var p = passBuf.length();
	  var s = salt.length();

	  /* 1. Construct a string, D (the "diversifier"), by concatenating
	        v copies of ID. */
	  var D = new forge$e.util.ByteBuffer();
	  D.fillWithByte(id, v);

	  /* 2. Concatenate copies of the salt together to create a string S of length
	        v * ceil(s / v) bytes (the final copy of the salt may be trunacted
	        to create S).
	        Note that if the salt is the empty string, then so is S. */
	  var Slen = v * Math.ceil(s / v);
	  var S = new forge$e.util.ByteBuffer();
	  for(l = 0; l < Slen; l++) {
	    S.putByte(salt.at(l % s));
	  }

	  /* 3. Concatenate copies of the password together to create a string P of
	        length v * ceil(p / v) bytes (the final copy of the password may be
	        truncated to create P).
	        Note that if the password is the empty string, then so is P. */
	  var Plen = v * Math.ceil(p / v);
	  var P = new forge$e.util.ByteBuffer();
	  for(l = 0; l < Plen; l++) {
	    P.putByte(passBuf.at(l % p));
	  }

	  /* 4. Set I=S||P to be the concatenation of S and P. */
	  var I = S;
	  I.putBuffer(P);

	  /* 5. Set c=ceil(n / u). */
	  var c = Math.ceil(n / u);

	  /* 6. For i=1, 2, ..., c, do the following: */
	  for(var i = 1; i <= c; i++) {
	    /* a) Set Ai=H^r(D||I). (l.e. the rth hash of D||I, H(H(H(...H(D||I)))) */
	    var buf = new forge$e.util.ByteBuffer();
	    buf.putBytes(D.bytes());
	    buf.putBytes(I.bytes());
	    for(var round = 0; round < iter; round++) {
	      md.start();
	      md.update(buf.getBytes());
	      buf = md.digest();
	    }

	    /* b) Concatenate copies of Ai to create a string B of length v bytes (the
	          final copy of Ai may be truncated to create B). */
	    var B = new forge$e.util.ByteBuffer();
	    for(l = 0; l < v; l++) {
	      B.putByte(buf.at(l % u));
	    }

	    /* c) Treating I as a concatenation I0, I1, ..., Ik-1 of v-byte blocks,
	          where k=ceil(s / v) + ceil(p / v), modify I by setting
	          Ij=(Ij+B+1) mod 2v for each j.  */
	    var k = Math.ceil(s / v) + Math.ceil(p / v);
	    var Inew = new forge$e.util.ByteBuffer();
	    for(j = 0; j < k; j++) {
	      var chunk = new forge$e.util.ByteBuffer(I.getBytes(v));
	      var x = 0x1ff;
	      for(l = B.length() - 1; l >= 0; l--) {
	        x = x >> 8;
	        x += B.at(l) + chunk.at(l);
	        chunk.setAt(l, x & 0xff);
	      }
	      Inew.putBuffer(chunk);
	    }
	    I = Inew;

	    /* Add Ai to A. */
	    result.putBuffer(buf);
	  }

	  result.truncate(result.length() - n);
	  return result;
	};

	/**
	 * Get new Forge cipher object instance.
	 *
	 * @param oid the OID (in string notation).
	 * @param params the ASN.1 params object.
	 * @param password the password to decrypt with.
	 *
	 * @return new cipher object instance.
	 */
	pki$2.pbe.getCipher = function(oid, params, password) {
	  switch(oid) {
	  case pki$2.oids['pkcs5PBES2']:
	    return pki$2.pbe.getCipherForPBES2(oid, params, password);

	  case pki$2.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:
	  case pki$2.oids['pbewithSHAAnd40BitRC2-CBC']:
	    return pki$2.pbe.getCipherForPKCS12PBE(oid, params, password);

	  default:
	    var error = new Error('Cannot read encrypted PBE data block. Unsupported OID.');
	    error.oid = oid;
	    error.supportedOids = [
	      'pkcs5PBES2',
	      'pbeWithSHAAnd3-KeyTripleDES-CBC',
	      'pbewithSHAAnd40BitRC2-CBC'
	    ];
	    throw error;
	  }
	};

	/**
	 * Get new Forge cipher object instance according to PBES2 params block.
	 *
	 * The returned cipher instance is already started using the IV
	 * from PBES2 parameter block.
	 *
	 * @param oid the PKCS#5 PBKDF2 OID (in string notation).
	 * @param params the ASN.1 PBES2-params object.
	 * @param password the password to decrypt with.
	 *
	 * @return new cipher object instance.
	 */
	pki$2.pbe.getCipherForPBES2 = function(oid, params, password) {
	  // get PBE params
	  var capture = {};
	  var errors = [];
	  if(!asn1$3.validate(params, PBES2AlgorithmsValidator, capture, errors)) {
	    var error = new Error('Cannot read password-based-encryption algorithm ' +
	      'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');
	    error.errors = errors;
	    throw error;
	  }

	  // check oids
	  oid = asn1$3.derToOid(capture.kdfOid);
	  if(oid !== pki$2.oids['pkcs5PBKDF2']) {
	    var error = new Error('Cannot read encrypted private key. ' +
	      'Unsupported key derivation function OID.');
	    error.oid = oid;
	    error.supportedOids = ['pkcs5PBKDF2'];
	    throw error;
	  }
	  oid = asn1$3.derToOid(capture.encOid);
	  if(oid !== pki$2.oids['aes128-CBC'] &&
	    oid !== pki$2.oids['aes192-CBC'] &&
	    oid !== pki$2.oids['aes256-CBC'] &&
	    oid !== pki$2.oids['des-EDE3-CBC'] &&
	    oid !== pki$2.oids['desCBC']) {
	    var error = new Error('Cannot read encrypted private key. ' +
	      'Unsupported encryption scheme OID.');
	    error.oid = oid;
	    error.supportedOids = [
	      'aes128-CBC', 'aes192-CBC', 'aes256-CBC', 'des-EDE3-CBC', 'desCBC'];
	    throw error;
	  }

	  // set PBE params
	  var salt = capture.kdfSalt;
	  var count = forge$e.util.createBuffer(capture.kdfIterationCount);
	  count = count.getInt(count.length() << 3);
	  var dkLen;
	  var cipherFn;
	  switch(pki$2.oids[oid]) {
	  case 'aes128-CBC':
	    dkLen = 16;
	    cipherFn = forge$e.aes.createDecryptionCipher;
	    break;
	  case 'aes192-CBC':
	    dkLen = 24;
	    cipherFn = forge$e.aes.createDecryptionCipher;
	    break;
	  case 'aes256-CBC':
	    dkLen = 32;
	    cipherFn = forge$e.aes.createDecryptionCipher;
	    break;
	  case 'des-EDE3-CBC':
	    dkLen = 24;
	    cipherFn = forge$e.des.createDecryptionCipher;
	    break;
	  case 'desCBC':
	    dkLen = 8;
	    cipherFn = forge$e.des.createDecryptionCipher;
	    break;
	  }

	  // get PRF message digest
	  var md = prfOidToMessageDigest(capture.prfOid);

	  // decrypt private key using pbe with chosen PRF and AES/DES
	  var dk = forge$e.pkcs5.pbkdf2(password, salt, count, dkLen, md);
	  var iv = capture.encIv;
	  var cipher = cipherFn(dk);
	  cipher.start(iv);

	  return cipher;
	};

	/**
	 * Get new Forge cipher object instance for PKCS#12 PBE.
	 *
	 * The returned cipher instance is already started using the key & IV
	 * derived from the provided password and PKCS#12 PBE salt.
	 *
	 * @param oid The PKCS#12 PBE OID (in string notation).
	 * @param params The ASN.1 PKCS#12 PBE-params object.
	 * @param password The password to decrypt with.
	 *
	 * @return the new cipher object instance.
	 */
	pki$2.pbe.getCipherForPKCS12PBE = function(oid, params, password) {
	  // get PBE params
	  var capture = {};
	  var errors = [];
	  if(!asn1$3.validate(params, pkcs12PbeParamsValidator, capture, errors)) {
	    var error = new Error('Cannot read password-based-encryption algorithm ' +
	      'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');
	    error.errors = errors;
	    throw error;
	  }

	  var salt = forge$e.util.createBuffer(capture.salt);
	  var count = forge$e.util.createBuffer(capture.iterations);
	  count = count.getInt(count.length() << 3);

	  var dkLen, dIvLen, cipherFn;
	  switch(oid) {
	    case pki$2.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:
	      dkLen = 24;
	      dIvLen = 8;
	      cipherFn = forge$e.des.startDecrypting;
	      break;

	    case pki$2.oids['pbewithSHAAnd40BitRC2-CBC']:
	      dkLen = 5;
	      dIvLen = 8;
	      cipherFn = function(key, iv) {
	        var cipher = forge$e.rc2.createDecryptionCipher(key, 40);
	        cipher.start(iv, null);
	        return cipher;
	      };
	      break;

	    default:
	      var error = new Error('Cannot read PKCS #12 PBE data block. Unsupported OID.');
	      error.oid = oid;
	      throw error;
	  }

	  // get PRF message digest
	  var md = prfOidToMessageDigest(capture.prfOid);
	  var key = pki$2.pbe.generatePkcs12Key(password, salt, 1, count, dkLen, md);
	  md.start();
	  var iv = pki$2.pbe.generatePkcs12Key(password, salt, 2, count, dIvLen, md);

	  return cipherFn(key, iv);
	};

	/**
	 * OpenSSL's legacy key derivation function.
	 *
	 * See: http://www.openssl.org/docs/crypto/EVP_BytesToKey.html
	 *
	 * @param password the password to derive the key from.
	 * @param salt the salt to use, null for none.
	 * @param dkLen the number of bytes needed for the derived key.
	 * @param [options] the options to use:
	 *          [md] an optional message digest object to use.
	 */
	pki$2.pbe.opensslDeriveBytes = function(password, salt, dkLen, md) {
	  if(typeof md === 'undefined' || md === null) {
	    if(!('md5' in forge$e.md)) {
	      throw new Error('"md5" hash algorithm unavailable.');
	    }
	    md = forge$e.md.md5.create();
	  }
	  if(salt === null) {
	    salt = '';
	  }
	  var digests = [hash$3(md, password + salt)];
	  for(var length = 16, i = 1; length < dkLen; ++i, length += 16) {
	    digests.push(hash$3(md, digests[i - 1] + password + salt));
	  }
	  return digests.join('').substr(0, dkLen);
	};

	function hash$3(md, bytes) {
	  return md.start().update(bytes).digest().getBytes();
	}

	function prfOidToMessageDigest(prfOid) {
	  // get PRF algorithm, default to SHA-1
	  var prfAlgorithm;
	  if(!prfOid) {
	    prfAlgorithm = 'hmacWithSHA1';
	  } else {
	    prfAlgorithm = pki$2.oids[asn1$3.derToOid(prfOid)];
	    if(!prfAlgorithm) {
	      var error = new Error('Unsupported PRF OID.');
	      error.oid = prfOid;
	      error.supported = [
	        'hmacWithSHA1', 'hmacWithSHA224', 'hmacWithSHA256', 'hmacWithSHA384',
	        'hmacWithSHA512'];
	      throw error;
	    }
	  }
	  return prfAlgorithmToMessageDigest(prfAlgorithm);
	}

	function prfAlgorithmToMessageDigest(prfAlgorithm) {
	  var factory = forge$e.md;
	  switch(prfAlgorithm) {
	  case 'hmacWithSHA224':
	    factory = forge$e.md.sha512;
	  case 'hmacWithSHA1':
	  case 'hmacWithSHA256':
	  case 'hmacWithSHA384':
	  case 'hmacWithSHA512':
	    prfAlgorithm = prfAlgorithm.substr(8).toLowerCase();
	    break;
	  default:
	    var error = new Error('Unsupported PRF algorithm.');
	    error.algorithm = prfAlgorithm;
	    error.supported = [
	      'hmacWithSHA1', 'hmacWithSHA224', 'hmacWithSHA256', 'hmacWithSHA384',
	      'hmacWithSHA512'];
	    throw error;
	  }
	  if(!factory || !(prfAlgorithm in factory)) {
	    throw new Error('Unknown hash algorithm: ' + prfAlgorithm);
	  }
	  return factory[prfAlgorithm].create();
	}

	function createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm) {
	  var params = asn1$3.create(asn1$3.Class.UNIVERSAL, asn1$3.Type.SEQUENCE, true, [
	    // salt
	    asn1$3.create(
	      asn1$3.Class.UNIVERSAL, asn1$3.Type.OCTETSTRING, false, salt),
	    // iteration count
	    asn1$3.create(asn1$3.Class.UNIVERSAL, asn1$3.Type.INTEGER, false,
	      countBytes.getBytes())
	  ]);
	  // when PRF algorithm is not SHA-1 default, add key length and PRF algorithm
	  if(prfAlgorithm !== 'hmacWithSHA1') {
	    params.value.push(
	      // key length
	      asn1$3.create(asn1$3.Class.UNIVERSAL, asn1$3.Type.INTEGER, false,
	        forge$e.util.hexToBytes(dkLen.toString(16))),
	      // AlgorithmIdentifier
	      asn1$3.create(asn1$3.Class.UNIVERSAL, asn1$3.Type.SEQUENCE, true, [
	        // algorithm
	        asn1$3.create(asn1$3.Class.UNIVERSAL, asn1$3.Type.OID, false,
	          asn1$3.oidToDer(pki$2.oids[prfAlgorithm]).getBytes()),
	        // parameters (null)
	        asn1$3.create(asn1$3.Class.UNIVERSAL, asn1$3.Type.NULL, false, '')
	      ]));
	  }
	  return params;
	}

	var webcrypto$4 = {};

	/* eslint-env browser */

	// Check native crypto exists and is enabled (In insecure context `self.crypto`
	// exists but `self.crypto.subtle` does not).
	webcrypto$4.get = (win = globalThis) => {
	  const nativeCrypto = win.crypto;

	  if (!nativeCrypto || !nativeCrypto.subtle) {
	    throw Object.assign(
	      new Error(
	        'Missing Web Crypto API. ' +
	        'The most likely cause of this error is that this page is being accessed ' +
	        'from an insecure context (i.e. not HTTPS). For more information and ' +
	        'possible resolutions see ' +
	        'https://github.com/libp2p/js-libp2p-crypto/blob/master/README.md#web-crypto-api'
	      ),
	      { code: 'ERR_MISSING_WEB_CRYPTO' }
	    )
	  }

	  return nativeCrypto
	};

	const { concat: concat$1 } = require$$9;
	const { fromString: fromString$1 } = require$$5$3;

	const webcrypto$3 = webcrypto$4;

	// Based off of code from https://github.com/luke-park/SecureCompatibleEncryptionExamples

	/**
	 *
	 * @param {object} [options]
	 * @param {string} [options.algorithm=AES-GCM]
	 * @param {number} [options.nonceLength=12]
	 * @param {number} [options.keyLength=16]
	 * @param {string} [options.digest=sha256]
	 * @param {number} [options.saltLength=16]
	 * @param {number} [options.iterations=32767]
	 * @returns {*}
	 */
	function create$6 ({
	  algorithm = 'AES-GCM',
	  nonceLength = 12,
	  keyLength = 16,
	  digest = 'SHA-256',
	  saltLength = 16,
	  iterations = 32767
	} = {}) {
	  const crypto = webcrypto$3.get();
	  keyLength *= 8; // Browser crypto uses bits instead of bytes

	  /**
	   * Uses the provided password to derive a pbkdf2 key. The key
	   * will then be used to encrypt the data.
	   *
	   * @param {Uint8Array} data - The data to decrypt
	   * @param {string} password - A plain password
	   * @returns {Promise<Uint8Array>}
	   */
	  async function encrypt (data, password) { // eslint-disable-line require-await
	    const salt = crypto.getRandomValues(new Uint8Array(saltLength));
	    const nonce = crypto.getRandomValues(new Uint8Array(nonceLength));
	    const aesGcm = { name: algorithm, iv: nonce };

	    // Derive a key using PBKDF2.
	    const deriveParams = { name: 'PBKDF2', salt, iterations, hash: { name: digest } };
	    const rawKey = await crypto.subtle.importKey('raw', fromString$1(password), { name: 'PBKDF2' }, false, ['deriveKey', 'deriveBits']);
	    const cryptoKey = await crypto.subtle.deriveKey(deriveParams, rawKey, { name: algorithm, length: keyLength }, true, ['encrypt']);

	    // Encrypt the string.
	    const ciphertext = await crypto.subtle.encrypt(aesGcm, cryptoKey, data);
	    return concat$1([salt, aesGcm.iv, new Uint8Array(ciphertext)])
	  }

	  /**
	   * Uses the provided password to derive a pbkdf2 key. The key
	   * will then be used to decrypt the data. The options used to create
	   * this decryption cipher must be the same as those used to create
	   * the encryption cipher.
	   *
	   * @param {Uint8Array} data - The data to decrypt
	   * @param {string} password - A plain password
	   * @returns {Promise<Uint8Array>}
	   */
	  async function decrypt (data, password) {
	    const salt = data.slice(0, saltLength);
	    const nonce = data.slice(saltLength, saltLength + nonceLength);
	    const ciphertext = data.slice(saltLength + nonceLength);
	    const aesGcm = { name: algorithm, iv: nonce };

	    // Derive the key using PBKDF2.
	    const deriveParams = { name: 'PBKDF2', salt, iterations, hash: { name: digest } };
	    const rawKey = await crypto.subtle.importKey('raw', fromString$1(password), { name: 'PBKDF2' }, false, ['deriveKey', 'deriveBits']);
	    const cryptoKey = await crypto.subtle.deriveKey(deriveParams, rawKey, { name: algorithm, length: keyLength }, true, ['decrypt']);

	    // Decrypt the string.
	    const plaintext = await crypto.subtle.decrypt(aesGcm, cryptoKey, ciphertext);
	    return new Uint8Array(plaintext)
	  }

	  return {
	    encrypt,
	    decrypt
	  }
	}

	var aesGcm_browser = {
	  create: create$6
	};

	const { base64: base64$1 } = require$$4$1;
	const ciphers$2 = aesGcm_browser;

	var importer$2 = {
	  /**
	   * Attempts to decrypt a base64 encoded PrivateKey string
	   * with the given password. The privateKey must have been exported
	   * using the same password and underlying cipher (aes-gcm)
	   *
	   * @param {string} privateKey - A base64 encoded encrypted key
	   * @param {string} password
	   * @returns {Promise<Uint8Array>} The private key protobuf
	   */
	  import: async function (privateKey, password) {
	    const encryptedKey = base64$1.decode(privateKey);
	    const cipher = ciphers$2.create();
	    return await cipher.decrypt(encryptedKey, password)
	  }
	};

	var require$$1$6 = /*@__PURE__*/getAugmentedNamespace(sha2Browser);

	/**
	 * Secure Hash Algorithm with a 1024-bit block size implementation.
	 *
	 * This includes: SHA-512, SHA-384, SHA-512/224, and SHA-512/256. For
	 * SHA-256 (block size 512 bits), see sha256.js.
	 *
	 * See FIPS 180-4 for details.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2014-2015 Digital Bazaar, Inc.
	 */

	var forge$d = forge$z;



	var sha512 = forge$d.sha512 = forge$d.sha512 || {};

	// SHA-512
	forge$d.md.sha512 = forge$d.md.algorithms.sha512 = sha512;

	// SHA-384
	var sha384 = forge$d.sha384 = forge$d.sha512.sha384 = forge$d.sha512.sha384 || {};
	sha384.create = function() {
	  return sha512.create('SHA-384');
	};
	forge$d.md.sha384 = forge$d.md.algorithms.sha384 = sha384;

	// SHA-512/256
	forge$d.sha512.sha256 = forge$d.sha512.sha256 || {
	  create: function() {
	    return sha512.create('SHA-512/256');
	  }
	};
	forge$d.md['sha512/256'] = forge$d.md.algorithms['sha512/256'] =
	  forge$d.sha512.sha256;

	// SHA-512/224
	forge$d.sha512.sha224 = forge$d.sha512.sha224 || {
	  create: function() {
	    return sha512.create('SHA-512/224');
	  }
	};
	forge$d.md['sha512/224'] = forge$d.md.algorithms['sha512/224'] =
	  forge$d.sha512.sha224;

	/**
	 * Creates a SHA-2 message digest object.
	 *
	 * @param algorithm the algorithm to use (SHA-512, SHA-384, SHA-512/224,
	 *          SHA-512/256).
	 *
	 * @return a message digest object.
	 */
	sha512.create = function(algorithm) {
	  // do initialization as necessary
	  if(!_initialized) {
	    _init();
	  }

	  if(typeof algorithm === 'undefined') {
	    algorithm = 'SHA-512';
	  }

	  if(!(algorithm in _states)) {
	    throw new Error('Invalid SHA-512 algorithm: ' + algorithm);
	  }

	  // SHA-512 state contains eight 64-bit integers (each as two 32-bit ints)
	  var _state = _states[algorithm];
	  var _h = null;

	  // input buffer
	  var _input = forge$d.util.createBuffer();

	  // used for 64-bit word storage
	  var _w = new Array(80);
	  for(var wi = 0; wi < 80; ++wi) {
	    _w[wi] = new Array(2);
	  }

	  // determine digest length by algorithm name (default)
	  var digestLength = 64;
	  switch(algorithm) {
	    case 'SHA-384':
	      digestLength = 48;
	      break;
	    case 'SHA-512/256':
	      digestLength = 32;
	      break;
	    case 'SHA-512/224':
	      digestLength = 28;
	      break;
	  }

	  // message digest object
	  var md = {
	    // SHA-512 => sha512
	    algorithm: algorithm.replace('-', '').toLowerCase(),
	    blockLength: 128,
	    digestLength: digestLength,
	    // 56-bit length of message so far (does not including padding)
	    messageLength: 0,
	    // true message length
	    fullMessageLength: null,
	    // size of message length in bytes
	    messageLengthSize: 16
	  };

	  /**
	   * Starts the digest.
	   *
	   * @return this digest object.
	   */
	  md.start = function() {
	    // up to 56-bit message length for convenience
	    md.messageLength = 0;

	    // full message length (set md.messageLength128 for backwards-compatibility)
	    md.fullMessageLength = md.messageLength128 = [];
	    var int32s = md.messageLengthSize / 4;
	    for(var i = 0; i < int32s; ++i) {
	      md.fullMessageLength.push(0);
	    }
	    _input = forge$d.util.createBuffer();
	    _h = new Array(_state.length);
	    for(var i = 0; i < _state.length; ++i) {
	      _h[i] = _state[i].slice(0);
	    }
	    return md;
	  };
	  // start digest automatically for first time
	  md.start();

	  /**
	   * Updates the digest with the given message input. The given input can
	   * treated as raw input (no encoding will be applied) or an encoding of
	   * 'utf8' maybe given to encode the input using UTF-8.
	   *
	   * @param msg the message input to update with.
	   * @param encoding the encoding to use (default: 'raw', other: 'utf8').
	   *
	   * @return this digest object.
	   */
	  md.update = function(msg, encoding) {
	    if(encoding === 'utf8') {
	      msg = forge$d.util.encodeUtf8(msg);
	    }

	    // update message length
	    var len = msg.length;
	    md.messageLength += len;
	    len = [(len / 0x100000000) >>> 0, len >>> 0];
	    for(var i = md.fullMessageLength.length - 1; i >= 0; --i) {
	      md.fullMessageLength[i] += len[1];
	      len[1] = len[0] + ((md.fullMessageLength[i] / 0x100000000) >>> 0);
	      md.fullMessageLength[i] = md.fullMessageLength[i] >>> 0;
	      len[0] = ((len[1] / 0x100000000) >>> 0);
	    }

	    // add bytes to input buffer
	    _input.putBytes(msg);

	    // process bytes
	    _update(_h, _w, _input);

	    // compact input buffer every 2K or if empty
	    if(_input.read > 2048 || _input.length() === 0) {
	      _input.compact();
	    }

	    return md;
	  };

	  /**
	   * Produces the digest.
	   *
	   * @return a byte buffer containing the digest value.
	   */
	  md.digest = function() {
	    /* Note: Here we copy the remaining bytes in the input buffer and
	    add the appropriate SHA-512 padding. Then we do the final update
	    on a copy of the state so that if the user wants to get
	    intermediate digests they can do so. */

	    /* Determine the number of bytes that must be added to the message
	    to ensure its length is congruent to 896 mod 1024. In other words,
	    the data to be digested must be a multiple of 1024 bits (or 128 bytes).
	    This data includes the message, some padding, and the length of the
	    message. Since the length of the message will be encoded as 16 bytes (128
	    bits), that means that the last segment of the data must have 112 bytes
	    (896 bits) of message and padding. Therefore, the length of the message
	    plus the padding must be congruent to 896 mod 1024 because
	    1024 - 128 = 896.

	    In order to fill up the message length it must be filled with
	    padding that begins with 1 bit followed by all 0 bits. Padding
	    must *always* be present, so if the message length is already
	    congruent to 896 mod 1024, then 1024 padding bits must be added. */

	    var finalBlock = forge$d.util.createBuffer();
	    finalBlock.putBytes(_input.bytes());

	    // compute remaining size to be digested (include message length size)
	    var remaining = (
	      md.fullMessageLength[md.fullMessageLength.length - 1] +
	      md.messageLengthSize);

	    // add padding for overflow blockSize - overflow
	    // _padding starts with 1 byte with first bit is set (byte value 128), then
	    // there may be up to (blockSize - 1) other pad bytes
	    var overflow = remaining & (md.blockLength - 1);
	    finalBlock.putBytes(_padding.substr(0, md.blockLength - overflow));

	    // serialize message length in bits in big-endian order; since length
	    // is stored in bytes we multiply by 8 and add carry from next int
	    var next, carry;
	    var bits = md.fullMessageLength[0] * 8;
	    for(var i = 0; i < md.fullMessageLength.length - 1; ++i) {
	      next = md.fullMessageLength[i + 1] * 8;
	      carry = (next / 0x100000000) >>> 0;
	      bits += carry;
	      finalBlock.putInt32(bits >>> 0);
	      bits = next >>> 0;
	    }
	    finalBlock.putInt32(bits);

	    var h = new Array(_h.length);
	    for(var i = 0; i < _h.length; ++i) {
	      h[i] = _h[i].slice(0);
	    }
	    _update(h, _w, finalBlock);
	    var rval = forge$d.util.createBuffer();
	    var hlen;
	    if(algorithm === 'SHA-512') {
	      hlen = h.length;
	    } else if(algorithm === 'SHA-384') {
	      hlen = h.length - 2;
	    } else {
	      hlen = h.length - 4;
	    }
	    for(var i = 0; i < hlen; ++i) {
	      rval.putInt32(h[i][0]);
	      if(i !== hlen - 1 || algorithm !== 'SHA-512/224') {
	        rval.putInt32(h[i][1]);
	      }
	    }
	    return rval;
	  };

	  return md;
	};

	// sha-512 padding bytes not initialized yet
	var _padding = null;
	var _initialized = false;

	// table of constants
	var _k = null;

	// initial hash states
	var _states = null;

	/**
	 * Initializes the constant tables.
	 */
	function _init() {
	  // create padding
	  _padding = String.fromCharCode(128);
	  _padding += forge$d.util.fillString(String.fromCharCode(0x00), 128);

	  // create K table for SHA-512
	  _k = [
	    [0x428a2f98, 0xd728ae22], [0x71374491, 0x23ef65cd],
	    [0xb5c0fbcf, 0xec4d3b2f], [0xe9b5dba5, 0x8189dbbc],
	    [0x3956c25b, 0xf348b538], [0x59f111f1, 0xb605d019],
	    [0x923f82a4, 0xaf194f9b], [0xab1c5ed5, 0xda6d8118],
	    [0xd807aa98, 0xa3030242], [0x12835b01, 0x45706fbe],
	    [0x243185be, 0x4ee4b28c], [0x550c7dc3, 0xd5ffb4e2],
	    [0x72be5d74, 0xf27b896f], [0x80deb1fe, 0x3b1696b1],
	    [0x9bdc06a7, 0x25c71235], [0xc19bf174, 0xcf692694],
	    [0xe49b69c1, 0x9ef14ad2], [0xefbe4786, 0x384f25e3],
	    [0x0fc19dc6, 0x8b8cd5b5], [0x240ca1cc, 0x77ac9c65],
	    [0x2de92c6f, 0x592b0275], [0x4a7484aa, 0x6ea6e483],
	    [0x5cb0a9dc, 0xbd41fbd4], [0x76f988da, 0x831153b5],
	    [0x983e5152, 0xee66dfab], [0xa831c66d, 0x2db43210],
	    [0xb00327c8, 0x98fb213f], [0xbf597fc7, 0xbeef0ee4],
	    [0xc6e00bf3, 0x3da88fc2], [0xd5a79147, 0x930aa725],
	    [0x06ca6351, 0xe003826f], [0x14292967, 0x0a0e6e70],
	    [0x27b70a85, 0x46d22ffc], [0x2e1b2138, 0x5c26c926],
	    [0x4d2c6dfc, 0x5ac42aed], [0x53380d13, 0x9d95b3df],
	    [0x650a7354, 0x8baf63de], [0x766a0abb, 0x3c77b2a8],
	    [0x81c2c92e, 0x47edaee6], [0x92722c85, 0x1482353b],
	    [0xa2bfe8a1, 0x4cf10364], [0xa81a664b, 0xbc423001],
	    [0xc24b8b70, 0xd0f89791], [0xc76c51a3, 0x0654be30],
	    [0xd192e819, 0xd6ef5218], [0xd6990624, 0x5565a910],
	    [0xf40e3585, 0x5771202a], [0x106aa070, 0x32bbd1b8],
	    [0x19a4c116, 0xb8d2d0c8], [0x1e376c08, 0x5141ab53],
	    [0x2748774c, 0xdf8eeb99], [0x34b0bcb5, 0xe19b48a8],
	    [0x391c0cb3, 0xc5c95a63], [0x4ed8aa4a, 0xe3418acb],
	    [0x5b9cca4f, 0x7763e373], [0x682e6ff3, 0xd6b2b8a3],
	    [0x748f82ee, 0x5defb2fc], [0x78a5636f, 0x43172f60],
	    [0x84c87814, 0xa1f0ab72], [0x8cc70208, 0x1a6439ec],
	    [0x90befffa, 0x23631e28], [0xa4506ceb, 0xde82bde9],
	    [0xbef9a3f7, 0xb2c67915], [0xc67178f2, 0xe372532b],
	    [0xca273ece, 0xea26619c], [0xd186b8c7, 0x21c0c207],
	    [0xeada7dd6, 0xcde0eb1e], [0xf57d4f7f, 0xee6ed178],
	    [0x06f067aa, 0x72176fba], [0x0a637dc5, 0xa2c898a6],
	    [0x113f9804, 0xbef90dae], [0x1b710b35, 0x131c471b],
	    [0x28db77f5, 0x23047d84], [0x32caab7b, 0x40c72493],
	    [0x3c9ebe0a, 0x15c9bebc], [0x431d67c4, 0x9c100d4c],
	    [0x4cc5d4be, 0xcb3e42b6], [0x597f299c, 0xfc657e2a],
	    [0x5fcb6fab, 0x3ad6faec], [0x6c44198c, 0x4a475817]
	  ];

	  // initial hash states
	  _states = {};
	  _states['SHA-512'] = [
	    [0x6a09e667, 0xf3bcc908],
	    [0xbb67ae85, 0x84caa73b],
	    [0x3c6ef372, 0xfe94f82b],
	    [0xa54ff53a, 0x5f1d36f1],
	    [0x510e527f, 0xade682d1],
	    [0x9b05688c, 0x2b3e6c1f],
	    [0x1f83d9ab, 0xfb41bd6b],
	    [0x5be0cd19, 0x137e2179]
	  ];
	  _states['SHA-384'] = [
	    [0xcbbb9d5d, 0xc1059ed8],
	    [0x629a292a, 0x367cd507],
	    [0x9159015a, 0x3070dd17],
	    [0x152fecd8, 0xf70e5939],
	    [0x67332667, 0xffc00b31],
	    [0x8eb44a87, 0x68581511],
	    [0xdb0c2e0d, 0x64f98fa7],
	    [0x47b5481d, 0xbefa4fa4]
	  ];
	  _states['SHA-512/256'] = [
	    [0x22312194, 0xFC2BF72C],
	    [0x9F555FA3, 0xC84C64C2],
	    [0x2393B86B, 0x6F53B151],
	    [0x96387719, 0x5940EABD],
	    [0x96283EE2, 0xA88EFFE3],
	    [0xBE5E1E25, 0x53863992],
	    [0x2B0199FC, 0x2C85B8AA],
	    [0x0EB72DDC, 0x81C52CA2]
	  ];
	  _states['SHA-512/224'] = [
	    [0x8C3D37C8, 0x19544DA2],
	    [0x73E19966, 0x89DCD4D6],
	    [0x1DFAB7AE, 0x32FF9C82],
	    [0x679DD514, 0x582F9FCF],
	    [0x0F6D2B69, 0x7BD44DA8],
	    [0x77E36F73, 0x04C48942],
	    [0x3F9D85A8, 0x6A1D36C8],
	    [0x1112E6AD, 0x91D692A1]
	  ];

	  // now initialized
	  _initialized = true;
	}

	/**
	 * Updates a SHA-512 state with the given byte buffer.
	 *
	 * @param s the SHA-512 state to update.
	 * @param w the array to use to store words.
	 * @param bytes the byte buffer to update with.
	 */
	function _update(s, w, bytes) {
	  // consume 512 bit (128 byte) chunks
	  var t1_hi, t1_lo;
	  var t2_hi, t2_lo;
	  var s0_hi, s0_lo;
	  var s1_hi, s1_lo;
	  var ch_hi, ch_lo;
	  var maj_hi, maj_lo;
	  var a_hi, a_lo;
	  var b_hi, b_lo;
	  var c_hi, c_lo;
	  var d_hi, d_lo;
	  var e_hi, e_lo;
	  var f_hi, f_lo;
	  var g_hi, g_lo;
	  var h_hi, h_lo;
	  var i, hi, lo, w2, w7, w15, w16;
	  var len = bytes.length();
	  while(len >= 128) {
	    // the w array will be populated with sixteen 64-bit big-endian words
	    // and then extended into 64 64-bit words according to SHA-512
	    for(i = 0; i < 16; ++i) {
	      w[i][0] = bytes.getInt32() >>> 0;
	      w[i][1] = bytes.getInt32() >>> 0;
	    }
	    for(; i < 80; ++i) {
	      // for word 2 words ago: ROTR 19(x) ^ ROTR 61(x) ^ SHR 6(x)
	      w2 = w[i - 2];
	      hi = w2[0];
	      lo = w2[1];

	      // high bits
	      t1_hi = (
	        ((hi >>> 19) | (lo << 13)) ^ // ROTR 19
	        ((lo >>> 29) | (hi << 3)) ^ // ROTR 61/(swap + ROTR 29)
	        (hi >>> 6)) >>> 0; // SHR 6
	      // low bits
	      t1_lo = (
	        ((hi << 13) | (lo >>> 19)) ^ // ROTR 19
	        ((lo << 3) | (hi >>> 29)) ^ // ROTR 61/(swap + ROTR 29)
	        ((hi << 26) | (lo >>> 6))) >>> 0; // SHR 6

	      // for word 15 words ago: ROTR 1(x) ^ ROTR 8(x) ^ SHR 7(x)
	      w15 = w[i - 15];
	      hi = w15[0];
	      lo = w15[1];

	      // high bits
	      t2_hi = (
	        ((hi >>> 1) | (lo << 31)) ^ // ROTR 1
	        ((hi >>> 8) | (lo << 24)) ^ // ROTR 8
	        (hi >>> 7)) >>> 0; // SHR 7
	      // low bits
	      t2_lo = (
	        ((hi << 31) | (lo >>> 1)) ^ // ROTR 1
	        ((hi << 24) | (lo >>> 8)) ^ // ROTR 8
	        ((hi << 25) | (lo >>> 7))) >>> 0; // SHR 7

	      // sum(t1, word 7 ago, t2, word 16 ago) modulo 2^64 (carry lo overflow)
	      w7 = w[i - 7];
	      w16 = w[i - 16];
	      lo = (t1_lo + w7[1] + t2_lo + w16[1]);
	      w[i][0] = (t1_hi + w7[0] + t2_hi + w16[0] +
	        ((lo / 0x100000000) >>> 0)) >>> 0;
	      w[i][1] = lo >>> 0;
	    }

	    // initialize hash value for this chunk
	    a_hi = s[0][0];
	    a_lo = s[0][1];
	    b_hi = s[1][0];
	    b_lo = s[1][1];
	    c_hi = s[2][0];
	    c_lo = s[2][1];
	    d_hi = s[3][0];
	    d_lo = s[3][1];
	    e_hi = s[4][0];
	    e_lo = s[4][1];
	    f_hi = s[5][0];
	    f_lo = s[5][1];
	    g_hi = s[6][0];
	    g_lo = s[6][1];
	    h_hi = s[7][0];
	    h_lo = s[7][1];

	    // round function
	    for(i = 0; i < 80; ++i) {
	      // Sum1(e) = ROTR 14(e) ^ ROTR 18(e) ^ ROTR 41(e)
	      s1_hi = (
	        ((e_hi >>> 14) | (e_lo << 18)) ^ // ROTR 14
	        ((e_hi >>> 18) | (e_lo << 14)) ^ // ROTR 18
	        ((e_lo >>> 9) | (e_hi << 23))) >>> 0; // ROTR 41/(swap + ROTR 9)
	      s1_lo = (
	        ((e_hi << 18) | (e_lo >>> 14)) ^ // ROTR 14
	        ((e_hi << 14) | (e_lo >>> 18)) ^ // ROTR 18
	        ((e_lo << 23) | (e_hi >>> 9))) >>> 0; // ROTR 41/(swap + ROTR 9)

	      // Ch(e, f, g) (optimized the same way as SHA-1)
	      ch_hi = (g_hi ^ (e_hi & (f_hi ^ g_hi))) >>> 0;
	      ch_lo = (g_lo ^ (e_lo & (f_lo ^ g_lo))) >>> 0;

	      // Sum0(a) = ROTR 28(a) ^ ROTR 34(a) ^ ROTR 39(a)
	      s0_hi = (
	        ((a_hi >>> 28) | (a_lo << 4)) ^ // ROTR 28
	        ((a_lo >>> 2) | (a_hi << 30)) ^ // ROTR 34/(swap + ROTR 2)
	        ((a_lo >>> 7) | (a_hi << 25))) >>> 0; // ROTR 39/(swap + ROTR 7)
	      s0_lo = (
	        ((a_hi << 4) | (a_lo >>> 28)) ^ // ROTR 28
	        ((a_lo << 30) | (a_hi >>> 2)) ^ // ROTR 34/(swap + ROTR 2)
	        ((a_lo << 25) | (a_hi >>> 7))) >>> 0; // ROTR 39/(swap + ROTR 7)

	      // Maj(a, b, c) (optimized the same way as SHA-1)
	      maj_hi = ((a_hi & b_hi) | (c_hi & (a_hi ^ b_hi))) >>> 0;
	      maj_lo = ((a_lo & b_lo) | (c_lo & (a_lo ^ b_lo))) >>> 0;

	      // main algorithm
	      // t1 = (h + s1 + ch + _k[i] + _w[i]) modulo 2^64 (carry lo overflow)
	      lo = (h_lo + s1_lo + ch_lo + _k[i][1] + w[i][1]);
	      t1_hi = (h_hi + s1_hi + ch_hi + _k[i][0] + w[i][0] +
	        ((lo / 0x100000000) >>> 0)) >>> 0;
	      t1_lo = lo >>> 0;

	      // t2 = s0 + maj modulo 2^64 (carry lo overflow)
	      lo = s0_lo + maj_lo;
	      t2_hi = (s0_hi + maj_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	      t2_lo = lo >>> 0;

	      h_hi = g_hi;
	      h_lo = g_lo;

	      g_hi = f_hi;
	      g_lo = f_lo;

	      f_hi = e_hi;
	      f_lo = e_lo;

	      // e = (d + t1) modulo 2^64 (carry lo overflow)
	      lo = d_lo + t1_lo;
	      e_hi = (d_hi + t1_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	      e_lo = lo >>> 0;

	      d_hi = c_hi;
	      d_lo = c_lo;

	      c_hi = b_hi;
	      c_lo = b_lo;

	      b_hi = a_hi;
	      b_lo = a_lo;

	      // a = (t1 + t2) modulo 2^64 (carry lo overflow)
	      lo = t1_lo + t2_lo;
	      a_hi = (t1_hi + t2_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	      a_lo = lo >>> 0;
	    }

	    // update hash state (additional modulo 2^64)
	    lo = s[0][1] + a_lo;
	    s[0][0] = (s[0][0] + a_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	    s[0][1] = lo >>> 0;

	    lo = s[1][1] + b_lo;
	    s[1][0] = (s[1][0] + b_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	    s[1][1] = lo >>> 0;

	    lo = s[2][1] + c_lo;
	    s[2][0] = (s[2][0] + c_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	    s[2][1] = lo >>> 0;

	    lo = s[3][1] + d_lo;
	    s[3][0] = (s[3][0] + d_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	    s[3][1] = lo >>> 0;

	    lo = s[4][1] + e_lo;
	    s[4][0] = (s[4][0] + e_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	    s[4][1] = lo >>> 0;

	    lo = s[5][1] + f_lo;
	    s[5][0] = (s[5][0] + f_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	    s[5][1] = lo >>> 0;

	    lo = s[6][1] + g_lo;
	    s[6][0] = (s[6][0] + g_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	    s[6][1] = lo >>> 0;

	    lo = s[7][1] + h_lo;
	    s[7][0] = (s[7][0] + h_hi + ((lo / 0x100000000) >>> 0)) >>> 0;
	    s[7][1] = lo >>> 0;

	    len -= 128;
	  }
	}

	var rsaBrowser = {};

	// limit of Crypto.getRandomValues()
	// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
	const MAX_BYTES$1 = 65536;

	/**
	 * @param {number} size
	 */
	function randomBytes$5(size) {
	  const bytes = new Uint8Array(size);
	  let generated = 0;

	  if (size > 0) {
	    // getRandomValues fails on IE if size == 0
	    if (size > MAX_BYTES$1) {
	      while (generated < size) {
	        if (generated + MAX_BYTES$1 > size) {
	          crypto.getRandomValues(
	            bytes.subarray(generated, generated + (size - generated))
	          );
	          generated += size - generated;
	        } else {
	          crypto.getRandomValues(
	            bytes.subarray(generated, generated + MAX_BYTES$1)
	          );
	          generated += MAX_BYTES$1;
	        }
	      }
	    } else {
	      crypto.getRandomValues(bytes);
	    }
	  }

	  return bytes
	}

	var random_browser = randomBytes$5;

	const randomBytes$4 = random_browser;
	const errcode$w = errCode$q;

	var randomBytes_1 = function (length) {
	  if (isNaN(length) || length <= 0) {
	    throw errcode$w(new Error('random bytes length must be a Number bigger than 0'), 'ERR_INVALID_LENGTH')
	  }
	  return randomBytes$4(length)
	};

	var rsaUtils = {};

	var util$5 = {};

	(function (exports) {



	const forge = forge$z;
	const { fromString: uint8ArrayFromString } = require$$5$3;
	const { toString: uint8ArrayToString } = require$$8;
	const { concat: uint8ArrayConcat } = require$$9;

	exports.bigIntegerToUintBase64url = (num, len) => {
	  // Call `.abs()` to convert to unsigned
	  let buf = Uint8Array.from(num.abs().toByteArray()); // toByteArray converts to big endian

	  // toByteArray() gives us back a signed array, which will include a leading 0
	  // byte if the most significant bit of the number is 1:
	  // https://docs.microsoft.com/en-us/windows/win32/seccertenroll/about-integer
	  // Our number will always be positive so we should remove the leading padding.
	  buf = buf[0] === 0 ? buf.slice(1) : buf;

	  if (len != null) {
	    if (buf.length > len) throw new Error('byte array longer than desired length')
	    buf = uint8ArrayConcat([new Uint8Array(len - buf.length), buf]);
	  }

	  return uint8ArrayToString(buf, 'base64url')
	};

	// Convert a base64url encoded string to a BigInteger
	exports.base64urlToBigInteger = str => {
	  const buf = exports.base64urlToBuffer(str);
	  return new forge.jsbn.BigInteger(uint8ArrayToString(buf, 'base16'), 16)
	};

	exports.base64urlToBuffer = (str, len) => {
	  let buf = uint8ArrayFromString(str, 'base64urlpad');

	  if (len != null) {
	    if (buf.length > len) throw new Error('byte array longer than desired length')
	    buf = uint8ArrayConcat([new Uint8Array(len - buf.length), buf]);
	  }

	  return buf
	};
	}(util$5));

	const forge$c = forge$z;
	const { bigIntegerToUintBase64url, base64urlToBigInteger: base64urlToBigInteger$1 } = util$5;
	const { fromString: uint8ArrayFromString$d } = require$$5$3;
	const { toString: uint8ArrayToString$h } = require$$8;

	// Convert a PKCS#1 in ASN1 DER format to a JWK key
	rsaUtils.pkcs1ToJwk = function (bytes) {
	  const asn1 = forge$c.asn1.fromDer(uint8ArrayToString$h(bytes, 'ascii'));
	  const privateKey = forge$c.pki.privateKeyFromAsn1(asn1);

	  // https://tools.ietf.org/html/rfc7518#section-6.3.1
	  return {
	    kty: 'RSA',
	    n: bigIntegerToUintBase64url(privateKey.n),
	    e: bigIntegerToUintBase64url(privateKey.e),
	    d: bigIntegerToUintBase64url(privateKey.d),
	    p: bigIntegerToUintBase64url(privateKey.p),
	    q: bigIntegerToUintBase64url(privateKey.q),
	    dp: bigIntegerToUintBase64url(privateKey.dP),
	    dq: bigIntegerToUintBase64url(privateKey.dQ),
	    qi: bigIntegerToUintBase64url(privateKey.qInv),
	    alg: 'RS256',
	    kid: '2011-04-29'
	  }
	};

	// Convert a JWK key into PKCS#1 in ASN1 DER format
	rsaUtils.jwkToPkcs1 = function (jwk) {
	  const asn1 = forge$c.pki.privateKeyToAsn1({
	    n: base64urlToBigInteger$1(jwk.n),
	    e: base64urlToBigInteger$1(jwk.e),
	    d: base64urlToBigInteger$1(jwk.d),
	    p: base64urlToBigInteger$1(jwk.p),
	    q: base64urlToBigInteger$1(jwk.q),
	    dP: base64urlToBigInteger$1(jwk.dp),
	    dQ: base64urlToBigInteger$1(jwk.dq),
	    qInv: base64urlToBigInteger$1(jwk.qi)
	  });

	  return uint8ArrayFromString$d(forge$c.asn1.toDer(asn1).getBytes(), 'ascii')
	};

	// Convert a PKCIX in ASN1 DER format to a JWK key
	rsaUtils.pkixToJwk = function (bytes) {
	  const asn1 = forge$c.asn1.fromDer(uint8ArrayToString$h(bytes, 'ascii'));
	  const publicKey = forge$c.pki.publicKeyFromAsn1(asn1);

	  return {
	    kty: 'RSA',
	    n: bigIntegerToUintBase64url(publicKey.n),
	    e: bigIntegerToUintBase64url(publicKey.e),
	    alg: 'RS256',
	    kid: '2011-04-29'
	  }
	};

	// Convert a JWK key to PKCIX in ASN1 DER format
	rsaUtils.jwkToPkix = function (jwk) {
	  const asn1 = forge$c.pki.publicKeyToAsn1({
	    n: base64urlToBigInteger$1(jwk.n),
	    e: base64urlToBigInteger$1(jwk.e)
	  });

	  return uint8ArrayFromString$d(forge$c.asn1.toDer(asn1).getBytes(), 'ascii')
	};

	const forge$b = forge$z;
	const { base64urlToBigInteger } = util$5;

	function convert (key, types) {
	  return types.map(t => base64urlToBigInteger(key[t]))
	}

	function jwk2priv$1 (key) {
	  return forge$b.pki.setRsaPrivateKey(...convert(key, ['n', 'e', 'd', 'p', 'q', 'dp', 'dq', 'qi']))
	}

	function jwk2pub$1 (key) {
	  return forge$b.pki.setRsaPublicKey(...convert(key, ['n', 'e']))
	}

	var jwk2pem = {
	  jwk2pub: jwk2pub$1,
	  jwk2priv: jwk2priv$1
	};

	const webcrypto$2 = webcrypto$4;
	const randomBytes$3 = randomBytes_1;
	const { toString: uint8ArrayToString$g } = require$$8;
	const { fromString: uint8ArrayFromString$c } = require$$5$3;

	rsaBrowser.utils = rsaUtils;

	rsaBrowser.generateKey = async function (bits) {
	  const pair = await webcrypto$2.get().subtle.generateKey(
	    {
	      name: 'RSASSA-PKCS1-v1_5',
	      modulusLength: bits,
	      publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
	      hash: { name: 'SHA-256' }
	    },
	    true,
	    ['sign', 'verify']
	  );

	  const keys = await exportKey(pair);

	  return {
	    privateKey: keys[0],
	    publicKey: keys[1]
	  }
	};

	// Takes a jwk key
	rsaBrowser.unmarshalPrivateKey = async function (key) {
	  const privateKey = await webcrypto$2.get().subtle.importKey(
	    'jwk',
	    key,
	    {
	      name: 'RSASSA-PKCS1-v1_5',
	      hash: { name: 'SHA-256' }
	    },
	    true,
	    ['sign']
	  );

	  const pair = [
	    privateKey,
	    await derivePublicFromPrivate(key)
	  ];

	  const keys = await exportKey({
	    privateKey: pair[0],
	    publicKey: pair[1]
	  });

	  return {
	    privateKey: keys[0],
	    publicKey: keys[1]
	  }
	};

	rsaBrowser.getRandomValues = randomBytes$3;

	rsaBrowser.hashAndSign = async function (key, msg) {
	  const privateKey = await webcrypto$2.get().subtle.importKey(
	    'jwk',
	    key,
	    {
	      name: 'RSASSA-PKCS1-v1_5',
	      hash: { name: 'SHA-256' }
	    },
	    false,
	    ['sign']
	  );

	  const sig = await webcrypto$2.get().subtle.sign(
	    { name: 'RSASSA-PKCS1-v1_5' },
	    privateKey,
	    Uint8Array.from(msg)
	  );

	  return new Uint8Array(sig, sig.byteOffset, sig.byteLength)
	};

	rsaBrowser.hashAndVerify = async function (key, sig, msg) {
	  const publicKey = await webcrypto$2.get().subtle.importKey(
	    'jwk',
	    key,
	    {
	      name: 'RSASSA-PKCS1-v1_5',
	      hash: { name: 'SHA-256' }
	    },
	    false,
	    ['verify']
	  );

	  return webcrypto$2.get().subtle.verify(
	    { name: 'RSASSA-PKCS1-v1_5' },
	    publicKey,
	    sig,
	    msg
	  )
	};

	function exportKey (pair) {
	  return Promise.all([
	    webcrypto$2.get().subtle.exportKey('jwk', pair.privateKey),
	    webcrypto$2.get().subtle.exportKey('jwk', pair.publicKey)
	  ])
	}

	function derivePublicFromPrivate (jwKey) {
	  return webcrypto$2.get().subtle.importKey(
	    'jwk',
	    {
	      kty: jwKey.kty,
	      n: jwKey.n,
	      e: jwKey.e
	    },
	    {
	      name: 'RSASSA-PKCS1-v1_5',
	      hash: { name: 'SHA-256' }
	    },
	    true,
	    ['verify']
	  )
	}

	/*

	RSA encryption/decryption for the browser with webcrypto workarround
	"bloody dark magic. webcrypto's why."

	Explanation:
	  - Convert JWK to nodeForge
	  - Convert msg Uint8Array to nodeForge buffer: ByteBuffer is a "binary-string backed buffer", so let's make our Uint8Array a binary string
	  - Convert resulting nodeForge buffer to Uint8Array: it returns a binary string, turn that into a Uint8Array

	*/

	const { jwk2pub, jwk2priv } = jwk2pem;

	function convertKey (key, pub, msg, handle) {
	  const fkey = pub ? jwk2pub(key) : jwk2priv(key);
	  const fmsg = uint8ArrayToString$g(Uint8Array.from(msg), 'ascii');
	  const fomsg = handle(fmsg, fkey);
	  return uint8ArrayFromString$c(fomsg, 'ascii')
	}

	rsaBrowser.encrypt = function (key, msg) {
	  return convertKey(key, true, msg, (msg, key) => key.encrypt(msg))
	};

	rsaBrowser.decrypt = function (key, msg) {
	  return convertKey(key, false, msg, (msg, key) => key.decrypt(msg))
	};

	const { base64 } = require$$4$1;
	const ciphers$1 = aesGcm_browser;

	var exporter$4 = {
	  /**
	   * Exports the given PrivateKey as a base64 encoded string.
	   * The PrivateKey is encrypted via a password derived PBKDF2 key
	   * leveraging the aes-gcm cipher algorithm.
	   *
	   * @param {Uint8Array} privateKey - The PrivateKey protobuf
	   * @param {string} password
	   * @returns {Promise<string>} A base64 encoded string
	   */
	  export: async function (privateKey, password) {
	    const cipher = ciphers$1.create();
	    const encryptedKey = await cipher.encrypt(privateKey, password);
	    return base64.encode(encryptedKey)
	  }
	};

	const { sha256: sha256$9 } = require$$1$6;
	const errcode$v = errCode$q;
	const { equals: uint8ArrayEquals$6 } = require$$7$1;
	const { toString: uint8ArrayToString$f } = require$$8;


	const forge$a = forge$z;

	const crypto$9 = rsaBrowser;
	const pbm$1 = keys$3;
	const exporter$3 = exporter$4;

	class RsaPublicKey {
	  constructor (key) {
	    this._key = key;
	  }

	  async verify (data, sig) { // eslint-disable-line require-await
	    return crypto$9.hashAndVerify(this._key, sig, data)
	  }

	  marshal () {
	    return crypto$9.utils.jwkToPkix(this._key)
	  }

	  get bytes () {
	    return pbm$1.PublicKey.encode({
	      Type: pbm$1.KeyType.RSA,
	      Data: this.marshal()
	    }).finish()
	  }

	  encrypt (bytes) {
	    return crypto$9.encrypt(this._key, bytes)
	  }

	  equals (key) {
	    return uint8ArrayEquals$6(this.bytes, key.bytes)
	  }

	  async hash () {
	    const { bytes } = await sha256$9.digest(this.bytes);

	    return bytes
	  }
	}

	class RsaPrivateKey {
	  // key       - Object of the jwk format
	  // publicKey - Uint8Array of the spki format
	  constructor (key, publicKey) {
	    this._key = key;
	    this._publicKey = publicKey;
	  }

	  genSecret () {
	    return crypto$9.getRandomValues(16)
	  }

	  async sign (message) { // eslint-disable-line require-await
	    return crypto$9.hashAndSign(this._key, message)
	  }

	  get public () {
	    if (!this._publicKey) {
	      throw errcode$v(new Error('public key not provided'), 'ERR_PUBKEY_NOT_PROVIDED')
	    }

	    return new RsaPublicKey(this._publicKey)
	  }

	  decrypt (bytes) {
	    return crypto$9.decrypt(this._key, bytes)
	  }

	  marshal () {
	    return crypto$9.utils.jwkToPkcs1(this._key)
	  }

	  get bytes () {
	    return pbm$1.PrivateKey.encode({
	      Type: pbm$1.KeyType.RSA,
	      Data: this.marshal()
	    }).finish()
	  }

	  equals (key) {
	    return uint8ArrayEquals$6(this.bytes, key.bytes)
	  }

	  async hash () {
	    const { bytes } = await sha256$9.digest(this.bytes);

	    return bytes
	  }

	  /**
	   * Gets the ID of the key.
	   *
	   * The key id is the base58 encoding of the SHA-256 multihash of its public key.
	   * The public key is a protobuf encoding containing a type and the DER encoding
	   * of the PKCS SubjectPublicKeyInfo.
	   *
	   * @returns {Promise<string>}
	   */
	  async id () {
	    const hash = await this.public.hash();
	    return uint8ArrayToString$f(hash, 'base58btc')
	  }

	  /**
	   * Exports the key into a password protected PEM format
	   *
	   * @param {string} password - The password to read the encrypted PEM
	   * @param {string} [format=pkcs-8] - The format in which to export as
	   */
	  async export (password, format = 'pkcs-8') { // eslint-disable-line require-await
	    if (format === 'pkcs-8') {
	      const buffer = new forge$a.util.ByteBuffer(this.marshal());
	      const asn1 = forge$a.asn1.fromDer(buffer);
	      const privateKey = forge$a.pki.privateKeyFromAsn1(asn1);

	      const options = {
	        algorithm: 'aes256',
	        count: 10000,
	        saltSize: 128 / 8,
	        prfAlgorithm: 'sha512'
	      };
	      return forge$a.pki.encryptRsaPrivateKey(privateKey, password, options)
	    } else if (format === 'libp2p-key') {
	      return exporter$3.export(this.bytes, password)
	    } else {
	      throw errcode$v(new Error(`export format '${format}' is not supported`), 'ERR_INVALID_EXPORT_FORMAT')
	    }
	  }
	}

	async function unmarshalRsaPrivateKey (bytes) {
	  const jwk = crypto$9.utils.pkcs1ToJwk(bytes);
	  const keys = await crypto$9.unmarshalPrivateKey(jwk);
	  return new RsaPrivateKey(keys.privateKey, keys.publicKey)
	}

	function unmarshalRsaPublicKey (bytes) {
	  const jwk = crypto$9.utils.pkixToJwk(bytes);
	  return new RsaPublicKey(jwk)
	}

	async function fromJwk (jwk) {
	  const keys = await crypto$9.unmarshalPrivateKey(jwk);
	  return new RsaPrivateKey(keys.privateKey, keys.publicKey)
	}

	async function generateKeyPair$2 (bits) {
	  const keys = await crypto$9.generateKey(bits);
	  return new RsaPrivateKey(keys.privateKey, keys.publicKey)
	}

	var rsaClass = {
	  RsaPublicKey,
	  RsaPrivateKey,
	  unmarshalRsaPublicKey,
	  unmarshalRsaPrivateKey,
	  generateKeyPair: generateKeyPair$2,
	  fromJwk
	};

	var require$$13 = /*@__PURE__*/getAugmentedNamespace(identity$3);

	var ed25519 = {};

	var lib$4 = {};

	(function (exports) {
	/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.utils = exports.curve25519 = exports.getSharedSecret = exports.verify = exports.sign = exports.getPublicKey = exports.Signature = exports.Point = exports.RistrettoPoint = exports.ExtendedPoint = exports.CURVE = void 0;
	const crypto_1 = __importDefault(require$$1$7);
	const _0n = BigInt(0);
	const _1n = BigInt(1);
	const _2n = BigInt(2);
	const _255n = BigInt(255);
	const CURVE_ORDER = _2n ** BigInt(252) + BigInt('27742317777372353535851937790883648493');
	const CURVE = {
	    a: BigInt(-1),
	    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),
	    P: _2n ** _255n - BigInt(19),
	    l: CURVE_ORDER,
	    n: CURVE_ORDER,
	    h: BigInt(8),
	    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),
	    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),
	};
	exports.CURVE = CURVE;
	const MAX_256B = _2n ** BigInt(256);
	const SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');
	BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');
	const SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');
	const INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');
	const ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');
	const D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');
	class ExtendedPoint {
	    constructor(x, y, z, t) {
	        this.x = x;
	        this.y = y;
	        this.z = z;
	        this.t = t;
	    }
	    static fromAffine(p) {
	        if (!(p instanceof Point)) {
	            throw new TypeError('ExtendedPoint#fromAffine: expected Point');
	        }
	        if (p.equals(Point.ZERO))
	            return ExtendedPoint.ZERO;
	        return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));
	    }
	    static toAffineBatch(points) {
	        const toInv = invertBatch(points.map((p) => p.z));
	        return points.map((p, i) => p.toAffine(toInv[i]));
	    }
	    static normalizeZ(points) {
	        return this.toAffineBatch(points).map(this.fromAffine);
	    }
	    equals(other) {
	        assertExtPoint(other);
	        const { x: X1, y: Y1, z: Z1 } = this;
	        const { x: X2, y: Y2, z: Z2 } = other;
	        const X1Z2 = mod(X1 * Z2);
	        const X2Z1 = mod(X2 * Z1);
	        const Y1Z2 = mod(Y1 * Z2);
	        const Y2Z1 = mod(Y2 * Z1);
	        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;
	    }
	    negate() {
	        return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));
	    }
	    double() {
	        const { x: X1, y: Y1, z: Z1 } = this;
	        const { a } = CURVE;
	        const A = mod(X1 ** _2n);
	        const B = mod(Y1 ** _2n);
	        const C = mod(_2n * mod(Z1 ** _2n));
	        const D = mod(a * A);
	        const E = mod(mod((X1 + Y1) ** _2n) - A - B);
	        const G = D + B;
	        const F = G - C;
	        const H = D - B;
	        const X3 = mod(E * F);
	        const Y3 = mod(G * H);
	        const T3 = mod(E * H);
	        const Z3 = mod(F * G);
	        return new ExtendedPoint(X3, Y3, Z3, T3);
	    }
	    add(other) {
	        assertExtPoint(other);
	        const { x: X1, y: Y1, z: Z1, t: T1 } = this;
	        const { x: X2, y: Y2, z: Z2, t: T2 } = other;
	        const A = mod((Y1 - X1) * (Y2 + X2));
	        const B = mod((Y1 + X1) * (Y2 - X2));
	        const F = mod(B - A);
	        if (F === _0n)
	            return this.double();
	        const C = mod(Z1 * _2n * T2);
	        const D = mod(T1 * _2n * Z2);
	        const E = D + C;
	        const G = B + A;
	        const H = D - C;
	        const X3 = mod(E * F);
	        const Y3 = mod(G * H);
	        const T3 = mod(E * H);
	        const Z3 = mod(F * G);
	        return new ExtendedPoint(X3, Y3, Z3, T3);
	    }
	    subtract(other) {
	        return this.add(other.negate());
	    }
	    precomputeWindow(W) {
	        const windows = 1 + 256 / W;
	        const points = [];
	        let p = this;
	        let base = p;
	        for (let window = 0; window < windows; window++) {
	            base = p;
	            points.push(base);
	            for (let i = 1; i < 2 ** (W - 1); i++) {
	                base = base.add(p);
	                points.push(base);
	            }
	            p = base.double();
	        }
	        return points;
	    }
	    wNAF(n, affinePoint) {
	        if (!affinePoint && this.equals(ExtendedPoint.BASE))
	            affinePoint = Point.BASE;
	        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;
	        if (256 % W) {
	            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');
	        }
	        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);
	        if (!precomputes) {
	            precomputes = this.precomputeWindow(W);
	            if (affinePoint && W !== 1) {
	                precomputes = ExtendedPoint.normalizeZ(precomputes);
	                pointPrecomputes.set(affinePoint, precomputes);
	            }
	        }
	        let p = ExtendedPoint.ZERO;
	        let f = ExtendedPoint.ZERO;
	        const windows = 1 + 256 / W;
	        const windowSize = 2 ** (W - 1);
	        const mask = BigInt(2 ** W - 1);
	        const maxNumber = 2 ** W;
	        const shiftBy = BigInt(W);
	        for (let window = 0; window < windows; window++) {
	            const offset = window * windowSize;
	            let wbits = Number(n & mask);
	            n >>= shiftBy;
	            if (wbits > windowSize) {
	                wbits -= maxNumber;
	                n += _1n;
	            }
	            if (wbits === 0) {
	                let pr = precomputes[offset];
	                if (window % 2)
	                    pr = pr.negate();
	                f = f.add(pr);
	            }
	            else {
	                let cached = precomputes[offset + Math.abs(wbits) - 1];
	                if (wbits < 0)
	                    cached = cached.negate();
	                p = p.add(cached);
	            }
	        }
	        return ExtendedPoint.normalizeZ([p, f])[0];
	    }
	    multiply(scalar, affinePoint) {
	        return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);
	    }
	    multiplyUnsafe(scalar) {
	        let n = normalizeScalar(scalar, CURVE.l, false);
	        const G = ExtendedPoint.BASE;
	        const P0 = ExtendedPoint.ZERO;
	        if (n === _0n)
	            return P0;
	        if (this.equals(P0) || n === _1n)
	            return this;
	        if (this.equals(G))
	            return this.wNAF(n);
	        let p = P0;
	        let d = this;
	        while (n > _0n) {
	            if (n & _1n)
	                p = p.add(d);
	            d = d.double();
	            n >>= _1n;
	        }
	        return p;
	    }
	    isSmallOrder() {
	        return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);
	    }
	    isTorsionFree() {
	        return this.multiplyUnsafe(CURVE.l).equals(ExtendedPoint.ZERO);
	    }
	    toAffine(invZ = invert(this.z)) {
	        const { x, y, z } = this;
	        const ax = mod(x * invZ);
	        const ay = mod(y * invZ);
	        const zz = mod(z * invZ);
	        if (zz !== _1n)
	            throw new Error('invZ was invalid');
	        return new Point(ax, ay);
	    }
	    fromRistrettoBytes() {
	        legacyRist();
	    }
	    toRistrettoBytes() {
	        legacyRist();
	    }
	    fromRistrettoHash() {
	        legacyRist();
	    }
	}
	exports.ExtendedPoint = ExtendedPoint;
	ExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));
	ExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);
	function assertExtPoint(other) {
	    if (!(other instanceof ExtendedPoint))
	        throw new TypeError('ExtendedPoint expected');
	}
	function assertRstPoint(other) {
	    if (!(other instanceof RistrettoPoint))
	        throw new TypeError('RistrettoPoint expected');
	}
	function legacyRist() {
	    throw new Error('Legacy method: switch to RistrettoPoint');
	}
	class RistrettoPoint {
	    constructor(ep) {
	        this.ep = ep;
	    }
	    static calcElligatorRistrettoMap(r0) {
	        const { d } = CURVE;
	        const r = mod(SQRT_M1 * r0 * r0);
	        const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);
	        let c = BigInt(-1);
	        const D = mod((c - d * r) * mod(r + d));
	        let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);
	        let s_ = mod(s * r0);
	        if (!edIsNegative(s_))
	            s_ = mod(-s_);
	        if (!Ns_D_is_sq)
	            s = s_;
	        if (!Ns_D_is_sq)
	            c = r;
	        const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);
	        const s2 = s * s;
	        const W0 = mod((s + s) * D);
	        const W1 = mod(Nt * SQRT_AD_MINUS_ONE);
	        const W2 = mod(_1n - s2);
	        const W3 = mod(_1n + s2);
	        return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));
	    }
	    static hashToCurve(hex) {
	        hex = ensureBytes(hex, 64);
	        const r1 = bytes255ToNumberLE(hex.slice(0, 32));
	        const R1 = this.calcElligatorRistrettoMap(r1);
	        const r2 = bytes255ToNumberLE(hex.slice(32, 64));
	        const R2 = this.calcElligatorRistrettoMap(r2);
	        return new RistrettoPoint(R1.add(R2));
	    }
	    static fromHex(hex) {
	        hex = ensureBytes(hex, 32);
	        const { a, d } = CURVE;
	        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';
	        const s = bytes255ToNumberLE(hex);
	        if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s))
	            throw new Error(emsg);
	        const s2 = mod(s * s);
	        const u1 = mod(_1n + a * s2);
	        const u2 = mod(_1n - a * s2);
	        const u1_2 = mod(u1 * u1);
	        const u2_2 = mod(u2 * u2);
	        const v = mod(a * d * u1_2 - u2_2);
	        const { isValid, value: I } = invertSqrt(mod(v * u2_2));
	        const Dx = mod(I * u2);
	        const Dy = mod(I * Dx * v);
	        let x = mod((s + s) * Dx);
	        if (edIsNegative(x))
	            x = mod(-x);
	        const y = mod(u1 * Dy);
	        const t = mod(x * y);
	        if (!isValid || edIsNegative(t) || y === _0n)
	            throw new Error(emsg);
	        return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));
	    }
	    toRawBytes() {
	        let { x, y, z, t } = this.ep;
	        const u1 = mod(mod(z + y) * mod(z - y));
	        const u2 = mod(x * y);
	        const { value: invsqrt } = invertSqrt(mod(u1 * u2 ** _2n));
	        const D1 = mod(invsqrt * u1);
	        const D2 = mod(invsqrt * u2);
	        const zInv = mod(D1 * D2 * t);
	        let D;
	        if (edIsNegative(t * zInv)) {
	            let _x = mod(y * SQRT_M1);
	            let _y = mod(x * SQRT_M1);
	            x = _x;
	            y = _y;
	            D = mod(D1 * INVSQRT_A_MINUS_D);
	        }
	        else {
	            D = D2;
	        }
	        if (edIsNegative(x * zInv))
	            y = mod(-y);
	        let s = mod((z - y) * D);
	        if (edIsNegative(s))
	            s = mod(-s);
	        return numberTo32BytesLE(s);
	    }
	    toHex() {
	        return bytesToHex(this.toRawBytes());
	    }
	    toString() {
	        return this.toHex();
	    }
	    equals(other) {
	        assertRstPoint(other);
	        const a = this.ep;
	        const b = other.ep;
	        const one = mod(a.x * b.y) === mod(a.y * b.x);
	        const two = mod(a.y * b.y) === mod(a.x * b.x);
	        return one || two;
	    }
	    add(other) {
	        assertRstPoint(other);
	        return new RistrettoPoint(this.ep.add(other.ep));
	    }
	    subtract(other) {
	        assertRstPoint(other);
	        return new RistrettoPoint(this.ep.subtract(other.ep));
	    }
	    multiply(scalar) {
	        return new RistrettoPoint(this.ep.multiply(scalar));
	    }
	    multiplyUnsafe(scalar) {
	        return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));
	    }
	}
	exports.RistrettoPoint = RistrettoPoint;
	RistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);
	RistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);
	const pointPrecomputes = new WeakMap();
	class Point {
	    constructor(x, y) {
	        this.x = x;
	        this.y = y;
	    }
	    _setWindowSize(windowSize) {
	        this._WINDOW_SIZE = windowSize;
	        pointPrecomputes.delete(this);
	    }
	    static fromHex(hex, strict = true) {
	        const { d, P } = CURVE;
	        hex = ensureBytes(hex, 32);
	        const normed = hex.slice();
	        normed[31] = hex[31] & ~0x80;
	        const y = bytesToNumberLE(normed);
	        if (strict && y >= P)
	            throw new Error('Expected 0 < hex < P');
	        if (!strict && y >= MAX_256B)
	            throw new Error('Expected 0 < hex < 2**256');
	        const y2 = mod(y * y);
	        const u = mod(y2 - _1n);
	        const v = mod(d * y2 + _1n);
	        let { isValid, value: x } = uvRatio(u, v);
	        if (!isValid)
	            throw new Error('Point.fromHex: invalid y coordinate');
	        const isXOdd = (x & _1n) === _1n;
	        const isLastByteOdd = (hex[31] & 0x80) !== 0;
	        if (isLastByteOdd !== isXOdd) {
	            x = mod(-x);
	        }
	        return new Point(x, y);
	    }
	    static async fromPrivateKey(privateKey) {
	        return (await getExtendedPublicKey(privateKey)).point;
	    }
	    toRawBytes() {
	        const bytes = numberTo32BytesLE(this.y);
	        bytes[31] |= this.x & _1n ? 0x80 : 0;
	        return bytes;
	    }
	    toHex() {
	        return bytesToHex(this.toRawBytes());
	    }
	    toX25519() {
	        const { y } = this;
	        const u = mod((_1n + y) * invert(_1n - y));
	        return numberTo32BytesLE(u);
	    }
	    isTorsionFree() {
	        return ExtendedPoint.fromAffine(this).isTorsionFree();
	    }
	    equals(other) {
	        return this.x === other.x && this.y === other.y;
	    }
	    negate() {
	        return new Point(mod(-this.x), this.y);
	    }
	    add(other) {
	        return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();
	    }
	    subtract(other) {
	        return this.add(other.negate());
	    }
	    multiply(scalar) {
	        return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();
	    }
	}
	exports.Point = Point;
	Point.BASE = new Point(CURVE.Gx, CURVE.Gy);
	Point.ZERO = new Point(_0n, _1n);
	class Signature {
	    constructor(r, s) {
	        this.r = r;
	        this.s = s;
	        this.assertValidity();
	    }
	    static fromHex(hex) {
	        const bytes = ensureBytes(hex, 64);
	        const r = Point.fromHex(bytes.slice(0, 32), false);
	        const s = bytesToNumberLE(bytes.slice(32, 64));
	        return new Signature(r, s);
	    }
	    assertValidity() {
	        const { r, s } = this;
	        if (!(r instanceof Point))
	            throw new Error('Expected Point instance');
	        normalizeScalar(s, CURVE.l, false);
	        return this;
	    }
	    toRawBytes() {
	        const u8 = new Uint8Array(64);
	        u8.set(this.r.toRawBytes());
	        u8.set(numberTo32BytesLE(this.s), 32);
	        return u8;
	    }
	    toHex() {
	        return bytesToHex(this.toRawBytes());
	    }
	}
	exports.Signature = Signature;
	function concatBytes(...arrays) {
	    if (!arrays.every((a) => a instanceof Uint8Array))
	        throw new Error('Expected Uint8Array list');
	    if (arrays.length === 1)
	        return arrays[0];
	    const length = arrays.reduce((a, arr) => a + arr.length, 0);
	    const result = new Uint8Array(length);
	    for (let i = 0, pad = 0; i < arrays.length; i++) {
	        const arr = arrays[i];
	        result.set(arr, pad);
	        pad += arr.length;
	    }
	    return result;
	}
	const hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));
	function bytesToHex(uint8a) {
	    if (!(uint8a instanceof Uint8Array))
	        throw new Error('Uint8Array expected');
	    let hex = '';
	    for (let i = 0; i < uint8a.length; i++) {
	        hex += hexes[uint8a[i]];
	    }
	    return hex;
	}
	function hexToBytes(hex) {
	    if (typeof hex !== 'string') {
	        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);
	    }
	    if (hex.length % 2)
	        throw new Error('hexToBytes: received invalid unpadded hex');
	    const array = new Uint8Array(hex.length / 2);
	    for (let i = 0; i < array.length; i++) {
	        const j = i * 2;
	        const hexByte = hex.slice(j, j + 2);
	        const byte = Number.parseInt(hexByte, 16);
	        if (Number.isNaN(byte) || byte < 0)
	            throw new Error('Invalid byte sequence');
	        array[i] = byte;
	    }
	    return array;
	}
	function numberTo32BytesBE(num) {
	    const length = 32;
	    const hex = num.toString(16).padStart(length * 2, '0');
	    return hexToBytes(hex);
	}
	function numberTo32BytesLE(num) {
	    return numberTo32BytesBE(num).reverse();
	}
	function edIsNegative(num) {
	    return (mod(num) & _1n) === _1n;
	}
	function bytesToNumberLE(uint8a) {
	    if (!(uint8a instanceof Uint8Array))
	        throw new Error('Expected Uint8Array');
	    return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));
	}
	function bytes255ToNumberLE(bytes) {
	    return mod(bytesToNumberLE(bytes) & (_2n ** _255n - _1n));
	}
	function mod(a, b = CURVE.P) {
	    const res = a % b;
	    return res >= _0n ? res : b + res;
	}
	function invert(number, modulo = CURVE.P) {
	    if (number === _0n || modulo <= _0n) {
	        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
	    }
	    let a = mod(number, modulo);
	    let b = modulo;
	    let x = _0n, u = _1n;
	    while (a !== _0n) {
	        const q = b / a;
	        const r = b % a;
	        const m = x - u * q;
	        b = a, a = r, x = u, u = m;
	    }
	    const gcd = b;
	    if (gcd !== _1n)
	        throw new Error('invert: does not exist');
	    return mod(x, modulo);
	}
	function invertBatch(nums, p = CURVE.P) {
	    const tmp = new Array(nums.length);
	    const lastMultiplied = nums.reduce((acc, num, i) => {
	        if (num === _0n)
	            return acc;
	        tmp[i] = acc;
	        return mod(acc * num, p);
	    }, _1n);
	    const inverted = invert(lastMultiplied, p);
	    nums.reduceRight((acc, num, i) => {
	        if (num === _0n)
	            return acc;
	        tmp[i] = mod(acc * tmp[i], p);
	        return mod(acc * num, p);
	    }, inverted);
	    return tmp;
	}
	function pow2(x, power) {
	    const { P } = CURVE;
	    let res = x;
	    while (power-- > _0n) {
	        res *= res;
	        res %= P;
	    }
	    return res;
	}
	function pow_2_252_3(x) {
	    const { P } = CURVE;
	    const _5n = BigInt(5);
	    const _10n = BigInt(10);
	    const _20n = BigInt(20);
	    const _40n = BigInt(40);
	    const _80n = BigInt(80);
	    const x2 = (x * x) % P;
	    const b2 = (x2 * x) % P;
	    const b4 = (pow2(b2, _2n) * b2) % P;
	    const b5 = (pow2(b4, _1n) * x) % P;
	    const b10 = (pow2(b5, _5n) * b5) % P;
	    const b20 = (pow2(b10, _10n) * b10) % P;
	    const b40 = (pow2(b20, _20n) * b20) % P;
	    const b80 = (pow2(b40, _40n) * b40) % P;
	    const b160 = (pow2(b80, _80n) * b80) % P;
	    const b240 = (pow2(b160, _80n) * b80) % P;
	    const b250 = (pow2(b240, _10n) * b10) % P;
	    const pow_p_5_8 = (pow2(b250, _2n) * x) % P;
	    return { pow_p_5_8, b2 };
	}
	function uvRatio(u, v) {
	    const v3 = mod(v * v * v);
	    const v7 = mod(v3 * v3 * v);
	    const pow = pow_2_252_3(u * v7).pow_p_5_8;
	    let x = mod(u * v3 * pow);
	    const vx2 = mod(v * x * x);
	    const root1 = x;
	    const root2 = mod(x * SQRT_M1);
	    const useRoot1 = vx2 === u;
	    const useRoot2 = vx2 === mod(-u);
	    const noRoot = vx2 === mod(-u * SQRT_M1);
	    if (useRoot1)
	        x = root1;
	    if (useRoot2 || noRoot)
	        x = root2;
	    if (edIsNegative(x))
	        x = mod(-x);
	    return { isValid: useRoot1 || useRoot2, value: x };
	}
	function invertSqrt(number) {
	    return uvRatio(_1n, number);
	}
	async function sha512ModqLE(...args) {
	    const hash = await exports.utils.sha512(concatBytes(...args));
	    const value = bytesToNumberLE(hash);
	    return mod(value, CURVE.l);
	}
	function equalBytes(b1, b2) {
	    if (b1.length !== b2.length) {
	        return false;
	    }
	    for (let i = 0; i < b1.length; i++) {
	        if (b1[i] !== b2[i]) {
	            return false;
	        }
	    }
	    return true;
	}
	function ensureBytes(hex, expectedLength) {
	    const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);
	    if (typeof expectedLength === 'number' && bytes.length !== expectedLength)
	        throw new Error(`Expected ${expectedLength} bytes`);
	    return bytes;
	}
	function normalizeScalar(num, max, strict = true) {
	    if (!max)
	        throw new TypeError('Specify max value');
	    if (typeof num === 'number' && Number.isSafeInteger(num))
	        num = BigInt(num);
	    if (typeof num === 'bigint' && num < max) {
	        if (strict) {
	            if (_0n < num)
	                return num;
	        }
	        else {
	            if (_0n <= num)
	                return num;
	        }
	    }
	    throw new TypeError('Expected valid scalar: 0 < scalar < max');
	}
	function adjustBytes25519(bytes) {
	    bytes[0] &= 248;
	    bytes[31] &= 127;
	    bytes[31] |= 64;
	    return bytes;
	}
	function decodeScalar25519(n) {
	    return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));
	}
	async function getExtendedPublicKey(key) {
	    key =
	        typeof key === 'bigint' || typeof key === 'number'
	            ? numberTo32BytesBE(normalizeScalar(key, MAX_256B))
	            : ensureBytes(key);
	    if (key.length !== 32)
	        throw new Error(`Expected 32 bytes`);
	    const hashed = await exports.utils.sha512(key);
	    const head = adjustBytes25519(hashed.slice(0, 32));
	    const prefix = hashed.slice(32, 64);
	    const scalar = mod(bytesToNumberLE(head), CURVE.l);
	    const point = Point.BASE.multiply(scalar);
	    const pointBytes = point.toRawBytes();
	    return { head, prefix, scalar, point, pointBytes };
	}
	async function getPublicKey(privateKey) {
	    return (await getExtendedPublicKey(privateKey)).pointBytes;
	}
	exports.getPublicKey = getPublicKey;
	async function sign(message, privateKey) {
	    message = ensureBytes(message);
	    const { prefix, scalar, pointBytes } = await getExtendedPublicKey(privateKey);
	    const r = await sha512ModqLE(prefix, message);
	    const R = Point.BASE.multiply(r);
	    const k = await sha512ModqLE(R.toRawBytes(), pointBytes, message);
	    const s = mod(r + k * scalar, CURVE.l);
	    return new Signature(R, s).toRawBytes();
	}
	exports.sign = sign;
	async function verify(sig, message, publicKey) {
	    message = ensureBytes(message);
	    if (!(publicKey instanceof Point))
	        publicKey = Point.fromHex(publicKey, false);
	    const { r, s } = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);
	    const SB = ExtendedPoint.BASE.multiplyUnsafe(s);
	    const k = await sha512ModqLE(r.toRawBytes(), publicKey.toRawBytes(), message);
	    const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);
	    const RkA = ExtendedPoint.fromAffine(r).add(kA);
	    return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);
	}
	exports.verify = verify;
	async function getSharedSecret(privateKey, publicKey) {
	    const { head } = await getExtendedPublicKey(privateKey);
	    const u = Point.fromHex(publicKey).toX25519();
	    return exports.curve25519.scalarMult(head, u);
	}
	exports.getSharedSecret = getSharedSecret;
	Point.BASE._setWindowSize(8);
	function cswap(swap, x_2, x_3) {
	    const dummy = mod(swap * (x_2 - x_3));
	    x_2 = mod(x_2 - dummy);
	    x_3 = mod(x_3 + dummy);
	    return [x_2, x_3];
	}
	function montgomeryLadder(pointU, scalar) {
	    const { P } = CURVE;
	    const u = normalizeScalar(pointU, P);
	    const k = normalizeScalar(scalar, P);
	    const a24 = BigInt(121665);
	    const x_1 = u;
	    let x_2 = _1n;
	    let z_2 = _0n;
	    let x_3 = u;
	    let z_3 = _1n;
	    let swap = _0n;
	    let sw;
	    for (let t = BigInt(255 - 1); t >= _0n; t--) {
	        const k_t = (k >> t) & _1n;
	        swap ^= k_t;
	        sw = cswap(swap, x_2, x_3);
	        x_2 = sw[0];
	        x_3 = sw[1];
	        sw = cswap(swap, z_2, z_3);
	        z_2 = sw[0];
	        z_3 = sw[1];
	        swap = k_t;
	        const A = x_2 + z_2;
	        const AA = mod(A * A);
	        const B = x_2 - z_2;
	        const BB = mod(B * B);
	        const E = AA - BB;
	        const C = x_3 + z_3;
	        const D = x_3 - z_3;
	        const DA = mod(D * A);
	        const CB = mod(C * B);
	        x_3 = mod((DA + CB) ** _2n);
	        z_3 = mod(x_1 * (DA - CB) ** _2n);
	        x_2 = mod(AA * BB);
	        z_2 = mod(E * (AA + mod(a24 * E)));
	    }
	    sw = cswap(swap, x_2, x_3);
	    x_2 = sw[0];
	    x_3 = sw[1];
	    sw = cswap(swap, z_2, z_3);
	    z_2 = sw[0];
	    z_3 = sw[1];
	    const { pow_p_5_8, b2 } = pow_2_252_3(z_2);
	    const xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);
	    return mod(x_2 * xp2);
	}
	function encodeUCoordinate(u) {
	    return numberTo32BytesLE(mod(u, CURVE.P));
	}
	function decodeUCoordinate(uEnc) {
	    const u = ensureBytes(uEnc, 32);
	    u[31] &= 127;
	    return bytesToNumberLE(u);
	}
	exports.curve25519 = {
	    BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',
	    scalarMult(privateKey, publicKey) {
	        const u = decodeUCoordinate(publicKey);
	        const p = decodeScalar25519(privateKey);
	        const pu = montgomeryLadder(u, p);
	        if (pu === _0n)
	            throw new Error('Invalid private or public key received');
	        return encodeUCoordinate(pu);
	    },
	    scalarMultBase(privateKey) {
	        return exports.curve25519.scalarMult(privateKey, exports.curve25519.BASE_POINT_U);
	    },
	};
	const crypto = {
	    node: crypto_1.default,
	    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,
	};
	exports.utils = {
	    TORSION_SUBGROUP: [
	        '0100000000000000000000000000000000000000000000000000000000000000',
	        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',
	        '0000000000000000000000000000000000000000000000000000000000000080',
	        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',
	        'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',
	        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',
	        '0000000000000000000000000000000000000000000000000000000000000000',
	        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',
	    ],
	    bytesToHex,
	    getExtendedPublicKey,
	    mod,
	    invert,
	    hashToPrivateScalar: (hash) => {
	        hash = ensureBytes(hash);
	        if (hash.length < 40 || hash.length > 1024)
	            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');
	        const num = mod(bytesToNumberLE(hash), CURVE.l);
	        if (num === _0n || num === _1n)
	            throw new Error('Invalid private key');
	        return num;
	    },
	    randomBytes: (bytesLength = 32) => {
	        if (crypto.web) {
	            return crypto.web.getRandomValues(new Uint8Array(bytesLength));
	        }
	        else if (crypto.node) {
	            const { randomBytes } = crypto.node;
	            return new Uint8Array(randomBytes(bytesLength).buffer);
	        }
	        else {
	            throw new Error("The environment doesn't have randomBytes function");
	        }
	    },
	    randomPrivateKey: () => {
	        return exports.utils.randomBytes(32);
	    },
	    sha512: async (message) => {
	        if (crypto.web) {
	            const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);
	            return new Uint8Array(buffer);
	        }
	        else if (crypto.node) {
	            return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());
	        }
	        else {
	            throw new Error("The environment doesn't have sha512 function");
	        }
	    },
	    precompute(windowSize = 8, point = Point.BASE) {
	        const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);
	        cached._setWindowSize(windowSize);
	        cached.multiply(_2n);
	        return cached;
	    },
	};
	}(lib$4));

	(function (exports) {

	const ed = lib$4;

	const PUBLIC_KEY_BYTE_LENGTH = 32;
	const PRIVATE_KEY_BYTE_LENGTH = 64; // private key is actually 32 bytes but for historical reasons we concat private and public keys
	const KEYS_BYTE_LENGTH = 32;

	exports.publicKeyLength = PUBLIC_KEY_BYTE_LENGTH;
	exports.privateKeyLength = PRIVATE_KEY_BYTE_LENGTH;

	exports.generateKey = async function () {
	  // the actual private key (32 bytes)
	  const privateKeyRaw = ed.utils.randomPrivateKey();
	  const publicKey = await ed.getPublicKey(privateKeyRaw);

	  // concatenated the public key to the private key
	  const privateKey = concatKeys(privateKeyRaw, publicKey);

	  return {
	    privateKey,
	    publicKey
	  }
	};

	/**
	 * Generate keypair from a seed
	 *
	 * @param {Uint8Array} seed - seed should be a 32 byte uint8array
	 * @returns
	 */
	exports.generateKeyFromSeed = async function (seed) {
	  if (seed.length !== KEYS_BYTE_LENGTH) {
	    throw new TypeError('"seed" must be 32 bytes in length.')
	  } else if (!(seed instanceof Uint8Array)) {
	    throw new TypeError('"seed" must be a node.js Buffer, or Uint8Array.')
	  }

	  // based on node forges algorithm, the seed is used directly as private key
	  const privateKeyRaw = seed;
	  const publicKey = await ed.getPublicKey(privateKeyRaw);

	  const privateKey = concatKeys(privateKeyRaw, publicKey);

	  return {
	    privateKey,
	    publicKey
	  }
	};

	exports.hashAndSign = function (privateKey, msg) {
	  const privateKeyRaw = privateKey.slice(0, KEYS_BYTE_LENGTH);

	  return ed.sign(msg, privateKeyRaw)
	};

	exports.hashAndVerify = function (publicKey, sig, msg) {
	  return ed.verify(sig, msg, publicKey)
	};

	function concatKeys (privateKeyRaw, publicKey) {
	  const privateKey = new Uint8Array(exports.privateKeyLength);
	  for (let i = 0; i < KEYS_BYTE_LENGTH; i++) {
	    privateKey[i] = privateKeyRaw[i];
	    privateKey[KEYS_BYTE_LENGTH + i] = publicKey[i];
	  }
	  return privateKey
	}
	}(ed25519));

	const errcode$u = errCode$q;
	const { equals: uint8ArrayEquals$5 } = require$$7$1;
	const { sha256: sha256$8 } = require$$1$6;
	const { base58btc: base58btc$2 } = require$$2$2;
	const { identity } = require$$13;
	const crypto$8 = ed25519;
	const pbm = keys$3;
	const exporter$2 = exporter$4;

	class Ed25519PublicKey {
	  constructor (key) {
	    this._key = ensureKey(key, crypto$8.publicKeyLength);
	  }

	  async verify (data, sig) { // eslint-disable-line require-await
	    return crypto$8.hashAndVerify(this._key, sig, data)
	  }

	  marshal () {
	    return this._key
	  }

	  get bytes () {
	    return pbm.PublicKey.encode({
	      Type: pbm.KeyType.Ed25519,
	      Data: this.marshal()
	    }).finish()
	  }

	  equals (key) {
	    return uint8ArrayEquals$5(this.bytes, key.bytes)
	  }

	  async hash () {
	    const { bytes } = await sha256$8.digest(this.bytes);

	    return bytes
	  }
	}

	class Ed25519PrivateKey {
	  // key       - 64 byte Uint8Array containing private key
	  // publicKey - 32 byte Uint8Array containing public key
	  constructor (key, publicKey) {
	    this._key = ensureKey(key, crypto$8.privateKeyLength);
	    this._publicKey = ensureKey(publicKey, crypto$8.publicKeyLength);
	  }

	  async sign (message) { // eslint-disable-line require-await
	    return crypto$8.hashAndSign(this._key, message)
	  }

	  get public () {
	    return new Ed25519PublicKey(this._publicKey)
	  }

	  marshal () {
	    return this._key
	  }

	  get bytes () {
	    return pbm.PrivateKey.encode({
	      Type: pbm.KeyType.Ed25519,
	      Data: this.marshal()
	    }).finish()
	  }

	  equals (key) {
	    return uint8ArrayEquals$5(this.bytes, key.bytes)
	  }

	  async hash () {
	    const { bytes } = await sha256$8.digest(this.bytes);

	    return bytes
	  }

	  /**
	   * Gets the ID of the key.
	   *
	   * The key id is the base58 encoding of the identity multihash containing its public key.
	   * The public key is a protobuf encoding containing a type and the DER encoding
	   * of the PKCS SubjectPublicKeyInfo.
	   *
	   * @returns {Promise<string>}
	   */
	  async id () {
	    const encoding = await identity.digest(this.public.bytes);
	    return base58btc$2.encode(encoding.bytes).substring(1)
	  }

	  /**
	   * Exports the key into a password protected `format`
	   *
	   * @param {string} password - The password to encrypt the key
	   * @param {string} [format=libp2p-key] - The format in which to export as
	   * @returns {Promise<Uint8Array>} The encrypted private key
	   */
	  async export (password, format = 'libp2p-key') { // eslint-disable-line require-await
	    if (format === 'libp2p-key') {
	      return exporter$2.export(this.bytes, password)
	    } else {
	      throw errcode$u(new Error(`export format '${format}' is not supported`), 'ERR_INVALID_EXPORT_FORMAT')
	    }
	  }
	}

	function unmarshalEd25519PrivateKey (bytes) {
	  // Try the old, redundant public key version
	  if (bytes.length > crypto$8.privateKeyLength) {
	    bytes = ensureKey(bytes, crypto$8.privateKeyLength + crypto$8.publicKeyLength);
	    const privateKeyBytes = bytes.slice(0, crypto$8.privateKeyLength);
	    const publicKeyBytes = bytes.slice(crypto$8.privateKeyLength, bytes.length);
	    return new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes)
	  }

	  bytes = ensureKey(bytes, crypto$8.privateKeyLength);
	  const privateKeyBytes = bytes.slice(0, crypto$8.privateKeyLength);
	  const publicKeyBytes = bytes.slice(crypto$8.publicKeyLength);
	  return new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes)
	}

	function unmarshalEd25519PublicKey (bytes) {
	  bytes = ensureKey(bytes, crypto$8.publicKeyLength);
	  return new Ed25519PublicKey(bytes)
	}

	async function generateKeyPair$1 () {
	  const { privateKey, publicKey } = await crypto$8.generateKey();
	  return new Ed25519PrivateKey(privateKey, publicKey)
	}

	async function generateKeyPairFromSeed$1 (seed) {
	  const { privateKey, publicKey } = await crypto$8.generateKeyFromSeed(seed);
	  return new Ed25519PrivateKey(privateKey, publicKey)
	}

	function ensureKey (key, length) {
	  key = Uint8Array.from(key || []);
	  if (key.length !== length) {
	    throw errcode$u(new Error(`Key must be a Uint8Array of length ${length}, got ${key.length}`), 'ERR_INVALID_KEY_TYPE')
	  }
	  return key
	}

	var ed25519Class = {
	  Ed25519PublicKey,
	  Ed25519PrivateKey,
	  unmarshalEd25519PrivateKey,
	  unmarshalEd25519PublicKey,
	  generateKeyPair: generateKeyPair$1,
	  generateKeyPairFromSeed: generateKeyPairFromSeed$1
	};

	var lib$3 = {};

	(function (exports) {
	/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.utils = exports.schnorr = exports.verify = exports.signSync = exports.sign = exports.getSharedSecret = exports.recoverPublicKey = exports.getPublicKey = exports.Signature = exports.Point = exports.CURVE = void 0;
	const crypto_1 = __importDefault(require$$1$7);
	const _0n = BigInt(0);
	const _1n = BigInt(1);
	const _2n = BigInt(2);
	const _3n = BigInt(3);
	const _8n = BigInt(8);
	const POW_2_256 = _2n ** BigInt(256);
	const CURVE = {
	    a: _0n,
	    b: BigInt(7),
	    P: POW_2_256 - _2n ** BigInt(32) - BigInt(977),
	    n: POW_2_256 - BigInt('432420386565659656852420866394968145599'),
	    h: _1n,
	    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),
	    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),
	    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),
	};
	exports.CURVE = CURVE;
	function weistrass(x) {
	    const { a, b } = CURVE;
	    const x2 = mod(x * x);
	    const x3 = mod(x2 * x);
	    return mod(x3 + a * x + b);
	}
	const USE_ENDOMORPHISM = CURVE.a === _0n;
	class JacobianPoint {
	    constructor(x, y, z) {
	        this.x = x;
	        this.y = y;
	        this.z = z;
	    }
	    static fromAffine(p) {
	        if (!(p instanceof Point)) {
	            throw new TypeError('JacobianPoint#fromAffine: expected Point');
	        }
	        return new JacobianPoint(p.x, p.y, _1n);
	    }
	    static toAffineBatch(points) {
	        const toInv = invertBatch(points.map((p) => p.z));
	        return points.map((p, i) => p.toAffine(toInv[i]));
	    }
	    static normalizeZ(points) {
	        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);
	    }
	    equals(other) {
	        if (!(other instanceof JacobianPoint))
	            throw new TypeError('JacobianPoint expected');
	        const { x: X1, y: Y1, z: Z1 } = this;
	        const { x: X2, y: Y2, z: Z2 } = other;
	        const Z1Z1 = mod(Z1 ** _2n);
	        const Z2Z2 = mod(Z2 ** _2n);
	        const U1 = mod(X1 * Z2Z2);
	        const U2 = mod(X2 * Z1Z1);
	        const S1 = mod(mod(Y1 * Z2) * Z2Z2);
	        const S2 = mod(mod(Y2 * Z1) * Z1Z1);
	        return U1 === U2 && S1 === S2;
	    }
	    negate() {
	        return new JacobianPoint(this.x, mod(-this.y), this.z);
	    }
	    double() {
	        const { x: X1, y: Y1, z: Z1 } = this;
	        const A = mod(X1 ** _2n);
	        const B = mod(Y1 ** _2n);
	        const C = mod(B ** _2n);
	        const D = mod(_2n * (mod((X1 + B) ** _2n) - A - C));
	        const E = mod(_3n * A);
	        const F = mod(E ** _2n);
	        const X3 = mod(F - _2n * D);
	        const Y3 = mod(E * (D - X3) - _8n * C);
	        const Z3 = mod(_2n * Y1 * Z1);
	        return new JacobianPoint(X3, Y3, Z3);
	    }
	    add(other) {
	        if (!(other instanceof JacobianPoint))
	            throw new TypeError('JacobianPoint expected');
	        const { x: X1, y: Y1, z: Z1 } = this;
	        const { x: X2, y: Y2, z: Z2 } = other;
	        if (X2 === _0n || Y2 === _0n)
	            return this;
	        if (X1 === _0n || Y1 === _0n)
	            return other;
	        const Z1Z1 = mod(Z1 ** _2n);
	        const Z2Z2 = mod(Z2 ** _2n);
	        const U1 = mod(X1 * Z2Z2);
	        const U2 = mod(X2 * Z1Z1);
	        const S1 = mod(mod(Y1 * Z2) * Z2Z2);
	        const S2 = mod(mod(Y2 * Z1) * Z1Z1);
	        const H = mod(U2 - U1);
	        const r = mod(S2 - S1);
	        if (H === _0n) {
	            if (r === _0n) {
	                return this.double();
	            }
	            else {
	                return JacobianPoint.ZERO;
	            }
	        }
	        const HH = mod(H ** _2n);
	        const HHH = mod(H * HH);
	        const V = mod(U1 * HH);
	        const X3 = mod(r ** _2n - HHH - _2n * V);
	        const Y3 = mod(r * (V - X3) - S1 * HHH);
	        const Z3 = mod(Z1 * Z2 * H);
	        return new JacobianPoint(X3, Y3, Z3);
	    }
	    subtract(other) {
	        return this.add(other.negate());
	    }
	    multiplyUnsafe(scalar) {
	        let n = normalizeScalar(scalar);
	        const P0 = JacobianPoint.ZERO;
	        if (n === _0n)
	            return P0;
	        if (n === _1n)
	            return this;
	        if (!USE_ENDOMORPHISM) {
	            let p = P0;
	            let d = this;
	            while (n > _0n) {
	                if (n & _1n)
	                    p = p.add(d);
	                d = d.double();
	                n >>= _1n;
	            }
	            return p;
	        }
	        let { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);
	        let k1p = P0;
	        let k2p = P0;
	        let d = this;
	        while (k1 > _0n || k2 > _0n) {
	            if (k1 & _1n)
	                k1p = k1p.add(d);
	            if (k2 & _1n)
	                k2p = k2p.add(d);
	            d = d.double();
	            k1 >>= _1n;
	            k2 >>= _1n;
	        }
	        if (k1neg)
	            k1p = k1p.negate();
	        if (k2neg)
	            k2p = k2p.negate();
	        k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);
	        return k1p.add(k2p);
	    }
	    precomputeWindow(W) {
	        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;
	        const points = [];
	        let p = this;
	        let base = p;
	        for (let window = 0; window < windows; window++) {
	            base = p;
	            points.push(base);
	            for (let i = 1; i < 2 ** (W - 1); i++) {
	                base = base.add(p);
	                points.push(base);
	            }
	            p = base.double();
	        }
	        return points;
	    }
	    wNAF(n, affinePoint) {
	        if (!affinePoint && this.equals(JacobianPoint.BASE))
	            affinePoint = Point.BASE;
	        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;
	        if (256 % W) {
	            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');
	        }
	        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);
	        if (!precomputes) {
	            precomputes = this.precomputeWindow(W);
	            if (affinePoint && W !== 1) {
	                precomputes = JacobianPoint.normalizeZ(precomputes);
	                pointPrecomputes.set(affinePoint, precomputes);
	            }
	        }
	        let p = JacobianPoint.ZERO;
	        let f = JacobianPoint.ZERO;
	        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);
	        const windowSize = 2 ** (W - 1);
	        const mask = BigInt(2 ** W - 1);
	        const maxNumber = 2 ** W;
	        const shiftBy = BigInt(W);
	        for (let window = 0; window < windows; window++) {
	            const offset = window * windowSize;
	            let wbits = Number(n & mask);
	            n >>= shiftBy;
	            if (wbits > windowSize) {
	                wbits -= maxNumber;
	                n += _1n;
	            }
	            if (wbits === 0) {
	                let pr = precomputes[offset];
	                if (window % 2)
	                    pr = pr.negate();
	                f = f.add(pr);
	            }
	            else {
	                let cached = precomputes[offset + Math.abs(wbits) - 1];
	                if (wbits < 0)
	                    cached = cached.negate();
	                p = p.add(cached);
	            }
	        }
	        return { p, f };
	    }
	    multiply(scalar, affinePoint) {
	        let n = normalizeScalar(scalar);
	        let point;
	        let fake;
	        if (USE_ENDOMORPHISM) {
	            const { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);
	            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);
	            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);
	            if (k1neg)
	                k1p = k1p.negate();
	            if (k2neg)
	                k2p = k2p.negate();
	            k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);
	            point = k1p.add(k2p);
	            fake = f1p.add(f2p);
	        }
	        else {
	            const { p, f } = this.wNAF(n, affinePoint);
	            point = p;
	            fake = f;
	        }
	        return JacobianPoint.normalizeZ([point, fake])[0];
	    }
	    toAffine(invZ = invert(this.z)) {
	        const { x, y, z } = this;
	        const iz1 = invZ;
	        const iz2 = mod(iz1 * iz1);
	        const iz3 = mod(iz2 * iz1);
	        const ax = mod(x * iz2);
	        const ay = mod(y * iz3);
	        const zz = mod(z * iz1);
	        if (zz !== _1n)
	            throw new Error('invZ was invalid');
	        return new Point(ax, ay);
	    }
	}
	JacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);
	JacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);
	const pointPrecomputes = new WeakMap();
	class Point {
	    constructor(x, y) {
	        this.x = x;
	        this.y = y;
	    }
	    _setWindowSize(windowSize) {
	        this._WINDOW_SIZE = windowSize;
	        pointPrecomputes.delete(this);
	    }
	    static fromCompressedHex(bytes) {
	        const isShort = bytes.length === 32;
	        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));
	        if (!isValidFieldElement(x))
	            throw new Error('Point is not on curve');
	        const y2 = weistrass(x);
	        let y = sqrtMod(y2);
	        const isYOdd = (y & _1n) === _1n;
	        if (isShort) {
	            if (isYOdd)
	                y = mod(-y);
	        }
	        else {
	            const isFirstByteOdd = (bytes[0] & 1) === 1;
	            if (isFirstByteOdd !== isYOdd)
	                y = mod(-y);
	        }
	        const point = new Point(x, y);
	        point.assertValidity();
	        return point;
	    }
	    static fromUncompressedHex(bytes) {
	        const x = bytesToNumber(bytes.subarray(1, 33));
	        const y = bytesToNumber(bytes.subarray(33, 65));
	        const point = new Point(x, y);
	        point.assertValidity();
	        return point;
	    }
	    static fromHex(hex) {
	        const bytes = ensureBytes(hex);
	        const len = bytes.length;
	        const header = bytes[0];
	        if (len === 32 || (len === 33 && (header === 0x02 || header === 0x03))) {
	            return this.fromCompressedHex(bytes);
	        }
	        if (len === 65 && header === 0x04)
	            return this.fromUncompressedHex(bytes);
	        throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${len}`);
	    }
	    static fromPrivateKey(privateKey) {
	        return Point.BASE.multiply(normalizePrivateKey(privateKey));
	    }
	    static fromSignature(msgHash, signature, recovery) {
	        msgHash = ensureBytes(msgHash);
	        const h = truncateHash(msgHash);
	        const { r, s } = normalizeSignature(signature);
	        if (recovery !== 0 && recovery !== 1) {
	            throw new Error('Cannot recover signature: invalid recovery bit');
	        }
	        if (h === _0n)
	            throw new Error('Cannot recover signature: msgHash cannot be 0');
	        const prefix = recovery & 1 ? '03' : '02';
	        const R = Point.fromHex(prefix + numTo32bStr(r));
	        const { n } = CURVE;
	        const rinv = invert(r, n);
	        const u1 = mod(-h * rinv, n);
	        const u2 = mod(s * rinv, n);
	        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);
	        if (!Q)
	            throw new Error('Cannot recover signature: point at infinify');
	        Q.assertValidity();
	        return Q;
	    }
	    toRawBytes(isCompressed = false) {
	        return hexToBytes(this.toHex(isCompressed));
	    }
	    toHex(isCompressed = false) {
	        const x = numTo32bStr(this.x);
	        if (isCompressed) {
	            const prefix = this.y & _1n ? '03' : '02';
	            return `${prefix}${x}`;
	        }
	        else {
	            return `04${x}${numTo32bStr(this.y)}`;
	        }
	    }
	    toHexX() {
	        return this.toHex(true).slice(2);
	    }
	    toRawX() {
	        return this.toRawBytes(true).slice(1);
	    }
	    assertValidity() {
	        const msg = 'Point is not on elliptic curve';
	        const { x, y } = this;
	        if (!isValidFieldElement(x) || !isValidFieldElement(y))
	            throw new Error(msg);
	        const left = mod(y * y);
	        const right = weistrass(x);
	        if (mod(left - right) !== _0n)
	            throw new Error(msg);
	    }
	    equals(other) {
	        return this.x === other.x && this.y === other.y;
	    }
	    negate() {
	        return new Point(this.x, mod(-this.y));
	    }
	    double() {
	        return JacobianPoint.fromAffine(this).double().toAffine();
	    }
	    add(other) {
	        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();
	    }
	    subtract(other) {
	        return this.add(other.negate());
	    }
	    multiply(scalar) {
	        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();
	    }
	    multiplyAndAddUnsafe(Q, a, b) {
	        const P = JacobianPoint.fromAffine(this);
	        const aP = P.multiply(a);
	        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);
	        const sum = aP.add(bQ);
	        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();
	    }
	}
	exports.Point = Point;
	Point.BASE = new Point(CURVE.Gx, CURVE.Gy);
	Point.ZERO = new Point(_0n, _0n);
	function sliceDER(s) {
	    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;
	}
	function parseDERInt(data) {
	    if (data.length < 2 || data[0] !== 0x02) {
	        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);
	    }
	    const len = data[1];
	    const res = data.subarray(2, len + 2);
	    if (!len || res.length !== len) {
	        throw new Error(`Invalid signature integer: wrong length`);
	    }
	    if (res[0] === 0x00 && res[1] <= 0x7f) {
	        throw new Error('Invalid signature integer: trailing length');
	    }
	    return { data: bytesToNumber(res), left: data.subarray(len + 2) };
	}
	function parseDERSignature(data) {
	    if (data.length < 2 || data[0] != 0x30) {
	        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);
	    }
	    if (data[1] !== data.length - 2) {
	        throw new Error('Invalid signature: incorrect length');
	    }
	    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));
	    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);
	    if (rBytesLeft.length) {
	        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);
	    }
	    return { r, s };
	}
	class Signature {
	    constructor(r, s) {
	        this.r = r;
	        this.s = s;
	        this.assertValidity();
	    }
	    static fromCompact(hex) {
	        const arr = isUint8a(hex);
	        const name = 'Signature.fromCompact';
	        if (typeof hex !== 'string' && !arr)
	            throw new TypeError(`${name}: Expected string or Uint8Array`);
	        const str = arr ? bytesToHex(hex) : hex;
	        if (str.length !== 128)
	            throw new Error(`${name}: Expected 64-byte hex`);
	        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));
	    }
	    static fromDER(hex) {
	        const arr = isUint8a(hex);
	        if (typeof hex !== 'string' && !arr)
	            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);
	        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));
	        return new Signature(r, s);
	    }
	    static fromHex(hex) {
	        return this.fromDER(hex);
	    }
	    assertValidity() {
	        const { r, s } = this;
	        if (!isWithinCurveOrder(r))
	            throw new Error('Invalid Signature: r must be 0 < r < n');
	        if (!isWithinCurveOrder(s))
	            throw new Error('Invalid Signature: s must be 0 < s < n');
	    }
	    hasHighS() {
	        const HALF = CURVE.n >> _1n;
	        return this.s > HALF;
	    }
	    normalizeS() {
	        return this.hasHighS() ? new Signature(this.r, CURVE.n - this.s) : this;
	    }
	    toDERRawBytes(isCompressed = false) {
	        return hexToBytes(this.toDERHex(isCompressed));
	    }
	    toDERHex(isCompressed = false) {
	        const sHex = sliceDER(numberToHexUnpadded(this.s));
	        if (isCompressed)
	            return sHex;
	        const rHex = sliceDER(numberToHexUnpadded(this.r));
	        const rLen = numberToHexUnpadded(rHex.length / 2);
	        const sLen = numberToHexUnpadded(sHex.length / 2);
	        const length = numberToHexUnpadded(rHex.length / 2 + sHex.length / 2 + 4);
	        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;
	    }
	    toRawBytes() {
	        return this.toDERRawBytes();
	    }
	    toHex() {
	        return this.toDERHex();
	    }
	    toCompactRawBytes() {
	        return hexToBytes(this.toCompactHex());
	    }
	    toCompactHex() {
	        return numTo32bStr(this.r) + numTo32bStr(this.s);
	    }
	}
	exports.Signature = Signature;
	function concatBytes(...arrays) {
	    if (!arrays.every(isUint8a))
	        throw new Error('Uint8Array list expected');
	    if (arrays.length === 1)
	        return arrays[0];
	    const length = arrays.reduce((a, arr) => a + arr.length, 0);
	    const result = new Uint8Array(length);
	    for (let i = 0, pad = 0; i < arrays.length; i++) {
	        const arr = arrays[i];
	        result.set(arr, pad);
	        pad += arr.length;
	    }
	    return result;
	}
	function isUint8a(bytes) {
	    return bytes instanceof Uint8Array;
	}
	const hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));
	function bytesToHex(uint8a) {
	    if (!(uint8a instanceof Uint8Array))
	        throw new Error('Expected Uint8Array');
	    let hex = '';
	    for (let i = 0; i < uint8a.length; i++) {
	        hex += hexes[uint8a[i]];
	    }
	    return hex;
	}
	function numTo32bStr(num) {
	    if (num > POW_2_256)
	        throw new Error('Expected number < 2^256');
	    return num.toString(16).padStart(64, '0');
	}
	function numTo32b(num) {
	    return hexToBytes(numTo32bStr(num));
	}
	function numberToHexUnpadded(num) {
	    const hex = num.toString(16);
	    return hex.length & 1 ? `0${hex}` : hex;
	}
	function hexToNumber(hex) {
	    if (typeof hex !== 'string') {
	        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);
	    }
	    return BigInt(`0x${hex}`);
	}
	function hexToBytes(hex) {
	    if (typeof hex !== 'string') {
	        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);
	    }
	    if (hex.length % 2)
	        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);
	    const array = new Uint8Array(hex.length / 2);
	    for (let i = 0; i < array.length; i++) {
	        const j = i * 2;
	        const hexByte = hex.slice(j, j + 2);
	        const byte = Number.parseInt(hexByte, 16);
	        if (Number.isNaN(byte) || byte < 0)
	            throw new Error('Invalid byte sequence');
	        array[i] = byte;
	    }
	    return array;
	}
	function bytesToNumber(bytes) {
	    return hexToNumber(bytesToHex(bytes));
	}
	function ensureBytes(hex) {
	    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);
	}
	function normalizeScalar(num) {
	    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)
	        return BigInt(num);
	    if (typeof num === 'bigint' && isWithinCurveOrder(num))
	        return num;
	    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');
	}
	function mod(a, b = CURVE.P) {
	    const result = a % b;
	    return result >= _0n ? result : b + result;
	}
	function pow2(x, power) {
	    const { P } = CURVE;
	    let res = x;
	    while (power-- > _0n) {
	        res *= res;
	        res %= P;
	    }
	    return res;
	}
	function sqrtMod(x) {
	    const { P } = CURVE;
	    const _6n = BigInt(6);
	    const _11n = BigInt(11);
	    const _22n = BigInt(22);
	    const _23n = BigInt(23);
	    const _44n = BigInt(44);
	    const _88n = BigInt(88);
	    const b2 = (x * x * x) % P;
	    const b3 = (b2 * b2 * x) % P;
	    const b6 = (pow2(b3, _3n) * b3) % P;
	    const b9 = (pow2(b6, _3n) * b3) % P;
	    const b11 = (pow2(b9, _2n) * b2) % P;
	    const b22 = (pow2(b11, _11n) * b11) % P;
	    const b44 = (pow2(b22, _22n) * b22) % P;
	    const b88 = (pow2(b44, _44n) * b44) % P;
	    const b176 = (pow2(b88, _88n) * b88) % P;
	    const b220 = (pow2(b176, _44n) * b44) % P;
	    const b223 = (pow2(b220, _3n) * b3) % P;
	    const t1 = (pow2(b223, _23n) * b22) % P;
	    const t2 = (pow2(t1, _6n) * b2) % P;
	    return pow2(t2, _2n);
	}
	function invert(number, modulo = CURVE.P) {
	    if (number === _0n || modulo <= _0n) {
	        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
	    }
	    let a = mod(number, modulo);
	    let b = modulo;
	    let x = _0n, u = _1n;
	    while (a !== _0n) {
	        const q = b / a;
	        const r = b % a;
	        const m = x - u * q;
	        b = a, a = r, x = u, u = m;
	    }
	    const gcd = b;
	    if (gcd !== _1n)
	        throw new Error('invert: does not exist');
	    return mod(x, modulo);
	}
	function invertBatch(nums, p = CURVE.P) {
	    const scratch = new Array(nums.length);
	    const lastMultiplied = nums.reduce((acc, num, i) => {
	        if (num === _0n)
	            return acc;
	        scratch[i] = acc;
	        return mod(acc * num, p);
	    }, _1n);
	    const inverted = invert(lastMultiplied, p);
	    nums.reduceRight((acc, num, i) => {
	        if (num === _0n)
	            return acc;
	        scratch[i] = mod(acc * scratch[i], p);
	        return mod(acc * num, p);
	    }, inverted);
	    return scratch;
	}
	const divNearest = (a, b) => (a + b / _2n) / b;
	const POW_2_128 = _2n ** BigInt(128);
	function splitScalarEndo(k) {
	    const { n } = CURVE;
	    const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');
	    const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');
	    const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');
	    const b2 = a1;
	    const c1 = divNearest(b2 * k, n);
	    const c2 = divNearest(-b1 * k, n);
	    let k1 = mod(k - c1 * a1 - c2 * a2, n);
	    let k2 = mod(-c1 * b1 - c2 * b2, n);
	    const k1neg = k1 > POW_2_128;
	    const k2neg = k2 > POW_2_128;
	    if (k1neg)
	        k1 = n - k1;
	    if (k2neg)
	        k2 = n - k2;
	    if (k1 > POW_2_128 || k2 > POW_2_128) {
	        throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);
	    }
	    return { k1neg, k1, k2neg, k2 };
	}
	function truncateHash(hash) {
	    const { n } = CURVE;
	    const byteLength = hash.length;
	    const delta = byteLength * 8 - 256;
	    let h = bytesToNumber(hash);
	    if (delta > 0)
	        h = h >> BigInt(delta);
	    if (h >= n)
	        h -= n;
	    return h;
	}
	class HmacDrbg {
	    constructor() {
	        this.v = new Uint8Array(32).fill(1);
	        this.k = new Uint8Array(32).fill(0);
	        this.counter = 0;
	    }
	    hmac(...values) {
	        return exports.utils.hmacSha256(this.k, ...values);
	    }
	    hmacSync(...values) {
	        if (typeof exports.utils.hmacSha256Sync !== 'function')
	            throw new Error('utils.hmacSha256Sync is undefined, you need to set it');
	        const res = exports.utils.hmacSha256Sync(this.k, ...values);
	        if (res instanceof Promise)
	            throw new Error('To use sync sign(), ensure utils.hmacSha256 is sync');
	        return res;
	    }
	    incr() {
	        if (this.counter >= 1000) {
	            throw new Error('Tried 1,000 k values for sign(), all were invalid');
	        }
	        this.counter += 1;
	    }
	    async reseed(seed = new Uint8Array()) {
	        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);
	        this.v = await this.hmac(this.v);
	        if (seed.length === 0)
	            return;
	        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);
	        this.v = await this.hmac(this.v);
	    }
	    reseedSync(seed = new Uint8Array()) {
	        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);
	        this.v = this.hmacSync(this.v);
	        if (seed.length === 0)
	            return;
	        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);
	        this.v = this.hmacSync(this.v);
	    }
	    async generate() {
	        this.incr();
	        this.v = await this.hmac(this.v);
	        return this.v;
	    }
	    generateSync() {
	        this.incr();
	        this.v = this.hmacSync(this.v);
	        return this.v;
	    }
	}
	function isWithinCurveOrder(num) {
	    return _0n < num && num < CURVE.n;
	}
	function isValidFieldElement(num) {
	    return _0n < num && num < CURVE.P;
	}
	function kmdToSig(kBytes, m, d) {
	    const k = bytesToNumber(kBytes);
	    if (!isWithinCurveOrder(k))
	        return;
	    const { n } = CURVE;
	    const q = Point.BASE.multiply(k);
	    const r = mod(q.x, n);
	    if (r === _0n)
	        return;
	    const s = mod(invert(k, n) * mod(m + d * r, n), n);
	    if (s === _0n)
	        return;
	    const sig = new Signature(r, s);
	    const recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);
	    return { sig, recovery };
	}
	function normalizePrivateKey(key) {
	    let num;
	    if (typeof key === 'bigint') {
	        num = key;
	    }
	    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {
	        num = BigInt(key);
	    }
	    else if (typeof key === 'string') {
	        if (key.length !== 64)
	            throw new Error('Expected 32 bytes of private key');
	        num = hexToNumber(key);
	    }
	    else if (isUint8a(key)) {
	        if (key.length !== 32)
	            throw new Error('Expected 32 bytes of private key');
	        num = bytesToNumber(key);
	    }
	    else {
	        throw new TypeError('Expected valid private key');
	    }
	    if (!isWithinCurveOrder(num))
	        throw new Error('Expected private key: 0 < key < n');
	    return num;
	}
	function normalizePublicKey(publicKey) {
	    if (publicKey instanceof Point) {
	        publicKey.assertValidity();
	        return publicKey;
	    }
	    else {
	        return Point.fromHex(publicKey);
	    }
	}
	function normalizeSignature(signature) {
	    if (signature instanceof Signature) {
	        signature.assertValidity();
	        return signature;
	    }
	    try {
	        return Signature.fromDER(signature);
	    }
	    catch (error) {
	        return Signature.fromCompact(signature);
	    }
	}
	function getPublicKey(privateKey, isCompressed = false) {
	    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
	}
	exports.getPublicKey = getPublicKey;
	function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {
	    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);
	}
	exports.recoverPublicKey = recoverPublicKey;
	function isPub(item) {
	    const arr = isUint8a(item);
	    const str = typeof item === 'string';
	    const len = (arr || str) && item.length;
	    if (arr)
	        return len === 33 || len === 65;
	    if (str)
	        return len === 66 || len === 130;
	    if (item instanceof Point)
	        return true;
	    return false;
	}
	function getSharedSecret(privateA, publicB, isCompressed = false) {
	    if (isPub(privateA))
	        throw new TypeError('getSharedSecret: first arg must be private key');
	    if (!isPub(publicB))
	        throw new TypeError('getSharedSecret: second arg must be public key');
	    const b = normalizePublicKey(publicB);
	    b.assertValidity();
	    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);
	}
	exports.getSharedSecret = getSharedSecret;
	function bits2int(bytes) {
	    const slice = bytes.length > 32 ? bytes.slice(0, 32) : bytes;
	    return bytesToNumber(slice);
	}
	function bits2octets(bytes) {
	    const z1 = bits2int(bytes);
	    const z2 = mod(z1, CURVE.n);
	    return int2octets(z2 < _0n ? z1 : z2);
	}
	function int2octets(num) {
	    if (typeof num !== 'bigint')
	        throw new Error('Expected bigint');
	    const hex = numTo32bStr(num);
	    return hexToBytes(hex);
	}
	function initSigArgs(msgHash, privateKey, extraEntropy) {
	    if (msgHash == null)
	        throw new Error(`sign: expected valid message hash, not "${msgHash}"`);
	    const h1 = ensureBytes(msgHash);
	    const d = normalizePrivateKey(privateKey);
	    const seedArgs = [int2octets(d), bits2octets(h1)];
	    if (extraEntropy != null) {
	        if (extraEntropy === true)
	            extraEntropy = exports.utils.randomBytes(32);
	        const e = ensureBytes(extraEntropy);
	        if (e.length !== 32)
	            throw new Error('sign: Expected 32 bytes of extra data');
	        seedArgs.push(e);
	    }
	    const seed = concatBytes(...seedArgs);
	    const m = bits2int(h1);
	    return { seed, m, d };
	}
	function finalizeSig(recSig, opts) {
	    let { sig, recovery } = recSig;
	    const { canonical, der, recovered } = Object.assign({ canonical: true, der: true }, opts);
	    if (canonical && sig.hasHighS()) {
	        sig = sig.normalizeS();
	        recovery ^= 1;
	    }
	    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();
	    return recovered ? [hashed, recovery] : hashed;
	}
	async function sign(msgHash, privKey, opts = {}) {
	    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);
	    let sig;
	    const drbg = new HmacDrbg();
	    await drbg.reseed(seed);
	    while (!(sig = kmdToSig(await drbg.generate(), m, d)))
	        await drbg.reseed();
	    return finalizeSig(sig, opts);
	}
	exports.sign = sign;
	function signSync(msgHash, privKey, opts = {}) {
	    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);
	    let sig;
	    const drbg = new HmacDrbg();
	    drbg.reseedSync(seed);
	    while (!(sig = kmdToSig(drbg.generateSync(), m, d)))
	        drbg.reseedSync();
	    return finalizeSig(sig, opts);
	}
	exports.signSync = signSync;
	const vopts = { strict: true };
	function verify(signature, msgHash, publicKey, opts = vopts) {
	    let sig;
	    try {
	        sig = normalizeSignature(signature);
	        msgHash = ensureBytes(msgHash);
	    }
	    catch (error) {
	        return false;
	    }
	    const { r, s } = sig;
	    if (opts.strict && sig.hasHighS())
	        return false;
	    const h = truncateHash(msgHash);
	    if (h === _0n)
	        return false;
	    let P;
	    try {
	        P = normalizePublicKey(publicKey);
	    }
	    catch (error) {
	        return false;
	    }
	    const { n } = CURVE;
	    const sinv = invert(s, n);
	    const u1 = mod(h * sinv, n);
	    const u2 = mod(r * sinv, n);
	    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);
	    if (!R)
	        return false;
	    const v = mod(R.x, n);
	    return v === r;
	}
	exports.verify = verify;
	async function taggedHash(tag, ...messages) {
	    const tagB = new Uint8Array(tag.split('').map((c) => c.charCodeAt(0)));
	    const tagH = await exports.utils.sha256(tagB);
	    const h = await exports.utils.sha256(concatBytes(tagH, tagH, ...messages));
	    return bytesToNumber(h);
	}
	async function createChallenge(x, P, message) {
	    const rx = numTo32b(x);
	    const t = await taggedHash('BIP0340/challenge', rx, P.toRawX(), message);
	    return mod(t, CURVE.n);
	}
	function hasEvenY(point) {
	    return (point.y & _1n) === _0n;
	}
	class SchnorrSignature {
	    constructor(r, s) {
	        this.r = r;
	        this.s = s;
	        this.assertValidity();
	    }
	    static fromHex(hex) {
	        const bytes = ensureBytes(hex);
	        if (bytes.length !== 64)
	            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);
	        const r = bytesToNumber(bytes.subarray(0, 32));
	        const s = bytesToNumber(bytes.subarray(32, 64));
	        return new SchnorrSignature(r, s);
	    }
	    assertValidity() {
	        const { r, s } = this;
	        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))
	            throw new Error('Invalid signature');
	    }
	    toHex() {
	        return numTo32bStr(this.r) + numTo32bStr(this.s);
	    }
	    toRawBytes() {
	        return hexToBytes(this.toHex());
	    }
	}
	function schnorrGetPublicKey(privateKey) {
	    return Point.fromPrivateKey(privateKey).toRawX();
	}
	async function schnorrSign(message, privateKey, auxRand = exports.utils.randomBytes()) {
	    if (message == null)
	        throw new TypeError(`sign: Expected valid message, not "${message}"`);
	    const { n } = CURVE;
	    const m = ensureBytes(message);
	    const d0 = normalizePrivateKey(privateKey);
	    const rand = ensureBytes(auxRand);
	    if (rand.length !== 32)
	        throw new TypeError('sign: Expected 32 bytes of aux randomness');
	    const P = Point.fromPrivateKey(d0);
	    const d = hasEvenY(P) ? d0 : n - d0;
	    const t0h = await taggedHash('BIP0340/aux', rand);
	    const t = d ^ t0h;
	    const k0h = await taggedHash('BIP0340/nonce', numTo32b(t), P.toRawX(), m);
	    const k0 = mod(k0h, n);
	    if (k0 === _0n)
	        throw new Error('sign: Creation of signature failed. k is zero');
	    const R = Point.fromPrivateKey(k0);
	    const k = hasEvenY(R) ? k0 : n - k0;
	    const e = await createChallenge(R.x, P, m);
	    const sig = new SchnorrSignature(R.x, mod(k + e * d, n)).toRawBytes();
	    const isValid = await schnorrVerify(sig, m, P.toRawX());
	    if (!isValid)
	        throw new Error('sign: Invalid signature produced');
	    return sig;
	}
	async function schnorrVerify(signature, message, publicKey) {
	    const raw = signature instanceof SchnorrSignature;
	    let sig;
	    try {
	        sig = raw ? signature : SchnorrSignature.fromHex(signature);
	        if (raw)
	            sig.assertValidity();
	    }
	    catch (error) {
	        return false;
	    }
	    const { r, s } = sig;
	    const m = ensureBytes(message);
	    let P;
	    try {
	        P = normalizePublicKey(publicKey);
	    }
	    catch (error) {
	        return false;
	    }
	    const e = await createChallenge(r, P, m);
	    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));
	    if (!R || !hasEvenY(R) || R.x !== r)
	        return false;
	    return true;
	}
	exports.schnorr = {
	    Signature: SchnorrSignature,
	    getPublicKey: schnorrGetPublicKey,
	    sign: schnorrSign,
	    verify: schnorrVerify,
	};
	Point.BASE._setWindowSize(8);
	const crypto = {
	    node: crypto_1.default,
	    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,
	};
	exports.utils = {
	    isValidPrivateKey(privateKey) {
	        try {
	            normalizePrivateKey(privateKey);
	            return true;
	        }
	        catch (error) {
	            return false;
	        }
	    },
	    hashToPrivateKey: (hash) => {
	        hash = ensureBytes(hash);
	        if (hash.length < 40 || hash.length > 1024)
	            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');
	        const num = mod(bytesToNumber(hash), CURVE.n);
	        if (num === _0n || num === _1n)
	            throw new Error('Invalid private key');
	        return numTo32b(num);
	    },
	    randomBytes: (bytesLength = 32) => {
	        if (crypto.web) {
	            return crypto.web.getRandomValues(new Uint8Array(bytesLength));
	        }
	        else if (crypto.node) {
	            const { randomBytes } = crypto.node;
	            return Uint8Array.from(randomBytes(bytesLength));
	        }
	        else {
	            throw new Error("The environment doesn't have randomBytes function");
	        }
	    },
	    randomPrivateKey: () => {
	        return exports.utils.hashToPrivateKey(exports.utils.randomBytes(40));
	    },
	    bytesToHex,
	    mod,
	    sha256: async (message) => {
	        if (crypto.web) {
	            const buffer = await crypto.web.subtle.digest('SHA-256', message.buffer);
	            return new Uint8Array(buffer);
	        }
	        else if (crypto.node) {
	            const { createHash } = crypto.node;
	            return Uint8Array.from(createHash('sha256').update(message).digest());
	        }
	        else {
	            throw new Error("The environment doesn't have sha256 function");
	        }
	    },
	    hmacSha256: async (key, ...messages) => {
	        if (crypto.web) {
	            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);
	            const message = concatBytes(...messages);
	            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);
	            return new Uint8Array(buffer);
	        }
	        else if (crypto.node) {
	            const { createHmac } = crypto.node;
	            const hash = createHmac('sha256', key);
	            messages.forEach((m) => hash.update(m));
	            return Uint8Array.from(hash.digest());
	        }
	        else {
	            throw new Error("The environment doesn't have hmac-sha256 function");
	        }
	    },
	    sha256Sync: undefined,
	    hmacSha256Sync: undefined,
	    precompute(windowSize = 8, point = Point.BASE) {
	        const cached = point === Point.BASE ? point : new Point(point.x, point.y);
	        cached._setWindowSize(windowSize);
	        cached.multiply(_3n);
	        return cached;
	    },
	};
	}(lib$3));

	const errcode$t = errCode$q;
	const secp = lib$3;
	const { sha256: sha256$7 } = require$$1$6;

	var secp256k1 = () => {
	  const privateKeyLength = 32;

	  function generateKey () {
	    return secp.utils.randomPrivateKey()
	  }

	  /**
	   * Hash and sign message with private key
	   *
	   * @param {number | bigint | (string | Uint8Array)} key
	   * @param {Uint8Array} msg
	   */
	  async function hashAndSign (key, msg) {
	    const { digest } = await sha256$7.digest(msg);
	    try {
	      return await secp.sign(digest, key)
	    } catch (err) {
	      throw errcode$t(err, 'ERR_INVALID_INPUT')
	    }
	  }

	  /**
	   * Hash message and verify signature with public key
	   *
	   * @param {secp.Point | (string | Uint8Array)} key
	   * @param {(string | Uint8Array) | secp.Signature} sig
	   * @param {Uint8Array} msg
	   */
	  async function hashAndVerify (key, sig, msg) {
	    try {
	      const { digest } = await sha256$7.digest(msg);
	      return secp.verify(sig, digest, key)
	    } catch (err) {
	      throw errcode$t(err, 'ERR_INVALID_INPUT')
	    }
	  }

	  function compressPublicKey (key) {
	    const point = secp.Point.fromHex(key).toRawBytes(true);
	    return point
	  }

	  function decompressPublicKey (key) {
	    const point = secp.Point.fromHex(key).toRawBytes(false);
	    return point
	  }

	  function validatePrivateKey (key) {
	    try {
	      secp.getPublicKey(key, true);
	    } catch (err) {
	      throw errcode$t(err, 'ERR_INVALID_PRIVATE_KEY')
	    }
	  }

	  function validatePublicKey (key) {
	    try {
	      secp.Point.fromHex(key);
	    } catch (err) {
	      throw errcode$t(err, 'ERR_INVALID_PUBLIC_KEY')
	    }
	  }

	  function computePublicKey (privateKey) {
	    try {
	      return secp.getPublicKey(privateKey, true)
	    } catch (err) {
	      throw errcode$t(err, 'ERR_INVALID_PRIVATE_KEY')
	    }
	  }

	  return {
	    generateKey,
	    privateKeyLength,
	    hashAndSign,
	    hashAndVerify,
	    compressPublicKey,
	    decompressPublicKey,
	    validatePrivateKey,
	    validatePublicKey,
	    computePublicKey
	  }
	};

	const { sha256: sha256$6 } = require$$1$6;
	const errcode$s = errCode$q;
	const { equals: uint8ArrayEquals$4 } = require$$7$1;
	const { toString: uint8ArrayToString$e } = require$$8;

	const exporter$1 = exporter$4;

	var secp256k1Class = (keysProtobuf, randomBytes, crypto) => {
	  crypto = crypto || secp256k1();

	  class Secp256k1PublicKey {
	    constructor (key) {
	      crypto.validatePublicKey(key);
	      this._key = key;
	    }

	    verify (data, sig) {
	      return crypto.hashAndVerify(this._key, sig, data)
	    }

	    marshal () {
	      return crypto.compressPublicKey(this._key)
	    }

	    get bytes () {
	      return keysProtobuf.PublicKey.encode({
	        Type: keysProtobuf.KeyType.Secp256k1,
	        Data: this.marshal()
	      }).finish()
	    }

	    equals (key) {
	      return uint8ArrayEquals$4(this.bytes, key.bytes)
	    }

	    async hash () {
	      const { bytes } = await sha256$6.digest(this.bytes);

	      return bytes
	    }
	  }

	  class Secp256k1PrivateKey {
	    constructor (key, publicKey) {
	      this._key = key;
	      this._publicKey = publicKey || crypto.computePublicKey(key);
	      crypto.validatePrivateKey(this._key);
	      crypto.validatePublicKey(this._publicKey);
	    }

	    sign (message) {
	      return crypto.hashAndSign(this._key, message)
	    }

	    get public () {
	      return new Secp256k1PublicKey(this._publicKey)
	    }

	    marshal () {
	      return this._key
	    }

	    get bytes () {
	      return keysProtobuf.PrivateKey.encode({
	        Type: keysProtobuf.KeyType.Secp256k1,
	        Data: this.marshal()
	      }).finish()
	    }

	    equals (key) {
	      return uint8ArrayEquals$4(this.bytes, key.bytes)
	    }

	    async hash () {
	      const { bytes } = await sha256$6.digest(this.bytes);

	      return bytes
	    }

	    /**
	     * Gets the ID of the key.
	     *
	     * The key id is the base58 encoding of the SHA-256 multihash of its public key.
	     * The public key is a protobuf encoding containing a type and the DER encoding
	     * of the PKCS SubjectPublicKeyInfo.
	     *
	     * @returns {Promise<string>}
	     */
	    async id () {
	      const hash = await this.public.hash();
	      return uint8ArrayToString$e(hash, 'base58btc')
	    }

	    /**
	     * Exports the key into a password protected `format`
	     *
	     * @param {string} password - The password to encrypt the key
	     * @param {string} [format=libp2p-key] - The format in which to export as
	     * @returns {Promise<string>} The encrypted private key
	     */
	    async export (password, format = 'libp2p-key') { // eslint-disable-line require-await
	      if (format === 'libp2p-key') {
	        return exporter$1.export(this.bytes, password)
	      } else {
	        throw errcode$s(new Error(`export format '${format}' is not supported`), 'ERR_INVALID_EXPORT_FORMAT')
	      }
	    }
	  }

	  function unmarshalSecp256k1PrivateKey (bytes) {
	    return new Secp256k1PrivateKey(bytes)
	  }

	  function unmarshalSecp256k1PublicKey (bytes) {
	    return new Secp256k1PublicKey(bytes)
	  }

	  async function generateKeyPair () {
	    const privateKeyBytes = await crypto.generateKey();
	    return new Secp256k1PrivateKey(privateKeyBytes)
	  }

	  return {
	    Secp256k1PublicKey,
	    Secp256k1PrivateKey,
	    unmarshalSecp256k1PrivateKey,
	    unmarshalSecp256k1PublicKey,
	    generateKeyPair
	  }
	};

	var indexBrowser = {};

	var lengths$1 = {
	  SHA1: 20,
	  SHA256: 32,
	  SHA512: 64
	};

	const webcrypto$1 = webcrypto$4;
	const lengths = lengths$1;

	const hashTypes = {
	  SHA1: 'SHA-1',
	  SHA256: 'SHA-256',
	  SHA512: 'SHA-512'
	};

	const sign$2 = async (key, data) => {
	  const buf = await webcrypto$1.get().subtle.sign({ name: 'HMAC' }, key, data);
	  return new Uint8Array(buf, buf.byteOffset, buf.byteLength)
	};

	indexBrowser.create = async function (hashType, secret) {
	  const hash = hashTypes[hashType];

	  const key = await webcrypto$1.get().subtle.importKey(
	    'raw',
	    secret,
	    {
	      name: 'HMAC',
	      hash: { name: hash }
	    },
	    false,
	    ['sign']
	  );

	  return {
	    async digest (data) { // eslint-disable-line require-await
	      return sign$2(key, data)
	    },
	    length: lengths[hashType]
	  }
	};

	const errcode$r = errCode$q;
	const { concat: uint8ArrayConcat$5 } = require$$9;
	const { fromString: uint8ArrayFromString$b } = require$$5$3;
	const hmac$3 = indexBrowser;

	const cipherMap = {
	  'AES-128': {
	    ivSize: 16,
	    keySize: 16
	  },
	  'AES-256': {
	    ivSize: 16,
	    keySize: 32
	  },
	  Blowfish: {
	    ivSize: 8,
	    cipherKeySize: 32
	  }
	};

	// Generates a set of keys for each party by stretching the shared key.
	// (myIV, theirIV, myCipherKey, theirCipherKey, myMACKey, theirMACKey)
	var keyStretcher = async (cipherType, hash, secret) => {
	  const cipher = cipherMap[cipherType];

	  if (!cipher) {
	    const allowed = Object.keys(cipherMap).join(' / ');
	    throw errcode$r(new Error(`unknown cipher type '${cipherType}'. Must be ${allowed}`), 'ERR_INVALID_CIPHER_TYPE')
	  }

	  if (!hash) {
	    throw errcode$r(new Error('missing hash type'), 'ERR_MISSING_HASH_TYPE')
	  }

	  const cipherKeySize = cipher.keySize;
	  const ivSize = cipher.ivSize;
	  const hmacKeySize = 20;
	  const seed = uint8ArrayFromString$b('key expansion');
	  const resultLength = 2 * (ivSize + cipherKeySize + hmacKeySize);

	  const m = await hmac$3.create(hash, secret);
	  let a = await m.digest(seed);

	  const result = [];
	  let j = 0;

	  while (j < resultLength) {
	    const b = await m.digest(uint8ArrayConcat$5([a, seed]));
	    let todo = b.length;

	    if (j + todo > resultLength) {
	      todo = resultLength - j;
	    }

	    result.push(b);
	    j += todo;
	    a = await m.digest(a);
	  }

	  const half = resultLength / 2;
	  const resultBuffer = uint8ArrayConcat$5(result);
	  const r1 = resultBuffer.slice(0, half);
	  const r2 = resultBuffer.slice(half, resultLength);

	  const createKey = (res) => ({
	    iv: res.slice(0, ivSize),
	    cipherKey: res.slice(ivSize, ivSize + cipherKeySize),
	    macKey: res.slice(ivSize + cipherKeySize)
	  });

	  return {
	    k1: createKey(r1),
	    k2: createKey(r2)
	  }
	};

	var ecdhBrowser = {};

	const errcode$q = errCode$q;

	var validateCurveType$1 = function (curveTypes, type) {
	  if (!curveTypes.includes(type)) {
	    const names = curveTypes.join(' / ');
	    throw errcode$q(new Error(`Unknown curve: ${type}. Must be ${names}`), 'ERR_INVALID_CURVE')
	  }
	};

	const errcode$p = errCode$q;
	const webcrypto = webcrypto$4;
	const { base64urlToBuffer } = util$5;
	const validateCurveType = validateCurveType$1;
	const { toString: uint8ArrayToString$d } = require$$8;
	const { concat: uint8ArrayConcat$4 } = require$$9;
	const { equals: uint8ArrayEquals$3 } = require$$7$1;

	const bits = {
	  'P-256': 256,
	  'P-384': 384,
	  'P-521': 521
	};

	ecdhBrowser.generateEphmeralKeyPair = async function (curve) {
	  validateCurveType(Object.keys(bits), curve);
	  const pair = await webcrypto.get().subtle.generateKey(
	    {
	      name: 'ECDH',
	      namedCurve: curve
	    },
	    true,
	    ['deriveBits']
	  );

	  // forcePrivate is used for testing only
	  const genSharedKey = async (theirPub, forcePrivate) => {
	    let privateKey;

	    if (forcePrivate) {
	      privateKey = await webcrypto.get().subtle.importKey(
	        'jwk',
	        unmarshalPrivateKey$1(curve, forcePrivate),
	        {
	          name: 'ECDH',
	          namedCurve: curve
	        },
	        false,
	        ['deriveBits']
	      );
	    } else {
	      privateKey = pair.privateKey;
	    }

	    const keys = [
	      await webcrypto.get().subtle.importKey(
	        'jwk',
	        unmarshalPublicKey$2(curve, theirPub),
	        {
	          name: 'ECDH',
	          namedCurve: curve
	        },
	        false,
	        []
	      ),
	      privateKey
	    ];

	    const buffer = await webcrypto.get().subtle.deriveBits(
	      {
	        name: 'ECDH',
	        namedCurve: curve,
	        public: keys[0]
	      },
	      keys[1],
	      bits[curve]
	    );

	    return new Uint8Array(buffer, buffer.byteOffset, buffer.byteLength)
	  };

	  const publicKey = await webcrypto.get().subtle.exportKey('jwk', pair.publicKey);

	  return {
	    key: marshalPublicKey$2(publicKey),
	    genSharedKey
	  }
	};

	const curveLengths = {
	  'P-256': 32,
	  'P-384': 48,
	  'P-521': 66
	};

	// Marshal converts a jwk encodec ECDH public key into the
	// form specified in section 4.3.6 of ANSI X9.62. (This is the format
	// go-ipfs uses)
	function marshalPublicKey$2 (jwk) {
	  const byteLen = curveLengths[jwk.crv];

	  return uint8ArrayConcat$4([
	    Uint8Array.from([4]), // uncompressed point
	    base64urlToBuffer(jwk.x, byteLen),
	    base64urlToBuffer(jwk.y, byteLen)
	  ], 1 + byteLen * 2)
	}

	// Unmarshal converts a point, serialized by Marshal, into an jwk encoded key
	function unmarshalPublicKey$2 (curve, key) {
	  const byteLen = curveLengths[curve];

	  if (uint8ArrayEquals$3(!key.slice(0, 1), Uint8Array.from([4]))) {
	    throw errcode$p(new Error('Cannot unmarshal public key - invalid key format'), 'ERR_INVALID_KEY_FORMAT')
	  }

	  return {
	    kty: 'EC',
	    crv: curve,
	    x: uint8ArrayToString$d(key.slice(1, byteLen + 1), 'base64url'),
	    y: uint8ArrayToString$d(key.slice(1 + byteLen), 'base64url'),
	    ext: true
	  }
	}

	const unmarshalPrivateKey$1 = (curve, key) => ({
	  ...unmarshalPublicKey$2(curve, key.public),
	  d: uint8ArrayToString$d(key.private, 'base64url')
	});

	const ecdh = ecdhBrowser;

	// Generates an ephemeral public key and returns a function that will compute
	// the shared secret key.
	//
	// Focuses only on ECDH now, but can be made more general in the future.
	var ephemeralKeys = async (curve) => ecdh.generateEphmeralKeyPair(curve); // eslint-disable-line require-await

	const keysPBM = keys$3;


	const forge$9 = forge$z;
	const errcode$o = errCode$q;
	const { fromString: uint8ArrayFromString$a } = require$$5$3;

	const importer$1 = importer$2;

	const supportedKeys = {
	  rsa: rsaClass,
	  ed25519: ed25519Class,
	  secp256k1: secp256k1Class(keysPBM)
	};

	const ErrMissingSecp256K1 = {
	  message: 'secp256k1 support requires libp2p-crypto-secp256k1 package',
	  code: 'ERR_MISSING_PACKAGE'
	};

	function typeToKey (type) {
	  const key = supportedKeys[type.toLowerCase()];
	  if (!key) {
	    const supported = Object.keys(supportedKeys).join(' / ');
	    throw errcode$o(new Error(`invalid or unsupported key type ${type}. Must be ${supported}`), 'ERR_UNSUPPORTED_KEY_TYPE')
	  }
	  return key
	}

	// Generates a keypair of the given type and bitsize
	const generateKeyPair = async (type, bits) => { // eslint-disable-line require-await
	  return typeToKey(type).generateKeyPair(bits)
	};

	// Generates a keypair of the given type and bitsize
	// seed is a 32 byte uint8array
	const generateKeyPairFromSeed = async (type, seed, bits) => { // eslint-disable-line require-await
	  const key = typeToKey(type);
	  if (type.toLowerCase() !== 'ed25519') {
	    throw errcode$o(new Error('Seed key derivation is unimplemented for RSA or secp256k1'), 'ERR_UNSUPPORTED_KEY_DERIVATION_TYPE')
	  }
	  return key.generateKeyPairFromSeed(seed, bits)
	};

	// Converts a protobuf serialized public key into its
	// representative object
	const unmarshalPublicKey$1 = (buf) => {
	  const decoded = keysPBM.PublicKey.decode(buf);
	  const data = decoded.Data;

	  switch (decoded.Type) {
	    case keysPBM.KeyType.RSA:
	      return supportedKeys.rsa.unmarshalRsaPublicKey(data)
	    case keysPBM.KeyType.Ed25519:
	      return supportedKeys.ed25519.unmarshalEd25519PublicKey(data)
	    case keysPBM.KeyType.Secp256k1:
	      if (supportedKeys.secp256k1) {
	        return supportedKeys.secp256k1.unmarshalSecp256k1PublicKey(data)
	      } else {
	        throw errcode$o(new Error(ErrMissingSecp256K1.message), ErrMissingSecp256K1.code)
	      }
	    default:
	      typeToKey(decoded.Type); // throws because type is not supported
	  }
	};

	// Converts a public key object into a protobuf serialized public key
	const marshalPublicKey$1 = (key, type) => {
	  type = (type || 'rsa').toLowerCase();
	  typeToKey(type); // check type
	  return key.bytes
	};

	// Converts a protobuf serialized private key into its
	// representative object
	const unmarshalPrivateKey = async (buf) => { // eslint-disable-line require-await
	  const decoded = keysPBM.PrivateKey.decode(buf);
	  const data = decoded.Data;

	  switch (decoded.Type) {
	    case keysPBM.KeyType.RSA:
	      return supportedKeys.rsa.unmarshalRsaPrivateKey(data)
	    case keysPBM.KeyType.Ed25519:
	      return supportedKeys.ed25519.unmarshalEd25519PrivateKey(data)
	    case keysPBM.KeyType.Secp256k1:
	      if (supportedKeys.secp256k1) {
	        return supportedKeys.secp256k1.unmarshalSecp256k1PrivateKey(data)
	      } else {
	        throw errcode$o(new Error(ErrMissingSecp256K1.message), ErrMissingSecp256K1.code)
	      }
	    default:
	      typeToKey(decoded.Type); // throws because type is not supported
	  }
	};

	// Converts a private key object into a protobuf serialized private key
	const marshalPrivateKey = (key, type) => {
	  type = (type || 'rsa').toLowerCase();
	  typeToKey(type); // check type
	  return key.bytes
	};

	/**
	 *
	 * @param {string} encryptedKey
	 * @param {string} password
	 */
	const importKey = async (encryptedKey, password) => { // eslint-disable-line require-await
	  try {
	    const key = await importer$1.import(encryptedKey, password);
	    return unmarshalPrivateKey(key)
	  } catch (_) {
	    // Ignore and try the old pem decrypt
	  }

	  // Only rsa supports pem right now
	  const key = forge$9.pki.decryptRsaPrivateKey(encryptedKey, password);
	  if (key === null) {
	    throw errcode$o(new Error('Cannot read the key, most likely the password is wrong or not a RSA key'), 'ERR_CANNOT_DECRYPT_PEM')
	  }
	  let der = forge$9.asn1.toDer(forge$9.pki.privateKeyToAsn1(key));
	  der = uint8ArrayFromString$a(der.getBytes(), 'ascii');
	  return supportedKeys.rsa.unmarshalRsaPrivateKey(der)
	};

	var keys$2 = {
	  supportedKeys,
	  keysPBM,
	  keyStretcher: keyStretcher,
	  generateEphemeralKeyPair: ephemeralKeys,
	  generateKeyPair,
	  generateKeyPairFromSeed,
	  unmarshalPublicKey: unmarshalPublicKey$1,
	  marshalPublicKey: marshalPublicKey$1,
	  unmarshalPrivateKey,
	  marshalPrivateKey,
	  import: importKey
	};

	var classIs = {exports: {}};

	function withIs$2(Class, { className, symbolName }) {
	    const symbol = Symbol.for(symbolName);

	    const ClassIsWrapper = {
	        // The code below assigns the class wrapper to an object to trick
	        // JavaScript engines to show the name of the extended class when
	        // logging an instances.
	        // We are assigning an anonymous class (class wrapper) to the object
	        // with key `className` to keep the correct name.
	        // If this is not supported it falls back to logging `ClassIsWrapper`.
	        [className]: class extends Class {
	            constructor(...args) {
	                super(...args);
	                Object.defineProperty(this, symbol, { value: true });
	            }

	            get [Symbol.toStringTag]() {
	                return className;
	            }
	        },
	    }[className];

	    ClassIsWrapper[`is${className}`] = (obj) => !!(obj && obj[symbol]);

	    return ClassIsWrapper;
	}

	function withIsProto(Class, { className, symbolName, withoutNew }) {
	    const symbol = Symbol.for(symbolName);

	    /* eslint-disable object-shorthand */
	    const ClassIsWrapper = {
	        [className]: function (...args) {
	            if (withoutNew && !(this instanceof ClassIsWrapper)) {
	                return new ClassIsWrapper(...args);
	            }

	            const _this = Class.call(this, ...args) || this;

	            if (_this && !_this[symbol]) {
	                Object.defineProperty(_this, symbol, { value: true });
	            }

	            return _this;
	        },
	    }[className];
	    /* eslint-enable object-shorthand */

	    ClassIsWrapper.prototype = Object.create(Class.prototype);
	    ClassIsWrapper.prototype.constructor = ClassIsWrapper;

	    Object.defineProperty(ClassIsWrapper.prototype, Symbol.toStringTag, {
	        get() {
	            return className;
	        },
	    });

	    ClassIsWrapper[`is${className}`] = (obj) => !!(obj && obj[symbol]);

	    return ClassIsWrapper;
	}

	classIs.exports = withIs$2;
	classIs.exports.proto = withIsProto;

	/*eslint-disable*/

	var $protobuf$9 = minimal;

	// Common aliases
	var $Reader$h = $protobuf$9.Reader, $Writer$h = $protobuf$9.Writer, $util$g = $protobuf$9.util;

	// Exported root namespace
	var $root$h = $protobuf$9.roots["libp2p-peer-id"] || ($protobuf$9.roots["libp2p-peer-id"] = {});

	$root$h.PeerIdProto = (function() {

	    /**
	     * Properties of a PeerIdProto.
	     * @exports IPeerIdProto
	     * @interface IPeerIdProto
	     * @property {Uint8Array} id PeerIdProto id
	     * @property {Uint8Array|null} [pubKey] PeerIdProto pubKey
	     * @property {Uint8Array|null} [privKey] PeerIdProto privKey
	     */

	    /**
	     * Constructs a new PeerIdProto.
	     * @exports PeerIdProto
	     * @classdesc Represents a PeerIdProto.
	     * @implements IPeerIdProto
	     * @constructor
	     * @param {IPeerIdProto=} [p] Properties to set
	     */
	    function PeerIdProto(p) {
	        if (p)
	            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                if (p[ks[i]] != null)
	                    this[ks[i]] = p[ks[i]];
	    }

	    /**
	     * PeerIdProto id.
	     * @member {Uint8Array} id
	     * @memberof PeerIdProto
	     * @instance
	     */
	    PeerIdProto.prototype.id = $util$g.newBuffer([]);

	    /**
	     * PeerIdProto pubKey.
	     * @member {Uint8Array} pubKey
	     * @memberof PeerIdProto
	     * @instance
	     */
	    PeerIdProto.prototype.pubKey = $util$g.newBuffer([]);

	    /**
	     * PeerIdProto privKey.
	     * @member {Uint8Array} privKey
	     * @memberof PeerIdProto
	     * @instance
	     */
	    PeerIdProto.prototype.privKey = $util$g.newBuffer([]);

	    /**
	     * Encodes the specified PeerIdProto message. Does not implicitly {@link PeerIdProto.verify|verify} messages.
	     * @function encode
	     * @memberof PeerIdProto
	     * @static
	     * @param {IPeerIdProto} m PeerIdProto message or plain object to encode
	     * @param {$protobuf.Writer} [w] Writer to encode to
	     * @returns {$protobuf.Writer} Writer
	     */
	    PeerIdProto.encode = function encode(m, w) {
	        if (!w)
	            w = $Writer$h.create();
	        w.uint32(10).bytes(m.id);
	        if (m.pubKey != null && Object.hasOwnProperty.call(m, "pubKey"))
	            w.uint32(18).bytes(m.pubKey);
	        if (m.privKey != null && Object.hasOwnProperty.call(m, "privKey"))
	            w.uint32(26).bytes(m.privKey);
	        return w;
	    };

	    /**
	     * Decodes a PeerIdProto message from the specified reader or buffer.
	     * @function decode
	     * @memberof PeerIdProto
	     * @static
	     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	     * @param {number} [l] Message length if known beforehand
	     * @returns {PeerIdProto} PeerIdProto
	     * @throws {Error} If the payload is not a reader or valid buffer
	     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	     */
	    PeerIdProto.decode = function decode(r, l) {
	        if (!(r instanceof $Reader$h))
	            r = $Reader$h.create(r);
	        var c = l === undefined ? r.len : r.pos + l, m = new $root$h.PeerIdProto();
	        while (r.pos < c) {
	            var t = r.uint32();
	            switch (t >>> 3) {
	            case 1:
	                m.id = r.bytes();
	                break;
	            case 2:
	                m.pubKey = r.bytes();
	                break;
	            case 3:
	                m.privKey = r.bytes();
	                break;
	            default:
	                r.skipType(t & 7);
	                break;
	            }
	        }
	        if (!m.hasOwnProperty("id"))
	            throw $util$g.ProtocolError("missing required 'id'", { instance: m });
	        return m;
	    };

	    /**
	     * Creates a PeerIdProto message from a plain object. Also converts values to their respective internal types.
	     * @function fromObject
	     * @memberof PeerIdProto
	     * @static
	     * @param {Object.<string,*>} d Plain object
	     * @returns {PeerIdProto} PeerIdProto
	     */
	    PeerIdProto.fromObject = function fromObject(d) {
	        if (d instanceof $root$h.PeerIdProto)
	            return d;
	        var m = new $root$h.PeerIdProto();
	        if (d.id != null) {
	            if (typeof d.id === "string")
	                $util$g.base64.decode(d.id, m.id = $util$g.newBuffer($util$g.base64.length(d.id)), 0);
	            else if (d.id.length)
	                m.id = d.id;
	        }
	        if (d.pubKey != null) {
	            if (typeof d.pubKey === "string")
	                $util$g.base64.decode(d.pubKey, m.pubKey = $util$g.newBuffer($util$g.base64.length(d.pubKey)), 0);
	            else if (d.pubKey.length)
	                m.pubKey = d.pubKey;
	        }
	        if (d.privKey != null) {
	            if (typeof d.privKey === "string")
	                $util$g.base64.decode(d.privKey, m.privKey = $util$g.newBuffer($util$g.base64.length(d.privKey)), 0);
	            else if (d.privKey.length)
	                m.privKey = d.privKey;
	        }
	        return m;
	    };

	    /**
	     * Creates a plain object from a PeerIdProto message. Also converts values to other types if specified.
	     * @function toObject
	     * @memberof PeerIdProto
	     * @static
	     * @param {PeerIdProto} m PeerIdProto
	     * @param {$protobuf.IConversionOptions} [o] Conversion options
	     * @returns {Object.<string,*>} Plain object
	     */
	    PeerIdProto.toObject = function toObject(m, o) {
	        if (!o)
	            o = {};
	        var d = {};
	        if (o.defaults) {
	            if (o.bytes === String)
	                d.id = "";
	            else {
	                d.id = [];
	                if (o.bytes !== Array)
	                    d.id = $util$g.newBuffer(d.id);
	            }
	            if (o.bytes === String)
	                d.pubKey = "";
	            else {
	                d.pubKey = [];
	                if (o.bytes !== Array)
	                    d.pubKey = $util$g.newBuffer(d.pubKey);
	            }
	            if (o.bytes === String)
	                d.privKey = "";
	            else {
	                d.privKey = [];
	                if (o.bytes !== Array)
	                    d.privKey = $util$g.newBuffer(d.privKey);
	            }
	        }
	        if (m.id != null && m.hasOwnProperty("id")) {
	            d.id = o.bytes === String ? $util$g.base64.encode(m.id, 0, m.id.length) : o.bytes === Array ? Array.prototype.slice.call(m.id) : m.id;
	        }
	        if (m.pubKey != null && m.hasOwnProperty("pubKey")) {
	            d.pubKey = o.bytes === String ? $util$g.base64.encode(m.pubKey, 0, m.pubKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.pubKey) : m.pubKey;
	        }
	        if (m.privKey != null && m.hasOwnProperty("privKey")) {
	            d.privKey = o.bytes === String ? $util$g.base64.encode(m.privKey, 0, m.privKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.privKey) : m.privKey;
	        }
	        return d;
	    };

	    /**
	     * Converts this PeerIdProto to JSON.
	     * @function toJSON
	     * @memberof PeerIdProto
	     * @instance
	     * @returns {Object.<string,*>} JSON object
	     */
	    PeerIdProto.prototype.toJSON = function toJSON() {
	        return this.constructor.toObject(this, $protobuf$9.util.toJSONOptions);
	    };

	    return PeerIdProto;
	})();

	var proto$1 = $root$h;

	/*
	 * Id is an object representation of a peer Id. a peer Id is a multihash
	 */

	(function (module, exports) {

	const { CID } = require$$0$3;
	const b32 = require$$5$4;
	const b36 = require$$2$1;
	const b58 = require$$2$2;
	const b64 = require$$4$1;
	const { base58btc } = require$$2$2;
	const { base32 } = require$$5$4;
	const { base16 } = require$$5$2;
	const Digest = require$$6;
	const cryptoKeys = keys$2;
	const withIs = classIs.exports;
	const { PeerIdProto } = proto$1;
	const { equals: uint8ArrayEquals } = require$$7$1;
	const { fromString: uint8ArrayFromString } = require$$5$3;
	const { toString: uint8ArrayToString } = require$$8;
	const { identity } = require$$13;

	const bases = {
	  ...b32,
	  ...b36,
	  ...b58,
	  ...b64
	};
	const baseDecoder = Object.keys(bases).reduce(
	  (acc, curr) => acc.or(bases[curr]),
	  base32.decoder
	);

	// these values are from https://github.com/multiformats/multicodec/blob/master/table.csv
	const DAG_PB_CODE = 0x70;
	const LIBP2P_KEY_CODE = 0x72;

	class PeerId {
	  constructor (id, privKey, pubKey) {
	    if (!(id instanceof Uint8Array)) {
	      throw new Error('invalid id provided')
	    }

	    if (privKey && pubKey && !uint8ArrayEquals(privKey.public.bytes, pubKey.bytes)) {
	      throw new Error('inconsistent arguments')
	    }

	    this._id = id;
	    this._idB58String = base58btc.encode(this.id).substring(1);
	    this._privKey = privKey;
	    this._pubKey = pubKey;
	  }

	  get id () {
	    return this._id
	  }

	  set id (val) {
	    throw new Error('Id is immutable')
	  }

	  get privKey () {
	    return this._privKey
	  }

	  set privKey (privKey) {
	    this._privKey = privKey;
	  }

	  get pubKey () {
	    if (this._pubKey) {
	      return this._pubKey
	    }

	    if (this._privKey) {
	      return this._privKey.public
	    }

	    try {
	      const decoded = Digest.decode(this.id);

	      if (decoded.code === identity.code) {
	        this._pubKey = cryptoKeys.unmarshalPublicKey(decoded.digest);
	      }
	    } catch (_) {
	      // Ignore, there is no valid public key
	    }

	    return this._pubKey
	  }

	  set pubKey (pubKey) {
	    this._pubKey = pubKey;
	  }

	  // Return the protobuf version of the public key, matching go ipfs formatting
	  marshalPubKey () {
	    if (this.pubKey) {
	      return cryptoKeys.marshalPublicKey(this.pubKey)
	    }
	  }

	  // Return the protobuf version of the private key, matching go ipfs formatting
	  marshalPrivKey () {
	    if (this.privKey) {
	      return cryptoKeys.marshalPrivateKey(this.privKey)
	    }
	  }

	  // Return the protobuf version of the peer-id
	  marshal (excludePriv) {
	    return PeerIdProto.encode({
	      id: this.toBytes(),
	      pubKey: this.marshalPubKey(),
	      privKey: excludePriv ? null : this.marshalPrivKey()
	    }).finish()
	  }

	  toPrint () {
	    let pid = this.toB58String();
	    // All sha256 nodes start with Qm
	    // We can skip the Qm to make the peer.ID more useful
	    if (pid.startsWith('Qm')) {
	      pid = pid.slice(2);
	    }
	    let maxRunes = 6;
	    if (pid.length < maxRunes) {
	      maxRunes = pid.length;
	    }

	    return '<peer.ID ' + pid.substr(0, maxRunes) + '>'
	  }

	  // return the jsonified version of the key, matching the formatting
	  // of go-ipfs for its config file
	  toJSON () {
	    return {
	      id: this.toB58String(),
	      privKey: toB64Opt(this.marshalPrivKey()),
	      pubKey: toB64Opt(this.marshalPubKey())
	    }
	  }

	  // encode/decode functions
	  toHexString () {
	    return base16.encode(this.id).substring(1)
	  }

	  toBytes () {
	    return this.id
	  }

	  toB58String () {
	    return this._idB58String
	  }

	  // return self-describing String representation
	  // in default format from RFC 0001: https://github.com/libp2p/specs/pull/209
	  toString () {
	    if (!this._idCIDString) {
	      const cid = CID.createV1(LIBP2P_KEY_CODE, Digest.decode(this.id));

	      Object.defineProperty(this, '_idCIDString', {
	        value: cid.toString(),
	        enumerable: false
	      });
	    }
	    return this._idCIDString
	  }

	  /**
	   * Checks the equality of `this` peer against a given PeerId.
	   *
	   * @param {Uint8Array|PeerId} id
	   * @returns {boolean}
	   */
	  equals (id) {
	    if (id instanceof Uint8Array) {
	      return uint8ArrayEquals(this.id, id)
	    } else if (id.id) {
	      return uint8ArrayEquals(this.id, id.id)
	    } else {
	      throw new Error('not valid Id')
	    }
	  }

	  /**
	   * Checks the equality of `this` peer against a given PeerId.
	   *
	   * @deprecated Use `.equals`
	   * @param {Uint8Array|PeerId} id
	   * @returns {boolean}
	   */
	  isEqual (id) {
	    return this.equals(id)
	  }

	  /*
	   * Check if this PeerId instance is valid (privKey -> pubKey -> Id)
	   */
	  isValid () {
	    // TODO: needs better checking
	    return Boolean(this.privKey &&
	      this.privKey.public &&
	      this.privKey.public.bytes &&
	      this.pubKey.bytes instanceof Uint8Array &&
	        uint8ArrayEquals(this.privKey.public.bytes, this.pubKey.bytes))
	  }

	  /**
	   * Check if the PeerId has an inline public key.
	   *
	   * @returns {boolean}
	   */
	  hasInlinePublicKey () {
	    try {
	      const decoded = Digest.decode(this.id);

	      if (decoded.code === identity.code) {
	        return true
	      }
	    } catch (_) {
	      // Ignore, there is no valid public key
	    }

	    return false
	  }
	}

	const PeerIdWithIs = withIs(PeerId, {
	  className: 'PeerId',
	  symbolName: '@libp2p/js-peer-id/PeerId'
	});

	exports = module.exports = PeerIdWithIs;

	const computeDigest = (pubKey) => {
	  if (pubKey.bytes.length <= 42) {
	    return Digest.create(identity.code, pubKey.bytes).bytes
	  } else {
	    return pubKey.hash()
	  }
	};

	const computePeerId = async (privKey, pubKey) => {
	  const digest = await computeDigest(pubKey);
	  return new PeerIdWithIs(digest, privKey, pubKey)
	};

	// generation
	exports.create = async (opts) => {
	  opts = opts || {};
	  opts.bits = opts.bits || 2048;
	  opts.keyType = opts.keyType || 'RSA';

	  const key = await cryptoKeys.generateKeyPair(opts.keyType, opts.bits);
	  return computePeerId(key, key.public)
	};

	exports.createFromHexString = (str) => {
	  return new PeerIdWithIs(base16.decode('f' + str))
	};

	exports.createFromBytes = (buf) => {
	  try {
	    const cid = CID.decode(buf);

	    if (!validMulticodec(cid)) {
	      throw new Error('Supplied PeerID CID is invalid')
	    }

	    return exports.createFromCID(cid)
	  } catch {
	    const digest = Digest.decode(buf);

	    if (digest.code !== identity.code) {
	      throw new Error('Supplied PeerID CID is invalid')
	    }

	    return new PeerIdWithIs(buf)
	  }
	};

	exports.createFromB58String = (str) => {
	  return exports.createFromBytes(base58btc.decode('z' + str))
	};

	const validMulticodec = (cid) => {
	  // supported: 'libp2p-key' (CIDv1) and 'dag-pb' (CIDv0 converted to CIDv1)
	  return cid.code === LIBP2P_KEY_CODE || cid.code === DAG_PB_CODE
	};

	exports.createFromCID = (cid) => {
	  cid = CID.asCID(cid);

	  if (!cid || !validMulticodec(cid)) {
	    throw new Error('Supplied PeerID CID is invalid')
	  }

	  return new PeerIdWithIs(cid.multihash.bytes)
	};

	// Public Key input will be a Uint8Array
	exports.createFromPubKey = async (key) => {
	  let buf = key;

	  if (typeof buf === 'string') {
	    buf = uint8ArrayFromString(key, 'base64pad');
	  }

	  if (!(buf instanceof Uint8Array)) {
	    throw new Error('Supplied key is neither a base64 string nor a Uint8Array')
	  }

	  const pubKey = await cryptoKeys.unmarshalPublicKey(buf);
	  return computePeerId(undefined, pubKey)
	};

	// Private key input will be a string
	exports.createFromPrivKey = async (key) => {
	  if (typeof key === 'string') {
	    key = uint8ArrayFromString(key, 'base64pad');
	  }

	  if (!(key instanceof Uint8Array)) {
	    throw new Error('Supplied key is neither a base64 string nor a Uint8Array')
	  }

	  const privKey = await cryptoKeys.unmarshalPrivateKey(key);
	  return computePeerId(privKey, privKey.public)
	};

	exports.createFromJSON = async (obj) => {
	  const id = base58btc.decode('z' + obj.id);
	  const rawPrivKey = obj.privKey && uint8ArrayFromString(obj.privKey, 'base64pad');
	  const rawPubKey = obj.pubKey && uint8ArrayFromString(obj.pubKey, 'base64pad');
	  const pub = rawPubKey && await cryptoKeys.unmarshalPublicKey(rawPubKey);

	  if (!rawPrivKey) {
	    return new PeerIdWithIs(id, undefined, pub)
	  }

	  const privKey = await cryptoKeys.unmarshalPrivateKey(rawPrivKey);
	  const privDigest = await computeDigest(privKey.public);

	  let pubDigest;

	  if (pub) {
	    pubDigest = await computeDigest(pub);
	  }

	  if (pub && !uint8ArrayEquals(privDigest, pubDigest)) {
	    throw new Error('Public and private key do not match')
	  }

	  if (id && !uint8ArrayEquals(privDigest, id)) {
	    throw new Error('Id and private key do not match')
	  }

	  return new PeerIdWithIs(id, privKey, pub)
	};

	exports.createFromProtobuf = async (buf) => {
	  if (typeof buf === 'string') {
	    buf = uint8ArrayFromString(buf, 'base16');
	  }

	  let { id, privKey, pubKey } = PeerIdProto.decode(buf);

	  privKey = privKey ? await cryptoKeys.unmarshalPrivateKey(privKey) : false;
	  pubKey = pubKey ? await cryptoKeys.unmarshalPublicKey(pubKey) : false;

	  let pubDigest;
	  let privDigest;

	  if (privKey) {
	    privDigest = await computeDigest(privKey.public);
	  }

	  if (pubKey) {
	    pubDigest = await computeDigest(pubKey);
	  }

	  if (privKey) {
	    if (pubKey) {
	      if (!uint8ArrayEquals(privDigest, pubDigest)) {
	        throw new Error('Public and private key do not match')
	      }
	    }
	    return new PeerIdWithIs(privDigest, privKey, privKey.public)
	  }

	  // TODO: val id and pubDigest

	  if (pubKey) {
	    return new PeerIdWithIs(pubDigest, undefined, pubKey)
	  }

	  if (id) {
	    return new PeerIdWithIs(id)
	  }

	  throw new Error('Protobuf did not contain any usable key material')
	};

	exports.parse = (str) => {
	  if (str.charAt(0) === '1' || str.charAt(0) === 'Q') {
	    // identity hash ed25519 key or sha2-256 hash of rsa public key
	    // base58btc encoded either way
	    str = `z${str}`;
	  }

	  return exports.createFromBytes(baseDecoder.decode(str))
	};

	exports.isPeerId = (peerId) => {
	  return Boolean(typeof peerId === 'object' &&
	    peerId._id &&
	    peerId._idB58String)
	};

	function toB64Opt (val) {
	  if (val) {
	    return uint8ArrayToString(val, 'base64pad')
	  }
	}
	}(src$o, src$o.exports));

	var PeerIdImport = src$o.exports;

	function createResolve$5({repo, codecs, bases, name}) {
	  async function resolve(path, opts = {}) {
	    if (!src$q.path(path)) {
	      throw new Error('invalid argument ' + path);
	    }
	    if (src$q.ipnsPath(path)) {
	      for await (const resolvedPath of name.resolve(path, opts)) {
	        path = resolvedPath;
	      }
	    }
	    const [, schema, hash, ...rest] = path.split('/');
	    const base = opts.cidBase ? await bases.getBase(opts.cidBase) : undefined;
	    const bytes = parseBytes(hash);
	    if (rest.length === 0) {
	      const str = base ? base.encoder.encode(bytes) : hash;
	      return `/${ schema }/${ str }`;
	    }
	    const cid = CID$6.decode(bytes);
	    path = rest.join('/');
	    const results = resolve$5(cid, path, codecs, repo, opts);
	    let value = cid;
	    let remainderPath = path;
	    for await (const result of results) {
	      if (CID$6.asCID(result.value)) {
	        value = result.value;
	        remainderPath = result.remainderPath;
	      }
	    }
	    return `/ipfs/${ value.toString(base && base.encoder) }${ remainderPath ? '/' + remainderPath : '' }`;
	  }
	  return withTimeoutOption(resolve);
	}
	function parseBytes(str) {
	  try {
	    return PeerIdImport.parse(str).toBytes();
	  } catch {
	    return CID$6.parse(str).bytes;
	  }
	}

	/**
	 * Returns the last item of an (async) iterable, unless empty, in which case
	 * return `undefined`.
	 *
	 * @template T
	 * @param {AsyncIterable<T>|Iterable<T>} source
	 */
	const last = async (source) => {
	  let res;

	  for await (const entry of source) {
	    res = entry;
	  }

	  return res
	};

	var itLast = last;

	function createAdd$7({addAll}) {
	  return (path, options = {}) => {
	    let iter;
	    const cid = CID$6.asCID(path);
	    if (cid) {
	      iter = addAll([{
	          cid,
	          ...options
	        }], options);
	    } else {
	      iter = addAll([{
	          path: path.toString(),
	          ...options
	        }], options);
	    }
	    return itLast(iter);
	  };
	}

	async function* normaliseInput$3(input) {
	  if (input === null || input === undefined) {
	    throw errCode$q(new Error(`Unexpected input: ${ input }`), 'ERR_UNEXPECTED_INPUT');
	  }
	  const cid = CID$6.asCID(input);
	  if (cid) {
	    yield toPin$2({ cid });
	    return;
	  }
	  if (input instanceof String || typeof input === 'string') {
	    yield toPin$2({ path: input });
	    return;
	  }
	  if (input.cid != null || input.path != null) {
	    return yield toPin$2(input);
	  }
	  if (Symbol.iterator in input) {
	    const iterator = input[Symbol.iterator]();
	    const first = iterator.next();
	    if (first.done)
	      return iterator;
	    if (CID$6.asCID(first.value) || first.value instanceof String || typeof first.value === 'string') {
	      yield toPin$2({ cid: first.value });
	      for (const cid of iterator) {
	        yield toPin$2({ cid });
	      }
	      return;
	    }
	    if (first.value.cid != null || first.value.path != null) {
	      yield toPin$2(first.value);
	      for (const obj of iterator) {
	        yield toPin$2(obj);
	      }
	      return;
	    }
	    throw errCode$q(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');
	  }
	  if (Symbol.asyncIterator in input) {
	    const iterator = input[Symbol.asyncIterator]();
	    const first = await iterator.next();
	    if (first.done)
	      return iterator;
	    if (CID$6.asCID(first.value) || first.value instanceof String || typeof first.value === 'string') {
	      yield toPin$2({ cid: first.value });
	      for await (const cid of iterator) {
	        yield toPin$2({ cid });
	      }
	      return;
	    }
	    if (first.value.cid != null || first.value.path != null) {
	      yield toPin$2(first.value);
	      for await (const obj of iterator) {
	        yield toPin$2(obj);
	      }
	      return;
	    }
	    throw errCode$q(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');
	  }
	  throw errCode$q(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');
	}
	function toPin$2(input) {
	  const path = input.cid || `${ input.path }`;
	  if (!path) {
	    throw errCode$q(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT');
	  }
	  const pin = {
	    path,
	    recursive: input.recursive !== false
	  };
	  if (input.metadata != null) {
	    pin.metadata = input.metadata;
	  }
	  return pin;
	}

	const PinTypes$1 = {
	  direct: 'direct',
	  recursive: 'recursive',
	  indirect: 'indirect',
	  all: 'all'
	};

	function createAddAll$3({repo, codecs}) {
	  async function* addAll(source, options = {}) {
	    const pinAdd = async function* () {
	      for await (const {path, recursive, metadata} of normaliseInput$3(source)) {
	        const {cid} = await resolvePath$1(repo, codecs, path);
	        const {reason} = await repo.pins.isPinnedWithType(cid, [
	          PinTypes$1.recursive,
	          PinTypes$1.direct
	        ]);
	        if (reason === 'recursive' && !recursive) {
	          throw new Error(`${ cid } already pinned recursively`);
	        }
	        if (recursive) {
	          await repo.pins.pinRecursively(cid, { metadata });
	        } else {
	          await repo.pins.pinDirectly(cid, { metadata });
	        }
	        yield cid;
	      }
	    };
	    const lock = Boolean(options.lock);
	    if (!lock) {
	      yield* pinAdd();
	      return;
	    }
	    const release = await repo.gcLock.readLock();
	    try {
	      yield* pinAdd();
	    } finally {
	      release();
	    }
	  }
	  return withTimeoutOption(addAll);
	}

	function toPin$1(type, cid, metadata) {
	  const output = {
	    type,
	    cid
	  };
	  if (metadata) {
	    output.metadata = metadata;
	  }
	  return output;
	}
	function createLs$9({repo, codecs}) {
	  async function* ls(options = {}) {
	    let type = PinTypes$1.all;
	    if (options.type) {
	      type = options.type;
	      if (!Object.keys(PinTypes$1).includes(type)) {
	        throw errCode$q(new Error('Invalid pin type'), 'ERR_INVALID_PIN_TYPE');
	      }
	    }
	    if (options.paths) {
	      let matched = false;
	      for await (const {path} of normaliseInput$3(options.paths)) {
	        const {cid} = await resolvePath$1(repo, codecs, path);
	        const {reason, pinned, parent, metadata} = await repo.pins.isPinnedWithType(cid, type);
	        if (!pinned) {
	          throw errCode$q(new Error(`path '${ path }' is not pinned`), 'ERR_NOT_PINNED');
	        }
	        switch (reason) {
	        case PinTypes$1.direct:
	        case PinTypes$1.recursive:
	          matched = true;
	          yield toPin$1(reason, cid, metadata);
	          break;
	        default:
	          matched = true;
	          yield toPin$1(`${ PinTypes$1.indirect } through ${ parent }`, cid, metadata);
	        }
	      }
	      if (!matched) {
	        throw new Error('No match found');
	      }
	      return;
	    }
	    if (type === PinTypes$1.recursive || type === PinTypes$1.all) {
	      for await (const {cid, metadata} of repo.pins.recursiveKeys()) {
	        yield toPin$1(PinTypes$1.recursive, cid, metadata);
	      }
	    }
	    if (type === PinTypes$1.indirect || type === PinTypes$1.all) {
	      for await (const cid of repo.pins.indirectKeys(options)) {
	        yield toPin$1(PinTypes$1.indirect, cid);
	      }
	    }
	    if (type === PinTypes$1.direct || type === PinTypes$1.all) {
	      for await (const {cid, metadata} of repo.pins.directKeys()) {
	        yield toPin$1(PinTypes$1.direct, cid, metadata);
	      }
	    }
	  }
	  return withTimeoutOption(ls);
	}

	function createRm$b({rmAll}) {
	  async function rm(path, options = {}) {
	    const cid = await itLast(rmAll([{
	        path,
	        ...options
	      }], options));
	    if (!cid) {
	      throw new Error('CID expected');
	    }
	    return cid;
	  }
	  return rm;
	}

	function createRmAll$2({repo, codecs}) {
	  async function* rmAll(source, _options = {}) {
	    const release = await repo.gcLock.readLock();
	    try {
	      for await (const {path, recursive} of normaliseInput$3(source)) {
	        const {cid} = await resolvePath$1(repo, codecs, path);
	        const {pinned, reason} = await repo.pins.isPinnedWithType(cid, PinTypes$1.all);
	        if (!pinned) {
	          throw new Error(`${ cid } is not pinned`);
	        }
	        switch (reason) {
	        case PinTypes$1.recursive:
	          if (!recursive) {
	            throw new Error(`${ cid } is pinned recursively`);
	          }
	          await repo.pins.unpin(cid);
	          yield cid;
	          break;
	        case PinTypes$1.direct:
	          await repo.pins.unpin(cid);
	          yield cid;
	          break;
	        default:
	          throw new Error(`${ cid } is pinned indirectly under ${ reason }`);
	        }
	      }
	    } finally {
	      release();
	    }
	  }
	  return withTimeoutOption(rmAll);
	}

	class PinAPI {
	  constructor({codecs, repo}) {
	    const addAll = createAddAll$3({
	      codecs,
	      repo
	    });
	    this.addAll = addAll;
	    this.add = createAdd$7({ addAll });
	    const rmAll = createRmAll$2({
	      codecs,
	      repo
	    });
	    this.rmAll = rmAll;
	    this.rm = createRm$b({ rmAll });
	    this.ls = createLs$9({
	      codecs,
	      repo
	    });
	    this.remote = {
	      add: (cid, options = {}) => Promise.reject(new Error('Not implemented')),
	      ls: async function* (query, options = {}) {
	        return Promise.reject(new Error('Not implemented'));
	      },
	      rm: (query, options = {}) => Promise.reject(new Error('Not implemented')),
	      rmAll: (query, options = {}) => Promise.reject(new Error('Not implemented')),
	      service: {
	        add: (name, credentials) => Promise.reject(new Error('Not implemented')),
	        rm: (name, options = {}) => Promise.reject(new Error('Not implemented')),
	        ls: (options = {}) => Promise.reject(new Error('Not implemented'))
	      }
	    };
	  }
	}

	function dbOpenFailedError(err) {
	  err = err || new Error('Cannot open database');
	  return errCode$q(err, 'ERR_DB_OPEN_FAILED');
	}
	function dbDeleteFailedError(err) {
	  err = err || new Error('Delete failed');
	  return errCode$q(err, 'ERR_DB_DELETE_FAILED');
	}
	function dbWriteFailedError(err) {
	  err = err || new Error('Write failed');
	  return errCode$q(err, 'ERR_DB_WRITE_FAILED');
	}
	function notFoundError$1(err) {
	  err = err || new Error('Not Found');
	  return errCode$q(err, 'ERR_NOT_FOUND');
	}
	function abortedError$1(err) {
	  err = err || new Error('Aborted');
	  return errCode$q(err, 'ERR_ABORTED');
	}

	var ErrorsImport$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		dbOpenFailedError: dbOpenFailedError,
		dbDeleteFailedError: dbDeleteFailedError,
		dbWriteFailedError: dbWriteFailedError,
		notFoundError: notFoundError$1,
		abortedError: abortedError$1
	});

	var timestamp = {exports: {}};

	/**
	 * Timestamp for 64-bit time_t, nanosecond precision and strftime
	 *
	 * @author Yusuke Kawasaki
	 * @license MIT
	 * @see https://github.com/kawanet/timestamp-nano
	 */

	(function (module) {
	((function() {
	  module.exports = Timestamp;

	  var SEC_DAY = 24 * 3600; // seconds per day
	  var YEAR_SLOT = 3200; // years per slot
	  var DAY_SLOT = (365 * 400 + 97) * YEAR_SLOT / 400; // days per slot
	  var SEC_SLOT = SEC_DAY * DAY_SLOT; // seconds per slot
	  var MSEC_SLOT = SEC_SLOT * 1000; // mseconds per slot

	  // 15.9.1.1 Time Values and Time Range
	  // The actual range of times supported by ECMAScript Date objects is
	  // exactly –100,000,000 days to 100,000,000 days measured relative to
	  // midnight at the beginning of 01 January, 1970 UTC.
	  var MAX_MSEC = 1000 * 10000 * 10000 * SEC_DAY;

	  var BIT24 = 0x1000000;
	  var BIT32 = 0x10000 * 0x10000;
	  var DEC6 = 1000 * 1000;
	  var DEC9 = 1000 * 1000 * 1000;
	  var ZERO9 = "000000000";

	  var trunc = Math.trunc || Math_trunc;
	  var P = Timestamp.prototype;

	  // static methods
	  Timestamp.fromDate = fromDate;
	  Timestamp.fromInt64BE = buildFromInt64(0, 1, 2, 3, 0, 4);
	  Timestamp.fromInt64LE = buildFromInt64(3, 2, 1, 0, 4, 0);
	  Timestamp.fromString = fromString;
	  Timestamp.fromTimeT = fromTimeT;

	  // private properties
	  P.year = 0; // Offset number for year precision
	  P.time = 0; // Milliseconds from epoch
	  P.nano = 0; // Offset number for nanosecond precision

	  // instance methods
	  P.addNano = addNano;
	  P.getNano = getNano;
	  P.getTimeT = getTimeT;
	  P.getYear = getYear;
	  P.toDate = toDate;
	  P.toJSON = toJSON;
	  P.toString = toString;
	  P.writeInt64BE = buildWriteInt64(0, 1, 2, 3, 0, 4);
	  P.writeInt64LE = buildWriteInt64(3, 2, 1, 0, 4, 0);

	  var FMT_JSON = "%Y-%m-%dT%H:%M:%S.%NZ";

	  var FMT_MONTH = [
	    "Jan", "Feb", "Mar", "Apr", "May", "Jun",
	    "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
	  ];

	  var FMT_DAY = [
	    "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"
	  ];

	  var FMT_STRING = {
	    "%": "%",
	    F: "%Y-%m-%d",
	    n: "\n",
	    R: "%H:%M",
	    T: "%H:%M:%S",
	    t: "\t",
	    X: "%T",
	    Z: "GMT",
	    z: "+0000"
	  };

	  return Timestamp;

	  function Timestamp(time, nano, year) {
	    var ts = this;
	    if (!(ts instanceof Timestamp)) return new Timestamp(time, nano, year);
	    ts.time = +time || 0;
	    ts.nano = +nano || 0;
	    ts.year = +year || 0;
	    normalize(ts);
	  }

	  function getYear() {
	    var year = this.toDate().getUTCFullYear();
	    return year + this.year;
	  }

	  function normalize(ts) {
	    var year = ts.year;
	    var time = ts.time;
	    var nano = ts.nano;
	    var changed;
	    var slot;

	    // normalize nano
	    if (nano < 0 || DEC6 <= nano) {
	      var n = Math.floor(nano / DEC6);
	      nano -= n * DEC6;
	      time += n;
	      changed = 1;
	    }

	    var y = year % YEAR_SLOT;
	    if (time < -MAX_MSEC || MAX_MSEC < time || y) {
	      // shrink time into the minimal slot
	      slot = trunc(time / MSEC_SLOT);
	      if (slot) {
	        year += slot * YEAR_SLOT;
	        time -= slot * MSEC_SLOT;
	      }

	      // add year offset smaller than a slot
	      var dt = newDate(time);
	      dt.setUTCFullYear(y + dt.getUTCFullYear());
	      year -= y;
	      time = +dt;

	      // use full range of 100 million days.
	      slot = trunc(year / YEAR_SLOT);
	      var total = time + slot * MSEC_SLOT;
	      if (slot && -MAX_MSEC <= total && total <= MAX_MSEC) {
	        year -= slot * YEAR_SLOT;
	        time = total;
	      }

	      changed = 1;
	    }

	    if (changed) {
	      ts.year = year;
	      ts.time = time;
	      ts.nano = nano;
	    }

	    return ts;
	  }

	  function toDate() {
	    var ts = normalize(this);
	    return newDate(ts.time);
	  }

	  function newDate(time) {
	    var dt = new Date(0);
	    dt.setTime(time);
	    return dt;
	  }

	  function addNano(nano) {
	    this.nano += +nano || 0;
	    return this;
	  }

	  function getNano() {
	    var ts = normalize(this);
	    return ((ts.time % 1000) * DEC6 + (+ts.nano) + DEC9) % DEC9;
	  }

	  function fromString(string) {
	    var time;
	    var ts = new Timestamp();
	    string += "";

	    var array = string.replace(/^\s*[+\-]?\d+/, function(match) {
	      var year = +match;
	      // Use only years around 1970 to avoid Date's terrible behavior:
	      // 15.9.4.3 Date.UTC
	      // If y is not NaN and 0 <= y <= 99, then let yr be 1900+y
	      var y = 1970 + ((year - 1970) % 400);
	      ts.year = year - y;
	      return y;
	    }).replace(/(?:Z|([+\-]\d{2}):?(\d{2}))$/, function(match, hour, min) {
	      // time zone
	      if (hour < 0) min *= -1;
	      time = ((+hour) * 60 + (+min)) * 60000;
	      return "";
	    }).replace(/\.\d+$/, function(match) {
	      // nanoseconds
	      ts.nano = +((match + ZERO9).substr(1, 9));
	      return "";
	    }).split(/\D+/);

	    if (array.length > 1) {
	      array[1]--; // month starts from 0
	    } else {
	      array[1] = 0;
	    }

	    ts.time = time = Date.UTC.apply(Date, array) - (time || 0);

	    if (isNaN(time)) {
	      throw new TypeError("Invalid Date");
	    }

	    return normalize(ts);
	  }

	  function fromDate(date) {
	    return new Timestamp(+date);
	  }

	  function fromTimeT(time) {
	    return fromTime(time, 0);
	  }

	  function fromTime(low, high) {
	    high |= 0;
	    high *= BIT32;
	    low = +low || 0;

	    // slot count
	    var slot = trunc(high / SEC_SLOT) + trunc(low / SEC_SLOT);

	    // seconds within slot
	    var second = (high % SEC_SLOT) + (low % SEC_SLOT);

	    // slot offset
	    var offset = trunc(second / SEC_SLOT);
	    if (offset) {
	      slot += offset;
	      second -= offset * SEC_SLOT;
	    }

	    return new Timestamp(second * 1000, 0, slot * YEAR_SLOT);
	  }

	  function getTimeT() {
	    var ts = normalize(this);
	    var time = Math.floor(ts.time / 1000);

	    var year = ts.year;
	    if (year) time += year * DAY_SLOT * SEC_DAY / YEAR_SLOT;

	    // this may loose some bits over than 53 bit precision
	    return time;
	  }

	  function toJSON() {
	    return this.toString().replace(/0{1,6}Z$/, "Z");
	  }

	  function toString(format) {
	    var ts = this;
	    var dt = ts.toDate();
	    var map = {
	      H: H,
	      L: L,
	      M: M,
	      N: N,
	      S: S,
	      Y: Y,
	      a: a,
	      b: b,
	      d: d,
	      e: e,
	      m: m
	    };

	    return strftime(format || FMT_JSON);

	    function strftime(format) {
	      return format.replace(/%./g, function(match) {
	        var m = match[1];
	        var c = FMT_STRING[m];
	        var f = map[m];
	        return c ? strftime(c) : f ? f() : match;
	      });
	    }

	    function Y() {
	      var year = ts.getYear();
	      if (year > 999999) {
	        return "+" + year;
	      } else if (year > 9999) {
	        return "+" + pad(year, 6);
	      } else if (year >= 0) {
	        return pad(year, 4);
	      } else if (year >= -999999) {
	        return "-" + pad(-year, 6);
	      } else {
	        return year;
	      }
	    }

	    function m() {
	      return pad2(dt.getUTCMonth() + 1);
	    }

	    function d() {
	      return pad2(dt.getUTCDate());
	    }

	    function e() {
	      return padS(dt.getUTCDate());
	    }

	    function H() {
	      return pad2(dt.getUTCHours());
	    }

	    function M() {
	      return pad2(dt.getUTCMinutes());
	    }

	    function S() {
	      return pad2(dt.getUTCSeconds());
	    }

	    function L() {
	      return pad(dt.getUTCMilliseconds(), 3);
	    }

	    function N() {
	      return pad(ts.getNano(), 9);
	    }

	    function a() {
	      return FMT_DAY[dt.getUTCDay()];
	    }

	    function b() {
	      return FMT_MONTH[dt.getUTCMonth()];
	    }
	  }

	  function buildWriteInt64(pos0, pos1, pos2, pos3, posH, posL) {
	    return writeInt64;

	    function writeInt64(buffer, offset) {
	      var ts = normalize(this);
	      if (!buffer) buffer = new Array(8);
	      checkRange(buffer, offset |= 0);

	      var second = Math.floor(ts.time / 1000);
	      var day = ts.year * (DAY_SLOT * SEC_DAY / YEAR_SLOT);
	      var high = trunc(day / BIT32) + trunc(second / BIT32);
	      var low = (day % BIT32) + (second % BIT32);

	      // slot offset
	      var slot = Math.floor(low / BIT32);
	      if (slot) {
	        high += slot;
	        low -= slot * BIT32;
	      }

	      writeUint32(buffer, offset + posH, high);
	      writeUint32(buffer, offset + posL, low);
	      return buffer;
	    }

	    function writeUint32(buffer, offset, value) {
	      buffer[offset + pos0] = (value >> 24) & 255;
	      buffer[offset + pos1] = (value >> 16) & 255;
	      buffer[offset + pos2] = (value >> 8) & 255;
	      buffer[offset + pos3] = value & 255;
	    }
	  }

	  function buildFromInt64(pos0, pos1, pos2, pos3, posH, posL) {
	    return fromInt64;

	    function fromInt64(buffer, offset) {
	      checkRange(buffer, offset |= 0);
	      var high = readUint32(buffer, offset + posH);
	      var low = readUint32(buffer, offset + posL);
	      return fromTime(low, high);
	    }

	    function readUint32(buffer, offset) {
	      return (buffer[offset + pos0] * BIT24) +
	        ((buffer[offset + pos1] << 16) |
	          (buffer[offset + pos2] << 8) |
	          buffer[offset + pos3]);
	    }
	  }

	  function checkRange(buffer, offset) {
	    var last = buffer && buffer.length;
	    if (last == null) throw new TypeError("Invalid Buffer");
	    if (last < offset + 8) throw new RangeError("Out of range");
	  }

	  function Math_trunc(x) {
	    var n = x - x % 1;
	    return n === 0 && (x < 0 || (x === 0 && (1 / x !== 1 / 0))) ? -0 : n;
	  }

	  function padS(v) {
	    return (v > 9 ? "" : " ") + (v | 0);
	  }

	  function pad2(v) {
	    return (v > 9 ? "" : "0") + (v | 0);
	  }

	  function pad(v, len) {
	    return (ZERO9 + (v | 0)).substr(-len);
	  }
	}))();
	}(timestamp));

	var NanoDate = timestamp.exports;

	var src$n = {};

	var aes$1 = {};

	const forge$8 = forge$z;
	const { toString: uint8ArrayToString$c } = require$$8;
	const { fromString: uint8ArrayFromString$9 } = require$$5$3;

	var ciphersBrowser = {
	  createCipheriv: (mode, key, iv) => {
	    const cipher2 = forge$8.cipher.createCipher('AES-CTR', uint8ArrayToString$c(key, 'ascii'));
	    cipher2.start({ iv: uint8ArrayToString$c(iv, 'ascii') });
	    return {
	      update: (data) => {
	        cipher2.update(forge$8.util.createBuffer(uint8ArrayToString$c(data, 'ascii')));
	        return uint8ArrayFromString$9(cipher2.output.getBytes(), 'ascii')
	      }
	    }
	  },
	  createDecipheriv: (mode, key, iv) => {
	    const cipher2 = forge$8.cipher.createDecipher('AES-CTR', uint8ArrayToString$c(key, 'ascii'));
	    cipher2.start({ iv: uint8ArrayToString$c(iv, 'ascii') });
	    return {
	      update: (data) => {
	        cipher2.update(forge$8.util.createBuffer(uint8ArrayToString$c(data, 'ascii')));
	        return uint8ArrayFromString$9(cipher2.output.getBytes(), 'ascii')
	      }
	    }
	  }
	};

	const errcode$n = errCode$q;

	const CIPHER_MODES = {
	  16: 'aes-128-ctr',
	  32: 'aes-256-ctr'
	};

	var cipherMode$1 = function (key) {
	  const mode = CIPHER_MODES[key.length];
	  if (!mode) {
	    const modes = Object.entries(CIPHER_MODES).map(([k, v]) => `${k} (${v})`).join(' / ');
	    throw errcode$n(new Error(`Invalid key length ${key.length} bytes. Must be ${modes}`), 'ERR_INVALID_KEY_LENGTH')
	  }
	  return mode
	};

	const ciphers = ciphersBrowser;
	const cipherMode = cipherMode$1;

	aes$1.create = async function (key, iv) { // eslint-disable-line require-await
	  const mode = cipherMode(key);
	  const cipher = ciphers.createCipheriv(mode, key, iv);
	  const decipher = ciphers.createDecipheriv(mode, key, iv);

	  const res = {
	    async encrypt (data) { // eslint-disable-line require-await
	      return cipher.update(data)
	    },

	    async decrypt (data) { // eslint-disable-line require-await
	      return decipher.update(data)
	    }
	  };

	  return res
	};

	const forgePbkdf2 = pbkdf2$1;
	const forgeUtil = util$8.exports;
	const errcode$m = errCode$q;

	/**
	 * Maps an IPFS hash name to its node-forge equivalent.
	 *
	 * See https://github.com/multiformats/multihash/blob/master/hashtable.csv
	 *
	 * @private
	 */
	const hashName = {
	  sha1: 'sha1',
	  'sha2-256': 'sha256',
	  'sha2-512': 'sha512'
	};

	/**
	 * Computes the Password-Based Key Derivation Function 2.
	 *
	 * @param {string} password
	 * @param {string} salt
	 * @param {number} iterations
	 * @param {number} keySize - (in bytes)
	 * @param {string} hash - The hash name ('sha1', 'sha2-512, ...)
	 * @returns {string} - A new password
	 */
	function pbkdf2 (password, salt, iterations, keySize, hash) {
	  const hasher = hashName[hash];
	  if (!hasher) {
	    const types = Object.keys(hashName).join(' / ');
	    throw errcode$m(new Error(`Hash '${hash}' is unknown or not supported. Must be ${types}`), 'ERR_UNSUPPORTED_HASH_TYPE')
	  }
	  const dek = forgePbkdf2(
	    password,
	    salt,
	    iterations,
	    keySize,
	    hasher);
	  return forgeUtil.encode64(dek)
	}

	var pbkdf2_1 = pbkdf2;

	const hmac$2 = indexBrowser;
	const aes = aes$1;
	const keys$1 = keys$2;

	src$n.aes = aes;
	src$n.hmac = hmac$2;
	src$n.keys = keys$1;
	src$n.randomBytes = randomBytes_1;
	src$n.pbkdf2 = pbkdf2_1;

	var long = Long;

	/**
	 * wasm optimizations, to do native i64 multiplication and divide
	 */
	var wasm = null;

	try {
	  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
	    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11
	  ])), {}).exports;
	} catch (e) {
	  // no wasm support :(
	}

	/**
	 * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
	 *  See the from* functions below for more convenient ways of constructing Longs.
	 * @exports Long
	 * @class A Long class for representing a 64 bit two's-complement integer value.
	 * @param {number} low The low (signed) 32 bits of the long
	 * @param {number} high The high (signed) 32 bits of the long
	 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
	 * @constructor
	 */
	function Long(low, high, unsigned) {

	    /**
	     * The low 32 bits as a signed value.
	     * @type {number}
	     */
	    this.low = low | 0;

	    /**
	     * The high 32 bits as a signed value.
	     * @type {number}
	     */
	    this.high = high | 0;

	    /**
	     * Whether unsigned or not.
	     * @type {boolean}
	     */
	    this.unsigned = !!unsigned;
	}

	// The internal representation of a long is the two given signed, 32-bit values.
	// We use 32-bit pieces because these are the size of integers on which
	// Javascript performs bit-operations.  For operations like addition and
	// multiplication, we split each number into 16 bit pieces, which can easily be
	// multiplied within Javascript's floating-point representation without overflow
	// or change in sign.
	//
	// In the algorithms below, we frequently reduce the negative case to the
	// positive case by negating the input(s) and then post-processing the result.
	// Note that we must ALWAYS check specially whether those values are MIN_VALUE
	// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
	// a positive number, it overflows back into a negative).  Not handling this
	// case would often result in infinite recursion.
	//
	// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
	// methods on which they depend.

	/**
	 * An indicator used to reliably determine if an object is a Long or not.
	 * @type {boolean}
	 * @const
	 * @private
	 */
	Long.prototype.__isLong__;

	Object.defineProperty(Long.prototype, "__isLong__", { value: true });

	/**
	 * @function
	 * @param {*} obj Object
	 * @returns {boolean}
	 * @inner
	 */
	function isLong(obj) {
	    return (obj && obj["__isLong__"]) === true;
	}

	/**
	 * Tests if the specified object is a Long.
	 * @function
	 * @param {*} obj Object
	 * @returns {boolean}
	 */
	Long.isLong = isLong;

	/**
	 * A cache of the Long representations of small integer values.
	 * @type {!Object}
	 * @inner
	 */
	var INT_CACHE = {};

	/**
	 * A cache of the Long representations of small unsigned integer values.
	 * @type {!Object}
	 * @inner
	 */
	var UINT_CACHE = {};

	/**
	 * @param {number} value
	 * @param {boolean=} unsigned
	 * @returns {!Long}
	 * @inner
	 */
	function fromInt(value, unsigned) {
	    var obj, cachedObj, cache;
	    if (unsigned) {
	        value >>>= 0;
	        if (cache = (0 <= value && value < 256)) {
	            cachedObj = UINT_CACHE[value];
	            if (cachedObj)
	                return cachedObj;
	        }
	        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
	        if (cache)
	            UINT_CACHE[value] = obj;
	        return obj;
	    } else {
	        value |= 0;
	        if (cache = (-128 <= value && value < 128)) {
	            cachedObj = INT_CACHE[value];
	            if (cachedObj)
	                return cachedObj;
	        }
	        obj = fromBits(value, value < 0 ? -1 : 0, false);
	        if (cache)
	            INT_CACHE[value] = obj;
	        return obj;
	    }
	}

	/**
	 * Returns a Long representing the given 32 bit integer value.
	 * @function
	 * @param {number} value The 32 bit integer in question
	 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
	 * @returns {!Long} The corresponding Long value
	 */
	Long.fromInt = fromInt;

	/**
	 * @param {number} value
	 * @param {boolean=} unsigned
	 * @returns {!Long}
	 * @inner
	 */
	function fromNumber(value, unsigned) {
	    if (isNaN(value))
	        return unsigned ? UZERO : ZERO;
	    if (unsigned) {
	        if (value < 0)
	            return UZERO;
	        if (value >= TWO_PWR_64_DBL)
	            return MAX_UNSIGNED_VALUE;
	    } else {
	        if (value <= -TWO_PWR_63_DBL)
	            return MIN_VALUE;
	        if (value + 1 >= TWO_PWR_63_DBL)
	            return MAX_VALUE;
	    }
	    if (value < 0)
	        return fromNumber(-value, unsigned).neg();
	    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
	}

	/**
	 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
	 * @function
	 * @param {number} value The number in question
	 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
	 * @returns {!Long} The corresponding Long value
	 */
	Long.fromNumber = fromNumber;

	/**
	 * @param {number} lowBits
	 * @param {number} highBits
	 * @param {boolean=} unsigned
	 * @returns {!Long}
	 * @inner
	 */
	function fromBits(lowBits, highBits, unsigned) {
	    return new Long(lowBits, highBits, unsigned);
	}

	/**
	 * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
	 *  assumed to use 32 bits.
	 * @function
	 * @param {number} lowBits The low 32 bits
	 * @param {number} highBits The high 32 bits
	 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
	 * @returns {!Long} The corresponding Long value
	 */
	Long.fromBits = fromBits;

	/**
	 * @function
	 * @param {number} base
	 * @param {number} exponent
	 * @returns {number}
	 * @inner
	 */
	var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

	/**
	 * @param {string} str
	 * @param {(boolean|number)=} unsigned
	 * @param {number=} radix
	 * @returns {!Long}
	 * @inner
	 */
	function fromString(str, unsigned, radix) {
	    if (str.length === 0)
	        throw Error('empty string');
	    if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
	        return ZERO;
	    if (typeof unsigned === 'number') {
	        // For goog.math.long compatibility
	        radix = unsigned,
	        unsigned = false;
	    } else {
	        unsigned = !! unsigned;
	    }
	    radix = radix || 10;
	    if (radix < 2 || 36 < radix)
	        throw RangeError('radix');

	    var p;
	    if ((p = str.indexOf('-')) > 0)
	        throw Error('interior hyphen');
	    else if (p === 0) {
	        return fromString(str.substring(1), unsigned, radix).neg();
	    }

	    // Do several (8) digits each time through the loop, so as to
	    // minimize the calls to the very expensive emulated div.
	    var radixToPower = fromNumber(pow_dbl(radix, 8));

	    var result = ZERO;
	    for (var i = 0; i < str.length; i += 8) {
	        var size = Math.min(8, str.length - i),
	            value = parseInt(str.substring(i, i + size), radix);
	        if (size < 8) {
	            var power = fromNumber(pow_dbl(radix, size));
	            result = result.mul(power).add(fromNumber(value));
	        } else {
	            result = result.mul(radixToPower);
	            result = result.add(fromNumber(value));
	        }
	    }
	    result.unsigned = unsigned;
	    return result;
	}

	/**
	 * Returns a Long representation of the given string, written using the specified radix.
	 * @function
	 * @param {string} str The textual representation of the Long
	 * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
	 * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
	 * @returns {!Long} The corresponding Long value
	 */
	Long.fromString = fromString;

	/**
	 * @function
	 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
	 * @param {boolean=} unsigned
	 * @returns {!Long}
	 * @inner
	 */
	function fromValue(val, unsigned) {
	    if (typeof val === 'number')
	        return fromNumber(val, unsigned);
	    if (typeof val === 'string')
	        return fromString(val, unsigned);
	    // Throws for non-objects, converts non-instanceof Long:
	    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
	}

	/**
	 * Converts the specified value to a Long using the appropriate from* function for its type.
	 * @function
	 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
	 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
	 * @returns {!Long}
	 */
	Long.fromValue = fromValue;

	// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
	// no runtime penalty for these.

	/**
	 * @type {number}
	 * @const
	 * @inner
	 */
	var TWO_PWR_16_DBL = 1 << 16;

	/**
	 * @type {number}
	 * @const
	 * @inner
	 */
	var TWO_PWR_24_DBL = 1 << 24;

	/**
	 * @type {number}
	 * @const
	 * @inner
	 */
	var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

	/**
	 * @type {number}
	 * @const
	 * @inner
	 */
	var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

	/**
	 * @type {number}
	 * @const
	 * @inner
	 */
	var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

	/**
	 * @type {!Long}
	 * @const
	 * @inner
	 */
	var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);

	/**
	 * @type {!Long}
	 * @inner
	 */
	var ZERO = fromInt(0);

	/**
	 * Signed zero.
	 * @type {!Long}
	 */
	Long.ZERO = ZERO;

	/**
	 * @type {!Long}
	 * @inner
	 */
	var UZERO = fromInt(0, true);

	/**
	 * Unsigned zero.
	 * @type {!Long}
	 */
	Long.UZERO = UZERO;

	/**
	 * @type {!Long}
	 * @inner
	 */
	var ONE = fromInt(1);

	/**
	 * Signed one.
	 * @type {!Long}
	 */
	Long.ONE = ONE;

	/**
	 * @type {!Long}
	 * @inner
	 */
	var UONE = fromInt(1, true);

	/**
	 * Unsigned one.
	 * @type {!Long}
	 */
	Long.UONE = UONE;

	/**
	 * @type {!Long}
	 * @inner
	 */
	var NEG_ONE = fromInt(-1);

	/**
	 * Signed negative one.
	 * @type {!Long}
	 */
	Long.NEG_ONE = NEG_ONE;

	/**
	 * @type {!Long}
	 * @inner
	 */
	var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);

	/**
	 * Maximum signed value.
	 * @type {!Long}
	 */
	Long.MAX_VALUE = MAX_VALUE;

	/**
	 * @type {!Long}
	 * @inner
	 */
	var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);

	/**
	 * Maximum unsigned value.
	 * @type {!Long}
	 */
	Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

	/**
	 * @type {!Long}
	 * @inner
	 */
	var MIN_VALUE = fromBits(0, 0x80000000|0, false);

	/**
	 * Minimum signed value.
	 * @type {!Long}
	 */
	Long.MIN_VALUE = MIN_VALUE;

	/**
	 * @alias Long.prototype
	 * @inner
	 */
	var LongPrototype = Long.prototype;

	/**
	 * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
	 * @returns {number}
	 */
	LongPrototype.toInt = function toInt() {
	    return this.unsigned ? this.low >>> 0 : this.low;
	};

	/**
	 * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
	 * @returns {number}
	 */
	LongPrototype.toNumber = function toNumber() {
	    if (this.unsigned)
	        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);
	    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
	};

	/**
	 * Converts the Long to a string written in the specified radix.
	 * @param {number=} radix Radix (2-36), defaults to 10
	 * @returns {string}
	 * @override
	 * @throws {RangeError} If `radix` is out of range
	 */
	LongPrototype.toString = function toString(radix) {
	    radix = radix || 10;
	    if (radix < 2 || 36 < radix)
	        throw RangeError('radix');
	    if (this.isZero())
	        return '0';
	    if (this.isNegative()) { // Unsigned Longs are never negative
	        if (this.eq(MIN_VALUE)) {
	            // We need to change the Long value before it can be negated, so we remove
	            // the bottom-most digit in this base and then recurse to do the rest.
	            var radixLong = fromNumber(radix),
	                div = this.div(radixLong),
	                rem1 = div.mul(radixLong).sub(this);
	            return div.toString(radix) + rem1.toInt().toString(radix);
	        } else
	            return '-' + this.neg().toString(radix);
	    }

	    // Do several (6) digits each time through the loop, so as to
	    // minimize the calls to the very expensive emulated div.
	    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
	        rem = this;
	    var result = '';
	    while (true) {
	        var remDiv = rem.div(radixToPower),
	            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
	            digits = intval.toString(radix);
	        rem = remDiv;
	        if (rem.isZero())
	            return digits + result;
	        else {
	            while (digits.length < 6)
	                digits = '0' + digits;
	            result = '' + digits + result;
	        }
	    }
	};

	/**
	 * Gets the high 32 bits as a signed integer.
	 * @returns {number} Signed high bits
	 */
	LongPrototype.getHighBits = function getHighBits() {
	    return this.high;
	};

	/**
	 * Gets the high 32 bits as an unsigned integer.
	 * @returns {number} Unsigned high bits
	 */
	LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
	    return this.high >>> 0;
	};

	/**
	 * Gets the low 32 bits as a signed integer.
	 * @returns {number} Signed low bits
	 */
	LongPrototype.getLowBits = function getLowBits() {
	    return this.low;
	};

	/**
	 * Gets the low 32 bits as an unsigned integer.
	 * @returns {number} Unsigned low bits
	 */
	LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
	    return this.low >>> 0;
	};

	/**
	 * Gets the number of bits needed to represent the absolute value of this Long.
	 * @returns {number}
	 */
	LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
	    if (this.isNegative()) // Unsigned Longs are never negative
	        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
	    var val = this.high != 0 ? this.high : this.low;
	    for (var bit = 31; bit > 0; bit--)
	        if ((val & (1 << bit)) != 0)
	            break;
	    return this.high != 0 ? bit + 33 : bit + 1;
	};

	/**
	 * Tests if this Long's value equals zero.
	 * @returns {boolean}
	 */
	LongPrototype.isZero = function isZero() {
	    return this.high === 0 && this.low === 0;
	};

	/**
	 * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
	 * @returns {boolean}
	 */
	LongPrototype.eqz = LongPrototype.isZero;

	/**
	 * Tests if this Long's value is negative.
	 * @returns {boolean}
	 */
	LongPrototype.isNegative = function isNegative() {
	    return !this.unsigned && this.high < 0;
	};

	/**
	 * Tests if this Long's value is positive.
	 * @returns {boolean}
	 */
	LongPrototype.isPositive = function isPositive() {
	    return this.unsigned || this.high >= 0;
	};

	/**
	 * Tests if this Long's value is odd.
	 * @returns {boolean}
	 */
	LongPrototype.isOdd = function isOdd() {
	    return (this.low & 1) === 1;
	};

	/**
	 * Tests if this Long's value is even.
	 * @returns {boolean}
	 */
	LongPrototype.isEven = function isEven() {
	    return (this.low & 1) === 0;
	};

	/**
	 * Tests if this Long's value equals the specified's.
	 * @param {!Long|number|string} other Other value
	 * @returns {boolean}
	 */
	LongPrototype.equals = function equals(other) {
	    if (!isLong(other))
	        other = fromValue(other);
	    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)
	        return false;
	    return this.high === other.high && this.low === other.low;
	};

	/**
	 * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
	 * @function
	 * @param {!Long|number|string} other Other value
	 * @returns {boolean}
	 */
	LongPrototype.eq = LongPrototype.equals;

	/**
	 * Tests if this Long's value differs from the specified's.
	 * @param {!Long|number|string} other Other value
	 * @returns {boolean}
	 */
	LongPrototype.notEquals = function notEquals(other) {
	    return !this.eq(/* validates */ other);
	};

	/**
	 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
	 * @function
	 * @param {!Long|number|string} other Other value
	 * @returns {boolean}
	 */
	LongPrototype.neq = LongPrototype.notEquals;

	/**
	 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
	 * @function
	 * @param {!Long|number|string} other Other value
	 * @returns {boolean}
	 */
	LongPrototype.ne = LongPrototype.notEquals;

	/**
	 * Tests if this Long's value is less than the specified's.
	 * @param {!Long|number|string} other Other value
	 * @returns {boolean}
	 */
	LongPrototype.lessThan = function lessThan(other) {
	    return this.comp(/* validates */ other) < 0;
	};

	/**
	 * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
	 * @function
	 * @param {!Long|number|string} other Other value
	 * @returns {boolean}
	 */
	LongPrototype.lt = LongPrototype.lessThan;

	/**
	 * Tests if this Long's value is less than or equal the specified's.
	 * @param {!Long|number|string} other Other value
	 * @returns {boolean}
	 */
	LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
	    return this.comp(/* validates */ other) <= 0;
	};

	/**
	 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
	 * @function
	 * @param {!Long|number|string} other Other value
	 * @returns {boolean}
	 */
	LongPrototype.lte = LongPrototype.lessThanOrEqual;

	/**
	 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
	 * @function
	 * @param {!Long|number|string} other Other value
	 * @returns {boolean}
	 */
	LongPrototype.le = LongPrototype.lessThanOrEqual;

	/**
	 * Tests if this Long's value is greater than the specified's.
	 * @param {!Long|number|string} other Other value
	 * @returns {boolean}
	 */
	LongPrototype.greaterThan = function greaterThan(other) {
	    return this.comp(/* validates */ other) > 0;
	};

	/**
	 * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
	 * @function
	 * @param {!Long|number|string} other Other value
	 * @returns {boolean}
	 */
	LongPrototype.gt = LongPrototype.greaterThan;

	/**
	 * Tests if this Long's value is greater than or equal the specified's.
	 * @param {!Long|number|string} other Other value
	 * @returns {boolean}
	 */
	LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
	    return this.comp(/* validates */ other) >= 0;
	};

	/**
	 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
	 * @function
	 * @param {!Long|number|string} other Other value
	 * @returns {boolean}
	 */
	LongPrototype.gte = LongPrototype.greaterThanOrEqual;

	/**
	 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
	 * @function
	 * @param {!Long|number|string} other Other value
	 * @returns {boolean}
	 */
	LongPrototype.ge = LongPrototype.greaterThanOrEqual;

	/**
	 * Compares this Long's value with the specified's.
	 * @param {!Long|number|string} other Other value
	 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
	 *  if the given one is greater
	 */
	LongPrototype.compare = function compare(other) {
	    if (!isLong(other))
	        other = fromValue(other);
	    if (this.eq(other))
	        return 0;
	    var thisNeg = this.isNegative(),
	        otherNeg = other.isNegative();
	    if (thisNeg && !otherNeg)
	        return -1;
	    if (!thisNeg && otherNeg)
	        return 1;
	    // At this point the sign bits are the same
	    if (!this.unsigned)
	        return this.sub(other).isNegative() ? -1 : 1;
	    // Both are positive if at least one is unsigned
	    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;
	};

	/**
	 * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
	 * @function
	 * @param {!Long|number|string} other Other value
	 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
	 *  if the given one is greater
	 */
	LongPrototype.comp = LongPrototype.compare;

	/**
	 * Negates this Long's value.
	 * @returns {!Long} Negated Long
	 */
	LongPrototype.negate = function negate() {
	    if (!this.unsigned && this.eq(MIN_VALUE))
	        return MIN_VALUE;
	    return this.not().add(ONE);
	};

	/**
	 * Negates this Long's value. This is an alias of {@link Long#negate}.
	 * @function
	 * @returns {!Long} Negated Long
	 */
	LongPrototype.neg = LongPrototype.negate;

	/**
	 * Returns the sum of this and the specified Long.
	 * @param {!Long|number|string} addend Addend
	 * @returns {!Long} Sum
	 */
	LongPrototype.add = function add(addend) {
	    if (!isLong(addend))
	        addend = fromValue(addend);

	    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

	    var a48 = this.high >>> 16;
	    var a32 = this.high & 0xFFFF;
	    var a16 = this.low >>> 16;
	    var a00 = this.low & 0xFFFF;

	    var b48 = addend.high >>> 16;
	    var b32 = addend.high & 0xFFFF;
	    var b16 = addend.low >>> 16;
	    var b00 = addend.low & 0xFFFF;

	    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
	    c00 += a00 + b00;
	    c16 += c00 >>> 16;
	    c00 &= 0xFFFF;
	    c16 += a16 + b16;
	    c32 += c16 >>> 16;
	    c16 &= 0xFFFF;
	    c32 += a32 + b32;
	    c48 += c32 >>> 16;
	    c32 &= 0xFFFF;
	    c48 += a48 + b48;
	    c48 &= 0xFFFF;
	    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
	};

	/**
	 * Returns the difference of this and the specified Long.
	 * @param {!Long|number|string} subtrahend Subtrahend
	 * @returns {!Long} Difference
	 */
	LongPrototype.subtract = function subtract(subtrahend) {
	    if (!isLong(subtrahend))
	        subtrahend = fromValue(subtrahend);
	    return this.add(subtrahend.neg());
	};

	/**
	 * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
	 * @function
	 * @param {!Long|number|string} subtrahend Subtrahend
	 * @returns {!Long} Difference
	 */
	LongPrototype.sub = LongPrototype.subtract;

	/**
	 * Returns the product of this and the specified Long.
	 * @param {!Long|number|string} multiplier Multiplier
	 * @returns {!Long} Product
	 */
	LongPrototype.multiply = function multiply(multiplier) {
	    if (this.isZero())
	        return ZERO;
	    if (!isLong(multiplier))
	        multiplier = fromValue(multiplier);

	    // use wasm support if present
	    if (wasm) {
	        var low = wasm.mul(this.low,
	                           this.high,
	                           multiplier.low,
	                           multiplier.high);
	        return fromBits(low, wasm.get_high(), this.unsigned);
	    }

	    if (multiplier.isZero())
	        return ZERO;
	    if (this.eq(MIN_VALUE))
	        return multiplier.isOdd() ? MIN_VALUE : ZERO;
	    if (multiplier.eq(MIN_VALUE))
	        return this.isOdd() ? MIN_VALUE : ZERO;

	    if (this.isNegative()) {
	        if (multiplier.isNegative())
	            return this.neg().mul(multiplier.neg());
	        else
	            return this.neg().mul(multiplier).neg();
	    } else if (multiplier.isNegative())
	        return this.mul(multiplier.neg()).neg();

	    // If both longs are small, use float multiplication
	    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
	        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

	    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
	    // We can skip products that would overflow.

	    var a48 = this.high >>> 16;
	    var a32 = this.high & 0xFFFF;
	    var a16 = this.low >>> 16;
	    var a00 = this.low & 0xFFFF;

	    var b48 = multiplier.high >>> 16;
	    var b32 = multiplier.high & 0xFFFF;
	    var b16 = multiplier.low >>> 16;
	    var b00 = multiplier.low & 0xFFFF;

	    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
	    c00 += a00 * b00;
	    c16 += c00 >>> 16;
	    c00 &= 0xFFFF;
	    c16 += a16 * b00;
	    c32 += c16 >>> 16;
	    c16 &= 0xFFFF;
	    c16 += a00 * b16;
	    c32 += c16 >>> 16;
	    c16 &= 0xFFFF;
	    c32 += a32 * b00;
	    c48 += c32 >>> 16;
	    c32 &= 0xFFFF;
	    c32 += a16 * b16;
	    c48 += c32 >>> 16;
	    c32 &= 0xFFFF;
	    c32 += a00 * b32;
	    c48 += c32 >>> 16;
	    c32 &= 0xFFFF;
	    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
	    c48 &= 0xFFFF;
	    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
	};

	/**
	 * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
	 * @function
	 * @param {!Long|number|string} multiplier Multiplier
	 * @returns {!Long} Product
	 */
	LongPrototype.mul = LongPrototype.multiply;

	/**
	 * Returns this Long divided by the specified. The result is signed if this Long is signed or
	 *  unsigned if this Long is unsigned.
	 * @param {!Long|number|string} divisor Divisor
	 * @returns {!Long} Quotient
	 */
	LongPrototype.divide = function divide(divisor) {
	    if (!isLong(divisor))
	        divisor = fromValue(divisor);
	    if (divisor.isZero())
	        throw Error('division by zero');

	    // use wasm support if present
	    if (wasm) {
	        // guard against signed division overflow: the largest
	        // negative number / -1 would be 1 larger than the largest
	        // positive number, due to two's complement.
	        if (!this.unsigned &&
	            this.high === -0x80000000 &&
	            divisor.low === -1 && divisor.high === -1) {
	            // be consistent with non-wasm code path
	            return this;
	        }
	        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(
	            this.low,
	            this.high,
	            divisor.low,
	            divisor.high
	        );
	        return fromBits(low, wasm.get_high(), this.unsigned);
	    }

	    if (this.isZero())
	        return this.unsigned ? UZERO : ZERO;
	    var approx, rem, res;
	    if (!this.unsigned) {
	        // This section is only relevant for signed longs and is derived from the
	        // closure library as a whole.
	        if (this.eq(MIN_VALUE)) {
	            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
	                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
	            else if (divisor.eq(MIN_VALUE))
	                return ONE;
	            else {
	                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
	                var halfThis = this.shr(1);
	                approx = halfThis.div(divisor).shl(1);
	                if (approx.eq(ZERO)) {
	                    return divisor.isNegative() ? ONE : NEG_ONE;
	                } else {
	                    rem = this.sub(divisor.mul(approx));
	                    res = approx.add(rem.div(divisor));
	                    return res;
	                }
	            }
	        } else if (divisor.eq(MIN_VALUE))
	            return this.unsigned ? UZERO : ZERO;
	        if (this.isNegative()) {
	            if (divisor.isNegative())
	                return this.neg().div(divisor.neg());
	            return this.neg().div(divisor).neg();
	        } else if (divisor.isNegative())
	            return this.div(divisor.neg()).neg();
	        res = ZERO;
	    } else {
	        // The algorithm below has not been made for unsigned longs. It's therefore
	        // required to take special care of the MSB prior to running it.
	        if (!divisor.unsigned)
	            divisor = divisor.toUnsigned();
	        if (divisor.gt(this))
	            return UZERO;
	        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
	            return UONE;
	        res = UZERO;
	    }

	    // Repeat the following until the remainder is less than other:  find a
	    // floating-point that approximates remainder / other *from below*, add this
	    // into the result, and subtract it from the remainder.  It is critical that
	    // the approximate value is less than or equal to the real value so that the
	    // remainder never becomes negative.
	    rem = this;
	    while (rem.gte(divisor)) {
	        // Approximate the result of division. This may be a little greater or
	        // smaller than the actual value.
	        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

	        // We will tweak the approximate result by changing it in the 48-th digit or
	        // the smallest non-fractional digit, whichever is larger.
	        var log2 = Math.ceil(Math.log(approx) / Math.LN2),
	            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),

	        // Decrease the approximation until it is smaller than the remainder.  Note
	        // that if it is too large, the product overflows and is negative.
	            approxRes = fromNumber(approx),
	            approxRem = approxRes.mul(divisor);
	        while (approxRem.isNegative() || approxRem.gt(rem)) {
	            approx -= delta;
	            approxRes = fromNumber(approx, this.unsigned);
	            approxRem = approxRes.mul(divisor);
	        }

	        // We know the answer can't be zero... and actually, zero would cause
	        // infinite recursion since we would make no progress.
	        if (approxRes.isZero())
	            approxRes = ONE;

	        res = res.add(approxRes);
	        rem = rem.sub(approxRem);
	    }
	    return res;
	};

	/**
	 * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
	 * @function
	 * @param {!Long|number|string} divisor Divisor
	 * @returns {!Long} Quotient
	 */
	LongPrototype.div = LongPrototype.divide;

	/**
	 * Returns this Long modulo the specified.
	 * @param {!Long|number|string} divisor Divisor
	 * @returns {!Long} Remainder
	 */
	LongPrototype.modulo = function modulo(divisor) {
	    if (!isLong(divisor))
	        divisor = fromValue(divisor);

	    // use wasm support if present
	    if (wasm) {
	        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(
	            this.low,
	            this.high,
	            divisor.low,
	            divisor.high
	        );
	        return fromBits(low, wasm.get_high(), this.unsigned);
	    }

	    return this.sub(this.div(divisor).mul(divisor));
	};

	/**
	 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
	 * @function
	 * @param {!Long|number|string} divisor Divisor
	 * @returns {!Long} Remainder
	 */
	LongPrototype.mod = LongPrototype.modulo;

	/**
	 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
	 * @function
	 * @param {!Long|number|string} divisor Divisor
	 * @returns {!Long} Remainder
	 */
	LongPrototype.rem = LongPrototype.modulo;

	/**
	 * Returns the bitwise NOT of this Long.
	 * @returns {!Long}
	 */
	LongPrototype.not = function not() {
	    return fromBits(~this.low, ~this.high, this.unsigned);
	};

	/**
	 * Returns the bitwise AND of this Long and the specified.
	 * @param {!Long|number|string} other Other Long
	 * @returns {!Long}
	 */
	LongPrototype.and = function and(other) {
	    if (!isLong(other))
	        other = fromValue(other);
	    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
	};

	/**
	 * Returns the bitwise OR of this Long and the specified.
	 * @param {!Long|number|string} other Other Long
	 * @returns {!Long}
	 */
	LongPrototype.or = function or(other) {
	    if (!isLong(other))
	        other = fromValue(other);
	    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
	};

	/**
	 * Returns the bitwise XOR of this Long and the given one.
	 * @param {!Long|number|string} other Other Long
	 * @returns {!Long}
	 */
	LongPrototype.xor = function xor(other) {
	    if (!isLong(other))
	        other = fromValue(other);
	    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
	};

	/**
	 * Returns this Long with bits shifted to the left by the given amount.
	 * @param {number|!Long} numBits Number of bits
	 * @returns {!Long} Shifted Long
	 */
	LongPrototype.shiftLeft = function shiftLeft(numBits) {
	    if (isLong(numBits))
	        numBits = numBits.toInt();
	    if ((numBits &= 63) === 0)
	        return this;
	    else if (numBits < 32)
	        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
	    else
	        return fromBits(0, this.low << (numBits - 32), this.unsigned);
	};

	/**
	 * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
	 * @function
	 * @param {number|!Long} numBits Number of bits
	 * @returns {!Long} Shifted Long
	 */
	LongPrototype.shl = LongPrototype.shiftLeft;

	/**
	 * Returns this Long with bits arithmetically shifted to the right by the given amount.
	 * @param {number|!Long} numBits Number of bits
	 * @returns {!Long} Shifted Long
	 */
	LongPrototype.shiftRight = function shiftRight(numBits) {
	    if (isLong(numBits))
	        numBits = numBits.toInt();
	    if ((numBits &= 63) === 0)
	        return this;
	    else if (numBits < 32)
	        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
	    else
	        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
	};

	/**
	 * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
	 * @function
	 * @param {number|!Long} numBits Number of bits
	 * @returns {!Long} Shifted Long
	 */
	LongPrototype.shr = LongPrototype.shiftRight;

	/**
	 * Returns this Long with bits logically shifted to the right by the given amount.
	 * @param {number|!Long} numBits Number of bits
	 * @returns {!Long} Shifted Long
	 */
	LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
	    if (isLong(numBits))
	        numBits = numBits.toInt();
	    numBits &= 63;
	    if (numBits === 0)
	        return this;
	    else {
	        var high = this.high;
	        if (numBits < 32) {
	            var low = this.low;
	            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
	        } else if (numBits === 32)
	            return fromBits(high, 0, this.unsigned);
	        else
	            return fromBits(high >>> (numBits - 32), 0, this.unsigned);
	    }
	};

	/**
	 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
	 * @function
	 * @param {number|!Long} numBits Number of bits
	 * @returns {!Long} Shifted Long
	 */
	LongPrototype.shru = LongPrototype.shiftRightUnsigned;

	/**
	 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
	 * @function
	 * @param {number|!Long} numBits Number of bits
	 * @returns {!Long} Shifted Long
	 */
	LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;

	/**
	 * Converts this Long to signed.
	 * @returns {!Long} Signed long
	 */
	LongPrototype.toSigned = function toSigned() {
	    if (!this.unsigned)
	        return this;
	    return fromBits(this.low, this.high, false);
	};

	/**
	 * Converts this Long to unsigned.
	 * @returns {!Long} Unsigned long
	 */
	LongPrototype.toUnsigned = function toUnsigned() {
	    if (this.unsigned)
	        return this;
	    return fromBits(this.low, this.high, true);
	};

	/**
	 * Converts this Long to its byte representation.
	 * @param {boolean=} le Whether little or big endian, defaults to big endian
	 * @returns {!Array.<number>} Byte representation
	 */
	LongPrototype.toBytes = function toBytes(le) {
	    return le ? this.toBytesLE() : this.toBytesBE();
	};

	/**
	 * Converts this Long to its little endian byte representation.
	 * @returns {!Array.<number>} Little endian byte representation
	 */
	LongPrototype.toBytesLE = function toBytesLE() {
	    var hi = this.high,
	        lo = this.low;
	    return [
	        lo        & 0xff,
	        lo >>>  8 & 0xff,
	        lo >>> 16 & 0xff,
	        lo >>> 24       ,
	        hi        & 0xff,
	        hi >>>  8 & 0xff,
	        hi >>> 16 & 0xff,
	        hi >>> 24
	    ];
	};

	/**
	 * Converts this Long to its big endian byte representation.
	 * @returns {!Array.<number>} Big endian byte representation
	 */
	LongPrototype.toBytesBE = function toBytesBE() {
	    var hi = this.high,
	        lo = this.low;
	    return [
	        hi >>> 24       ,
	        hi >>> 16 & 0xff,
	        hi >>>  8 & 0xff,
	        hi        & 0xff,
	        lo >>> 24       ,
	        lo >>> 16 & 0xff,
	        lo >>>  8 & 0xff,
	        lo        & 0xff
	    ];
	};

	/**
	 * Creates a Long from its byte representation.
	 * @param {!Array.<number>} bytes Byte representation
	 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
	 * @param {boolean=} le Whether little or big endian, defaults to big endian
	 * @returns {Long} The corresponding Long value
	 */
	Long.fromBytes = function fromBytes(bytes, unsigned, le) {
	    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
	};

	/**
	 * Creates a Long from its little endian byte representation.
	 * @param {!Array.<number>} bytes Little endian byte representation
	 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
	 * @returns {Long} The corresponding Long value
	 */
	Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
	    return new Long(
	        bytes[0]       |
	        bytes[1] <<  8 |
	        bytes[2] << 16 |
	        bytes[3] << 24,
	        bytes[4]       |
	        bytes[5] <<  8 |
	        bytes[6] << 16 |
	        bytes[7] << 24,
	        unsigned
	    );
	};

	/**
	 * Creates a Long from its big endian byte representation.
	 * @param {!Array.<number>} bytes Big endian byte representation
	 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
	 * @returns {Long} The corresponding Long value
	 */
	Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
	    return new Long(
	        bytes[4] << 24 |
	        bytes[5] << 16 |
	        bytes[6] <<  8 |
	        bytes[7],
	        bytes[0] << 24 |
	        bytes[1] << 16 |
	        bytes[2] <<  8 |
	        bytes[3],
	        unsigned
	    );
	};

	const $Reader$g = minimal.Reader, $Writer$g = minimal.Writer, $util$f = minimal.util;
	const $root$g = minimal.roots['ipfs-ipns'] || (minimal.roots['ipfs-ipns'] = {});
	const IpnsEntry = $root$g.IpnsEntry = (() => {
	  function IpnsEntry(p) {
	    if (p)
	      for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	        if (p[ks[i]] != null)
	          this[ks[i]] = p[ks[i]];
	  }
	  IpnsEntry.prototype.value = $util$f.newBuffer([]);
	  IpnsEntry.prototype.signature = $util$f.newBuffer([]);
	  IpnsEntry.prototype.validityType = 0;
	  IpnsEntry.prototype.validity = $util$f.newBuffer([]);
	  IpnsEntry.prototype.sequence = $util$f.Long ? $util$f.Long.fromBits(0, 0, true) : 0;
	  IpnsEntry.prototype.ttl = $util$f.Long ? $util$f.Long.fromBits(0, 0, true) : 0;
	  IpnsEntry.prototype.pubKey = $util$f.newBuffer([]);
	  IpnsEntry.prototype.signatureV2 = $util$f.newBuffer([]);
	  IpnsEntry.prototype.data = $util$f.newBuffer([]);
	  IpnsEntry.encode = function encode(m, w) {
	    if (!w)
	      w = $Writer$g.create();
	    if (m.value != null && Object.hasOwnProperty.call(m, 'value'))
	      w.uint32(10).bytes(m.value);
	    if (m.signature != null && Object.hasOwnProperty.call(m, 'signature'))
	      w.uint32(18).bytes(m.signature);
	    if (m.validityType != null && Object.hasOwnProperty.call(m, 'validityType'))
	      w.uint32(24).int32(m.validityType);
	    if (m.validity != null && Object.hasOwnProperty.call(m, 'validity'))
	      w.uint32(34).bytes(m.validity);
	    if (m.sequence != null && Object.hasOwnProperty.call(m, 'sequence'))
	      w.uint32(40).uint64(m.sequence);
	    if (m.ttl != null && Object.hasOwnProperty.call(m, 'ttl'))
	      w.uint32(48).uint64(m.ttl);
	    if (m.pubKey != null && Object.hasOwnProperty.call(m, 'pubKey'))
	      w.uint32(58).bytes(m.pubKey);
	    if (m.signatureV2 != null && Object.hasOwnProperty.call(m, 'signatureV2'))
	      w.uint32(66).bytes(m.signatureV2);
	    if (m.data != null && Object.hasOwnProperty.call(m, 'data'))
	      w.uint32(74).bytes(m.data);
	    return w;
	  };
	  IpnsEntry.decode = function decode(r, l) {
	    if (!(r instanceof $Reader$g))
	      r = $Reader$g.create(r);
	    var c = l === undefined ? r.len : r.pos + l, m = new $root$g.IpnsEntry();
	    while (r.pos < c) {
	      var t = r.uint32();
	      switch (t >>> 3) {
	      case 1:
	        m.value = r.bytes();
	        break;
	      case 2:
	        m.signature = r.bytes();
	        break;
	      case 3:
	        m.validityType = r.int32();
	        break;
	      case 4:
	        m.validity = r.bytes();
	        break;
	      case 5:
	        m.sequence = r.uint64();
	        break;
	      case 6:
	        m.ttl = r.uint64();
	        break;
	      case 7:
	        m.pubKey = r.bytes();
	        break;
	      case 8:
	        m.signatureV2 = r.bytes();
	        break;
	      case 9:
	        m.data = r.bytes();
	        break;
	      default:
	        r.skipType(t & 7);
	        break;
	      }
	    }
	    return m;
	  };
	  IpnsEntry.fromObject = function fromObject(d) {
	    if (d instanceof $root$g.IpnsEntry)
	      return d;
	    var m = new $root$g.IpnsEntry();
	    if (d.value != null) {
	      if (typeof d.value === 'string')
	        $util$f.base64.decode(d.value, m.value = $util$f.newBuffer($util$f.base64.length(d.value)), 0);
	      else if (d.value.length)
	        m.value = d.value;
	    }
	    if (d.signature != null) {
	      if (typeof d.signature === 'string')
	        $util$f.base64.decode(d.signature, m.signature = $util$f.newBuffer($util$f.base64.length(d.signature)), 0);
	      else if (d.signature.length)
	        m.signature = d.signature;
	    }
	    switch (d.validityType) {
	    case 'EOL':
	    case 0:
	      m.validityType = 0;
	      break;
	    }
	    if (d.validity != null) {
	      if (typeof d.validity === 'string')
	        $util$f.base64.decode(d.validity, m.validity = $util$f.newBuffer($util$f.base64.length(d.validity)), 0);
	      else if (d.validity.length)
	        m.validity = d.validity;
	    }
	    if (d.sequence != null) {
	      if ($util$f.Long)
	        (m.sequence = $util$f.Long.fromValue(d.sequence)).unsigned = true;
	      else if (typeof d.sequence === 'string')
	        m.sequence = parseInt(d.sequence, 10);
	      else if (typeof d.sequence === 'number')
	        m.sequence = d.sequence;
	      else if (typeof d.sequence === 'object')
	        m.sequence = new $util$f.LongBits(d.sequence.low >>> 0, d.sequence.high >>> 0).toNumber(true);
	    }
	    if (d.ttl != null) {
	      if ($util$f.Long)
	        (m.ttl = $util$f.Long.fromValue(d.ttl)).unsigned = true;
	      else if (typeof d.ttl === 'string')
	        m.ttl = parseInt(d.ttl, 10);
	      else if (typeof d.ttl === 'number')
	        m.ttl = d.ttl;
	      else if (typeof d.ttl === 'object')
	        m.ttl = new $util$f.LongBits(d.ttl.low >>> 0, d.ttl.high >>> 0).toNumber(true);
	    }
	    if (d.pubKey != null) {
	      if (typeof d.pubKey === 'string')
	        $util$f.base64.decode(d.pubKey, m.pubKey = $util$f.newBuffer($util$f.base64.length(d.pubKey)), 0);
	      else if (d.pubKey.length)
	        m.pubKey = d.pubKey;
	    }
	    if (d.signatureV2 != null) {
	      if (typeof d.signatureV2 === 'string')
	        $util$f.base64.decode(d.signatureV2, m.signatureV2 = $util$f.newBuffer($util$f.base64.length(d.signatureV2)), 0);
	      else if (d.signatureV2.length)
	        m.signatureV2 = d.signatureV2;
	    }
	    if (d.data != null) {
	      if (typeof d.data === 'string')
	        $util$f.base64.decode(d.data, m.data = $util$f.newBuffer($util$f.base64.length(d.data)), 0);
	      else if (d.data.length)
	        m.data = d.data;
	    }
	    return m;
	  };
	  IpnsEntry.toObject = function toObject(m, o) {
	    if (!o)
	      o = {};
	    var d = {};
	    if (o.defaults) {
	      if (o.bytes === String)
	        d.value = '';
	      else {
	        d.value = [];
	        if (o.bytes !== Array)
	          d.value = $util$f.newBuffer(d.value);
	      }
	      if (o.bytes === String)
	        d.signature = '';
	      else {
	        d.signature = [];
	        if (o.bytes !== Array)
	          d.signature = $util$f.newBuffer(d.signature);
	      }
	      d.validityType = o.enums === String ? 'EOL' : 0;
	      if (o.bytes === String)
	        d.validity = '';
	      else {
	        d.validity = [];
	        if (o.bytes !== Array)
	          d.validity = $util$f.newBuffer(d.validity);
	      }
	      if ($util$f.Long) {
	        var n = new $util$f.Long(0, 0, true);
	        d.sequence = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	      } else
	        d.sequence = o.longs === String ? '0' : 0;
	      if ($util$f.Long) {
	        var n = new $util$f.Long(0, 0, true);
	        d.ttl = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	      } else
	        d.ttl = o.longs === String ? '0' : 0;
	      if (o.bytes === String)
	        d.pubKey = '';
	      else {
	        d.pubKey = [];
	        if (o.bytes !== Array)
	          d.pubKey = $util$f.newBuffer(d.pubKey);
	      }
	      if (o.bytes === String)
	        d.signatureV2 = '';
	      else {
	        d.signatureV2 = [];
	        if (o.bytes !== Array)
	          d.signatureV2 = $util$f.newBuffer(d.signatureV2);
	      }
	      if (o.bytes === String)
	        d.data = '';
	      else {
	        d.data = [];
	        if (o.bytes !== Array)
	          d.data = $util$f.newBuffer(d.data);
	      }
	    }
	    if (m.value != null && m.hasOwnProperty('value')) {
	      d.value = o.bytes === String ? $util$f.base64.encode(m.value, 0, m.value.length) : o.bytes === Array ? Array.prototype.slice.call(m.value) : m.value;
	    }
	    if (m.signature != null && m.hasOwnProperty('signature')) {
	      d.signature = o.bytes === String ? $util$f.base64.encode(m.signature, 0, m.signature.length) : o.bytes === Array ? Array.prototype.slice.call(m.signature) : m.signature;
	    }
	    if (m.validityType != null && m.hasOwnProperty('validityType')) {
	      d.validityType = o.enums === String ? $root$g.IpnsEntry.ValidityType[m.validityType] : m.validityType;
	    }
	    if (m.validity != null && m.hasOwnProperty('validity')) {
	      d.validity = o.bytes === String ? $util$f.base64.encode(m.validity, 0, m.validity.length) : o.bytes === Array ? Array.prototype.slice.call(m.validity) : m.validity;
	    }
	    if (m.sequence != null && m.hasOwnProperty('sequence')) {
	      if (typeof m.sequence === 'number')
	        d.sequence = o.longs === String ? String(m.sequence) : m.sequence;
	      else
	        d.sequence = o.longs === String ? $util$f.Long.prototype.toString.call(m.sequence) : o.longs === Number ? new $util$f.LongBits(m.sequence.low >>> 0, m.sequence.high >>> 0).toNumber(true) : m.sequence;
	    }
	    if (m.ttl != null && m.hasOwnProperty('ttl')) {
	      if (typeof m.ttl === 'number')
	        d.ttl = o.longs === String ? String(m.ttl) : m.ttl;
	      else
	        d.ttl = o.longs === String ? $util$f.Long.prototype.toString.call(m.ttl) : o.longs === Number ? new $util$f.LongBits(m.ttl.low >>> 0, m.ttl.high >>> 0).toNumber(true) : m.ttl;
	    }
	    if (m.pubKey != null && m.hasOwnProperty('pubKey')) {
	      d.pubKey = o.bytes === String ? $util$f.base64.encode(m.pubKey, 0, m.pubKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.pubKey) : m.pubKey;
	    }
	    if (m.signatureV2 != null && m.hasOwnProperty('signatureV2')) {
	      d.signatureV2 = o.bytes === String ? $util$f.base64.encode(m.signatureV2, 0, m.signatureV2.length) : o.bytes === Array ? Array.prototype.slice.call(m.signatureV2) : m.signatureV2;
	    }
	    if (m.data != null && m.hasOwnProperty('data')) {
	      d.data = o.bytes === String ? $util$f.base64.encode(m.data, 0, m.data.length) : o.bytes === Array ? Array.prototype.slice.call(m.data) : m.data;
	    }
	    return d;
	  };
	  IpnsEntry.prototype.toJSON = function toJSON() {
	    return this.constructor.toObject(this, minimal.util.toJSONOptions);
	  };
	  IpnsEntry.ValidityType = function () {
	    const valuesById = {}, values = Object.create(valuesById);
	    values[valuesById[0] = 'EOL'] = 0;
	    return values;
	  }();
	  return IpnsEntry;
	})();

	function parseRFC3339(time) {
	  const rfc3339Matcher = new RegExp('(\\d{4})-(\\d{2})-(\\d{2})T' + '(\\d{2}):(\\d{2}):(\\d{2})' + '\\.(\\d+)Z');
	  const m = String(time).trim().match(rfc3339Matcher);
	  if (!m) {
	    throw new Error('Invalid format');
	  }
	  const year = parseInt(m[1], 10);
	  const month = parseInt(m[2], 10) - 1;
	  const date = parseInt(m[3], 10);
	  const hour = parseInt(m[4], 10);
	  const minute = parseInt(m[5], 10);
	  const second = parseInt(m[6], 10);
	  const millisecond = parseInt(m[7].slice(0, -6), 10);
	  return new Date(Date.UTC(year, month, date, hour, minute, second, millisecond));
	}

	const ERR_IPNS_EXPIRED_RECORD = 'ERR_IPNS_EXPIRED_RECORD';
	const ERR_UNRECOGNIZED_VALIDITY = 'ERR_UNRECOGNIZED_VALIDITY';
	const ERR_SIGNATURE_CREATION = 'ERR_SIGNATURE_CREATION';
	const ERR_SIGNATURE_VERIFICATION = 'ERR_SIGNATURE_VERIFICATION';
	const ERR_UNRECOGNIZED_FORMAT = 'ERR_UNRECOGNIZED_FORMAT';
	const ERR_PEER_ID_FROM_PUBLIC_KEY = 'ERR_PEER_ID_FROM_PUBLIC_KEY';
	const ERR_PUBLIC_KEY_FROM_ID = 'ERR_PUBLIC_KEY_FROM_ID';
	const ERR_UNDEFINED_PARAMETER = 'ERR_UNDEFINED_PARAMETER';
	const ERR_INVALID_RECORD_DATA = 'ERR_INVALID_RECORD_DATA';
	const ERR_INVALID_EMBEDDED_KEY = 'ERR_INVALID_EMBEDDED_KEY';

	const log$1y = Object.assign(debug$S('jsipns'), { error: debug$S('jsipns:error') });
	const ID_MULTIHASH_CODE = identity$2.code;
	const IPNS_PREFIX$1 = fromString$4('/ipns/');
	const namespace$1 = '/ipns/';
	const namespaceLength = namespace$1.length;
	const create$5 = (privateKey, value, seq, lifetime) => {
	  const expirationDate = new NanoDate(Date.now() + Number(lifetime));
	  const validityType = IpnsEntry.ValidityType.EOL;
	  const [ms, ns] = lifetime.toString().split('.');
	  const lifetimeNs = BigInt(ms) * BigInt(100000) + BigInt(ns || 0);
	  return _create(privateKey, value, seq, validityType, expirationDate, lifetimeNs);
	};
	const _create = async (privateKey, value, seq, validityType, expirationDate, ttl) => {
	  seq = BigInt(seq);
	  const isoValidity = fromString$4(expirationDate.toString());
	  const signatureV1 = await sign$1(privateKey, value, validityType, isoValidity);
	  const data = createCborData(value, isoValidity, validityType, seq, ttl);
	  const sigData = ipnsEntryDataForV2Sig(data);
	  const signatureV2 = await privateKey.sign(sigData);
	  const entry = {
	    value,
	    signature: signatureV1,
	    validityType: validityType,
	    validity: isoValidity,
	    sequence: seq,
	    ttl,
	    signatureV2,
	    data
	  };
	  log$1y(`ipns entry for ${ value } created`);
	  return entry;
	};
	const createCborData = (value, validity, validityType, sequence, ttl) => {
	  const data = {
	    Value: value,
	    Validity: validity,
	    ValidityType: validityType,
	    Sequence: sequence,
	    TTL: ttl
	  };
	  return encode$j(data);
	};
	const validate = async (publicKey, entry) => {
	  const {value, validityType, validity} = entry;
	  let dataForSignature;
	  let signature;
	  if (entry.signatureV2 && entry.data) {
	    signature = entry.signatureV2;
	    dataForSignature = ipnsEntryDataForV2Sig(entry.data);
	    validateCborDataMatchesPbData(entry);
	  } else {
	    signature = entry.signature;
	    dataForSignature = ipnsEntryDataForV1Sig(value, validityType, validity);
	  }
	  let isValid;
	  try {
	    isValid = await publicKey.verify(dataForSignature, signature);
	  } catch (err) {
	    isValid = false;
	  }
	  if (!isValid) {
	    log$1y.error('record signature verification failed');
	    throw errCode$q(new Error('record signature verification failed'), ERR_SIGNATURE_VERIFICATION);
	  }
	  if (validityType === IpnsEntry.ValidityType.EOL) {
	    let validityDate;
	    try {
	      validityDate = parseRFC3339(toString$6(validity));
	    } catch (e) {
	      log$1y.error('unrecognized validity format (not an rfc3339 format)');
	      throw errCode$q(new Error('unrecognized validity format (not an rfc3339 format)'), ERR_UNRECOGNIZED_FORMAT);
	    }
	    if (validityDate.getTime() < Date.now()) {
	      log$1y.error('record has expired');
	      throw errCode$q(new Error('record has expired'), ERR_IPNS_EXPIRED_RECORD);
	    }
	  } else if (validityType) {
	    log$1y.error('unrecognized validity type');
	    throw errCode$q(new Error('unrecognized validity type'), ERR_UNRECOGNIZED_VALIDITY);
	  }
	  log$1y(`ipns entry for ${ value } is valid`);
	};
	const validateCborDataMatchesPbData = entry => {
	  if (!entry.data) {
	    throw errCode$q(new Error('Record data is missing'), ERR_INVALID_RECORD_DATA);
	  }
	  const data = decode$h(entry.data);
	  if (Number.isInteger(data.Sequence)) {
	    data.Sequence = BigInt(data.Sequence);
	  }
	  if (Number.isInteger(data.TTL)) {
	    data.TTL = BigInt(data.TTL);
	  }
	  if (!equals$1(data.Value, entry.value)) {
	    throw errCode$q(new Error('Field "value" did not match between protobuf and CBOR'), ERR_SIGNATURE_VERIFICATION);
	  }
	  if (!equals$1(data.Validity, entry.validity)) {
	    throw errCode$q(new Error('Field "validity" did not match between protobuf and CBOR'), ERR_SIGNATURE_VERIFICATION);
	  }
	  if (data.ValidityType !== entry.validityType) {
	    throw errCode$q(new Error('Field "validityType" did not match between protobuf and CBOR'), ERR_SIGNATURE_VERIFICATION);
	  }
	  if (data.Sequence !== entry.sequence) {
	    throw errCode$q(new Error('Field "sequence" did not match between protobuf and CBOR'), ERR_SIGNATURE_VERIFICATION);
	  }
	  if (data.TTL !== entry.ttl) {
	    throw errCode$q(new Error('Field "ttl" did not match between protobuf and CBOR'), ERR_SIGNATURE_VERIFICATION);
	  }
	};
	const embedPublicKey = async (publicKey, entry) => {
	  if (!publicKey || !publicKey.bytes || !entry) {
	    const error = new Error('one or more of the provided parameters are not defined');
	    log$1y.error(error);
	    throw errCode$q(error, ERR_UNDEFINED_PARAMETER);
	  }
	  let peerId;
	  try {
	    peerId = await PeerIdImport.createFromPubKey(publicKey.bytes);
	  } catch (err) {
	    throw errCode$q(err, ERR_PEER_ID_FROM_PUBLIC_KEY);
	  }
	  let extractedPublicKey;
	  try {
	    extractedPublicKey = extractPublicKeyFromId(peerId);
	  } catch (err) {
	    log$1y.error(err);
	    throw errCode$q(err, ERR_PUBLIC_KEY_FROM_ID);
	  }
	  if (extractedPublicKey) {
	    return null;
	  }
	  try {
	    entry.pubKey = src$n.keys.marshalPublicKey(publicKey);
	  } catch (err) {
	    log$1y.error(err);
	    throw err;
	  }
	  return entry;
	};
	const extractPublicKey = async (peerId, entry) => {
	  if (!entry || !peerId) {
	    const error = new Error('one or more of the provided parameters are not defined');
	    log$1y.error(error);
	    throw errCode$q(error, ERR_UNDEFINED_PARAMETER);
	  }
	  let pubKey;
	  if (entry.pubKey) {
	    try {
	      pubKey = src$n.keys.unmarshalPublicKey(entry.pubKey);
	    } catch (err) {
	      log$1y.error(err);
	      throw err;
	    }
	    const otherId = await PeerIdImport.createFromPubKey(entry.pubKey);
	    if (!otherId.equals(peerId)) {
	      throw errCode$q(new Error('Embedded public key did not match PeerID'), ERR_INVALID_EMBEDDED_KEY);
	    }
	  } else if (peerId.pubKey) {
	    pubKey = peerId.pubKey;
	  }
	  if (pubKey) {
	    return pubKey;
	  }
	  throw errCode$q(new Error('no public key is available'), ERR_UNDEFINED_PARAMETER);
	};
	const rawStdEncoding = key => base32upper.encode(key).slice(1);
	const getLocalKey = key => new Key$5(`/ipns/${ rawStdEncoding(key) }`);
	const getIdKeys = pid => {
	  const pkBuffer = fromString$4('/pk/');
	  const ipnsBuffer = fromString$4('/ipns/');
	  return {
	    routingPubKey: new Key$5(concat$2([
	      pkBuffer,
	      pid
	    ]), false),
	    pkKey: new Key$5(rawStdEncoding(concat$2([
	      pkBuffer,
	      pid
	    ]))),
	    routingKey: new Key$5(concat$2([
	      ipnsBuffer,
	      pid
	    ]), false),
	    ipnsKey: new Key$5(rawStdEncoding(concat$2([
	      ipnsBuffer,
	      pid
	    ])))
	  };
	};
	const sign$1 = (privateKey, value, validityType, validity) => {
	  try {
	    const dataForSignature = ipnsEntryDataForV1Sig(value, validityType, validity);
	    return privateKey.sign(dataForSignature);
	  } catch (error) {
	    log$1y.error('record signature creation failed');
	    throw errCode$q(new Error('record signature creation failed: ' + error.message), ERR_SIGNATURE_CREATION);
	  }
	};
	const getValidityType = validityType => {
	  if (validityType.toString() === '0') {
	    return 'EOL';
	  }
	  const error = new Error(`unrecognized validity type ${ validityType.toString() }`);
	  log$1y.error(error);
	  throw errCode$q(error, ERR_UNRECOGNIZED_VALIDITY);
	};
	const ipnsEntryDataForV1Sig = (value, validityType, validity) => {
	  const validityTypeBuffer = fromString$4(getValidityType(validityType));
	  return concat$2([
	    value,
	    validity,
	    validityTypeBuffer
	  ]);
	};
	const ipnsEntryDataForV2Sig = data => {
	  const entryData = fromString$4('ipns-signature:');
	  return concat$2([
	    entryData,
	    data
	  ]);
	};
	const extractPublicKeyFromId = peerId => {
	  const digest = decode$k(peerId.id);
	  if (digest.code !== ID_MULTIHASH_CODE) {
	    return null;
	  }
	  return src$n.keys.unmarshalPublicKey(digest.digest);
	};
	const marshal = obj => {
	  return IpnsEntry.encode({
	    ...obj,
	    sequence: long.fromString(obj.sequence.toString()),
	    ttl: obj.ttl == null ? undefined : long.fromString(obj.ttl.toString())
	  }).finish();
	};
	const unmarshal = buf => {
	  const message = IpnsEntry.decode(buf);
	  const object = IpnsEntry.toObject(message, {
	    defaults: false,
	    arrays: true,
	    objects: false
	  });
	  return {
	    value: object.value,
	    signature: object.signature,
	    validityType: object.validityType,
	    validity: object.validity,
	    sequence: Object.hasOwnProperty.call(object, 'sequence') ? BigInt(`${ object.sequence }`) : 0,
	    pubKey: object.pubKey,
	    ttl: Object.hasOwnProperty.call(object, 'ttl') ? BigInt(`${ object.ttl }`) : undefined,
	    signatureV2: object.signatureV2,
	    data: object.data
	  };
	};
	const validator$3 = {
	  validate: async (marshalledData, key) => {
	    const receivedEntry = unmarshal(marshalledData);
	    const bufferId = key.slice(IPNS_PREFIX$1.length);
	    const peerId = PeerIdImport.createFromBytes(bufferId);
	    const pubKey = await extractPublicKey(peerId, receivedEntry);
	    await validate(pubKey, receivedEntry);
	  },
	  select: (dataA, dataB) => {
	    const entryA = unmarshal(dataA);
	    const entryB = unmarshal(dataB);
	    if (entryA.signatureV2 && !entryB.signatureV2) {
	      return 0;
	    } else if (entryB.signatureV2 && !entryA.signatureV2) {
	      return 1;
	    }
	    if (entryA.sequence > entryB.sequence) {
	      return 0;
	    } else if (entryA.sequence < entryB.sequence) {
	      return 1;
	    }
	    const entryAValidityDate = parseRFC3339(toString$6(entryA.validity));
	    const entryBValidityDate = parseRFC3339(toString$6(entryB.validity));
	    return entryBValidityDate.getTime() > entryAValidityDate.getTime() ? 1 : 0;
	  }
	};

	const log$1x = Object.assign(debug$S('ipfs:ipns:publisher'), { error: debug$S('ipfs:ipns:publisher:error') });
	const ERR_NOT_FOUND$3 = notFoundError$1().code;
	const defaultRecordLifetime$1 = 60 * 60 * 1000;
	class IpnsPublisher {
	  constructor(routing, datastore) {
	    this._routing = routing;
	    this._datastore = datastore;
	  }
	  async publishWithEOL(privKey, value, lifetime) {
	    if (!privKey || !privKey.bytes) {
	      throw errCode$q(new Error('invalid private key'), 'ERR_INVALID_PRIVATE_KEY');
	    }
	    const peerId = await PeerIdImport.createFromPrivKey(privKey.bytes);
	    const record = await this._updateOrCreateRecord(privKey, value, lifetime, peerId);
	    return this._putRecordToRouting(record, peerId);
	  }
	  publish(privKey, value) {
	    return this.publishWithEOL(privKey, value, defaultRecordLifetime$1);
	  }
	  async _putRecordToRouting(record, peerId) {
	    if (!PeerIdImport.isPeerId(peerId)) {
	      const errMsg = 'peerId received is not valid';
	      log$1x.error(errMsg);
	      throw errCode$q(new Error(errMsg), 'ERR_INVALID_PEER_ID');
	    }
	    const publicKey = peerId.pubKey;
	    const embedPublicKeyRecord = await embedPublicKey(publicKey, record);
	    const keys = getIdKeys(peerId.toBytes());
	    await this._publishEntry(keys.routingKey, embedPublicKeyRecord || record);
	    return embedPublicKeyRecord || record;
	  }
	  async _publishEntry(key, entry) {
	    const k = Key$5.asKey(key);
	    if (!k) {
	      const errMsg = 'datastore key does not have a valid format';
	      log$1x.error(errMsg);
	      throw errCode$q(new Error(errMsg), 'ERR_INVALID_DATASTORE_KEY');
	    }
	    let entryData;
	    try {
	      entryData = marshal(entry);
	    } catch (err) {
	      log$1x.error(err);
	      throw err;
	    }
	    try {
	      const res = await this._routing.put(k.uint8Array(), entryData);
	      log$1x(`ipns record for ${ toString$6(k.uint8Array(), 'base32') } was stored in the routing`);
	      return res;
	    } catch (err) {
	      const errMsg = `ipns record for ${ toString$6(k.uint8Array(), 'base32') } could not be stored in the routing - ${ err.stack }`;
	      log$1x.error(errMsg);
	      log$1x.error(err);
	      throw errCode$q(new Error(errMsg), 'ERR_PUTTING_TO_ROUTING');
	    }
	  }
	  async _getPublished(peerId, options = {}) {
	    if (!PeerIdImport.isPeerId(peerId)) {
	      const errMsg = 'peerId received is not valid';
	      log$1x.error(errMsg);
	      throw errCode$q(new Error(errMsg), 'ERR_INVALID_PEER_ID');
	    }
	    const checkRouting = options.checkRouting !== false;
	    try {
	      const dsVal = await this._datastore.get(getLocalKey(peerId.id));
	      return this._unmarshalData(dsVal);
	    } catch (err) {
	      if (err.code !== ERR_NOT_FOUND$3) {
	        const errMsg = `unexpected error getting the ipns record ${ peerId.id } from datastore`;
	        log$1x.error(errMsg);
	        throw errCode$q(new Error(errMsg), 'ERR_UNEXPECTED_DATASTORE_RESPONSE');
	      }
	      if (!checkRouting) {
	        throw errCode$q(err, 'ERR_NOT_FOUND_AND_CHECK_ROUTING_NOT_ENABLED');
	      }
	      try {
	        const keys = getIdKeys(peerId.toBytes());
	        const res = await this._routing.get(keys.routingKey.uint8Array());
	        return this._unmarshalData(res);
	      } catch (err) {
	        log$1x.error(err);
	        throw err;
	      }
	    }
	  }
	  _unmarshalData(data) {
	    try {
	      return unmarshal(data);
	    } catch (err) {
	      throw errCode$q(err, 'ERR_INVALID_RECORD_DATA');
	    }
	  }
	  async _updateOrCreateRecord(privKey, value, lifetime, peerId) {
	    if (!PeerIdImport.isPeerId(peerId)) {
	      const errMsg = 'peerId received is not valid';
	      log$1x.error(errMsg);
	      throw errCode$q(new Error(errMsg), 'ERR_INVALID_PEER_ID');
	    }
	    const getPublishedOptions = { checkRouting: true };
	    let record;
	    try {
	      record = await this._getPublished(peerId, getPublishedOptions);
	    } catch (err) {
	      if (err.code !== ERR_NOT_FOUND$3) {
	        const errMsg = `unexpected error when determining the last published IPNS record for ${ peerId.id } ${ err.stack }`;
	        log$1x.error(errMsg);
	        throw errCode$q(new Error(errMsg), 'ERR_DETERMINING_PUBLISHED_RECORD');
	      }
	    }
	    let seqNumber = 0;
	    if (record && record.sequence !== undefined) {
	      seqNumber = !equals$1(record.value, value) ? BigInt(record.sequence) + BigInt(1) : BigInt(record.sequence);
	    }
	    let entryData;
	    try {
	      entryData = await create$5(privKey, value, seqNumber, lifetime);
	    } catch (err) {
	      const errMsg = `ipns record for ${ value } could not be created`;
	      log$1x.error(err);
	      throw errCode$q(new Error(errMsg), 'ERR_CREATING_IPNS_RECORD');
	    }
	    try {
	      const data = marshal(entryData);
	      await this._datastore.put(getLocalKey(peerId.id), data);
	      log$1x(`ipns record for ${ toString$6(value, 'base32') } was stored in the datastore`);
	      return entryData;
	    } catch (err) {
	      const errMsg = `ipns record for ${ value } could not be stored in the datastore`;
	      log$1x.error(errMsg);
	      throw errCode$q(new Error(errMsg), 'ERR_STORING_IN_DATASTORE');
	    }
	  }
	}
	IpnsPublisher.defaultRecordLifetime = defaultRecordLifetime$1;

	const log$1w = Object.assign(debug$S('ipfs:ipns:republisher'), { error: debug$S('ipfs:ipns:republisher:error') });
	const minute$2 = 60 * 1000;
	const hour$1 = 60 * minute$2;
	const defaultBroadcastInterval = 4 * hour$1;
	const defaultRecordLifetime = 24 * hour$1;
	class IpnsRepublisher {
	  constructor(publisher, datastore, peerId, keychain, options = { pass: '' }) {
	    this._publisher = publisher;
	    this._datastore = datastore;
	    this._peerId = peerId;
	    this._keychain = keychain;
	    this._options = options;
	    this._republishHandle = null;
	  }
	  async start() {
	    if (this._republishHandle) {
	      throw errCode$q(new Error('republisher is already running'), 'ERR_REPUBLISH_ALREADY_RUNNING');
	    }
	    const republishHandle = {
	      _task: null,
	      _inflightTask: null,
	      _timeoutId: null,
	      runPeriodically: period => {
	        republishHandle._timeoutId = setTimeout(async () => {
	          republishHandle._timeoutId = null;
	          try {
	            republishHandle._inflightTask = republishHandle._task();
	            await republishHandle._inflightTask;
	            if (republishHandle._task) {
	              republishHandle.runPeriodically(period);
	            }
	          } catch (err) {
	            log$1w.error(err);
	          }
	        }, period());
	      },
	      cancel: async () => {
	        if (republishHandle._timeoutId != null) {
	          clearTimeout(republishHandle._timeoutId);
	        }
	        republishHandle._task = null;
	        await republishHandle._inflightTask;
	      }
	    };
	    const {privKey} = this._peerId;
	    const {pass} = this._options;
	    let firstRun = true;
	    republishHandle._task = () => this._republishEntries(privKey, pass);
	    republishHandle.runPeriodically(() => {
	      if (firstRun) {
	        firstRun = false;
	        return this._options.initialBroadcastInterval || minute$2;
	      }
	      return this._options.broadcastInterval || defaultBroadcastInterval;
	    });
	    this._republishHandle = republishHandle;
	  }
	  async stop() {
	    const republishHandle = this._republishHandle;
	    if (!republishHandle) {
	      throw errCode$q(new Error('republisher is not running'), 'ERR_REPUBLISH_NOT_RUNNING');
	    }
	    this._republishHandle = null;
	    await republishHandle.cancel();
	  }
	  async _republishEntries(privateKey, pass) {
	    try {
	      await this._republishEntry(privateKey);
	    } catch (err) {
	      const errMsg = 'cannot republish entry for the node\'s private key';
	      log$1w.error(errMsg);
	      return;
	    }
	    if (pass) {
	      try {
	        const keys = await this._keychain.listKeys();
	        for (const key of keys) {
	          if (key.name === 'self') {
	            continue;
	          }
	          const pem = await this._keychain.exportKey(key.name, pass);
	          const privKey = await src$n.keys.import(pem, pass);
	          await this._republishEntry(privKey);
	        }
	      } catch (err) {
	        log$1w.error(err);
	      }
	    }
	  }
	  async _republishEntry(privateKey) {
	    if (!privateKey || !privateKey.bytes) {
	      throw errCode$q(new Error('invalid private key'), 'ERR_INVALID_PRIVATE_KEY');
	    }
	    try {
	      const peerId = await PeerIdImport.createFromPrivKey(privateKey.bytes);
	      const value = await this._getPreviousValue(peerId);
	      await this._publisher.publishWithEOL(privateKey, value, defaultRecordLifetime);
	    } catch (err) {
	      if (err.code === 'ERR_NO_ENTRY_FOUND') {
	        return;
	      }
	      throw err;
	    }
	  }
	  async _getPreviousValue(peerId) {
	    if (!PeerIdImport.isPeerId(peerId)) {
	      throw errCode$q(new Error('invalid peer ID'), 'ERR_INVALID_PEER_ID');
	    }
	    try {
	      const dsVal = await this._datastore.get(getLocalKey(peerId.id));
	      if (!(dsVal instanceof Uint8Array)) {
	        throw errCode$q(new Error('found ipns record that we couldn\'t process'), 'ERR_INVALID_IPNS_RECORD');
	      }
	      try {
	        const record = unmarshal(dsVal);
	        return record.value;
	      } catch (err) {
	        log$1w.error(err);
	        throw errCode$q(new Error('found ipns record that we couldn\'t convert to a value'), 'ERR_INVALID_IPNS_RECORD');
	      }
	    } catch (err) {
	      if (err && err.notFound) {
	        throw errCode$q(new Error(`no previous entry for record with id: ${ peerId.id }`), 'ERR_NO_ENTRY_FOUND');
	      }
	      throw err;
	    }
	  }
	}

	const log$1v = Object.assign(debug$S('ipfs:ipns:resolver'), { error: debug$S('ipfs:ipns:resolver:error') });
	const ERR_NOT_FOUND$2 = notFoundError$1().code;
	const defaultMaximumRecursiveDepth = 32;
	class IpnsResolver {
	  constructor(routing) {
	    this._routing = routing;
	  }
	  async resolve(name, options = {}) {
	    if (typeof name !== 'string') {
	      throw errCode$q(new Error('invalid name'), 'ERR_INVALID_NAME');
	    }
	    const recursive = options.recursive && options.recursive.toString() === 'true';
	    const nameSegments = name.split('/');
	    if (nameSegments.length !== 3 || nameSegments[0] !== '') {
	      throw errCode$q(new Error('invalid name'), 'ERR_INVALID_NAME');
	    }
	    const key = nameSegments[2];
	    let depth = Infinity;
	    if (recursive) {
	      depth = defaultMaximumRecursiveDepth;
	    }
	    const res = await this.resolver(key, depth);
	    log$1v(`${ name } was locally resolved correctly`);
	    return res;
	  }
	  async resolver(name, depth) {
	    if (depth === 0) {
	      const errMsg = `could not resolve name (recursion limit of ${ defaultMaximumRecursiveDepth } exceeded)`;
	      log$1v.error(errMsg);
	      throw errCode$q(new Error(errMsg), 'ERR_RESOLVE_RECURSION_LIMIT');
	    }
	    const res = await this._resolveName(name);
	    const nameSegments = res.split('/');
	    if (nameSegments[1] === 'ipfs' || !depth) {
	      return res;
	    }
	    return this.resolver(nameSegments[2], depth - 1);
	  }
	  async _resolveName(name) {
	    const peerId = PeerIdImport.parse(name);
	    const {routingKey} = getIdKeys(peerId.toBytes());
	    let record;
	    try {
	      record = await this._routing.get(routingKey.uint8Array());
	    } catch (err) {
	      log$1v.error('could not get record from routing', err);
	      if (err.code === ERR_NOT_FOUND$2) {
	        throw errCode$q(new Error(`record requested for ${ name } was not found in the network`), 'ERR_NO_RECORD_FOUND');
	      }
	      throw errCode$q(new Error(`unexpected error getting the ipns record ${ peerId.toString() }`), 'ERR_UNEXPECTED_ERROR_GETTING_RECORD');
	    }
	    let ipnsEntry;
	    try {
	      ipnsEntry = unmarshal(record);
	    } catch (err) {
	      log$1v.error('could not unmarshal record', err);
	      throw errCode$q(new Error('found ipns record that we couldn\'t convert to a value'), 'ERR_INVALID_RECORD_RECEIVED');
	    }
	    return this._validateRecord(peerId, ipnsEntry);
	  }
	  async _validateRecord(peerId, ipnsEntry) {
	    const pubKey = await extractPublicKey(peerId, ipnsEntry);
	    await validate(pubKey, ipnsEntry);
	    return toString$6(ipnsEntry.value);
	  }
	}

	class TLRU {
	  constructor(maxSize) {
	    this.lru = hashlru(maxSize);
	  }
	  get(key) {
	    const value = this.lru.get(key);
	    if (value) {
	      if (value.expire && value.expire < Date.now()) {
	        this.lru.remove(key);
	        return undefined;
	      }
	      return value.value;
	    }
	    return undefined;
	  }
	  set(key, value, ttl) {
	    this.lru.set(key, {
	      value,
	      expire: Date.now() + ttl
	    });
	  }
	  has(key) {
	    const value = this.get(key);
	    if (value) {
	      return true;
	    }
	    return false;
	  }
	  remove(key) {
	    this.lru.remove(key);
	  }
	  clear() {
	    this.lru.clear();
	  }
	}

	const log$1u = Object.assign(debug$S('ipfs:ipns'), { error: debug$S('ipfs:ipns:error') });
	const defaultRecordTtl = 60 * 1000;
	class IPNS {
	  constructor(routing, datastore, peerId, keychain, options) {
	    this.publisher = new IpnsPublisher(routing, datastore);
	    this.republisher = new IpnsRepublisher(this.publisher, datastore, peerId, keychain, options);
	    this.resolver = new IpnsResolver(routing);
	    this.cache = new TLRU(1000);
	    this.routing = routing;
	  }
	  async publish(privKey, value, lifetime = IpnsPublisher.defaultRecordLifetime) {
	    try {
	      const peerId = await src$o.exports.createFromPrivKey(privKey.bytes);
	      await this.publisher.publishWithEOL(privKey, value, lifetime);
	      log$1u(`IPNS value ${ toString$6(value, 'base32') } was published correctly`);
	      const id = peerId.toB58String();
	      const ttEol = parseFloat(lifetime);
	      const ttl = ttEol < defaultRecordTtl ? ttEol : defaultRecordTtl;
	      this.cache.set(id, value, ttl);
	      log$1u(`IPNS value ${ toString$6(value, 'base32') } was cached correctly`);
	      return {
	        name: id,
	        value: value
	      };
	    } catch (err) {
	      log$1u.error(err);
	      throw err;
	    }
	  }
	  async resolve(name, options = {}) {
	    if (typeof name !== 'string') {
	      throw errCode$q(new Error('name received is not valid'), 'ERR_INVALID_NAME');
	    }
	    if (!options.nocache && !options.recursive) {
	      const id = name.split('/')[2];
	      const result = this.cache.get(id);
	      if (result) {
	        return result;
	      }
	    }
	    try {
	      const result = await this.resolver.resolve(name, options);
	      log$1u(`IPNS record from ${ name } was resolved correctly`);
	      return result;
	    } catch (err) {
	      log$1u.error(err);
	      throw err;
	    }
	  }
	  async initializeKeyspace(privKey, value) {
	    return this.publish(privKey, value, IpnsPublisher.defaultRecordLifetime);
	  }
	}

	/**
	 * Collects all values from an (async) iterable into an array and returns it.
	 *
	 * @template T
	 * @param {AsyncIterable<T>|Iterable<T>} source
	 */
	const all$5 = async (source) => {
	  const arr = [];

	  for await (const entry of source) {
	    arr.push(entry);
	  }

	  return arr
	};

	var itAll = all$5;

	const sortAll$1 = (iterable, sorter) => {
	  return async function* () {
	    const values = await itAll(iterable);
	    yield* values.sort(sorter);
	  }();
	};

	/**
	 * Drains an (async) iterable discarding its' content and does not return
	 * anything.
	 *
	 * @template T
	 * @param {AsyncIterable<T>|Iterable<T>} source
	 * @returns {Promise<void>}
	 */
	const drain$5 = async (source) => {
	  for await (const _ of source) { } // eslint-disable-line no-unused-vars,no-empty
	};

	var itDrain = drain$5;

	/**
	 * Filters the passed (async) iterable by using the filter function
	 *
	 * @template T
	 * @param {AsyncIterable<T>|Iterable<T>} source
	 * @param {function(T):boolean|Promise<boolean>} fn
	 */
	const filter$6 = async function * (source, fn) {
	  for await (const entry of source) {
	    if (await fn(entry)) {
	      yield entry;
	    }
	  }
	};

	var itFilter = filter$6;

	/**
	 * Stop iteration after n items have been received.
	 *
	 * @template T
	 * @param {AsyncIterable<T>|Iterable<T>} source
	 * @param {number} limit
	 * @returns {AsyncIterable<T>}
	 */
	const take$4 = async function * (source, limit) {
	  let items = 0;

	  if (limit < 1) {
	    return
	  }

	  for await (const entry of source) {
	    yield entry;

	    items++;

	    if (items === limit) {
	      return
	    }
	  }
	};

	var itTake = take$4;

	class BaseDatastore {
	  open() {
	    return Promise.reject(new Error('.open is not implemented'));
	  }
	  close() {
	    return Promise.reject(new Error('.close is not implemented'));
	  }
	  put(key, val, options) {
	    return Promise.reject(new Error('.put is not implemented'));
	  }
	  get(key, options) {
	    return Promise.reject(new Error('.get is not implemented'));
	  }
	  has(key, options) {
	    return Promise.reject(new Error('.has is not implemented'));
	  }
	  delete(key, options) {
	    return Promise.reject(new Error('.delete is not implemented'));
	  }
	  async *putMany(source, options = {}) {
	    for await (const {key, value} of source) {
	      await this.put(key, value, options);
	      yield {
	        key,
	        value
	      };
	    }
	  }
	  async *getMany(source, options = {}) {
	    for await (const key of source) {
	      yield this.get(key, options);
	    }
	  }
	  async *deleteMany(source, options = {}) {
	    for await (const key of source) {
	      await this.delete(key, options);
	      yield key;
	    }
	  }
	  batch() {
	    let puts = [];
	    let dels = [];
	    return {
	      put(key, value) {
	        puts.push({
	          key,
	          value
	        });
	      },
	      delete(key) {
	        dels.push(key);
	      },
	      commit: async options => {
	        await itDrain(this.putMany(puts, options));
	        puts = [];
	        await itDrain(this.deleteMany(dels, options));
	        dels = [];
	      }
	    };
	  }
	  async *_all(q, options) {
	    throw new Error('._all is not implemented');
	  }
	  async *_allKeys(q, options) {
	    throw new Error('._allKeys is not implemented');
	  }
	  query(q, options) {
	    let it = this._all(q, options);
	    if (q.prefix != null) {
	      it = itFilter(it, e => e.key.toString().startsWith(q.prefix));
	    }
	    if (Array.isArray(q.filters)) {
	      it = q.filters.reduce((it, f) => itFilter(it, f), it);
	    }
	    if (Array.isArray(q.orders)) {
	      it = q.orders.reduce((it, f) => sortAll$1(it, f), it);
	    }
	    if (q.offset != null) {
	      let i = 0;
	      it = itFilter(it, () => i++ >= q.offset);
	    }
	    if (q.limit != null) {
	      it = itTake(it, q.limit);
	    }
	    return it;
	  }
	  queryKeys(q, options) {
	    let it = this._allKeys(q, options);
	    if (q.prefix != null) {
	      it = itFilter(it, key => key.toString().startsWith(q.prefix));
	    }
	    if (Array.isArray(q.filters)) {
	      it = q.filters.reduce((it, f) => itFilter(it, f), it);
	    }
	    if (Array.isArray(q.orders)) {
	      it = q.orders.reduce((it, f) => sortAll$1(it, f), it);
	    }
	    if (q.offset != null) {
	      let i = 0;
	      it = itFilter(it, () => i++ >= q.offset);
	    }
	    if (q.limit != null) {
	      it = itTake(it, q.limit);
	    }
	    return it;
	  }
	}

	var fixedSize = class FixedFIFO {
	  constructor (hwm) {
	    if (!(hwm > 0) || ((hwm - 1) & hwm) !== 0) throw new Error('Max size for a FixedFIFO should be a power of two')
	    this.buffer = new Array(hwm);
	    this.mask = hwm - 1;
	    this.top = 0;
	    this.btm = 0;
	    this.next = null;
	  }

	  push (data) {
	    if (this.buffer[this.top] !== undefined) return false
	    this.buffer[this.top] = data;
	    this.top = (this.top + 1) & this.mask;
	    return true
	  }

	  shift () {
	    const last = this.buffer[this.btm];
	    if (last === undefined) return undefined
	    this.buffer[this.btm] = undefined;
	    this.btm = (this.btm + 1) & this.mask;
	    return last
	  }

	  peek () {
	    return this.buffer[this.btm]
	  }

	  isEmpty () {
	    return this.buffer[this.btm] === undefined
	  }
	};

	const FixedFIFO = fixedSize;

	var fastFifo = class FastFIFO {
	  constructor (hwm) {
	    this.hwm = hwm || 16;
	    this.head = new FixedFIFO(this.hwm);
	    this.tail = this.head;
	  }

	  push (val) {
	    if (!this.head.push(val)) {
	      const prev = this.head;
	      this.head = prev.next = new FixedFIFO(2 * this.head.buffer.length);
	      this.head.push(val);
	    }
	  }

	  shift () {
	    const val = this.tail.shift();
	    if (val === undefined && this.tail.next) {
	      const next = this.tail.next;
	      this.tail.next = null;
	      this.tail = next;
	      return this.tail.shift()
	    }
	    return val
	  }

	  peek () {
	    return this.tail.peek()
	  }

	  isEmpty () {
	    return this.head.isEmpty()
	  }
	};

	const FIFO$1 = fastFifo;

	var itPushable = (options) => {
	  options = options || {};
	  let onEnd;

	  if (typeof options === 'function') {
	    onEnd = options;
	    options = {};
	  } else {
	    onEnd = options.onEnd;
	  }

	  let buffer = new FIFO$1();
	  let pushable, onNext, ended;

	  const waitNext = () => {
	    if (!buffer.isEmpty()) {
	      if (options.writev) {
	        let next;
	        const values = [];
	        while (!buffer.isEmpty()) {
	          next = buffer.shift();
	          if (next.error) throw next.error
	          values.push(next.value);
	        }
	        return { done: next.done, value: values }
	      }

	      const next = buffer.shift();
	      if (next.error) throw next.error
	      return next
	    }

	    if (ended) return { done: true }

	    return new Promise((resolve, reject) => {
	      onNext = next => {
	        onNext = null;
	        if (next.error) {
	          reject(next.error);
	        } else {
	          if (options.writev && !next.done) {
	            resolve({ done: next.done, value: [next.value] });
	          } else {
	            resolve(next);
	          }
	        }
	        return pushable
	      };
	    })
	  };

	  const bufferNext = next => {
	    if (onNext) return onNext(next)
	    buffer.push(next);
	    return pushable
	  };

	  const bufferError = err => {
	    buffer = new FIFO$1();
	    if (onNext) return onNext({ error: err })
	    buffer.push({ error: err });
	    return pushable
	  };

	  const push = value => {
	    if (ended) return pushable
	    return bufferNext({ done: false, value })
	  };
	  const end = err => {
	    if (ended) return pushable
	    ended = true;
	    return err ? bufferError(err) : bufferNext({ done: true })
	  };
	  const _return = () => {
	    buffer = new FIFO$1();
	    end();
	    return { done: true }
	  };
	  const _throw = err => {
	    end(err);
	    return { done: true }
	  };

	  pushable = {
	    [Symbol.asyncIterator] () { return this },
	    next: waitNext,
	    return: _return,
	    throw: _throw,
	    push,
	    end
	  };

	  if (!onEnd) return pushable

	  const _pushable = pushable;

	  pushable = {
	    [Symbol.asyncIterator] () { return this },
	    next () {
	      return _pushable.next()
	    },
	    throw (err) {
	      _pushable.throw(err);
	      if (onEnd) {
	        onEnd(err);
	        onEnd = null;
	      }
	      return { done: true }
	    },
	    return () {
	      _pushable.return();
	      if (onEnd) {
	        onEnd();
	        onEnd = null;
	      }
	      return { done: true }
	    },
	    push,
	    end (err) {
	      _pushable.end(err);
	      if (onEnd) {
	        onEnd(err);
	        onEnd = null;
	      }
	      return pushable
	    }
	  };

	  return pushable
	};

	const log$1t = debug$S('datastore:core:tiered');
	class TieredDatastore extends BaseDatastore {
	  constructor(stores) {
	    super();
	    this.stores = stores.slice();
	  }
	  async open() {
	    try {
	      await Promise.all(this.stores.map(store => store.open()));
	    } catch (err) {
	      throw dbOpenFailedError();
	    }
	  }
	  async put(key, value) {
	    try {
	      await Promise.all(this.stores.map(store => store.put(key, value)));
	    } catch (err) {
	      throw dbWriteFailedError();
	    }
	  }
	  async get(key, options) {
	    for (const store of this.stores) {
	      try {
	        const res = await store.get(key, options);
	        if (res)
	          return res;
	      } catch (err) {
	        log$1t(err);
	      }
	    }
	    throw notFoundError$1();
	  }
	  async has(key, options) {
	    for (const s of this.stores) {
	      if (await s.has(key, options)) {
	        return true;
	      }
	    }
	    return false;
	  }
	  async delete(key, options) {
	    try {
	      await Promise.all(this.stores.map(store => store.delete(key, options)));
	    } catch (err) {
	      throw dbDeleteFailedError();
	    }
	  }
	  async *putMany(source, options = {}) {
	    let error;
	    const pushables = this.stores.map(store => {
	      const source = itPushable();
	      itDrain(store.putMany(source, options)).catch(err => {
	        error = err;
	      });
	      return source;
	    });
	    try {
	      for await (const pair of source) {
	        if (error) {
	          throw error;
	        }
	        pushables.forEach(p => p.push(pair));
	        yield pair;
	      }
	    } finally {
	      pushables.forEach(p => p.end());
	    }
	  }
	  async *deleteMany(source, options = {}) {
	    let error;
	    const pushables = this.stores.map(store => {
	      const source = itPushable();
	      itDrain(store.deleteMany(source, options)).catch(err => {
	        error = err;
	      });
	      return source;
	    });
	    try {
	      for await (const key of source) {
	        if (error) {
	          throw error;
	        }
	        pushables.forEach(p => p.push(key));
	        yield key;
	      }
	    } finally {
	      pushables.forEach(p => p.end());
	    }
	  }
	  async close() {
	    await Promise.all(this.stores.map(store => store.close()));
	  }
	  batch() {
	    const batches = this.stores.map(store => store.batch());
	    return {
	      put: (key, value) => {
	        batches.forEach(b => b.put(key, value));
	      },
	      delete: key => {
	        batches.forEach(b => b.delete(key));
	      },
	      commit: async options => {
	        for (const batch of batches) {
	          await batch.commit(options);
	        }
	      }
	    };
	  }
	  query(q, options) {
	    return this.stores[this.stores.length - 1].query(q, options);
	  }
	  queryKeys(q, options) {
	    return this.stores[this.stores.length - 1].queryKeys(q, options);
	  }
	}

	var dlv_umd = {exports: {}};

	(function (module, exports) {
	!function(t,n){module.exports=function(t,n,e,i,o){for(n=n.split?n.split("."):n,i=0;i<n.length;i++)t=t?t[n[i]]:o;return t===o?e:t};}();

	}(dlv_umd));

	var get$2 = dlv_umd.exports;

	var readme = `This is a repository of IPLD objects. Each IPLD object is in a single file,
named <base32 encoding of cid>.data. Where <base32 encoding of cid> is the
"base32" encoding of the CID (as specified in
https://github.com/multiformats/multibase) without the 'B' prefix.
All the object files are placed in a tree of directories, based on a
function of the CID. This is a form of sharding similar to
the objects directory in git repositories. Previously, we used
prefixes, we now use the next-to-last two charters.
    func NextToLast(base32cid string) {
      nextToLastLen := 2
      offset := len(base32cid) - nextToLastLen - 1
      return str[offset : offset+nextToLastLen]
    }
For example, an object with a base58 CIDv1 of
    zb2rhYSxw4ZjuzgCnWSt19Q94ERaeFhu9uSqRgjSdx9bsgM6f
has a base32 CIDv1 of
    BAFKREIA22FLID5AJ2KU7URG47MDLROZIH6YF2KALU2PWEFPVI37YLKRSCA
and will be placed at
    SC/AFKREIA22FLID5AJ2KU7URG47MDLROZIH6YF2KALU2PWEFPVI37YLKRSCA.data
with 'SC' being the last-to-next two characters and the 'B' at the
beginning of the CIDv1 string is the multibase prefix that is not
stored in the filename.
`;

	const PREFIX = '/repo/flatfs/shard/';
	const SHARDING_FN = 'SHARDING';
	const README_FN = '_README';
	class ShardBase {
	  constructor(param) {
	    this.param = param;
	    this.name = 'base';
	    this._padding = '';
	  }
	  fun(s) {
	    return 'implement me';
	  }
	  toString() {
	    return `${ PREFIX }v1/${ this.name }/${ this.param }`;
	  }
	}
	class Prefix extends ShardBase {
	  constructor(prefixLen) {
	    super(prefixLen);
	    this._padding = ''.padStart(prefixLen, '_');
	    this.name = 'prefix';
	  }
	  fun(noslash) {
	    return (noslash + this._padding).slice(0, this.param);
	  }
	}
	class Suffix extends ShardBase {
	  constructor(suffixLen) {
	    super(suffixLen);
	    this._padding = ''.padStart(suffixLen, '_');
	    this.name = 'suffix';
	  }
	  fun(noslash) {
	    const s = this._padding + noslash;
	    return s.slice(s.length - this.param);
	  }
	}
	class NextToLast extends ShardBase {
	  constructor(suffixLen) {
	    super(suffixLen);
	    this._padding = ''.padStart(suffixLen + 1, '_');
	    this.name = 'next-to-last';
	  }
	  fun(noslash) {
	    const s = this._padding + noslash;
	    const offset = s.length - this.param - 1;
	    return s.slice(offset, offset + this.param);
	  }
	}
	function parseShardFun(str) {
	  str = str.trim();
	  if (str.length === 0) {
	    throw new Error('empty shard string');
	  }
	  if (!str.startsWith(PREFIX)) {
	    throw new Error(`invalid or no path prefix: ${ str }`);
	  }
	  const parts = str.slice(PREFIX.length).split('/');
	  const version = parts[0];
	  if (version !== 'v1') {
	    throw new Error(`expect 'v1' version, got '${ version }'`);
	  }
	  const name = parts[1];
	  if (!parts[2]) {
	    throw new Error('missing param');
	  }
	  const param = parseInt(parts[2], 10);
	  switch (name) {
	  case 'prefix':
	    return new Prefix(param);
	  case 'suffix':
	    return new Suffix(param);
	  case 'next-to-last':
	    return new NextToLast(param);
	  default:
	    throw new Error(`unkown sharding function: ${ name }`);
	  }
	}
	const readShardFun = async (path, store) => {
	  const key = new Key$5(path).child(new Key$5(SHARDING_FN));
	  const get = typeof store.getRaw === 'function' ? store.getRaw.bind(store) : store.get.bind(store);
	  const res = await get(key);
	  return parseShardFun(new TextDecoder().decode(res || '').trim());
	};

	var ShardImport = /*#__PURE__*/Object.freeze({
		__proto__: null,
		PREFIX: PREFIX,
		SHARDING_FN: SHARDING_FN,
		README_FN: README_FN,
		ShardBase: ShardBase,
		Prefix: Prefix,
		Suffix: Suffix,
		NextToLast: NextToLast,
		parseShardFun: parseShardFun,
		readShardFun: readShardFun,
		readme: readme
	});

	class MemoryDatastore$2 extends BaseDatastore {
	  constructor() {
	    super();
	    this.data = {};
	  }
	  open() {
	    return Promise.resolve();
	  }
	  close() {
	    return Promise.resolve();
	  }
	  async put(key, val) {
	    this.data[key.toString()] = val;
	  }
	  async get(key) {
	    const exists = await this.has(key);
	    if (!exists)
	      throw notFoundError$1();
	    return this.data[key.toString()];
	  }
	  async has(key) {
	    return this.data[key.toString()] !== undefined;
	  }
	  async delete(key) {
	    delete this.data[key.toString()];
	  }
	  async *_all() {
	    yield* Object.entries(this.data).map(([key, value]) => ({
	      key: new Key$5(key),
	      value
	    }));
	  }
	  async *_allKeys() {
	    yield* Object.entries(this.data).map(([key]) => new Key$5(key));
	  }
	}

	var memory = /*#__PURE__*/Object.freeze({
		__proto__: null,
		MemoryDatastore: MemoryDatastore$2
	});

	/**
	 * Takes an (async) iterable and returns one with each item mapped by the passed
	 * function.
	 *
	 * @template I,O
	 * @param {AsyncIterable<I>|Iterable<I>} source
	 * @param {function(I):O|Promise<O>} func
	 * @returns {AsyncIterable<O>}
	 */
	const map$7 = async function * (source, func) {
	  for await (const val of source) {
	    yield func(val);
	  }
	};

	var itMap = map$7;

	var itPipe = {exports: {}};

	const rawPipe = (...fns) => {
	  let res;
	  while (fns.length) {
	    res = fns.shift()(res);
	  }
	  return res
	};

	const isIterable$1 = obj => obj && (
	  typeof obj[Symbol.asyncIterator] === 'function' ||
	  typeof obj[Symbol.iterator] === 'function' ||
	  typeof obj.next === 'function' // Probably, right?
	);

	const isDuplex = obj => obj && typeof obj.sink === 'function' && isIterable$1(obj.source);

	const duplexPipelineFn = duplex => source => {
	  duplex.sink(source); // TODO: error on sink side is unhandled rejection - this is the same as pull streams
	  return duplex.source
	};

	const pipe$k = (...fns) => {
	  // Duplex at start: wrap in function and return duplex source
	  if (isDuplex(fns[0])) {
	    const duplex = fns[0];
	    fns[0] = () => duplex.source;
	  // Iterable at start: wrap in function
	  } else if (isIterable$1(fns[0])) {
	    const source = fns[0];
	    fns[0] = () => source;
	  }

	  if (fns.length > 1) {
	    // Duplex at end: use duplex sink
	    if (isDuplex(fns[fns.length - 1])) {
	      fns[fns.length - 1] = fns[fns.length - 1].sink;
	    }
	  }

	  if (fns.length > 2) {
	    // Duplex in the middle, consume source with duplex sink and return duplex source
	    for (let i = 1; i < fns.length - 1; i++) {
	      if (isDuplex(fns[i])) {
	        fns[i] = duplexPipelineFn(fns[i]);
	      }
	    }
	  }

	  return rawPipe(...fns)
	};

	itPipe.exports = pipe$k;
	var pipe_1 = itPipe.exports.pipe = pipe$k;
	itPipe.exports.rawPipe = rawPipe;
	itPipe.exports.isIterable = isIterable$1;
	itPipe.exports.isDuplex = isDuplex;

	class KeyTransformDatastore$1 extends BaseDatastore {
	  constructor(child, transform) {
	    super();
	    this.child = child;
	    this.transform = transform;
	  }
	  open() {
	    return this.child.open();
	  }
	  put(key, val, options) {
	    return this.child.put(this.transform.convert(key), val, options);
	  }
	  get(key, options) {
	    return this.child.get(this.transform.convert(key), options);
	  }
	  has(key, options) {
	    return this.child.has(this.transform.convert(key), options);
	  }
	  delete(key, options) {
	    return this.child.delete(this.transform.convert(key), options);
	  }
	  async *putMany(source, options = {}) {
	    const transform = this.transform;
	    const child = this.child;
	    yield* pipe_1(source, async function* (source) {
	      yield* itMap(source, ({key, value}) => ({
	        key: transform.convert(key),
	        value
	      }));
	    }, async function* (source) {
	      yield* child.putMany(source, options);
	    }, async function* (source) {
	      yield* itMap(source, ({key, value}) => ({
	        key: transform.invert(key),
	        value
	      }));
	    });
	  }
	  async *getMany(source, options = {}) {
	    const transform = this.transform;
	    const child = this.child;
	    yield* pipe_1(source, async function* (source) {
	      yield* itMap(source, key => transform.convert(key));
	    }, async function* (source) {
	      yield* child.getMany(source, options);
	    });
	  }
	  async *deleteMany(source, options = {}) {
	    const transform = this.transform;
	    const child = this.child;
	    yield* pipe_1(source, async function* (source) {
	      yield* itMap(source, key => transform.convert(key));
	    }, async function* (source) {
	      yield* child.deleteMany(source, options);
	    }, async function* (source) {
	      yield* itMap(source, key => transform.invert(key));
	    });
	  }
	  batch() {
	    const b = this.child.batch();
	    return {
	      put: (key, value) => {
	        b.put(this.transform.convert(key), value);
	      },
	      delete: key => {
	        b.delete(this.transform.convert(key));
	      },
	      commit: options => {
	        return b.commit(options);
	      }
	    };
	  }
	  query(q, options) {
	    const query = { ...q };
	    query.filters = (query.filters || []).map(filter => {
	      return ({key, value}) => filter({
	        key: this.transform.convert(key),
	        value
	      });
	    });
	    const {prefix} = q;
	    if (prefix != null && prefix !== '/') {
	      delete query.prefix;
	      query.filters.push(({key}) => {
	        return this.transform.invert(key).toString().startsWith(prefix);
	      });
	    }
	    if (query.orders) {
	      query.orders = query.orders.map(order => {
	        return (a, b) => order({
	          key: this.transform.invert(a.key),
	          value: a.value
	        }, {
	          key: this.transform.invert(b.key),
	          value: b.value
	        });
	      });
	    }
	    return itMap(this.child.query(query, options), ({key, value}) => {
	      return {
	        key: this.transform.invert(key),
	        value
	      };
	    });
	  }
	  queryKeys(q, options) {
	    const query = { ...q };
	    query.filters = (query.filters || []).map(filter => {
	      return key => filter(this.transform.convert(key));
	    });
	    const {prefix} = q;
	    if (prefix != null && prefix !== '/') {
	      delete query.prefix;
	      query.filters.push(key => {
	        return this.transform.invert(key).toString().startsWith(prefix);
	      });
	    }
	    if (query.orders) {
	      query.orders = query.orders.map(order => {
	        return (a, b) => order(this.transform.invert(a), this.transform.invert(b));
	      });
	    }
	    return itMap(this.child.queryKeys(query, options), key => {
	      return this.transform.invert(key);
	    });
	  }
	  close() {
	    return this.child.close();
	  }
	}

	const shardKey = new Key$5(SHARDING_FN);
	const shardReadmeKey = new Key$5(README_FN);
	class ShardingDatastore extends BaseDatastore {
	  constructor(store, shard) {
	    super();
	    this.child = new KeyTransformDatastore$1(store, {
	      convert: this._convertKey.bind(this),
	      invert: this._invertKey.bind(this)
	    });
	    this.shard = shard;
	  }
	  async open() {
	    await this.child.open();
	    this.shard = await ShardingDatastore.create(this.child, this.shard);
	  }
	  _convertKey(key) {
	    const s = key.toString();
	    if (s === shardKey.toString() || s === shardReadmeKey.toString()) {
	      return key;
	    }
	    const parent = new Key$5(this.shard.fun(s));
	    return parent.child(key);
	  }
	  _invertKey(key) {
	    const s = key.toString();
	    if (s === shardKey.toString() || s === shardReadmeKey.toString()) {
	      return key;
	    }
	    return Key$5.withNamespaces(key.list().slice(1));
	  }
	  static async createOrOpen(store, shard) {
	    try {
	      await ShardingDatastore.create(store, shard);
	    } catch (err) {
	      if (err && err.message !== 'datastore exists')
	        throw err;
	    }
	    return ShardingDatastore.open(store);
	  }
	  static async open(store) {
	    const shard = await readShardFun('/', store);
	    return new ShardingDatastore(store, shard);
	  }
	  static async create(store, shard) {
	    const hasShard = await store.has(shardKey);
	    if (!hasShard && !shard) {
	      throw dbOpenFailedError(Error('Shard is required when datastore doesn\'t have a shard key already.'));
	    }
	    if (!hasShard) {
	      const put = typeof store.putRaw === 'function' ? store.putRaw.bind(store) : store.put.bind(store);
	      await Promise.all([
	        put(shardKey, new TextEncoder().encode(shard.toString() + '\n')),
	        put(shardReadmeKey, new TextEncoder().encode(readme))
	      ]);
	      return shard;
	    }
	    const diskShard = await readShardFun('/', store);
	    const a = (diskShard || '').toString();
	    const b = shard.toString();
	    if (a !== b) {
	      throw new Error(`specified fun ${ b } does not match repo shard fun ${ a }`);
	    }
	    return diskShard;
	  }
	  put(key, val, options) {
	    return this.child.put(key, val, options);
	  }
	  get(key, options) {
	    return this.child.get(key, options);
	  }
	  has(key, options) {
	    return this.child.has(key, options);
	  }
	  delete(key, options) {
	    return this.child.delete(key, options);
	  }
	  async *putMany(source, options = {}) {
	    yield* this.child.putMany(source, options);
	  }
	  async *getMany(source, options = {}) {
	    yield* this.child.getMany(source, options);
	  }
	  async *deleteMany(source, options = {}) {
	    yield* this.child.deleteMany(source, options);
	  }
	  batch() {
	    return this.child.batch();
	  }
	  query(q, options) {
	    const tq = {
	      ...q,
	      filters: [
	        ({key}) => key.toString() !== shardKey.toString(),
	        ({key}) => key.toString() !== shardReadmeKey.toString()
	      ].concat(q.filters || [])
	    };
	    return this.child.query(tq, options);
	  }
	  queryKeys(q, options) {
	    const tq = {
	      ...q,
	      filters: [
	        key => key.toString() !== shardKey.toString(),
	        key => key.toString() !== shardReadmeKey.toString()
	      ].concat(q.filters || [])
	    };
	    return this.child.queryKeys(tq, options);
	  }
	  close() {
	    return this.child.close();
	  }
	}

	const pushable$3 = itPushable;

	/**
	 * Treat one or more iterables as a single iterable.
	 *
	 * Nb. sources are iterated over in parallel so the
	 * order of emitted items is not guaranteed.
	 *
	 * @template T
	 * @param {...AsyncIterable<T>|Iterable<T>} sources
	 * @returns {AsyncIterable<T>}
	 */
	const merge$5 = async function * (...sources) {
	  const output = pushable$3();

	  setTimeout(async () => {
	    try {
	      await Promise.all(
	        sources.map(async (source) => {
	          for await (const item of source) {
	            output.push(item);
	          }
	        })
	      );

	      output.end();
	    } catch (/** @type {any} */ err) {
	      output.end(err);
	    }
	  }, 0);

	  yield * output;
	};

	var itMerge = merge$5;

	class MountDatastore extends BaseDatastore {
	  constructor(mounts) {
	    super();
	    this.mounts = mounts.slice();
	  }
	  async open() {
	    await Promise.all(this.mounts.map(m => m.datastore.open()));
	  }
	  _lookup(key) {
	    for (const mount of this.mounts) {
	      if (mount.prefix.toString() === key.toString() || mount.prefix.isAncestorOf(key)) {
	        return {
	          datastore: mount.datastore,
	          mountpoint: mount.prefix
	        };
	      }
	    }
	  }
	  put(key, value, options) {
	    const match = this._lookup(key);
	    if (match == null) {
	      throw dbWriteFailedError(new Error('No datastore mounted for this key'));
	    }
	    return match.datastore.put(key, value, options);
	  }
	  get(key, options) {
	    const match = this._lookup(key);
	    if (match == null) {
	      throw notFoundError$1(new Error('No datastore mounted for this key'));
	    }
	    return match.datastore.get(key, options);
	  }
	  has(key, options) {
	    const match = this._lookup(key);
	    if (match == null) {
	      return Promise.resolve(false);
	    }
	    return match.datastore.has(key, options);
	  }
	  delete(key, options) {
	    const match = this._lookup(key);
	    if (match == null) {
	      throw dbDeleteFailedError(new Error('No datastore mounted for this key'));
	    }
	    return match.datastore.delete(key, options);
	  }
	  async close() {
	    await Promise.all(this.mounts.map(m => {
	      return m.datastore.close();
	    }));
	  }
	  batch() {
	    const batchMounts = {};
	    const lookup = key => {
	      const match = this._lookup(key);
	      if (match == null) {
	        throw new Error('No datastore mounted for this key');
	      }
	      const m = match.mountpoint.toString();
	      if (batchMounts[m] == null) {
	        batchMounts[m] = match.datastore.batch();
	      }
	      return { batch: batchMounts[m] };
	    };
	    return {
	      put: (key, value) => {
	        const match = lookup(key);
	        match.batch.put(key, value);
	      },
	      delete: key => {
	        const match = lookup(key);
	        match.batch.delete(key);
	      },
	      commit: async options => {
	        await Promise.all(Object.keys(batchMounts).map(p => batchMounts[p].commit(options)));
	      }
	    };
	  }
	  query(q, options) {
	    const qs = this.mounts.map(m => {
	      return m.datastore.query({
	        prefix: q.prefix,
	        filters: q.filters
	      }, options);
	    });
	    let it = itMerge(...qs);
	    if (q.filters)
	      q.filters.forEach(f => {
	        it = itFilter(it, f);
	      });
	    if (q.orders)
	      q.orders.forEach(o => {
	        it = sortAll$1(it, o);
	      });
	    if (q.offset != null) {
	      let i = 0;
	      it = itFilter(it, () => i++ >= q.offset);
	    }
	    if (q.limit != null)
	      it = itTake(it, q.limit);
	    return it;
	  }
	  queryKeys(q, options) {
	    const qs = this.mounts.map(m => {
	      return m.datastore.queryKeys({
	        prefix: q.prefix,
	        filters: q.filters
	      }, options);
	    });
	    let it = itMerge(...qs);
	    if (q.filters)
	      q.filters.forEach(f => {
	        it = itFilter(it, f);
	      });
	    if (q.orders)
	      q.orders.forEach(o => {
	        it = sortAll$1(it, o);
	      });
	    if (q.offset != null) {
	      let i = 0;
	      it = itFilter(it, () => i++ >= q.offset);
	    }
	    if (q.limit != null)
	      it = itTake(it, q.limit);
	    return it;
	  }
	}

	class NamespaceDatastore extends KeyTransformDatastore$1 {
	  constructor(child, prefix) {
	    super(child, {
	      convert(key) {
	        return prefix.child(key);
	      },
	      invert(key) {
	        if (prefix.toString() === '/') {
	          return key;
	        }
	        if (!prefix.isAncestorOf(key)) {
	          throw new Error(`Expected prefix: (${ prefix.toString() }) in key: ${ key.toString() }`);
	        }
	        return new Key$5(key.toString().slice(prefix.toString().length), false);
	      }
	    });
	  }
	}

	const Errors$2 = ErrorsImport$1;
	const shard = ShardImport;

	var src$m = /*#__PURE__*/Object.freeze({
		__proto__: null,
		Errors: Errors$2,
		shard: shard,
		BaseDatastore: BaseDatastore,
		MemoryDatastore: MemoryDatastore$2,
		KeyTransformDatastore: KeyTransformDatastore$1,
		ShardingDatastore: ShardingDatastore,
		MountDatastore: MountDatastore,
		TieredDatastore: TieredDatastore,
		NamespaceDatastore: NamespaceDatastore
	});

	const namespace = '/record/';
	function encodeBase32(buf) {
	  return toString$6(buf, 'base32');
	}
	function keyToTopic(key) {
	  if (typeof key === 'string' || key instanceof String) {
	    key = fromString$4(key.toString());
	  }
	  const b64url = toString$6(key, 'base64url');
	  return `${ namespace }${ b64url }`;
	}
	function topicToKey(topic) {
	  if (topic.substring(0, namespace.length) !== namespace) {
	    throw errCode$q(new Error('topic received is not from a record'), 'ERR_TOPIC_IS_NOT_FROM_RECORD_NAMESPACE');
	  }
	  const key = topic.substring(namespace.length);
	  return fromString$4(key, 'base64url');
	}

	const log$1s = Object.assign(debug$S('datastore-pubsub:publisher'), { error: debug$S('datastore-pubsub:publisher:error') });
	class PubsubDatastore extends BaseDatastore {
	  constructor(pubsub, datastore, peerId, validator, subscriptionKeyFn) {
	    super();
	    if (!validator) {
	      throw errCode$q(new TypeError('missing validator'), 'ERR_INVALID_PARAMETERS');
	    }
	    if (typeof validator.validate !== 'function') {
	      throw errCode$q(new TypeError('missing validate function'), 'ERR_INVALID_PARAMETERS');
	    }
	    if (typeof validator.select !== 'function') {
	      throw errCode$q(new TypeError('missing select function'), 'ERR_INVALID_PARAMETERS');
	    }
	    if (subscriptionKeyFn && typeof subscriptionKeyFn !== 'function') {
	      throw errCode$q(new TypeError('invalid subscriptionKeyFn received'), 'ERR_INVALID_PARAMETERS');
	    }
	    this._pubsub = pubsub;
	    this._datastore = datastore;
	    this._peerId = peerId;
	    this._validator = validator;
	    this._handleSubscriptionKeyFn = subscriptionKeyFn;
	    this._onMessage = this._onMessage.bind(this);
	  }
	  async put(key, val) {
	    if (!(key instanceof Uint8Array)) {
	      const errMsg = 'datastore key does not have a valid format';
	      log$1s.error(errMsg);
	      throw errCode$q(new Error(errMsg), 'ERR_INVALID_DATASTORE_KEY');
	    }
	    if (!(val instanceof Uint8Array)) {
	      const errMsg = 'received value is not a Uint8Array';
	      log$1s.error(errMsg);
	      throw errCode$q(new Error(errMsg), 'ERR_INVALID_VALUE_RECEIVED');
	    }
	    const stringifiedTopic = keyToTopic(key);
	    log$1s(`publish value for topic ${ stringifiedTopic }`);
	    await this._pubsub.publish(stringifiedTopic, val);
	  }
	  async get(key) {
	    if (!(key instanceof Uint8Array)) {
	      const errMsg = 'datastore key does not have a valid format';
	      log$1s.error(errMsg);
	      throw errCode$q(new Error(errMsg), 'ERR_INVALID_DATASTORE_KEY');
	    }
	    const stringifiedTopic = keyToTopic(key);
	    const subscriptions = await this._pubsub.getTopics();
	    if (subscriptions && Array.isArray(subscriptions) && subscriptions.indexOf(stringifiedTopic) > -1) {
	      return this._getLocal(key);
	    }
	    try {
	      this._pubsub.on(stringifiedTopic, this._onMessage);
	      await this._pubsub.subscribe(stringifiedTopic);
	    } catch (err) {
	      const errMsg = `cannot subscribe topic ${ stringifiedTopic }`;
	      log$1s.error(errMsg);
	      throw errCode$q(new Error(errMsg), 'ERR_SUBSCRIBING_TOPIC');
	    }
	    log$1s(`subscribed values for key ${ stringifiedTopic }`);
	    return this._getLocal(key);
	  }
	  unsubscribe(key) {
	    const stringifiedTopic = keyToTopic(key);
	    this._pubsub.removeListener(stringifiedTopic, this._onMessage);
	    return this._pubsub.unsubscribe(stringifiedTopic);
	  }
	  async _getLocal(key) {
	    const routingKey = new Key$5('/' + encodeBase32(key), false);
	    let dsVal;
	    try {
	      dsVal = await this._datastore.get(routingKey);
	    } catch (err) {
	      if (err.code !== 'ERR_NOT_FOUND') {
	        const errMsg = `unexpected error getting the ipns record for ${ routingKey.toString() }`;
	        log$1s.error(errMsg);
	        throw errCode$q(new Error(errMsg), 'ERR_UNEXPECTED_ERROR_GETTING_RECORD');
	      }
	      const errMsg = `local record requested was not found for ${ routingKey.toString() }`;
	      log$1s.error(errMsg);
	      throw errCode$q(new Error(errMsg), 'ERR_NOT_FOUND');
	    }
	    if (!(dsVal instanceof Uint8Array)) {
	      const errMsg = 'found record that we couldn\'t convert to a value';
	      log$1s.error(errMsg);
	      throw errCode$q(new Error(errMsg), 'ERR_INVALID_RECORD_RECEIVED');
	    }
	    return dsVal;
	  }
	  async _onMessage(msg) {
	    const {data, from, topicIDs} = msg;
	    let key;
	    try {
	      key = topicToKey(topicIDs[0]);
	    } catch (err) {
	      log$1s.error(err);
	      return;
	    }
	    log$1s(`message received for topic ${ topicIDs[0] }`);
	    if (from === this._peerId.toB58String()) {
	      log$1s('message discarded as it is from the same peer');
	      return;
	    }
	    if (this._handleSubscriptionKeyFn) {
	      let res;
	      try {
	        res = await this._handleSubscriptionKeyFn(key);
	      } catch (err) {
	        log$1s.error('message discarded by the subscriptionKeyFn');
	        return;
	      }
	      key = res;
	    }
	    try {
	      await this._storeIfSubscriptionIsBetter(key, data);
	    } catch (err) {
	      log$1s.error(err);
	    }
	  }
	  async _storeIfSubscriptionIsBetter(key, data) {
	    let isBetter = false;
	    try {
	      isBetter = await this._isBetter(key, data);
	    } catch (err) {
	      if (err.code !== 'ERR_NOT_VALID_RECORD') {
	        throw err;
	      }
	    }
	    if (isBetter) {
	      await this._storeRecord(key, data);
	    }
	  }
	  async _validateRecord(value, peerId) {
	    return this._validator.validate(value, peerId);
	  }
	  async _selectRecord(key, records) {
	    const res = await this._validator.select(key, records);
	    return res === 0;
	  }
	  async _isBetter(key, val) {
	    try {
	      await this._validateRecord(val, key);
	    } catch (err) {
	      const errMsg = 'record received through pubsub is not valid';
	      log$1s.error(errMsg);
	      throw errCode$q(new Error(errMsg), 'ERR_NOT_VALID_RECORD');
	    }
	    const dsKey = new Key$5(key);
	    let currentRecord;
	    try {
	      currentRecord = await this._getLocal(dsKey.uint8Array());
	    } catch (err) {
	      return true;
	    }
	    if (equals$1(currentRecord, val)) {
	      return false;
	    }
	    return this._selectRecord(key, [
	      currentRecord,
	      val
	    ]);
	  }
	  async _storeRecord(key, data) {
	    const routingKey = new Key$5('/' + encodeBase32(key), false);
	    await this._datastore.put(routingKey, data);
	    log$1s(`record for ${ keyToTopic(key) } was stored in the datastore`);
	  }
	}

	const log$1r = Object.assign(debug$S('ipfs:ipns:pubsub'), { error: debug$S('ipfs:ipns:pubsub:error') });
	class IpnsPubsubDatastore {
	  constructor(pubsub, localDatastore, peerId) {
	    this._subscriptions = {};
	    this._handleSubscriptionKey = this._handleSubscriptionKey.bind(this);
	    this._pubsubDs = new PubsubDatastore(pubsub, localDatastore, peerId, validator$3, this._handleSubscriptionKey);
	  }
	  async put(key, value) {
	    try {
	      await this._pubsubDs.put(key, value);
	    } catch (err) {
	      log$1r.error(err);
	      throw err;
	    }
	  }
	  async get(key) {
	    let res;
	    let err;
	    try {
	      res = await this._pubsubDs.get(key);
	    } catch (e) {
	      err = e;
	    }
	    const ns = key.slice(0, namespaceLength);
	    if (toString$6(ns) === namespace$1) {
	      const stringifiedTopic = base58btc$6.encode(key).substring(1);
	      const id = base58btc$6.encode(key.slice(namespaceLength)).substring(1);
	      this._subscriptions[stringifiedTopic] = id;
	      log$1r(`subscribed to pubsub topic ${ stringifiedTopic }, id ${ id }`);
	    }
	    if (err) {
	      throw err;
	    }
	    return res;
	  }
	  _handleSubscriptionKey(key) {
	    if (key instanceof Uint8Array) {
	      key = toString$6(key, 'base58btc');
	    }
	    const subscriber = this._subscriptions[key];
	    if (!subscriber) {
	      throw errCode$q(new Error(`key ${ key } does not correspond to a subscription`), 'ERR_INVALID_KEY');
	    }
	    let keys;
	    try {
	      keys = getIdKeys(fromString$4(subscriber, 'base58btc'));
	    } catch (err) {
	      log$1r.error(err);
	      throw err;
	    }
	    return keys.routingKey.uint8Array();
	  }
	  getSubscriptions() {
	    const subscriptions = Object.values(this._subscriptions).filter(Boolean);
	    return subscriptions.map(sub => `${ namespace$1 }${ sub }`);
	  }
	  async cancel(name) {
	    if (typeof name !== 'string') {
	      throw errCode$q(new Error('invalid subscription name'), 'ERR_INVALID_SUBSCRIPTION_NAME');
	    }
	    if (name.startsWith(namespace$1)) {
	      name = name.substring(namespaceLength);
	    }
	    const stringifiedTopic = Object.keys(this._subscriptions).find(key => this._subscriptions[key] === name);
	    if (!stringifiedTopic) {
	      return { canceled: false };
	    }
	    const bufTopic = fromString$4(stringifiedTopic);
	    this._pubsubDs.unsubscribe(bufTopic);
	    delete this._subscriptions[stringifiedTopic];
	    log$1r(`unsubscribed pubsub ${ stringifiedTopic }: ${ name }`);
	    return { canceled: true };
	  }
	}

	/*eslint-disable*/

	var $protobuf$8 = minimal;

	// Common aliases
	var $Reader$f = $protobuf$8.Reader, $Writer$f = $protobuf$8.Writer, $util$e = $protobuf$8.util;

	// Exported root namespace
	var $root$f = $protobuf$8.roots["libp2p-record"] || ($protobuf$8.roots["libp2p-record"] = {});

	$root$f.Record = (function() {

	    /**
	     * Properties of a Record.
	     * @exports IRecord
	     * @interface IRecord
	     * @property {Uint8Array|null} [key] Record key
	     * @property {Uint8Array|null} [value] Record value
	     * @property {string|null} [timeReceived] Record timeReceived
	     */

	    /**
	     * Constructs a new Record.
	     * @exports Record
	     * @classdesc Represents a Record.
	     * @implements IRecord
	     * @constructor
	     * @param {IRecord=} [p] Properties to set
	     */
	    function Record(p) {
	        if (p)
	            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                if (p[ks[i]] != null)
	                    this[ks[i]] = p[ks[i]];
	    }

	    /**
	     * Record key.
	     * @member {Uint8Array} key
	     * @memberof Record
	     * @instance
	     */
	    Record.prototype.key = $util$e.newBuffer([]);

	    /**
	     * Record value.
	     * @member {Uint8Array} value
	     * @memberof Record
	     * @instance
	     */
	    Record.prototype.value = $util$e.newBuffer([]);

	    /**
	     * Record timeReceived.
	     * @member {string} timeReceived
	     * @memberof Record
	     * @instance
	     */
	    Record.prototype.timeReceived = "";

	    /**
	     * Encodes the specified Record message. Does not implicitly {@link Record.verify|verify} messages.
	     * @function encode
	     * @memberof Record
	     * @static
	     * @param {IRecord} m Record message or plain object to encode
	     * @param {$protobuf.Writer} [w] Writer to encode to
	     * @returns {$protobuf.Writer} Writer
	     */
	    Record.encode = function encode(m, w) {
	        if (!w)
	            w = $Writer$f.create();
	        if (m.key != null && Object.hasOwnProperty.call(m, "key"))
	            w.uint32(10).bytes(m.key);
	        if (m.value != null && Object.hasOwnProperty.call(m, "value"))
	            w.uint32(18).bytes(m.value);
	        if (m.timeReceived != null && Object.hasOwnProperty.call(m, "timeReceived"))
	            w.uint32(42).string(m.timeReceived);
	        return w;
	    };

	    /**
	     * Decodes a Record message from the specified reader or buffer.
	     * @function decode
	     * @memberof Record
	     * @static
	     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	     * @param {number} [l] Message length if known beforehand
	     * @returns {Record} Record
	     * @throws {Error} If the payload is not a reader or valid buffer
	     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	     */
	    Record.decode = function decode(r, l) {
	        if (!(r instanceof $Reader$f))
	            r = $Reader$f.create(r);
	        var c = l === undefined ? r.len : r.pos + l, m = new $root$f.Record();
	        while (r.pos < c) {
	            var t = r.uint32();
	            switch (t >>> 3) {
	            case 1:
	                m.key = r.bytes();
	                break;
	            case 2:
	                m.value = r.bytes();
	                break;
	            case 5:
	                m.timeReceived = r.string();
	                break;
	            default:
	                r.skipType(t & 7);
	                break;
	            }
	        }
	        return m;
	    };

	    /**
	     * Creates a Record message from a plain object. Also converts values to their respective internal types.
	     * @function fromObject
	     * @memberof Record
	     * @static
	     * @param {Object.<string,*>} d Plain object
	     * @returns {Record} Record
	     */
	    Record.fromObject = function fromObject(d) {
	        if (d instanceof $root$f.Record)
	            return d;
	        var m = new $root$f.Record();
	        if (d.key != null) {
	            if (typeof d.key === "string")
	                $util$e.base64.decode(d.key, m.key = $util$e.newBuffer($util$e.base64.length(d.key)), 0);
	            else if (d.key.length)
	                m.key = d.key;
	        }
	        if (d.value != null) {
	            if (typeof d.value === "string")
	                $util$e.base64.decode(d.value, m.value = $util$e.newBuffer($util$e.base64.length(d.value)), 0);
	            else if (d.value.length)
	                m.value = d.value;
	        }
	        if (d.timeReceived != null) {
	            m.timeReceived = String(d.timeReceived);
	        }
	        return m;
	    };

	    /**
	     * Creates a plain object from a Record message. Also converts values to other types if specified.
	     * @function toObject
	     * @memberof Record
	     * @static
	     * @param {Record} m Record
	     * @param {$protobuf.IConversionOptions} [o] Conversion options
	     * @returns {Object.<string,*>} Plain object
	     */
	    Record.toObject = function toObject(m, o) {
	        if (!o)
	            o = {};
	        var d = {};
	        if (o.defaults) {
	            if (o.bytes === String)
	                d.key = "";
	            else {
	                d.key = [];
	                if (o.bytes !== Array)
	                    d.key = $util$e.newBuffer(d.key);
	            }
	            if (o.bytes === String)
	                d.value = "";
	            else {
	                d.value = [];
	                if (o.bytes !== Array)
	                    d.value = $util$e.newBuffer(d.value);
	            }
	            d.timeReceived = "";
	        }
	        if (m.key != null && m.hasOwnProperty("key")) {
	            d.key = o.bytes === String ? $util$e.base64.encode(m.key, 0, m.key.length) : o.bytes === Array ? Array.prototype.slice.call(m.key) : m.key;
	        }
	        if (m.value != null && m.hasOwnProperty("value")) {
	            d.value = o.bytes === String ? $util$e.base64.encode(m.value, 0, m.value.length) : o.bytes === Array ? Array.prototype.slice.call(m.value) : m.value;
	        }
	        if (m.timeReceived != null && m.hasOwnProperty("timeReceived")) {
	            d.timeReceived = m.timeReceived;
	        }
	        return d;
	    };

	    /**
	     * Converts this Record to JSON.
	     * @function toJSON
	     * @memberof Record
	     * @instance
	     * @returns {Object.<string,*>} JSON object
	     */
	    Record.prototype.toJSON = function toJSON() {
	        return this.constructor.toObject(this, $protobuf$8.util.toJSONOptions);
	    };

	    return Record;
	})();

	var record$1 = $root$f;

	var utils$C = {};

	/**
	 * Convert a JavaScript date into an `RFC3339Nano` formatted
	 * string.
	 *
	 * @param {Date} time
	 */
	utils$C.toRFC3339 = (time) => {
	  const year = time.getUTCFullYear();
	  const month = String(time.getUTCMonth() + 1).padStart(2, '0');
	  const day = String(time.getUTCDate()).padStart(2, '0');
	  const hour = String(time.getUTCHours()).padStart(2, '0');
	  const minute = String(time.getUTCMinutes()).padStart(2, '0');
	  const seconds = String(time.getUTCSeconds()).padStart(2, '0');
	  const milliseconds = time.getUTCMilliseconds();
	  const nanoseconds = milliseconds * 1000 * 1000;

	  return `${year}-${month}-${day}T${hour}:${minute}:${seconds}.${nanoseconds}Z`
	};

	/**
	 * Parses a date string formatted as `RFC3339Nano` into a
	 * JavaScript Date object.
	 *
	 * @param {string} time
	 */
	utils$C.parseRFC3339 = (time) => {
	  const rfc3339Matcher = new RegExp(
	    // 2006-01-02T
	    '(\\d{4})-(\\d{2})-(\\d{2})T' +
	    // 15:04:05
	    '(\\d{2}):(\\d{2}):(\\d{2})' +
	    // .999999999Z
	    '\\.(\\d+)Z'
	  );
	  const m = String(time).trim().match(rfc3339Matcher);

	  if (!m) {
	    throw new Error('Invalid format')
	  }

	  const year = parseInt(m[1], 10);
	  const month = parseInt(m[2], 10) - 1;
	  const date = parseInt(m[3], 10);
	  const hour = parseInt(m[4], 10);
	  const minute = parseInt(m[5], 10);
	  const second = parseInt(m[6], 10);
	  const millisecond = parseInt(m[7].slice(0, -6), 10);

	  return new Date(Date.UTC(year, month, date, hour, minute, second, millisecond))
	};

	const {
	  Record: PBRecord
	} = record$1;
	const utils$B = utils$C;

	/**
	 * @typedef {{ key: Uint8Array, value: Uint8Array, timeReceived: string }} ProtobufRecord
	 */

	class Record$5 {
	  /**
	   * @param {Uint8Array} [key]
	   * @param {Uint8Array} [value]
	   * @param {Date} [timeReceived]
	   */
	  constructor (key, value, timeReceived) {
	    if (!(key instanceof Uint8Array)) {
	      throw new Error('key must be a Uint8Array')
	    }

	    if (!(value instanceof Uint8Array)) {
	      throw new Error('value must be a Uint8Array')
	    }

	    this.key = key;
	    this.value = value;
	    this.timeReceived = timeReceived;
	  }

	  serialize () {
	    return PBRecord.encode(this.prepareSerialize()).finish()
	  }

	  /**
	   * Return the object format ready to be given to the protobuf library.
	   */
	  prepareSerialize () {
	    return {
	      key: this.key,
	      value: this.value,
	      timeReceived: this.timeReceived && utils$B.toRFC3339(this.timeReceived)
	    }
	  }

	  /**
	   * Decode a protobuf encoded record.
	   *
	   * @param {Uint8Array} raw
	   */
	  static deserialize (raw) {
	    const message = PBRecord.decode(raw);
	    return Record$5.fromDeserialized(PBRecord.toObject(message, {
	      defaults: false,
	      arrays: true,
	      longs: Number,
	      objects: false
	    }))
	  }

	  /**
	   * Create a record from the raw object returned from the protobuf library.
	   *
	   * @param {{ [k: string]: any }} obj
	   */
	  static fromDeserialized (obj) {
	    let recvtime;
	    if (obj.timeReceived) {
	      recvtime = utils$B.parseRFC3339(obj.timeReceived);
	    }

	    const rec = new Record$5(
	      obj.key, obj.value, recvtime
	    );

	    return rec
	  }
	}

	var record = Record$5;

	const { sha256: sha256$5 } = require$$1$6;
	const errcode$l = errCode$q;
	const { toString: uint8ArrayToString$b } = require$$8;
	const { equals: uint8ArrayEquals$2 } = require$$7$1;

	/**
	 * Validator for public key records.
	 * Verifies that the passed in record value is the PublicKey
	 * that matches the passed in key.
	 * If validation fails the returned Promise will reject with the error.
	 *
	 * @param {Uint8Array} key - A valid key is of the form `'/pk/<keymultihash>'`
	 * @param {Uint8Array} publicKey - The public key to validate against (protobuf encoded).
	 */
	const validatePublicKeyRecord = async (key, publicKey) => {
	  if (!(key instanceof Uint8Array)) {
	    throw errcode$l(new Error('"key" must be a Uint8Array'), 'ERR_INVALID_RECORD_KEY_NOT_BUFFER')
	  }

	  if (key.byteLength < 5) {
	    throw errcode$l(new Error('invalid public key record'), 'ERR_INVALID_RECORD_KEY_TOO_SHORT')
	  }

	  const prefix = uint8ArrayToString$b(key.subarray(0, 4));

	  if (prefix !== '/pk/') {
	    throw errcode$l(new Error('key was not prefixed with /pk/'), 'ERR_INVALID_RECORD_KEY_BAD_PREFIX')
	  }

	  const keyhash = key.slice(4);

	  const publicKeyHash = await sha256$5.digest(publicKey);

	  if (!uint8ArrayEquals$2(keyhash, publicKeyHash.bytes)) {
	    throw errcode$l(new Error('public key does not match passed in key'), 'ERR_INVALID_RECORD_HASH_MISMATCH')
	  }
	};

	var publicKey$1 = {
	  func: validatePublicKeyRecord,
	  sign: false
	};

	var validators = {
	  pk: publicKey$1
	};

	const errcode$k = errCode$q;
	const { toString: uint8ArrayToString$a } = require$$8;

	/**
	 * @typedef {import('./record')} Record
	 */

	/**
	 * Checks a record and ensures it is still valid.
	 * It runs the needed validators.
	 * If verification fails the returned Promise will reject with the error.
	 *
	 * @param {import('libp2p-interfaces/src/types').DhtValidators} validators
	 * @param {Record} record
	 */
	const verifyRecord = (validators, record) => {
	  const key = record.key;
	  const keyString = uint8ArrayToString$a(key);
	  const parts = keyString.split('/');

	  if (parts.length < 3) {
	    // No validator available
	    return
	  }

	  const validator = validators[parts[1].toString()];

	  if (!validator) {
	    const errMsg = 'Invalid record keytype';

	    throw errcode$k(new Error(errMsg), 'ERR_INVALID_RECORD_KEY_TYPE')
	  }

	  return validator.func(key, record.value)
	};

	var validator$2 = {
	  verifyRecord: verifyRecord,
	  validators: validators
	};

	/**
	 * Best record selector, for public key records.
	 * Simply returns the first record, as all valid public key
	 * records are equal.
	 *
	 * @param {Uint8Array} k
	 * @param {Array<Uint8Array>} records
	 */
	const publicKeySelector = (k, records) => {
	  return 0
	};

	var publicKey = publicKeySelector;

	var selectors = {
	  pk: publicKey
	};

	const errcode$j = errCode$q;
	const { toString: uint8ArrayToString$9 } = require$$8;

	/**
	 * Select the best record out of the given records.
	 *
	 * @param {import('libp2p-interfaces/src/types').DhtSelectors} selectors
	 * @param {Uint8Array} k
	 * @param {Array<Uint8Array>} records
	 */
	const bestRecord = (selectors, k, records) => {
	  if (records.length === 0) {
	    const errMsg = 'No records given';

	    throw errcode$j(new Error(errMsg), 'ERR_NO_RECORDS_RECEIVED')
	  }

	  const kStr = uint8ArrayToString$9(k);
	  const parts = kStr.split('/');

	  if (parts.length < 3) {
	    const errMsg = 'Record key does not have a selector function';

	    throw errcode$j(new Error(errMsg), 'ERR_NO_SELECTOR_FUNCTION_FOR_RECORD_KEY')
	  }

	  const selector = selectors[parts[1].toString()];

	  if (!selector) {
	    const errMsg = `Unrecognized key prefix: ${parts[1]}`;

	    throw errcode$j(new Error(errMsg), 'ERR_UNRECOGNIZED_KEY_PREFIX')
	  }

	  if (records.length === 1) {
	    return 0
	  }

	  return selector(k, records)
	};

	var selection = {
	  bestRecord: bestRecord,
	  selectors: selectors
	};

	var src$l = {
	  Record: record,
	  validator: validator$2,
	  selection: selection
	};

	const log$1q = Object.assign(debug$S('ipfs:ipns:offline-datastore'), { error: debug$S('ipfs:ipns:offline-datastore:error') });
	class OfflineDatastore {
	  constructor(repo) {
	    this._repo = repo;
	    this.stores = [];
	  }
	  async put(key, value) {
	    if (!(key instanceof Uint8Array)) {
	      throw errCode$q(new Error('Offline datastore key must be a Uint8Array'), 'ERR_INVALID_KEY');
	    }
	    if (!(value instanceof Uint8Array)) {
	      throw errCode$q(new Error('Offline datastore value must be a Uint8Array'), 'ERR_INVALID_VALUE');
	    }
	    let routingKey;
	    try {
	      routingKey = this._routingKey(key);
	    } catch (err) {
	      log$1q.error(err);
	      throw errCode$q(new Error('Not possible to generate the routing key'), 'ERR_GENERATING_ROUTING_KEY');
	    }
	    const record = new src$l.Record(key, value);
	    return this._repo.datastore.put(routingKey, record.serialize());
	  }
	  async get(key) {
	    if (!(key instanceof Uint8Array)) {
	      throw errCode$q(new Error('Offline datastore key must be a Uint8Array'), 'ERR_INVALID_KEY');
	    }
	    let routingKey;
	    try {
	      routingKey = this._routingKey(key);
	    } catch (err) {
	      log$1q.error(err);
	      throw errCode$q(new Error('Not possible to generate the routing key'), 'ERR_GENERATING_ROUTING_KEY');
	    }
	    const res = await this._repo.datastore.get(routingKey);
	    let record;
	    try {
	      record = src$l.Record.deserialize(res);
	    } catch (err) {
	      log$1q.error(err);
	      throw err;
	    }
	    return record.value;
	  }
	  _routingKey(key) {
	    return new Key$5('/dht/record/' + toString$6(key, 'base32'), false);
	  }
	}

	const log$1p = Object.assign(debug$S('ipfs:ipns:dht-datastore'), { error: debug$S('ipfs:ipns:dht-datastore:error') });
	class DHTDatastore {
	  constructor(dht) {
	    this._dht = dht;
	  }
	  async put(key, value) {
	    try {
	      await itDrain(this._dht.put(key, value));
	    } catch (err) {
	      log$1p.error(err);
	      throw err;
	    }
	  }
	  async get(key) {
	    for await (const event of this._dht.get(key)) {
	      if (event.name === 'VALUE') {
	        return event.value;
	      }
	    }
	    throw notFoundError$1();
	  }
	}

	function createRouting({libp2p, repo, peerId, options}) {
	  const ipnsStores = [];
	  let pubsubDs;
	  if (get$2(options, 'EXPERIMENTAL.ipnsPubsub', false)) {
	    const pubsub = libp2p.pubsub;
	    const localDatastore = repo.datastore;
	    pubsubDs = new IpnsPubsubDatastore(pubsub, localDatastore, peerId);
	    ipnsStores.push(pubsubDs);
	  }
	  if (!get$2(options, 'offline', false) && libp2p._config && libp2p._config.dht && libp2p._config.dht.enabled) {
	    ipnsStores.push(new DHTDatastore(libp2p._dht));
	  }
	  if (get$2(options, 'offline', false) || ipnsStores.length === 0) {
	    const offlineDatastore = new OfflineDatastore(repo);
	    ipnsStores.push(offlineDatastore);
	  }
	  return new TieredDatastore(ipnsStores);
	}

	const log$1o = debug$S('ipfs:components:ipns');
	class IPNSAPI {
	  constructor(options = { pass: '' }) {
	    this.options = options;
	    this.offline = null;
	    this.online = null;
	  }
	  getIPNS() {
	    const ipns = this.online || this.offline;
	    if (ipns) {
	      return ipns;
	    } else {
	      throw new NotInitializedError();
	    }
	  }
	  get routing() {
	    return this.getIPNS().routing;
	  }
	  startOffline({repo, peerId, keychain}) {
	    if (this.offline != null) {
	      throw new AlreadyInitializedError();
	    }
	    log$1o('initializing IPNS keyspace');
	    const routing = new OfflineDatastore(repo);
	    const ipns = new IPNS(routing, repo.datastore, peerId, keychain, this.options);
	    this.offline = ipns;
	  }
	  async startOnline({libp2p, repo, peerId, keychain}) {
	    if (this.online != null) {
	      throw new AlreadyInitializedError();
	    }
	    const routing = createRouting({
	      libp2p,
	      repo,
	      peerId,
	      options: this.options
	    });
	    const ipns = new IPNS(routing, repo.datastore, peerId, keychain, this.options);
	    await ipns.republisher.start();
	    this.online = ipns;
	  }
	  async stop() {
	    const ipns = this.online;
	    if (ipns) {
	      await ipns.republisher.stop();
	      this.online = null;
	    }
	  }
	  publish(privKey, value, lifetime) {
	    return this.getIPNS().publish(privKey, value, lifetime);
	  }
	  resolve(name, options) {
	    return this.getIPNS().resolve(name, options);
	  }
	  initializeKeyspace(privKey, value) {
	    return this.getIPNS().initializeKeyspace(privKey, value);
	  }
	}

	async function resolvePath({ipns, repo, codecs}, name, options) {
	  if (src$q.ipnsPath(name)) {
	    return ipns.resolve(name);
	  }
	  const {cid, path} = toCidAndPath(name);
	  await itDrain(resolve$5(cid, path || '', codecs, repo, options));
	}

	const log$1n = Object.assign(debug$S('ipfs:name:publish'), { error: debug$S('ipfs:name:publish:error') });
	function createPublish$2({ipns, repo, codecs, peerId, isOnline, keychain}) {
	  const lookupKey = async keyName => {
	    if (keyName === 'self') {
	      return peerId.privKey;
	    }
	    try {
	      const pem = await keychain.exportKey(keyName, 'temp');
	      const privateKey = await src$n.keys.import(pem, 'temp');
	      return privateKey;
	    } catch (err) {
	      log$1n.error(err);
	      throw errCode$q(err, 'ERR_CANNOT_GET_KEY');
	    }
	  };
	  async function publish(value, options = {}) {
	    const resolve = !(options.resolve === false);
	    const lifetime = options.lifetime || '24h';
	    const key = options.key || 'self';
	    if (!isOnline()) {
	      throw errCode$q(new Error(OFFLINE_ERROR), 'OFFLINE_ERROR');
	    }
	    try {
	      value = normalizePath(value);
	    } catch (err) {
	      log$1n.error(err);
	      throw err;
	    }
	    let pubLifetime = 0;
	    try {
	      pubLifetime = parse$1(lifetime) || 0;
	      pubLifetime = parseFloat(pubLifetime.toFixed(6));
	    } catch (err) {
	      log$1n.error(err);
	      throw err;
	    }
	    const results = await Promise.all([
	      lookupKey(key),
	      resolve ? resolvePath({
	        ipns,
	        repo,
	        codecs
	      }, value) : Promise.resolve()
	    ]);
	    const bytes = fromString$4(value);
	    const result = await ipns.publish(results[0], bytes, pubLifetime);
	    return {
	      name: result.name,
	      value: toString$6(result.value)
	    };
	  }
	  return withTimeoutOption(publish);
	}

	// Adapted from RFC 2181 (See section 11)
	//
	// The RFC defines a Domain Name to be at most 255 chars including seperators
	// between labels.
	// Subdomains are labels plus a seperator. A label is a string starting and
	// ending with an alphanum, with dashes allowed in the middle. It is between 1 and 63 chars.
	//
	// We make some assumptions below that go beyond the RFC. We assume the TLD
	// to be at least 2 chars. The regex also allows domains longer than 255 chars,
	// but allows at most 127 subdomains, as assuming a lower-bound of one char per
	// subdomain will yield 252, and adding a TLD of 2 chars sums to 254.
	/*
	(?:                   // Group 1: This is for subdomain, which is composed of a label and a seperator (length = [1, 63] + 1)
	  [a-z0-9]
	  (?:
	    [a-z0-9\-]{0,61} // Limited to 61 chars as we have at least two chars if we reach this group (61 + 2 = 63 which is the limit)
	    [a-z0-9]
	  )?
	  \.                  // Label seperator
	){0,126}             // If we assume the lower-bound of 1 char labels, we can at most have 126 groups before approaching the total limit of 255 chars
	(?:                   // Group 2: Assume that the TLD is at least 2 chars (for sanity)
	  [a-z0-9]
	  [a-z0-9\-]{0,61}
	  [a-z0-9]
	)
	\.?                   // Some consider a trailing dot to be considered valid as it signifies the root of the domain tree
	 */
	var domainNameRegex = /^(?:[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9])?\.){0,126}(?:[a-z0-9](?:[a-z0-9\-]{0,61}[a-z0-9]))\.?$/i;

	/**
	 * Test whether a string is a valid domain name, optionally checking for a root dot as well
	 * @param  {String}  domainName
	 * @param  {Boolean} rootDot    Check for a root dot eg. 'example.com.'. Defaults to false
	 * @return {Boolean}
	 */
	var isDomainName = function isDomainName (domainName, rootDot) {
	  if (rootDot == null) rootDot = false;

	  if (domainName.length < 2) return false
	  if (domainName.length > 255) return false

	  var lastChar = domainName[domainName.length - 1];
	  if (rootDot) {
	    if (lastChar !== '.') return false
	  } else {
	    if (lastChar === '.') return false
	  }

	  return domainNameRegex.test(domainName)
	};

	const mergeOptions$j = mergeOptions$k.bind({ ignoreUndefined: true });
	const log$1m = Object.assign(debug$S('ipfs:name:resolve'), { error: debug$S('ipfs:name:resolve:error') });
	const appendRemainder = (result, remainder) => remainder.length > 0 ? result + '/' + remainder.join('/') : result;
	function createResolve$4({
	  dns,
	  ipns,
	  peerId,
	  isOnline,
	  options: {offline}
	}) {
	  async function* resolve(name, options = {}) {
	    options = mergeOptions$j({
	      nocache: false,
	      recursive: true
	    }, options);
	    if (offline && options && options.nocache) {
	      throw errCode$q(new Error('cannot specify both offline and nocache'), 'ERR_NOCACHE_AND_OFFLINE');
	    }
	    if (!isOnline() && !offline) {
	      throw errCode$q(new Error(OFFLINE_ERROR), 'OFFLINE_ERROR');
	    }
	    if (!name) {
	      name = peerId.toB58String();
	    }
	    if (!name.startsWith('/ipns/')) {
	      name = `/ipns/${ name }`;
	    }
	    let [namespace, hash, ...remainder] = name.slice(1).split('/');
	    try {
	      if (hash.substring(0, 1) === '1') {
	        const id = PeerIdImport.parse(hash);
	        const digest = decode$k(id.toBytes());
	        const libp2pKey = CID$6.createV1(114, digest);
	        hash = libp2pKey.toString(base36);
	      } else {
	        const cid = CID$6.parse(hash);
	        if (cid.version === 1) {
	          hash = cid.toString(base36);
	        }
	      }
	    } catch (err) {
	      if (isDomainName(hash)) {
	        yield appendRemainder(await dns(hash, options), remainder);
	        return;
	      }
	      log$1m.error(err);
	      throw errCode$q(new Error('Invalid IPNS name'), 'ERR_IPNS_INVALID_NAME');
	    }
	    const value = await ipns.resolve(`/${ namespace }/${ hash }`, options);
	    yield appendRemainder(value instanceof Uint8Array ? toString$6(value) : value, remainder);
	  }
	  return withTimeoutOption(resolve);
	}

	function getPubsubRouting(ipns, options) {
	  if (!ipns || !(options && options.ipnsPubsub)) {
	    throw errCode$q(new Error('IPNS pubsub subsystem is not enabled'), 'ERR_IPNS_PUBSUB_NOT_ENABLED');
	  }
	  if (ipns.routing instanceof IpnsPubsubDatastore) {
	    return ipns.routing;
	  }
	  const pubsub = (ipns.routing.stores || []).find(s => s instanceof IpnsPubsubDatastore);
	  if (!pubsub) {
	    throw errCode$q(new Error('IPNS pubsub datastore not found'), 'ERR_PUBSUB_DATASTORE_NOT_FOUND');
	  }
	  return pubsub;
	}

	function createCancel$1({ipns, options}) {
	  const experimental = options.EXPERIMENTAL;
	  async function cancel(name, options = {}) {
	    const pubsub = getPubsubRouting(ipns, experimental);
	    return pubsub.cancel(name, options);
	  }
	  return withTimeoutOption(cancel);
	}

	function createState$1({ipns, options}) {
	  const experimental = options.EXPERIMENTAL;
	  async function state(_options = {}) {
	    try {
	      return { enabled: Boolean(getPubsubRouting(ipns, experimental)) };
	    } catch (err) {
	      return { enabled: false };
	    }
	  }
	  return withTimeoutOption(state);
	}

	function createSubs$1({ipns, options}) {
	  const experimental = options.EXPERIMENTAL;
	  async function subs(options = {}) {
	    const pubsub = getPubsubRouting(ipns, experimental);
	    return pubsub.getSubscriptions(options);
	  }
	  return withTimeoutOption(subs);
	}

	class PubSubAPI {
	  constructor({ipns, options}) {
	    this.cancel = createCancel$1({
	      ipns,
	      options
	    });
	    this.state = createState$1({
	      ipns,
	      options
	    });
	    this.subs = createSubs$1({
	      ipns,
	      options
	    });
	  }
	}

	class NameAPI {
	  constructor({dns, ipns, repo, codecs, peerId, isOnline, keychain, options}) {
	    this.publish = createPublish$2({
	      ipns,
	      repo,
	      codecs,
	      peerId,
	      isOnline,
	      keychain
	    });
	    this.resolve = createResolve$4({
	      dns,
	      ipns,
	      peerId,
	      isOnline,
	      options
	    });
	    this.pubsub = new PubSubAPI({
	      ipns,
	      options
	    });
	  }
	}

	const ERR_NOT_FOUND$1 = notFoundError$1().code;
	const Format = {
	  default: '<dst>',
	  edges: '<src> -> <dst>'
	};
	function createRefs$1({repo, codecs, resolve, preload}) {
	  async function* refs(ipfsPath, options = {}) {
	    if (options.maxDepth === 0) {
	      return;
	    }
	    if (options.edges && options.format && options.format !== Format.default) {
	      throw new Error('Cannot set edges to true and also specify format');
	    }
	    options.format = options.edges ? Format.edges : options.format;
	    if (typeof options.maxDepth !== 'number') {
	      options.maxDepth = options.recursive ? Infinity : 1;
	    }
	    if (options.timeout) {
	      const controller = new timeoutAbortController.TimeoutController(options.timeout);
	      const signals = [controller.signal];
	      if (options.signal) {
	        signals.push(options.signal);
	      }
	      options.signal = anySignal_2(signals);
	    }
	    const rawPaths = Array.isArray(ipfsPath) ? ipfsPath : [ipfsPath];
	    const paths = rawPaths.map(p => getFullPath(preload, p, options));
	    for (const path of paths) {
	      try {
	        yield* refsStream(resolve, repo, codecs, path, options);
	      } catch (err) {
	        yield {
	          ref: '',
	          err: err.message
	        };
	      }
	    }
	  }
	  return refs;
	}
	function getFullPath(preload, ipfsPath, options) {
	  const {cid, path} = toCidAndPath(ipfsPath);
	  if (options.preload !== false) {
	    preload(cid);
	  }
	  return `/ipfs/${ cid }${ path || '' }`;
	}
	async function* refsStream(resolve, repo, codecs, path, options) {
	  const resPath = await resolve(path, options);
	  const {cid} = toCidAndPath(resPath);
	  const maxDepth = options.maxDepth != null ? options.maxDepth : Infinity;
	  const unique = options.unique || false;
	  for await (const obj of objectStream(repo, codecs, cid, maxDepth, unique, options)) {
	    if (!obj.parent) {
	      continue;
	    }
	    if (obj.isDuplicate) {
	      continue;
	    }
	    yield { ref: formatLink(obj.parent.cid, obj.node.cid, obj.node.name, options.format) };
	  }
	}
	function formatLink(srcCid, dstCid, linkName = '', format = Format.default) {
	  let out = format.replace(/<src>/g, srcCid.toString());
	  out = out.replace(/<dst>/g, dstCid.toString());
	  out = out.replace(/<linkname>/g, linkName);
	  return out;
	}
	async function* objectStream(repo, codecs, rootCid, maxDepth, uniqueOnly, options) {
	  const seen = new Set();
	  async function* traverseLevel(parent, depth) {
	    const nextLevelDepth = depth + 1;
	    if (nextLevelDepth > maxDepth) {
	      return;
	    }
	    try {
	      for await (const link of getLinks(repo, codecs, parent.cid, options)) {
	        yield {
	          parent: parent,
	          node: link,
	          isDuplicate: uniqueOnly && seen.has(link.cid.toString())
	        };
	        if (uniqueOnly) {
	          seen.add(link.cid.toString());
	        }
	        yield* traverseLevel(link, nextLevelDepth);
	      }
	    } catch (err) {
	      if (err.code === ERR_NOT_FOUND$1) {
	        err.message = `Could not find object with CID: ${ parent.cid }`;
	      }
	      throw err;
	    }
	  }
	  yield* traverseLevel({ cid: rootCid }, 0);
	}
	async function* getLinks(repo, codecs, cid, options) {
	  const block = await repo.blocks.get(cid, options);
	  const codec = await codecs.getCodec(cid.code);
	  const value = codec.decode(block);
	  const isDagPb = cid.code === code$8;
	  const base = [];
	  for (const [name, cid] of links$1(value, base)) {
	    if (isDagPb) {
	      const match = name.match(/^Links\/(\d+)\/Hash$/);
	      if (match) {
	        const index = Number(match[1]);
	        if (index < value.Links.length) {
	          yield {
	            name: value.Links[index].Name,
	            cid
	          };
	          continue;
	        }
	      }
	    }
	    yield {
	      name,
	      cid
	    };
	  }
	}
	const links$1 = function* (source, base) {
	  if (source == null) {
	    return;
	  }
	  if (source instanceof Uint8Array) {
	    return;
	  }
	  for (const [key, value] of Object.entries(source)) {
	    const path = [
	      ...base,
	      key
	    ];
	    if (value != null && typeof value === 'object') {
	      if (Array.isArray(value)) {
	        for (const [index, element] of value.entries()) {
	          const elementPath = [
	            ...path,
	            index
	          ];
	          const cid = CID$6.asCID(element);
	          if (cid) {
	            yield [
	              elementPath.join('/'),
	              cid
	            ];
	          } else if (typeof element === 'object') {
	            yield* links$1(element, elementPath);
	          }
	        }
	      } else {
	        const cid = CID$6.asCID(value);
	        if (cid) {
	          yield [
	            path.join('/'),
	            cid
	          ];
	        } else {
	          yield* links$1(value, path);
	        }
	      }
	    }
	  }
	  return [];
	};

	function createLocal$1({repo}) {
	  async function* refsLocal(options = {}) {
	    for await (const cid of repo.blocks.queryKeys({}, { signal: options.signal })) {
	      yield { ref: cid.toString() };
	    }
	  }
	  return withTimeoutOption(refsLocal);
	}

	function createWantlist$1({network}) {
	  async function wantlist(options = {}) {
	    const {bitswap} = await network.use(options);
	    const list = bitswap.getWantlist();
	    return Array.from(list).map(e => e[1].cid);
	  }
	  return withTimeoutOption(wantlist);
	}

	function createWantlistForPeer$1({network}) {
	  async function wantlistForPeer(peerId, options = {}) {
	    const {bitswap} = await network.use(options);
	    const list = bitswap.wantlistForPeer(PeerIdImport.createFromB58String(peerId));
	    return Array.from(list).map(e => e[1].cid);
	  }
	  return withTimeoutOption(wantlistForPeer);
	}

	function createUnwant$1({network}) {
	  async function unwant(cids, options = {}) {
	    const {bitswap} = await network.use(options);
	    if (!Array.isArray(cids)) {
	      cids = [cids];
	    }
	    return bitswap.unwant(cids);
	  }
	  return withTimeoutOption(unwant);
	}

	function createStat$9({network}) {
	  async function stat(options = {}) {
	    const bitswap = (await network.use(options)).bitswap;
	    const snapshot = bitswap.stat().snapshot;
	    return {
	      provideBufLen: parseInt(snapshot.providesBufferLength.toString()),
	      blocksReceived: BigInt(snapshot.blocksReceived.toString()),
	      wantlist: Array.from(bitswap.getWantlist()).map(e => e[1].cid),
	      peers: bitswap.peers().map(id => id.toB58String()),
	      dupBlksReceived: BigInt(snapshot.dupBlksReceived.toString()),
	      dupDataReceived: BigInt(snapshot.dupDataReceived.toString()),
	      dataReceived: BigInt(snapshot.dataReceived.toString()),
	      blocksSent: BigInt(snapshot.blocksSent.toString()),
	      dataSent: BigInt(snapshot.dataSent.toString())
	    };
	  }
	  return withTimeoutOption(stat);
	}

	class BitswapAPI {
	  constructor({network}) {
	    this.wantlist = createWantlist$1({ network });
	    this.wantlistForPeer = createWantlistForPeer$1({ network });
	    this.unwant = createUnwant$1({ network });
	    this.stat = createStat$9({ network });
	  }
	}

	function isValidMultiaddr(ma) {
	  try {
	    return src$r.IPFS.matches(ma);
	  } catch (err) {
	    return false;
	  }
	}

	function createAdd$6({repo}) {
	  async function add(multiaddr, options = {}) {
	    if (!isValidMultiaddr(multiaddr)) {
	      throw new Error(`${ multiaddr } is not a valid Multiaddr`);
	    }
	    const config = await repo.config.getAll(options);
	    const boostrappers = config.Bootstrap || [];
	    boostrappers.push(multiaddr.toString());
	    config.Bootstrap = Array.from(new Set(boostrappers)).sort((a, b) => a.localeCompare(b));
	    await repo.config.replace(config);
	    return { Peers: [multiaddr] };
	  }
	  return withTimeoutOption(add);
	}

	function createClear$1({repo}) {
	  async function clear(options = {}) {
	    const config = await repo.config.getAll(options);
	    const removed = config.Bootstrap || [];
	    config.Bootstrap = [];
	    await repo.config.replace(config);
	    return { Peers: removed.map(ma => new src$s.Multiaddr(ma)) };
	  }
	  return withTimeoutOption(clear);
	}

	function createList$4({repo}) {
	  async function list(options = {}) {
	    const peers = await repo.config.get('Bootstrap', options);
	    return { Peers: (peers || []).map(ma => new src$s.Multiaddr(ma)) };
	  }
	  return withTimeoutOption(list);
	}

	var getDefaultConfig = () => ({
	  Addresses: {
	    Swarm: [],
	    Announce: [],
	    NoAnnounce: [],
	    API: '',
	    Gateway: '',
	    RPC: '',
	    Delegates: [
	      '/dns4/node0.delegate.ipfs.io/tcp/443/https',
	      '/dns4/node1.delegate.ipfs.io/tcp/443/https',
	      '/dns4/node2.delegate.ipfs.io/tcp/443/https',
	      '/dns4/node3.delegate.ipfs.io/tcp/443/https'
	    ]
	  },
	  Discovery: {
	    MDNS: {
	      Enabled: false,
	      Interval: 10
	    },
	    webRTCStar: { Enabled: true }
	  },
	  Bootstrap: [
	    '/dnsaddr/bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN',
	    '/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb',
	    '/dnsaddr/bootstrap.libp2p.io/p2p/QmZa1sAxajnQjVM8WjWXoMbmPd7NsWhfKsPkErzpm9wGkp',
	    '/dnsaddr/bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa',
	    '/dnsaddr/bootstrap.libp2p.io/p2p/QmcZf59bWwK5XFi76CZX8cbJ4BhTzzA3gU1ZjYZcYW3dwt',
	    '/dns4/node0.preload.ipfs.io/tcp/443/wss/p2p/QmZMxNdpMkewiVZLMRxaNxUeZpDUb34pWjZ1kZvsd16Zic',
	    '/dns4/node1.preload.ipfs.io/tcp/443/wss/p2p/Qmbut9Ywz9YEDrz8ySBSgWyJk41Uvm2QJPhwDJzJyGFsD6',
	    '/dns4/node2.preload.ipfs.io/tcp/443/wss/p2p/QmV7gnbW5VTcJ3oyM2Xk1rdFBJ3kTkvxc87UFGsun29STS',
	    '/dns4/node3.preload.ipfs.io/tcp/443/wss/p2p/QmY7JB6MQXhxHvq7dBDh4HpbH29v4yE9JRadAVpndvzySN'
	  ],
	  Pubsub: { Enabled: true },
	  Swarm: {
	    ConnMgr: {
	      LowWater: 5,
	      HighWater: 20
	    },
	    DisableNatPortMap: true
	  },
	  Routing: { Type: 'dhtclient' }
	});

	function createReset$1({repo}) {
	  async function reset(options = {}) {
	    const config = await repo.config.getAll(options);
	    config.Bootstrap = getDefaultConfig().Bootstrap;
	    await repo.config.replace(config);
	    return { Peers: getDefaultConfig().Bootstrap.map(ma => new src$s.Multiaddr(ma)) };
	  }
	  return withTimeoutOption(reset);
	}

	function createRm$a({repo}) {
	  async function rm(multiaddr, options = {}) {
	    if (!isValidMultiaddr(multiaddr)) {
	      throw new Error(`${ multiaddr } is not a valid Multiaddr`);
	    }
	    const config = await repo.config.getAll(options);
	    config.Bootstrap = (config.Bootstrap || []).filter(ma => ma.toString() !== multiaddr.toString());
	    await repo.config.replace(config);
	    return { Peers: [multiaddr] };
	  }
	  return withTimeoutOption(rm);
	}

	class BootstrapAPI {
	  constructor({repo}) {
	    this.add = createAdd$6({ repo });
	    this.list = createList$4({ repo });
	    this.rm = createRm$a({ repo });
	    this.clear = createClear$1({ repo });
	    this.reset = createReset$1({ repo });
	  }
	}

	function createGet$9({preload, repo}) {
	  async function get(cid, options = {}) {
	    if (options.preload !== false) {
	      preload(cid);
	    }
	    return repo.blocks.get(cid, options);
	  }
	  return withTimeoutOption(get);
	}

	function createPut$6({codecs, hashers, repo, preload}) {
	  async function put(block, options = {}) {
	    const release = options.pin ? await repo.gcLock.readLock() : null;
	    try {
	      const cidVersion = options.version != null ? options.version : 0;
	      const codecName = options.format || (cidVersion === 0 ? 'dag-pb' : 'raw');
	      const hasher = await hashers.getHasher(options.mhtype || 'sha2-256');
	      const hash = await hasher.digest(block);
	      const codec = await codecs.getCodec(codecName);
	      const cid = CID$6.create(cidVersion, codec.code, hash);
	      await repo.blocks.put(cid, block, { signal: options.signal });
	      if (options.preload !== false) {
	        preload(cid);
	      }
	      if (options.pin === true) {
	        await repo.pins.pinRecursively(cid, { signal: options.signal });
	      }
	      return cid;
	    } finally {
	      if (release) {
	        release();
	      }
	    }
	  }
	  return withTimeoutOption(put);
	}

	const pDefer$2 = () => {
		const deferred = {};

		deferred.promise = new Promise((resolve, reject) => {
			deferred.resolve = resolve;
			deferred.reject = reject;
		});

		return deferred;
	};

	var pDefer_1 = pDefer$2;

	var domain$1;

	// This constructor is used to store event handlers. Instantiating this is
	// faster than explicitly calling `Object.create(null)` to get a "clean" empty
	// object (tested with v8 v4.9).
	function EventHandlers() {}
	EventHandlers.prototype = Object.create(null);

	function EventEmitter$n() {
	  EventEmitter$n.init.call(this);
	}

	// nodejs oddity
	// require('events') === require('events').EventEmitter
	EventEmitter$n.EventEmitter = EventEmitter$n;

	EventEmitter$n.usingDomains = false;

	EventEmitter$n.prototype.domain = undefined;
	EventEmitter$n.prototype._events = undefined;
	EventEmitter$n.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter$n.defaultMaxListeners = 10;

	EventEmitter$n.init = function() {
	  this.domain = null;
	  if (EventEmitter$n.usingDomains) {
	    // if there is an active domain, then attach to it.
	    if (domain$1.active ) ;
	  }

	  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
	    this._events = new EventHandlers();
	    this._eventsCount = 0;
	  }

	  this._maxListeners = this._maxListeners || undefined;
	};

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter$n.prototype.setMaxListeners = function setMaxListeners(n) {
	  if (typeof n !== 'number' || n < 0 || isNaN(n))
	    throw new TypeError('"n" argument must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	function $getMaxListeners(that) {
	  if (that._maxListeners === undefined)
	    return EventEmitter$n.defaultMaxListeners;
	  return that._maxListeners;
	}

	EventEmitter$n.prototype.getMaxListeners = function getMaxListeners() {
	  return $getMaxListeners(this);
	};

	// These standalone emit* functions are used to optimize calling of event
	// handlers for fast cases because emit() itself often has a variable number of
	// arguments and can be deoptimized because of that. These functions always have
	// the same number of arguments and thus do not get deoptimized, so the code
	// inside them can execute faster.
	function emitNone(handler, isFn, self) {
	  if (isFn)
	    handler.call(self);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self);
	  }
	}
	function emitOne(handler, isFn, self, arg1) {
	  if (isFn)
	    handler.call(self, arg1);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1);
	  }
	}
	function emitTwo(handler, isFn, self, arg1, arg2) {
	  if (isFn)
	    handler.call(self, arg1, arg2);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1, arg2);
	  }
	}
	function emitThree(handler, isFn, self, arg1, arg2, arg3) {
	  if (isFn)
	    handler.call(self, arg1, arg2, arg3);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].call(self, arg1, arg2, arg3);
	  }
	}

	function emitMany(handler, isFn, self, args) {
	  if (isFn)
	    handler.apply(self, args);
	  else {
	    var len = handler.length;
	    var listeners = arrayClone(handler, len);
	    for (var i = 0; i < len; ++i)
	      listeners[i].apply(self, args);
	  }
	}

	EventEmitter$n.prototype.emit = function emit(type) {
	  var er, handler, len, args, i, events, domain;
	  var doError = (type === 'error');

	  events = this._events;
	  if (events)
	    doError = (doError && events.error == null);
	  else if (!doError)
	    return false;

	  domain = this.domain;

	  // If there is no 'error' event listener then throw.
	  if (doError) {
	    er = arguments[1];
	    if (domain) {
	      if (!er)
	        er = new Error('Uncaught, unspecified "error" event');
	      er.domainEmitter = this;
	      er.domain = domain;
	      er.domainThrown = false;
	      domain.emit('error', er);
	    } else if (er instanceof Error) {
	      throw er; // Unhandled 'error' event
	    } else {
	      // At least give some kind of context to the user
	      var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	      err.context = er;
	      throw err;
	    }
	    return false;
	  }

	  handler = events[type];

	  if (!handler)
	    return false;

	  var isFn = typeof handler === 'function';
	  len = arguments.length;
	  switch (len) {
	    // fast cases
	    case 1:
	      emitNone(handler, isFn, this);
	      break;
	    case 2:
	      emitOne(handler, isFn, this, arguments[1]);
	      break;
	    case 3:
	      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
	      break;
	    case 4:
	      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
	      break;
	    // slower
	    default:
	      args = new Array(len - 1);
	      for (i = 1; i < len; i++)
	        args[i - 1] = arguments[i];
	      emitMany(handler, isFn, this, args);
	  }

	  return true;
	};

	function _addListener(target, type, listener, prepend) {
	  var m;
	  var events;
	  var existing;

	  if (typeof listener !== 'function')
	    throw new TypeError('"listener" argument must be a function');

	  events = target._events;
	  if (!events) {
	    events = target._events = new EventHandlers();
	    target._eventsCount = 0;
	  } else {
	    // To avoid recursion in the case that type === "newListener"! Before
	    // adding it to the listeners, first emit "newListener".
	    if (events.newListener) {
	      target.emit('newListener', type,
	                  listener.listener ? listener.listener : listener);

	      // Re-assign `events` because a newListener handler could have caused the
	      // this._events to be assigned to a new object
	      events = target._events;
	    }
	    existing = events[type];
	  }

	  if (!existing) {
	    // Optimize the case of one listener. Don't need the extra array object.
	    existing = events[type] = listener;
	    ++target._eventsCount;
	  } else {
	    if (typeof existing === 'function') {
	      // Adding the second element, need to change to array.
	      existing = events[type] = prepend ? [listener, existing] :
	                                          [existing, listener];
	    } else {
	      // If we've already got an array, just append.
	      if (prepend) {
	        existing.unshift(listener);
	      } else {
	        existing.push(listener);
	      }
	    }

	    // Check for listener leak
	    if (!existing.warned) {
	      m = $getMaxListeners(target);
	      if (m && m > 0 && existing.length > m) {
	        existing.warned = true;
	        var w = new Error('Possible EventEmitter memory leak detected. ' +
	                            existing.length + ' ' + type + ' listeners added. ' +
	                            'Use emitter.setMaxListeners() to increase limit');
	        w.name = 'MaxListenersExceededWarning';
	        w.emitter = target;
	        w.type = type;
	        w.count = existing.length;
	      }
	    }
	  }

	  return target;
	}
	EventEmitter$n.prototype.addListener = function addListener(type, listener) {
	  return _addListener(this, type, listener, false);
	};

	EventEmitter$n.prototype.on = EventEmitter$n.prototype.addListener;

	EventEmitter$n.prototype.prependListener =
	    function prependListener(type, listener) {
	      return _addListener(this, type, listener, true);
	    };

	function _onceWrap(target, type, listener) {
	  var fired = false;
	  function g() {
	    target.removeListener(type, g);
	    if (!fired) {
	      fired = true;
	      listener.apply(target, arguments);
	    }
	  }
	  g.listener = listener;
	  return g;
	}

	EventEmitter$n.prototype.once = function once(type, listener) {
	  if (typeof listener !== 'function')
	    throw new TypeError('"listener" argument must be a function');
	  this.on(type, _onceWrap(this, type, listener));
	  return this;
	};

	EventEmitter$n.prototype.prependOnceListener =
	    function prependOnceListener(type, listener) {
	      if (typeof listener !== 'function')
	        throw new TypeError('"listener" argument must be a function');
	      this.prependListener(type, _onceWrap(this, type, listener));
	      return this;
	    };

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter$n.prototype.removeListener =
	    function removeListener(type, listener) {
	      var list, events, position, i, originalListener;

	      if (typeof listener !== 'function')
	        throw new TypeError('"listener" argument must be a function');

	      events = this._events;
	      if (!events)
	        return this;

	      list = events[type];
	      if (!list)
	        return this;

	      if (list === listener || (list.listener && list.listener === listener)) {
	        if (--this._eventsCount === 0)
	          this._events = new EventHandlers();
	        else {
	          delete events[type];
	          if (events.removeListener)
	            this.emit('removeListener', type, list.listener || listener);
	        }
	      } else if (typeof list !== 'function') {
	        position = -1;

	        for (i = list.length; i-- > 0;) {
	          if (list[i] === listener ||
	              (list[i].listener && list[i].listener === listener)) {
	            originalListener = list[i].listener;
	            position = i;
	            break;
	          }
	        }

	        if (position < 0)
	          return this;

	        if (list.length === 1) {
	          list[0] = undefined;
	          if (--this._eventsCount === 0) {
	            this._events = new EventHandlers();
	            return this;
	          } else {
	            delete events[type];
	          }
	        } else {
	          spliceOne(list, position);
	        }

	        if (events.removeListener)
	          this.emit('removeListener', type, originalListener || listener);
	      }

	      return this;
	    };

	EventEmitter$n.prototype.removeAllListeners =
	    function removeAllListeners(type) {
	      var listeners, events;

	      events = this._events;
	      if (!events)
	        return this;

	      // not listening for removeListener, no need to emit
	      if (!events.removeListener) {
	        if (arguments.length === 0) {
	          this._events = new EventHandlers();
	          this._eventsCount = 0;
	        } else if (events[type]) {
	          if (--this._eventsCount === 0)
	            this._events = new EventHandlers();
	          else
	            delete events[type];
	        }
	        return this;
	      }

	      // emit removeListener for all listeners on all events
	      if (arguments.length === 0) {
	        var keys = Object.keys(events);
	        for (var i = 0, key; i < keys.length; ++i) {
	          key = keys[i];
	          if (key === 'removeListener') continue;
	          this.removeAllListeners(key);
	        }
	        this.removeAllListeners('removeListener');
	        this._events = new EventHandlers();
	        this._eventsCount = 0;
	        return this;
	      }

	      listeners = events[type];

	      if (typeof listeners === 'function') {
	        this.removeListener(type, listeners);
	      } else if (listeners) {
	        // LIFO order
	        do {
	          this.removeListener(type, listeners[listeners.length - 1]);
	        } while (listeners[0]);
	      }

	      return this;
	    };

	EventEmitter$n.prototype.listeners = function listeners(type) {
	  var evlistener;
	  var ret;
	  var events = this._events;

	  if (!events)
	    ret = [];
	  else {
	    evlistener = events[type];
	    if (!evlistener)
	      ret = [];
	    else if (typeof evlistener === 'function')
	      ret = [evlistener.listener || evlistener];
	    else
	      ret = unwrapListeners(evlistener);
	  }

	  return ret;
	};

	EventEmitter$n.listenerCount = function(emitter, type) {
	  if (typeof emitter.listenerCount === 'function') {
	    return emitter.listenerCount(type);
	  } else {
	    return listenerCount.call(emitter, type);
	  }
	};

	EventEmitter$n.prototype.listenerCount = listenerCount;
	function listenerCount(type) {
	  var events = this._events;

	  if (events) {
	    var evlistener = events[type];

	    if (typeof evlistener === 'function') {
	      return 1;
	    } else if (evlistener) {
	      return evlistener.length;
	    }
	  }

	  return 0;
	}

	EventEmitter$n.prototype.eventNames = function eventNames() {
	  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
	};

	// About 1.5x faster than the two-arg version of Array#splice().
	function spliceOne(list, index) {
	  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
	    list[i] = list[k];
	  list.pop();
	}

	function arrayClone(arr, i) {
	  var copy = new Array(i);
	  while (i--)
	    copy[i] = arr[i];
	  return copy;
	}

	function unwrapListeners(arr) {
	  var ret = new Array(arr.length);
	  for (var i = 0; i < ret.length; ++i) {
	    ret[i] = arr[i].listener || arr[i];
	  }
	  return ret;
	}

	var events$2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		'default': EventEmitter$n,
		EventEmitter: EventEmitter$n
	});

	var require$$1$5 = /*@__PURE__*/getAugmentedNamespace(events$2);

	const defer$5 = pDefer_1;
	const EventEmitter$m = require$$1$5.EventEmitter;

	/**
	 * @template T
	 * @typedef {object} Operation
	 * @property {boolean} done
	 * @property {boolean} ok
	 * @property {Error} err
	 * @property {T} value
	 */

	/**
	 * Takes an (async) iterator that emits promise-returning functions,
	 * invokes them in parallel and emits the results as they become available but
	 * in the same order as the input
	 *
	 * @template T
	 * @param {Iterable<() => Promise<T>> | AsyncIterable<() => Promise<T>>} source
	 * @param {object} [options]
	 * @param {number} [options.concurrency=Infinity]
	 * @param {boolean} [options.ordered=false]
	 * @returns {AsyncIterable<T>}
	 */
	async function * parallel$3 (source, options = {}) {
	  let concurrency = options.concurrency || Infinity;

	  if (concurrency < 1) {
	    concurrency = Infinity;
	  }

	  const ordered = options.ordered == null ? false : options.ordered;
	  const emitter = new EventEmitter$m();

	  /** @type {Operation<T>[]}} */
	  const ops = [];
	  let slotAvailable = defer$5();
	  let resultAvailable = defer$5();
	  let sourceFinished = false;
	  let sourceErr;
	  let opErred = false;

	  emitter.on('task-complete', () => {
	    resultAvailable.resolve();
	  });

	  Promise.resolve().then(async () => {
	    try {
	      for await (const task of source) {
	        if (ops.length === concurrency) {
	          slotAvailable = defer$5();
	          await slotAvailable.promise;
	        }

	        if (opErred) {
	          break
	        }

	        /**
	         * @type {any}
	         */
	        const op = {
	          done: false
	        };
	        ops.push(op);

	        task()
	          .then(result => {
	            op.done = true;
	            op.ok = true;
	            op.value = result;
	            emitter.emit('task-complete');
	          }, err => {
	            op.done = true;
	            op.err = err;
	            emitter.emit('task-complete');
	          });
	      }

	      sourceFinished = true;
	      emitter.emit('task-complete');
	    } catch (err) {
	      sourceErr = err;
	      emitter.emit('task-complete');
	    }
	  });

	  function valuesAvailable () {
	    if (ordered) {
	      return Boolean(ops[0] && ops[0].done)
	    }

	    return Boolean(ops.find(op => op.done))
	  }

	  function * yieldOrderedValues () {
	    while (ops.length && ops[0].done) {
	      const op = ops[0];
	      ops.shift();

	      if (op.ok) {
	        yield op.value;
	      } else {
	        // allow the source to exit
	        opErred = true;
	        slotAvailable.resolve();

	        throw op.err
	      }

	      slotAvailable.resolve();
	    }
	  }

	  function * yieldUnOrderedValues () {
	    // more values can become available while we wait for `yield`
	    // to return control to this function
	    while (valuesAvailable()) {
	      for (let i = 0; i < ops.length; i++) {
	        if (ops[i].done) {
	          const op = ops[i];
	          ops.splice(i, 1);
	          i--;

	          if (op.ok) {
	            yield op.value;
	          } else {
	            opErred = true;
	            slotAvailable.resolve();

	            throw op.err
	          }

	          slotAvailable.resolve();
	        }
	      }
	    }
	  }

	  while (true) {
	    if (!valuesAvailable()) {
	      resultAvailable = defer$5();
	      await resultAvailable.promise;
	    }

	    if (sourceErr) {
	      // the source threw an error, propagate it
	      throw sourceErr
	    }

	    if (ordered) {
	      yield * yieldOrderedValues();
	    } else {
	      yield * yieldUnOrderedValues();
	    }

	    if (sourceFinished && ops.length === 0) {
	      // not waiting for any results and no more tasks so we are done
	      break
	    }
	  }
	}

	var itParallel = parallel$3;

	function cleanCid(cid) {
	  if (cid instanceof Uint8Array) {
	    return CID$6.decode(cid);
	  }
	  return CID$6.parse(cid.toString());
	}

	const BLOCK_RM_CONCURRENCY$1 = 8;
	function createRm$9({repo}) {
	  async function* rm(cids, options = {}) {
	    if (!Array.isArray(cids)) {
	      cids = [cids];
	    }
	    const release = await repo.gcLock.writeLock();
	    try {
	      yield* pipe_1(cids, source => itMap(source, cid => {
	        return async () => {
	          cid = cleanCid(cid);
	          const result = { cid };
	          try {
	            const has = await repo.blocks.has(cid);
	            if (!has) {
	              throw errCode$q(new Error('block not found'), 'ERR_BLOCK_NOT_FOUND');
	            }
	            await repo.blocks.delete(cid);
	          } catch (err) {
	            if (!options.force) {
	              err.message = `cannot remove ${ cid }: ${ err.message }`;
	              result.error = err;
	            }
	          }
	          return result;
	        };
	      }), source => itParallel(source, { concurrency: BLOCK_RM_CONCURRENCY$1 }), source => itFilter(source, () => !options.quiet));
	    } finally {
	      release();
	    }
	  }
	  return withTimeoutOption(rm);
	}

	function createStat$8({repo, preload}) {
	  async function stat(cid, options = {}) {
	    cid = cleanCid(cid);
	    if (options.preload !== false) {
	      preload(cid);
	    }
	    const block = await repo.blocks.get(cid);
	    return {
	      cid,
	      size: block.length
	    };
	  }
	  return withTimeoutOption(stat);
	}

	class BlockAPI {
	  constructor({codecs, hashers, preload, repo}) {
	    this.get = createGet$9({
	      preload,
	      repo
	    });
	    this.put = createPut$6({
	      codecs,
	      hashers,
	      preload,
	      repo
	    });
	    this.rm = createRm$9({ repo });
	    this.stat = createStat$8({
	      preload,
	      repo
	    });
	  }
	}

	/**
	 * Turns a browser readable stream into an async iterable. Async iteration over
	 * returned iterable will lock give stream, preventing any other consumer from
	 * acquiring a reader. The lock will be released if iteration loop is broken. To
	 * prevent stream cancelling optional `{ preventCancel: true }` could be passed
	 * as a second argument.
	 * @template T
	 * @param {ReadableStream<T>} stream
	 * @param {Object} [options]
	 * @param {boolean} [options.preventCancel=boolean]
	 * @returns {AsyncIterable<T>}
	 */
	async function * browserReadableStreamToIt$1 (stream, options = {}) {
	  const reader = stream.getReader();

	  try {
	    while (true) {
	      const result = await reader.read();

	      if (result.done) {
	        return
	      }

	      yield result.value;
	    }
	  } finally {
	    if (options.preventCancel !== true) {
	      reader.cancel();
	    }

	    reader.releaseLock();
	  }
	}

	var browserReadablestreamToIt = browserReadableStreamToIt$1;

	/* eslint-env browser */

	const browserReadableStreamToIt = browserReadablestreamToIt;

	/**
	 * @param {Blob} blob
	 * @returns {AsyncIterable<Uint8Array>}
	 */
	function blobToIt (blob) {
	  if (typeof blob.stream === 'function') {
	    // @ts-ignore missing some properties
	    return browserReadableStreamToIt(blob.stream())
	  }

	  // firefox < 69 does not support blob.stream()
	  // @ts-ignore - response.body is optional, but in practice it's a stream.
	  return browserReadableStreamToIt(new Response(blob).body)
	}

	var blobToIt_1 = blobToIt;

	/**
	 * @template T
	 * @typedef {Object} Peek
	 * @property {() => IteratorResult<T, void>} peek
	 */

	/**
	 * @template T
	 * @typedef {Object} AsyncPeek
	 * @property {() => Promise<IteratorResult<T, void>>} peek
	 */

	/**
	 * @template T
	 * @typedef {Object} Push
	 * @property {(value:T) => void} push
	 */

	/**
	 * @template T
	 * @typedef {Iterable<T> & Peek<T> & Push<T> & Iterator<T>} Peekable<T>
	 */

	/**
	 * @template T
	 * @typedef {AsyncIterable<T> & AsyncPeek<T> & Push<T> & AsyncIterator<T>} AsyncPeekable<T>
	 */

	/**
	 * @template {Iterable<any> | AsyncIterable<any>} I
	 * @param {I} iterable
	 * @returns {I extends Iterable<infer T>
	 *  ? Peekable<T>
	 *  : I extends AsyncIterable<infer T>
	 *  ? AsyncPeekable<T>
	 *  : never
	 * }
	 */
	function peekableIterator (iterable) {
	  // @ts-ignore
	  const [iterator, symbol] = iterable[Symbol.asyncIterator]
	    // @ts-ignore
	    ? [iterable[Symbol.asyncIterator](), Symbol.asyncIterator]
	    // @ts-ignore
	    : [iterable[Symbol.iterator](), Symbol.iterator];

	  /** @type {any[]} */
	  const queue = [];

	  // @ts-ignore
	  return {
	    peek: () => {
	      return iterator.next()
	    },
	    push: (value) => {
	      queue.push(value);
	    },
	    next: () => {
	      if (queue.length) {
	        return {
	          done: false,
	          value: queue.shift()
	        }
	      }

	      return iterator.next()
	    },
	    [symbol] () {
	      return this
	    }
	  }
	}

	var itPeekable = peekableIterator;

	function isBytes(obj) {
	  return ArrayBuffer.isView(obj) || obj instanceof ArrayBuffer;
	}
	function isBlob(obj) {
	  return obj.constructor && (obj.constructor.name === 'Blob' || obj.constructor.name === 'File') && typeof obj.stream === 'function';
	}
	function isFileObject(obj) {
	  return typeof obj === 'object' && (obj.path || obj.content);
	}
	const isReadableStream = value => value && typeof value.getReader === 'function';

	async function* toAsyncIterable(thing) {
	  yield thing;
	}
	async function normaliseContent$1(input) {
	  if (isBytes(input)) {
	    return toAsyncIterable(toBytes(input));
	  }
	  if (typeof input === 'string' || input instanceof String) {
	    return toAsyncIterable(toBytes(input.toString()));
	  }
	  if (isBlob(input)) {
	    return blobToIt_1(input);
	  }
	  if (isReadableStream(input)) {
	    input = browserReadablestreamToIt(input);
	  }
	  if (Symbol.iterator in input || Symbol.asyncIterator in input) {
	    const peekable = itPeekable(input);
	    const {value, done} = await peekable.peek();
	    if (done) {
	      return toAsyncIterable(new Uint8Array(0));
	    }
	    peekable.push(value);
	    if (Number.isInteger(value)) {
	      return toAsyncIterable(Uint8Array.from(await itAll(peekable)));
	    }
	    if (isBytes(value) || typeof value === 'string' || value instanceof String) {
	      return itMap(peekable, toBytes);
	    }
	  }
	  throw errCode$q(new Error(`Unexpected input: ${ input }`), 'ERR_UNEXPECTED_INPUT');
	}
	function toBytes(chunk) {
	  if (chunk instanceof Uint8Array) {
	    return chunk;
	  }
	  if (ArrayBuffer.isView(chunk)) {
	    return new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength);
	  }
	  if (chunk instanceof ArrayBuffer) {
	    return new Uint8Array(chunk);
	  }
	  if (Array.isArray(chunk)) {
	    return Uint8Array.from(chunk);
	  }
	  return fromString$4(chunk.toString());
	}

	async function* normaliseCandidateSingle(input, normaliseContent) {
	  if (input === null || input === undefined) {
	    throw errCode$q(new Error(`Unexpected input: ${ input }`), 'ERR_UNEXPECTED_INPUT');
	  }
	  if (typeof input === 'string' || input instanceof String) {
	    yield toFileObject$1(input.toString(), normaliseContent);
	    return;
	  }
	  if (isBytes(input) || isBlob(input)) {
	    yield toFileObject$1(input, normaliseContent);
	    return;
	  }
	  if (isReadableStream(input)) {
	    input = browserReadablestreamToIt(input);
	  }
	  if (Symbol.iterator in input || Symbol.asyncIterator in input) {
	    const peekable = itPeekable(input);
	    const {value, done} = await peekable.peek();
	    if (done) {
	      yield { content: [] };
	      return;
	    }
	    peekable.push(value);
	    if (Number.isInteger(value) || isBytes(value) || typeof value === 'string' || value instanceof String) {
	      yield toFileObject$1(peekable, normaliseContent);
	      return;
	    }
	    throw errCode$q(new Error('Unexpected input: multiple items passed - if you are using ipfs.add, please use ipfs.addAll instead'), 'ERR_UNEXPECTED_INPUT');
	  }
	  if (isFileObject(input)) {
	    yield toFileObject$1(input, normaliseContent);
	    return;
	  }
	  throw errCode$q(new Error('Unexpected input: cannot convert "' + typeof input + '" into ImportCandidate'), 'ERR_UNEXPECTED_INPUT');
	}
	async function toFileObject$1(input, normaliseContent) {
	  const {path, mode, mtime, content} = input;
	  const file = {
	    path: path || '',
	    mode: parseMode(mode),
	    mtime: parseMtime$1(mtime)
	  };
	  if (content) {
	    file.content = await normaliseContent(content);
	  } else if (!path) {
	    file.content = await normaliseContent(input);
	  }
	  return file;
	}

	function normaliseInput$2(input) {
	  return normaliseCandidateSingle(input, normaliseContent$1);
	}

	function createAdd$5({addAll}) {
	  async function add(entry, options = {}) {
	    const result = await itLast(addAll(normaliseInput$2(entry), options));
	    if (result == null) {
	      throw Error('Failed to add a file, if you see this please report a bug');
	    }
	    return result;
	  }
	  return add;
	}

	/**
	 * Takes an (async) iterable that emits things and returns an async iterable that
	 * emits those things in fixed-sized batches.
	 *
	 * @template T
	 * @param {AsyncIterable<T>|Iterable<T>} source
	 * @param {number} [size=1]
	 * @returns {AsyncIterable<T[]>}
	 */
	async function * batch$2 (source, size = 1) {
	  /** @type {T[]} */
	  let things = [];

	  if (size < 1) {
	    size = 1;
	  }

	  for await (const thing of source) {
	    things.push(thing);

	    while (things.length >= size) {
	      yield things.slice(0, size);

	      things = things.slice(size);
	    }
	  }

	  while (things.length) {
	    yield things.slice(0, size);

	    things = things.slice(size);
	  }
	}

	var itBatch = batch$2;

	const batch$1 = itBatch;

	/**
	 * @template T
	 * @typedef {{ok:true, value:T}} Success
	 */

	/**
	 * @typedef {{ok:false, err:Error}} Failure
	 */

	/**
	 * Takes an (async) iterator that emits promise-returning functions,
	 * invokes them in parallel and emits the results as they become available but
	 * in the same order as the input
	 *
	 * @template T
	 * @param {AsyncIterable<() => Promise<T>>} source
	 * @param {number} [size=1]
	 * @returns {AsyncIterable<T>}
	 */
	async function * parallelBatch (source, size = 1) {
	  for await (const tasks of batch$1(source, size)) {
	    /** @type {Promise<Success<T>|Failure>[]} */
	    const things = tasks.map(
	      /**
	       * @param {() => Promise<T>} p
	       */
	      p => {
	        return p().then(value => ({ ok: true, value }), err => ({ ok: false, err }))
	      });

	    for (let i = 0; i < things.length; i++) {
	      const result = await things[i];

	      if (result.ok) {
	        yield result.value;
	      } else {
	        throw result.err
	      }
	    }
	  }
	}

	var itParallelBatch = parallelBatch;

	var murmurHash3js = {exports: {}};

	/* jshint -W086: true */

	(function (module, exports) {
	(function (root, undefined$1) {

	    // Create a local object that'll be exported or referenced globally.
	    var library = {
	        'version': '3.0.0',
	        'x86': {},
	        'x64': {},
	        'inputValidation': true
	    };

	    // PRIVATE FUNCTIONS
	    // -----------------

	    function _validBytes(bytes) {
	        // check the input is an array or a typed array
	        if (!Array.isArray(bytes) && !ArrayBuffer.isView(bytes)) {
	            return false;
	        }

	        // check all bytes are actually bytes
	        for (var i = 0; i < bytes.length; i++) {
	            if (!Number.isInteger(bytes[i]) || bytes[i] < 0 || bytes[i] > 255) {
	                return false;
	            }
	        }
	        return true;
	    }

	    function _x86Multiply(m, n) {
	        //
	        // Given two 32bit ints, returns the two multiplied together as a
	        // 32bit int.
	        //

	        return ((m & 0xffff) * n) + ((((m >>> 16) * n) & 0xffff) << 16);
	    }

	    function _x86Rotl(m, n) {
	        //
	        // Given a 32bit int and an int representing a number of bit positions,
	        // returns the 32bit int rotated left by that number of positions.
	        //

	        return (m << n) | (m >>> (32 - n));
	    }

	    function _x86Fmix(h) {
	        //
	        // Given a block, returns murmurHash3's final x86 mix of that block.
	        //

	        h ^= h >>> 16;
	        h = _x86Multiply(h, 0x85ebca6b);
	        h ^= h >>> 13;
	        h = _x86Multiply(h, 0xc2b2ae35);
	        h ^= h >>> 16;

	        return h;
	    }

	    function _x64Add(m, n) {
	        //
	        // Given two 64bit ints (as an array of two 32bit ints) returns the two
	        // added together as a 64bit int (as an array of two 32bit ints).
	        //

	        m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];
	        n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];
	        var o = [0, 0, 0, 0];

	        o[3] += m[3] + n[3];
	        o[2] += o[3] >>> 16;
	        o[3] &= 0xffff;

	        o[2] += m[2] + n[2];
	        o[1] += o[2] >>> 16;
	        o[2] &= 0xffff;

	        o[1] += m[1] + n[1];
	        o[0] += o[1] >>> 16;
	        o[1] &= 0xffff;

	        o[0] += m[0] + n[0];
	        o[0] &= 0xffff;

	        return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];
	    }

	    function _x64Multiply(m, n) {
	        //
	        // Given two 64bit ints (as an array of two 32bit ints) returns the two
	        // multiplied together as a 64bit int (as an array of two 32bit ints).
	        //

	        m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];
	        n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];
	        var o = [0, 0, 0, 0];

	        o[3] += m[3] * n[3];
	        o[2] += o[3] >>> 16;
	        o[3] &= 0xffff;

	        o[2] += m[2] * n[3];
	        o[1] += o[2] >>> 16;
	        o[2] &= 0xffff;

	        o[2] += m[3] * n[2];
	        o[1] += o[2] >>> 16;
	        o[2] &= 0xffff;

	        o[1] += m[1] * n[3];
	        o[0] += o[1] >>> 16;
	        o[1] &= 0xffff;

	        o[1] += m[2] * n[2];
	        o[0] += o[1] >>> 16;
	        o[1] &= 0xffff;

	        o[1] += m[3] * n[1];
	        o[0] += o[1] >>> 16;
	        o[1] &= 0xffff;

	        o[0] += (m[0] * n[3]) + (m[1] * n[2]) + (m[2] * n[1]) + (m[3] * n[0]);
	        o[0] &= 0xffff;

	        return [(o[0] << 16) | o[1], (o[2] << 16) | o[3]];
	    }

	    function _x64Rotl(m, n) {
	        //
	        // Given a 64bit int (as an array of two 32bit ints) and an int
	        // representing a number of bit positions, returns the 64bit int (as an
	        // array of two 32bit ints) rotated left by that number of positions.
	        //

	        n %= 64;

	        if (n === 32) {
	            return [m[1], m[0]];
	        } else if (n < 32) {
	            return [(m[0] << n) | (m[1] >>> (32 - n)), (m[1] << n) | (m[0] >>> (32 - n))];
	        } else {
	            n -= 32;
	            return [(m[1] << n) | (m[0] >>> (32 - n)), (m[0] << n) | (m[1] >>> (32 - n))];
	        }
	    }

	    function _x64LeftShift(m, n) {
	        //
	        // Given a 64bit int (as an array of two 32bit ints) and an int
	        // representing a number of bit positions, returns the 64bit int (as an
	        // array of two 32bit ints) shifted left by that number of positions.
	        //

	        n %= 64;

	        if (n === 0) {
	            return m;
	        } else if (n < 32) {
	            return [(m[0] << n) | (m[1] >>> (32 - n)), m[1] << n];
	        } else {
	            return [m[1] << (n - 32), 0];
	        }
	    }

	    function _x64Xor(m, n) {
	        //
	        // Given two 64bit ints (as an array of two 32bit ints) returns the two
	        // xored together as a 64bit int (as an array of two 32bit ints).
	        //

	        return [m[0] ^ n[0], m[1] ^ n[1]];
	    }

	    function _x64Fmix(h) {
	        //
	        // Given a block, returns murmurHash3's final x64 mix of that block.
	        // (`[0, h[0] >>> 1]` is a 33 bit unsigned right shift. This is the
	        // only place where we need to right shift 64bit ints.)
	        //

	        h = _x64Xor(h, [0, h[0] >>> 1]);
	        h = _x64Multiply(h, [0xff51afd7, 0xed558ccd]);
	        h = _x64Xor(h, [0, h[0] >>> 1]);
	        h = _x64Multiply(h, [0xc4ceb9fe, 0x1a85ec53]);
	        h = _x64Xor(h, [0, h[0] >>> 1]);

	        return h;
	    }

	    // PUBLIC FUNCTIONS
	    // ----------------

	    library.x86.hash32 = function (bytes, seed) {
	        //
	        // Given a string and an optional seed as an int, returns a 32 bit hash
	        // using the x86 flavor of MurmurHash3, as an unsigned int.
	        //
	        if (library.inputValidation && !_validBytes(bytes)) {
	            return undefined$1;
	        }
	        seed = seed || 0;

	        var remainder = bytes.length % 4;
	        var blocks = bytes.length - remainder;

	        var h1 = seed;

	        var k1 = 0;

	        var c1 = 0xcc9e2d51;
	        var c2 = 0x1b873593;

	        for (var i = 0; i < blocks; i = i + 4) {
	            k1 = (bytes[i]) | (bytes[i + 1] << 8) | (bytes[i + 2] << 16) | (bytes[i + 3] << 24);

	            k1 = _x86Multiply(k1, c1);
	            k1 = _x86Rotl(k1, 15);
	            k1 = _x86Multiply(k1, c2);

	            h1 ^= k1;
	            h1 = _x86Rotl(h1, 13);
	            h1 = _x86Multiply(h1, 5) + 0xe6546b64;
	        }

	        k1 = 0;

	        switch (remainder) {
	            case 3:
	                k1 ^= bytes[i + 2] << 16;

	            case 2:
	                k1 ^= bytes[i + 1] << 8;

	            case 1:
	                k1 ^= bytes[i];
	                k1 = _x86Multiply(k1, c1);
	                k1 = _x86Rotl(k1, 15);
	                k1 = _x86Multiply(k1, c2);
	                h1 ^= k1;
	        }

	        h1 ^= bytes.length;
	        h1 = _x86Fmix(h1);

	        return h1 >>> 0;
	    };

	    library.x86.hash128 = function (bytes, seed) {
	        //
	        // Given a string and an optional seed as an int, returns a 128 bit
	        // hash using the x86 flavor of MurmurHash3, as an unsigned hex.
	        //
	        if (library.inputValidation && !_validBytes(bytes)) {
	            return undefined$1;
	        }

	        seed = seed || 0;
	        var remainder = bytes.length % 16;
	        var blocks = bytes.length - remainder;

	        var h1 = seed;
	        var h2 = seed;
	        var h3 = seed;
	        var h4 = seed;

	        var k1 = 0;
	        var k2 = 0;
	        var k3 = 0;
	        var k4 = 0;

	        var c1 = 0x239b961b;
	        var c2 = 0xab0e9789;
	        var c3 = 0x38b34ae5;
	        var c4 = 0xa1e38b93;

	        for (var i = 0; i < blocks; i = i + 16) {
	            k1 = (bytes[i]) | (bytes[i + 1] << 8) | (bytes[i + 2] << 16) | (bytes[i + 3] << 24);
	            k2 = (bytes[i + 4]) | (bytes[i + 5] << 8) | (bytes[i + 6] << 16) | (bytes[i + 7] << 24);
	            k3 = (bytes[i + 8]) | (bytes[i + 9] << 8) | (bytes[i + 10] << 16) | (bytes[i + 11] << 24);
	            k4 = (bytes[i + 12]) | (bytes[i + 13] << 8) | (bytes[i + 14] << 16) | (bytes[i + 15] << 24);

	            k1 = _x86Multiply(k1, c1);
	            k1 = _x86Rotl(k1, 15);
	            k1 = _x86Multiply(k1, c2);
	            h1 ^= k1;

	            h1 = _x86Rotl(h1, 19);
	            h1 += h2;
	            h1 = _x86Multiply(h1, 5) + 0x561ccd1b;

	            k2 = _x86Multiply(k2, c2);
	            k2 = _x86Rotl(k2, 16);
	            k2 = _x86Multiply(k2, c3);
	            h2 ^= k2;

	            h2 = _x86Rotl(h2, 17);
	            h2 += h3;
	            h2 = _x86Multiply(h2, 5) + 0x0bcaa747;

	            k3 = _x86Multiply(k3, c3);
	            k3 = _x86Rotl(k3, 17);
	            k3 = _x86Multiply(k3, c4);
	            h3 ^= k3;

	            h3 = _x86Rotl(h3, 15);
	            h3 += h4;
	            h3 = _x86Multiply(h3, 5) + 0x96cd1c35;

	            k4 = _x86Multiply(k4, c4);
	            k4 = _x86Rotl(k4, 18);
	            k4 = _x86Multiply(k4, c1);
	            h4 ^= k4;

	            h4 = _x86Rotl(h4, 13);
	            h4 += h1;
	            h4 = _x86Multiply(h4, 5) + 0x32ac3b17;
	        }

	        k1 = 0;
	        k2 = 0;
	        k3 = 0;
	        k4 = 0;

	        switch (remainder) {
	            case 15:
	                k4 ^= bytes[i + 14] << 16;

	            case 14:
	                k4 ^= bytes[i + 13] << 8;

	            case 13:
	                k4 ^= bytes[i + 12];
	                k4 = _x86Multiply(k4, c4);
	                k4 = _x86Rotl(k4, 18);
	                k4 = _x86Multiply(k4, c1);
	                h4 ^= k4;

	            case 12:
	                k3 ^= bytes[i + 11] << 24;

	            case 11:
	                k3 ^= bytes[i + 10] << 16;

	            case 10:
	                k3 ^= bytes[i + 9] << 8;

	            case 9:
	                k3 ^= bytes[i + 8];
	                k3 = _x86Multiply(k3, c3);
	                k3 = _x86Rotl(k3, 17);
	                k3 = _x86Multiply(k3, c4);
	                h3 ^= k3;

	            case 8:
	                k2 ^= bytes[i + 7] << 24;

	            case 7:
	                k2 ^= bytes[i + 6] << 16;

	            case 6:
	                k2 ^= bytes[i + 5] << 8;

	            case 5:
	                k2 ^= bytes[i + 4];
	                k2 = _x86Multiply(k2, c2);
	                k2 = _x86Rotl(k2, 16);
	                k2 = _x86Multiply(k2, c3);
	                h2 ^= k2;

	            case 4:
	                k1 ^= bytes[i + 3] << 24;

	            case 3:
	                k1 ^= bytes[i + 2] << 16;

	            case 2:
	                k1 ^= bytes[i + 1] << 8;

	            case 1:
	                k1 ^= bytes[i];
	                k1 = _x86Multiply(k1, c1);
	                k1 = _x86Rotl(k1, 15);
	                k1 = _x86Multiply(k1, c2);
	                h1 ^= k1;
	        }

	        h1 ^= bytes.length;
	        h2 ^= bytes.length;
	        h3 ^= bytes.length;
	        h4 ^= bytes.length;

	        h1 += h2;
	        h1 += h3;
	        h1 += h4;
	        h2 += h1;
	        h3 += h1;
	        h4 += h1;

	        h1 = _x86Fmix(h1);
	        h2 = _x86Fmix(h2);
	        h3 = _x86Fmix(h3);
	        h4 = _x86Fmix(h4);

	        h1 += h2;
	        h1 += h3;
	        h1 += h4;
	        h2 += h1;
	        h3 += h1;
	        h4 += h1;

	        return ("00000000" + (h1 >>> 0).toString(16)).slice(-8) + ("00000000" + (h2 >>> 0).toString(16)).slice(-8) + ("00000000" + (h3 >>> 0).toString(16)).slice(-8) + ("00000000" + (h4 >>> 0).toString(16)).slice(-8);
	    };

	    library.x64.hash128 = function (bytes, seed) {
	        //
	        // Given a string and an optional seed as an int, returns a 128 bit
	        // hash using the x64 flavor of MurmurHash3, as an unsigned hex.
	        //
	        if (library.inputValidation && !_validBytes(bytes)) {
	            return undefined$1;
	        }
	        seed = seed || 0;

	        var remainder = bytes.length % 16;
	        var blocks = bytes.length - remainder;

	        var h1 = [0, seed];
	        var h2 = [0, seed];

	        var k1 = [0, 0];
	        var k2 = [0, 0];

	        var c1 = [0x87c37b91, 0x114253d5];
	        var c2 = [0x4cf5ad43, 0x2745937f];

	        for (var i = 0; i < blocks; i = i + 16) {
	            k1 = [(bytes[i + 4]) | (bytes[i + 5] << 8) | (bytes[i + 6] << 16) | (bytes[i + 7] << 24), (bytes[i]) |
	                (bytes[i + 1] << 8) | (bytes[i + 2] << 16) | (bytes[i + 3] << 24)];
	            k2 = [(bytes[i + 12]) | (bytes[i + 13] << 8) | (bytes[i + 14] << 16) | (bytes[i + 15] << 24), (bytes[i + 8]) |
	                (bytes[i + 9] << 8) | (bytes[i + 10] << 16) | (bytes[i + 11] << 24)];

	            k1 = _x64Multiply(k1, c1);
	            k1 = _x64Rotl(k1, 31);
	            k1 = _x64Multiply(k1, c2);
	            h1 = _x64Xor(h1, k1);

	            h1 = _x64Rotl(h1, 27);
	            h1 = _x64Add(h1, h2);
	            h1 = _x64Add(_x64Multiply(h1, [0, 5]), [0, 0x52dce729]);

	            k2 = _x64Multiply(k2, c2);
	            k2 = _x64Rotl(k2, 33);
	            k2 = _x64Multiply(k2, c1);
	            h2 = _x64Xor(h2, k2);

	            h2 = _x64Rotl(h2, 31);
	            h2 = _x64Add(h2, h1);
	            h2 = _x64Add(_x64Multiply(h2, [0, 5]), [0, 0x38495ab5]);
	        }

	        k1 = [0, 0];
	        k2 = [0, 0];

	        switch (remainder) {
	            case 15:
	                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 14]], 48));

	            case 14:
	                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 13]], 40));

	            case 13:
	                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 12]], 32));

	            case 12:
	                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 11]], 24));

	            case 11:
	                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 10]], 16));

	            case 10:
	                k2 = _x64Xor(k2, _x64LeftShift([0, bytes[i + 9]], 8));

	            case 9:
	                k2 = _x64Xor(k2, [0, bytes[i + 8]]);
	                k2 = _x64Multiply(k2, c2);
	                k2 = _x64Rotl(k2, 33);
	                k2 = _x64Multiply(k2, c1);
	                h2 = _x64Xor(h2, k2);

	            case 8:
	                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 7]], 56));

	            case 7:
	                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 6]], 48));

	            case 6:
	                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 5]], 40));

	            case 5:
	                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 4]], 32));

	            case 4:
	                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 3]], 24));

	            case 3:
	                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 2]], 16));

	            case 2:
	                k1 = _x64Xor(k1, _x64LeftShift([0, bytes[i + 1]], 8));

	            case 1:
	                k1 = _x64Xor(k1, [0, bytes[i]]);
	                k1 = _x64Multiply(k1, c1);
	                k1 = _x64Rotl(k1, 31);
	                k1 = _x64Multiply(k1, c2);
	                h1 = _x64Xor(h1, k1);
	        }

	        h1 = _x64Xor(h1, [0, bytes.length]);
	        h2 = _x64Xor(h2, [0, bytes.length]);

	        h1 = _x64Add(h1, h2);
	        h2 = _x64Add(h2, h1);

	        h1 = _x64Fmix(h1);
	        h2 = _x64Fmix(h2);

	        h1 = _x64Add(h1, h2);
	        h2 = _x64Add(h2, h1);

	        return ("00000000" + (h1[0] >>> 0).toString(16)).slice(-8) + ("00000000" + (h1[1] >>> 0).toString(16)).slice(-8) + ("00000000" + (h2[0] >>> 0).toString(16)).slice(-8) + ("00000000" + (h2[1] >>> 0).toString(16)).slice(-8);
	    };

	    // INITIALIZATION
	    // --------------

	    // Export murmurHash3 for CommonJS, either as an AMD module or just as part
	    // of the global object.
	    {

	        if (module.exports) {
	            exports = module.exports = library;
	        }

	        exports.murmurHash3 = library;

	    }
	})();
	}(murmurHash3js, murmurHash3js.exports));

	var murmurhash3jsRevisited = murmurHash3js.exports;

	function fromNumberTo32BitBuf(number) {
	  const bytes = new Array(4);
	  for (let i = 0; i < 4; i++) {
	    bytes[i] = number & 255;
	    number = number >> 8;
	  }
	  return new Uint8Array(bytes);
	}
	from$2({
	  name: 'murmur3-32',
	  code: 35,
	  encode: input => fromNumberTo32BitBuf(murmurhash3jsRevisited.x86.hash32(input))
	});
	const murmur3128 = from$2({
	  name: 'murmur3-128',
	  code: 34,
	  encode: input => fromHex(murmurhash3jsRevisited.x64.hash128(input))
	});

	async function hamtHashFn$1(buf) {
	  return (await murmur3128.encode(buf)).slice(0, 8).reverse();
	}
	const defaultOptions$l = {
	  chunker: 'fixed',
	  strategy: 'balanced',
	  rawLeaves: false,
	  onlyHash: false,
	  reduceSingleLeafToSelf: true,
	  hasher: sha256$b,
	  leafType: 'file',
	  cidVersion: 0,
	  progress: () => () => {
	  },
	  shardSplitThreshold: 1000,
	  fileImportConcurrency: 50,
	  blockWriteConcurrency: 10,
	  minChunkSize: 262144,
	  maxChunkSize: 262144,
	  avgChunkSize: 262144,
	  window: 16,
	  polynomial: 17437180132763652,
	  maxChildrenPerNode: 174,
	  layerRepeat: 4,
	  wrapWithDirectory: false,
	  recursive: false,
	  hidden: false,
	  timeout: undefined,
	  hamtHashFn: hamtHashFn$1,
	  hamtHashCode: 34,
	  hamtBucketBits: 8
	};
	var defaultOptions$m = (options = {}) => {
	  const defaults = mergeOptions$k.bind({ ignoreUndefined: true });
	  return defaults(defaultOptions$l, options);
	};

	const persist$1 = async (buffer, blockstore, options) => {
	  if (!options.codec) {
	    options.codec = dagPB;
	  }
	  if (!options.hasher) {
	    options.hasher = sha256$b;
	  }
	  if (options.cidVersion === undefined) {
	    options.cidVersion = 1;
	  }
	  if (options.codec === dagPB && options.hasher !== sha256$b) {
	    options.cidVersion = 1;
	  }
	  const multihash = await options.hasher.digest(buffer);
	  const cid = CID$6.create(options.cidVersion, options.codec.code, multihash);
	  if (!options.onlyHash) {
	    await blockstore.put(cid, buffer, { signal: options.signal });
	  }
	  return cid;
	};

	const dirBuilder = async (item, blockstore, options) => {
	  const unixfs = new UnixFS({
	    type: 'directory',
	    mtime: item.mtime,
	    mode: item.mode
	  });
	  const buffer = encode$k(prepare({ Data: unixfs.marshal() }));
	  const cid = await persist$1(buffer, blockstore, options);
	  const path = item.path;
	  return {
	    cid,
	    path,
	    unixfs,
	    size: buffer.length
	  };
	};

	async function flat(source, reduce) {
	  return reduce(await itAll(source));
	}

	function balanced(source, reduce, options) {
	  return reduceToParents(source, reduce, options);
	}
	async function reduceToParents(source, reduce, options) {
	  const roots = [];
	  for await (const chunked of itBatch(source, options.maxChildrenPerNode)) {
	    roots.push(await reduce(chunked));
	  }
	  if (roots.length > 1) {
	    return reduceToParents(roots, reduce, options);
	  }
	  return roots[0];
	}

	async function trickleStream(source, reduce, options) {
	  const root = new Root(options.layerRepeat);
	  let iteration = 0;
	  let maxDepth = 1;
	  let subTree = root;
	  for await (const layer of itBatch(source, options.maxChildrenPerNode)) {
	    if (subTree.isFull()) {
	      if (subTree !== root) {
	        root.addChild(await subTree.reduce(reduce));
	      }
	      if (iteration && iteration % options.layerRepeat === 0) {
	        maxDepth++;
	      }
	      subTree = new SubTree(maxDepth, options.layerRepeat, iteration);
	      iteration++;
	    }
	    subTree.append(layer);
	  }
	  if (subTree && subTree !== root) {
	    root.addChild(await subTree.reduce(reduce));
	  }
	  return root.reduce(reduce);
	}
	class SubTree {
	  constructor(maxDepth, layerRepeat, iteration = 0) {
	    this.maxDepth = maxDepth;
	    this.layerRepeat = layerRepeat;
	    this.currentDepth = 1;
	    this.iteration = iteration;
	    this.root = this.node = this.parent = {
	      children: [],
	      depth: this.currentDepth,
	      maxDepth,
	      maxChildren: (this.maxDepth - this.currentDepth) * this.layerRepeat
	    };
	  }
	  isFull() {
	    if (!this.root.data) {
	      return false;
	    }
	    if (this.currentDepth < this.maxDepth && this.node.maxChildren) {
	      this._addNextNodeToParent(this.node);
	      return false;
	    }
	    const distantRelative = this._findParent(this.node, this.currentDepth);
	    if (distantRelative) {
	      this._addNextNodeToParent(distantRelative);
	      return false;
	    }
	    return true;
	  }
	  _addNextNodeToParent(parent) {
	    this.parent = parent;
	    const nextNode = {
	      children: [],
	      depth: parent.depth + 1,
	      parent,
	      maxDepth: this.maxDepth,
	      maxChildren: Math.floor(parent.children.length / this.layerRepeat) * this.layerRepeat
	    };
	    parent.children.push(nextNode);
	    this.currentDepth = nextNode.depth;
	    this.node = nextNode;
	  }
	  append(layer) {
	    this.node.data = layer;
	  }
	  reduce(reduce) {
	    return this._reduce(this.root, reduce);
	  }
	  async _reduce(node, reduce) {
	    let children = [];
	    if (node.children.length) {
	      children = await Promise.all(node.children.filter(child => child.data).map(child => this._reduce(child, reduce)));
	    }
	    return reduce((node.data || []).concat(children));
	  }
	  _findParent(node, depth) {
	    const parent = node.parent;
	    if (!parent || parent.depth === 0) {
	      return;
	    }
	    if (parent.children.length === parent.maxChildren || !parent.maxChildren) {
	      return this._findParent(parent, depth);
	    }
	    return parent;
	  }
	}
	class Root extends SubTree {
	  constructor(layerRepeat) {
	    super(0, layerRepeat);
	    this.root.depth = 0;
	    this.currentDepth = 1;
	  }
	  addChild(child) {
	    this.root.children.push(child);
	  }
	  reduce(reduce) {
	    return reduce((this.root.data || []).concat(this.root.children));
	  }
	}

	async function* bufferImporter(file, block, options) {
	  for await (let buffer of file.content) {
	    yield async () => {
	      options.progress(buffer.length, file.path);
	      let unixfs;
	      const opts = {
	        codec: dagPB,
	        cidVersion: options.cidVersion,
	        hasher: options.hasher,
	        onlyHash: options.onlyHash
	      };
	      if (options.rawLeaves) {
	        opts.codec = raw;
	        opts.cidVersion = 1;
	      } else {
	        unixfs = new UnixFS({
	          type: options.leafType,
	          data: buffer,
	          mtime: file.mtime,
	          mode: file.mode
	        });
	        buffer = encode$k({
	          Data: unixfs.marshal(),
	          Links: []
	        });
	      }
	      return {
	        cid: await persist$1(buffer, block, opts),
	        unixfs,
	        size: buffer.length
	      };
	    };
	  }
	}

	const dagBuilders = {
	  flat: flat,
	  balanced: balanced,
	  trickle: trickleStream
	};
	async function* buildFileBatch(file, blockstore, options) {
	  let count = -1;
	  let previous;
	  let bufferImporter$1;
	  if (typeof options.bufferImporter === 'function') {
	    bufferImporter$1 = options.bufferImporter;
	  } else {
	    bufferImporter$1 = bufferImporter;
	  }
	  for await (const entry of itParallelBatch(bufferImporter$1(file, blockstore, options), options.blockWriteConcurrency)) {
	    count++;
	    if (count === 0) {
	      previous = entry;
	      continue;
	    } else if (count === 1 && previous) {
	      yield previous;
	      previous = null;
	    }
	    yield entry;
	  }
	  if (previous) {
	    previous.single = true;
	    yield previous;
	  }
	}
	const reduce = (file, blockstore, options) => {
	  async function reducer(leaves) {
	    if (leaves.length === 1 && leaves[0].single && options.reduceSingleLeafToSelf) {
	      const leaf = leaves[0];
	      if (leaf.cid.code === code$2 && (file.mtime !== undefined || file.mode !== undefined)) {
	        let buffer = await blockstore.get(leaf.cid);
	        leaf.unixfs = new UnixFS({
	          type: 'file',
	          mtime: file.mtime,
	          mode: file.mode,
	          data: buffer
	        });
	        buffer = encode$k(prepare({ Data: leaf.unixfs.marshal() }));
	        leaf.cid = await persist$1(buffer, blockstore, {
	          ...options,
	          codec: dagPB,
	          hasher: options.hasher,
	          cidVersion: options.cidVersion
	        });
	        leaf.size = buffer.length;
	      }
	      return {
	        cid: leaf.cid,
	        path: file.path,
	        unixfs: leaf.unixfs,
	        size: leaf.size
	      };
	    }
	    const f = new UnixFS({
	      type: 'file',
	      mtime: file.mtime,
	      mode: file.mode
	    });
	    const links = leaves.filter(leaf => {
	      if (leaf.cid.code === code$2 && leaf.size) {
	        return true;
	      }
	      if (leaf.unixfs && !leaf.unixfs.data && leaf.unixfs.fileSize()) {
	        return true;
	      }
	      return Boolean(leaf.unixfs && leaf.unixfs.data && leaf.unixfs.data.length);
	    }).map(leaf => {
	      if (leaf.cid.code === code$2) {
	        f.addBlockSize(leaf.size);
	        return {
	          Name: '',
	          Tsize: leaf.size,
	          Hash: leaf.cid
	        };
	      }
	      if (!leaf.unixfs || !leaf.unixfs.data) {
	        f.addBlockSize(leaf.unixfs && leaf.unixfs.fileSize() || 0);
	      } else {
	        f.addBlockSize(leaf.unixfs.data.length);
	      }
	      return {
	        Name: '',
	        Tsize: leaf.size,
	        Hash: leaf.cid
	      };
	    });
	    const node = {
	      Data: f.marshal(),
	      Links: links
	    };
	    const buffer = encode$k(prepare(node));
	    const cid = await persist$1(buffer, blockstore, options);
	    return {
	      cid,
	      path: file.path,
	      unixfs: f,
	      size: buffer.length + node.Links.reduce((acc, curr) => acc + curr.Tsize, 0)
	    };
	  }
	  return reducer;
	};
	function fileBuilder(file, block, options) {
	  const dagBuilder = dagBuilders[options.strategy];
	  if (!dagBuilder) {
	    throw errCode$q(new Error(`Unknown importer build strategy name: ${ options.strategy }`), 'ERR_BAD_STRATEGY');
	  }
	  return dagBuilder(buildFileBatch(file, block, options), reduce(file, block, options), options);
	}

	var require$$0$1 = /*@__PURE__*/getAugmentedNamespace(bufferEs6);

	const { Buffer: Buffer$g } = require$$0$1;
	const symbol = Symbol.for('BufferList');

	function BufferList$b (buf) {
	  if (!(this instanceof BufferList$b)) {
	    return new BufferList$b(buf)
	  }

	  BufferList$b._init.call(this, buf);
	}

	BufferList$b._init = function _init (buf) {
	  Object.defineProperty(this, symbol, { value: true });

	  this._bufs = [];
	  this.length = 0;

	  if (buf) {
	    this.append(buf);
	  }
	};

	BufferList$b.prototype._new = function _new (buf) {
	  return new BufferList$b(buf)
	};

	BufferList$b.prototype._offset = function _offset (offset) {
	  if (offset === 0) {
	    return [0, 0]
	  }

	  let tot = 0;

	  for (let i = 0; i < this._bufs.length; i++) {
	    const _t = tot + this._bufs[i].length;
	    if (offset < _t || i === this._bufs.length - 1) {
	      return [i, offset - tot]
	    }
	    tot = _t;
	  }
	};

	BufferList$b.prototype._reverseOffset = function (blOffset) {
	  const bufferId = blOffset[0];
	  let offset = blOffset[1];

	  for (let i = 0; i < bufferId; i++) {
	    offset += this._bufs[i].length;
	  }

	  return offset
	};

	BufferList$b.prototype.get = function get (index) {
	  if (index > this.length || index < 0) {
	    return undefined
	  }

	  const offset = this._offset(index);

	  return this._bufs[offset[0]][offset[1]]
	};

	BufferList$b.prototype.slice = function slice (start, end) {
	  if (typeof start === 'number' && start < 0) {
	    start += this.length;
	  }

	  if (typeof end === 'number' && end < 0) {
	    end += this.length;
	  }

	  return this.copy(null, 0, start, end)
	};

	BufferList$b.prototype.copy = function copy (dst, dstStart, srcStart, srcEnd) {
	  if (typeof srcStart !== 'number' || srcStart < 0) {
	    srcStart = 0;
	  }

	  if (typeof srcEnd !== 'number' || srcEnd > this.length) {
	    srcEnd = this.length;
	  }

	  if (srcStart >= this.length) {
	    return dst || Buffer$g.alloc(0)
	  }

	  if (srcEnd <= 0) {
	    return dst || Buffer$g.alloc(0)
	  }

	  const copy = !!dst;
	  const off = this._offset(srcStart);
	  const len = srcEnd - srcStart;
	  let bytes = len;
	  let bufoff = (copy && dstStart) || 0;
	  let start = off[1];

	  // copy/slice everything
	  if (srcStart === 0 && srcEnd === this.length) {
	    if (!copy) {
	      // slice, but full concat if multiple buffers
	      return this._bufs.length === 1
	        ? this._bufs[0]
	        : Buffer$g.concat(this._bufs, this.length)
	    }

	    // copy, need to copy individual buffers
	    for (let i = 0; i < this._bufs.length; i++) {
	      this._bufs[i].copy(dst, bufoff);
	      bufoff += this._bufs[i].length;
	    }

	    return dst
	  }

	  // easy, cheap case where it's a subset of one of the buffers
	  if (bytes <= this._bufs[off[0]].length - start) {
	    return copy
	      ? this._bufs[off[0]].copy(dst, dstStart, start, start + bytes)
	      : this._bufs[off[0]].slice(start, start + bytes)
	  }

	  if (!copy) {
	    // a slice, we need something to copy in to
	    dst = Buffer$g.allocUnsafe(len);
	  }

	  for (let i = off[0]; i < this._bufs.length; i++) {
	    const l = this._bufs[i].length - start;

	    if (bytes > l) {
	      this._bufs[i].copy(dst, bufoff, start);
	      bufoff += l;
	    } else {
	      this._bufs[i].copy(dst, bufoff, start, start + bytes);
	      bufoff += l;
	      break
	    }

	    bytes -= l;

	    if (start) {
	      start = 0;
	    }
	  }

	  // safeguard so that we don't return uninitialized memory
	  if (dst.length > bufoff) return dst.slice(0, bufoff)

	  return dst
	};

	BufferList$b.prototype.shallowSlice = function shallowSlice (start, end) {
	  start = start || 0;
	  end = typeof end !== 'number' ? this.length : end;

	  if (start < 0) {
	    start += this.length;
	  }

	  if (end < 0) {
	    end += this.length;
	  }

	  if (start === end) {
	    return this._new()
	  }

	  const startOffset = this._offset(start);
	  const endOffset = this._offset(end);
	  const buffers = this._bufs.slice(startOffset[0], endOffset[0] + 1);

	  if (endOffset[1] === 0) {
	    buffers.pop();
	  } else {
	    buffers[buffers.length - 1] = buffers[buffers.length - 1].slice(0, endOffset[1]);
	  }

	  if (startOffset[1] !== 0) {
	    buffers[0] = buffers[0].slice(startOffset[1]);
	  }

	  return this._new(buffers)
	};

	BufferList$b.prototype.toString = function toString (encoding, start, end) {
	  return this.slice(start, end).toString(encoding)
	};

	BufferList$b.prototype.consume = function consume (bytes) {
	  // first, normalize the argument, in accordance with how Buffer does it
	  bytes = Math.trunc(bytes);
	  // do nothing if not a positive number
	  if (Number.isNaN(bytes) || bytes <= 0) return this

	  while (this._bufs.length) {
	    if (bytes >= this._bufs[0].length) {
	      bytes -= this._bufs[0].length;
	      this.length -= this._bufs[0].length;
	      this._bufs.shift();
	    } else {
	      this._bufs[0] = this._bufs[0].slice(bytes);
	      this.length -= bytes;
	      break
	    }
	  }

	  return this
	};

	BufferList$b.prototype.duplicate = function duplicate () {
	  const copy = this._new();

	  for (let i = 0; i < this._bufs.length; i++) {
	    copy.append(this._bufs[i]);
	  }

	  return copy
	};

	BufferList$b.prototype.append = function append (buf) {
	  if (buf == null) {
	    return this
	  }

	  if (buf.buffer) {
	    // append a view of the underlying ArrayBuffer
	    this._appendBuffer(Buffer$g.from(buf.buffer, buf.byteOffset, buf.byteLength));
	  } else if (Array.isArray(buf)) {
	    for (let i = 0; i < buf.length; i++) {
	      this.append(buf[i]);
	    }
	  } else if (this._isBufferList(buf)) {
	    // unwrap argument into individual BufferLists
	    for (let i = 0; i < buf._bufs.length; i++) {
	      this.append(buf._bufs[i]);
	    }
	  } else {
	    // coerce number arguments to strings, since Buffer(number) does
	    // uninitialized memory allocation
	    if (typeof buf === 'number') {
	      buf = buf.toString();
	    }

	    this._appendBuffer(Buffer$g.from(buf));
	  }

	  return this
	};

	BufferList$b.prototype._appendBuffer = function appendBuffer (buf) {
	  this._bufs.push(buf);
	  this.length += buf.length;
	};

	BufferList$b.prototype.indexOf = function (search, offset, encoding) {
	  if (encoding === undefined && typeof offset === 'string') {
	    encoding = offset;
	    offset = undefined;
	  }

	  if (typeof search === 'function' || Array.isArray(search)) {
	    throw new TypeError('The "value" argument must be one of type string, Buffer, BufferList, or Uint8Array.')
	  } else if (typeof search === 'number') {
	    search = Buffer$g.from([search]);
	  } else if (typeof search === 'string') {
	    search = Buffer$g.from(search, encoding);
	  } else if (this._isBufferList(search)) {
	    search = search.slice();
	  } else if (Array.isArray(search.buffer)) {
	    search = Buffer$g.from(search.buffer, search.byteOffset, search.byteLength);
	  } else if (!Buffer$g.isBuffer(search)) {
	    search = Buffer$g.from(search);
	  }

	  offset = Number(offset || 0);

	  if (isNaN(offset)) {
	    offset = 0;
	  }

	  if (offset < 0) {
	    offset = this.length + offset;
	  }

	  if (offset < 0) {
	    offset = 0;
	  }

	  if (search.length === 0) {
	    return offset > this.length ? this.length : offset
	  }

	  const blOffset = this._offset(offset);
	  let blIndex = blOffset[0]; // index of which internal buffer we're working on
	  let buffOffset = blOffset[1]; // offset of the internal buffer we're working on

	  // scan over each buffer
	  for (; blIndex < this._bufs.length; blIndex++) {
	    const buff = this._bufs[blIndex];

	    while (buffOffset < buff.length) {
	      const availableWindow = buff.length - buffOffset;

	      if (availableWindow >= search.length) {
	        const nativeSearchResult = buff.indexOf(search, buffOffset);

	        if (nativeSearchResult !== -1) {
	          return this._reverseOffset([blIndex, nativeSearchResult])
	        }

	        buffOffset = buff.length - search.length + 1; // end of native search window
	      } else {
	        const revOffset = this._reverseOffset([blIndex, buffOffset]);

	        if (this._match(revOffset, search)) {
	          return revOffset
	        }

	        buffOffset++;
	      }
	    }

	    buffOffset = 0;
	  }

	  return -1
	};

	BufferList$b.prototype._match = function (offset, search) {
	  if (this.length - offset < search.length) {
	    return false
	  }

	  for (let searchOffset = 0; searchOffset < search.length; searchOffset++) {
	    if (this.get(offset + searchOffset) !== search[searchOffset]) {
	      return false
	    }
	  }
	  return true
	}

	;(function () {
	  const methods = {
	    readDoubleBE: 8,
	    readDoubleLE: 8,
	    readFloatBE: 4,
	    readFloatLE: 4,
	    readInt32BE: 4,
	    readInt32LE: 4,
	    readUInt32BE: 4,
	    readUInt32LE: 4,
	    readInt16BE: 2,
	    readInt16LE: 2,
	    readUInt16BE: 2,
	    readUInt16LE: 2,
	    readInt8: 1,
	    readUInt8: 1,
	    readIntBE: null,
	    readIntLE: null,
	    readUIntBE: null,
	    readUIntLE: null
	  };

	  for (const m in methods) {
	    (function (m) {
	      if (methods[m] === null) {
	        BufferList$b.prototype[m] = function (offset, byteLength) {
	          return this.slice(offset, offset + byteLength)[m](0, byteLength)
	        };
	      } else {
	        BufferList$b.prototype[m] = function (offset = 0) {
	          return this.slice(offset, offset + methods[m])[m](0)
	        };
	      }
	    }(m));
	  }
	}());

	// Used internally by the class and also as an indicator of this object being
	// a `BufferList`. It's not possible to use `instanceof BufferList` in a browser
	// environment because there could be multiple different copies of the
	// BufferList class and some `BufferList`s might be `BufferList`s.
	BufferList$b.prototype._isBufferList = function _isBufferList (b) {
	  return b instanceof BufferList$b || BufferList$b.isBufferList(b)
	};

	BufferList$b.isBufferList = function isBufferList (b) {
	  return b != null && b[symbol]
	};

	var BufferList_1 = BufferList$b;

	/**
	 * Rabin fingerprinting
	 *
	 * @class Rabin
	 */

	class Rabin$1 {
	    /**
	     * Creates an instance of Rabin.
	     * @param { import("./../dist/rabin-wasm") } asModule
	     * @param {number} [bits=12]
	     * @param {number} [min=8 * 1024]
	     * @param {number} [max=32 * 1024]
	     * @param {number} polynomial
	     * @memberof Rabin
	     */
	    constructor(asModule, bits = 12, min = 8 * 1024, max = 32 * 1024, windowSize = 64, polynomial) {
	        this.bits = bits;
	        this.min = min;
	        this.max = max;
	        this.asModule = asModule;
	        this.rabin = new asModule.Rabin(bits, min, max, windowSize, polynomial);
	        this.polynomial = polynomial;
	    }

	    /**
	     * Fingerprints the buffer
	     *
	     * @param {Uint8Array} buf
	     * @returns {Array<number>}
	     * @memberof Rabin
	     */
	    fingerprint(buf) {
	        const {
	            __retain,
	            __release,
	            __allocArray,
	            __getInt32Array,
	            Int32Array_ID,
	            Uint8Array_ID
	        } = this.asModule;

	        const lengths = new Int32Array(Math.ceil(buf.length/this.min));
	        const lengthsPtr = __retain(__allocArray(Int32Array_ID, lengths));
	        const pointer = __retain(__allocArray(Uint8Array_ID, buf));

	        const out = this.rabin.fingerprint(pointer, lengthsPtr);
	        const processed = __getInt32Array(out);

	        __release(pointer);
	        __release(lengthsPtr);

	        const end = processed.indexOf(0);
	        return end >= 0 ? processed.subarray(0, end) : processed;
	    }
	}

	var rabin$1 = Rabin$1;

	var loader = {};

	// Runtime header offsets
	const ID_OFFSET = -8;
	const SIZE_OFFSET = -4;

	// Runtime ids
	const ARRAYBUFFER_ID = 0;
	const STRING_ID = 1;

	// Runtime type information
	const ARRAYBUFFERVIEW = 1 << 0;
	const ARRAY = 1 << 1;
	const VAL_ALIGN_OFFSET = 5;
	const VAL_SIGNED = 1 << 10;
	const VAL_FLOAT = 1 << 11;
	const VAL_MANAGED = 1 << 13;

	// Array(BufferView) layout
	const ARRAYBUFFERVIEW_BUFFER_OFFSET = 0;
	const ARRAYBUFFERVIEW_DATASTART_OFFSET = 4;
	const ARRAYBUFFERVIEW_DATALENGTH_OFFSET = 8;
	const ARRAYBUFFERVIEW_SIZE = 12;
	const ARRAY_LENGTH_OFFSET = 12;
	const ARRAY_SIZE = 16;

	const BIGINT = typeof BigUint64Array !== "undefined";
	const THIS = Symbol();
	const CHUNKSIZE = 1024;

	/** Gets a string from an U32 and an U16 view on a memory. */
	function getStringImpl(buffer, ptr) {
	  const U32 = new Uint32Array(buffer);
	  const U16 = new Uint16Array(buffer);
	  var length = U32[(ptr + SIZE_OFFSET) >>> 2] >>> 1;
	  var offset = ptr >>> 1;
	  if (length <= CHUNKSIZE) return String.fromCharCode.apply(String, U16.subarray(offset, offset + length));
	  const parts = [];
	  do {
	    const last = U16[offset + CHUNKSIZE - 1];
	    const size = last >= 0xD800 && last < 0xDC00 ? CHUNKSIZE - 1 : CHUNKSIZE;
	    parts.push(String.fromCharCode.apply(String, U16.subarray(offset, offset += size)));
	    length -= size;
	  } while (length > CHUNKSIZE);
	  return parts.join("") + String.fromCharCode.apply(String, U16.subarray(offset, offset + length));
	}

	/** Prepares the base module prior to instantiation. */
	function preInstantiate(imports) {
	  const baseModule = {};

	  function getString(memory, ptr) {
	    if (!memory) return "<yet unknown>";
	    return getStringImpl(memory.buffer, ptr);
	  }

	  // add common imports used by stdlib for convenience
	  const env = (imports.env = imports.env || {});
	  env.abort = env.abort || function abort(mesg, file, line, colm) {
	    const memory = baseModule.memory || env.memory; // prefer exported, otherwise try imported
	    throw Error("abort: " + getString(memory, mesg) + " at " + getString(memory, file) + ":" + line + ":" + colm);
	  };
	  env.trace = env.trace || function trace(mesg, n) {
	    baseModule.memory || env.memory;
	  };
	  imports.Math = imports.Math || Math;
	  imports.Date = imports.Date || Date;

	  return baseModule;
	}

	/** Prepares the final module once instantiation is complete. */
	function postInstantiate(baseModule, instance) {
	  const rawExports = instance.exports;
	  const memory = rawExports.memory;
	  const table = rawExports.table;
	  const alloc = rawExports["__alloc"];
	  const retain = rawExports["__retain"];
	  const rttiBase = rawExports["__rtti_base"] || ~0; // oob if not present

	  /** Gets the runtime type info for the given id. */
	  function getInfo(id) {
	    const U32 = new Uint32Array(memory.buffer);
	    const count = U32[rttiBase >>> 2];
	    if ((id >>>= 0) >= count) throw Error("invalid id: " + id);
	    return U32[(rttiBase + 4 >>> 2) + id * 2];
	  }

	  /** Gets the runtime base id for the given id. */
	  function getBase(id) {
	    const U32 = new Uint32Array(memory.buffer);
	    const count = U32[rttiBase >>> 2];
	    if ((id >>>= 0) >= count) throw Error("invalid id: " + id);
	    return U32[(rttiBase + 4 >>> 2) + id * 2 + 1];
	  }

	  /** Gets the runtime alignment of a collection's values. */
	  function getValueAlign(info) {
	    return 31 - Math.clz32((info >>> VAL_ALIGN_OFFSET) & 31); // -1 if none
	  }

	  /** Allocates a new string in the module's memory and returns its retained pointer. */
	  function __allocString(str) {
	    const length = str.length;
	    const ptr = alloc(length << 1, STRING_ID);
	    const U16 = new Uint16Array(memory.buffer);
	    for (var i = 0, p = ptr >>> 1; i < length; ++i) U16[p + i] = str.charCodeAt(i);
	    return ptr;
	  }

	  baseModule.__allocString = __allocString;

	  /** Reads a string from the module's memory by its pointer. */
	  function __getString(ptr) {
	    const buffer = memory.buffer;
	    const id = new Uint32Array(buffer)[ptr + ID_OFFSET >>> 2];
	    if (id !== STRING_ID) throw Error("not a string: " + ptr);
	    return getStringImpl(buffer, ptr);
	  }

	  baseModule.__getString = __getString;

	  /** Gets the view matching the specified alignment, signedness and floatness. */
	  function getView(alignLog2, signed, float) {
	    const buffer = memory.buffer;
	    if (float) {
	      switch (alignLog2) {
	        case 2: return new Float32Array(buffer);
	        case 3: return new Float64Array(buffer);
	      }
	    } else {
	      switch (alignLog2) {
	        case 0: return new (signed ? Int8Array : Uint8Array)(buffer);
	        case 1: return new (signed ? Int16Array : Uint16Array)(buffer);
	        case 2: return new (signed ? Int32Array : Uint32Array)(buffer);
	        case 3: return new (signed ? BigInt64Array : BigUint64Array)(buffer);
	      }
	    }
	    throw Error("unsupported align: " + alignLog2);
	  }

	  /** Allocates a new array in the module's memory and returns its retained pointer. */
	  function __allocArray(id, values) {
	    const info = getInfo(id);
	    if (!(info & (ARRAYBUFFERVIEW | ARRAY))) throw Error("not an array: " + id + " @ " + info);
	    const align = getValueAlign(info);
	    const length = values.length;
	    const buf = alloc(length << align, ARRAYBUFFER_ID);
	    const arr = alloc(info & ARRAY ? ARRAY_SIZE : ARRAYBUFFERVIEW_SIZE, id);
	    const U32 = new Uint32Array(memory.buffer);
	    U32[arr + ARRAYBUFFERVIEW_BUFFER_OFFSET >>> 2] = retain(buf);
	    U32[arr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2] = buf;
	    U32[arr + ARRAYBUFFERVIEW_DATALENGTH_OFFSET >>> 2] = length << align;
	    if (info & ARRAY) U32[arr + ARRAY_LENGTH_OFFSET >>> 2] = length;
	    const view = getView(align, info & VAL_SIGNED, info & VAL_FLOAT);
	    if (info & VAL_MANAGED) {
	      for (let i = 0; i < length; ++i) view[(buf >>> align) + i] = retain(values[i]);
	    } else {
	      view.set(values, buf >>> align);
	    }
	    return arr;
	  }

	  baseModule.__allocArray = __allocArray;

	  /** Gets a live view on an array's values in the module's memory. Infers the array type from RTTI. */
	  function __getArrayView(arr) {
	    const U32 = new Uint32Array(memory.buffer);
	    const id = U32[arr + ID_OFFSET >>> 2];
	    const info = getInfo(id);
	    if (!(info & ARRAYBUFFERVIEW)) throw Error("not an array: " + id);
	    const align = getValueAlign(info);
	    var buf = U32[arr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];
	    const length = info & ARRAY
	      ? U32[arr + ARRAY_LENGTH_OFFSET >>> 2]
	      : U32[buf + SIZE_OFFSET >>> 2] >>> align;
	    return getView(align, info & VAL_SIGNED, info & VAL_FLOAT)
	          .subarray(buf >>>= align, buf + length);
	  }

	  baseModule.__getArrayView = __getArrayView;

	  /** Copies an array's values from the module's memory. Infers the array type from RTTI. */
	  function __getArray(arr) {
	    const input = __getArrayView(arr);
	    const len = input.length;
	    const out = new Array(len);
	    for (let i = 0; i < len; i++) out[i] = input[i];
	    return out;
	  }

	  baseModule.__getArray = __getArray;

	  /** Copies an ArrayBuffer's value from the module's memory. */
	  function __getArrayBuffer(ptr) {
	    const buffer = memory.buffer;
	    const length = new Uint32Array(buffer)[ptr + SIZE_OFFSET >>> 2];
	    return buffer.slice(ptr, ptr + length);
	  }

	  baseModule.__getArrayBuffer = __getArrayBuffer;

	  /** Copies a typed array's values from the module's memory. */
	  function getTypedArray(Type, alignLog2, ptr) {
	    return new Type(getTypedArrayView(Type, alignLog2, ptr));
	  }

	  /** Gets a live view on a typed array's values in the module's memory. */
	  function getTypedArrayView(Type, alignLog2, ptr) {
	    const buffer = memory.buffer;
	    const U32 = new Uint32Array(buffer);
	    const bufPtr = U32[ptr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];
	    return new Type(buffer, bufPtr, U32[bufPtr + SIZE_OFFSET >>> 2] >>> alignLog2);
	  }

	  baseModule.__getInt8Array = getTypedArray.bind(null, Int8Array, 0);
	  baseModule.__getInt8ArrayView = getTypedArrayView.bind(null, Int8Array, 0);
	  baseModule.__getUint8Array = getTypedArray.bind(null, Uint8Array, 0);
	  baseModule.__getUint8ArrayView = getTypedArrayView.bind(null, Uint8Array, 0);
	  baseModule.__getUint8ClampedArray = getTypedArray.bind(null, Uint8ClampedArray, 0);
	  baseModule.__getUint8ClampedArrayView = getTypedArrayView.bind(null, Uint8ClampedArray, 0);
	  baseModule.__getInt16Array = getTypedArray.bind(null, Int16Array, 1);
	  baseModule.__getInt16ArrayView = getTypedArrayView.bind(null, Int16Array, 1);
	  baseModule.__getUint16Array = getTypedArray.bind(null, Uint16Array, 1);
	  baseModule.__getUint16ArrayView = getTypedArrayView.bind(null, Uint16Array, 1);
	  baseModule.__getInt32Array = getTypedArray.bind(null, Int32Array, 2);
	  baseModule.__getInt32ArrayView = getTypedArrayView.bind(null, Int32Array, 2);
	  baseModule.__getUint32Array = getTypedArray.bind(null, Uint32Array, 2);
	  baseModule.__getUint32ArrayView = getTypedArrayView.bind(null, Uint32Array, 2);
	  if (BIGINT) {
	    baseModule.__getInt64Array = getTypedArray.bind(null, BigInt64Array, 3);
	    baseModule.__getInt64ArrayView = getTypedArrayView.bind(null, BigInt64Array, 3);
	    baseModule.__getUint64Array = getTypedArray.bind(null, BigUint64Array, 3);
	    baseModule.__getUint64ArrayView = getTypedArrayView.bind(null, BigUint64Array, 3);
	  }
	  baseModule.__getFloat32Array = getTypedArray.bind(null, Float32Array, 2);
	  baseModule.__getFloat32ArrayView = getTypedArrayView.bind(null, Float32Array, 2);
	  baseModule.__getFloat64Array = getTypedArray.bind(null, Float64Array, 3);
	  baseModule.__getFloat64ArrayView = getTypedArrayView.bind(null, Float64Array, 3);

	  /** Tests whether an object is an instance of the class represented by the specified base id. */
	  function __instanceof(ptr, baseId) {
	    const U32 = new Uint32Array(memory.buffer);
	    var id = U32[(ptr + ID_OFFSET) >>> 2];
	    if (id <= U32[rttiBase >>> 2]) {
	      do if (id == baseId) return true;
	      while (id = getBase(id));
	    }
	    return false;
	  }

	  baseModule.__instanceof = __instanceof;

	  // Pull basic exports to baseModule so code in preInstantiate can use them
	  baseModule.memory = baseModule.memory || memory;
	  baseModule.table  = baseModule.table  || table;

	  // Demangle exports and provide the usual utility on the prototype
	  return demangle(rawExports, baseModule);
	}

	function isResponse(o) {
	  return typeof Response !== "undefined" && o instanceof Response;
	}

	/** Asynchronously instantiates an AssemblyScript module from anything that can be instantiated. */
	async function instantiate$1(source, imports) {
	  if (isResponse(source = await source)) return instantiateStreaming(source, imports);
	  return postInstantiate(
	    preInstantiate(imports || (imports = {})),
	    await WebAssembly.instantiate(
	      source instanceof WebAssembly.Module
	        ? source
	        : await WebAssembly.compile(source),
	      imports
	    )
	  );
	}

	loader.instantiate = instantiate$1;

	/** Synchronously instantiates an AssemblyScript module from a WebAssembly.Module or binary buffer. */
	function instantiateSync(source, imports) {
	  return postInstantiate(
	    preInstantiate(imports || (imports = {})),
	    new WebAssembly.Instance(
	      source instanceof WebAssembly.Module
	        ? source
	        : new WebAssembly.Module(source),
	      imports
	    )
	  )
	}

	loader.instantiateSync = instantiateSync;

	/** Asynchronously instantiates an AssemblyScript module from a response, i.e. as obtained by `fetch`. */
	async function instantiateStreaming(source, imports) {
	  if (!WebAssembly.instantiateStreaming) {
	    return instantiate$1(
	      isResponse(source = await source)
	        ? source.arrayBuffer()
	        : source,
	      imports
	    );
	  }
	  return postInstantiate(
	    preInstantiate(imports || (imports = {})),
	    (await WebAssembly.instantiateStreaming(source, imports)).instance
	  );
	}

	loader.instantiateStreaming = instantiateStreaming;

	/** Demangles an AssemblyScript module's exports to a friendly object structure. */
	function demangle(exports, baseModule) {
	  var module = baseModule ? Object.create(baseModule) : {};
	  var setArgumentsLength = exports["__argumentsLength"]
	    ? function(length) { exports["__argumentsLength"].value = length; }
	    : exports["__setArgumentsLength"] || exports["__setargc"] || function() {};
	  for (let internalName in exports) {
	    if (!Object.prototype.hasOwnProperty.call(exports, internalName)) continue;
	    const elem = exports[internalName];
	    let parts = internalName.split(".");
	    let curr = module;
	    while (parts.length > 1) {
	      let part = parts.shift();
	      if (!Object.prototype.hasOwnProperty.call(curr, part)) curr[part] = {};
	      curr = curr[part];
	    }
	    let name = parts[0];
	    let hash = name.indexOf("#");
	    if (hash >= 0) {
	      let className = name.substring(0, hash);
	      let classElem = curr[className];
	      if (typeof classElem === "undefined" || !classElem.prototype) {
	        let ctor = function(...args) {
	          return ctor.wrap(ctor.prototype.constructor(0, ...args));
	        };
	        ctor.prototype = {
	          valueOf: function valueOf() {
	            return this[THIS];
	          }
	        };
	        ctor.wrap = function(thisValue) {
	          return Object.create(ctor.prototype, { [THIS]: { value: thisValue, writable: false } });
	        };
	        if (classElem) Object.getOwnPropertyNames(classElem).forEach(name =>
	          Object.defineProperty(ctor, name, Object.getOwnPropertyDescriptor(classElem, name))
	        );
	        curr[className] = ctor;
	      }
	      name = name.substring(hash + 1);
	      curr = curr[className].prototype;
	      if (/^(get|set):/.test(name)) {
	        if (!Object.prototype.hasOwnProperty.call(curr, name = name.substring(4))) {
	          let getter = exports[internalName.replace("set:", "get:")];
	          let setter = exports[internalName.replace("get:", "set:")];
	          Object.defineProperty(curr, name, {
	            get: function() { return getter(this[THIS]); },
	            set: function(value) { setter(this[THIS], value); },
	            enumerable: true
	          });
	        }
	      } else {
	        if (name === 'constructor') {
	          (curr[name] = (...args) => {
	            setArgumentsLength(args.length);
	            return elem(...args);
	          }).original = elem;
	        } else { // instance method
	          (curr[name] = function(...args) { // !
	            setArgumentsLength(args.length);
	            return elem(this[THIS], ...args);
	          }).original = elem;
	        }
	      }
	    } else {
	      if (/^(get|set):/.test(name)) {
	        if (!Object.prototype.hasOwnProperty.call(curr, name = name.substring(4))) {
	          Object.defineProperty(curr, name, {
	            get: exports[internalName.replace("set:", "get:")],
	            set: exports[internalName.replace("get:", "set:")],
	            enumerable: true
	          });
	        }
	      } else if (typeof elem === "function" && elem !== setArgumentsLength) {
	        (curr[name] = (...args) => {
	          setArgumentsLength(args.length);
	          return elem(...args);
	        }).original = elem;
	      } else {
	        curr[name] = elem;
	      }
	    }
	  }
	  return module;
	}

	loader.demangle = demangle;

	const { instantiate } = loader;

	loadWebAssembly.supported = typeof WebAssembly !== 'undefined';

	function loadWebAssembly (imp = {}) {
	  if (!loadWebAssembly.supported) return null
	  
	  var wasm = new Uint8Array([0,97,115,109,1,0,0,0,1,78,14,96,2,127,126,0,96,1,127,1,126,96,2,127,127,0,96,1,127,1,127,96,1,127,0,96,2,127,127,1,127,96,3,127,127,127,1,127,96,0,0,96,3,127,127,127,0,96,0,1,127,96,4,127,127,127,127,0,96,5,127,127,127,127,127,1,127,96,1,126,1,127,96,2,126,126,1,126,2,13,1,3,101,110,118,5,97,98,111,114,116,0,10,3,54,53,2,2,8,9,3,5,2,8,6,5,3,4,2,6,9,12,13,2,5,11,3,2,3,2,3,2,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,6,7,7,4,4,5,3,1,0,1,6,47,9,127,1,65,0,11,127,1,65,0,11,127,0,65,3,11,127,0,65,4,11,127,1,65,0,11,127,1,65,0,11,127,1,65,0,11,127,0,65,240,2,11,127,0,65,6,11,7,240,5,41,6,109,101,109,111,114,121,2,0,7,95,95,97,108,108,111,99,0,10,8,95,95,114,101,116,97,105,110,0,11,9,95,95,114,101,108,101,97,115,101,0,12,9,95,95,99,111,108,108,101,99,116,0,51,11,95,95,114,116,116,105,95,98,97,115,101,3,7,13,73,110,116,51,50,65,114,114,97,121,95,73,68,3,2,13,85,105,110,116,56,65,114,114,97,121,95,73,68,3,3,6,100,101,103,114,101,101,0,16,3,109,111,100,0,17,5,82,97,98,105,110,3,8,16,82,97,98,105,110,35,103,101,116,58,119,105,110,100,111,119,0,21,16,82,97,98,105,110,35,115,101,116,58,119,105,110,100,111,119,0,22,21,82,97,98,105,110,35,103,101,116,58,119,105,110,100,111,119,95,115,105,122,101,0,23,21,82,97,98,105,110,35,115,101,116,58,119,105,110,100,111,119,95,115,105,122,101,0,24,14,82,97,98,105,110,35,103,101,116,58,119,112,111,115,0,25,14,82,97,98,105,110,35,115,101,116,58,119,112,111,115,0,26,15,82,97,98,105,110,35,103,101,116,58,99,111,117,110,116,0,27,15,82,97,98,105,110,35,115,101,116,58,99,111,117,110,116,0,28,13,82,97,98,105,110,35,103,101,116,58,112,111,115,0,29,13,82,97,98,105,110,35,115,101,116,58,112,111,115,0,30,15,82,97,98,105,110,35,103,101,116,58,115,116,97,114,116,0,31,15,82,97,98,105,110,35,115,101,116,58,115,116,97,114,116,0,32,16,82,97,98,105,110,35,103,101,116,58,100,105,103,101,115,116,0,33,16,82,97,98,105,110,35,115,101,116,58,100,105,103,101,115,116,0,34,21,82,97,98,105,110,35,103,101,116,58,99,104,117,110,107,95,115,116,97,114,116,0,35,21,82,97,98,105,110,35,115,101,116,58,99,104,117,110,107,95,115,116,97,114,116,0,36,22,82,97,98,105,110,35,103,101,116,58,99,104,117,110,107,95,108,101,110,103,116,104,0,37,22,82,97,98,105,110,35,115,101,116,58,99,104,117,110,107,95,108,101,110,103,116,104,0,38,31,82,97,98,105,110,35,103,101,116,58,99,104,117,110,107,95,99,117,116,95,102,105,110,103,101,114,112,114,105,110,116,0,39,31,82,97,98,105,110,35,115,101,116,58,99,104,117,110,107,95,99,117,116,95,102,105,110,103,101,114,112,114,105,110,116,0,40,20,82,97,98,105,110,35,103,101,116,58,112,111,108,121,110,111,109,105,97,108,0,41,20,82,97,98,105,110,35,115,101,116,58,112,111,108,121,110,111,109,105,97,108,0,42,17,82,97,98,105,110,35,103,101,116,58,109,105,110,115,105,122,101,0,43,17,82,97,98,105,110,35,115,101,116,58,109,105,110,115,105,122,101,0,44,17,82,97,98,105,110,35,103,101,116,58,109,97,120,115,105,122,101,0,45,17,82,97,98,105,110,35,115,101,116,58,109,97,120,115,105,122,101,0,46,14,82,97,98,105,110,35,103,101,116,58,109,97,115,107,0,47,14,82,97,98,105,110,35,115,101,116,58,109,97,115,107,0,48,17,82,97,98,105,110,35,99,111,110,115,116,114,117,99,116,111,114,0,20,17,82,97,98,105,110,35,102,105,110,103,101,114,112,114,105,110,116,0,49,8,1,50,10,165,31,53,199,1,1,4,127,32,1,40,2,0,65,124,113,34,2,65,128,2,73,4,127,32,2,65,4,118,33,4,65,0,5,32,2,65,31,32,2,103,107,34,3,65,4,107,118,65,16,115,33,4,32,3,65,7,107,11,33,3,32,1,40,2,20,33,2,32,1,40,2,16,34,5,4,64,32,5,32,2,54,2,20,11,32,2,4,64,32,2,32,5,54,2,16,11,32,1,32,0,32,4,32,3,65,4,116,106,65,2,116,106,40,2,96,70,4,64,32,0,32,4,32,3,65,4,116,106,65,2,116,106,32,2,54,2,96,32,2,69,4,64,32,0,32,3,65,2,116,106,32,0,32,3,65,2,116,106,40,2,4,65,1,32,4,116,65,127,115,113,34,1,54,2,4,32,1,69,4,64,32,0,32,0,40,2,0,65,1,32,3,116,65,127,115,113,54,2,0,11,11,11,11,226,2,1,6,127,32,1,40,2,0,33,3,32,1,65,16,106,32,1,40,2,0,65,124,113,106,34,4,40,2,0,34,5,65,1,113,4,64,32,3,65,124,113,65,16,106,32,5,65,124,113,106,34,2,65,240,255,255,255,3,73,4,64,32,0,32,4,16,1,32,1,32,2,32,3,65,3,113,114,34,3,54,2,0,32,1,65,16,106,32,1,40,2,0,65,124,113,106,34,4,40,2,0,33,5,11,11,32,3,65,2,113,4,64,32,1,65,4,107,40,2,0,34,2,40,2,0,34,6,65,124,113,65,16,106,32,3,65,124,113,106,34,7,65,240,255,255,255,3,73,4,64,32,0,32,2,16,1,32,2,32,7,32,6,65,3,113,114,34,3,54,2,0,32,2,33,1,11,11,32,4,32,5,65,2,114,54,2,0,32,4,65,4,107,32,1,54,2,0,32,0,32,3,65,124,113,34,2,65,128,2,73,4,127,32,2,65,4,118,33,4,65,0,5,32,2,65,31,32,2,103,107,34,2,65,4,107,118,65,16,115,33,4,32,2,65,7,107,11,34,3,65,4,116,32,4,106,65,2,116,106,40,2,96,33,2,32,1,65,0,54,2,16,32,1,32,2,54,2,20,32,2,4,64,32,2,32,1,54,2,16,11,32,0,32,4,32,3,65,4,116,106,65,2,116,106,32,1,54,2,96,32,0,32,0,40,2,0,65,1,32,3,116,114,54,2,0,32,0,32,3,65,2,116,106,32,0,32,3,65,2,116,106,40,2,4,65,1,32,4,116,114,54,2,4,11,119,1,1,127,32,2,2,127,32,0,40,2,160,12,34,2,4,64,32,2,32,1,65,16,107,70,4,64,32,2,40,2,0,33,3,32,1,65,16,107,33,1,11,11,32,1,11,107,34,2,65,48,73,4,64,15,11,32,1,32,3,65,2,113,32,2,65,32,107,65,1,114,114,54,2,0,32,1,65,0,54,2,16,32,1,65,0,54,2,20,32,1,32,2,106,65,16,107,34,2,65,2,54,2,0,32,0,32,2,54,2,160,12,32,0,32,1,16,2,11,155,1,1,3,127,35,0,34,0,69,4,64,65,1,63,0,34,0,74,4,127,65,1,32,0,107,64,0,65,0,72,5,65,0,11,4,64,0,11,65,176,3,34,0,65,0,54,2,0,65,208,15,65,0,54,2,0,3,64,32,1,65,23,73,4,64,32,1,65,2,116,65,176,3,106,65,0,54,2,4,65,0,33,2,3,64,32,2,65,16,73,4,64,32,1,65,4,116,32,2,106,65,2,116,65,176,3,106,65,0,54,2,96,32,2,65,1,106,33,2,12,1,11,11,32,1,65,1,106,33,1,12,1,11,11,65,176,3,65,224,15,63,0,65,16,116,16,3,65,176,3,36,0,11,32,0,11,45,0,32,0,65,240,255,255,255,3,79,4,64,65,32,65,224,0,65,201,3,65,29,16,0,0,11,32,0,65,15,106,65,112,113,34,0,65,16,32,0,65,16,75,27,11,169,1,1,1,127,32,0,32,1,65,128,2,73,4,127,32,1,65,4,118,33,1,65,0,5,32,1,65,248,255,255,255,1,73,4,64,32,1,65,1,65,27,32,1,103,107,116,106,65,1,107,33,1,11,32,1,65,31,32,1,103,107,34,2,65,4,107,118,65,16,115,33,1,32,2,65,7,107,11,34,2,65,2,116,106,40,2,4,65,127,32,1,116,113,34,1,4,127,32,0,32,1,104,32,2,65,4,116,106,65,2,116,106,40,2,96,5,32,0,40,2,0,65,127,32,2,65,1,106,116,113,34,1,4,127,32,0,32,0,32,1,104,34,0,65,2,116,106,40,2,4,104,32,0,65,4,116,106,65,2,116,106,40,2,96,5,65,0,11,11,11,111,1,1,127,63,0,34,2,32,1,65,248,255,255,255,1,73,4,127,32,1,65,1,65,27,32,1,103,107,116,65,1,107,106,5,32,1,11,65,16,32,0,40,2,160,12,32,2,65,16,116,65,16,107,71,116,106,65,255,255,3,106,65,128,128,124,113,65,16,118,34,1,32,2,32,1,74,27,64,0,65,0,72,4,64,32,1,64,0,65,0,72,4,64,0,11,11,32,0,32,2,65,16,116,63,0,65,16,116,16,3,11,113,1,2,127,32,1,40,2,0,34,3,65,124,113,32,2,107,34,4,65,32,79,4,64,32,1,32,2,32,3,65,2,113,114,54,2,0,32,2,32,1,65,16,106,106,34,1,32,4,65,16,107,65,1,114,54,2,0,32,0,32,1,16,2,5,32,1,32,3,65,126,113,54,2,0,32,1,65,16,106,32,1,40,2,0,65,124,113,106,32,1,65,16,106,32,1,40,2,0,65,124,113,106,40,2,0,65,125,113,54,2,0,11,11,91,1,2,127,32,0,32,1,16,5,34,4,16,6,34,3,69,4,64,65,1,36,1,65,0,36,1,32,0,32,4,16,6,34,3,69,4,64,32,0,32,4,16,7,32,0,32,4,16,6,33,3,11,11,32,3,65,0,54,2,4,32,3,32,2,54,2,8,32,3,32,1,54,2,12,32,0,32,3,16,1,32,0,32,3,32,4,16,8,32,3,11,13,0,16,4,32,0,32,1,16,9,65,16,106,11,33,1,1,127,32,0,65,172,3,75,4,64,32,0,65,16,107,34,1,32,1,40,2,4,65,1,106,54,2,4,11,32,0,11,18,0,32,0,65,172,3,75,4,64,32,0,65,16,107,16,52,11,11,140,3,1,1,127,2,64,32,1,69,13,0,32,0,65,0,58,0,0,32,0,32,1,106,65,1,107,65,0,58,0,0,32,1,65,2,77,13,0,32,0,65,1,106,65,0,58,0,0,32,0,65,2,106,65,0,58,0,0,32,0,32,1,106,34,2,65,2,107,65,0,58,0,0,32,2,65,3,107,65,0,58,0,0,32,1,65,6,77,13,0,32,0,65,3,106,65,0,58,0,0,32,0,32,1,106,65,4,107,65,0,58,0,0,32,1,65,8,77,13,0,32,1,65,0,32,0,107,65,3,113,34,1,107,33,2,32,0,32,1,106,34,0,65,0,54,2,0,32,0,32,2,65,124,113,34,1,106,65,4,107,65,0,54,2,0,32,1,65,8,77,13,0,32,0,65,4,106,65,0,54,2,0,32,0,65,8,106,65,0,54,2,0,32,0,32,1,106,34,2,65,12,107,65,0,54,2,0,32,2,65,8,107,65,0,54,2,0,32,1,65,24,77,13,0,32,0,65,12,106,65,0,54,2,0,32,0,65,16,106,65,0,54,2,0,32,0,65,20,106,65,0,54,2,0,32,0,65,24,106,65,0,54,2,0,32,0,32,1,106,34,2,65,28,107,65,0,54,2,0,32,2,65,24,107,65,0,54,2,0,32,2,65,20,107,65,0,54,2,0,32,2,65,16,107,65,0,54,2,0,32,0,32,0,65,4,113,65,24,106,34,2,106,33,0,32,1,32,2,107,33,1,3,64,32,1,65,32,79,4,64,32,0,66,0,55,3,0,32,0,65,8,106,66,0,55,3,0,32,0,65,16,106,66,0,55,3,0,32,0,65,24,106,66,0,55,3,0,32,1,65,32,107,33,1,32,0,65,32,106,33,0,12,1,11,11,11,11,178,1,1,3,127,32,1,65,240,255,255,255,3,32,2,118,75,4,64,65,144,1,65,192,1,65,23,65,56,16,0,0,11,32,1,32,2,116,34,3,65,0,16,10,34,2,32,3,16,13,32,0,69,4,64,65,12,65,2,16,10,34,0,65,172,3,75,4,64,32,0,65,16,107,34,1,32,1,40,2,4,65,1,106,54,2,4,11,11,32,0,65,0,54,2,0,32,0,65,0,54,2,4,32,0,65,0,54,2,8,32,2,34,1,32,0,40,2,0,34,4,71,4,64,32,1,65,172,3,75,4,64,32,1,65,16,107,34,5,32,5,40,2,4,65,1,106,54,2,4,11,32,4,16,12,11,32,0,32,1,54,2,0,32,0,32,2,54,2,4,32,0,32,3,54,2,8,32,0,11,46,1,2,127,65,12,65,5,16,10,34,0,65,172,3,75,4,64,32,0,65,16,107,34,1,32,1,40,2,4,65,1,106,54,2,4,11,32,0,65,128,2,65,3,16,14,11,9,0,65,63,32,0,121,167,107,11,49,1,2,127,65,63,32,1,121,167,107,33,2,3,64,65,63,32,0,121,167,107,32,2,107,34,3,65,0,78,4,64,32,0,32,1,32,3,172,134,133,33,0,12,1,11,11,32,0,11,40,0,32,1,32,0,40,2,8,79,4,64,65,128,2,65,192,2,65,163,1,65,44,16,0,0,11,32,1,32,0,40,2,4,106,65,0,58,0,0,11,38,0,32,1,32,0,40,2,8,79,4,64,65,128,2,65,192,2,65,152,1,65,44,16,0,0,11,32,1,32,0,40,2,4,106,45,0,0,11,254,5,2,1,127,4,126,32,0,69,4,64,65,232,0,65,6,16,10,34,0,65,172,3,75,4,64,32,0,65,16,107,34,5,32,5,40,2,4,65,1,106,54,2,4,11,11,32,0,65,0,54,2,0,32,0,65,0,54,2,4,32,0,65,0,54,2,8,32,0,66,0,55,3,16,32,0,66,0,55,3,24,32,0,66,0,55,3,32,32,0,66,0,55,3,40,32,0,66,0,55,3,48,32,0,66,0,55,3,56,32,0,66,0,55,3,64,32,0,66,0,55,3,72,32,0,66,0,55,3,80,32,0,66,0,55,3,88,32,0,66,0,55,3,96,32,0,32,2,173,55,3,80,32,0,32,3,173,55,3,88,65,12,65,4,16,10,34,2,65,172,3,75,4,64,32,2,65,16,107,34,3,32,3,40,2,4,65,1,106,54,2,4,11,32,2,32,4,65,0,16,14,33,2,32,0,40,2,0,16,12,32,0,32,2,54,2,0,32,0,32,4,54,2,4,32,0,66,1,32,1,173,134,66,1,125,55,3,96,32,0,66,243,130,183,218,216,230,232,30,55,3,72,35,4,69,4,64,65,0,33,2,3,64,32,2,65,128,2,72,4,64,32,2,65,255,1,113,173,33,6,32,0,41,3,72,34,7,33,8,65,63,32,7,121,167,107,33,1,3,64,65,63,32,6,121,167,107,32,1,107,34,3,65,0,78,4,64,32,6,32,8,32,3,172,134,133,33,6,12,1,11,11,65,0,33,4,3,64,32,4,32,0,40,2,4,65,1,107,72,4,64,32,6,66,8,134,33,6,32,0,41,3,72,34,7,33,8,65,63,32,7,121,167,107,33,1,3,64,65,63,32,6,121,167,107,32,1,107,34,3,65,0,78,4,64,32,6,32,8,32,3,172,134,133,33,6,12,1,11,11,32,4,65,1,106,33,4,12,1,11,11,35,6,40,2,4,32,2,65,3,116,106,32,6,55,3,0,32,2,65,1,106,33,2,12,1,11,11,65,63,32,0,41,3,72,121,167,107,172,33,7,65,0,33,2,3,64,32,2,65,128,2,72,4,64,35,5,33,1,32,2,172,32,7,134,34,8,33,6,65,63,32,0,41,3,72,34,9,121,167,107,33,3,3,64,65,63,32,6,121,167,107,32,3,107,34,4,65,0,78,4,64,32,6,32,9,32,4,172,134,133,33,6,12,1,11,11,32,1,40,2,4,32,2,65,3,116,106,32,6,32,8,132,55,3,0,32,2,65,1,106,33,2,12,1,11,11,65,1,36,4,11,32,0,66,0,55,3,24,32,0,66,0,55,3,32,65,0,33,2,3,64,32,2,32,0,40,2,4,72,4,64,32,0,40,2,0,32,2,16,18,32,2,65,1,106,33,2,12,1,11,11,32,0,66,0,55,3,40,32,0,65,0,54,2,8,32,0,66,0,55,3,16,32,0,66,0,55,3,40,32,0,40,2,0,32,0,40,2,8,16,19,33,1,32,0,40,2,8,32,0,40,2,0,40,2,4,106,65,1,58,0,0,32,0,32,0,41,3,40,35,6,40,2,4,32,1,65,3,116,106,41,3,0,133,55,3,40,32,0,32,0,40,2,8,65,1,106,32,0,40,2,4,111,54,2,8,32,0,35,5,40,2,4,32,0,41,3,40,34,6,66,45,136,167,65,3,116,106,41,3,0,32,6,66,8,134,66,1,132,133,55,3,40,32,0,11,38,1,1,127,32,0,40,2,0,34,0,65,172,3,75,4,64,32,0,65,16,107,34,1,32,1,40,2,4,65,1,106,54,2,4,11,32,0,11,55,1,2,127,32,1,32,0,40,2,0,34,2,71,4,64,32,1,65,172,3,75,4,64,32,1,65,16,107,34,3,32,3,40,2,4,65,1,106,54,2,4,11,32,2,16,12,11,32,0,32,1,54,2,0,11,7,0,32,0,40,2,4,11,9,0,32,0,32,1,54,2,4,11,7,0,32,0,40,2,8,11,9,0,32,0,32,1,54,2,8,11,7,0,32,0,41,3,16,11,9,0,32,0,32,1,55,3,16,11,7,0,32,0,41,3,24,11,9,0,32,0,32,1,55,3,24,11,7,0,32,0,41,3,32,11,9,0,32,0,32,1,55,3,32,11,7,0,32,0,41,3,40,11,9,0,32,0,32,1,55,3,40,11,7,0,32,0,41,3,48,11,9,0,32,0,32,1,55,3,48,11,7,0,32,0,41,3,56,11,9,0,32,0,32,1,55,3,56,11,7,0,32,0,41,3,64,11,9,0,32,0,32,1,55,3,64,11,7,0,32,0,41,3,72,11,9,0,32,0,32,1,55,3,72,11,7,0,32,0,41,3,80,11,9,0,32,0,32,1,55,3,80,11,7,0,32,0,41,3,88,11,9,0,32,0,32,1,55,3,88,11,7,0,32,0,41,3,96,11,9,0,32,0,32,1,55,3,96,11,172,4,2,5,127,1,126,32,2,65,172,3,75,4,64,32,2,65,16,107,34,4,32,4,40,2,4,65,1,106,54,2,4,11,32,2,33,4,65,0,33,2,32,1,40,2,8,33,5,32,1,40,2,4,33,6,3,64,2,127,65,0,33,3,3,64,32,3,32,5,72,4,64,32,3,32,6,106,45,0,0,33,1,32,0,40,2,0,32,0,40,2,8,16,19,33,7,32,0,40,2,8,32,0,40,2,0,40,2,4,106,32,1,58,0,0,32,0,32,0,41,3,40,35,6,40,2,4,32,7,65,3,116,106,41,3,0,133,55,3,40,32,0,32,0,40,2,8,65,1,106,32,0,40,2,4,111,54,2,8,32,0,35,5,40,2,4,32,0,41,3,40,34,8,66,45,136,167,65,3,116,106,41,3,0,32,1,173,32,8,66,8,134,132,133,55,3,40,32,0,32,0,41,3,16,66,1,124,55,3,16,32,0,32,0,41,3,24,66,1,124,55,3,24,32,0,41,3,16,32,0,41,3,80,90,4,127,32,0,41,3,40,32,0,41,3,96,131,80,5,65,0,11,4,127,65,1,5,32,0,41,3,16,32,0,41,3,88,90,11,4,64,32,0,32,0,41,3,32,55,3,48,32,0,32,0,41,3,16,55,3,56,32,0,32,0,41,3,40,55,3,64,65,0,33,1,3,64,32,1,32,0,40,2,4,72,4,64,32,0,40,2,0,32,1,16,18,32,1,65,1,106,33,1,12,1,11,11,32,0,66,0,55,3,40,32,0,65,0,54,2,8,32,0,66,0,55,3,16,32,0,66,0,55,3,40,32,0,40,2,0,32,0,40,2,8,16,19,33,1,32,0,40,2,8,32,0,40,2,0,40,2,4,106,65,1,58,0,0,32,0,32,0,41,3,40,35,6,40,2,4,32,1,65,3,116,106,41,3,0,133,55,3,40,32,0,32,0,40,2,8,65,1,106,32,0,40,2,4,111,54,2,8,32,0,35,5,40,2,4,32,0,41,3,40,34,8,66,45,136,167,65,3,116,106,41,3,0,32,8,66,8,134,66,1,132,133,55,3,40,32,3,65,1,106,12,3,11,32,3,65,1,106,33,3,12,1,11,11,65,127,11,34,1,65,0,78,4,64,32,5,32,1,107,33,5,32,1,32,6,106,33,6,32,2,34,1,65,1,106,33,2,32,4,40,2,4,32,1,65,2,116,106,32,0,41,3,56,62,2,0,12,1,11,11,32,4,11,10,0,16,15,36,5,16,15,36,6,11,3,0,1,11,73,1,2,127,32,0,40,2,4,34,1,65,255,255,255,255,0,113,34,2,65,1,70,4,64,32,0,65,16,106,16,53,32,0,32,0,40,2,0,65,1,114,54,2,0,35,0,32,0,16,2,5,32,0,32,2,65,1,107,32,1,65,128,128,128,128,127,113,114,54,2,4,11,11,58,0,2,64,2,64,2,64,32,0,65,8,107,40,2,0,14,7,0,0,1,1,1,1,1,2,11,15,11,32,0,40,2,0,34,0,4,64,32,0,65,172,3,79,4,64,32,0,65,16,107,16,52,11,11,15,11,0,11,11,137,3,7,0,65,16,11,55,40,0,0,0,1,0,0,0,1,0,0,0,40,0,0,0,97,0,108,0,108,0,111,0,99,0,97,0,116,0,105,0,111,0,110,0,32,0,116,0,111,0,111,0,32,0,108,0,97,0,114,0,103,0,101,0,65,208,0,11,45,30,0,0,0,1,0,0,0,1,0,0,0,30,0,0,0,126,0,108,0,105,0,98,0,47,0,114,0,116,0,47,0,116,0,108,0,115,0,102,0,46,0,116,0,115,0,65,128,1,11,43,28,0,0,0,1,0,0,0,1,0,0,0,28,0,0,0,73,0,110,0,118,0,97,0,108,0,105,0,100,0,32,0,108,0,101,0,110,0,103,0,116,0,104,0,65,176,1,11,53,38,0,0,0,1,0,0,0,1,0,0,0,38,0,0,0,126,0,108,0,105,0,98,0,47,0,97,0,114,0,114,0,97,0,121,0,98,0,117,0,102,0,102,0,101,0,114,0,46,0,116,0,115,0,65,240,1,11,51,36,0,0,0,1,0,0,0,1,0,0,0,36,0,0,0,73,0,110,0,100,0,101,0,120,0,32,0,111,0,117,0,116,0,32,0,111,0,102,0,32,0,114,0,97,0,110,0,103,0,101,0,65,176,2,11,51,36,0,0,0,1,0,0,0,1,0,0,0,36,0,0,0,126,0,108,0,105,0,98,0,47,0,116,0,121,0,112,0,101,0,100,0,97,0,114,0,114,0,97,0,121,0,46,0,116,0,115,0,65,240,2,11,53,7,0,0,0,16,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,145,4,0,0,2,0,0,0,49,0,0,0,2,0,0,0,17,1,0,0,2,0,0,0,16,0,34,16,115,111,117,114,99,101,77,97,112,112,105,110,103,85,82,76,16,46,47,114,97,98,105,110,46,119,97,115,109,46,109,97,112]);
	  // make it work async because browsers throw when a wasm module is bigger than 4kb and load sync
	  return instantiate(new Response(new Blob([wasm], {type: 'application/wasm'})), imp)
	}
	var rabinWasm = loadWebAssembly;

	const Rabin = rabin$1;
	const getRabin = rabinWasm;

	const create$4 = async (avg, min, max, windowSize, polynomial) => {
	    const compiled = await getRabin();
	    return new Rabin(compiled, avg, min, max, windowSize, polynomial)
	};

	var src$k = {
	    Rabin,
	    create: create$4
	};

	async function* rabinChunker(source, options) {
	  let min, max, avg;
	  if (options.minChunkSize && options.maxChunkSize && options.avgChunkSize) {
	    avg = options.avgChunkSize;
	    min = options.minChunkSize;
	    max = options.maxChunkSize;
	  } else if (!options.avgChunkSize) {
	    throw errCode$q(new Error('please specify an average chunk size'), 'ERR_INVALID_AVG_CHUNK_SIZE');
	  } else {
	    avg = options.avgChunkSize;
	    min = avg / 3;
	    max = avg + avg / 2;
	  }
	  if (min < 16) {
	    throw errCode$q(new Error('rabin min must be greater than 16'), 'ERR_INVALID_MIN_CHUNK_SIZE');
	  }
	  if (max < min) {
	    max = min;
	  }
	  if (avg < min) {
	    avg = min;
	  }
	  const sizepow = Math.floor(Math.log2(avg));
	  for await (const chunk of rabin(source, {
	      min: min,
	      max: max,
	      bits: sizepow,
	      window: options.window,
	      polynomial: options.polynomial
	    })) {
	    yield chunk;
	  }
	}
	async function* rabin(source, options) {
	  const r = await src$k.create(options.bits, options.min, options.max, options.window);
	  const buffers = new BufferList_1();
	  for await (const chunk of source) {
	    buffers.append(chunk);
	    const sizes = r.fingerprint(chunk);
	    for (let i = 0; i < sizes.length; i++) {
	      const size = sizes[i];
	      const buf = buffers.slice(0, size);
	      buffers.consume(size);
	      yield buf;
	    }
	  }
	  if (buffers.length) {
	    yield buffers.slice(0);
	  }
	}

	async function* fixedSizeChunker(source, options) {
	  let bl = new BufferList_1();
	  let currentLength = 0;
	  let emitted = false;
	  const maxChunkSize = options.maxChunkSize;
	  for await (const buffer of source) {
	    bl.append(buffer);
	    currentLength += buffer.length;
	    while (currentLength >= maxChunkSize) {
	      yield bl.slice(0, maxChunkSize);
	      emitted = true;
	      if (maxChunkSize === bl.length) {
	        bl = new BufferList_1();
	        currentLength = 0;
	      } else {
	        const newBl = new BufferList_1();
	        newBl.append(bl.shallowSlice(maxChunkSize));
	        bl = newBl;
	        currentLength -= maxChunkSize;
	      }
	    }
	  }
	  if (!emitted || currentLength) {
	    yield bl.slice(0, currentLength);
	  }
	}

	async function* validateChunks(source) {
	  for await (const content of source) {
	    if (content.length === undefined) {
	      throw errCode$q(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');
	    }
	    if (typeof content === 'string' || content instanceof String) {
	      yield fromString$4(content.toString());
	    } else if (Array.isArray(content)) {
	      yield Uint8Array.from(content);
	    } else if (content instanceof Uint8Array) {
	      yield content;
	    } else {
	      throw errCode$q(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');
	    }
	  }
	}

	function isIterable(thing) {
	  return Symbol.iterator in thing;
	}
	function isAsyncIterable(thing) {
	  return Symbol.asyncIterator in thing;
	}
	function contentAsAsyncIterable(content) {
	  try {
	    if (content instanceof Uint8Array) {
	      return async function* () {
	        yield content;
	      }();
	    } else if (isIterable(content)) {
	      return async function* () {
	        yield* content;
	      }();
	    } else if (isAsyncIterable(content)) {
	      return content;
	    }
	  } catch {
	    throw errCode$q(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');
	  }
	  throw errCode$q(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');
	}
	async function* dagBuilder(source, blockstore, options) {
	  for await (const entry of source) {
	    if (entry.path) {
	      if (entry.path.substring(0, 2) === './') {
	        options.wrapWithDirectory = true;
	      }
	      entry.path = entry.path.split('/').filter(path => path && path !== '.').join('/');
	    }
	    if (entry.content) {
	      let chunker;
	      if (typeof options.chunker === 'function') {
	        chunker = options.chunker;
	      } else if (options.chunker === 'rabin') {
	        chunker = rabinChunker;
	      } else {
	        chunker = fixedSizeChunker;
	      }
	      let chunkValidator;
	      if (typeof options.chunkValidator === 'function') {
	        chunkValidator = options.chunkValidator;
	      } else {
	        chunkValidator = validateChunks;
	      }
	      const file = {
	        path: entry.path,
	        mtime: entry.mtime,
	        mode: entry.mode,
	        content: chunker(chunkValidator(contentAsAsyncIterable(entry.content), options), options)
	      };
	      yield () => fileBuilder(file, blockstore, options);
	    } else if (entry.path) {
	      const dir = {
	        path: entry.path,
	        mtime: entry.mtime,
	        mode: entry.mode
	      };
	      yield () => dirBuilder(dir, blockstore, options);
	    } else {
	      throw new Error('Import candidate must have content or path or both');
	    }
	  }
	}

	class Dir$1 {
	  constructor(props, options) {
	    this.options = options || {};
	    this.root = props.root;
	    this.dir = props.dir;
	    this.path = props.path;
	    this.dirty = props.dirty;
	    this.flat = props.flat;
	    this.parent = props.parent;
	    this.parentKey = props.parentKey;
	    this.unixfs = props.unixfs;
	    this.mode = props.mode;
	    this.mtime = props.mtime;
	    this.cid = undefined;
	    this.size = undefined;
	  }
	  async put(name, value) {
	  }
	  get(name) {
	    return Promise.resolve(this);
	  }
	  async *eachChildSeries() {
	  }
	  async *flush(blockstore) {
	  }
	}

	class DirFlat extends Dir$1 {
	  constructor(props, options) {
	    super(props, options);
	    this._children = {};
	  }
	  async put(name, value) {
	    this.cid = undefined;
	    this.size = undefined;
	    this._children[name] = value;
	  }
	  get(name) {
	    return Promise.resolve(this._children[name]);
	  }
	  childCount() {
	    return Object.keys(this._children).length;
	  }
	  directChildrenCount() {
	    return this.childCount();
	  }
	  onlyChild() {
	    return this._children[Object.keys(this._children)[0]];
	  }
	  async *eachChildSeries() {
	    const keys = Object.keys(this._children);
	    for (let i = 0; i < keys.length; i++) {
	      const key = keys[i];
	      yield {
	        key: key,
	        child: this._children[key]
	      };
	    }
	  }
	  async *flush(block) {
	    const children = Object.keys(this._children);
	    const links = [];
	    for (let i = 0; i < children.length; i++) {
	      let child = this._children[children[i]];
	      if (child instanceof Dir$1) {
	        for await (const entry of child.flush(block)) {
	          child = entry;
	          yield child;
	        }
	      }
	      if (child.size != null && child.cid) {
	        links.push({
	          Name: children[i],
	          Tsize: child.size,
	          Hash: child.cid
	        });
	      }
	    }
	    const unixfs = new UnixFS({
	      type: 'directory',
	      mtime: this.mtime,
	      mode: this.mode
	    });
	    const node = {
	      Data: unixfs.marshal(),
	      Links: links
	    };
	    const buffer = encode$k(prepare(node));
	    const cid = await persist$1(buffer, block, this.options);
	    const size = buffer.length + node.Links.reduce((acc, curr) => acc + (curr.Tsize == null ? 0 : curr.Tsize), 0);
	    this.cid = cid;
	    this.size = size;
	    yield {
	      cid,
	      unixfs,
	      path: this.path,
	      size
	    };
	  }
	}

	// JS treats subjects of bitwise operators as SIGNED 32 bit numbers,
	// which means the maximum amount of bits we can store inside each byte
	// is 7..
	const BITS_PER_BYTE = 7;

	var sparseArray = class SparseArray {
	  constructor () {
	    this._bitArrays = [];
	    this._data = [];
	    this._length = 0;
	    this._changedLength = false;
	    this._changedData = false;
	  }

	  set (index, value) {
	    let pos = this._internalPositionFor(index, false);
	    if (value === undefined) {
	      // unsetting
	      if (pos !== -1) {
	        // remove item from bit array and array itself
	        this._unsetInternalPos(pos);
	        this._unsetBit(index);
	        this._changedLength = true;
	        this._changedData = true;
	      }
	    } else {
	      let needsSort = false;
	      if (pos === -1) {
	        pos = this._data.length;
	        this._setBit(index);
	        this._changedData = true;
	      } else {
	        needsSort = true;
	      }
	      this._setInternalPos(pos, index, value, needsSort);
	      this._changedLength = true;
	    }
	  }

	  unset (index) {
	    this.set(index, undefined);
	  }

	  get (index) {
	    this._sortData();
	    const pos = this._internalPositionFor(index, true);
	    if (pos === -1) {
	      return undefined
	    }
	    return this._data[pos][1]
	  }

	  push (value) {
	    this.set(this.length, value);
	    return this.length
	  }

	  get length () {
	    this._sortData();
	    if (this._changedLength) {
	      const last = this._data[this._data.length - 1];
	      this._length = last ? last[0] + 1 : 0;
	      this._changedLength = false;
	    }
	    return this._length
	  }

	  forEach (iterator) {
	    let i = 0;
	    while(i < this.length) {
	      iterator(this.get(i), i, this);
	      i++;
	    }
	  }

	  map (iterator) {
	    let i = 0;
	    let mapped = new Array(this.length);
	    while(i < this.length) {
	      mapped[i] = iterator(this.get(i), i, this);
	      i++;
	    }
	    return mapped
	  }

	  reduce (reducer, initialValue) {
	    let i = 0;
	    let acc = initialValue;
	    while(i < this.length) {
	      const value = this.get(i);
	      acc = reducer(acc, value, i);
	      i++;
	    }
	    return acc
	  }

	  find (finder) {
	    let i = 0, found, last;
	    while ((i < this.length) && !found) {
	      last = this.get(i);
	      found = finder(last);
	      i++;
	    }
	    return found ? last : undefined
	  }

	  _internalPositionFor (index, noCreate) {
	    const bytePos = this._bytePosFor(index, noCreate);
	    if (bytePos >= this._bitArrays.length) {
	      return -1
	    }
	    const byte = this._bitArrays[bytePos];
	    const bitPos = index - bytePos * BITS_PER_BYTE;
	    const exists = (byte & (1 << bitPos)) > 0;
	    if (!exists) {
	      return -1
	    }
	    const previousPopCount = this._bitArrays.slice(0, bytePos).reduce(popCountReduce, 0);

	    const mask = ~(0xffffffff << (bitPos + 1));
	    const bytePopCount = popCount(byte & mask);
	    const arrayPos = previousPopCount + bytePopCount - 1;
	    return arrayPos
	  }

	  _bytePosFor (index, noCreate) {
	    const bytePos = Math.floor(index / BITS_PER_BYTE);
	    const targetLength = bytePos + 1;
	    while (!noCreate && this._bitArrays.length < targetLength) {
	      this._bitArrays.push(0);
	    }
	    return bytePos
	  }

	  _setBit (index) {
	    const bytePos = this._bytePosFor(index, false);
	    this._bitArrays[bytePos] |= (1 << (index - (bytePos * BITS_PER_BYTE)));
	  }

	  _unsetBit(index) {
	    const bytePos = this._bytePosFor(index, false);
	    this._bitArrays[bytePos] &= ~(1 << (index - (bytePos * BITS_PER_BYTE)));
	  }

	  _setInternalPos(pos, index, value, needsSort) {
	    const data =this._data;
	    const elem = [index, value];
	    if (needsSort) {
	      this._sortData();
	      data[pos] = elem;
	    } else {
	      // new element. just shove it into the array
	      // but be nice about where we shove it
	      // in order to make sorting it later easier
	      if (data.length) {
	        if (data[data.length - 1][0] >= index) {
	          data.push(elem);
	        } else if (data[0][0] <= index) {
	          data.unshift(elem);
	        } else {
	          const randomIndex = Math.round(data.length / 2);
	          this._data = data.slice(0, randomIndex).concat(elem).concat(data.slice(randomIndex));
	        }
	      } else {
	        this._data.push(elem);
	      }
	      this._changedData = true;
	      this._changedLength = true;
	    }
	  }

	  _unsetInternalPos (pos) {
	    this._data.splice(pos, 1);
	  }

	  _sortData () {
	    if (this._changedData) {
	      this._data.sort(sortInternal);
	    }

	    this._changedData = false;
	  }

	  bitField () {
	    const bytes = [];
	    let pendingBitsForResultingByte = 8;
	    let pendingBitsForNewByte = 0;
	    let resultingByte = 0;
	    let newByte;
	    const pending = this._bitArrays.slice();
	    while (pending.length || pendingBitsForNewByte) {
	      if (pendingBitsForNewByte === 0) {
	        newByte = pending.shift();
	        pendingBitsForNewByte = 7;
	      }

	      const usingBits = Math.min(pendingBitsForNewByte, pendingBitsForResultingByte);
	      const mask = ~(0b11111111 << usingBits);
	      const masked = newByte & mask;
	      resultingByte |= masked << (8 - pendingBitsForResultingByte);
	      newByte = newByte >>> usingBits;
	      pendingBitsForNewByte -= usingBits;
	      pendingBitsForResultingByte -= usingBits;

	      if (!pendingBitsForResultingByte || (!pendingBitsForNewByte && !pending.length)) {
	        bytes.push(resultingByte);
	        resultingByte = 0;
	        pendingBitsForResultingByte = 8;
	      }
	    }

	    // remove trailing zeroes
	    for(var i = bytes.length - 1; i > 0; i--) {
	      const value = bytes[i];
	      if (value === 0) {
	        bytes.pop();
	      } else {
	        break
	      }
	    }

	    return bytes
	  }

	  compactArray () {
	    this._sortData();
	    return this._data.map(valueOnly)
	  }
	};

	function popCountReduce (count, byte) {
	  return count + popCount(byte)
	}

	function popCount(_v) {
	  let v = _v;
	  v = v - ((v >> 1) & 0x55555555);                    // reuse input as temporary
	  v = (v & 0x33333333) + ((v >> 2) & 0x33333333);     // temp
	  return ((v + (v >> 4) & 0xF0F0F0F) * 0x1010101) >> 24
	}

	function sortInternal (a, b) {
	  return a[0] - b[0]
	}

	function valueOnly (elem) {
	  return elem[1]
	}

	// @ts-ignore
	const SparseArray = sparseArray;
	const { fromString: uint8ArrayFromString$8 } = require$$5$3;

	/**
	 * @typedef {import('./consumable-hash').InfiniteHash} InfiniteHash
	 * @typedef {import('../').UserBucketOptions} UserBucketOptions
	 */

	/**
	 * @template V
	 * @typedef {object} BucketChild<V>
	 * @property {string} key
	 * @property {V} value
	 * @property {InfiniteHash} hash
	 */

	/**
	 * @template B
	 *
	 * @typedef {object} SA<B>
	 * @property {number} length
	 * @property {() => B[]} compactArray
	 * @property {(i: number) => B} get
	 * @property {(i: number, value: B) => void} set
	 * @property {<A> (fn: (acc: A, curr: B, index: number) => A, initial: A) => B} reduce
	 * @property {(fn: (item: B) => boolean) => B | undefined} find
	 * @property {() => number[]} bitField
	 * @property {(i: number) => void} unset
	 */

	/**
	 * @template T
	 *
	 * @typedef {object} BucketPosition<T>
	 * @property {Bucket<T>} bucket
	 * @property {number} pos
	 * @property {InfiniteHash} hash
	 * @property {BucketChild<T>} [existingChild]
	 */

	/**
	 * @typedef {object} BucketOptions
	 * @property {number} bits
	 * @property {(value: Uint8Array | InfiniteHash) => InfiniteHash} hash
	 */

	/**
	 * @template T
	 */
	class Bucket$1 {
	  /**
	   * @param {BucketOptions} options
	   * @param {Bucket<T>} [parent]
	   * @param {number} [posAtParent=0]
	   */
	  constructor (options, parent, posAtParent = 0) {
	    this._options = options;
	    this._popCount = 0;
	    this._parent = parent;
	    this._posAtParent = posAtParent;

	    /** @type {SA<Bucket<T> | BucketChild<T>>} */
	    this._children = new SparseArray();

	    /** @type {string | null} */
	    this.key = null;
	  }

	  /**
	   * @param {string} key
	   * @param {T} value
	   */
	  async put (key, value) {
	    const place = await this._findNewBucketAndPos(key);

	    await place.bucket._putAt(place, key, value);
	  }

	  /**
	   * @param {string} key
	   */
	  async get (key) {
	    const child = await this._findChild(key);

	    if (child) {
	      return child.value
	    }
	  }

	  /**
	   * @param {string} key
	   */
	  async del (key) {
	    const place = await this._findPlace(key);
	    const child = place.bucket._at(place.pos);

	    if (child && child.key === key) {
	      place.bucket._delAt(place.pos);
	    }
	  }

	  /**
	   * @returns {number}
	   */
	  leafCount () {
	    const children = this._children.compactArray();

	    return children.reduce((acc, child) => {
	      if (child instanceof Bucket$1) {
	        return acc + child.leafCount()
	      }

	      return acc + 1
	    }, 0)
	  }

	  childrenCount () {
	    return this._children.length
	  }

	  onlyChild () {
	    return this._children.get(0)
	  }

	  /**
	   * @returns {Iterable<BucketChild<T>>}
	   */
	  * eachLeafSeries () {
	    const children = this._children.compactArray();

	    for (const child of children) {
	      if (child instanceof Bucket$1) {
	        yield * child.eachLeafSeries();
	      } else {
	        yield child;
	      }
	    }

	    // this is necessary because tsc requires a @return annotation as it
	    // can't derive a return type due to the recursion, and eslint requires
	    // a return statement when there is a @return annotation
	    return []
	  }

	  /**
	   * @param {(value: BucketChild<T>, index: number) => T} map
	   * @param {(reduced: any) => any} reduce
	   */
	  serialize (map, reduce) {
	    /** @type {T[]} */
	    const acc = [];
	    // serialize to a custom non-sparse representation
	    return reduce(this._children.reduce((acc, child, index) => {
	      if (child) {
	        if (child instanceof Bucket$1) {
	          acc.push(child.serialize(map, reduce));
	        } else {
	          acc.push(map(child, index));
	        }
	      }
	      return acc
	    }, acc))
	  }

	  /**
	   * @param {(value: BucketChild<T>) => Promise<T[]>} asyncMap
	   * @param {(reduced: any) => Promise<any>} asyncReduce
	   */
	  asyncTransform (asyncMap, asyncReduce) {
	    return asyncTransformBucket(this, asyncMap, asyncReduce)
	  }

	  toJSON () {
	    return this.serialize(mapNode, reduceNodes)
	  }

	  prettyPrint () {
	    return JSON.stringify(this.toJSON(), null, '  ')
	  }

	  tableSize () {
	    return Math.pow(2, this._options.bits)
	  }

	  /**
	   * @param {string} key
	   * @returns {Promise<BucketChild<T> | undefined>}
	   */
	  async _findChild (key) {
	    const result = await this._findPlace(key);
	    const child = result.bucket._at(result.pos);

	    if (child instanceof Bucket$1) {
	      // should not be possible, this._findPlace should always
	      // return a location for a child, not a bucket
	      return undefined
	    }

	    if (child && child.key === key) {
	      return child
	    }
	  }

	  /**
	   * @param {string | InfiniteHash} key
	   * @returns {Promise<BucketPosition<T>>}
	   */
	  async _findPlace (key) {
	    const hashValue = this._options.hash(typeof key === 'string' ? uint8ArrayFromString$8(key) : key);
	    const index = await hashValue.take(this._options.bits);

	    const child = this._children.get(index);

	    if (child instanceof Bucket$1) {
	      return child._findPlace(hashValue)
	    }

	    return {
	      bucket: this,
	      pos: index,
	      hash: hashValue,
	      existingChild: child
	    }
	  }

	  /**
	   * @param {string | InfiniteHash} key
	   * @returns {Promise<BucketPosition<T>>}
	   */
	  async _findNewBucketAndPos (key) {
	    const place = await this._findPlace(key);

	    if (place.existingChild && place.existingChild.key !== key) {
	      // conflict
	      const bucket = new Bucket$1(this._options, place.bucket, place.pos);
	      place.bucket._putObjectAt(place.pos, bucket);

	      // put the previous value
	      const newPlace = await bucket._findPlace(place.existingChild.hash);
	      newPlace.bucket._putAt(newPlace, place.existingChild.key, place.existingChild.value);

	      return bucket._findNewBucketAndPos(place.hash)
	    }

	    // no conflict, we found the place
	    return place
	  }

	  /**
	   * @param {BucketPosition<T>} place
	   * @param {string} key
	   * @param {T} value
	   */
	  _putAt (place, key, value) {
	    this._putObjectAt(place.pos, {
	      key: key,
	      value: value,
	      hash: place.hash
	    });
	  }

	  /**
	   * @param {number} pos
	   * @param {Bucket<T> | BucketChild<T>} object
	   */
	  _putObjectAt (pos, object) {
	    if (!this._children.get(pos)) {
	      this._popCount++;
	    }
	    this._children.set(pos, object);
	  }

	  /**
	   * @param {number} pos
	   */
	  _delAt (pos) {
	    if (pos === -1) {
	      throw new Error('Invalid position')
	    }

	    if (this._children.get(pos)) {
	      this._popCount--;
	    }
	    this._children.unset(pos);
	    this._level();
	  }

	  _level () {
	    if (this._parent && this._popCount <= 1) {
	      if (this._popCount === 1) {
	        // remove myself from parent, replacing me with my only child
	        const onlyChild = this._children.find(exists);

	        if (onlyChild && !(onlyChild instanceof Bucket$1)) {
	          const hash = onlyChild.hash;
	          hash.untake(this._options.bits);
	          const place = {
	            pos: this._posAtParent,
	            hash: hash,
	            bucket: this._parent
	          };
	          this._parent._putAt(place, onlyChild.key, onlyChild.value);
	        }
	      } else {
	        this._parent._delAt(this._posAtParent);
	      }
	    }
	  }

	  /**
	   * @param {number} index
	   * @returns {BucketChild<T> | Bucket<T> | undefined}
	   */
	  _at (index) {
	    return this._children.get(index)
	  }
	}

	/**
	 * @param {any} o
	 */
	function exists (o) {
	  return Boolean(o)
	}

	/**
	 *
	 * @param {*} node
	 * @param {number} index
	 */
	function mapNode (node, index) {
	  return node.key
	}

	/**
	 * @param {*} nodes
	 */
	function reduceNodes (nodes) {
	  return nodes
	}

	/**
	 * @template T
	 *
	 * @param {Bucket<T>} bucket
	 * @param {(value: BucketChild<T>) => Promise<T[]>} asyncMap
	 * @param {(reduced: any) => Promise<any>} asyncReduce
	 */
	async function asyncTransformBucket (bucket, asyncMap, asyncReduce) {
	  const output = [];

	  for (const child of bucket._children.compactArray()) {
	    if (child instanceof Bucket$1) {
	      await asyncTransformBucket(child, asyncMap, asyncReduce);
	    } else {
	      const mappedChildren = await asyncMap(child);

	      output.push({
	        bitField: bucket._children.bitField(),
	        children: mappedChildren
	      });
	    }
	  }

	  return asyncReduce(output)
	}

	var bucket = Bucket$1;

	var consumableHash = {exports: {}};

	const START_MASKS = [
	  0b11111111,
	  0b11111110,
	  0b11111100,
	  0b11111000,
	  0b11110000,
	  0b11100000,
	  0b11000000,
	  0b10000000
	];

	const STOP_MASKS = [
	  0b00000001,
	  0b00000011,
	  0b00000111,
	  0b00001111,
	  0b00011111,
	  0b00111111,
	  0b01111111,
	  0b11111111
	];

	var consumableBuffer = class ConsumableBuffer {
	  /**
	   * @param {Uint8Array} value
	   */
	  constructor (value) {
	    this._value = value;
	    this._currentBytePos = value.length - 1;
	    this._currentBitPos = 7;
	  }

	  availableBits () {
	    return this._currentBitPos + 1 + this._currentBytePos * 8
	  }

	  totalBits () {
	    return this._value.length * 8
	  }

	  /**
	   * @param {number} bits
	   */
	  take (bits) {
	    let pendingBits = bits;
	    let result = 0;
	    while (pendingBits && this._haveBits()) {
	      const byte = this._value[this._currentBytePos];
	      const availableBits = this._currentBitPos + 1;
	      const taking = Math.min(availableBits, pendingBits);
	      const value = byteBitsToInt(byte, availableBits - taking, taking);
	      result = (result << taking) + value;

	      pendingBits -= taking;

	      this._currentBitPos -= taking;
	      if (this._currentBitPos < 0) {
	        this._currentBitPos = 7;
	        this._currentBytePos--;
	      }
	    }

	    return result
	  }

	  /**
	   * @param {number} bits
	   */
	  untake (bits) {
	    this._currentBitPos += bits;
	    while (this._currentBitPos > 7) {
	      this._currentBitPos -= 8;
	      this._currentBytePos += 1;
	    }
	  }

	  _haveBits () {
	    return this._currentBytePos >= 0
	  }
	};

	/**
	 * @param {number} byte
	 * @param {number} start
	 * @param {number} length
	 */
	function byteBitsToInt (byte, start, length) {
	  const mask = maskFor(start, length);
	  return (byte & mask) >>> start
	}

	/**
	 * @param {number} start
	 * @param {number} length
	 */
	function maskFor (start, length) {
	  return START_MASKS[start] & STOP_MASKS[Math.min(length + start - 1, 7)]
	}

	const ConsumableBuffer = consumableBuffer;
	const { concat: uint8ArrayConcat$3 } = require$$9;

	/**
	 * @param {(value: Uint8Array) => Promise<Uint8Array>} hashFn
	 */
	function wrapHash$1 (hashFn) {
	  /**
	   * @param {InfiniteHash | Uint8Array} value
	   */
	  function hashing (value) {
	    if (value instanceof InfiniteHash) {
	      // already a hash. return it
	      return value
	    } else {
	      return new InfiniteHash(value, hashFn)
	    }
	  }

	  return hashing
	}

	class InfiniteHash {
	  /**
	   *
	   * @param {Uint8Array} value
	   * @param {(value: Uint8Array) => Promise<Uint8Array>} hashFn
	   */
	  constructor (value, hashFn) {
	    if (!(value instanceof Uint8Array)) {
	      throw new Error('can only hash Uint8Arrays')
	    }

	    this._value = value;
	    this._hashFn = hashFn;
	    this._depth = -1;
	    this._availableBits = 0;
	    this._currentBufferIndex = 0;

	    /** @type {ConsumableBuffer[]} */
	    this._buffers = [];
	  }

	  /**
	   * @param {number} bits
	   */
	  async take (bits) {
	    let pendingBits = bits;

	    while (this._availableBits < pendingBits) {
	      await this._produceMoreBits();
	    }

	    let result = 0;

	    while (pendingBits > 0) {
	      const hash = this._buffers[this._currentBufferIndex];
	      const available = Math.min(hash.availableBits(), pendingBits);
	      const took = hash.take(available);
	      result = (result << available) + took;
	      pendingBits -= available;
	      this._availableBits -= available;

	      if (hash.availableBits() === 0) {
	        this._currentBufferIndex++;
	      }
	    }

	    return result
	  }

	  /**
	   * @param {number} bits
	   */
	  untake (bits) {
	    let pendingBits = bits;

	    while (pendingBits > 0) {
	      const hash = this._buffers[this._currentBufferIndex];
	      const availableForUntake = Math.min(hash.totalBits() - hash.availableBits(), pendingBits);
	      hash.untake(availableForUntake);
	      pendingBits -= availableForUntake;
	      this._availableBits += availableForUntake;

	      if (this._currentBufferIndex > 0 && hash.totalBits() === hash.availableBits()) {
	        this._depth--;
	        this._currentBufferIndex--;
	      }
	    }
	  }

	  async _produceMoreBits () {
	    this._depth++;

	    const value = this._depth ? uint8ArrayConcat$3([this._value, Uint8Array.from([this._depth])]) : this._value;
	    const hashValue = await this._hashFn(value);
	    const buffer = new ConsumableBuffer(hashValue);

	    this._buffers.push(buffer);
	    this._availableBits += buffer.availableBits();
	  }
	}

	consumableHash.exports = wrapHash$1;
	consumableHash.exports.InfiniteHash = InfiniteHash;

	const Bucket = bucket;
	const wrapHash = consumableHash.exports;

	/**
	 * @typedef {object} UserBucketOptions
	 * @property {(value: Uint8Array) => Promise<Uint8Array>} hashFn
	 * @property {number} [bits=8]
	 */

	/**
	 * @param {UserBucketOptions} options
	 */
	function createHAMT (options) {
	  if (!options || !options.hashFn) {
	    throw new Error('please define an options.hashFn')
	  }

	  const bucketOptions = {
	    bits: options.bits || 8,
	    hash: wrapHash(options.hashFn)
	  };

	  return new Bucket(bucketOptions)
	}

	var src$j = {
	  createHAMT,
	  Bucket
	};

	class DirSharded$1 extends Dir$1 {
	  constructor(props, options) {
	    super(props, options);
	    this._bucket = src$j.createHAMT({
	      hashFn: options.hamtHashFn,
	      bits: options.hamtBucketBits
	    });
	  }
	  async put(name, value) {
	    await this._bucket.put(name, value);
	  }
	  get(name) {
	    return this._bucket.get(name);
	  }
	  childCount() {
	    return this._bucket.leafCount();
	  }
	  directChildrenCount() {
	    return this._bucket.childrenCount();
	  }
	  onlyChild() {
	    return this._bucket.onlyChild();
	  }
	  async *eachChildSeries() {
	    for await (const {key, value} of this._bucket.eachLeafSeries()) {
	      yield {
	        key,
	        child: value
	      };
	    }
	  }
	  async *flush(blockstore) {
	    for await (const entry of flush$1(this._bucket, blockstore, this, this.options)) {
	      yield {
	        ...entry,
	        path: this.path
	      };
	    }
	  }
	}
	async function* flush$1(bucket, blockstore, shardRoot, options) {
	  const children = bucket._children;
	  const links = [];
	  let childrenSize = 0;
	  for (let i = 0; i < children.length; i++) {
	    const child = children.get(i);
	    if (!child) {
	      continue;
	    }
	    const labelPrefix = i.toString(16).toUpperCase().padStart(2, '0');
	    if (child instanceof src$j.Bucket) {
	      let shard;
	      for await (const subShard of await flush$1(child, blockstore, null, options)) {
	        shard = subShard;
	      }
	      if (!shard) {
	        throw new Error('Could not flush sharded directory, no subshard found');
	      }
	      links.push({
	        Name: labelPrefix,
	        Tsize: shard.size,
	        Hash: shard.cid
	      });
	      childrenSize += shard.size;
	    } else if (typeof child.value.flush === 'function') {
	      const dir = child.value;
	      let flushedDir;
	      for await (const entry of dir.flush(blockstore)) {
	        flushedDir = entry;
	        yield flushedDir;
	      }
	      const label = labelPrefix + child.key;
	      links.push({
	        Name: label,
	        Tsize: flushedDir.size,
	        Hash: flushedDir.cid
	      });
	      childrenSize += flushedDir.size;
	    } else {
	      const value = child.value;
	      if (!value.cid) {
	        continue;
	      }
	      const label = labelPrefix + child.key;
	      const size = value.size;
	      links.push({
	        Name: label,
	        Tsize: size,
	        Hash: value.cid
	      });
	      childrenSize += size;
	    }
	  }
	  const data = Uint8Array.from(children.bitField().reverse());
	  const dir = new UnixFS({
	    type: 'hamt-sharded-directory',
	    data,
	    fanout: bucket.tableSize(),
	    hashType: options.hamtHashCode,
	    mtime: shardRoot && shardRoot.mtime,
	    mode: shardRoot && shardRoot.mode
	  });
	  const node = {
	    Data: dir.marshal(),
	    Links: links
	  };
	  const buffer = encode$k(prepare(node));
	  const cid = await persist$1(buffer, blockstore, options);
	  const size = buffer.length + childrenSize;
	  yield {
	    cid,
	    unixfs: dir,
	    size
	  };
	}

	async function flatToShard(child, dir, threshold, options) {
	  let newDir = dir;
	  if (dir instanceof DirFlat && dir.directChildrenCount() >= threshold) {
	    newDir = await convertToShard(dir, options);
	  }
	  const parent = newDir.parent;
	  if (parent) {
	    if (newDir !== dir) {
	      if (child) {
	        child.parent = newDir;
	      }
	      if (!newDir.parentKey) {
	        throw new Error('No parent key found');
	      }
	      await parent.put(newDir.parentKey, newDir);
	    }
	    return flatToShard(newDir, parent, threshold, options);
	  }
	  return newDir;
	}
	async function convertToShard(oldDir, options) {
	  const newDir = new DirSharded$1({
	    root: oldDir.root,
	    dir: true,
	    parent: oldDir.parent,
	    parentKey: oldDir.parentKey,
	    path: oldDir.path,
	    dirty: oldDir.dirty,
	    flat: false,
	    mtime: oldDir.mtime,
	    mode: oldDir.mode
	  }, options);
	  for await (const {key, child} of oldDir.eachChildSeries()) {
	    await newDir.put(key, child);
	  }
	  return newDir;
	}

	const toPathComponents$2 = (path = '') => {
	  return (path.trim().match(/([^\\^/]|\\\/)+/g) || []).filter(Boolean);
	};

	async function addToTree(elem, tree, options) {
	  const pathElems = toPathComponents$2(elem.path || '');
	  const lastIndex = pathElems.length - 1;
	  let parent = tree;
	  let currentPath = '';
	  for (let i = 0; i < pathElems.length; i++) {
	    const pathElem = pathElems[i];
	    currentPath += `${ currentPath ? '/' : '' }${ pathElem }`;
	    const last = i === lastIndex;
	    parent.dirty = true;
	    parent.cid = undefined;
	    parent.size = undefined;
	    if (last) {
	      await parent.put(pathElem, elem);
	      tree = await flatToShard(null, parent, options.shardSplitThreshold, options);
	    } else {
	      let dir = await parent.get(pathElem);
	      if (!dir || !(dir instanceof Dir$1)) {
	        dir = new DirFlat({
	          root: false,
	          dir: true,
	          parent: parent,
	          parentKey: pathElem,
	          path: currentPath,
	          dirty: true,
	          flat: true,
	          mtime: dir && dir.unixfs && dir.unixfs.mtime,
	          mode: dir && dir.unixfs && dir.unixfs.mode
	        }, options);
	      }
	      await parent.put(pathElem, dir);
	      parent = dir;
	    }
	  }
	  return tree;
	}
	async function* flushAndYield(tree, blockstore) {
	  if (!(tree instanceof Dir$1)) {
	    if (tree && tree.unixfs && tree.unixfs.isDirectory()) {
	      yield tree;
	    }
	    return;
	  }
	  yield* tree.flush(blockstore);
	}
	async function* treeBuilder(source, block, options) {
	  let tree = new DirFlat({
	    root: true,
	    dir: true,
	    path: '',
	    dirty: true,
	    flat: true
	  }, options);
	  for await (const entry of source) {
	    if (!entry) {
	      continue;
	    }
	    tree = await addToTree(entry, tree, options);
	    if (!entry.unixfs || !entry.unixfs.isDirectory()) {
	      yield entry;
	    }
	  }
	  if (options.wrapWithDirectory) {
	    yield* flushAndYield(tree, block);
	  } else {
	    for await (const unwrapped of tree.eachChildSeries()) {
	      if (!unwrapped) {
	        continue;
	      }
	      yield* flushAndYield(unwrapped.child, block);
	    }
	  }
	}

	async function* importer(source, blockstore, options = {}) {
	  const opts = defaultOptions$m(options);
	  let dagBuilder$1;
	  if (typeof options.dagBuilder === 'function') {
	    dagBuilder$1 = options.dagBuilder;
	  } else {
	    dagBuilder$1 = dagBuilder;
	  }
	  let treeBuilder$1;
	  if (typeof options.treeBuilder === 'function') {
	    treeBuilder$1 = options.treeBuilder;
	  } else {
	    treeBuilder$1 = treeBuilder;
	  }
	  let candidates;
	  if (Symbol.asyncIterator in source || Symbol.iterator in source) {
	    candidates = source;
	  } else {
	    candidates = [source];
	  }
	  for await (const entry of treeBuilder$1(itParallelBatch(dagBuilder$1(candidates, blockstore, opts), opts.fileImportConcurrency), blockstore, opts)) {
	    yield {
	      cid: entry.cid,
	      path: entry.path,
	      unixfs: entry.unixfs,
	      size: entry.size
	    };
	  }
	}

	async function* normaliseCandidateMultiple(input, normaliseContent) {
	  if (typeof input === 'string' || input instanceof String || isBytes(input) || isBlob(input) || input._readableState) {
	    throw errCode$q(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');
	  }
	  if (isReadableStream(input)) {
	    input = browserReadablestreamToIt(input);
	  }
	  if (Symbol.iterator in input || Symbol.asyncIterator in input) {
	    const peekable = itPeekable(input);
	    const {value, done} = await peekable.peek();
	    if (done) {
	      yield* [];
	      return;
	    }
	    peekable.push(value);
	    if (Number.isInteger(value)) {
	      throw errCode$q(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');
	    }
	    if (value._readableState) {
	      yield* itMap(peekable, value => toFileObject({ content: value }, normaliseContent));
	      return;
	    }
	    if (isBytes(value)) {
	      yield toFileObject({ content: peekable }, normaliseContent);
	      return;
	    }
	    if (isFileObject(value) || value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value) || isBlob(value)) {
	      yield* itMap(peekable, value => toFileObject(value, normaliseContent));
	      return;
	    }
	  }
	  if (isFileObject(input)) {
	    throw errCode$q(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');
	  }
	  throw errCode$q(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');
	}
	async function toFileObject(input, normaliseContent) {
	  const {path, mode, mtime, content} = input;
	  const file = {
	    path: path || '',
	    mode: parseMode(mode),
	    mtime: parseMtime$1(mtime)
	  };
	  if (content) {
	    file.content = await normaliseContent(content);
	  } else if (!path) {
	    file.content = await normaliseContent(input);
	  }
	  return file;
	}

	function normaliseInput$1(input) {
	  return normaliseCandidateMultiple(input, normaliseContent$1);
	}

	const parseChunkerString = chunker => {
	  if (!chunker) {
	    return { chunker: 'fixed' };
	  } else if (chunker.startsWith('size-')) {
	    const sizeStr = chunker.split('-')[1];
	    const size = parseInt(sizeStr);
	    if (isNaN(size)) {
	      throw new Error('Chunker parameter size must be an integer');
	    }
	    return {
	      chunker: 'fixed',
	      maxChunkSize: size
	    };
	  } else if (chunker.startsWith('rabin')) {
	    return {
	      chunker: 'rabin',
	      ...parseRabinString(chunker)
	    };
	  } else {
	    throw new Error(`Unrecognized chunker option: ${ chunker }`);
	  }
	};
	const parseRabinString = chunker => {
	  const options = {};
	  const parts = chunker.split('-');
	  switch (parts.length) {
	  case 1:
	    options.avgChunkSize = 262144;
	    break;
	  case 2:
	    options.avgChunkSize = parseChunkSize(parts[1], 'avg');
	    break;
	  case 4:
	    options.minChunkSize = parseChunkSize(parts[1], 'min');
	    options.avgChunkSize = parseChunkSize(parts[2], 'avg');
	    options.maxChunkSize = parseChunkSize(parts[3], 'max');
	    break;
	  default:
	    throw new Error('Incorrect chunker format (expected "rabin" "rabin-[avg]" or "rabin-[min]-[avg]-[max]"');
	  }
	  return options;
	};
	const parseChunkSize = (str, name) => {
	  const size = parseInt(str);
	  if (isNaN(size)) {
	    throw new Error(`Chunker parameter ${ name } must be an integer`);
	  }
	  return size;
	};

	const mergeOptions$i = mergeOptions$k.bind({ ignoreUndefined: true });
	function createAddAll$2({repo, preload, hashers, options}) {
	  const isShardingEnabled = options && options.sharding;
	  async function* addAll(source, options = {}) {
	    const opts = mergeOptions$i({
	      shardSplitThreshold: isShardingEnabled ? 1000 : Infinity,
	      strategy: 'balanced'
	    }, options, { ...parseChunkerString(options.chunker) });
	    if (opts.hashAlg && opts.hashAlg !== 'sha2-256' && opts.cidVersion !== 1) {
	      opts.cidVersion = 1;
	    }
	    if (opts.trickle) {
	      opts.strategy = 'trickle';
	    }
	    if (opts.strategy === 'trickle') {
	      opts.leafType = 'raw';
	      opts.reduceSingleLeafToSelf = false;
	    }
	    if (opts.cidVersion > 0 && opts.rawLeaves === undefined) {
	      opts.rawLeaves = true;
	    }
	    if (opts.hashAlg !== undefined && opts.rawLeaves === undefined) {
	      opts.rawLeaves = true;
	    }
	    delete opts.trickle;
	    const totals = {};
	    if (opts.progress) {
	      const prog = opts.progress;
	      opts.progress = (bytes, path) => {
	        if (!totals[path]) {
	          totals[path] = 0;
	        }
	        totals[path] += bytes;
	        prog(totals[path], path);
	      };
	    }
	    let hasher;
	    if (opts.hashAlg != null) {
	      hasher = await hashers.getHasher(opts.hashAlg);
	    }
	    const iterator = pipe_1(normaliseInput$1(source), source => importer(source, repo.blocks, {
	      ...opts,
	      hasher,
	      pin: false
	    }), transformFile(opts), preloadFile(preload, opts), pinFile(repo, opts));
	    const releaseLock = await repo.gcLock.readLock();
	    try {
	      for await (const added of iterator) {
	        delete totals[added.path];
	        yield added;
	      }
	    } finally {
	      releaseLock();
	    }
	  }
	  return withTimeoutOption(addAll);
	}
	function transformFile(opts) {
	  async function* transformFile(source) {
	    for await (const file of source) {
	      let cid = file.cid;
	      if (opts.cidVersion === 1) {
	        cid = cid.toV1();
	      }
	      let path = file.path ? file.path : cid.toString();
	      if (opts.wrapWithDirectory && !file.path) {
	        path = '';
	      }
	      yield {
	        path,
	        cid: cid,
	        size: file.size,
	        mode: file.unixfs && file.unixfs.mode,
	        mtime: file.unixfs && file.unixfs.mtime
	      };
	    }
	  }
	  return transformFile;
	}
	function preloadFile(preload, opts) {
	  async function* maybePreloadFile(source) {
	    for await (const file of source) {
	      const isRootFile = !file.path || opts.wrapWithDirectory ? file.path === '' : !file.path.includes('/');
	      const shouldPreload = isRootFile && !opts.onlyHash && opts.preload !== false;
	      if (shouldPreload) {
	        preload(file.cid);
	      }
	      yield file;
	    }
	  }
	  return maybePreloadFile;
	}
	function pinFile(repo, opts) {
	  async function* maybePinFile(source) {
	    for await (const file of source) {
	      const isRootDir = !(file.path && file.path.includes('/'));
	      const shouldPin = (opts.pin == null ? true : opts.pin) && isRootDir && !opts.onlyHash;
	      if (shouldPin) {
	        await repo.pins.pinRecursively(file.cid);
	      }
	      yield file;
	    }
	  }
	  return maybePinFile;
	}

	const CID_CBOR_TAG = 42;
	function cidDecoder(bytes) {
	  if (bytes[0] !== 0) {
	    throw new Error('Invalid CID for CBOR tag 42; expected leading 0x00');
	  }
	  return CID$6.decode(bytes.subarray(1));
	}
	const decodeOptions = {
	  allowIndefinite: false,
	  allowUndefined: false,
	  allowNaN: false,
	  allowInfinity: false,
	  allowBigInt: true,
	  strict: true,
	  useMaps: false,
	  tags: []
	};
	decodeOptions.tags[CID_CBOR_TAG] = cidDecoder;
	const code = 113;
	const decode$6 = data => decode$h(data, decodeOptions);

	const hashFn = async function (buf) {
	  return (await murmur3128.encode(buf)).slice(0, 8).reverse();
	};
	const addLinksToHamtBucket$1 = (links, bucket, rootBucket) => {
	  return Promise.all(links.map(link => {
	    if (link.Name == null) {
	      throw new Error('Unexpected Link without a Name');
	    }
	    if (link.Name.length === 2) {
	      const pos = parseInt(link.Name, 16);
	      return bucket._putObjectAt(pos, new src$j.Bucket({
	        hash: rootBucket._options.hash,
	        bits: rootBucket._options.bits
	      }, bucket, pos));
	    }
	    return rootBucket.put(link.Name.substring(2), true);
	  }));
	};
	const toPrefix$1 = position => {
	  return position.toString(16).toUpperCase().padStart(2, '0').substring(0, 2);
	};
	const toBucketPath$1 = position => {
	  let bucket = position.bucket;
	  const path = [];
	  while (bucket._parent) {
	    path.push(bucket);
	    bucket = bucket._parent;
	  }
	  path.push(bucket);
	  return path.reverse();
	};
	const findShardCid = async (node, name, blockstore, context, options) => {
	  if (!context) {
	    const rootBucket = src$j.createHAMT({ hashFn });
	    context = {
	      rootBucket,
	      hamtDepth: 1,
	      lastBucket: rootBucket
	    };
	  }
	  await addLinksToHamtBucket$1(node.Links, context.lastBucket, context.rootBucket);
	  const position = await context.rootBucket._findNewBucketAndPos(name);
	  let prefix = toPrefix$1(position.pos);
	  const bucketPath = toBucketPath$1(position);
	  if (bucketPath.length > context.hamtDepth) {
	    context.lastBucket = bucketPath[context.hamtDepth];
	    prefix = toPrefix$1(context.lastBucket._posAtParent);
	  }
	  const link = node.Links.find(link => {
	    if (link.Name == null) {
	      return false;
	    }
	    const entryPrefix = link.Name.substring(0, 2);
	    const entryName = link.Name.substring(2);
	    if (entryPrefix !== prefix) {
	      return false;
	    }
	    if (entryName && entryName !== name) {
	      return false;
	    }
	    return true;
	  });
	  if (!link) {
	    return null;
	  }
	  if (link.Name != null && link.Name.substring(2) === name) {
	    return link.Hash;
	  }
	  context.hamtDepth++;
	  const block = await blockstore.get(link.Hash, options);
	  node = decode$i(block);
	  return findShardCid(node, name, blockstore, context, options);
	};

	function extractDataFromBlock(block, blockStart, requestedStart, requestedEnd) {
	  const blockLength = block.length;
	  const blockEnd = blockStart + blockLength;
	  if (requestedStart >= blockEnd || requestedEnd < blockStart) {
	    return new Uint8Array(0);
	  }
	  if (requestedEnd >= blockStart && requestedEnd < blockEnd) {
	    block = block.slice(0, requestedEnd - blockStart);
	  }
	  if (requestedStart >= blockStart && requestedStart < blockEnd) {
	    block = block.slice(requestedStart - blockStart);
	  }
	  return block;
	}

	const validateOffsetAndLength = (size, offset, length) => {
	  if (!offset) {
	    offset = 0;
	  }
	  if (offset < 0) {
	    throw errCode$q(new Error('Offset must be greater than or equal to 0'), 'ERR_INVALID_PARAMS');
	  }
	  if (offset > size) {
	    throw errCode$q(new Error('Offset must be less than the file size'), 'ERR_INVALID_PARAMS');
	  }
	  if (!length && length !== 0) {
	    length = size - offset;
	  }
	  if (length < 0) {
	    throw errCode$q(new Error('Length must be greater than or equal to 0'), 'ERR_INVALID_PARAMS');
	  }
	  if (offset + length > size) {
	    length = size - offset;
	  }
	  return {
	    offset,
	    length
	  };
	};

	async function* emitBytes(blockstore, node, start, end, streamPosition = 0, options) {
	  if (node instanceof Uint8Array) {
	    const buf = extractDataFromBlock(node, streamPosition, start, end);
	    if (buf.length) {
	      yield buf;
	    }
	    streamPosition += buf.length;
	    return streamPosition;
	  }
	  if (node.Data == null) {
	    throw errCode$q(new Error('no data in PBNode'), 'ERR_NOT_UNIXFS');
	  }
	  let file;
	  try {
	    file = UnixFS.unmarshal(node.Data);
	  } catch (err) {
	    throw errCode$q(err, 'ERR_NOT_UNIXFS');
	  }
	  if (file.data && file.data.length) {
	    const buf = extractDataFromBlock(file.data, streamPosition, start, end);
	    if (buf.length) {
	      yield buf;
	    }
	    streamPosition += file.data.length;
	  }
	  let childStart = streamPosition;
	  for (let i = 0; i < node.Links.length; i++) {
	    const childLink = node.Links[i];
	    const childEnd = streamPosition + file.blockSizes[i];
	    if (start >= childStart && start < childEnd || end > childStart && end <= childEnd || start < childStart && end > childEnd) {
	      const block = await blockstore.get(childLink.Hash, { signal: options.signal });
	      let child;
	      switch (childLink.Hash.code) {
	      case code$8:
	        child = await decode$i(block);
	        break;
	      case code$2:
	        child = block;
	        break;
	      case code:
	        child = await decode$6(block);
	        break;
	      default:
	        throw Error(`Unsupported codec: ${ childLink.Hash.code }`);
	      }
	      for await (const buf of emitBytes(blockstore, child, start, end, streamPosition, options)) {
	        streamPosition += buf.length;
	        yield buf;
	      }
	    }
	    streamPosition = childEnd;
	    childStart = childEnd + 1;
	  }
	}
	const fileContent = (cid, node, unixfs, path, resolve, depth, blockstore) => {
	  function yieldFileContent(options = {}) {
	    const fileSize = unixfs.fileSize();
	    if (fileSize === undefined) {
	      throw new Error('File was a directory');
	    }
	    const {offset, length} = validateOffsetAndLength(fileSize, options.offset, options.length);
	    const start = offset;
	    const end = offset + length;
	    return emitBytes(blockstore, node, start, end, 0, options);
	  }
	  return yieldFileContent;
	};

	const directoryContent = (cid, node, unixfs, path, resolve, depth, blockstore) => {
	  async function* yieldDirectoryContent(options = {}) {
	    const offset = options.offset || 0;
	    const length = options.length || node.Links.length;
	    const links = node.Links.slice(offset, length);
	    for (const link of links) {
	      const result = await resolve(link.Hash, link.Name || '', `${ path }/${ link.Name || '' }`, [], depth + 1, blockstore, options);
	      if (result.entry) {
	        yield result.entry;
	      }
	    }
	  }
	  return yieldDirectoryContent;
	};

	const hamtShardedDirectoryContent = (cid, node, unixfs, path, resolve, depth, blockstore) => {
	  function yieldHamtDirectoryContent(options = {}) {
	    return listDirectory(node, path, resolve, depth, blockstore, options);
	  }
	  return yieldHamtDirectoryContent;
	};
	async function* listDirectory(node, path, resolve, depth, blockstore, options) {
	  const links = node.Links;
	  for (const link of links) {
	    const name = link.Name != null ? link.Name.substring(2) : null;
	    if (name) {
	      const result = await resolve(link.Hash, name, `${ path }/${ name }`, [], depth + 1, blockstore, options);
	      yield result.entry;
	    } else {
	      const block = await blockstore.get(link.Hash);
	      node = decode$i(block);
	      for await (const file of listDirectory(node, path, resolve, depth, blockstore, options)) {
	        yield file;
	      }
	    }
	  }
	}

	const findLinkCid = (node, name) => {
	  const link = node.Links.find(link => link.Name === name);
	  return link && link.Hash;
	};
	const contentExporters = {
	  raw: fileContent,
	  file: fileContent,
	  directory: directoryContent,
	  'hamt-sharded-directory': hamtShardedDirectoryContent,
	  metadata: (cid, node, unixfs, path, resolve, depth, blockstore) => {
	    return () => [];
	  },
	  symlink: (cid, node, unixfs, path, resolve, depth, blockstore) => {
	    return () => [];
	  }
	};
	const unixFsResolver = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {
	  const block = await blockstore.get(cid, options);
	  const node = decode$i(block);
	  let unixfs;
	  let next;
	  if (!name) {
	    name = cid.toString();
	  }
	  if (node.Data == null) {
	    throw errCode$q(new Error('no data in PBNode'), 'ERR_NOT_UNIXFS');
	  }
	  try {
	    unixfs = UnixFS.unmarshal(node.Data);
	  } catch (err) {
	    throw errCode$q(err, 'ERR_NOT_UNIXFS');
	  }
	  if (!path) {
	    path = name;
	  }
	  if (toResolve.length) {
	    let linkCid;
	    if (unixfs && unixfs.type === 'hamt-sharded-directory') {
	      linkCid = await findShardCid(node, toResolve[0], blockstore);
	    } else {
	      linkCid = findLinkCid(node, toResolve[0]);
	    }
	    if (!linkCid) {
	      throw errCode$q(new Error('file does not exist'), 'ERR_NOT_FOUND');
	    }
	    const nextName = toResolve.shift();
	    const nextPath = `${ path }/${ nextName }`;
	    next = {
	      cid: linkCid,
	      toResolve,
	      name: nextName || '',
	      path: nextPath
	    };
	  }
	  return {
	    entry: {
	      type: unixfs.isDirectory() ? 'directory' : 'file',
	      name,
	      path,
	      cid,
	      content: contentExporters[unixfs.type](cid, node, unixfs, path, resolve, depth, blockstore),
	      unixfs,
	      depth,
	      node,
	      size: unixfs.fileSize()
	    },
	    next
	  };
	};

	const rawContent$1 = node => {
	  async function* contentGenerator(options = {}) {
	    const {offset, length} = validateOffsetAndLength(node.length, options.offset, options.length);
	    yield extractDataFromBlock(node, 0, offset, offset + length);
	  }
	  return contentGenerator;
	};
	const resolve$4 = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {
	  if (toResolve.length) {
	    throw errCode$q(new Error(`No link named ${ path } found in raw node ${ cid }`), 'ERR_NOT_FOUND');
	  }
	  const block = await blockstore.get(cid, options);
	  return {
	    entry: {
	      type: 'raw',
	      name,
	      path,
	      cid,
	      content: rawContent$1(block),
	      depth,
	      size: block.length,
	      node: block
	    }
	  };
	};

	const resolve$3 = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {
	  const block = await blockstore.get(cid);
	  const object = decode$6(block);
	  let subObject = object;
	  let subPath = path;
	  while (toResolve.length) {
	    const prop = toResolve[0];
	    if (prop in subObject) {
	      toResolve.shift();
	      subPath = `${ subPath }/${ prop }`;
	      const subObjectCid = CID$6.asCID(subObject[prop]);
	      if (subObjectCid) {
	        return {
	          entry: {
	            type: 'object',
	            name,
	            path,
	            cid,
	            node: block,
	            depth,
	            size: block.length,
	            content: async function* () {
	              yield object;
	            }
	          },
	          next: {
	            cid: subObjectCid,
	            name: prop,
	            path: subPath,
	            toResolve
	          }
	        };
	      }
	      subObject = subObject[prop];
	    } else {
	      throw errCode$q(new Error(`No property named ${ prop } found in cbor node ${ cid }`), 'ERR_NO_PROP');
	    }
	  }
	  return {
	    entry: {
	      type: 'object',
	      name,
	      path,
	      cid,
	      node: block,
	      depth,
	      size: block.length,
	      content: async function* () {
	        yield object;
	      }
	    }
	  };
	};

	const rawContent = node => {
	  async function* contentGenerator(options = {}) {
	    const {offset, length} = validateOffsetAndLength(node.length, options.offset, options.length);
	    yield extractDataFromBlock(node, 0, offset, offset + length);
	  }
	  return contentGenerator;
	};
	const resolve$2 = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {
	  if (toResolve.length) {
	    throw errCode$q(new Error(`No link named ${ path } found in raw node ${ cid }`), 'ERR_NOT_FOUND');
	  }
	  const buf = await decode$k(cid.multihash.bytes);
	  return {
	    entry: {
	      type: 'identity',
	      name,
	      path,
	      cid,
	      content: rawContent(buf.digest),
	      depth,
	      size: buf.digest.length,
	      node: buf.digest
	    }
	  };
	};

	const resolvers$1 = {
	  [code$8]: unixFsResolver,
	  [code$2]: resolve$4,
	  [code]: resolve$3,
	  [identity$2.code]: resolve$2
	};
	function resolve$1(cid, name, path, toResolve, depth, blockstore, options) {
	  const resolver = resolvers$1[cid.code];
	  if (!resolver) {
	    throw errCode$q(new Error(`No resolver for code ${ cid.code }`), 'ERR_NO_RESOLVER');
	  }
	  return resolver(cid, name, path, toResolve, resolve$1, depth, blockstore, options);
	}

	const toPathComponents$1 = (path = '') => {
	  return (path.trim().match(/([^\\^/]|\\\/)+/g) || []).filter(Boolean);
	};
	const cidAndRest = path => {
	  if (path instanceof Uint8Array) {
	    return {
	      cid: CID$6.decode(path),
	      toResolve: []
	    };
	  }
	  const cid = CID$6.asCID(path);
	  if (cid) {
	    return {
	      cid,
	      toResolve: []
	    };
	  }
	  if (typeof path === 'string') {
	    if (path.indexOf('/ipfs/') === 0) {
	      path = path.substring(6);
	    }
	    const output = toPathComponents$1(path);
	    return {
	      cid: CID$6.parse(output[0]),
	      toResolve: output.slice(1)
	    };
	  }
	  throw errCode$q(new Error(`Unknown path type ${ path }`), 'ERR_BAD_PATH');
	};
	async function* walkPath(path, blockstore, options = {}) {
	  let {cid, toResolve} = cidAndRest(path);
	  let name = cid.toString();
	  let entryPath = name;
	  const startingDepth = toResolve.length;
	  while (true) {
	    const result = await resolve$1(cid, name, entryPath, toResolve, startingDepth, blockstore, options);
	    if (!result.entry && !result.next) {
	      throw errCode$q(new Error(`Could not resolve ${ path }`), 'ERR_NOT_FOUND');
	    }
	    if (result.entry) {
	      yield result.entry;
	    }
	    if (!result.next) {
	      return;
	    }
	    toResolve = result.next.toResolve;
	    cid = result.next.cid;
	    name = result.next.name;
	    entryPath = result.next.path;
	  }
	}
	async function exporter(path, blockstore, options = {}) {
	  const result = await itLast(walkPath(path, blockstore, options));
	  if (!result) {
	    throw errCode$q(new Error(`Could not resolve ${ path }`), 'ERR_NOT_FOUND');
	  }
	  return result;
	}
	async function* recursive(path, blockstore, options = {}) {
	  const node = await exporter(path, blockstore, options);
	  if (!node) {
	    return;
	  }
	  yield node;
	  if (node.type === 'directory') {
	    for await (const child of recurse(node, options)) {
	      yield child;
	    }
	  }
	  async function* recurse(node, options) {
	    for await (const file of node.content(options)) {
	      yield file;
	      if (file instanceof Uint8Array) {
	        continue;
	      }
	      if (file.type === 'directory') {
	        yield* recurse(file, options);
	      }
	    }
	  }
	}

	function createCat$1({repo, preload}) {
	  async function* cat(ipfsPath, options = {}) {
	    ipfsPath = normalizeCidPath(ipfsPath);
	    if (options.preload !== false) {
	      const pathComponents = ipfsPath.split('/');
	      preload(CID$6.parse(pathComponents[0]));
	    }
	    const file = await exporter(ipfsPath, repo.blocks, options);
	    if (file.type === 'directory') {
	      throw new Error('this dag node is a directory');
	    }
	    if (!file.content) {
	      throw new Error('this dag node has no content');
	    }
	    yield* file.content(options);
	  }
	  return withTimeoutOption(cat);
	}

	const { Buffer: Buffer$f } = require$$0$1;
	Buffer$f.from('ustar\x00', 'binary');
	Buffer$f.from('ustar\x20', 'binary');
	Buffer$f.from('\x20\x00', 'binary');

	const BufferList$a = BufferList_1;

	var itReader = source => {
	  const reader = (async function * () {
	    let bytes = yield; // Allows us to receive 8 when reader.next(8) is called
	    let bl = new BufferList$a();

	    for await (const chunk of source) {
	      if (!bytes) {
	        bytes = yield bl.append(chunk);
	        bl = new BufferList$a();
	        continue
	      }

	      bl.append(chunk);

	      while (bl.length >= bytes) {
	        const data = bl.shallowSlice(0, bytes);
	        bl.consume(bytes);
	        bytes = yield data;

	        // If we no longer want a specific byte length, we yield the rest now
	        if (!bytes) {
	          if (bl.length) {
	            bytes = yield bl;
	            bl = new BufferList$a();
	          }
	          break // bytes is null and/or no more buffer to yield
	        }
	      }
	    }

	    // Consumer wants more bytes but the source has ended and our buffer
	    // is not big enough to satisfy.
	    if (bytes) {
	      throw Object.assign(
	        new Error(`stream ended before ${bytes} bytes became available`),
	        { code: 'ERR_UNDER_READ', buffer: bl }
	      )
	    }
	  })();

	  reader.next();
	  return reader
	};

	var index_browser = {
	    'RTLD_LAZY': 1,
	    'RTLD_NOW': 2,
	    'RTLD_GLOBAL': 8,
	    'RTLD_LOCAL': 4,
	    'E2BIG': 7,
	    'EACCES': 13,
	    'EADDRINUSE': 48,
	    'EADDRNOTAVAIL': 49,
	    'EAFNOSUPPORT': 47,
	    'EAGAIN': 35,
	    'EALREADY': 37,
	    'EBADF': 9,
	    'EBADMSG': 94,
	    'EBUSY': 16,
	    'ECANCELED': 89,
	    'ECHILD': 10,
	    'ECONNABORTED': 53,
	    'ECONNREFUSED': 61,
	    'ECONNRESET': 54,
	    'EDEADLK': 11,
	    'EDESTADDRREQ': 39,
	    'EDOM': 33,
	    'EDQUOT': 69,
	    'EEXIST': 17,
	    'EFAULT': 14,
	    'EFBIG': 27,
	    'EHOSTUNREACH': 65,
	    'EIDRM': 90,
	    'EILSEQ': 92,
	    'EINPROGRESS': 36,
	    'EINTR': 4,
	    'EINVAL': 22,
	    'EIO': 5,
	    'EISCONN': 56,
	    'EISDIR': 21,
	    'ELOOP': 62,
	    'EMFILE': 24,
	    'EMLINK': 31,
	    'EMSGSIZE': 40,
	    'EMULTIHOP': 95,
	    'ENAMETOOLONG': 63,
	    'ENETDOWN': 50,
	    'ENETRESET': 52,
	    'ENETUNREACH': 51,
	    'ENFILE': 23,
	    'ENOBUFS': 55,
	    'ENODATA': 96,
	    'ENODEV': 19,
	    'ENOENT': 2,
	    'ENOEXEC': 8,
	    'ENOLCK': 77,
	    'ENOLINK': 97,
	    'ENOMEM': 12,
	    'ENOMSG': 91,
	    'ENOPROTOOPT': 42,
	    'ENOSPC': 28,
	    'ENOSR': 98,
	    'ENOSTR': 99,
	    'ENOSYS': 78,
	    'ENOTCONN': 57,
	    'ENOTDIR': 20,
	    'ENOTEMPTY': 66,
	    'ENOTSOCK': 38,
	    'ENOTSUP': 45,
	    'ENOTTY': 25,
	    'ENXIO': 6,
	    'EOPNOTSUPP': 102,
	    'EOVERFLOW': 84,
	    'EPERM': 1,
	    'EPIPE': 32,
	    'EPROTO': 100,
	    'EPROTONOSUPPORT': 43,
	    'EPROTOTYPE': 41,
	    'ERANGE': 34,
	    'EROFS': 30,
	    'ESPIPE': 29,
	    'ESRCH': 3,
	    'ESTALE': 70,
	    'ETIME': 101,
	    'ETIMEDOUT': 60,
	    'ETXTBSY': 26,
	    'EWOULDBLOCK': 35,
	    'EXDEV': 18,
	    'PRIORITY_LOW': 19,
	    'PRIORITY_BELOW_NORMAL': 10,
	    'PRIORITY_NORMAL': 0,
	    'PRIORITY_ABOVE_NORMAL': -7,
	    'PRIORITY_HIGH': -14,
	    'PRIORITY_HIGHEST': -20,
	    'SIGHUP': 1,
	    'SIGINT': 2,
	    'SIGQUIT': 3,
	    'SIGILL': 4,
	    'SIGTRAP': 5,
	    'SIGABRT': 6,
	    'SIGIOT': 6,
	    'SIGBUS': 10,
	    'SIGFPE': 8,
	    'SIGKILL': 9,
	    'SIGUSR1': 30,
	    'SIGSEGV': 11,
	    'SIGUSR2': 31,
	    'SIGPIPE': 13,
	    'SIGALRM': 14,
	    'SIGTERM': 15,
	    'SIGCHLD': 20,
	    'SIGCONT': 19,
	    'SIGSTOP': 17,
	    'SIGTSTP': 18,
	    'SIGTTIN': 21,
	    'SIGTTOU': 22,
	    'SIGURG': 16,
	    'SIGXCPU': 24,
	    'SIGXFSZ': 25,
	    'SIGVTALRM': 26,
	    'SIGPROF': 27,
	    'SIGWINCH': 28,
	    'SIGIO': 23,
	    'SIGINFO': 29,
	    'SIGSYS': 12,
	    'UV_FS_SYMLINK_DIR': 1,
	    'UV_FS_SYMLINK_JUNCTION': 2,
	    'O_RDONLY': 0,
	    'O_WRONLY': 1,
	    'O_RDWR': 2,
	    'UV_DIRENT_UNKNOWN': 0,
	    'UV_DIRENT_FILE': 1,
	    'UV_DIRENT_DIR': 2,
	    'UV_DIRENT_LINK': 3,
	    'UV_DIRENT_FIFO': 4,
	    'UV_DIRENT_SOCKET': 5,
	    'UV_DIRENT_CHAR': 6,
	    'UV_DIRENT_BLOCK': 7,
	    'S_IFMT': 61440,
	    'S_IFREG': 32768,
	    'S_IFDIR': 16384,
	    'S_IFCHR': 8192,
	    'S_IFBLK': 24576,
	    'S_IFIFO': 4096,
	    'S_IFLNK': 40960,
	    'S_IFSOCK': 49152,
	    'O_CREAT': 512,
	    'O_EXCL': 2048,
	    'UV_FS_O_FILEMAP': 0,
	    'O_NOCTTY': 131072,
	    'O_TRUNC': 1024,
	    'O_APPEND': 8,
	    'O_DIRECTORY': 1048576,
	    'O_NOFOLLOW': 256,
	    'O_SYNC': 128,
	    'O_DSYNC': 4194304,
	    'O_SYMLINK': 2097152,
	    'O_NONBLOCK': 4,
	    'S_IRWXU': 448,
	    'S_IRUSR': 256,
	    'S_IWUSR': 128,
	    'S_IXUSR': 64,
	    'S_IRWXG': 56,
	    'S_IRGRP': 32,
	    'S_IWGRP': 16,
	    'S_IXGRP': 8,
	    'S_IRWXO': 7,
	    'S_IROTH': 4,
	    'S_IWOTH': 2,
	    'S_IXOTH': 1,
	    'F_OK': 0,
	    'R_OK': 4,
	    'W_OK': 2,
	    'X_OK': 1,
	    'UV_FS_COPYFILE_EXCL': 1,
	    'COPYFILE_EXCL': 1,
	    'UV_FS_COPYFILE_FICLONE': 2,
	    'COPYFILE_FICLONE': 2,
	    'UV_FS_COPYFILE_FICLONE_FORCE': 4,
	    'COPYFILE_FICLONE_FORCE': 4,
	    'OPENSSL_VERSION_NUMBER': 269488335,
	    'SSL_OP_ALL': 2147485780,
	    'SSL_OP_ALLOW_NO_DHE_KEX': 1024,
	    'SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION': 262144,
	    'SSL_OP_CIPHER_SERVER_PREFERENCE': 4194304,
	    'SSL_OP_CISCO_ANYCONNECT': 32768,
	    'SSL_OP_COOKIE_EXCHANGE': 8192,
	    'SSL_OP_CRYPTOPRO_TLSEXT_BUG': 2147483648,
	    'SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS': 2048,
	    'SSL_OP_EPHEMERAL_RSA': 0,
	    'SSL_OP_LEGACY_SERVER_CONNECT': 4,
	    'SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER': 0,
	    'SSL_OP_MICROSOFT_SESS_ID_BUG': 0,
	    'SSL_OP_MSIE_SSLV2_RSA_PADDING': 0,
	    'SSL_OP_NETSCAPE_CA_DN_BUG': 0,
	    'SSL_OP_NETSCAPE_CHALLENGE_BUG': 0,
	    'SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG': 0,
	    'SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG': 0,
	    'SSL_OP_NO_COMPRESSION': 131072,
	    'SSL_OP_NO_ENCRYPT_THEN_MAC': 524288,
	    'SSL_OP_NO_QUERY_MTU': 4096,
	    'SSL_OP_NO_RENEGOTIATION': 1073741824,
	    'SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION': 65536,
	    'SSL_OP_NO_SSLv2': 0,
	    'SSL_OP_NO_SSLv3': 33554432,
	    'SSL_OP_NO_TICKET': 16384,
	    'SSL_OP_NO_TLSv1': 67108864,
	    'SSL_OP_NO_TLSv1_1': 268435456,
	    'SSL_OP_NO_TLSv1_2': 134217728,
	    'SSL_OP_NO_TLSv1_3': 536870912,
	    'SSL_OP_PKCS1_CHECK_1': 0,
	    'SSL_OP_PKCS1_CHECK_2': 0,
	    'SSL_OP_PRIORITIZE_CHACHA': 2097152,
	    'SSL_OP_SINGLE_DH_USE': 0,
	    'SSL_OP_SINGLE_ECDH_USE': 0,
	    'SSL_OP_SSLEAY_080_CLIENT_DH_BUG': 0,
	    'SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG': 0,
	    'SSL_OP_TLS_BLOCK_PADDING_BUG': 0,
	    'SSL_OP_TLS_D5_BUG': 0,
	    'SSL_OP_TLS_ROLLBACK_BUG': 8388608,
	    'ENGINE_METHOD_RSA': 1,
	    'ENGINE_METHOD_DSA': 2,
	    'ENGINE_METHOD_DH': 4,
	    'ENGINE_METHOD_RAND': 8,
	    'ENGINE_METHOD_EC': 2048,
	    'ENGINE_METHOD_CIPHERS': 64,
	    'ENGINE_METHOD_DIGESTS': 128,
	    'ENGINE_METHOD_PKEY_METHS': 512,
	    'ENGINE_METHOD_PKEY_ASN1_METHS': 1024,
	    'ENGINE_METHOD_ALL': 65535,
	    'ENGINE_METHOD_NONE': 0,
	    'DH_CHECK_P_NOT_SAFE_PRIME': 2,
	    'DH_CHECK_P_NOT_PRIME': 1,
	    'DH_UNABLE_TO_CHECK_GENERATOR': 4,
	    'DH_NOT_SUITABLE_GENERATOR': 8,
	    'ALPN_ENABLED': 1,
	    'RSA_PKCS1_PADDING': 1,
	    'RSA_SSLV23_PADDING': 2,
	    'RSA_NO_PADDING': 3,
	    'RSA_PKCS1_OAEP_PADDING': 4,
	    'RSA_X931_PADDING': 5,
	    'RSA_PKCS1_PSS_PADDING': 6,
	    'RSA_PSS_SALTLEN_DIGEST': -1,
	    'RSA_PSS_SALTLEN_MAX_SIGN': -2,
	    'RSA_PSS_SALTLEN_AUTO': -2,
	    'defaultCoreCipherList': 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
	    'TLS1_VERSION': 769,
	    'TLS1_1_VERSION': 770,
	    'TLS1_2_VERSION': 771,
	    'TLS1_3_VERSION': 772,
	    'POINT_CONVERSION_COMPRESSED': 2,
	    'POINT_CONVERSION_UNCOMPRESSED': 4,
	    'POINT_CONVERSION_HYBRID': 6
	};

	const BufferList$9 = BufferList_1;

	const TypeDefault = {
	  string: () => '',
	  buffer: () => BufferList$9()
	};

	var itConcat = async (source, options) => {
	  options = options || {};

	  if (options.type && !TypeDefault[options.type]) {
	    throw new Error(`invalid type "${options.type}"`)
	  }

	  let res, type;
	  for await (const chunk of source) {
	    if (!res) {
	      type = options.type || (typeof chunk === 'string' ? 'string' : 'buffer');
	      res = TypeDefault[type]();
	    }

	    if (type === 'string') {
	      res += chunk;
	    } else {
	      res.append(chunk);
	    }
	  }

	  return res || TypeDefault[options.type || 'buffer']()
	};

	var packHeaders = {};

	const { Buffer: Buffer$e } = require$$0$1;

	const alloc = Buffer$e.alloc;

	const ZEROS = '0000000000000000000';
	const SEVENS = '7777777777777777777';
	const ZERO_OFFSET = '0'.charCodeAt(0);
	const USTAR_MAGIC = Buffer$e.from('ustar\x00', 'binary');
	const USTAR_VER = Buffer$e.from('00', 'binary');
	const MASK = parseInt('7777', 8);
	const MAGIC_OFFSET = 257;
	const VERSION_OFFSET = 263;

	const toTypeflag = function (flag) {
	  switch (flag) {
	    case 'file':
	      return 0
	    case 'link':
	      return 1
	    case 'symlink':
	      return 2
	    case 'character-device':
	      return 3
	    case 'block-device':
	      return 4
	    case 'directory':
	      return 5
	    case 'fifo':
	      return 6
	    case 'contiguous-file':
	      return 7
	    case 'pax-header':
	      return 72
	  }

	  return 0
	};

	const cksum = function (block) {
	  let sum = 8 * 32;
	  for (let i = 0; i < 148; i++) sum += block[i];
	  for (let j = 156; j < 512; j++) sum += block[j];
	  return sum
	};

	const encodeOct = function (val, n) {
	  val = val.toString(8);
	  if (val.length > n) return SEVENS.slice(0, n) + ' '
	  else return ZEROS.slice(0, n - val.length) + val + ' '
	};

	const addLength = function (str) {
	  const len = Buffer$e.byteLength(str);
	  let digits = Math.floor(Math.log(len) / Math.log(10)) + 1;
	  if (len + digits >= Math.pow(10, digits)) digits++;

	  return (len + digits) + str
	};

	packHeaders.encodePax = function (opts) { // TODO: encode more stuff in pax
	  let result = '';
	  if (opts.name) result += addLength(' path=' + opts.name + '\n');
	  if (opts.linkname) result += addLength(' linkpath=' + opts.linkname + '\n');
	  const pax = opts.pax;
	  if (pax) {
	    for (const key in pax) {
	      result += addLength(' ' + key + '=' + pax[key] + '\n');
	    }
	  }
	  return Buffer$e.from(result)
	};

	packHeaders.encode = function (opts) {
	  const buf = alloc(512);
	  let name = opts.name;
	  let prefix = '';

	  if (opts.typeflag === 5 && name[name.length - 1] !== '/') name += '/';
	  if (Buffer$e.byteLength(name) !== name.length) return null // utf-8

	  while (Buffer$e.byteLength(name) > 100) {
	    const i = name.indexOf('/');
	    if (i === -1) return null
	    prefix += prefix ? '/' + name.slice(0, i) : name.slice(0, i);
	    name = name.slice(i + 1);
	  }

	  if (Buffer$e.byteLength(name) > 100 || Buffer$e.byteLength(prefix) > 155) return null
	  if (opts.linkname && Buffer$e.byteLength(opts.linkname) > 100) return null

	  buf.write(name);
	  buf.write(encodeOct(opts.mode & MASK, 6), 100);
	  buf.write(encodeOct(opts.uid, 6), 108);
	  buf.write(encodeOct(opts.gid, 6), 116);
	  buf.write(encodeOct(opts.size, 11), 124);
	  buf.write(encodeOct((opts.mtime.getTime() / 1000) | 0, 11), 136);

	  buf[156] = ZERO_OFFSET + toTypeflag(opts.type);

	  if (opts.linkname) buf.write(opts.linkname, 157);

	  USTAR_MAGIC.copy(buf, MAGIC_OFFSET);
	  USTAR_VER.copy(buf, VERSION_OFFSET);
	  if (opts.uname) buf.write(opts.uname, 265);
	  if (opts.gname) buf.write(opts.gname, 297);
	  buf.write(encodeOct(opts.devmajor || 0, 6), 329);
	  buf.write(encodeOct(opts.devminor || 0, 6), 337);

	  if (prefix) buf.write(prefix, 345);

	  buf.write(encodeOct(cksum(buf), 6), 148);

	  return buf
	};

	const { Buffer: Buffer$d } = require$$0$1;
	const BufferList$8 = BufferList_1;
	const { S_IFMT, S_IFBLK, S_IFCHR, S_IFDIR, S_IFIFO, S_IFLNK } = index_browser;
	const concat = itConcat;
	const Headers$1 = packHeaders;

	const DMODE = parseInt('755', 8);
	const FMODE = parseInt('644', 8);

	const END_OF_TAR = Buffer$d.alloc(1024);

	function modeToType (mode) {
	  switch (mode & S_IFMT) {
	    case S_IFBLK: return 'block-device'
	    case S_IFCHR: return 'character-device'
	    case S_IFDIR: return 'directory'
	    case S_IFIFO: return 'fifo'
	    case S_IFLNK: return 'symlink'
	  }
	  return 'file'
	}

	function getPadding (size) {
	  size &= 511;
	  if (size) return new BufferList$8(END_OF_TAR.slice(0, 512 - size))
	}

	function encode$7 (header) {
	  if (!header.pax) {
	    const encoded = Headers$1.encode(header);
	    if (encoded) return encoded
	  }
	  return encodePax(header)
	}

	function encodePax (header) {
	  const paxHeader = Headers$1.encodePax({
	    name: header.name,
	    linkname: header.linkname,
	    pax: header.pax
	  });

	  const newHeader = {
	    name: 'PaxHeader',
	    mode: header.mode,
	    uid: header.uid,
	    gid: header.gid,
	    size: paxHeader.length,
	    mtime: header.mtime,
	    type: 'pax-header',
	    linkname: header.linkname && 'PaxHeader',
	    uname: header.uname,
	    gname: header.gname,
	    devmajor: header.devmajor,
	    devminor: header.devminor
	  };

	  return new BufferList$8([
	    Headers$1.encode(newHeader),
	    paxHeader,
	    getPadding(paxHeader.length),
	    Headers$1.encode({ ...newHeader, size: header.size, type: header.type })
	  ])
	}

	var pack$1 = () => async function * (source) {
	  for await (let { header, body } of source) {
	    if (!header.size || header.type === 'symlink') header.size = 0;
	    if (!header.type) header.type = modeToType(header.mode);
	    if (!header.mode) header.mode = header.type === 'directory' ? DMODE : FMODE;
	    if (!header.uid) header.uid = 0;
	    if (!header.gid) header.gid = 0;
	    if (!header.mtime) header.mtime = new Date();

	    if (typeof body === 'string') body = Buffer$d.from(body);

	    if (Buffer$d.isBuffer(body) || BufferList$8.isBufferList(body)) {
	      header.size = body.length;
	      yield new BufferList$8([encode$7(header), body, getPadding(header.size)]);
	      continue
	    }

	    if (header.type === 'symlink' && !header.linkname) {
	      header.linkname = (await concat(body)).toString();
	      yield encode$7(header);
	      continue
	    }

	    yield encode$7(header);

	    if (header.type !== 'file' && header.type !== 'contiguous-file') {
	      continue
	    }

	    let written = 0;
	    for await (const chunk of body) {
	      written += chunk.length;
	      yield BufferList$8.isBufferList(chunk) ? chunk : new BufferList$8(chunk);
	    }

	    if (written !== header.size) { // corrupting tar
	      throw new Error('size mismatch')
	    }

	    const overflow = getPadding(header.size);
	    if (overflow) yield overflow;
	  }

	  yield new BufferList$8(END_OF_TAR);
	};

	var pack = pack$1;

	var common$5 = {};

	(function (exports) {


	var TYPED_OK =  (typeof Uint8Array !== 'undefined') &&
	                (typeof Uint16Array !== 'undefined') &&
	                (typeof Int32Array !== 'undefined');

	function _has(obj, key) {
	  return Object.prototype.hasOwnProperty.call(obj, key);
	}

	exports.assign = function (obj /*from1, from2, from3, ...*/) {
	  var sources = Array.prototype.slice.call(arguments, 1);
	  while (sources.length) {
	    var source = sources.shift();
	    if (!source) { continue; }

	    if (typeof source !== 'object') {
	      throw new TypeError(source + 'must be non-object');
	    }

	    for (var p in source) {
	      if (_has(source, p)) {
	        obj[p] = source[p];
	      }
	    }
	  }

	  return obj;
	};


	// reduce buffer size, avoiding mem copy
	exports.shrinkBuf = function (buf, size) {
	  if (buf.length === size) { return buf; }
	  if (buf.subarray) { return buf.subarray(0, size); }
	  buf.length = size;
	  return buf;
	};


	var fnTyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    if (src.subarray && dest.subarray) {
	      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
	      return;
	    }
	    // Fallback to ordinary array
	    for (var i = 0; i < len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function (chunks) {
	    var i, l, len, pos, chunk, result;

	    // calculate data length
	    len = 0;
	    for (i = 0, l = chunks.length; i < l; i++) {
	      len += chunks[i].length;
	    }

	    // join chunks
	    result = new Uint8Array(len);
	    pos = 0;
	    for (i = 0, l = chunks.length; i < l; i++) {
	      chunk = chunks[i];
	      result.set(chunk, pos);
	      pos += chunk.length;
	    }

	    return result;
	  }
	};

	var fnUntyped = {
	  arraySet: function (dest, src, src_offs, len, dest_offs) {
	    for (var i = 0; i < len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function (chunks) {
	    return [].concat.apply([], chunks);
	  }
	};


	// Enable/Disable typed arrays use, for testing
	//
	exports.setTyped = function (on) {
	  if (on) {
	    exports.Buf8  = Uint8Array;
	    exports.Buf16 = Uint16Array;
	    exports.Buf32 = Int32Array;
	    exports.assign(exports, fnTyped);
	  } else {
	    exports.Buf8  = Array;
	    exports.Buf16 = Array;
	    exports.Buf32 = Array;
	    exports.assign(exports, fnUntyped);
	  }
	};

	exports.setTyped(TYPED_OK);
	}(common$5));

	var deflate$4 = {};

	var deflate$3 = {};

	var trees$1 = {};

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	/* eslint-disable space-unary-ops */

	var utils$A = common$5;

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	//var Z_FILTERED          = 1;
	//var Z_HUFFMAN_ONLY      = 2;
	//var Z_RLE               = 3;
	var Z_FIXED$1               = 4;
	//var Z_DEFAULT_STRATEGY  = 0;

	/* Possible values of the data_type field (though see inflate()) */
	var Z_BINARY              = 0;
	var Z_TEXT                = 1;
	//var Z_ASCII             = 1; // = Z_TEXT
	var Z_UNKNOWN$1             = 2;

	/*============================================================================*/


	function zero$1(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }

	// From zutil.h

	var STORED_BLOCK = 0;
	var STATIC_TREES = 1;
	var DYN_TREES    = 2;
	/* The three kinds of block type */

	var MIN_MATCH$1    = 3;
	var MAX_MATCH$1    = 258;
	/* The minimum and maximum match lengths */

	// From deflate.h
	/* ===========================================================================
	 * Internal compression state.
	 */

	var LENGTH_CODES$1  = 29;
	/* number of length codes, not counting the special END_BLOCK code */

	var LITERALS$1      = 256;
	/* number of literal bytes 0..255 */

	var L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;
	/* number of Literal or Length codes, including the END_BLOCK code */

	var D_CODES$1       = 30;
	/* number of distance codes */

	var BL_CODES$1      = 19;
	/* number of codes used to transfer the bit lengths */

	var HEAP_SIZE$1     = 2 * L_CODES$1 + 1;
	/* maximum heap size */

	var MAX_BITS$1      = 15;
	/* All codes must not exceed MAX_BITS bits */

	var Buf_size      = 16;
	/* size of bit buffer in bi_buf */


	/* ===========================================================================
	 * Constants
	 */

	var MAX_BL_BITS = 7;
	/* Bit length codes must not exceed MAX_BL_BITS bits */

	var END_BLOCK   = 256;
	/* end of block literal code */

	var REP_3_6     = 16;
	/* repeat previous bit length 3-6 times (2 bits of repeat count) */

	var REPZ_3_10   = 17;
	/* repeat a zero length 3-10 times  (3 bits of repeat count) */

	var REPZ_11_138 = 18;
	/* repeat a zero length 11-138 times  (7 bits of repeat count) */

	/* eslint-disable comma-spacing,array-bracket-spacing */
	var extra_lbits =   /* extra bits for each length code */
	  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];

	var extra_dbits =   /* extra bits for each distance code */
	  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];

	var extra_blbits =  /* extra bits for each bit length code */
	  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];

	var bl_order =
	  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
	/* eslint-enable comma-spacing,array-bracket-spacing */

	/* The lengths of the bit length codes are sent in order of decreasing
	 * probability, to avoid transmitting the lengths for unused bit length codes.
	 */

	/* ===========================================================================
	 * Local data. These are initialized only once.
	 */

	// We pre-fill arrays with 0 to avoid uninitialized gaps

	var DIST_CODE_LEN = 512; /* see definition of array dist_code below */

	// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
	var static_ltree  = new Array((L_CODES$1 + 2) * 2);
	zero$1(static_ltree);
	/* The static literal tree. Since the bit lengths are imposed, there is no
	 * need for the L_CODES extra codes used during heap construction. However
	 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
	 * below).
	 */

	var static_dtree  = new Array(D_CODES$1 * 2);
	zero$1(static_dtree);
	/* The static distance tree. (Actually a trivial tree since all codes use
	 * 5 bits.)
	 */

	var _dist_code    = new Array(DIST_CODE_LEN);
	zero$1(_dist_code);
	/* Distance codes. The first 256 values correspond to the distances
	 * 3 .. 258, the last 256 values correspond to the top 8 bits of
	 * the 15 bit distances.
	 */

	var _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);
	zero$1(_length_code);
	/* length code for each normalized match length (0 == MIN_MATCH) */

	var base_length   = new Array(LENGTH_CODES$1);
	zero$1(base_length);
	/* First normalized length for each code (0 = MIN_MATCH) */

	var base_dist     = new Array(D_CODES$1);
	zero$1(base_dist);
	/* First normalized distance for each code (0 = distance of 1) */


	function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

	  this.static_tree  = static_tree;  /* static tree or NULL */
	  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
	  this.extra_base   = extra_base;   /* base index for extra_bits */
	  this.elems        = elems;        /* max number of elements in the tree */
	  this.max_length   = max_length;   /* max bit length for the codes */

	  // show if `static_tree` has data or dummy - needed for monomorphic objects
	  this.has_stree    = static_tree && static_tree.length;
	}


	var static_l_desc;
	var static_d_desc;
	var static_bl_desc;


	function TreeDesc(dyn_tree, stat_desc) {
	  this.dyn_tree = dyn_tree;     /* the dynamic tree */
	  this.max_code = 0;            /* largest code with non zero frequency */
	  this.stat_desc = stat_desc;   /* the corresponding static tree */
	}



	function d_code(dist) {
	  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
	}


	/* ===========================================================================
	 * Output a short LSB first on the stream.
	 * IN assertion: there is enough room in pendingBuf.
	 */
	function put_short(s, w) {
	//    put_byte(s, (uch)((w) & 0xff));
	//    put_byte(s, (uch)((ush)(w) >> 8));
	  s.pending_buf[s.pending++] = (w) & 0xff;
	  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
	}


	/* ===========================================================================
	 * Send a value on a given number of bits.
	 * IN assertion: length <= 16 and value fits in length bits.
	 */
	function send_bits(s, value, length) {
	  if (s.bi_valid > (Buf_size - length)) {
	    s.bi_buf |= (value << s.bi_valid) & 0xffff;
	    put_short(s, s.bi_buf);
	    s.bi_buf = value >> (Buf_size - s.bi_valid);
	    s.bi_valid += length - Buf_size;
	  } else {
	    s.bi_buf |= (value << s.bi_valid) & 0xffff;
	    s.bi_valid += length;
	  }
	}


	function send_code(s, c, tree) {
	  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
	}


	/* ===========================================================================
	 * Reverse the first len bits of a code, using straightforward code (a faster
	 * method would use a table)
	 * IN assertion: 1 <= len <= 15
	 */
	function bi_reverse(code, len) {
	  var res = 0;
	  do {
	    res |= code & 1;
	    code >>>= 1;
	    res <<= 1;
	  } while (--len > 0);
	  return res >>> 1;
	}


	/* ===========================================================================
	 * Flush the bit buffer, keeping at most 7 bits in it.
	 */
	function bi_flush(s) {
	  if (s.bi_valid === 16) {
	    put_short(s, s.bi_buf);
	    s.bi_buf = 0;
	    s.bi_valid = 0;

	  } else if (s.bi_valid >= 8) {
	    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
	    s.bi_buf >>= 8;
	    s.bi_valid -= 8;
	  }
	}


	/* ===========================================================================
	 * Compute the optimal bit lengths for a tree and update the total bit length
	 * for the current block.
	 * IN assertion: the fields freq and dad are set, heap[heap_max] and
	 *    above are the tree nodes sorted by increasing frequency.
	 * OUT assertions: the field len is set to the optimal bit length, the
	 *     array bl_count contains the frequencies for each bit length.
	 *     The length opt_len is updated; static_len is also updated if stree is
	 *     not null.
	 */
	function gen_bitlen(s, desc)
	//    deflate_state *s;
	//    tree_desc *desc;    /* the tree descriptor */
	{
	  var tree            = desc.dyn_tree;
	  var max_code        = desc.max_code;
	  var stree           = desc.stat_desc.static_tree;
	  var has_stree       = desc.stat_desc.has_stree;
	  var extra           = desc.stat_desc.extra_bits;
	  var base            = desc.stat_desc.extra_base;
	  var max_length      = desc.stat_desc.max_length;
	  var h;              /* heap index */
	  var n, m;           /* iterate over the tree elements */
	  var bits;           /* bit length */
	  var xbits;          /* extra bits */
	  var f;              /* frequency */
	  var overflow = 0;   /* number of elements with bit length too large */

	  for (bits = 0; bits <= MAX_BITS$1; bits++) {
	    s.bl_count[bits] = 0;
	  }

	  /* In a first pass, compute the optimal bit lengths (which may
	   * overflow in the case of the bit length tree).
	   */
	  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

	  for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {
	    n = s.heap[h];
	    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
	    if (bits > max_length) {
	      bits = max_length;
	      overflow++;
	    }
	    tree[n * 2 + 1]/*.Len*/ = bits;
	    /* We overwrite tree[n].Dad which is no longer needed */

	    if (n > max_code) { continue; } /* not a leaf node */

	    s.bl_count[bits]++;
	    xbits = 0;
	    if (n >= base) {
	      xbits = extra[n - base];
	    }
	    f = tree[n * 2]/*.Freq*/;
	    s.opt_len += f * (bits + xbits);
	    if (has_stree) {
	      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
	    }
	  }
	  if (overflow === 0) { return; }

	  // Trace((stderr,"\nbit length overflow\n"));
	  /* This happens for example on obj2 and pic of the Calgary corpus */

	  /* Find the first bit length which could increase: */
	  do {
	    bits = max_length - 1;
	    while (s.bl_count[bits] === 0) { bits--; }
	    s.bl_count[bits]--;      /* move one leaf down the tree */
	    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
	    s.bl_count[max_length]--;
	    /* The brother of the overflow item also moves one step up,
	     * but this does not affect bl_count[max_length]
	     */
	    overflow -= 2;
	  } while (overflow > 0);

	  /* Now recompute all bit lengths, scanning in increasing frequency.
	   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
	   * lengths instead of fixing only the wrong ones. This idea is taken
	   * from 'ar' written by Haruhiko Okumura.)
	   */
	  for (bits = max_length; bits !== 0; bits--) {
	    n = s.bl_count[bits];
	    while (n !== 0) {
	      m = s.heap[--h];
	      if (m > max_code) { continue; }
	      if (tree[m * 2 + 1]/*.Len*/ !== bits) {
	        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
	        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
	        tree[m * 2 + 1]/*.Len*/ = bits;
	      }
	      n--;
	    }
	  }
	}


	/* ===========================================================================
	 * Generate the codes for a given tree and bit counts (which need not be
	 * optimal).
	 * IN assertion: the array bl_count contains the bit length statistics for
	 * the given tree and the field len is set for all tree elements.
	 * OUT assertion: the field code is set for all tree elements of non
	 *     zero code length.
	 */
	function gen_codes(tree, max_code, bl_count)
	//    ct_data *tree;             /* the tree to decorate */
	//    int max_code;              /* largest code with non zero frequency */
	//    ushf *bl_count;            /* number of codes at each bit length */
	{
	  var next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */
	  var code = 0;              /* running code value */
	  var bits;                  /* bit index */
	  var n;                     /* code index */

	  /* The distribution counts are first used to generate the code values
	   * without bit reversal.
	   */
	  for (bits = 1; bits <= MAX_BITS$1; bits++) {
	    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;
	  }
	  /* Check that the bit counts in bl_count are consistent. The last code
	   * must be all ones.
	   */
	  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
	  //        "inconsistent bit counts");
	  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

	  for (n = 0;  n <= max_code; n++) {
	    var len = tree[n * 2 + 1]/*.Len*/;
	    if (len === 0) { continue; }
	    /* Now reverse the bits */
	    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

	    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
	    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
	  }
	}


	/* ===========================================================================
	 * Initialize the various 'constant' tables.
	 */
	function tr_static_init() {
	  var n;        /* iterates over tree elements */
	  var bits;     /* bit counter */
	  var length;   /* length value */
	  var code;     /* code value */
	  var dist;     /* distance index */
	  var bl_count = new Array(MAX_BITS$1 + 1);
	  /* number of codes at each bit length for an optimal tree */

	  // do check in _tr_init()
	  //if (static_init_done) return;

	  /* For some embedded targets, global variables are not initialized: */
	/*#ifdef NO_INIT_GLOBAL_POINTERS
	  static_l_desc.static_tree = static_ltree;
	  static_l_desc.extra_bits = extra_lbits;
	  static_d_desc.static_tree = static_dtree;
	  static_d_desc.extra_bits = extra_dbits;
	  static_bl_desc.extra_bits = extra_blbits;
	#endif*/

	  /* Initialize the mapping length (0..255) -> length code (0..28) */
	  length = 0;
	  for (code = 0; code < LENGTH_CODES$1 - 1; code++) {
	    base_length[code] = length;
	    for (n = 0; n < (1 << extra_lbits[code]); n++) {
	      _length_code[length++] = code;
	    }
	  }
	  //Assert (length == 256, "tr_static_init: length != 256");
	  /* Note that the length 255 (match length 258) can be represented
	   * in two different ways: code 284 + 5 bits or code 285, so we
	   * overwrite length_code[255] to use the best encoding:
	   */
	  _length_code[length - 1] = code;

	  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
	  dist = 0;
	  for (code = 0; code < 16; code++) {
	    base_dist[code] = dist;
	    for (n = 0; n < (1 << extra_dbits[code]); n++) {
	      _dist_code[dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: dist != 256");
	  dist >>= 7; /* from now on, all distances are divided by 128 */
	  for (; code < D_CODES$1; code++) {
	    base_dist[code] = dist << 7;
	    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
	      _dist_code[256 + dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: 256+dist != 512");

	  /* Construct the codes of the static literal tree */
	  for (bits = 0; bits <= MAX_BITS$1; bits++) {
	    bl_count[bits] = 0;
	  }

	  n = 0;
	  while (n <= 143) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  while (n <= 255) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 9;
	    n++;
	    bl_count[9]++;
	  }
	  while (n <= 279) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 7;
	    n++;
	    bl_count[7]++;
	  }
	  while (n <= 287) {
	    static_ltree[n * 2 + 1]/*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  /* Codes 286 and 287 do not exist, but we must include them in the
	   * tree construction to get a canonical Huffman tree (longest code
	   * all ones)
	   */
	  gen_codes(static_ltree, L_CODES$1 + 1, bl_count);

	  /* The static distance tree is trivial: */
	  for (n = 0; n < D_CODES$1; n++) {
	    static_dtree[n * 2 + 1]/*.Len*/ = 5;
	    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
	  }

	  // Now data ready and we can init static trees
	  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);
	  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);
	  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);

	  //static_init_done = true;
	}


	/* ===========================================================================
	 * Initialize a new block.
	 */
	function init_block(s) {
	  var n; /* iterates over tree elements */

	  /* Initialize the trees. */
	  for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
	  for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
	  for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

	  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
	  s.opt_len = s.static_len = 0;
	  s.last_lit = s.matches = 0;
	}


	/* ===========================================================================
	 * Flush the bit buffer and align the output on a byte boundary
	 */
	function bi_windup(s)
	{
	  if (s.bi_valid > 8) {
	    put_short(s, s.bi_buf);
	  } else if (s.bi_valid > 0) {
	    //put_byte(s, (Byte)s->bi_buf);
	    s.pending_buf[s.pending++] = s.bi_buf;
	  }
	  s.bi_buf = 0;
	  s.bi_valid = 0;
	}

	/* ===========================================================================
	 * Copy a stored block, storing first the length and its
	 * one's complement if requested.
	 */
	function copy_block(s, buf, len, header)
	//DeflateState *s;
	//charf    *buf;    /* the input data */
	//unsigned len;     /* its length */
	//int      header;  /* true if block header must be written */
	{
	  bi_windup(s);        /* align on byte boundary */

	  if (header) {
	    put_short(s, len);
	    put_short(s, ~len);
	  }
	//  while (len--) {
	//    put_byte(s, *buf++);
	//  }
	  utils$A.arraySet(s.pending_buf, s.window, buf, len, s.pending);
	  s.pending += len;
	}

	/* ===========================================================================
	 * Compares to subtrees, using the tree depth as tie breaker when
	 * the subtrees have equal frequency. This minimizes the worst case length.
	 */
	function smaller(tree, n, m, depth) {
	  var _n2 = n * 2;
	  var _m2 = m * 2;
	  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
	         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
	}

	/* ===========================================================================
	 * Restore the heap property by moving down the tree starting at node k,
	 * exchanging a node with the smallest of its two sons if necessary, stopping
	 * when the heap property is re-established (each father smaller than its
	 * two sons).
	 */
	function pqdownheap(s, tree, k)
	//    deflate_state *s;
	//    ct_data *tree;  /* the tree to restore */
	//    int k;               /* node to move down */
	{
	  var v = s.heap[k];
	  var j = k << 1;  /* left son of k */
	  while (j <= s.heap_len) {
	    /* Set j to the smallest of the two sons: */
	    if (j < s.heap_len &&
	      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
	      j++;
	    }
	    /* Exit if v is smaller than both sons */
	    if (smaller(tree, v, s.heap[j], s.depth)) { break; }

	    /* Exchange v with the smallest son */
	    s.heap[k] = s.heap[j];
	    k = j;

	    /* And continue down the tree, setting j to the left son of k */
	    j <<= 1;
	  }
	  s.heap[k] = v;
	}


	// inlined manually
	// var SMALLEST = 1;

	/* ===========================================================================
	 * Send the block data compressed using the given Huffman trees
	 */
	function compress_block(s, ltree, dtree)
	//    deflate_state *s;
	//    const ct_data *ltree; /* literal tree */
	//    const ct_data *dtree; /* distance tree */
	{
	  var dist;           /* distance of matched string */
	  var lc;             /* match length or unmatched char (if dist == 0) */
	  var lx = 0;         /* running index in l_buf */
	  var code;           /* the code to send */
	  var extra;          /* number of extra bits to send */

	  if (s.last_lit !== 0) {
	    do {
	      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);
	      lc = s.pending_buf[s.l_buf + lx];
	      lx++;

	      if (dist === 0) {
	        send_code(s, lc, ltree); /* send a literal byte */
	        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
	      } else {
	        /* Here, lc is the match length - MIN_MATCH */
	        code = _length_code[lc];
	        send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */
	        extra = extra_lbits[code];
	        if (extra !== 0) {
	          lc -= base_length[code];
	          send_bits(s, lc, extra);       /* send the extra length bits */
	        }
	        dist--; /* dist is now the match distance - 1 */
	        code = d_code(dist);
	        //Assert (code < D_CODES, "bad d_code");

	        send_code(s, code, dtree);       /* send the distance code */
	        extra = extra_dbits[code];
	        if (extra !== 0) {
	          dist -= base_dist[code];
	          send_bits(s, dist, extra);   /* send the extra distance bits */
	        }
	      } /* literal or match pair ? */

	      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
	      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
	      //       "pendingBuf overflow");

	    } while (lx < s.last_lit);
	  }

	  send_code(s, END_BLOCK, ltree);
	}


	/* ===========================================================================
	 * Construct one Huffman tree and assigns the code bit strings and lengths.
	 * Update the total bit length for the current block.
	 * IN assertion: the field freq is set for all tree elements.
	 * OUT assertions: the fields len and code are set to the optimal bit length
	 *     and corresponding code. The length opt_len is updated; static_len is
	 *     also updated if stree is not null. The field max_code is set.
	 */
	function build_tree(s, desc)
	//    deflate_state *s;
	//    tree_desc *desc; /* the tree descriptor */
	{
	  var tree     = desc.dyn_tree;
	  var stree    = desc.stat_desc.static_tree;
	  var has_stree = desc.stat_desc.has_stree;
	  var elems    = desc.stat_desc.elems;
	  var n, m;          /* iterate over heap elements */
	  var max_code = -1; /* largest code with non zero frequency */
	  var node;          /* new node being created */

	  /* Construct the initial heap, with least frequent element in
	   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
	   * heap[0] is not used.
	   */
	  s.heap_len = 0;
	  s.heap_max = HEAP_SIZE$1;

	  for (n = 0; n < elems; n++) {
	    if (tree[n * 2]/*.Freq*/ !== 0) {
	      s.heap[++s.heap_len] = max_code = n;
	      s.depth[n] = 0;

	    } else {
	      tree[n * 2 + 1]/*.Len*/ = 0;
	    }
	  }

	  /* The pkzip format requires that at least one distance code exists,
	   * and that at least one bit should be sent even if there is only one
	   * possible code. So to avoid special checks later on we force at least
	   * two codes of non zero frequency.
	   */
	  while (s.heap_len < 2) {
	    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
	    tree[node * 2]/*.Freq*/ = 1;
	    s.depth[node] = 0;
	    s.opt_len--;

	    if (has_stree) {
	      s.static_len -= stree[node * 2 + 1]/*.Len*/;
	    }
	    /* node is 0 or 1 so it does not have extra bits */
	  }
	  desc.max_code = max_code;

	  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
	   * establish sub-heaps of increasing lengths:
	   */
	  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

	  /* Construct the Huffman tree by repeatedly combining the least two
	   * frequent nodes.
	   */
	  node = elems;              /* next internal node of the tree */
	  do {
	    //pqremove(s, tree, n);  /* n = node of least frequency */
	    /*** pqremove ***/
	    n = s.heap[1/*SMALLEST*/];
	    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
	    pqdownheap(s, tree, 1/*SMALLEST*/);
	    /***/

	    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

	    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
	    s.heap[--s.heap_max] = m;

	    /* Create a new node father of n and m */
	    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
	    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
	    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

	    /* and insert the new node in the heap */
	    s.heap[1/*SMALLEST*/] = node++;
	    pqdownheap(s, tree, 1/*SMALLEST*/);

	  } while (s.heap_len >= 2);

	  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

	  /* At this point, the fields freq and dad are set. We can now
	   * generate the bit lengths.
	   */
	  gen_bitlen(s, desc);

	  /* The field len is now set, we can generate the bit codes */
	  gen_codes(tree, max_code, s.bl_count);
	}


	/* ===========================================================================
	 * Scan a literal or distance tree to determine the frequencies of the codes
	 * in the bit length tree.
	 */
	function scan_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree;   /* the tree to be scanned */
	//    int max_code;    /* and its largest code of non zero frequency */
	{
	  var n;                     /* iterates over all tree elements */
	  var prevlen = -1;          /* last emitted length */
	  var curlen;                /* length of current code */

	  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

	  var count = 0;             /* repeat count of the current code */
	  var max_count = 7;         /* max repeat count */
	  var min_count = 4;         /* min repeat count */

	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }
	  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

	    if (++count < max_count && curlen === nextlen) {
	      continue;

	    } else if (count < min_count) {
	      s.bl_tree[curlen * 2]/*.Freq*/ += count;

	    } else if (curlen !== 0) {

	      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
	      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

	    } else if (count <= 10) {
	      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

	    } else {
	      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
	    }

	    count = 0;
	    prevlen = curlen;

	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;

	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;

	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}


	/* ===========================================================================
	 * Send a literal or distance tree in compressed form, using the codes in
	 * bl_tree.
	 */
	function send_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree; /* the tree to be scanned */
	//    int max_code;       /* and its largest code of non zero frequency */
	{
	  var n;                     /* iterates over all tree elements */
	  var prevlen = -1;          /* last emitted length */
	  var curlen;                /* length of current code */

	  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

	  var count = 0;             /* repeat count of the current code */
	  var max_count = 7;         /* max repeat count */
	  var min_count = 4;         /* min repeat count */

	  /* tree[max_code+1].Len = -1; */  /* guard already set */
	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }

	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

	    if (++count < max_count && curlen === nextlen) {
	      continue;

	    } else if (count < min_count) {
	      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

	    } else if (curlen !== 0) {
	      if (curlen !== prevlen) {
	        send_code(s, curlen, s.bl_tree);
	        count--;
	      }
	      //Assert(count >= 3 && count <= 6, " 3_6?");
	      send_code(s, REP_3_6, s.bl_tree);
	      send_bits(s, count - 3, 2);

	    } else if (count <= 10) {
	      send_code(s, REPZ_3_10, s.bl_tree);
	      send_bits(s, count - 3, 3);

	    } else {
	      send_code(s, REPZ_11_138, s.bl_tree);
	      send_bits(s, count - 11, 7);
	    }

	    count = 0;
	    prevlen = curlen;
	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;

	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;

	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}


	/* ===========================================================================
	 * Construct the Huffman tree for the bit lengths and return the index in
	 * bl_order of the last bit length code to send.
	 */
	function build_bl_tree(s) {
	  var max_blindex;  /* index of last bit length code of non zero freq */

	  /* Determine the bit length frequencies for literal and distance trees */
	  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
	  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

	  /* Build the bit length tree: */
	  build_tree(s, s.bl_desc);
	  /* opt_len now includes the length of the tree representations, except
	   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
	   */

	  /* Determine the number of bit length codes to send. The pkzip format
	   * requires that at least 4 bit length codes be sent. (appnote.txt says
	   * 3 but the actual value used is 4.)
	   */
	  for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {
	    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
	      break;
	    }
	  }
	  /* Update opt_len to include the bit length tree and counts */
	  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
	  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
	  //        s->opt_len, s->static_len));

	  return max_blindex;
	}


	/* ===========================================================================
	 * Send the header for a block using dynamic Huffman trees: the counts, the
	 * lengths of the bit length codes, the literal tree and the distance tree.
	 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
	 */
	function send_all_trees(s, lcodes, dcodes, blcodes)
	//    deflate_state *s;
	//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
	{
	  var rank;                    /* index in bl_order */

	  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
	  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
	  //        "too many codes");
	  //Tracev((stderr, "\nbl counts: "));
	  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
	  send_bits(s, dcodes - 1,   5);
	  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
	  for (rank = 0; rank < blcodes; rank++) {
	    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
	    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
	  }
	  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

	  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
	  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

	  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
	  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
	}


	/* ===========================================================================
	 * Check if the data type is TEXT or BINARY, using the following algorithm:
	 * - TEXT if the two conditions below are satisfied:
	 *    a) There are no non-portable control characters belonging to the
	 *       "black list" (0..6, 14..25, 28..31).
	 *    b) There is at least one printable character belonging to the
	 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
	 * - BINARY otherwise.
	 * - The following partially-portable control characters form a
	 *   "gray list" that is ignored in this detection algorithm:
	 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
	 * IN assertion: the fields Freq of dyn_ltree are set.
	 */
	function detect_data_type(s) {
	  /* black_mask is the bit mask of black-listed bytes
	   * set bits 0..6, 14..25, and 28..31
	   * 0xf3ffc07f = binary 11110011111111111100000001111111
	   */
	  var black_mask = 0xf3ffc07f;
	  var n;

	  /* Check for non-textual ("black-listed") bytes. */
	  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
	    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
	      return Z_BINARY;
	    }
	  }

	  /* Check for textual ("white-listed") bytes. */
	  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
	      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
	    return Z_TEXT;
	  }
	  for (n = 32; n < LITERALS$1; n++) {
	    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
	      return Z_TEXT;
	    }
	  }

	  /* There are no "black-listed" or "white-listed" bytes:
	   * this stream either is empty or has tolerated ("gray-listed") bytes only.
	   */
	  return Z_BINARY;
	}


	var static_init_done = false;

	/* ===========================================================================
	 * Initialize the tree data structures for a new zlib stream.
	 */
	function _tr_init(s)
	{

	  if (!static_init_done) {
	    tr_static_init();
	    static_init_done = true;
	  }

	  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
	  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
	  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

	  s.bi_buf = 0;
	  s.bi_valid = 0;

	  /* Initialize the first block of the first file: */
	  init_block(s);
	}


	/* ===========================================================================
	 * Send a stored block
	 */
	function _tr_stored_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
	  copy_block(s, buf, stored_len, true); /* with header */
	}


	/* ===========================================================================
	 * Send one empty static block to give enough lookahead for inflate.
	 * This takes 10 bits, of which 7 may remain in the bit buffer.
	 */
	function _tr_align(s) {
	  send_bits(s, STATIC_TREES << 1, 3);
	  send_code(s, END_BLOCK, static_ltree);
	  bi_flush(s);
	}


	/* ===========================================================================
	 * Determine the best encoding for the current block: dynamic trees, static
	 * trees or store, and output the encoded block to the zip file.
	 */
	function _tr_flush_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block, or NULL if too old */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
	  var max_blindex = 0;        /* index of last bit length code of non zero freq */

	  /* Build the Huffman trees unless a stored block is forced */
	  if (s.level > 0) {

	    /* Check if the file is binary or text */
	    if (s.strm.data_type === Z_UNKNOWN$1) {
	      s.strm.data_type = detect_data_type(s);
	    }

	    /* Construct the literal and distance trees */
	    build_tree(s, s.l_desc);
	    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));

	    build_tree(s, s.d_desc);
	    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));
	    /* At this point, opt_len and static_len are the total bit lengths of
	     * the compressed block data, excluding the tree representations.
	     */

	    /* Build the bit length tree for the above two trees, and get the index
	     * in bl_order of the last bit length code to send.
	     */
	    max_blindex = build_bl_tree(s);

	    /* Determine the best encoding. Compute the block lengths in bytes. */
	    opt_lenb = (s.opt_len + 3 + 7) >>> 3;
	    static_lenb = (s.static_len + 3 + 7) >>> 3;

	    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
	    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
	    //        s->last_lit));

	    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

	  } else {
	    // Assert(buf != (char*)0, "lost buf");
	    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
	  }

	  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
	    /* 4: two words for the lengths */

	    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
	     * Otherwise we can't have processed more than WSIZE input bytes since
	     * the last block flush, because compression would have been
	     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
	     * transform a block into a stored block.
	     */
	    _tr_stored_block(s, buf, stored_len, last);

	  } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {

	    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
	    compress_block(s, static_ltree, static_dtree);

	  } else {
	    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
	    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
	    compress_block(s, s.dyn_ltree, s.dyn_dtree);
	  }
	  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
	  /* The above check is made mod 2^32, for files larger than 512 MB
	   * and uLong implemented on 32 bits.
	   */
	  init_block(s);

	  if (last) {
	    bi_windup(s);
	  }
	  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
	  //       s->compressed_len-7*last));
	}

	/* ===========================================================================
	 * Save the match info and tally the frequency counts. Return true if
	 * the current block must be flushed.
	 */
	function _tr_tally(s, dist, lc)
	//    deflate_state *s;
	//    unsigned dist;  /* distance of matched string */
	//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
	{
	  //var out_length, in_length, dcode;

	  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;
	  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;

	  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
	  s.last_lit++;

	  if (dist === 0) {
	    /* lc is the unmatched char */
	    s.dyn_ltree[lc * 2]/*.Freq*/++;
	  } else {
	    s.matches++;
	    /* Here, lc is the match length - MIN_MATCH */
	    dist--;             /* dist = match distance - 1 */
	    //Assert((ush)dist < (ush)MAX_DIST(s) &&
	    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
	    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

	    s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]/*.Freq*/++;
	    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
	  }

	// (!) This block is disabled in zlib defaults,
	// don't enable it for binary compatibility

	//#ifdef TRUNCATE_BLOCK
	//  /* Try to guess if it is profitable to stop the current block here */
	//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
	//    /* Compute an upper bound for the compressed length */
	//    out_length = s.last_lit*8;
	//    in_length = s.strstart - s.block_start;
	//
	//    for (dcode = 0; dcode < D_CODES; dcode++) {
	//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
	//    }
	//    out_length >>>= 3;
	//    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
	//    //       s->last_lit, in_length, out_length,
	//    //       100L - out_length*100L/in_length));
	//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
	//      return true;
	//    }
	//  }
	//#endif

	  return (s.last_lit === s.lit_bufsize - 1);
	  /* We avoid equality with lit_bufsize because of wraparound at 64K
	   * on 16 bit machines and because stored blocks are restricted to
	   * 64K-1 bytes.
	   */
	}

	trees$1._tr_init  = _tr_init;
	trees$1._tr_stored_block = _tr_stored_block;
	trees$1._tr_flush_block  = _tr_flush_block;
	trees$1._tr_tally = _tr_tally;
	trees$1._tr_align = _tr_align;

	// Note: adler32 takes 12% for level 0 and 2% for level 6.
	// It isn't worth it to make additional optimizations as in original.
	// Small size is preferable.

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	function adler32$2(adler, buf, len, pos) {
	  var s1 = (adler & 0xffff) |0,
	      s2 = ((adler >>> 16) & 0xffff) |0,
	      n = 0;

	  while (len !== 0) {
	    // Set limit ~ twice less than 5552, to keep
	    // s2 in 31-bits, because we force signed ints.
	    // in other case %= will fail.
	    n = len > 2000 ? 2000 : len;
	    len -= n;

	    do {
	      s1 = (s1 + buf[pos++]) |0;
	      s2 = (s2 + s1) |0;
	    } while (--n);

	    s1 %= 65521;
	    s2 %= 65521;
	  }

	  return (s1 | (s2 << 16)) |0;
	}


	var adler32_1 = adler32$2;

	// Note: we can't get significant speed boost here.
	// So write code to minimize size - no pregenerated tables
	// and array tools dependencies.

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	// Use ordinary array, since untyped makes no boost here
	function makeTable() {
	  var c, table = [];

	  for (var n = 0; n < 256; n++) {
	    c = n;
	    for (var k = 0; k < 8; k++) {
	      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
	    }
	    table[n] = c;
	  }

	  return table;
	}

	// Create table on load. Just 255 signed longs. Not a problem.
	var crcTable = makeTable();


	function crc32$2(crc, buf, len, pos) {
	  var t = crcTable,
	      end = pos + len;

	  crc ^= -1;

	  for (var i = pos; i < end; i++) {
	    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
	  }

	  return (crc ^ (-1)); // >>> 0;
	}


	var crc32_1 = crc32$2;

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	var messages$3 = {
	  2:      'need dictionary',     /* Z_NEED_DICT       2  */
	  1:      'stream end',          /* Z_STREAM_END      1  */
	  0:      '',                    /* Z_OK              0  */
	  '-1':   'file error',          /* Z_ERRNO         (-1) */
	  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
	  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
	  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
	  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
	  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
	};

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	var utils$z   = common$5;
	var trees   = trees$1;
	var adler32$1 = adler32_1;
	var crc32$1   = crc32_1;
	var msg$2     = messages$3;

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	/* Allowed flush values; see deflate() and inflate() below for details */
	var Z_NO_FLUSH$1      = 0;
	var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	var Z_FULL_FLUSH    = 3;
	var Z_FINISH$2        = 4;
	var Z_BLOCK$1         = 5;
	//var Z_TREES         = 6;


	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK$2            = 0;
	var Z_STREAM_END$2    = 1;
	//var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR$1  = -2;
	var Z_DATA_ERROR$1    = -3;
	//var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR$1     = -5;
	//var Z_VERSION_ERROR = -6;


	/* compression levels */
	//var Z_NO_COMPRESSION      = 0;
	//var Z_BEST_SPEED          = 1;
	//var Z_BEST_COMPRESSION    = 9;
	var Z_DEFAULT_COMPRESSION$1 = -1;


	var Z_FILTERED            = 1;
	var Z_HUFFMAN_ONLY        = 2;
	var Z_RLE                 = 3;
	var Z_FIXED               = 4;
	var Z_DEFAULT_STRATEGY$1    = 0;

	/* Possible values of the data_type field (though see inflate()) */
	//var Z_BINARY              = 0;
	//var Z_TEXT                = 1;
	//var Z_ASCII               = 1; // = Z_TEXT
	var Z_UNKNOWN             = 2;


	/* The deflate compression method */
	var Z_DEFLATED$2  = 8;

	/*============================================================================*/


	var MAX_MEM_LEVEL = 9;
	/* Maximum value for memLevel in deflateInit2 */
	var MAX_WBITS$1 = 15;
	/* 32K LZ77 window */
	var DEF_MEM_LEVEL = 8;


	var LENGTH_CODES  = 29;
	/* number of length codes, not counting the special END_BLOCK code */
	var LITERALS      = 256;
	/* number of literal bytes 0..255 */
	var L_CODES       = LITERALS + 1 + LENGTH_CODES;
	/* number of Literal or Length codes, including the END_BLOCK code */
	var D_CODES       = 30;
	/* number of distance codes */
	var BL_CODES      = 19;
	/* number of codes used to transfer the bit lengths */
	var HEAP_SIZE     = 2 * L_CODES + 1;
	/* maximum heap size */
	var MAX_BITS  = 15;
	/* All codes must not exceed MAX_BITS bits */

	var MIN_MATCH = 3;
	var MAX_MATCH = 258;
	var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

	var PRESET_DICT = 0x20;

	var INIT_STATE = 42;
	var EXTRA_STATE = 69;
	var NAME_STATE = 73;
	var COMMENT_STATE = 91;
	var HCRC_STATE = 103;
	var BUSY_STATE = 113;
	var FINISH_STATE = 666;

	var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
	var BS_BLOCK_DONE     = 2; /* block flush performed */
	var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
	var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

	var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

	function err(strm, errorCode) {
	  strm.msg = msg$2[errorCode];
	  return errorCode;
	}

	function rank(f) {
	  return ((f) << 1) - ((f) > 4 ? 9 : 0);
	}

	function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }


	/* =========================================================================
	 * Flush as much pending output as possible. All deflate() output goes
	 * through this function so some applications may wish to modify it
	 * to avoid allocating a large strm->output buffer and copying into it.
	 * (See also read_buf()).
	 */
	function flush_pending(strm) {
	  var s = strm.state;

	  //_tr_flush_bits(s);
	  var len = s.pending;
	  if (len > strm.avail_out) {
	    len = strm.avail_out;
	  }
	  if (len === 0) { return; }

	  utils$z.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
	  strm.next_out += len;
	  s.pending_out += len;
	  strm.total_out += len;
	  strm.avail_out -= len;
	  s.pending -= len;
	  if (s.pending === 0) {
	    s.pending_out = 0;
	  }
	}


	function flush_block_only(s, last) {
	  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
	  s.block_start = s.strstart;
	  flush_pending(s.strm);
	}


	function put_byte(s, b) {
	  s.pending_buf[s.pending++] = b;
	}


	/* =========================================================================
	 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
	 * IN assertion: the stream state is correct and there is enough room in
	 * pending_buf.
	 */
	function putShortMSB(s, b) {
	//  put_byte(s, (Byte)(b >> 8));
	//  put_byte(s, (Byte)(b & 0xff));
	  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
	  s.pending_buf[s.pending++] = b & 0xff;
	}


	/* ===========================================================================
	 * Read a new buffer from the current input stream, update the adler32
	 * and total number of bytes read.  All deflate() input goes through
	 * this function so some applications may wish to modify it to avoid
	 * allocating a large strm->input buffer and copying from it.
	 * (See also flush_pending()).
	 */
	function read_buf(strm, buf, start, size) {
	  var len = strm.avail_in;

	  if (len > size) { len = size; }
	  if (len === 0) { return 0; }

	  strm.avail_in -= len;

	  // zmemcpy(buf, strm->next_in, len);
	  utils$z.arraySet(buf, strm.input, strm.next_in, len, start);
	  if (strm.state.wrap === 1) {
	    strm.adler = adler32$1(strm.adler, buf, len, start);
	  }

	  else if (strm.state.wrap === 2) {
	    strm.adler = crc32$1(strm.adler, buf, len, start);
	  }

	  strm.next_in += len;
	  strm.total_in += len;

	  return len;
	}


	/* ===========================================================================
	 * Set match_start to the longest match starting at the given string and
	 * return its length. Matches shorter or equal to prev_length are discarded,
	 * in which case the result is equal to prev_length and match_start is
	 * garbage.
	 * IN assertions: cur_match is the head of the hash chain for the current
	 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
	 * OUT assertion: the match length is not greater than s->lookahead.
	 */
	function longest_match(s, cur_match) {
	  var chain_length = s.max_chain_length;      /* max hash chain length */
	  var scan = s.strstart; /* current string */
	  var match;                       /* matched string */
	  var len;                           /* length of current match */
	  var best_len = s.prev_length;              /* best match length so far */
	  var nice_match = s.nice_match;             /* stop if match long enough */
	  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
	      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

	  var _win = s.window; // shortcut

	  var wmask = s.w_mask;
	  var prev  = s.prev;

	  /* Stop when cur_match becomes <= limit. To simplify the code,
	   * we prevent matches with the string of window index 0.
	   */

	  var strend = s.strstart + MAX_MATCH;
	  var scan_end1  = _win[scan + best_len - 1];
	  var scan_end   = _win[scan + best_len];

	  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
	   * It is easy to get rid of this optimization if necessary.
	   */
	  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

	  /* Do not waste too much time if we already have a good match: */
	  if (s.prev_length >= s.good_match) {
	    chain_length >>= 2;
	  }
	  /* Do not look for matches beyond the end of the input. This is necessary
	   * to make deflate deterministic.
	   */
	  if (nice_match > s.lookahead) { nice_match = s.lookahead; }

	  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

	  do {
	    // Assert(cur_match < s->strstart, "no future");
	    match = cur_match;

	    /* Skip to next match if the match length cannot increase
	     * or if the match length is less than 2.  Note that the checks below
	     * for insufficient lookahead only occur occasionally for performance
	     * reasons.  Therefore uninitialized memory will be accessed, and
	     * conditional jumps will be made that depend on those values.
	     * However the length of the match is limited to the lookahead, so
	     * the output of deflate is not affected by the uninitialized values.
	     */

	    if (_win[match + best_len]     !== scan_end  ||
	        _win[match + best_len - 1] !== scan_end1 ||
	        _win[match]                !== _win[scan] ||
	        _win[++match]              !== _win[scan + 1]) {
	      continue;
	    }

	    /* The check at best_len-1 can be removed because it will be made
	     * again later. (This heuristic is not always a win.)
	     * It is not necessary to compare scan[2] and match[2] since they
	     * are always equal when the other bytes match, given that
	     * the hash keys are equal and that HASH_BITS >= 8.
	     */
	    scan += 2;
	    match++;
	    // Assert(*scan == *match, "match[2]?");

	    /* We check for insufficient lookahead only every 8th comparison;
	     * the 256th check will be made at strstart+258.
	     */
	    do {
	      /*jshint noempty:false*/
	    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
	             scan < strend);

	    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

	    len = MAX_MATCH - (strend - scan);
	    scan = strend - MAX_MATCH;

	    if (len > best_len) {
	      s.match_start = cur_match;
	      best_len = len;
	      if (len >= nice_match) {
	        break;
	      }
	      scan_end1  = _win[scan + best_len - 1];
	      scan_end   = _win[scan + best_len];
	    }
	  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

	  if (best_len <= s.lookahead) {
	    return best_len;
	  }
	  return s.lookahead;
	}


	/* ===========================================================================
	 * Fill the window when the lookahead becomes insufficient.
	 * Updates strstart and lookahead.
	 *
	 * IN assertion: lookahead < MIN_LOOKAHEAD
	 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
	 *    At least one byte has been read, or avail_in == 0; reads are
	 *    performed for at least two bytes (required for the zip translate_eol
	 *    option -- not supported here).
	 */
	function fill_window(s) {
	  var _w_size = s.w_size;
	  var p, n, m, more, str;

	  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

	  do {
	    more = s.window_size - s.lookahead - s.strstart;

	    // JS ints have 32 bit, block below not needed
	    /* Deal with !@#$% 64K limit: */
	    //if (sizeof(int) <= 2) {
	    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
	    //        more = wsize;
	    //
	    //  } else if (more == (unsigned)(-1)) {
	    //        /* Very unlikely, but possible on 16 bit machine if
	    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
	    //         */
	    //        more--;
	    //    }
	    //}


	    /* If the window is almost full and there is insufficient lookahead,
	     * move the upper half to the lower one to make room in the upper half.
	     */
	    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

	      utils$z.arraySet(s.window, s.window, _w_size, _w_size, 0);
	      s.match_start -= _w_size;
	      s.strstart -= _w_size;
	      /* we now have strstart >= MAX_DIST */
	      s.block_start -= _w_size;

	      /* Slide the hash table (could be avoided with 32 bit values
	       at the expense of memory usage). We slide even when level == 0
	       to keep the hash table consistent if we switch back to level > 0
	       later. (Using level 0 permanently is not an optimal usage of
	       zlib, so we don't care about this pathological case.)
	       */

	      n = s.hash_size;
	      p = n;
	      do {
	        m = s.head[--p];
	        s.head[p] = (m >= _w_size ? m - _w_size : 0);
	      } while (--n);

	      n = _w_size;
	      p = n;
	      do {
	        m = s.prev[--p];
	        s.prev[p] = (m >= _w_size ? m - _w_size : 0);
	        /* If n is not on any hash chain, prev[n] is garbage but
	         * its value will never be used.
	         */
	      } while (--n);

	      more += _w_size;
	    }
	    if (s.strm.avail_in === 0) {
	      break;
	    }

	    /* If there was no sliding:
	     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
	     *    more == window_size - lookahead - strstart
	     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
	     * => more >= window_size - 2*WSIZE + 2
	     * In the BIG_MEM or MMAP case (not yet supported),
	     *   window_size == input_size + MIN_LOOKAHEAD  &&
	     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
	     * Otherwise, window_size == 2*WSIZE so more >= 2.
	     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
	     */
	    //Assert(more >= 2, "more < 2");
	    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
	    s.lookahead += n;

	    /* Initialize the hash value now that we have some input: */
	    if (s.lookahead + s.insert >= MIN_MATCH) {
	      str = s.strstart - s.insert;
	      s.ins_h = s.window[str];

	      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;
	//#if MIN_MATCH != 3
	//        Call update_hash() MIN_MATCH-3 more times
	//#endif
	      while (s.insert) {
	        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
	        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

	        s.prev[str & s.w_mask] = s.head[s.ins_h];
	        s.head[s.ins_h] = str;
	        str++;
	        s.insert--;
	        if (s.lookahead + s.insert < MIN_MATCH) {
	          break;
	        }
	      }
	    }
	    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
	     * but this is not important since only literal bytes will be emitted.
	     */

	  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

	  /* If the WIN_INIT bytes after the end of the current data have never been
	   * written, then zero those bytes in order to avoid memory check reports of
	   * the use of uninitialized (or uninitialised as Julian writes) bytes by
	   * the longest match routines.  Update the high water mark for the next
	   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
	   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
	   */
	//  if (s.high_water < s.window_size) {
	//    var curr = s.strstart + s.lookahead;
	//    var init = 0;
	//
	//    if (s.high_water < curr) {
	//      /* Previous high water mark below current data -- zero WIN_INIT
	//       * bytes or up to end of window, whichever is less.
	//       */
	//      init = s.window_size - curr;
	//      if (init > WIN_INIT)
	//        init = WIN_INIT;
	//      zmemzero(s->window + curr, (unsigned)init);
	//      s->high_water = curr + init;
	//    }
	//    else if (s->high_water < (ulg)curr + WIN_INIT) {
	//      /* High water mark at or above current data, but below current data
	//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
	//       * to end of window, whichever is less.
	//       */
	//      init = (ulg)curr + WIN_INIT - s->high_water;
	//      if (init > s->window_size - s->high_water)
	//        init = s->window_size - s->high_water;
	//      zmemzero(s->window + s->high_water, (unsigned)init);
	//      s->high_water += init;
	//    }
	//  }
	//
	//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
	//    "not enough room for search");
	}

	/* ===========================================================================
	 * Copy without compression as much as possible from the input stream, return
	 * the current block state.
	 * This function does not insert new strings in the dictionary since
	 * uncompressible data is probably not useful. This function is used
	 * only for the level=0 compression option.
	 * NOTE: this function should be optimized to avoid extra copying from
	 * window to pending_buf.
	 */
	function deflate_stored(s, flush) {
	  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
	   * to pending_buf_size, and each stored block has a 5 byte header:
	   */
	  var max_block_size = 0xffff;

	  if (max_block_size > s.pending_buf_size - 5) {
	    max_block_size = s.pending_buf_size - 5;
	  }

	  /* Copy as much as possible from input to output: */
	  for (;;) {
	    /* Fill the window as much as possible: */
	    if (s.lookahead <= 1) {

	      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
	      //  s->block_start >= (long)s->w_size, "slide too late");
	//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
	//        s.block_start >= s.w_size)) {
	//        throw  new Error("slide too late");
	//      }

	      fill_window(s);
	      if (s.lookahead === 0 && flush === Z_NO_FLUSH$1) {
	        return BS_NEED_MORE;
	      }

	      if (s.lookahead === 0) {
	        break;
	      }
	      /* flush the current block */
	    }
	    //Assert(s->block_start >= 0L, "block gone");
	//    if (s.block_start < 0) throw new Error("block gone");

	    s.strstart += s.lookahead;
	    s.lookahead = 0;

	    /* Emit a stored block if pending_buf will be full: */
	    var max_start = s.block_start + max_block_size;

	    if (s.strstart === 0 || s.strstart >= max_start) {
	      /* strstart == 0 is possible when wraparound on 16-bit machine */
	      s.lookahead = s.strstart - max_start;
	      s.strstart = max_start;
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/


	    }
	    /* Flush if we may have to slide, otherwise block_start may become
	     * negative and the data will be gone:
	     */
	    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }

	  s.insert = 0;

	  if (flush === Z_FINISH$2) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }

	  if (s.strstart > s.block_start) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }

	  return BS_NEED_MORE;
	}

	/* ===========================================================================
	 * Compress as much as possible from the input stream, return the current
	 * block state.
	 * This function does not perform lazy evaluation of matches and inserts
	 * new strings in the dictionary only for unmatched strings or for short
	 * matches. It is used only for the fast compression options.
	 */
	function deflate_fast(s, flush) {
	  var hash_head;        /* head of the hash chain */
	  var bflush;           /* set if current block must be flushed */

	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$1) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) {
	        break; /* flush the current block */
	      }
	    }

	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0/*NIL*/;
	    if (s.lookahead >= MIN_MATCH) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }

	    /* Find the longest match, discarding those <= prev_length.
	     * At this point we have always match_length < MIN_MATCH
	     */
	    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
	      /* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */
	      s.match_length = longest_match(s, hash_head);
	      /* longest_match() sets match_start */
	    }
	    if (s.match_length >= MIN_MATCH) {
	      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

	      /*** _tr_tally_dist(s, s.strstart - s.match_start,
	                     s.match_length - MIN_MATCH, bflush); ***/
	      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

	      s.lookahead -= s.match_length;

	      /* Insert new strings in the hash table only if the match length
	       * is not too large. This saves time but degrades compression.
	       */
	      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
	        s.match_length--; /* string at strstart already in table */
	        do {
	          s.strstart++;
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
	           * always MIN_MATCH bytes ahead.
	           */
	        } while (--s.match_length !== 0);
	        s.strstart++;
	      } else
	      {
	        s.strstart += s.match_length;
	        s.match_length = 0;
	        s.ins_h = s.window[s.strstart];
	        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
	        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;

	//#if MIN_MATCH != 3
	//                Call UPDATE_HASH() MIN_MATCH-3 more times
	//#endif
	        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
	         * matter since it will be recomputed at next deflate call.
	         */
	      }
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s.window[s.strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
	  if (flush === Z_FINISH$2) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* ===========================================================================
	 * Same as above, but achieves better compression. We use a lazy
	 * evaluation for matches: a match is finally adopted only if there is
	 * no better match at the next window position.
	 */
	function deflate_slow(s, flush) {
	  var hash_head;          /* head of hash chain */
	  var bflush;              /* set if current block must be flushed */

	  var max_insert;

	  /* Process the input block. */
	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$1) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) { break; } /* flush the current block */
	    }

	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0/*NIL*/;
	    if (s.lookahead >= MIN_MATCH) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }

	    /* Find the longest match, discarding those <= prev_length.
	     */
	    s.prev_length = s.match_length;
	    s.prev_match = s.match_start;
	    s.match_length = MIN_MATCH - 1;

	    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
	        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
	      /* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */
	      s.match_length = longest_match(s, hash_head);
	      /* longest_match() sets match_start */

	      if (s.match_length <= 5 &&
	         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

	        /* If prev_match is also MIN_MATCH, match_start is garbage
	         * but we will ignore the current match anyway.
	         */
	        s.match_length = MIN_MATCH - 1;
	      }
	    }
	    /* If there was a match at the previous step and the current
	     * match is not better, output the previous match:
	     */
	    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
	      max_insert = s.strstart + s.lookahead - MIN_MATCH;
	      /* Do not insert strings in hash table beyond this. */

	      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

	      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
	                     s.prev_length - MIN_MATCH, bflush);***/
	      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
	      /* Insert in hash table all strings up to the end of the match.
	       * strstart-1 and strstart are already inserted. If there is not
	       * enough lookahead, the last two strings are not inserted in
	       * the hash table.
	       */
	      s.lookahead -= s.prev_length - 1;
	      s.prev_length -= 2;
	      do {
	        if (++s.strstart <= max_insert) {
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	        }
	      } while (--s.prev_length !== 0);
	      s.match_available = 0;
	      s.match_length = MIN_MATCH - 1;
	      s.strstart++;

	      if (bflush) {
	        /*** FLUSH_BLOCK(s, 0); ***/
	        flush_block_only(s, false);
	        if (s.strm.avail_out === 0) {
	          return BS_NEED_MORE;
	        }
	        /***/
	      }

	    } else if (s.match_available) {
	      /* If there was no match at the previous position, output a
	       * single literal. If there was a match but the current match
	       * is longer, truncate the previous match to a single literal.
	       */
	      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

	      if (bflush) {
	        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
	        flush_block_only(s, false);
	        /***/
	      }
	      s.strstart++;
	      s.lookahead--;
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	    } else {
	      /* There is no previous match to compare with, wait for
	       * the next step to decide.
	       */
	      s.match_available = 1;
	      s.strstart++;
	      s.lookahead--;
	    }
	  }
	  //Assert (flush != Z_NO_FLUSH, "no flush?");
	  if (s.match_available) {
	    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);

	    s.match_available = 0;
	  }
	  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
	  if (flush === Z_FINISH$2) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }

	  return BS_BLOCK_DONE;
	}


	/* ===========================================================================
	 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
	 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
	 * deflate switches away from Z_RLE.)
	 */
	function deflate_rle(s, flush) {
	  var bflush;            /* set if current block must be flushed */
	  var prev;              /* byte at distance one to match */
	  var scan, strend;      /* scan goes up to strend for length of run */

	  var _win = s.window;

	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the longest run, plus one for the unrolled loop.
	     */
	    if (s.lookahead <= MAX_MATCH) {
	      fill_window(s);
	      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$1) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) { break; } /* flush the current block */
	    }

	    /* See how many times the previous byte repeats */
	    s.match_length = 0;
	    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
	      scan = s.strstart - 1;
	      prev = _win[scan];
	      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
	        strend = s.strstart + MAX_MATCH;
	        do {
	          /*jshint noempty:false*/
	        } while (prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 prev === _win[++scan] && prev === _win[++scan] &&
	                 scan < strend);
	        s.match_length = MAX_MATCH - (strend - scan);
	        if (s.match_length > s.lookahead) {
	          s.match_length = s.lookahead;
	        }
	      }
	      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
	    }

	    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
	    if (s.match_length >= MIN_MATCH) {
	      //check_match(s, s.strstart, s.strstart - 1, s.match_length);

	      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
	      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);

	      s.lookahead -= s.match_length;
	      s.strstart += s.match_length;
	      s.match_length = 0;
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s->window[s->strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);

	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH$2) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* ===========================================================================
	 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
	 * (It will be regenerated if this run of deflate switches away from Huffman.)
	 */
	function deflate_huff(s, flush) {
	  var bflush;             /* set if current block must be flushed */

	  for (;;) {
	    /* Make sure that we have a literal to write. */
	    if (s.lookahead === 0) {
	      fill_window(s);
	      if (s.lookahead === 0) {
	        if (flush === Z_NO_FLUSH$1) {
	          return BS_NEED_MORE;
	        }
	        break;      /* flush the current block */
	      }
	    }

	    /* Output a literal byte */
	    s.match_length = 0;
	    //Tracevv((stderr,"%c", s->window[s->strstart]));
	    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
	    s.lookahead--;
	    s.strstart++;
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH$2) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}

	/* Values for max_lazy_match, good_match and max_chain_length, depending on
	 * the desired pack level (0..9). The values given below have been tuned to
	 * exclude worst case performance for pathological files. Better values may be
	 * found for specific files.
	 */
	function Config(good_length, max_lazy, nice_length, max_chain, func) {
	  this.good_length = good_length;
	  this.max_lazy = max_lazy;
	  this.nice_length = nice_length;
	  this.max_chain = max_chain;
	  this.func = func;
	}

	var configuration_table;

	configuration_table = [
	  /*      good lazy nice chain */
	  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
	  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
	  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
	  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

	  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
	  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
	  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
	  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
	  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
	  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
	];


	/* ===========================================================================
	 * Initialize the "longest match" routines for a new zlib stream
	 */
	function lm_init(s) {
	  s.window_size = 2 * s.w_size;

	  /*** CLEAR_HASH(s); ***/
	  zero(s.head); // Fill with NIL (= 0);

	  /* Set the default configuration parameters:
	   */
	  s.max_lazy_match = configuration_table[s.level].max_lazy;
	  s.good_match = configuration_table[s.level].good_length;
	  s.nice_match = configuration_table[s.level].nice_length;
	  s.max_chain_length = configuration_table[s.level].max_chain;

	  s.strstart = 0;
	  s.block_start = 0;
	  s.lookahead = 0;
	  s.insert = 0;
	  s.match_length = s.prev_length = MIN_MATCH - 1;
	  s.match_available = 0;
	  s.ins_h = 0;
	}


	function DeflateState() {
	  this.strm = null;            /* pointer back to this zlib stream */
	  this.status = 0;            /* as the name implies */
	  this.pending_buf = null;      /* output still pending */
	  this.pending_buf_size = 0;  /* size of pending_buf */
	  this.pending_out = 0;       /* next pending byte to output to the stream */
	  this.pending = 0;           /* nb of bytes in the pending buffer */
	  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
	  this.gzhead = null;         /* gzip header information to write */
	  this.gzindex = 0;           /* where in extra, name, or comment */
	  this.method = Z_DEFLATED$2; /* can only be DEFLATED */
	  this.last_flush = -1;   /* value of flush param for previous deflate call */

	  this.w_size = 0;  /* LZ77 window size (32K by default) */
	  this.w_bits = 0;  /* log2(w_size)  (8..16) */
	  this.w_mask = 0;  /* w_size - 1 */

	  this.window = null;
	  /* Sliding window. Input bytes are read into the second half of the window,
	   * and move to the first half later to keep a dictionary of at least wSize
	   * bytes. With this organization, matches are limited to a distance of
	   * wSize-MAX_MATCH bytes, but this ensures that IO is always
	   * performed with a length multiple of the block size.
	   */

	  this.window_size = 0;
	  /* Actual size of window: 2*wSize, except when the user input buffer
	   * is directly used as sliding window.
	   */

	  this.prev = null;
	  /* Link to older string with same hash index. To limit the size of this
	   * array to 64K, this link is maintained only for the last 32K strings.
	   * An index in this array is thus a window index modulo 32K.
	   */

	  this.head = null;   /* Heads of the hash chains or NIL. */

	  this.ins_h = 0;       /* hash index of string to be inserted */
	  this.hash_size = 0;   /* number of elements in hash table */
	  this.hash_bits = 0;   /* log2(hash_size) */
	  this.hash_mask = 0;   /* hash_size-1 */

	  this.hash_shift = 0;
	  /* Number of bits by which ins_h must be shifted at each input
	   * step. It must be such that after MIN_MATCH steps, the oldest
	   * byte no longer takes part in the hash key, that is:
	   *   hash_shift * MIN_MATCH >= hash_bits
	   */

	  this.block_start = 0;
	  /* Window position at the beginning of the current output block. Gets
	   * negative when the window is moved backwards.
	   */

	  this.match_length = 0;      /* length of best match */
	  this.prev_match = 0;        /* previous match */
	  this.match_available = 0;   /* set if previous match exists */
	  this.strstart = 0;          /* start of string to insert */
	  this.match_start = 0;       /* start of matching string */
	  this.lookahead = 0;         /* number of valid bytes ahead in window */

	  this.prev_length = 0;
	  /* Length of the best match at previous step. Matches not greater than this
	   * are discarded. This is used in the lazy match evaluation.
	   */

	  this.max_chain_length = 0;
	  /* To speed up deflation, hash chains are never searched beyond this
	   * length.  A higher limit improves compression ratio but degrades the
	   * speed.
	   */

	  this.max_lazy_match = 0;
	  /* Attempt to find a better match only when the current match is strictly
	   * smaller than this value. This mechanism is used only for compression
	   * levels >= 4.
	   */
	  // That's alias to max_lazy_match, don't use directly
	  //this.max_insert_length = 0;
	  /* Insert new strings in the hash table only if the match length is not
	   * greater than this length. This saves time but degrades compression.
	   * max_insert_length is used only for compression levels <= 3.
	   */

	  this.level = 0;     /* compression level (1..9) */
	  this.strategy = 0;  /* favor or force Huffman coding*/

	  this.good_match = 0;
	  /* Use a faster search when the previous match is longer than this */

	  this.nice_match = 0; /* Stop searching when current match exceeds this */

	              /* used by trees.c: */

	  /* Didn't use ct_data typedef below to suppress compiler warning */

	  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
	  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
	  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

	  // Use flat array of DOUBLE size, with interleaved fata,
	  // because JS does not support effective
	  this.dyn_ltree  = new utils$z.Buf16(HEAP_SIZE * 2);
	  this.dyn_dtree  = new utils$z.Buf16((2 * D_CODES + 1) * 2);
	  this.bl_tree    = new utils$z.Buf16((2 * BL_CODES + 1) * 2);
	  zero(this.dyn_ltree);
	  zero(this.dyn_dtree);
	  zero(this.bl_tree);

	  this.l_desc   = null;         /* desc. for literal tree */
	  this.d_desc   = null;         /* desc. for distance tree */
	  this.bl_desc  = null;         /* desc. for bit length tree */

	  //ush bl_count[MAX_BITS+1];
	  this.bl_count = new utils$z.Buf16(MAX_BITS + 1);
	  /* number of codes at each bit length for an optimal tree */

	  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
	  this.heap = new utils$z.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
	  zero(this.heap);

	  this.heap_len = 0;               /* number of elements in the heap */
	  this.heap_max = 0;               /* element of largest frequency */
	  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
	   * The same heap array is used to build all trees.
	   */

	  this.depth = new utils$z.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
	  zero(this.depth);
	  /* Depth of each subtree used as tie breaker for trees of equal frequency
	   */

	  this.l_buf = 0;          /* buffer index for literals or lengths */

	  this.lit_bufsize = 0;
	  /* Size of match buffer for literals/lengths.  There are 4 reasons for
	   * limiting lit_bufsize to 64K:
	   *   - frequencies can be kept in 16 bit counters
	   *   - if compression is not successful for the first block, all input
	   *     data is still in the window so we can still emit a stored block even
	   *     when input comes from standard input.  (This can also be done for
	   *     all blocks if lit_bufsize is not greater than 32K.)
	   *   - if compression is not successful for a file smaller than 64K, we can
	   *     even emit a stored file instead of a stored block (saving 5 bytes).
	   *     This is applicable only for zip (not gzip or zlib).
	   *   - creating new Huffman trees less frequently may not provide fast
	   *     adaptation to changes in the input data statistics. (Take for
	   *     example a binary file with poorly compressible code followed by
	   *     a highly compressible string table.) Smaller buffer sizes give
	   *     fast adaptation but have of course the overhead of transmitting
	   *     trees more frequently.
	   *   - I can't count above 4
	   */

	  this.last_lit = 0;      /* running index in l_buf */

	  this.d_buf = 0;
	  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
	   * the same number of elements. To use different lengths, an extra flag
	   * array would be necessary.
	   */

	  this.opt_len = 0;       /* bit length of current block with optimal trees */
	  this.static_len = 0;    /* bit length of current block with static trees */
	  this.matches = 0;       /* number of string matches in current block */
	  this.insert = 0;        /* bytes at end of window left to insert */


	  this.bi_buf = 0;
	  /* Output buffer. bits are inserted starting at the bottom (least
	   * significant bits).
	   */
	  this.bi_valid = 0;
	  /* Number of valid bits in bi_buf.  All bits above the last valid bit
	   * are always zero.
	   */

	  // Used for window memory init. We safely ignore it for JS. That makes
	  // sense only for pointers and memory check tools.
	  //this.high_water = 0;
	  /* High water mark offset in window for initialized bytes -- bytes above
	   * this are set to zero in order to avoid memory check warnings when
	   * longest match routines access bytes past the input.  This is then
	   * updated to the new high water mark.
	   */
	}


	function deflateResetKeep(strm) {
	  var s;

	  if (!strm || !strm.state) {
	    return err(strm, Z_STREAM_ERROR$1);
	  }

	  strm.total_in = strm.total_out = 0;
	  strm.data_type = Z_UNKNOWN;

	  s = strm.state;
	  s.pending = 0;
	  s.pending_out = 0;

	  if (s.wrap < 0) {
	    s.wrap = -s.wrap;
	    /* was made negative by deflate(..., Z_FINISH); */
	  }
	  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);
	  strm.adler = (s.wrap === 2) ?
	    0  // crc32(0, Z_NULL, 0)
	  :
	    1; // adler32(0, Z_NULL, 0)
	  s.last_flush = Z_NO_FLUSH$1;
	  trees._tr_init(s);
	  return Z_OK$2;
	}


	function deflateReset(strm) {
	  var ret = deflateResetKeep(strm);
	  if (ret === Z_OK$2) {
	    lm_init(strm.state);
	  }
	  return ret;
	}


	function deflateSetHeader(strm, head) {
	  if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }
	  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR$1; }
	  strm.state.gzhead = head;
	  return Z_OK$2;
	}


	function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
	  if (!strm) { // === Z_NULL
	    return Z_STREAM_ERROR$1;
	  }
	  var wrap = 1;

	  if (level === Z_DEFAULT_COMPRESSION$1) {
	    level = 6;
	  }

	  if (windowBits < 0) { /* suppress zlib wrapper */
	    wrap = 0;
	    windowBits = -windowBits;
	  }

	  else if (windowBits > 15) {
	    wrap = 2;           /* write gzip wrapper instead */
	    windowBits -= 16;
	  }


	  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||
	    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
	    strategy < 0 || strategy > Z_FIXED) {
	    return err(strm, Z_STREAM_ERROR$1);
	  }


	  if (windowBits === 8) {
	    windowBits = 9;
	  }
	  /* until 256-byte window bug fixed */

	  var s = new DeflateState();

	  strm.state = s;
	  s.strm = strm;

	  s.wrap = wrap;
	  s.gzhead = null;
	  s.w_bits = windowBits;
	  s.w_size = 1 << s.w_bits;
	  s.w_mask = s.w_size - 1;

	  s.hash_bits = memLevel + 7;
	  s.hash_size = 1 << s.hash_bits;
	  s.hash_mask = s.hash_size - 1;
	  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

	  s.window = new utils$z.Buf8(s.w_size * 2);
	  s.head = new utils$z.Buf16(s.hash_size);
	  s.prev = new utils$z.Buf16(s.w_size);

	  // Don't need mem init magic for JS.
	  //s.high_water = 0;  /* nothing written to s->window yet */

	  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

	  s.pending_buf_size = s.lit_bufsize * 4;

	  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
	  //s->pending_buf = (uchf *) overlay;
	  s.pending_buf = new utils$z.Buf8(s.pending_buf_size);

	  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
	  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
	  s.d_buf = 1 * s.lit_bufsize;

	  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
	  s.l_buf = (1 + 2) * s.lit_bufsize;

	  s.level = level;
	  s.strategy = strategy;
	  s.method = method;

	  return deflateReset(strm);
	}

	function deflateInit(strm, level) {
	  return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);
	}


	function deflate$2(strm, flush) {
	  var old_flush, s;
	  var beg, val; // for gzip header write only

	  if (!strm || !strm.state ||
	    flush > Z_BLOCK$1 || flush < 0) {
	    return strm ? err(strm, Z_STREAM_ERROR$1) : Z_STREAM_ERROR$1;
	  }

	  s = strm.state;

	  if (!strm.output ||
	      (!strm.input && strm.avail_in !== 0) ||
	      (s.status === FINISH_STATE && flush !== Z_FINISH$2)) {
	    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$1);
	  }

	  s.strm = strm; /* just in case */
	  old_flush = s.last_flush;
	  s.last_flush = flush;

	  /* Write the header */
	  if (s.status === INIT_STATE) {

	    if (s.wrap === 2) { // GZIP header
	      strm.adler = 0;  //crc32(0L, Z_NULL, 0);
	      put_byte(s, 31);
	      put_byte(s, 139);
	      put_byte(s, 8);
	      if (!s.gzhead) { // s->gzhead == Z_NULL
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, s.level === 9 ? 2 :
	                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
	                     4 : 0));
	        put_byte(s, OS_CODE);
	        s.status = BUSY_STATE;
	      }
	      else {
	        put_byte(s, (s.gzhead.text ? 1 : 0) +
	                    (s.gzhead.hcrc ? 2 : 0) +
	                    (!s.gzhead.extra ? 0 : 4) +
	                    (!s.gzhead.name ? 0 : 8) +
	                    (!s.gzhead.comment ? 0 : 16)
	        );
	        put_byte(s, s.gzhead.time & 0xff);
	        put_byte(s, (s.gzhead.time >> 8) & 0xff);
	        put_byte(s, (s.gzhead.time >> 16) & 0xff);
	        put_byte(s, (s.gzhead.time >> 24) & 0xff);
	        put_byte(s, s.level === 9 ? 2 :
	                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
	                     4 : 0));
	        put_byte(s, s.gzhead.os & 0xff);
	        if (s.gzhead.extra && s.gzhead.extra.length) {
	          put_byte(s, s.gzhead.extra.length & 0xff);
	          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
	        }
	        if (s.gzhead.hcrc) {
	          strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending, 0);
	        }
	        s.gzindex = 0;
	        s.status = EXTRA_STATE;
	      }
	    }
	    else // DEFLATE header
	    {
	      var header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;
	      var level_flags = -1;

	      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
	        level_flags = 0;
	      } else if (s.level < 6) {
	        level_flags = 1;
	      } else if (s.level === 6) {
	        level_flags = 2;
	      } else {
	        level_flags = 3;
	      }
	      header |= (level_flags << 6);
	      if (s.strstart !== 0) { header |= PRESET_DICT; }
	      header += 31 - (header % 31);

	      s.status = BUSY_STATE;
	      putShortMSB(s, header);

	      /* Save the adler32 of the preset dictionary: */
	      if (s.strstart !== 0) {
	        putShortMSB(s, strm.adler >>> 16);
	        putShortMSB(s, strm.adler & 0xffff);
	      }
	      strm.adler = 1; // adler32(0L, Z_NULL, 0);
	    }
	  }

	//#ifdef GZIP
	  if (s.status === EXTRA_STATE) {
	    if (s.gzhead.extra/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */

	      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            break;
	          }
	        }
	        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
	        s.gzindex++;
	      }
	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (s.gzindex === s.gzhead.extra.length) {
	        s.gzindex = 0;
	        s.status = NAME_STATE;
	      }
	    }
	    else {
	      s.status = NAME_STATE;
	    }
	  }
	  if (s.status === NAME_STATE) {
	    if (s.gzhead.name/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */
	      //int val;

	      do {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            val = 1;
	            break;
	          }
	        }
	        // JS specific: little magic to add zero terminator to end of string
	        if (s.gzindex < s.gzhead.name.length) {
	          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
	        } else {
	          val = 0;
	        }
	        put_byte(s, val);
	      } while (val !== 0);

	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (val === 0) {
	        s.gzindex = 0;
	        s.status = COMMENT_STATE;
	      }
	    }
	    else {
	      s.status = COMMENT_STATE;
	    }
	  }
	  if (s.status === COMMENT_STATE) {
	    if (s.gzhead.comment/* != Z_NULL*/) {
	      beg = s.pending;  /* start of bytes to update crc */
	      //int val;

	      do {
	        if (s.pending === s.pending_buf_size) {
	          if (s.gzhead.hcrc && s.pending > beg) {
	            strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);
	          }
	          flush_pending(strm);
	          beg = s.pending;
	          if (s.pending === s.pending_buf_size) {
	            val = 1;
	            break;
	          }
	        }
	        // JS specific: little magic to add zero terminator to end of string
	        if (s.gzindex < s.gzhead.comment.length) {
	          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
	        } else {
	          val = 0;
	        }
	        put_byte(s, val);
	      } while (val !== 0);

	      if (s.gzhead.hcrc && s.pending > beg) {
	        strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);
	      }
	      if (val === 0) {
	        s.status = HCRC_STATE;
	      }
	    }
	    else {
	      s.status = HCRC_STATE;
	    }
	  }
	  if (s.status === HCRC_STATE) {
	    if (s.gzhead.hcrc) {
	      if (s.pending + 2 > s.pending_buf_size) {
	        flush_pending(strm);
	      }
	      if (s.pending + 2 <= s.pending_buf_size) {
	        put_byte(s, strm.adler & 0xff);
	        put_byte(s, (strm.adler >> 8) & 0xff);
	        strm.adler = 0; //crc32(0L, Z_NULL, 0);
	        s.status = BUSY_STATE;
	      }
	    }
	    else {
	      s.status = BUSY_STATE;
	    }
	  }
	//#endif

	  /* Flush as much pending output as possible */
	  if (s.pending !== 0) {
	    flush_pending(strm);
	    if (strm.avail_out === 0) {
	      /* Since avail_out is 0, deflate will be called again with
	       * more output space, but possibly with both pending and
	       * avail_in equal to zero. There won't be anything to do,
	       * but this is not an error situation so make sure we
	       * return OK instead of BUF_ERROR at next call of deflate:
	       */
	      s.last_flush = -1;
	      return Z_OK$2;
	    }

	    /* Make sure there is something to do and avoid duplicate consecutive
	     * flushes. For repeated and useless calls with Z_FINISH, we keep
	     * returning Z_STREAM_END instead of Z_BUF_ERROR.
	     */
	  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
	    flush !== Z_FINISH$2) {
	    return err(strm, Z_BUF_ERROR$1);
	  }

	  /* User must not provide more input after the first FINISH: */
	  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
	    return err(strm, Z_BUF_ERROR$1);
	  }

	  /* Start a new block or continue the current one.
	   */
	  if (strm.avail_in !== 0 || s.lookahead !== 0 ||
	    (flush !== Z_NO_FLUSH$1 && s.status !== FINISH_STATE)) {
	    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :
	      (s.strategy === Z_RLE ? deflate_rle(s, flush) :
	        configuration_table[s.level].func(s, flush));

	    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
	      s.status = FINISH_STATE;
	    }
	    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
	      if (strm.avail_out === 0) {
	        s.last_flush = -1;
	        /* avoid BUF_ERROR next call, see above */
	      }
	      return Z_OK$2;
	      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
	       * of deflate should use the same flush parameter to make sure
	       * that the flush is complete. So we don't have to output an
	       * empty block here, this will be done at next call. This also
	       * ensures that for a very small output buffer, we emit at most
	       * one empty block.
	       */
	    }
	    if (bstate === BS_BLOCK_DONE) {
	      if (flush === Z_PARTIAL_FLUSH) {
	        trees._tr_align(s);
	      }
	      else if (flush !== Z_BLOCK$1) { /* FULL_FLUSH or SYNC_FLUSH */

	        trees._tr_stored_block(s, 0, 0, false);
	        /* For a full flush, this empty block will be recognized
	         * as a special marker by inflate_sync().
	         */
	        if (flush === Z_FULL_FLUSH) {
	          /*** CLEAR_HASH(s); ***/             /* forget history */
	          zero(s.head); // Fill with NIL (= 0);

	          if (s.lookahead === 0) {
	            s.strstart = 0;
	            s.block_start = 0;
	            s.insert = 0;
	          }
	        }
	      }
	      flush_pending(strm);
	      if (strm.avail_out === 0) {
	        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
	        return Z_OK$2;
	      }
	    }
	  }
	  //Assert(strm->avail_out > 0, "bug2");
	  //if (strm.avail_out <= 0) { throw new Error("bug2");}

	  if (flush !== Z_FINISH$2) { return Z_OK$2; }
	  if (s.wrap <= 0) { return Z_STREAM_END$2; }

	  /* Write the trailer */
	  if (s.wrap === 2) {
	    put_byte(s, strm.adler & 0xff);
	    put_byte(s, (strm.adler >> 8) & 0xff);
	    put_byte(s, (strm.adler >> 16) & 0xff);
	    put_byte(s, (strm.adler >> 24) & 0xff);
	    put_byte(s, strm.total_in & 0xff);
	    put_byte(s, (strm.total_in >> 8) & 0xff);
	    put_byte(s, (strm.total_in >> 16) & 0xff);
	    put_byte(s, (strm.total_in >> 24) & 0xff);
	  }
	  else
	  {
	    putShortMSB(s, strm.adler >>> 16);
	    putShortMSB(s, strm.adler & 0xffff);
	  }

	  flush_pending(strm);
	  /* If avail_out is zero, the application will call deflate again
	   * to flush the rest.
	   */
	  if (s.wrap > 0) { s.wrap = -s.wrap; }
	  /* write the trailer only once! */
	  return s.pending !== 0 ? Z_OK$2 : Z_STREAM_END$2;
	}

	function deflateEnd(strm) {
	  var status;

	  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
	    return Z_STREAM_ERROR$1;
	  }

	  status = strm.state.status;
	  if (status !== INIT_STATE &&
	    status !== EXTRA_STATE &&
	    status !== NAME_STATE &&
	    status !== COMMENT_STATE &&
	    status !== HCRC_STATE &&
	    status !== BUSY_STATE &&
	    status !== FINISH_STATE
	  ) {
	    return err(strm, Z_STREAM_ERROR$1);
	  }

	  strm.state = null;

	  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$1) : Z_OK$2;
	}


	/* =========================================================================
	 * Initializes the compression dictionary from the given byte
	 * sequence without producing any compressed output.
	 */
	function deflateSetDictionary(strm, dictionary) {
	  var dictLength = dictionary.length;

	  var s;
	  var str, n;
	  var wrap;
	  var avail;
	  var next;
	  var input;
	  var tmpDict;

	  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {
	    return Z_STREAM_ERROR$1;
	  }

	  s = strm.state;
	  wrap = s.wrap;

	  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
	    return Z_STREAM_ERROR$1;
	  }

	  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
	  if (wrap === 1) {
	    /* adler32(strm->adler, dictionary, dictLength); */
	    strm.adler = adler32$1(strm.adler, dictionary, dictLength, 0);
	  }

	  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

	  /* if dictionary would fill window, just replace the history */
	  if (dictLength >= s.w_size) {
	    if (wrap === 0) {            /* already empty otherwise */
	      /*** CLEAR_HASH(s); ***/
	      zero(s.head); // Fill with NIL (= 0);
	      s.strstart = 0;
	      s.block_start = 0;
	      s.insert = 0;
	    }
	    /* use the tail */
	    // dictionary = dictionary.slice(dictLength - s.w_size);
	    tmpDict = new utils$z.Buf8(s.w_size);
	    utils$z.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
	    dictionary = tmpDict;
	    dictLength = s.w_size;
	  }
	  /* insert dictionary into window and hash */
	  avail = strm.avail_in;
	  next = strm.next_in;
	  input = strm.input;
	  strm.avail_in = dictLength;
	  strm.next_in = 0;
	  strm.input = dictionary;
	  fill_window(s);
	  while (s.lookahead >= MIN_MATCH) {
	    str = s.strstart;
	    n = s.lookahead - (MIN_MATCH - 1);
	    do {
	      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
	      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;

	      s.prev[str & s.w_mask] = s.head[s.ins_h];

	      s.head[s.ins_h] = str;
	      str++;
	    } while (--n);
	    s.strstart = str;
	    s.lookahead = MIN_MATCH - 1;
	    fill_window(s);
	  }
	  s.strstart += s.lookahead;
	  s.block_start = s.strstart;
	  s.insert = s.lookahead;
	  s.lookahead = 0;
	  s.match_length = s.prev_length = MIN_MATCH - 1;
	  s.match_available = 0;
	  strm.next_in = next;
	  strm.input = input;
	  strm.avail_in = avail;
	  s.wrap = wrap;
	  return Z_OK$2;
	}


	deflate$3.deflateInit = deflateInit;
	deflate$3.deflateInit2 = deflateInit2;
	deflate$3.deflateReset = deflateReset;
	deflate$3.deflateResetKeep = deflateResetKeep;
	deflate$3.deflateSetHeader = deflateSetHeader;
	deflate$3.deflate = deflate$2;
	deflate$3.deflateEnd = deflateEnd;
	deflate$3.deflateSetDictionary = deflateSetDictionary;
	deflate$3.deflateInfo = 'pako deflate (from Nodeca project)';

	var strings$2 = {};

	var utils$y = common$5;


	// Quick check if we can use fast array to bin string conversion
	//
	// - apply(Array) can fail on Android 2.2
	// - apply(Uint8Array) can fail on iOS 5.1 Safari
	//
	var STR_APPLY_OK = true;
	var STR_APPLY_UIA_OK = true;

	try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }
	try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


	// Table with utf8 lengths (calculated by first byte of sequence)
	// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
	// because max possible codepoint is 0x10ffff
	var _utf8len = new utils$y.Buf8(256);
	for (var q = 0; q < 256; q++) {
	  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
	}
	_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


	// convert string to array (typed, when possible)
	strings$2.string2buf = function (str) {
	  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

	  // count binary size
	  for (m_pos = 0; m_pos < str_len; m_pos++) {
	    c = str.charCodeAt(m_pos);
	    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
	      c2 = str.charCodeAt(m_pos + 1);
	      if ((c2 & 0xfc00) === 0xdc00) {
	        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
	        m_pos++;
	      }
	    }
	    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
	  }

	  // allocate buffer
	  buf = new utils$y.Buf8(buf_len);

	  // convert
	  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
	    c = str.charCodeAt(m_pos);
	    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
	      c2 = str.charCodeAt(m_pos + 1);
	      if ((c2 & 0xfc00) === 0xdc00) {
	        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
	        m_pos++;
	      }
	    }
	    if (c < 0x80) {
	      /* one byte */
	      buf[i++] = c;
	    } else if (c < 0x800) {
	      /* two bytes */
	      buf[i++] = 0xC0 | (c >>> 6);
	      buf[i++] = 0x80 | (c & 0x3f);
	    } else if (c < 0x10000) {
	      /* three bytes */
	      buf[i++] = 0xE0 | (c >>> 12);
	      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
	      buf[i++] = 0x80 | (c & 0x3f);
	    } else {
	      /* four bytes */
	      buf[i++] = 0xf0 | (c >>> 18);
	      buf[i++] = 0x80 | (c >>> 12 & 0x3f);
	      buf[i++] = 0x80 | (c >>> 6 & 0x3f);
	      buf[i++] = 0x80 | (c & 0x3f);
	    }
	  }

	  return buf;
	};

	// Helper (used in 2 places)
	function buf2binstring(buf, len) {
	  // On Chrome, the arguments in a function call that are allowed is `65534`.
	  // If the length of the buffer is smaller than that, we can use this optimization,
	  // otherwise we will take a slower path.
	  if (len < 65534) {
	    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {
	      return String.fromCharCode.apply(null, utils$y.shrinkBuf(buf, len));
	    }
	  }

	  var result = '';
	  for (var i = 0; i < len; i++) {
	    result += String.fromCharCode(buf[i]);
	  }
	  return result;
	}


	// Convert byte array to binary string
	strings$2.buf2binstring = function (buf) {
	  return buf2binstring(buf, buf.length);
	};


	// Convert binary string (typed, when possible)
	strings$2.binstring2buf = function (str) {
	  var buf = new utils$y.Buf8(str.length);
	  for (var i = 0, len = buf.length; i < len; i++) {
	    buf[i] = str.charCodeAt(i);
	  }
	  return buf;
	};


	// convert array to string
	strings$2.buf2string = function (buf, max) {
	  var i, out, c, c_len;
	  var len = max || buf.length;

	  // Reserve max possible length (2 words per char)
	  // NB: by unknown reasons, Array is significantly faster for
	  //     String.fromCharCode.apply than Uint16Array.
	  var utf16buf = new Array(len * 2);

	  for (out = 0, i = 0; i < len;) {
	    c = buf[i++];
	    // quick process ascii
	    if (c < 0x80) { utf16buf[out++] = c; continue; }

	    c_len = _utf8len[c];
	    // skip 5 & 6 byte codes
	    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

	    // apply mask on first byte
	    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
	    // join the rest
	    while (c_len > 1 && i < len) {
	      c = (c << 6) | (buf[i++] & 0x3f);
	      c_len--;
	    }

	    // terminated by end of string?
	    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

	    if (c < 0x10000) {
	      utf16buf[out++] = c;
	    } else {
	      c -= 0x10000;
	      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
	      utf16buf[out++] = 0xdc00 | (c & 0x3ff);
	    }
	  }

	  return buf2binstring(utf16buf, out);
	};


	// Calculate max possible position in utf8 buffer,
	// that will not break sequence. If that's not possible
	// - (very small limits) return max size as is.
	//
	// buf[] - utf8 bytes array
	// max   - length limit (mandatory);
	strings$2.utf8border = function (buf, max) {
	  var pos;

	  max = max || buf.length;
	  if (max > buf.length) { max = buf.length; }

	  // go back from last position, until start of sequence found
	  pos = max - 1;
	  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

	  // Very small and broken sequence,
	  // return max, because we should return something anyway.
	  if (pos < 0) { return max; }

	  // If we came to start of buffer - that means buffer is too small,
	  // return max too.
	  if (pos === 0) { return max; }

	  return (pos + _utf8len[buf[pos]] > max) ? pos : max;
	};

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	function ZStream$2() {
	  /* next input byte */
	  this.input = null; // JS specific, because we have no pointers
	  this.next_in = 0;
	  /* number of bytes available at input */
	  this.avail_in = 0;
	  /* total number of input bytes read so far */
	  this.total_in = 0;
	  /* next output byte should be put there */
	  this.output = null; // JS specific, because we have no pointers
	  this.next_out = 0;
	  /* remaining free space at output */
	  this.avail_out = 0;
	  /* total number of bytes output so far */
	  this.total_out = 0;
	  /* last error message, NULL if no error */
	  this.msg = ''/*Z_NULL*/;
	  /* not visible by applications */
	  this.state = null;
	  /* best guess about the data type: binary or text */
	  this.data_type = 2/*Z_UNKNOWN*/;
	  /* adler32 value of the uncompressed data */
	  this.adler = 0;
	}

	var zstream = ZStream$2;

	var zlib_deflate = deflate$3;
	var utils$x        = common$5;
	var strings$1      = strings$2;
	var msg$1          = messages$3;
	var ZStream$1      = zstream;

	var toString$3 = Object.prototype.toString;

	/* Public constants ==========================================================*/
	/* ===========================================================================*/

	var Z_NO_FLUSH      = 0;
	var Z_FINISH$1        = 4;

	var Z_OK$1            = 0;
	var Z_STREAM_END$1    = 1;
	var Z_SYNC_FLUSH    = 2;

	var Z_DEFAULT_COMPRESSION = -1;

	var Z_DEFAULT_STRATEGY    = 0;

	var Z_DEFLATED$1  = 8;

	/* ===========================================================================*/


	/**
	 * class Deflate
	 *
	 * Generic JS-style wrapper for zlib calls. If you don't need
	 * streaming behaviour - use more simple functions: [[deflate]],
	 * [[deflateRaw]] and [[gzip]].
	 **/

	/* internal
	 * Deflate.chunks -> Array
	 *
	 * Chunks of output data, if [[Deflate#onData]] not overridden.
	 **/

	/**
	 * Deflate.result -> Uint8Array|Array
	 *
	 * Compressed result, generated by default [[Deflate#onData]]
	 * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
	 * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you
	 * push a chunk with explicit flush (call [[Deflate#push]] with
	 * `Z_SYNC_FLUSH` param).
	 **/

	/**
	 * Deflate.err -> Number
	 *
	 * Error code after deflate finished. 0 (Z_OK) on success.
	 * You will not need it in real life, because deflate errors
	 * are possible only on wrong options or bad `onData` / `onEnd`
	 * custom handlers.
	 **/

	/**
	 * Deflate.msg -> String
	 *
	 * Error message, if [[Deflate.err]] != 0
	 **/


	/**
	 * new Deflate(options)
	 * - options (Object): zlib deflate options.
	 *
	 * Creates new deflator instance with specified params. Throws exception
	 * on bad params. Supported options:
	 *
	 * - `level`
	 * - `windowBits`
	 * - `memLevel`
	 * - `strategy`
	 * - `dictionary`
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information on these.
	 *
	 * Additional options, for internal needs:
	 *
	 * - `chunkSize` - size of generated data chunks (16K by default)
	 * - `raw` (Boolean) - do raw deflate
	 * - `gzip` (Boolean) - create gzip wrapper
	 * - `to` (String) - if equal to 'string', then result will be "binary string"
	 *    (each char code [0..255])
	 * - `header` (Object) - custom header for gzip
	 *   - `text` (Boolean) - true if compressed data believed to be text
	 *   - `time` (Number) - modification time, unix timestamp
	 *   - `os` (Number) - operation system code
	 *   - `extra` (Array) - array of bytes with extra data (max 65536)
	 *   - `name` (String) - file name (binary string)
	 *   - `comment` (String) - comment (binary string)
	 *   - `hcrc` (Boolean) - true if header crc should be added
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
	 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
	 *
	 * var deflate = new pako.Deflate({ level: 3});
	 *
	 * deflate.push(chunk1, false);
	 * deflate.push(chunk2, true);  // true -> last chunk
	 *
	 * if (deflate.err) { throw new Error(deflate.err); }
	 *
	 * console.log(deflate.result);
	 * ```
	 **/
	function Deflate(options) {
	  if (!(this instanceof Deflate)) return new Deflate(options);

	  this.options = utils$x.assign({
	    level: Z_DEFAULT_COMPRESSION,
	    method: Z_DEFLATED$1,
	    chunkSize: 16384,
	    windowBits: 15,
	    memLevel: 8,
	    strategy: Z_DEFAULT_STRATEGY,
	    to: ''
	  }, options || {});

	  var opt = this.options;

	  if (opt.raw && (opt.windowBits > 0)) {
	    opt.windowBits = -opt.windowBits;
	  }

	  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
	    opt.windowBits += 16;
	  }

	  this.err    = 0;      // error code, if happens (0 = Z_OK)
	  this.msg    = '';     // error message
	  this.ended  = false;  // used to avoid multiple onEnd() calls
	  this.chunks = [];     // chunks of compressed data

	  this.strm = new ZStream$1();
	  this.strm.avail_out = 0;

	  var status = zlib_deflate.deflateInit2(
	    this.strm,
	    opt.level,
	    opt.method,
	    opt.windowBits,
	    opt.memLevel,
	    opt.strategy
	  );

	  if (status !== Z_OK$1) {
	    throw new Error(msg$1[status]);
	  }

	  if (opt.header) {
	    zlib_deflate.deflateSetHeader(this.strm, opt.header);
	  }

	  if (opt.dictionary) {
	    var dict;
	    // Convert data if needed
	    if (typeof opt.dictionary === 'string') {
	      // If we need to compress text, change encoding to utf8.
	      dict = strings$1.string2buf(opt.dictionary);
	    } else if (toString$3.call(opt.dictionary) === '[object ArrayBuffer]') {
	      dict = new Uint8Array(opt.dictionary);
	    } else {
	      dict = opt.dictionary;
	    }

	    status = zlib_deflate.deflateSetDictionary(this.strm, dict);

	    if (status !== Z_OK$1) {
	      throw new Error(msg$1[status]);
	    }

	    this._dict_set = true;
	  }
	}

	/**
	 * Deflate#push(data[, mode]) -> Boolean
	 * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be
	 *   converted to utf8 byte sequence.
	 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
	 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
	 *
	 * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
	 * new compressed chunks. Returns `true` on success. The last data block must have
	 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
	 * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you
	 * can use mode Z_SYNC_FLUSH, keeping the compression context.
	 *
	 * On fail call [[Deflate#onEnd]] with error code and return false.
	 *
	 * We strongly recommend to use `Uint8Array` on input for best speed (output
	 * array format is detected automatically). Also, don't skip last param and always
	 * use the same type in your code (boolean or number). That will improve JS speed.
	 *
	 * For regular `Array`-s make sure all elements are [0..255].
	 *
	 * ##### Example
	 *
	 * ```javascript
	 * push(chunk, false); // push one of data chunks
	 * ...
	 * push(chunk, true);  // push last chunk
	 * ```
	 **/
	Deflate.prototype.push = function (data, mode) {
	  var strm = this.strm;
	  var chunkSize = this.options.chunkSize;
	  var status, _mode;

	  if (this.ended) { return false; }

	  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH$1 : Z_NO_FLUSH);

	  // Convert data if needed
	  if (typeof data === 'string') {
	    // If we need to compress text, change encoding to utf8.
	    strm.input = strings$1.string2buf(data);
	  } else if (toString$3.call(data) === '[object ArrayBuffer]') {
	    strm.input = new Uint8Array(data);
	  } else {
	    strm.input = data;
	  }

	  strm.next_in = 0;
	  strm.avail_in = strm.input.length;

	  do {
	    if (strm.avail_out === 0) {
	      strm.output = new utils$x.Buf8(chunkSize);
	      strm.next_out = 0;
	      strm.avail_out = chunkSize;
	    }
	    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */

	    if (status !== Z_STREAM_END$1 && status !== Z_OK$1) {
	      this.onEnd(status);
	      this.ended = true;
	      return false;
	    }
	    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH$1 || _mode === Z_SYNC_FLUSH))) {
	      if (this.options.to === 'string') {
	        this.onData(strings$1.buf2binstring(utils$x.shrinkBuf(strm.output, strm.next_out)));
	      } else {
	        this.onData(utils$x.shrinkBuf(strm.output, strm.next_out));
	      }
	    }
	  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END$1);

	  // Finalize on the last chunk.
	  if (_mode === Z_FINISH$1) {
	    status = zlib_deflate.deflateEnd(this.strm);
	    this.onEnd(status);
	    this.ended = true;
	    return status === Z_OK$1;
	  }

	  // callback interim results if Z_SYNC_FLUSH.
	  if (_mode === Z_SYNC_FLUSH) {
	    this.onEnd(Z_OK$1);
	    strm.avail_out = 0;
	    return true;
	  }

	  return true;
	};


	/**
	 * Deflate#onData(chunk) -> Void
	 * - chunk (Uint8Array|Array|String): output data. Type of array depends
	 *   on js engine support. When string output requested, each chunk
	 *   will be string.
	 *
	 * By default, stores data blocks in `chunks[]` property and glue
	 * those in `onEnd`. Override this handler, if you need another behaviour.
	 **/
	Deflate.prototype.onData = function (chunk) {
	  this.chunks.push(chunk);
	};


	/**
	 * Deflate#onEnd(status) -> Void
	 * - status (Number): deflate status. 0 (Z_OK) on success,
	 *   other if not.
	 *
	 * Called once after you tell deflate that the input stream is
	 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
	 * or if an error happened. By default - join collected chunks,
	 * free memory and fill `results` / `err` properties.
	 **/
	Deflate.prototype.onEnd = function (status) {
	  // On success - join
	  if (status === Z_OK$1) {
	    if (this.options.to === 'string') {
	      this.result = this.chunks.join('');
	    } else {
	      this.result = utils$x.flattenChunks(this.chunks);
	    }
	  }
	  this.chunks = [];
	  this.err = status;
	  this.msg = this.strm.msg;
	};


	/**
	 * deflate(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to compress.
	 * - options (Object): zlib deflate options.
	 *
	 * Compress `data` with deflate algorithm and `options`.
	 *
	 * Supported options are:
	 *
	 * - level
	 * - windowBits
	 * - memLevel
	 * - strategy
	 * - dictionary
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information on these.
	 *
	 * Sugar (options):
	 *
	 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
	 *   negative windowBits implicitly.
	 * - `to` (String) - if equal to 'string', then result will be "binary string"
	 *    (each char code [0..255])
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);
	 *
	 * console.log(pako.deflate(data));
	 * ```
	 **/
	function deflate$1(input, options) {
	  var deflator = new Deflate(options);

	  deflator.push(input, true);

	  // That will never happens, if you don't cheat with options :)
	  if (deflator.err) { throw deflator.msg || msg$1[deflator.err]; }

	  return deflator.result;
	}


	/**
	 * deflateRaw(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to compress.
	 * - options (Object): zlib deflate options.
	 *
	 * The same as [[deflate]], but creates raw data, without wrapper
	 * (header and adler32 crc).
	 **/
	function deflateRaw(input, options) {
	  options = options || {};
	  options.raw = true;
	  return deflate$1(input, options);
	}


	/**
	 * gzip(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to compress.
	 * - options (Object): zlib deflate options.
	 *
	 * The same as [[deflate]], but create gzip wrapper instead of
	 * deflate one.
	 **/
	function gzip(input, options) {
	  options = options || {};
	  options.gzip = true;
	  return deflate$1(input, options);
	}


	deflate$4.Deflate = Deflate;
	deflate$4.deflate = deflate$1;
	deflate$4.deflateRaw = deflateRaw;
	deflate$4.gzip = gzip;

	var inflate$4 = {};

	var inflate$3 = {};

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	// See state defs from inflate.js
	var BAD$1 = 30;       /* got a data error -- remain here until reset */
	var TYPE$1 = 12;      /* i: waiting for type bits, including last-flag bit */

	/*
	   Decode literal, length, and distance codes and write out the resulting
	   literal and match bytes until either not enough input or output is
	   available, an end-of-block is encountered, or a data error is encountered.
	   When large enough input and output buffers are supplied to inflate(), for
	   example, a 16K input buffer and a 64K output buffer, more than 95% of the
	   inflate execution time is spent in this routine.

	   Entry assumptions:

	        state.mode === LEN
	        strm.avail_in >= 6
	        strm.avail_out >= 258
	        start >= strm.avail_out
	        state.bits < 8

	   On return, state.mode is one of:

	        LEN -- ran out of enough output space or enough available input
	        TYPE -- reached end of block code, inflate() to interpret next block
	        BAD -- error in block data

	   Notes:

	    - The maximum input bits used by a length/distance pair is 15 bits for the
	      length code, 5 bits for the length extra, 15 bits for the distance code,
	      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
	      Therefore if strm.avail_in >= 6, then there is enough input to avoid
	      checking for available input while decoding.

	    - The maximum bytes that a single length/distance pair can output is 258
	      bytes, which is the maximum length that can be coded.  inflate_fast()
	      requires strm.avail_out >= 258 for each loop to avoid checking for
	      output space.
	 */
	var inffast = function inflate_fast(strm, start) {
	  var state;
	  var _in;                    /* local strm.input */
	  var last;                   /* have enough input while in < last */
	  var _out;                   /* local strm.output */
	  var beg;                    /* inflate()'s initial strm.output */
	  var end;                    /* while out < end, enough space available */
	//#ifdef INFLATE_STRICT
	  var dmax;                   /* maximum distance from zlib header */
	//#endif
	  var wsize;                  /* window size or zero if not using window */
	  var whave;                  /* valid bytes in the window */
	  var wnext;                  /* window write index */
	  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
	  var s_window;               /* allocated sliding window, if wsize != 0 */
	  var hold;                   /* local strm.hold */
	  var bits;                   /* local strm.bits */
	  var lcode;                  /* local strm.lencode */
	  var dcode;                  /* local strm.distcode */
	  var lmask;                  /* mask for first level of length codes */
	  var dmask;                  /* mask for first level of distance codes */
	  var here;                   /* retrieved table entry */
	  var op;                     /* code bits, operation, extra bits, or */
	                              /*  window position, window bytes to copy */
	  var len;                    /* match length, unused bytes */
	  var dist;                   /* match distance */
	  var from;                   /* where to copy match from */
	  var from_source;


	  var input, output; // JS specific, because we have no pointers

	  /* copy state to local variables */
	  state = strm.state;
	  //here = state.here;
	  _in = strm.next_in;
	  input = strm.input;
	  last = _in + (strm.avail_in - 5);
	  _out = strm.next_out;
	  output = strm.output;
	  beg = _out - (start - strm.avail_out);
	  end = _out + (strm.avail_out - 257);
	//#ifdef INFLATE_STRICT
	  dmax = state.dmax;
	//#endif
	  wsize = state.wsize;
	  whave = state.whave;
	  wnext = state.wnext;
	  s_window = state.window;
	  hold = state.hold;
	  bits = state.bits;
	  lcode = state.lencode;
	  dcode = state.distcode;
	  lmask = (1 << state.lenbits) - 1;
	  dmask = (1 << state.distbits) - 1;


	  /* decode literals and length/distances until end-of-block or not enough
	     input data or output space */

	  top:
	  do {
	    if (bits < 15) {
	      hold += input[_in++] << bits;
	      bits += 8;
	      hold += input[_in++] << bits;
	      bits += 8;
	    }

	    here = lcode[hold & lmask];

	    dolen:
	    for (;;) { // Goto emulation
	      op = here >>> 24/*here.bits*/;
	      hold >>>= op;
	      bits -= op;
	      op = (here >>> 16) & 0xff/*here.op*/;
	      if (op === 0) {                          /* literal */
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        output[_out++] = here & 0xffff/*here.val*/;
	      }
	      else if (op & 16) {                     /* length base */
	        len = here & 0xffff/*here.val*/;
	        op &= 15;                           /* number of extra bits */
	        if (op) {
	          if (bits < op) {
	            hold += input[_in++] << bits;
	            bits += 8;
	          }
	          len += hold & ((1 << op) - 1);
	          hold >>>= op;
	          bits -= op;
	        }
	        //Tracevv((stderr, "inflate:         length %u\n", len));
	        if (bits < 15) {
	          hold += input[_in++] << bits;
	          bits += 8;
	          hold += input[_in++] << bits;
	          bits += 8;
	        }
	        here = dcode[hold & dmask];

	        dodist:
	        for (;;) { // goto emulation
	          op = here >>> 24/*here.bits*/;
	          hold >>>= op;
	          bits -= op;
	          op = (here >>> 16) & 0xff/*here.op*/;

	          if (op & 16) {                      /* distance base */
	            dist = here & 0xffff/*here.val*/;
	            op &= 15;                       /* number of extra bits */
	            if (bits < op) {
	              hold += input[_in++] << bits;
	              bits += 8;
	              if (bits < op) {
	                hold += input[_in++] << bits;
	                bits += 8;
	              }
	            }
	            dist += hold & ((1 << op) - 1);
	//#ifdef INFLATE_STRICT
	            if (dist > dmax) {
	              strm.msg = 'invalid distance too far back';
	              state.mode = BAD$1;
	              break top;
	            }
	//#endif
	            hold >>>= op;
	            bits -= op;
	            //Tracevv((stderr, "inflate:         distance %u\n", dist));
	            op = _out - beg;                /* max distance in output */
	            if (dist > op) {                /* see if copy from window */
	              op = dist - op;               /* distance back in window */
	              if (op > whave) {
	                if (state.sane) {
	                  strm.msg = 'invalid distance too far back';
	                  state.mode = BAD$1;
	                  break top;
	                }

	// (!) This block is disabled in zlib defaults,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//                if (len <= op - whave) {
	//                  do {
	//                    output[_out++] = 0;
	//                  } while (--len);
	//                  continue top;
	//                }
	//                len -= op - whave;
	//                do {
	//                  output[_out++] = 0;
	//                } while (--op > whave);
	//                if (op === 0) {
	//                  from = _out - dist;
	//                  do {
	//                    output[_out++] = output[from++];
	//                  } while (--len);
	//                  continue top;
	//                }
	//#endif
	              }
	              from = 0; // window index
	              from_source = s_window;
	              if (wnext === 0) {           /* very common case */
	                from += wsize - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              else if (wnext < op) {      /* wrap around window */
	                from += wsize + wnext - op;
	                op -= wnext;
	                if (op < len) {         /* some from end of window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = 0;
	                  if (wnext < len) {  /* some from start of window */
	                    op = wnext;
	                    len -= op;
	                    do {
	                      output[_out++] = s_window[from++];
	                    } while (--op);
	                    from = _out - dist;      /* rest from output */
	                    from_source = output;
	                  }
	                }
	              }
	              else {                      /* contiguous in window */
	                from += wnext - op;
	                if (op < len) {         /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist;  /* rest from output */
	                  from_source = output;
	                }
	              }
	              while (len > 2) {
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                len -= 3;
	              }
	              if (len) {
	                output[_out++] = from_source[from++];
	                if (len > 1) {
	                  output[_out++] = from_source[from++];
	                }
	              }
	            }
	            else {
	              from = _out - dist;          /* copy direct from output */
	              do {                        /* minimum length is three */
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                len -= 3;
	              } while (len > 2);
	              if (len) {
	                output[_out++] = output[from++];
	                if (len > 1) {
	                  output[_out++] = output[from++];
	                }
	              }
	            }
	          }
	          else if ((op & 64) === 0) {          /* 2nd level distance code */
	            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	            continue dodist;
	          }
	          else {
	            strm.msg = 'invalid distance code';
	            state.mode = BAD$1;
	            break top;
	          }

	          break; // need to emulate goto via "continue"
	        }
	      }
	      else if ((op & 64) === 0) {              /* 2nd level length code */
	        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
	        continue dolen;
	      }
	      else if (op & 32) {                     /* end-of-block */
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.mode = TYPE$1;
	        break top;
	      }
	      else {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD$1;
	        break top;
	      }

	      break; // need to emulate goto via "continue"
	    }
	  } while (_in < last && _out < end);

	  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
	  len = bits >> 3;
	  _in -= len;
	  bits -= len << 3;
	  hold &= (1 << bits) - 1;

	  /* update state and return */
	  strm.next_in = _in;
	  strm.next_out = _out;
	  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
	  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
	  state.hold = hold;
	  state.bits = bits;
	  return;
	};

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	var utils$w = common$5;

	var MAXBITS = 15;
	var ENOUGH_LENS$1 = 852;
	var ENOUGH_DISTS$1 = 592;
	//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

	var CODES$1 = 0;
	var LENS$1 = 1;
	var DISTS$1 = 2;

	var lbase = [ /* Length codes 257..285 base */
	  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
	  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
	];

	var lext = [ /* Length codes 257..285 extra */
	  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
	  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
	];

	var dbase = [ /* Distance codes 0..29 base */
	  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
	  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
	  8193, 12289, 16385, 24577, 0, 0
	];

	var dext = [ /* Distance codes 0..29 extra */
	  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
	  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
	  28, 28, 29, 29, 64, 64
	];

	var inftrees = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)
	{
	  var bits = opts.bits;
	      //here = opts.here; /* table entry for duplication */

	  var len = 0;               /* a code's length in bits */
	  var sym = 0;               /* index of code symbols */
	  var min = 0, max = 0;          /* minimum and maximum code lengths */
	  var root = 0;              /* number of index bits for root table */
	  var curr = 0;              /* number of index bits for current table */
	  var drop = 0;              /* code bits to drop for sub-table */
	  var left = 0;                   /* number of prefix codes available */
	  var used = 0;              /* code entries in table used */
	  var huff = 0;              /* Huffman code */
	  var incr;              /* for incrementing code, index */
	  var fill;              /* index for replicating entries */
	  var low;               /* low bits for current root entry */
	  var mask;              /* mask for low root bits */
	  var next;             /* next available space in table */
	  var base = null;     /* base value table to use */
	  var base_index = 0;
	//  var shoextra;    /* extra bits table to use */
	  var end;                    /* use base and extra for symbol > end */
	  var count = new utils$w.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
	  var offs = new utils$w.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
	  var extra = null;
	  var extra_index = 0;

	  var here_bits, here_op, here_val;

	  /*
	   Process a set of code lengths to create a canonical Huffman code.  The
	   code lengths are lens[0..codes-1].  Each length corresponds to the
	   symbols 0..codes-1.  The Huffman code is generated by first sorting the
	   symbols by length from short to long, and retaining the symbol order
	   for codes with equal lengths.  Then the code starts with all zero bits
	   for the first code of the shortest length, and the codes are integer
	   increments for the same length, and zeros are appended as the length
	   increases.  For the deflate format, these bits are stored backwards
	   from their more natural integer increment ordering, and so when the
	   decoding tables are built in the large loop below, the integer codes
	   are incremented backwards.

	   This routine assumes, but does not check, that all of the entries in
	   lens[] are in the range 0..MAXBITS.  The caller must assure this.
	   1..MAXBITS is interpreted as that code length.  zero means that that
	   symbol does not occur in this code.

	   The codes are sorted by computing a count of codes for each length,
	   creating from that a table of starting indices for each length in the
	   sorted table, and then entering the symbols in order in the sorted
	   table.  The sorted table is work[], with that space being provided by
	   the caller.

	   The length counts are used for other purposes as well, i.e. finding
	   the minimum and maximum length codes, determining if there are any
	   codes at all, checking for a valid set of lengths, and looking ahead
	   at length counts to determine sub-table sizes when building the
	   decoding tables.
	   */

	  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
	  for (len = 0; len <= MAXBITS; len++) {
	    count[len] = 0;
	  }
	  for (sym = 0; sym < codes; sym++) {
	    count[lens[lens_index + sym]]++;
	  }

	  /* bound code lengths, force root to be within code lengths */
	  root = bits;
	  for (max = MAXBITS; max >= 1; max--) {
	    if (count[max] !== 0) { break; }
	  }
	  if (root > max) {
	    root = max;
	  }
	  if (max === 0) {                     /* no symbols to code at all */
	    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
	    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
	    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;


	    //table.op[opts.table_index] = 64;
	    //table.bits[opts.table_index] = 1;
	    //table.val[opts.table_index++] = 0;
	    table[table_index++] = (1 << 24) | (64 << 16) | 0;

	    opts.bits = 1;
	    return 0;     /* no symbols, but wait for decoding to report error */
	  }
	  for (min = 1; min < max; min++) {
	    if (count[min] !== 0) { break; }
	  }
	  if (root < min) {
	    root = min;
	  }

	  /* check for an over-subscribed or incomplete set of lengths */
	  left = 1;
	  for (len = 1; len <= MAXBITS; len++) {
	    left <<= 1;
	    left -= count[len];
	    if (left < 0) {
	      return -1;
	    }        /* over-subscribed */
	  }
	  if (left > 0 && (type === CODES$1 || max !== 1)) {
	    return -1;                      /* incomplete set */
	  }

	  /* generate offsets into symbol table for each length for sorting */
	  offs[1] = 0;
	  for (len = 1; len < MAXBITS; len++) {
	    offs[len + 1] = offs[len] + count[len];
	  }

	  /* sort symbols by length, by symbol order within each length */
	  for (sym = 0; sym < codes; sym++) {
	    if (lens[lens_index + sym] !== 0) {
	      work[offs[lens[lens_index + sym]]++] = sym;
	    }
	  }

	  /*
	   Create and fill in decoding tables.  In this loop, the table being
	   filled is at next and has curr index bits.  The code being used is huff
	   with length len.  That code is converted to an index by dropping drop
	   bits off of the bottom.  For codes where len is less than drop + curr,
	   those top drop + curr - len bits are incremented through all values to
	   fill the table with replicated entries.

	   root is the number of index bits for the root table.  When len exceeds
	   root, sub-tables are created pointed to by the root entry with an index
	   of the low root bits of huff.  This is saved in low to check for when a
	   new sub-table should be started.  drop is zero when the root table is
	   being filled, and drop is root when sub-tables are being filled.

	   When a new sub-table is needed, it is necessary to look ahead in the
	   code lengths to determine what size sub-table is needed.  The length
	   counts are used for this, and so count[] is decremented as codes are
	   entered in the tables.

	   used keeps track of how many table entries have been allocated from the
	   provided *table space.  It is checked for LENS and DIST tables against
	   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
	   the initial root table size constants.  See the comments in inftrees.h
	   for more information.

	   sym increments through all symbols, and the loop terminates when
	   all codes of length max, i.e. all codes, have been processed.  This
	   routine permits incomplete codes, so another loop after this one fills
	   in the rest of the decoding tables with invalid code markers.
	   */

	  /* set up for code type */
	  // poor man optimization - use if-else instead of switch,
	  // to avoid deopts in old v8
	  if (type === CODES$1) {
	    base = extra = work;    /* dummy value--not used */
	    end = 19;

	  } else if (type === LENS$1) {
	    base = lbase;
	    base_index -= 257;
	    extra = lext;
	    extra_index -= 257;
	    end = 256;

	  } else {                    /* DISTS */
	    base = dbase;
	    extra = dext;
	    end = -1;
	  }

	  /* initialize opts for loop */
	  huff = 0;                   /* starting code */
	  sym = 0;                    /* starting code symbol */
	  len = min;                  /* starting code length */
	  next = table_index;              /* current table to fill in */
	  curr = root;                /* current table index bits */
	  drop = 0;                   /* current bits to drop from code for index */
	  low = -1;                   /* trigger new sub-table when len > root */
	  used = 1 << root;          /* use root table entries */
	  mask = used - 1;            /* mask for comparing low */

	  /* check available table space */
	  if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
	    (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
	    return 1;
	  }

	  /* process all codes and make table entries */
	  for (;;) {
	    /* create table entry */
	    here_bits = len - drop;
	    if (work[sym] < end) {
	      here_op = 0;
	      here_val = work[sym];
	    }
	    else if (work[sym] > end) {
	      here_op = extra[extra_index + work[sym]];
	      here_val = base[base_index + work[sym]];
	    }
	    else {
	      here_op = 32 + 64;         /* end of block */
	      here_val = 0;
	    }

	    /* replicate for those indices with low len bits equal to huff */
	    incr = 1 << (len - drop);
	    fill = 1 << curr;
	    min = fill;                 /* save offset to next table */
	    do {
	      fill -= incr;
	      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
	    } while (fill !== 0);

	    /* backwards increment the len-bit code huff */
	    incr = 1 << (len - 1);
	    while (huff & incr) {
	      incr >>= 1;
	    }
	    if (incr !== 0) {
	      huff &= incr - 1;
	      huff += incr;
	    } else {
	      huff = 0;
	    }

	    /* go to next symbol, update count, len */
	    sym++;
	    if (--count[len] === 0) {
	      if (len === max) { break; }
	      len = lens[lens_index + work[sym]];
	    }

	    /* create new sub-table if needed */
	    if (len > root && (huff & mask) !== low) {
	      /* if first time, transition to sub-tables */
	      if (drop === 0) {
	        drop = root;
	      }

	      /* increment past last table */
	      next += min;            /* here min is 1 << curr */

	      /* determine length of next table */
	      curr = len - drop;
	      left = 1 << curr;
	      while (curr + drop < max) {
	        left -= count[curr + drop];
	        if (left <= 0) { break; }
	        curr++;
	        left <<= 1;
	      }

	      /* check for enough space */
	      used += 1 << curr;
	      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
	        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
	        return 1;
	      }

	      /* point entry in root table to sub-table */
	      low = huff & mask;
	      /*table.op[low] = curr;
	      table.bits[low] = root;
	      table.val[low] = next - opts.table_index;*/
	      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
	    }
	  }

	  /* fill in remaining table entry if code is incomplete (guaranteed to have
	   at most one remaining entry, since if the code is incomplete, the
	   maximum code length that was allowed to get this far is one bit) */
	  if (huff !== 0) {
	    //table.op[next + huff] = 64;            /* invalid code marker */
	    //table.bits[next + huff] = len - drop;
	    //table.val[next + huff] = 0;
	    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
	  }

	  /* set return parameters */
	  //opts.table_index += used;
	  opts.bits = root;
	  return 0;
	};

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	var utils$v         = common$5;
	var adler32       = adler32_1;
	var crc32         = crc32_1;
	var inflate_fast  = inffast;
	var inflate_table = inftrees;

	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;

	/* Public constants ==========================================================*/
	/* ===========================================================================*/


	/* Allowed flush values; see deflate() and inflate() below for details */
	//var Z_NO_FLUSH      = 0;
	//var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	//var Z_FULL_FLUSH    = 3;
	var Z_FINISH        = 4;
	var Z_BLOCK         = 5;
	var Z_TREES         = 6;


	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK            = 0;
	var Z_STREAM_END    = 1;
	var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR  = -2;
	var Z_DATA_ERROR    = -3;
	var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR     = -5;
	//var Z_VERSION_ERROR = -6;

	/* The deflate compression method */
	var Z_DEFLATED  = 8;


	/* STATES ====================================================================*/
	/* ===========================================================================*/


	var    HEAD = 1;       /* i: waiting for magic header */
	var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */
	var    TIME = 3;       /* i: waiting for modification time (gzip) */
	var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */
	var    EXLEN = 5;      /* i: waiting for extra length (gzip) */
	var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */
	var    NAME = 7;       /* i: waiting for end of file name (gzip) */
	var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */
	var    HCRC = 9;       /* i: waiting for header crc (gzip) */
	var    DICTID = 10;    /* i: waiting for dictionary check value */
	var    DICT = 11;      /* waiting for inflateSetDictionary() call */
	var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */
	var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */
	var        STORED = 14;    /* i: waiting for stored size (length and complement) */
	var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */
	var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */
	var        TABLE = 17;     /* i: waiting for dynamic block table lengths */
	var        LENLENS = 18;   /* i: waiting for code length code lengths */
	var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */
	var            LEN_ = 20;      /* i: same as LEN below, but only first time in */
	var            LEN = 21;       /* i: waiting for length/lit/eob code */
	var            LENEXT = 22;    /* i: waiting for length extra bits */
	var            DIST = 23;      /* i: waiting for distance code */
	var            DISTEXT = 24;   /* i: waiting for distance extra bits */
	var            MATCH = 25;     /* o: waiting for output space to copy string */
	var            LIT = 26;       /* o: waiting for output space to write literal */
	var    CHECK = 27;     /* i: waiting for 32-bit check value */
	var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */
	var    DONE = 29;      /* finished check, done -- remain here until reset */
	var    BAD = 30;       /* got a data error -- remain here until reset */
	var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */
	var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */

	/* ===========================================================================*/



	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

	var MAX_WBITS = 15;
	/* 32K LZ77 window */
	var DEF_WBITS = MAX_WBITS;


	function zswap32(q) {
	  return  (((q >>> 24) & 0xff) +
	          ((q >>> 8) & 0xff00) +
	          ((q & 0xff00) << 8) +
	          ((q & 0xff) << 24));
	}


	function InflateState() {
	  this.mode = 0;             /* current inflate mode */
	  this.last = false;          /* true if processing last block */
	  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
	  this.havedict = false;      /* true if dictionary provided */
	  this.flags = 0;             /* gzip header method and flags (0 if zlib) */
	  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
	  this.check = 0;             /* protected copy of check value */
	  this.total = 0;             /* protected copy of output count */
	  // TODO: may be {}
	  this.head = null;           /* where to save gzip header information */

	  /* sliding window */
	  this.wbits = 0;             /* log base 2 of requested window size */
	  this.wsize = 0;             /* window size or zero if not using window */
	  this.whave = 0;             /* valid bytes in the window */
	  this.wnext = 0;             /* window write index */
	  this.window = null;         /* allocated sliding window, if needed */

	  /* bit accumulator */
	  this.hold = 0;              /* input bit accumulator */
	  this.bits = 0;              /* number of bits in "in" */

	  /* for string and stored block copying */
	  this.length = 0;            /* literal or length of data to copy */
	  this.offset = 0;            /* distance back to copy string from */

	  /* for table and code decoding */
	  this.extra = 0;             /* extra bits needed */

	  /* fixed and dynamic code tables */
	  this.lencode = null;          /* starting table for length/literal codes */
	  this.distcode = null;         /* starting table for distance codes */
	  this.lenbits = 0;           /* index bits for lencode */
	  this.distbits = 0;          /* index bits for distcode */

	  /* dynamic table building */
	  this.ncode = 0;             /* number of code length code lengths */
	  this.nlen = 0;              /* number of length code lengths */
	  this.ndist = 0;             /* number of distance code lengths */
	  this.have = 0;              /* number of code lengths in lens[] */
	  this.next = null;              /* next available space in codes[] */

	  this.lens = new utils$v.Buf16(320); /* temporary storage for code lengths */
	  this.work = new utils$v.Buf16(288); /* work area for code table building */

	  /*
	   because we don't have pointers in js, we use lencode and distcode directly
	   as buffers so we don't need codes
	  */
	  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
	  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
	  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
	  this.sane = 0;                   /* if false, allow invalid distance too far */
	  this.back = 0;                   /* bits back of last unprocessed length/lit */
	  this.was = 0;                    /* initial length of match */
	}

	function inflateResetKeep(strm) {
	  var state;

	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  strm.total_in = strm.total_out = state.total = 0;
	  strm.msg = ''; /*Z_NULL*/
	  if (state.wrap) {       /* to support ill-conceived Java test suite */
	    strm.adler = state.wrap & 1;
	  }
	  state.mode = HEAD;
	  state.last = 0;
	  state.havedict = 0;
	  state.dmax = 32768;
	  state.head = null/*Z_NULL*/;
	  state.hold = 0;
	  state.bits = 0;
	  //state.lencode = state.distcode = state.next = state.codes;
	  state.lencode = state.lendyn = new utils$v.Buf32(ENOUGH_LENS);
	  state.distcode = state.distdyn = new utils$v.Buf32(ENOUGH_DISTS);

	  state.sane = 1;
	  state.back = -1;
	  //Tracev((stderr, "inflate: reset\n"));
	  return Z_OK;
	}

	function inflateReset(strm) {
	  var state;

	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  state.wsize = 0;
	  state.whave = 0;
	  state.wnext = 0;
	  return inflateResetKeep(strm);

	}

	function inflateReset2(strm, windowBits) {
	  var wrap;
	  var state;

	  /* get the state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;

	  /* extract wrap request from windowBits parameter */
	  if (windowBits < 0) {
	    wrap = 0;
	    windowBits = -windowBits;
	  }
	  else {
	    wrap = (windowBits >> 4) + 1;
	    if (windowBits < 48) {
	      windowBits &= 15;
	    }
	  }

	  /* set number of window bits, free window if different */
	  if (windowBits && (windowBits < 8 || windowBits > 15)) {
	    return Z_STREAM_ERROR;
	  }
	  if (state.window !== null && state.wbits !== windowBits) {
	    state.window = null;
	  }

	  /* update state and reset the rest of it */
	  state.wrap = wrap;
	  state.wbits = windowBits;
	  return inflateReset(strm);
	}

	function inflateInit2(strm, windowBits) {
	  var ret;
	  var state;

	  if (!strm) { return Z_STREAM_ERROR; }
	  //strm.msg = Z_NULL;                 /* in case we return an error */

	  state = new InflateState();

	  //if (state === Z_NULL) return Z_MEM_ERROR;
	  //Tracev((stderr, "inflate: allocated\n"));
	  strm.state = state;
	  state.window = null/*Z_NULL*/;
	  ret = inflateReset2(strm, windowBits);
	  if (ret !== Z_OK) {
	    strm.state = null/*Z_NULL*/;
	  }
	  return ret;
	}

	function inflateInit(strm) {
	  return inflateInit2(strm, DEF_WBITS);
	}


	/*
	 Return state with length and distance decoding tables and index sizes set to
	 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
	 If BUILDFIXED is defined, then instead this routine builds the tables the
	 first time it's called, and returns those tables the first time and
	 thereafter.  This reduces the size of the code by about 2K bytes, in
	 exchange for a little execution time.  However, BUILDFIXED should not be
	 used for threaded applications, since the rewriting of the tables and virgin
	 may not be thread-safe.
	 */
	var virgin = true;

	var lenfix, distfix; // We have no pointers in JS, so keep tables separate

	function fixedtables(state) {
	  /* build fixed huffman tables if first call (may not be thread safe) */
	  if (virgin) {
	    var sym;

	    lenfix = new utils$v.Buf32(512);
	    distfix = new utils$v.Buf32(32);

	    /* literal/length table */
	    sym = 0;
	    while (sym < 144) { state.lens[sym++] = 8; }
	    while (sym < 256) { state.lens[sym++] = 9; }
	    while (sym < 280) { state.lens[sym++] = 7; }
	    while (sym < 288) { state.lens[sym++] = 8; }

	    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

	    /* distance table */
	    sym = 0;
	    while (sym < 32) { state.lens[sym++] = 5; }

	    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

	    /* do this just once */
	    virgin = false;
	  }

	  state.lencode = lenfix;
	  state.lenbits = 9;
	  state.distcode = distfix;
	  state.distbits = 5;
	}


	/*
	 Update the window with the last wsize (normally 32K) bytes written before
	 returning.  If window does not exist yet, create it.  This is only called
	 when a window is already in use, or when output has been written during this
	 inflate call, but the end of the deflate stream has not been reached yet.
	 It is also called to create a window for dictionary data when a dictionary
	 is loaded.

	 Providing output buffers larger than 32K to inflate() should provide a speed
	 advantage, since only the last 32K of output is copied to the sliding window
	 upon return from inflate(), and since all distances after the first 32K of
	 output will fall in the output data, making match copies simpler and faster.
	 The advantage may be dependent on the size of the processor's data caches.
	 */
	function updatewindow(strm, src, end, copy) {
	  var dist;
	  var state = strm.state;

	  /* if it hasn't been done already, allocate space for the window */
	  if (state.window === null) {
	    state.wsize = 1 << state.wbits;
	    state.wnext = 0;
	    state.whave = 0;

	    state.window = new utils$v.Buf8(state.wsize);
	  }

	  /* copy state->wsize or less output bytes into the circular window */
	  if (copy >= state.wsize) {
	    utils$v.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
	    state.wnext = 0;
	    state.whave = state.wsize;
	  }
	  else {
	    dist = state.wsize - state.wnext;
	    if (dist > copy) {
	      dist = copy;
	    }
	    //zmemcpy(state->window + state->wnext, end - copy, dist);
	    utils$v.arraySet(state.window, src, end - copy, dist, state.wnext);
	    copy -= dist;
	    if (copy) {
	      //zmemcpy(state->window, end - copy, copy);
	      utils$v.arraySet(state.window, src, end - copy, copy, 0);
	      state.wnext = copy;
	      state.whave = state.wsize;
	    }
	    else {
	      state.wnext += dist;
	      if (state.wnext === state.wsize) { state.wnext = 0; }
	      if (state.whave < state.wsize) { state.whave += dist; }
	    }
	  }
	  return 0;
	}

	function inflate$2(strm, flush) {
	  var state;
	  var input, output;          // input/output buffers
	  var next;                   /* next input INDEX */
	  var put;                    /* next output INDEX */
	  var have, left;             /* available input and output */
	  var hold;                   /* bit buffer */
	  var bits;                   /* bits in bit buffer */
	  var _in, _out;              /* save starting available input and output */
	  var copy;                   /* number of stored or match bytes to copy */
	  var from;                   /* where to copy match bytes from */
	  var from_source;
	  var here = 0;               /* current decoding table entry */
	  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
	  //var last;                   /* parent table entry */
	  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
	  var len;                    /* length to copy for repeats, bits to drop */
	  var ret;                    /* return code */
	  var hbuf = new utils$v.Buf8(4);    /* buffer for gzip header crc calculation */
	  var opts;

	  var n; // temporary var for NEED_BITS

	  var order = /* permutation of code lengths */
	    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];


	  if (!strm || !strm.state || !strm.output ||
	      (!strm.input && strm.avail_in !== 0)) {
	    return Z_STREAM_ERROR;
	  }

	  state = strm.state;
	  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


	  //--- LOAD() ---
	  put = strm.next_out;
	  output = strm.output;
	  left = strm.avail_out;
	  next = strm.next_in;
	  input = strm.input;
	  have = strm.avail_in;
	  hold = state.hold;
	  bits = state.bits;
	  //---

	  _in = have;
	  _out = left;
	  ret = Z_OK;

	  inf_leave: // goto emulation
	  for (;;) {
	    switch (state.mode) {
	      case HEAD:
	        if (state.wrap === 0) {
	          state.mode = TYPEDO;
	          break;
	        }
	        //=== NEEDBITS(16);
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
	          state.check = 0/*crc32(0L, Z_NULL, 0)*/;
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          state.check = crc32(state.check, hbuf, 2, 0);
	          //===//

	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	          state.mode = FLAGS;
	          break;
	        }
	        state.flags = 0;           /* expect zlib header */
	        if (state.head) {
	          state.head.done = false;
	        }
	        if (!(state.wrap & 1) ||   /* check if zlib header allowed */
	          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
	          strm.msg = 'incorrect header check';
	          state.mode = BAD;
	          break;
	        }
	        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
	          strm.msg = 'unknown compression method';
	          state.mode = BAD;
	          break;
	        }
	        //--- DROPBITS(4) ---//
	        hold >>>= 4;
	        bits -= 4;
	        //---//
	        len = (hold & 0x0f)/*BITS(4)*/ + 8;
	        if (state.wbits === 0) {
	          state.wbits = len;
	        }
	        else if (len > state.wbits) {
	          strm.msg = 'invalid window size';
	          state.mode = BAD;
	          break;
	        }
	        state.dmax = 1 << len;
	        //Tracev((stderr, "inflate:   zlib header ok\n"));
	        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	        state.mode = hold & 0x200 ? DICTID : TYPE;
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        break;
	      case FLAGS:
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.flags = hold;
	        if ((state.flags & 0xff) !== Z_DEFLATED) {
	          strm.msg = 'unknown compression method';
	          state.mode = BAD;
	          break;
	        }
	        if (state.flags & 0xe000) {
	          strm.msg = 'unknown header flags set';
	          state.mode = BAD;
	          break;
	        }
	        if (state.head) {
	          state.head.text = ((hold >> 8) & 1);
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          state.check = crc32(state.check, hbuf, 2, 0);
	          //===//
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = TIME;
	        /* falls through */
	      case TIME:
	        //=== NEEDBITS(32); */
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (state.head) {
	          state.head.time = hold;
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC4(state.check, hold)
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          hbuf[2] = (hold >>> 16) & 0xff;
	          hbuf[3] = (hold >>> 24) & 0xff;
	          state.check = crc32(state.check, hbuf, 4, 0);
	          //===
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = OS;
	        /* falls through */
	      case OS:
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (state.head) {
	          state.head.xflags = (hold & 0xff);
	          state.head.os = (hold >> 8);
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = (hold >>> 8) & 0xff;
	          state.check = crc32(state.check, hbuf, 2, 0);
	          //===//
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = EXLEN;
	        /* falls through */
	      case EXLEN:
	        if (state.flags & 0x0400) {
	          //=== NEEDBITS(16); */
	          while (bits < 16) {
	            if (have === 0) { break inf_leave; }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          state.length = hold;
	          if (state.head) {
	            state.head.extra_len = hold;
	          }
	          if (state.flags & 0x0200) {
	            //=== CRC2(state.check, hold);
	            hbuf[0] = hold & 0xff;
	            hbuf[1] = (hold >>> 8) & 0xff;
	            state.check = crc32(state.check, hbuf, 2, 0);
	            //===//
	          }
	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	        }
	        else if (state.head) {
	          state.head.extra = null/*Z_NULL*/;
	        }
	        state.mode = EXTRA;
	        /* falls through */
	      case EXTRA:
	        if (state.flags & 0x0400) {
	          copy = state.length;
	          if (copy > have) { copy = have; }
	          if (copy) {
	            if (state.head) {
	              len = state.head.extra_len - state.length;
	              if (!state.head.extra) {
	                // Use untyped array for more convenient processing later
	                state.head.extra = new Array(state.head.extra_len);
	              }
	              utils$v.arraySet(
	                state.head.extra,
	                input,
	                next,
	                // extra field is limited to 65536 bytes
	                // - no need for additional size check
	                copy,
	                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
	                len
	              );
	              //zmemcpy(state.head.extra + len, next,
	              //        len + copy > state.head.extra_max ?
	              //        state.head.extra_max - len : copy);
	            }
	            if (state.flags & 0x0200) {
	              state.check = crc32(state.check, input, copy, next);
	            }
	            have -= copy;
	            next += copy;
	            state.length -= copy;
	          }
	          if (state.length) { break inf_leave; }
	        }
	        state.length = 0;
	        state.mode = NAME;
	        /* falls through */
	      case NAME:
	        if (state.flags & 0x0800) {
	          if (have === 0) { break inf_leave; }
	          copy = 0;
	          do {
	            // TODO: 2 or 1 bytes?
	            len = input[next + copy++];
	            /* use constant limit because in js we should not preallocate memory */
	            if (state.head && len &&
	                (state.length < 65536 /*state.head.name_max*/)) {
	              state.head.name += String.fromCharCode(len);
	            }
	          } while (len && copy < have);

	          if (state.flags & 0x0200) {
	            state.check = crc32(state.check, input, copy, next);
	          }
	          have -= copy;
	          next += copy;
	          if (len) { break inf_leave; }
	        }
	        else if (state.head) {
	          state.head.name = null;
	        }
	        state.length = 0;
	        state.mode = COMMENT;
	        /* falls through */
	      case COMMENT:
	        if (state.flags & 0x1000) {
	          if (have === 0) { break inf_leave; }
	          copy = 0;
	          do {
	            len = input[next + copy++];
	            /* use constant limit because in js we should not preallocate memory */
	            if (state.head && len &&
	                (state.length < 65536 /*state.head.comm_max*/)) {
	              state.head.comment += String.fromCharCode(len);
	            }
	          } while (len && copy < have);
	          if (state.flags & 0x0200) {
	            state.check = crc32(state.check, input, copy, next);
	          }
	          have -= copy;
	          next += copy;
	          if (len) { break inf_leave; }
	        }
	        else if (state.head) {
	          state.head.comment = null;
	        }
	        state.mode = HCRC;
	        /* falls through */
	      case HCRC:
	        if (state.flags & 0x0200) {
	          //=== NEEDBITS(16); */
	          while (bits < 16) {
	            if (have === 0) { break inf_leave; }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          if (hold !== (state.check & 0xffff)) {
	            strm.msg = 'header crc mismatch';
	            state.mode = BAD;
	            break;
	          }
	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	        }
	        if (state.head) {
	          state.head.hcrc = ((state.flags >> 9) & 1);
	          state.head.done = true;
	        }
	        strm.adler = state.check = 0;
	        state.mode = TYPE;
	        break;
	      case DICTID:
	        //=== NEEDBITS(32); */
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        strm.adler = state.check = zswap32(hold);
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = DICT;
	        /* falls through */
	      case DICT:
	        if (state.havedict === 0) {
	          //--- RESTORE() ---
	          strm.next_out = put;
	          strm.avail_out = left;
	          strm.next_in = next;
	          strm.avail_in = have;
	          state.hold = hold;
	          state.bits = bits;
	          //---
	          return Z_NEED_DICT;
	        }
	        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
	        state.mode = TYPE;
	        /* falls through */
	      case TYPE:
	        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
	        /* falls through */
	      case TYPEDO:
	        if (state.last) {
	          //--- BYTEBITS() ---//
	          hold >>>= bits & 7;
	          bits -= bits & 7;
	          //---//
	          state.mode = CHECK;
	          break;
	        }
	        //=== NEEDBITS(3); */
	        while (bits < 3) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.last = (hold & 0x01)/*BITS(1)*/;
	        //--- DROPBITS(1) ---//
	        hold >>>= 1;
	        bits -= 1;
	        //---//

	        switch ((hold & 0x03)/*BITS(2)*/) {
	          case 0:                             /* stored block */
	            //Tracev((stderr, "inflate:     stored block%s\n",
	            //        state.last ? " (last)" : ""));
	            state.mode = STORED;
	            break;
	          case 1:                             /* fixed block */
	            fixedtables(state);
	            //Tracev((stderr, "inflate:     fixed codes block%s\n",
	            //        state.last ? " (last)" : ""));
	            state.mode = LEN_;             /* decode codes */
	            if (flush === Z_TREES) {
	              //--- DROPBITS(2) ---//
	              hold >>>= 2;
	              bits -= 2;
	              //---//
	              break inf_leave;
	            }
	            break;
	          case 2:                             /* dynamic block */
	            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
	            //        state.last ? " (last)" : ""));
	            state.mode = TABLE;
	            break;
	          case 3:
	            strm.msg = 'invalid block type';
	            state.mode = BAD;
	        }
	        //--- DROPBITS(2) ---//
	        hold >>>= 2;
	        bits -= 2;
	        //---//
	        break;
	      case STORED:
	        //--- BYTEBITS() ---// /* go to byte boundary */
	        hold >>>= bits & 7;
	        bits -= bits & 7;
	        //---//
	        //=== NEEDBITS(32); */
	        while (bits < 32) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
	          strm.msg = 'invalid stored block lengths';
	          state.mode = BAD;
	          break;
	        }
	        state.length = hold & 0xffff;
	        //Tracev((stderr, "inflate:       stored length %u\n",
	        //        state.length));
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = COPY_;
	        if (flush === Z_TREES) { break inf_leave; }
	        /* falls through */
	      case COPY_:
	        state.mode = COPY;
	        /* falls through */
	      case COPY:
	        copy = state.length;
	        if (copy) {
	          if (copy > have) { copy = have; }
	          if (copy > left) { copy = left; }
	          if (copy === 0) { break inf_leave; }
	          //--- zmemcpy(put, next, copy); ---
	          utils$v.arraySet(output, input, next, copy, put);
	          //---//
	          have -= copy;
	          next += copy;
	          left -= copy;
	          put += copy;
	          state.length -= copy;
	          break;
	        }
	        //Tracev((stderr, "inflate:       stored end\n"));
	        state.mode = TYPE;
	        break;
	      case TABLE:
	        //=== NEEDBITS(14); */
	        while (bits < 14) {
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
	        //--- DROPBITS(5) ---//
	        hold >>>= 5;
	        bits -= 5;
	        //---//
	        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
	        //--- DROPBITS(5) ---//
	        hold >>>= 5;
	        bits -= 5;
	        //---//
	        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
	        //--- DROPBITS(4) ---//
	        hold >>>= 4;
	        bits -= 4;
	        //---//
	//#ifndef PKZIP_BUG_WORKAROUND
	        if (state.nlen > 286 || state.ndist > 30) {
	          strm.msg = 'too many length or distance symbols';
	          state.mode = BAD;
	          break;
	        }
	//#endif
	        //Tracev((stderr, "inflate:       table sizes ok\n"));
	        state.have = 0;
	        state.mode = LENLENS;
	        /* falls through */
	      case LENLENS:
	        while (state.have < state.ncode) {
	          //=== NEEDBITS(3);
	          while (bits < 3) {
	            if (have === 0) { break inf_leave; }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
	          //--- DROPBITS(3) ---//
	          hold >>>= 3;
	          bits -= 3;
	          //---//
	        }
	        while (state.have < 19) {
	          state.lens[order[state.have++]] = 0;
	        }
	        // We have separate tables & no pointers. 2 commented lines below not needed.
	        //state.next = state.codes;
	        //state.lencode = state.next;
	        // Switch to use dynamic table
	        state.lencode = state.lendyn;
	        state.lenbits = 7;

	        opts = { bits: state.lenbits };
	        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
	        state.lenbits = opts.bits;

	        if (ret) {
	          strm.msg = 'invalid code lengths set';
	          state.mode = BAD;
	          break;
	        }
	        //Tracev((stderr, "inflate:       code lengths ok\n"));
	        state.have = 0;
	        state.mode = CODELENS;
	        /* falls through */
	      case CODELENS:
	        while (state.have < state.nlen + state.ndist) {
	          for (;;) {
	            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
	            here_bits = here >>> 24;
	            here_op = (here >>> 16) & 0xff;
	            here_val = here & 0xffff;

	            if ((here_bits) <= bits) { break; }
	            //--- PULLBYTE() ---//
	            if (have === 0) { break inf_leave; }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	            //---//
	          }
	          if (here_val < 16) {
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            state.lens[state.have++] = here_val;
	          }
	          else {
	            if (here_val === 16) {
	              //=== NEEDBITS(here.bits + 2);
	              n = here_bits + 2;
	              while (bits < n) {
	                if (have === 0) { break inf_leave; }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	              }
	              //===//
	              //--- DROPBITS(here.bits) ---//
	              hold >>>= here_bits;
	              bits -= here_bits;
	              //---//
	              if (state.have === 0) {
	                strm.msg = 'invalid bit length repeat';
	                state.mode = BAD;
	                break;
	              }
	              len = state.lens[state.have - 1];
	              copy = 3 + (hold & 0x03);//BITS(2);
	              //--- DROPBITS(2) ---//
	              hold >>>= 2;
	              bits -= 2;
	              //---//
	            }
	            else if (here_val === 17) {
	              //=== NEEDBITS(here.bits + 3);
	              n = here_bits + 3;
	              while (bits < n) {
	                if (have === 0) { break inf_leave; }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	              }
	              //===//
	              //--- DROPBITS(here.bits) ---//
	              hold >>>= here_bits;
	              bits -= here_bits;
	              //---//
	              len = 0;
	              copy = 3 + (hold & 0x07);//BITS(3);
	              //--- DROPBITS(3) ---//
	              hold >>>= 3;
	              bits -= 3;
	              //---//
	            }
	            else {
	              //=== NEEDBITS(here.bits + 7);
	              n = here_bits + 7;
	              while (bits < n) {
	                if (have === 0) { break inf_leave; }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	              }
	              //===//
	              //--- DROPBITS(here.bits) ---//
	              hold >>>= here_bits;
	              bits -= here_bits;
	              //---//
	              len = 0;
	              copy = 11 + (hold & 0x7f);//BITS(7);
	              //--- DROPBITS(7) ---//
	              hold >>>= 7;
	              bits -= 7;
	              //---//
	            }
	            if (state.have + copy > state.nlen + state.ndist) {
	              strm.msg = 'invalid bit length repeat';
	              state.mode = BAD;
	              break;
	            }
	            while (copy--) {
	              state.lens[state.have++] = len;
	            }
	          }
	        }

	        /* handle error breaks in while */
	        if (state.mode === BAD) { break; }

	        /* check for end-of-block code (better have one) */
	        if (state.lens[256] === 0) {
	          strm.msg = 'invalid code -- missing end-of-block';
	          state.mode = BAD;
	          break;
	        }

	        /* build code tables -- note: do not change the lenbits or distbits
	           values here (9 and 6) without reading the comments in inftrees.h
	           concerning the ENOUGH constants, which depend on those values */
	        state.lenbits = 9;

	        opts = { bits: state.lenbits };
	        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
	        // We have separate tables & no pointers. 2 commented lines below not needed.
	        // state.next_index = opts.table_index;
	        state.lenbits = opts.bits;
	        // state.lencode = state.next;

	        if (ret) {
	          strm.msg = 'invalid literal/lengths set';
	          state.mode = BAD;
	          break;
	        }

	        state.distbits = 6;
	        //state.distcode.copy(state.codes);
	        // Switch to use dynamic table
	        state.distcode = state.distdyn;
	        opts = { bits: state.distbits };
	        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
	        // We have separate tables & no pointers. 2 commented lines below not needed.
	        // state.next_index = opts.table_index;
	        state.distbits = opts.bits;
	        // state.distcode = state.next;

	        if (ret) {
	          strm.msg = 'invalid distances set';
	          state.mode = BAD;
	          break;
	        }
	        //Tracev((stderr, 'inflate:       codes ok\n'));
	        state.mode = LEN_;
	        if (flush === Z_TREES) { break inf_leave; }
	        /* falls through */
	      case LEN_:
	        state.mode = LEN;
	        /* falls through */
	      case LEN:
	        if (have >= 6 && left >= 258) {
	          //--- RESTORE() ---
	          strm.next_out = put;
	          strm.avail_out = left;
	          strm.next_in = next;
	          strm.avail_in = have;
	          state.hold = hold;
	          state.bits = bits;
	          //---
	          inflate_fast(strm, _out);
	          //--- LOAD() ---
	          put = strm.next_out;
	          output = strm.output;
	          left = strm.avail_out;
	          next = strm.next_in;
	          input = strm.input;
	          have = strm.avail_in;
	          hold = state.hold;
	          bits = state.bits;
	          //---

	          if (state.mode === TYPE) {
	            state.back = -1;
	          }
	          break;
	        }
	        state.back = 0;
	        for (;;) {
	          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if (here_bits <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        if (here_op && (here_op & 0xf0) === 0) {
	          last_bits = here_bits;
	          last_op = here_op;
	          last_val = here_val;
	          for (;;) {
	            here = state.lencode[last_val +
	                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	            here_bits = here >>> 24;
	            here_op = (here >>> 16) & 0xff;
	            here_val = here & 0xffff;

	            if ((last_bits + here_bits) <= bits) { break; }
	            //--- PULLBYTE() ---//
	            if (have === 0) { break inf_leave; }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	            //---//
	          }
	          //--- DROPBITS(last.bits) ---//
	          hold >>>= last_bits;
	          bits -= last_bits;
	          //---//
	          state.back += last_bits;
	        }
	        //--- DROPBITS(here.bits) ---//
	        hold >>>= here_bits;
	        bits -= here_bits;
	        //---//
	        state.back += here_bits;
	        state.length = here_val;
	        if (here_op === 0) {
	          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	          //        "inflate:         literal '%c'\n" :
	          //        "inflate:         literal 0x%02x\n", here.val));
	          state.mode = LIT;
	          break;
	        }
	        if (here_op & 32) {
	          //Tracevv((stderr, "inflate:         end of block\n"));
	          state.back = -1;
	          state.mode = TYPE;
	          break;
	        }
	        if (here_op & 64) {
	          strm.msg = 'invalid literal/length code';
	          state.mode = BAD;
	          break;
	        }
	        state.extra = here_op & 15;
	        state.mode = LENEXT;
	        /* falls through */
	      case LENEXT:
	        if (state.extra) {
	          //=== NEEDBITS(state.extra);
	          n = state.extra;
	          while (bits < n) {
	            if (have === 0) { break inf_leave; }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
	          //--- DROPBITS(state.extra) ---//
	          hold >>>= state.extra;
	          bits -= state.extra;
	          //---//
	          state.back += state.extra;
	        }
	        //Tracevv((stderr, "inflate:         length %u\n", state.length));
	        state.was = state.length;
	        state.mode = DIST;
	        /* falls through */
	      case DIST:
	        for (;;) {
	          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
	          here_bits = here >>> 24;
	          here_op = (here >>> 16) & 0xff;
	          here_val = here & 0xffff;

	          if ((here_bits) <= bits) { break; }
	          //--- PULLBYTE() ---//
	          if (have === 0) { break inf_leave; }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        if ((here_op & 0xf0) === 0) {
	          last_bits = here_bits;
	          last_op = here_op;
	          last_val = here_val;
	          for (;;) {
	            here = state.distcode[last_val +
	                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
	            here_bits = here >>> 24;
	            here_op = (here >>> 16) & 0xff;
	            here_val = here & 0xffff;

	            if ((last_bits + here_bits) <= bits) { break; }
	            //--- PULLBYTE() ---//
	            if (have === 0) { break inf_leave; }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	            //---//
	          }
	          //--- DROPBITS(last.bits) ---//
	          hold >>>= last_bits;
	          bits -= last_bits;
	          //---//
	          state.back += last_bits;
	        }
	        //--- DROPBITS(here.bits) ---//
	        hold >>>= here_bits;
	        bits -= here_bits;
	        //---//
	        state.back += here_bits;
	        if (here_op & 64) {
	          strm.msg = 'invalid distance code';
	          state.mode = BAD;
	          break;
	        }
	        state.offset = here_val;
	        state.extra = (here_op) & 15;
	        state.mode = DISTEXT;
	        /* falls through */
	      case DISTEXT:
	        if (state.extra) {
	          //=== NEEDBITS(state.extra);
	          n = state.extra;
	          while (bits < n) {
	            if (have === 0) { break inf_leave; }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
	          //--- DROPBITS(state.extra) ---//
	          hold >>>= state.extra;
	          bits -= state.extra;
	          //---//
	          state.back += state.extra;
	        }
	//#ifdef INFLATE_STRICT
	        if (state.offset > state.dmax) {
	          strm.msg = 'invalid distance too far back';
	          state.mode = BAD;
	          break;
	        }
	//#endif
	        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
	        state.mode = MATCH;
	        /* falls through */
	      case MATCH:
	        if (left === 0) { break inf_leave; }
	        copy = _out - left;
	        if (state.offset > copy) {         /* copy from window */
	          copy = state.offset - copy;
	          if (copy > state.whave) {
	            if (state.sane) {
	              strm.msg = 'invalid distance too far back';
	              state.mode = BAD;
	              break;
	            }
	// (!) This block is disabled in zlib defaults,
	// don't enable it for binary compatibility
	//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	//          Trace((stderr, "inflate.c too far\n"));
	//          copy -= state.whave;
	//          if (copy > state.length) { copy = state.length; }
	//          if (copy > left) { copy = left; }
	//          left -= copy;
	//          state.length -= copy;
	//          do {
	//            output[put++] = 0;
	//          } while (--copy);
	//          if (state.length === 0) { state.mode = LEN; }
	//          break;
	//#endif
	          }
	          if (copy > state.wnext) {
	            copy -= state.wnext;
	            from = state.wsize - copy;
	          }
	          else {
	            from = state.wnext - copy;
	          }
	          if (copy > state.length) { copy = state.length; }
	          from_source = state.window;
	        }
	        else {                              /* copy from output */
	          from_source = output;
	          from = put - state.offset;
	          copy = state.length;
	        }
	        if (copy > left) { copy = left; }
	        left -= copy;
	        state.length -= copy;
	        do {
	          output[put++] = from_source[from++];
	        } while (--copy);
	        if (state.length === 0) { state.mode = LEN; }
	        break;
	      case LIT:
	        if (left === 0) { break inf_leave; }
	        output[put++] = state.length;
	        left--;
	        state.mode = LEN;
	        break;
	      case CHECK:
	        if (state.wrap) {
	          //=== NEEDBITS(32);
	          while (bits < 32) {
	            if (have === 0) { break inf_leave; }
	            have--;
	            // Use '|' instead of '+' to make sure that result is signed
	            hold |= input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          _out -= left;
	          strm.total_out += _out;
	          state.total += _out;
	          if (_out) {
	            strm.adler = state.check =
	                /*UPDATE(state.check, put - _out, _out);*/
	                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));

	          }
	          _out = left;
	          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
	          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
	            strm.msg = 'incorrect data check';
	            state.mode = BAD;
	            break;
	          }
	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	          //Tracev((stderr, "inflate:   check matches trailer\n"));
	        }
	        state.mode = LENGTH;
	        /* falls through */
	      case LENGTH:
	        if (state.wrap && state.flags) {
	          //=== NEEDBITS(32);
	          while (bits < 32) {
	            if (have === 0) { break inf_leave; }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          if (hold !== (state.total & 0xffffffff)) {
	            strm.msg = 'incorrect length check';
	            state.mode = BAD;
	            break;
	          }
	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	          //Tracev((stderr, "inflate:   length matches trailer\n"));
	        }
	        state.mode = DONE;
	        /* falls through */
	      case DONE:
	        ret = Z_STREAM_END;
	        break inf_leave;
	      case BAD:
	        ret = Z_DATA_ERROR;
	        break inf_leave;
	      case MEM:
	        return Z_MEM_ERROR;
	      case SYNC:
	        /* falls through */
	      default:
	        return Z_STREAM_ERROR;
	    }
	  }

	  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

	  /*
	     Return from inflate(), updating the total counts and the check value.
	     If there was no progress during the inflate() call, return a buffer
	     error.  Call updatewindow() to create and/or update the window state.
	     Note: a memory error from inflate() is non-recoverable.
	   */

	  //--- RESTORE() ---
	  strm.next_out = put;
	  strm.avail_out = left;
	  strm.next_in = next;
	  strm.avail_in = have;
	  state.hold = hold;
	  state.bits = bits;
	  //---

	  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
	                      (state.mode < CHECK || flush !== Z_FINISH))) {
	    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
	  }
	  _in -= strm.avail_in;
	  _out -= strm.avail_out;
	  strm.total_in += _in;
	  strm.total_out += _out;
	  state.total += _out;
	  if (state.wrap && _out) {
	    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
	      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));
	  }
	  strm.data_type = state.bits + (state.last ? 64 : 0) +
	                    (state.mode === TYPE ? 128 : 0) +
	                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
	  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {
	    ret = Z_BUF_ERROR;
	  }
	  return ret;
	}

	function inflateEnd(strm) {

	  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
	    return Z_STREAM_ERROR;
	  }

	  var state = strm.state;
	  if (state.window) {
	    state.window = null;
	  }
	  strm.state = null;
	  return Z_OK;
	}

	function inflateGetHeader(strm, head) {
	  var state;

	  /* check state */
	  if (!strm || !strm.state) { return Z_STREAM_ERROR; }
	  state = strm.state;
	  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }

	  /* save header structure */
	  state.head = head;
	  head.done = false;
	  return Z_OK;
	}

	function inflateSetDictionary(strm, dictionary) {
	  var dictLength = dictionary.length;

	  var state;
	  var dictid;
	  var ret;

	  /* check state */
	  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }
	  state = strm.state;

	  if (state.wrap !== 0 && state.mode !== DICT) {
	    return Z_STREAM_ERROR;
	  }

	  /* check for correct dictionary identifier */
	  if (state.mode === DICT) {
	    dictid = 1; /* adler32(0, null, 0)*/
	    /* dictid = adler32(dictid, dictionary, dictLength); */
	    dictid = adler32(dictid, dictionary, dictLength, 0);
	    if (dictid !== state.check) {
	      return Z_DATA_ERROR;
	    }
	  }
	  /* copy dictionary to window using updatewindow(), which will amend the
	   existing dictionary if appropriate */
	  ret = updatewindow(strm, dictionary, dictLength, dictLength);
	  if (ret) {
	    state.mode = MEM;
	    return Z_MEM_ERROR;
	  }
	  state.havedict = 1;
	  // Tracev((stderr, "inflate:   dictionary set\n"));
	  return Z_OK;
	}

	inflate$3.inflateReset = inflateReset;
	inflate$3.inflateReset2 = inflateReset2;
	inflate$3.inflateResetKeep = inflateResetKeep;
	inflate$3.inflateInit = inflateInit;
	inflate$3.inflateInit2 = inflateInit2;
	inflate$3.inflate = inflate$2;
	inflate$3.inflateEnd = inflateEnd;
	inflate$3.inflateGetHeader = inflateGetHeader;
	inflate$3.inflateSetDictionary = inflateSetDictionary;
	inflate$3.inflateInfo = 'pako inflate (from Nodeca project)';

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	var constants$i = {

	  /* Allowed flush values; see deflate() and inflate() below for details */
	  Z_NO_FLUSH:         0,
	  Z_PARTIAL_FLUSH:    1,
	  Z_SYNC_FLUSH:       2,
	  Z_FULL_FLUSH:       3,
	  Z_FINISH:           4,
	  Z_BLOCK:            5,
	  Z_TREES:            6,

	  /* Return codes for the compression/decompression functions. Negative values
	  * are errors, positive values are used for special but normal events.
	  */
	  Z_OK:               0,
	  Z_STREAM_END:       1,
	  Z_NEED_DICT:        2,
	  Z_ERRNO:           -1,
	  Z_STREAM_ERROR:    -2,
	  Z_DATA_ERROR:      -3,
	  //Z_MEM_ERROR:     -4,
	  Z_BUF_ERROR:       -5,
	  //Z_VERSION_ERROR: -6,

	  /* compression levels */
	  Z_NO_COMPRESSION:         0,
	  Z_BEST_SPEED:             1,
	  Z_BEST_COMPRESSION:       9,
	  Z_DEFAULT_COMPRESSION:   -1,


	  Z_FILTERED:               1,
	  Z_HUFFMAN_ONLY:           2,
	  Z_RLE:                    3,
	  Z_FIXED:                  4,
	  Z_DEFAULT_STRATEGY:       0,

	  /* Possible values of the data_type field (though see inflate()) */
	  Z_BINARY:                 0,
	  Z_TEXT:                   1,
	  //Z_ASCII:                1, // = Z_TEXT (deprecated)
	  Z_UNKNOWN:                2,

	  /* The deflate compression method */
	  Z_DEFLATED:               8
	  //Z_NULL:                 null // Use -1 or null inline, depending on var type
	};

	// (C) 1995-2013 Jean-loup Gailly and Mark Adler
	// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
	//
	// This software is provided 'as-is', without any express or implied
	// warranty. In no event will the authors be held liable for any damages
	// arising from the use of this software.
	//
	// Permission is granted to anyone to use this software for any purpose,
	// including commercial applications, and to alter it and redistribute it
	// freely, subject to the following restrictions:
	//
	// 1. The origin of this software must not be misrepresented; you must not
	//   claim that you wrote the original software. If you use this software
	//   in a product, an acknowledgment in the product documentation would be
	//   appreciated but is not required.
	// 2. Altered source versions must be plainly marked as such, and must not be
	//   misrepresented as being the original software.
	// 3. This notice may not be removed or altered from any source distribution.

	function GZheader$1() {
	  /* true if compressed data believed to be text */
	  this.text       = 0;
	  /* modification time */
	  this.time       = 0;
	  /* extra flags (not used when writing a gzip file) */
	  this.xflags     = 0;
	  /* operating system */
	  this.os         = 0;
	  /* pointer to extra field or Z_NULL if none */
	  this.extra      = null;
	  /* extra field length (valid if extra != Z_NULL) */
	  this.extra_len  = 0; // Actually, we don't need it in JS,
	                       // but leave for few code modifications

	  //
	  // Setup limits is not necessary because in js we should not preallocate memory
	  // for inflate use constant limit in 65536 bytes
	  //

	  /* space at extra (only when reading header) */
	  // this.extra_max  = 0;
	  /* pointer to zero-terminated file name or Z_NULL */
	  this.name       = '';
	  /* space at name (only when reading header) */
	  // this.name_max   = 0;
	  /* pointer to zero-terminated comment or Z_NULL */
	  this.comment    = '';
	  /* space at comment (only when reading header) */
	  // this.comm_max   = 0;
	  /* true if there was or will be a header crc */
	  this.hcrc       = 0;
	  /* true when done reading gzip header (not used when writing a gzip file) */
	  this.done       = false;
	}

	var gzheader = GZheader$1;

	var zlib_inflate = inflate$3;
	var utils$u        = common$5;
	var strings      = strings$2;
	var c            = constants$i;
	var msg          = messages$3;
	var ZStream      = zstream;
	var GZheader     = gzheader;

	var toString$2 = Object.prototype.toString;

	/**
	 * class Inflate
	 *
	 * Generic JS-style wrapper for zlib calls. If you don't need
	 * streaming behaviour - use more simple functions: [[inflate]]
	 * and [[inflateRaw]].
	 **/

	/* internal
	 * inflate.chunks -> Array
	 *
	 * Chunks of output data, if [[Inflate#onData]] not overridden.
	 **/

	/**
	 * Inflate.result -> Uint8Array|Array|String
	 *
	 * Uncompressed result, generated by default [[Inflate#onData]]
	 * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
	 * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
	 * push a chunk with explicit flush (call [[Inflate#push]] with
	 * `Z_SYNC_FLUSH` param).
	 **/

	/**
	 * Inflate.err -> Number
	 *
	 * Error code after inflate finished. 0 (Z_OK) on success.
	 * Should be checked if broken data possible.
	 **/

	/**
	 * Inflate.msg -> String
	 *
	 * Error message, if [[Inflate.err]] != 0
	 **/


	/**
	 * new Inflate(options)
	 * - options (Object): zlib inflate options.
	 *
	 * Creates new inflator instance with specified params. Throws exception
	 * on bad params. Supported options:
	 *
	 * - `windowBits`
	 * - `dictionary`
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information on these.
	 *
	 * Additional options, for internal needs:
	 *
	 * - `chunkSize` - size of generated data chunks (16K by default)
	 * - `raw` (Boolean) - do raw inflate
	 * - `to` (String) - if equal to 'string', then result will be converted
	 *   from utf8 to utf16 (javascript) string. When string output requested,
	 *   chunk length can differ from `chunkSize`, depending on content.
	 *
	 * By default, when no options set, autodetect deflate/gzip data format via
	 * wrapper header.
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
	 *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
	 *
	 * var inflate = new pako.Inflate({ level: 3});
	 *
	 * inflate.push(chunk1, false);
	 * inflate.push(chunk2, true);  // true -> last chunk
	 *
	 * if (inflate.err) { throw new Error(inflate.err); }
	 *
	 * console.log(inflate.result);
	 * ```
	 **/
	function Inflate(options) {
	  if (!(this instanceof Inflate)) return new Inflate(options);

	  this.options = utils$u.assign({
	    chunkSize: 16384,
	    windowBits: 0,
	    to: ''
	  }, options || {});

	  var opt = this.options;

	  // Force window size for `raw` data, if not set directly,
	  // because we have no header for autodetect.
	  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
	    opt.windowBits = -opt.windowBits;
	    if (opt.windowBits === 0) { opt.windowBits = -15; }
	  }

	  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
	  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
	      !(options && options.windowBits)) {
	    opt.windowBits += 32;
	  }

	  // Gzip header has no info about windows size, we can do autodetect only
	  // for deflate. So, if window size not set, force it to max when gzip possible
	  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
	    // bit 3 (16) -> gzipped data
	    // bit 4 (32) -> autodetect gzip/deflate
	    if ((opt.windowBits & 15) === 0) {
	      opt.windowBits |= 15;
	    }
	  }

	  this.err    = 0;      // error code, if happens (0 = Z_OK)
	  this.msg    = '';     // error message
	  this.ended  = false;  // used to avoid multiple onEnd() calls
	  this.chunks = [];     // chunks of compressed data

	  this.strm   = new ZStream();
	  this.strm.avail_out = 0;

	  var status  = zlib_inflate.inflateInit2(
	    this.strm,
	    opt.windowBits
	  );

	  if (status !== c.Z_OK) {
	    throw new Error(msg[status]);
	  }

	  this.header = new GZheader();

	  zlib_inflate.inflateGetHeader(this.strm, this.header);

	  // Setup dictionary
	  if (opt.dictionary) {
	    // Convert data if needed
	    if (typeof opt.dictionary === 'string') {
	      opt.dictionary = strings.string2buf(opt.dictionary);
	    } else if (toString$2.call(opt.dictionary) === '[object ArrayBuffer]') {
	      opt.dictionary = new Uint8Array(opt.dictionary);
	    }
	    if (opt.raw) { //In raw mode we need to set the dictionary early
	      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);
	      if (status !== c.Z_OK) {
	        throw new Error(msg[status]);
	      }
	    }
	  }
	}

	/**
	 * Inflate#push(data[, mode]) -> Boolean
	 * - data (Uint8Array|Array|ArrayBuffer|String): input data
	 * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
	 *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
	 *
	 * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
	 * new output chunks. Returns `true` on success. The last data block must have
	 * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
	 * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
	 * can use mode Z_SYNC_FLUSH, keeping the decompression context.
	 *
	 * On fail call [[Inflate#onEnd]] with error code and return false.
	 *
	 * We strongly recommend to use `Uint8Array` on input for best speed (output
	 * format is detected automatically). Also, don't skip last param and always
	 * use the same type in your code (boolean or number). That will improve JS speed.
	 *
	 * For regular `Array`-s make sure all elements are [0..255].
	 *
	 * ##### Example
	 *
	 * ```javascript
	 * push(chunk, false); // push one of data chunks
	 * ...
	 * push(chunk, true);  // push last chunk
	 * ```
	 **/
	Inflate.prototype.push = function (data, mode) {
	  var strm = this.strm;
	  var chunkSize = this.options.chunkSize;
	  var dictionary = this.options.dictionary;
	  var status, _mode;
	  var next_out_utf8, tail, utf8str;

	  // Flag to properly process Z_BUF_ERROR on testing inflate call
	  // when we check that all output data was flushed.
	  var allowBufError = false;

	  if (this.ended) { return false; }
	  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);

	  // Convert data if needed
	  if (typeof data === 'string') {
	    // Only binary strings can be decompressed on practice
	    strm.input = strings.binstring2buf(data);
	  } else if (toString$2.call(data) === '[object ArrayBuffer]') {
	    strm.input = new Uint8Array(data);
	  } else {
	    strm.input = data;
	  }

	  strm.next_in = 0;
	  strm.avail_in = strm.input.length;

	  do {
	    if (strm.avail_out === 0) {
	      strm.output = new utils$u.Buf8(chunkSize);
	      strm.next_out = 0;
	      strm.avail_out = chunkSize;
	    }

	    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */

	    if (status === c.Z_NEED_DICT && dictionary) {
	      status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);
	    }

	    if (status === c.Z_BUF_ERROR && allowBufError === true) {
	      status = c.Z_OK;
	      allowBufError = false;
	    }

	    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
	      this.onEnd(status);
	      this.ended = true;
	      return false;
	    }

	    if (strm.next_out) {
	      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {

	        if (this.options.to === 'string') {

	          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

	          tail = strm.next_out - next_out_utf8;
	          utf8str = strings.buf2string(strm.output, next_out_utf8);

	          // move tail
	          strm.next_out = tail;
	          strm.avail_out = chunkSize - tail;
	          if (tail) { utils$u.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }

	          this.onData(utf8str);

	        } else {
	          this.onData(utils$u.shrinkBuf(strm.output, strm.next_out));
	        }
	      }
	    }

	    // When no more input data, we should check that internal inflate buffers
	    // are flushed. The only way to do it when avail_out = 0 - run one more
	    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
	    // Here we set flag to process this error properly.
	    //
	    // NOTE. Deflate does not return error in this case and does not needs such
	    // logic.
	    if (strm.avail_in === 0 && strm.avail_out === 0) {
	      allowBufError = true;
	    }

	  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);

	  if (status === c.Z_STREAM_END) {
	    _mode = c.Z_FINISH;
	  }

	  // Finalize on the last chunk.
	  if (_mode === c.Z_FINISH) {
	    status = zlib_inflate.inflateEnd(this.strm);
	    this.onEnd(status);
	    this.ended = true;
	    return status === c.Z_OK;
	  }

	  // callback interim results if Z_SYNC_FLUSH.
	  if (_mode === c.Z_SYNC_FLUSH) {
	    this.onEnd(c.Z_OK);
	    strm.avail_out = 0;
	    return true;
	  }

	  return true;
	};


	/**
	 * Inflate#onData(chunk) -> Void
	 * - chunk (Uint8Array|Array|String): output data. Type of array depends
	 *   on js engine support. When string output requested, each chunk
	 *   will be string.
	 *
	 * By default, stores data blocks in `chunks[]` property and glue
	 * those in `onEnd`. Override this handler, if you need another behaviour.
	 **/
	Inflate.prototype.onData = function (chunk) {
	  this.chunks.push(chunk);
	};


	/**
	 * Inflate#onEnd(status) -> Void
	 * - status (Number): inflate status. 0 (Z_OK) on success,
	 *   other if not.
	 *
	 * Called either after you tell inflate that the input stream is
	 * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
	 * or if an error happened. By default - join collected chunks,
	 * free memory and fill `results` / `err` properties.
	 **/
	Inflate.prototype.onEnd = function (status) {
	  // On success - join
	  if (status === c.Z_OK) {
	    if (this.options.to === 'string') {
	      // Glue & convert here, until we teach pako to send
	      // utf8 aligned strings to onData
	      this.result = this.chunks.join('');
	    } else {
	      this.result = utils$u.flattenChunks(this.chunks);
	    }
	  }
	  this.chunks = [];
	  this.err = status;
	  this.msg = this.strm.msg;
	};


	/**
	 * inflate(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to decompress.
	 * - options (Object): zlib inflate options.
	 *
	 * Decompress `data` with inflate/ungzip and `options`. Autodetect
	 * format via wrapper header by default. That's why we don't provide
	 * separate `ungzip` method.
	 *
	 * Supported options are:
	 *
	 * - windowBits
	 *
	 * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
	 * for more information.
	 *
	 * Sugar (options):
	 *
	 * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
	 *   negative windowBits implicitly.
	 * - `to` (String) - if equal to 'string', then result will be converted
	 *   from utf8 to utf16 (javascript) string. When string output requested,
	 *   chunk length can differ from `chunkSize`, depending on content.
	 *
	 *
	 * ##### Example:
	 *
	 * ```javascript
	 * var pako = require('pako')
	 *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
	 *   , output;
	 *
	 * try {
	 *   output = pako.inflate(input);
	 * } catch (err)
	 *   console.log(err);
	 * }
	 * ```
	 **/
	function inflate$1(input, options) {
	  var inflator = new Inflate(options);

	  inflator.push(input, true);

	  // That will never happens, if you don't cheat with options :)
	  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }

	  return inflator.result;
	}


	/**
	 * inflateRaw(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to decompress.
	 * - options (Object): zlib inflate options.
	 *
	 * The same as [[inflate]], but creates raw data, without wrapper
	 * (header and adler32 crc).
	 **/
	function inflateRaw(input, options) {
	  options = options || {};
	  options.raw = true;
	  return inflate$1(input, options);
	}


	/**
	 * ungzip(data[, options]) -> Uint8Array|Array|String
	 * - data (Uint8Array|Array|String): input data to decompress.
	 * - options (Object): zlib inflate options.
	 *
	 * Just shortcut to [[inflate]], because it autodetects format
	 * by header.content. Done for convenience.
	 **/


	inflate$4.Inflate = Inflate;
	inflate$4.inflate = inflate$1;
	inflate$4.inflateRaw = inflateRaw;
	inflate$4.ungzip  = inflate$1;

	var assign$1    = common$5.assign;

	var deflate   = deflate$4;
	var inflate   = inflate$4;
	var constants$h = constants$i;

	var pako = {};

	assign$1(pako, deflate, inflate, constants$h);

	var pako_1 = pako;

	const { concat: uint8ArrayConcat$2 } = require$$9;

	/**
	 * Takes an (async) iterable that yields buffer-like-objects and concats them
	 * into one buffer
	 * @param {AsyncIterable<Uint8Array>|Iterable<Uint8Array>} stream
	 */
	async function toBuffer$2 (stream) {
	  let buffer = new Uint8Array(0);

	  for await (const buf of stream) {
	    buffer = uint8ArrayConcat$2([buffer, buf], buffer.length + buf.length);
	  }

	  return buffer
	}

	var itToBuffer = toBuffer$2;

	const DEFAULT_COMPRESSION_LEVEL = 6;
	function createGet$8({repo, preload}) {
	  async function* get(ipfsPath, options = {}) {
	    if (options.compressionLevel != null && (options.compressionLevel < -1 || options.compressionLevel > 9)) {
	      throw errCode$q(new Error('Compression level must be between -1 and 9'), 'ERR_INVALID_PARAMS');
	    }
	    if (options.preload !== false) {
	      let pathComponents;
	      try {
	        pathComponents = normalizeCidPath(ipfsPath).split('/');
	      } catch (err) {
	        throw errCode$q(err, 'ERR_INVALID_PATH');
	      }
	      preload(CID$6.parse(pathComponents[0]));
	    }
	    const ipfsPathOrCid = CID$6.asCID(ipfsPath) || ipfsPath;
	    const file = await exporter(ipfsPathOrCid, repo.blocks, options);
	    if (file.type === 'file' || file.type === 'raw') {
	      const args = [];
	      if (!options.compress || options.archive === true) {
	        args.push([{
	            header: {
	              name: file.path,
	              mode: file.type === 'file' && file.unixfs.mode,
	              mtime: file.type === 'file' && file.unixfs.mtime ? new Date(file.unixfs.mtime.secs * 1000) : undefined,
	              size: file.size,
	              type: 'file'
	            },
	            body: file.content()
	          }], pack(), source => itMap(source, buf => buf.slice()));
	      } else {
	        args.push(file.content);
	      }
	      if (options.compress) {
	        args.push(async function* (source) {
	          const buf = await itToBuffer(source);
	          yield pako_1.gzip(buf, { level: options.compressionLevel || DEFAULT_COMPRESSION_LEVEL });
	        });
	      }
	      yield* pipe_1(...args);
	      return;
	    }
	    if (file.type === 'directory') {
	      const args = [
	        recursive(ipfsPathOrCid, repo.blocks, options),
	        async function* (source) {
	          for await (const entry of source) {
	            const output = {
	              header: {
	                name: entry.path,
	                size: entry.size
	              }
	            };
	            if (entry.type === 'file') {
	              output.header.type = 'file';
	              output.header.mode = entry.unixfs.mode != null ? entry.unixfs.mode : undefined;
	              output.header.mtime = entry.unixfs.mtime ? new Date(entry.unixfs.mtime.secs * 1000) : undefined;
	              output.body = entry.content();
	            } else if (entry.type === 'raw') {
	              output.header.type = 'file';
	              output.body = entry.content();
	            } else if (entry.type === 'directory') {
	              output.header.type = 'directory';
	              output.header.mode = entry.unixfs.mode != null ? entry.unixfs.mode : undefined;
	              output.header.mtime = entry.unixfs.mtime ? new Date(entry.unixfs.mtime.secs * 1000) : undefined;
	            } else {
	              throw errCode$q(new Error('Not a UnixFS node'), 'ERR_NOT_UNIXFS');
	            }
	            yield output;
	          }
	        },
	        pack(),
	        source => itMap(source, buf => buf.slice())
	      ];
	      if (options.compress) {
	        if (!options.archive) {
	          throw errCode$q(new Error('file is not regular'), 'ERR_INVALID_PATH');
	        }
	        if (options.compress) {
	          args.push(async function* (source) {
	            const buf = await itToBuffer(source);
	            yield pako_1.gzip(buf, { level: options.compressionLevel || DEFAULT_COMPRESSION_LEVEL });
	          });
	        }
	      }
	      yield* pipe_1(...args);
	      return;
	    }
	    throw errCode$q(new Error('Not a UnixFS node'), 'ERR_NOT_UNIXFS');
	  }
	  return withTimeoutOption(get);
	}

	function createLs$8({repo, preload}) {
	  async function* ls(ipfsPath, options = {}) {
	    const legacyPath = normalizeCidPath(ipfsPath);
	    const pathComponents = legacyPath.split('/');
	    if (options.preload !== false) {
	      preload(CID$6.parse(pathComponents[0]));
	    }
	    const ipfsPathOrCid = CID$6.asCID(legacyPath) || legacyPath;
	    const file = await exporter(ipfsPathOrCid, repo.blocks, options);
	    if (file.type === 'file') {
	      yield mapFile(file);
	      return;
	    }
	    if (file.type === 'directory') {
	      for await (const child of file.content()) {
	        yield mapFile(child);
	      }
	      return;
	    }
	    throw errCode$q(new Error(`Unknown UnixFS type ${ file.type }`), 'ERR_UNKNOWN_UNIXFS_TYPE');
	  }
	  return withTimeoutOption(ls);
	}

	class RootAPI {
	  constructor({preload, repo, hashers, options}) {
	    const addAll = createAddAll$2({
	      preload,
	      repo,
	      options,
	      hashers
	    });
	    this.addAll = addAll;
	    this.add = createAdd$5({ addAll });
	    this.cat = createCat$1({
	      repo,
	      preload
	    });
	    this.get = createGet$8({
	      repo,
	      preload
	    });
	    this.ls = createLs$8({
	      repo,
	      preload
	    });
	  }
	}

	const ipfsCore = '0.14.1';
	const commit = '';
	const interfaceIpfsCore = '^0.154.1';

	function createVersion$3({repo}) {
	  async function version(_options = {}) {
	    const repoVersion = await repo.version.get();
	    return {
	      version: ipfsCore,
	      commit,
	      repo: `${ repoVersion }`,
	      'ipfs-core': ipfsCore,
	      'interface-ipfs-core': interfaceIpfsCore
	    };
	  }
	  return withTimeoutOption(version);
	}

	const log$1l = Object.assign(debug$S('ipfs:components:id'), { error: debug$S('ipfs:components:id:error') });
	function createId$1({peerId, network}) {
	  async function id(options = {}) {
	    const net = network.try();
	    if (!net) {
	      if (options.peerId) {
	        throw new NotStartedError();
	      }
	      const idStr = peerId.toB58String();
	      return {
	        id: idStr,
	        publicKey: toString$6(peerId.pubKey.bytes, 'base64pad'),
	        addresses: [],
	        agentVersion: `js-ipfs/${ ipfsCore }`,
	        protocolVersion: '9000',
	        protocols: []
	      };
	    }
	    const {libp2p} = net;
	    const peerIdToId = options.peerId ? PeerIdImport.parse(options.peerId) : peerId;
	    const peer = await findPeer(peerIdToId, libp2p, options);
	    const agentVersion = toString$6(peer.metadata.get('AgentVersion') || new Uint8Array());
	    const protocolVersion = toString$6(peer.metadata.get('ProtocolVersion') || new Uint8Array());
	    const idStr = peer.id.toB58String();
	    const publicKeyStr = peer.publicKey ? toString$6(peer.publicKey.bytes, 'base64pad') : '';
	    return {
	      id: idStr,
	      publicKey: publicKeyStr,
	      addresses: (peer.addresses || []).map(ma => {
	        const str = ma.toString();
	        if (str.endsWith(`/p2p/${ idStr }`)) {
	          return str;
	        }
	        return `${ str }/p2p/${ idStr }`;
	      }).sort().map(ma => new src$s.Multiaddr(ma)),
	      agentVersion,
	      protocolVersion,
	      protocols: (peer.protocols || []).sort()
	    };
	  }
	  return withTimeoutOption(id);
	}
	async function findPeer(peerId, libp2p, options) {
	  let peer = await libp2p.peerStore.get(peerId);
	  if (!peer) {
	    peer = await findPeerOnDht(peerId, libp2p, options);
	  }
	  let publicKey = peerId.pubKey ? peerId.pubKey : await libp2p.peerStore.keyBook.get(peerId);
	  if (!publicKey) {
	    try {
	      publicKey = await libp2p._dht.getPublicKey(peerId, options);
	    } catch (err) {
	      log$1l.error('Could not load public key for', peerId.toB58String(), err);
	    }
	  }
	  return {
	    ...peer,
	    publicKey,
	    metadata: peer.metadata || new Map(),
	    addresses: peer.addresses.map(addr => addr.multiaddr)
	  };
	}
	async function findPeerOnDht(peerId, libp2p, options) {
	  for await (const event of libp2p._dht.findPeer(peerId, options)) {
	    if (event.name === 'FINAL_PEER') {
	      break;
	    }
	  }
	  const peer = await libp2p.peerStore.get(peerId);
	  if (!peer) {
	    throw errCode$q(new Error('Could not find peer'), 'ERR_NOT_FOUND');
	  }
	  return peer;
	}

	var justSafeSet = set;

	/*
	  var obj1 = {};
	  set(obj1, 'a.aa.aaa', 4); // true
	  obj1; // {a: {aa: {aaa: 4}}}

	  var obj2 = {};
	  set(obj2, ['a', 'aa', 'aaa'], 4); // true
	  obj2; // {a: {aa: {aaa: 4}}}

	  var obj3 = {a: {aa: {aaa: 2}}};
	  set(obj3, 'a.aa.aaa', 3); // true
	  obj3; // {a: {aa: {aaa: 3}}}

	  // don't clobber existing
	  var obj4 = {a: {aa: {aaa: 2}}};
	  set(obj4, 'a.aa', {bbb: 7}); // false

	  const obj5 = {a: {}};
	  const sym = Symbol();
	  set(obj5.a, sym, 7); // true
	  obj5; // {a: {Symbol(): 7}}
	*/

	function set(obj, propsArg, value) {
	  var props, lastProp;
	  if (Array.isArray(propsArg)) {
	    props = propsArg.slice(0);
	  }
	  if (typeof propsArg == 'string') {
	    props = propsArg.split('.');
	  }
	  if (typeof propsArg == 'symbol') {
	    props = [propsArg];
	  }
	  if (!Array.isArray(props)) {
	    throw new Error('props arg must be an array, a string or a symbol');
	  }
	  lastProp = props.pop();
	  if (!lastProp) {
	    return false;
	  }
	  prototypeCheck(lastProp);
	  var thisProp;
	  while ((thisProp = props.shift())) {
	    prototypeCheck(thisProp);
	    if (typeof obj[thisProp] == 'undefined') {
	      obj[thisProp] = {};
	    }
	    obj = obj[thisProp];
	    if (!obj || typeof obj != 'object') {
	      return false;
	    }
	  }
	  obj[lastProp] = value;
	  return true;
	}

	function prototypeCheck(prop) {
	  if (prop === '__proto__' || prop === 'constructor' || prop === 'prototype') {
	    throw new Error('setting of prototype values not supported');
	  }
	}

	const profiles = {
	  server: {
	    description: 'Recommended for nodes with public IPv4 address (servers, VPSes, etc.), disables host and content discovery and UPnP in local networks.',
	    transform: config => {
	      justSafeSet(config, 'Discovery.MDNS.Enabled', false);
	      justSafeSet(config, 'Discovery.webRTCStar.Enabled', false);
	      config.Swarm = {
	        ...config.Swarm || {},
	        DisableNatPortMap: true
	      };
	      return config;
	    }
	  },
	  'local-discovery': {
	    description: 'Sets default values to fields affected by `server` profile, enables discovery and UPnP in local networks.',
	    transform: config => {
	      justSafeSet(config, 'Discovery.MDNS.Enabled', true);
	      justSafeSet(config, 'Discovery.webRTCStar.Enabled', true);
	      justSafeSet(config, 'Swarm', {
	        ...config.Swarm || {},
	        DisableNatPortMap: false
	      });
	      return config;
	    }
	  },
	  test: {
	    description: 'Reduces external interference, useful for running ipfs in test environments. Note that with these settings node won\'t be able to talk to the rest of the network without manual bootstrap.',
	    transform: config => {
	      const defaultConfig = getDefaultConfig();
	      justSafeSet(config, 'Addresses.API', defaultConfig.Addresses.API ? '/ip4/127.0.0.1/tcp/0' : '');
	      justSafeSet(config, 'Addresses.Gateway', defaultConfig.Addresses.Gateway ? '/ip4/127.0.0.1/tcp/0' : '');
	      justSafeSet(config, 'Addresses.Swarm', defaultConfig.Addresses.Swarm.length ? ['/ip4/127.0.0.1/tcp/0'] : []);
	      justSafeSet(config, 'Addresses.Delegates', []);
	      justSafeSet(config, 'Bootstrap', []);
	      justSafeSet(config, 'Discovery.MDNS.Enabled', false);
	      justSafeSet(config, 'Discovery.webRTCStar.Enabled', false);
	      justSafeSet(config, 'Swarm', {
	        ...config.Swarm || {},
	        DisableNatPortMap: true
	      });
	      return config;
	    }
	  },
	  'default-networking': {
	    description: 'Restores default network settings. Inverse profile of the `test` profile.',
	    transform: config => {
	      const defaultConfig = getDefaultConfig();
	      justSafeSet(config, 'Addresses.API', defaultConfig.Addresses.API);
	      justSafeSet(config, 'Addresses.Gateway', defaultConfig.Addresses.Gateway);
	      justSafeSet(config, 'Addresses.Swarm', defaultConfig.Addresses.Swarm);
	      justSafeSet(config, 'Addresses.Delegates', defaultConfig.Addresses.Delegates);
	      justSafeSet(config, 'Bootstrap', defaultConfig.Bootstrap);
	      justSafeSet(config, 'Discovery.MDNS.Enabled', defaultConfig.Discovery.MDNS.Enabled);
	      justSafeSet(config, 'Discovery.webRTCStar.Enabled', defaultConfig.Discovery.webRTCStar.Enabled);
	      justSafeSet(config, 'Swarm', {
	        ...config.Swarm || {},
	        DisableNatPortMap: false
	      });
	      return config;
	    }
	  },
	  lowpower: {
	    description: 'Reduces daemon overhead on the system. May affect node functionality,performance of content discovery and data fetching may be degraded. Recommended for low power systems.',
	    transform: config => {
	      const Swarm = config.Swarm || {};
	      const ConnMgr = Swarm.ConnMgr || {};
	      ConnMgr.LowWater = 20;
	      ConnMgr.HighWater = 40;
	      Swarm.ConnMgr = ConnMgr;
	      config.Swarm = Swarm;
	      return config;
	    }
	  },
	  'default-power': {
	    description: 'Inverse of "lowpower" profile.',
	    transform: config => {
	      const defaultConfig = getDefaultConfig();
	      config.Swarm = defaultConfig.Swarm;
	      return config;
	    }
	  }
	};

	const log$1k = debug$S('ipfs:core:config');
	function createConfig$1({repo}) {
	  return {
	    getAll: withTimeoutOption(getAll),
	    get: withTimeoutOption(get),
	    set: withTimeoutOption(set),
	    replace: withTimeoutOption(replace),
	    profiles: {
	      apply: withTimeoutOption(applyProfile),
	      list: withTimeoutOption(listProfiles)
	    }
	  };
	  async function getAll(options = {}) {
	    return repo.config.getAll(options);
	  }
	  async function get(key, options) {
	    if (!key) {
	      return Promise.reject(new Error('key argument is required'));
	    }
	    return repo.config.get(key, options);
	  }
	  async function set(key, value, options) {
	    return repo.config.set(key, value, options);
	  }
	  async function replace(value, options) {
	    return repo.config.replace(value, options);
	  }
	  async function applyProfile(profileName, options = { dryRun: false }) {
	    const {dryRun} = options;
	    const profile = profiles[profileName];
	    if (!profile) {
	      throw new Error(`No profile with name '${ profileName }' exists`);
	    }
	    try {
	      const oldCfg = await repo.config.getAll(options);
	      let newCfg = JSON.parse(JSON.stringify(oldCfg));
	      newCfg = profile.transform(newCfg);
	      if (!dryRun) {
	        await repo.config.replace(newCfg, options);
	      }
	      delete oldCfg.Identity.PrivKey;
	      delete newCfg.Identity.PrivKey;
	      return {
	        original: oldCfg,
	        updated: newCfg
	      };
	    } catch (err) {
	      log$1k(err);
	      throw new Error(`Could not apply profile '${ profileName }' to config: ${ err.message }`);
	    }
	  }
	}
	async function listProfiles(_options) {
	  return Object.keys(profiles).map(name => ({
	    name,
	    description: profiles[name].description
	  }));
	}

	const readonly = ({enumerable = true, configurable = false} = {}) => ({
	  enumerable,
	  configurable,
	  writable: false
	});
	const links = function* (source, base) {
	  if (source == null)
	    return;
	  if (source instanceof Uint8Array)
	    return;
	  for (const [key, value] of Object.entries(source)) {
	    const path = [
	      ...base,
	      key
	    ];
	    if (value != null && typeof value === 'object') {
	      if (Array.isArray(value)) {
	        for (const [index, element] of value.entries()) {
	          const elementPath = [
	            ...path,
	            index
	          ];
	          const cid = CID$6.asCID(element);
	          if (cid) {
	            yield [
	              elementPath.join('/'),
	              cid
	            ];
	          } else if (typeof element === 'object') {
	            yield* links(element, elementPath);
	          }
	        }
	      } else {
	        const cid = CID$6.asCID(value);
	        if (cid) {
	          yield [
	            path.join('/'),
	            cid
	          ];
	        } else {
	          yield* links(value, path);
	        }
	      }
	    }
	  }
	};
	const tree = function* (source, base) {
	  if (source == null)
	    return;
	  for (const [key, value] of Object.entries(source)) {
	    const path = [
	      ...base,
	      key
	    ];
	    yield path.join('/');
	    if (value != null && !(value instanceof Uint8Array) && typeof value === 'object' && !CID$6.asCID(value)) {
	      if (Array.isArray(value)) {
	        for (const [index, element] of value.entries()) {
	          const elementPath = [
	            ...path,
	            index
	          ];
	          yield elementPath.join('/');
	          if (typeof element === 'object' && !CID$6.asCID(element)) {
	            yield* tree(element, elementPath);
	          }
	        }
	      } else {
	        yield* tree(value, path);
	      }
	    }
	  }
	};
	const get$1 = (source, path) => {
	  let node = source;
	  for (const [index, key] of path.entries()) {
	    node = node[key];
	    if (node == null) {
	      throw new Error(`Object has no property at ${ path.slice(0, index + 1).map(part => `[${ JSON.stringify(part) }]`).join('') }`);
	    }
	    const cid = CID$6.asCID(node);
	    if (cid) {
	      return {
	        value: cid,
	        remaining: path.slice(index + 1).join('/')
	      };
	    }
	  }
	  return { value: node };
	};
	class Block {
	  constructor({cid, bytes, value}) {
	    if (!cid || !bytes || typeof value === 'undefined')
	      throw new Error('Missing required argument');
	    this.cid = cid;
	    this.bytes = bytes;
	    this.value = value;
	    this.asBlock = this;
	    Object.defineProperties(this, {
	      cid: readonly(),
	      bytes: readonly(),
	      value: readonly(),
	      asBlock: readonly()
	    });
	  }
	  links() {
	    return links(this.value, []);
	  }
	  tree() {
	    return tree(this.value, []);
	  }
	  get(path = '/') {
	    return get$1(this.value, path.split('/').filter(Boolean));
	  }
	}
	const createUnsafe = ({
	  bytes,
	  cid,
	  value: maybeValue,
	  codec
	}) => {
	  const value = maybeValue !== undefined ? maybeValue : codec && codec.decode(bytes);
	  if (value === undefined)
	    throw new Error('Missing required argument, must either provide "value" or "codec"');
	  return new Block({
	    cid,
	    bytes,
	    value
	  });
	};

	function createHeader(roots) {
	  const headerBytes = encode$i({
	    version: 1,
	    roots
	  });
	  const varintBytes = varint$9.encode(headerBytes.length);
	  const header = new Uint8Array(varintBytes.length + headerBytes.length);
	  header.set(varintBytes, 0);
	  header.set(headerBytes, varintBytes.length);
	  return header;
	}
	function createEncoder(writer) {
	  return {
	    async setRoots(roots) {
	      const bytes = createHeader(roots);
	      await writer.write(bytes);
	    },
	    async writeBlock(block) {
	      const {cid, bytes} = block;
	      await writer.write(new Uint8Array(varint$9.encode(cid.bytes.length + bytes.length)));
	      await writer.write(cid.bytes);
	      if (bytes.length) {
	        await writer.write(bytes);
	      }
	    },
	    async close() {
	      return writer.end();
	    }
	  };
	}

	function noop$5() {
	}
	function create$3() {
	  const chunkQueue = [];
	  let drainer = null;
	  let drainerResolver = noop$5;
	  let ended = false;
	  let outWait = null;
	  let outWaitResolver = noop$5;
	  const makeDrainer = () => {
	    if (!drainer) {
	      drainer = new Promise(resolve => {
	        drainerResolver = () => {
	          drainer = null;
	          drainerResolver = noop$5;
	          resolve();
	        };
	      });
	    }
	    return drainer;
	  };
	  const writer = {
	    write(chunk) {
	      chunkQueue.push(chunk);
	      const drainer = makeDrainer();
	      outWaitResolver();
	      return drainer;
	    },
	    async end() {
	      ended = true;
	      const drainer = makeDrainer();
	      outWaitResolver();
	      return drainer;
	    }
	  };
	  const iterator = {
	    async next() {
	      const chunk = chunkQueue.shift();
	      if (chunk) {
	        if (chunkQueue.length === 0) {
	          drainerResolver();
	        }
	        return {
	          done: false,
	          value: chunk
	        };
	      }
	      if (ended) {
	        drainerResolver();
	        return {
	          done: true,
	          value: undefined
	        };
	      }
	      if (!outWait) {
	        outWait = new Promise(resolve => {
	          outWaitResolver = () => {
	            outWait = null;
	            outWaitResolver = noop$5;
	            return resolve(iterator.next());
	          };
	        });
	      }
	      return outWait;
	    }
	  };
	  return {
	    writer,
	    iterator
	  };
	}

	const CIDV0_BYTES = {
	  SHA2_256: 18,
	  LENGTH: 32,
	  DAG_PB: 112
	};
	async function readVarint(reader) {
	  const bytes = await reader.upTo(8);
	  const i = varint$9.decode(bytes);
	  reader.seek(varint$9.decode.bytes);
	  return i;
	}
	async function readHeader$1(reader) {
	  const length = await readVarint(reader);
	  if (length === 0) {
	    throw new Error('Invalid CAR header (zero length)');
	  }
	  const header = await reader.exactly(length);
	  reader.seek(length);
	  const block = decode$g(header);
	  if (block == null || Array.isArray(block) || typeof block !== 'object') {
	    throw new Error('Invalid CAR header format');
	  }
	  if (block.version !== 1) {
	    if (typeof block.version === 'string') {
	      throw new Error(`Invalid CAR version: "${ block.version }"`);
	    }
	    throw new Error(`Invalid CAR version: ${ block.version }`);
	  }
	  if (!Array.isArray(block.roots)) {
	    throw new Error('Invalid CAR header format');
	  }
	  if (Object.keys(block).filter(p => p !== 'roots' && p !== 'version').length) {
	    throw new Error('Invalid CAR header format');
	  }
	  return block;
	}
	async function readMultihash(reader) {
	  const bytes = await reader.upTo(8);
	  varint$9.decode(bytes);
	  const codeLength = varint$9.decode.bytes;
	  const length = varint$9.decode(bytes.subarray(varint$9.decode.bytes));
	  const lengthLength = varint$9.decode.bytes;
	  const mhLength = codeLength + lengthLength + length;
	  const multihash = await reader.exactly(mhLength);
	  reader.seek(mhLength);
	  return multihash;
	}
	async function readCid(reader) {
	  const first = await reader.exactly(2);
	  if (first[0] === CIDV0_BYTES.SHA2_256 && first[1] === CIDV0_BYTES.LENGTH) {
	    const bytes = await reader.exactly(34);
	    reader.seek(34);
	    const multihash = decode$k(bytes);
	    return CID$6.create(0, CIDV0_BYTES.DAG_PB, multihash);
	  }
	  const version = await readVarint(reader);
	  if (version !== 1) {
	    throw new Error(`Unexpected CID version (${ version })`);
	  }
	  const codec = await readVarint(reader);
	  const bytes = await readMultihash(reader);
	  const multihash = decode$k(bytes);
	  return CID$6.create(version, codec, multihash);
	}
	async function readBlockHead(reader) {
	  const start = reader.pos;
	  let length = await readVarint(reader);
	  if (length === 0) {
	    throw new Error('Invalid CAR section (zero length)');
	  }
	  length += reader.pos - start;
	  const cid = await readCid(reader);
	  const blockLength = length - (reader.pos - start);
	  return {
	    cid,
	    length,
	    blockLength
	  };
	}
	async function readBlock(reader) {
	  const {cid, blockLength} = await readBlockHead(reader);
	  const bytes = await reader.exactly(blockLength);
	  reader.seek(blockLength);
	  return {
	    bytes,
	    cid
	  };
	}
	async function readBlockIndex(reader) {
	  const offset = reader.pos;
	  const {cid, length, blockLength} = await readBlockHead(reader);
	  const index = {
	    cid,
	    length,
	    blockLength,
	    offset,
	    blockOffset: reader.pos
	  };
	  reader.seek(index.blockLength);
	  return index;
	}
	function createDecoder(reader) {
	  const headerPromise = readHeader$1(reader);
	  return {
	    header: () => headerPromise,
	    async *blocks() {
	      await headerPromise;
	      while ((await reader.upTo(8)).length > 0) {
	        yield await readBlock(reader);
	      }
	    },
	    async *blocksIndex() {
	      await headerPromise;
	      while ((await reader.upTo(8)).length > 0) {
	        yield await readBlockIndex(reader);
	      }
	    }
	  };
	}
	function bytesReader(bytes) {
	  let pos = 0;
	  return {
	    async upTo(length) {
	      return bytes.subarray(pos, pos + Math.min(length, bytes.length - pos));
	    },
	    async exactly(length) {
	      if (length > bytes.length - pos) {
	        throw new Error('Unexpected end of data');
	      }
	      return bytes.subarray(pos, pos + length);
	    },
	    seek(length) {
	      pos += length;
	    },
	    get pos() {
	      return pos;
	    }
	  };
	}
	function chunkReader(readChunk) {
	  let pos = 0;
	  let have = 0;
	  let offset = 0;
	  let currentChunk = new Uint8Array(0);
	  const read = async length => {
	    have = currentChunk.length - offset;
	    const bufa = [currentChunk.subarray(offset)];
	    while (have < length) {
	      const chunk = await readChunk();
	      if (chunk == null) {
	        break;
	      }
	      if (have < 0) {
	        if (chunk.length > have) {
	          bufa.push(chunk.subarray(-have));
	        }
	      } else {
	        bufa.push(chunk);
	      }
	      have += chunk.length;
	    }
	    currentChunk = new Uint8Array(bufa.reduce((p, c) => p + c.length, 0));
	    let off = 0;
	    for (const b of bufa) {
	      currentChunk.set(b, off);
	      off += b.length;
	    }
	    offset = 0;
	  };
	  return {
	    async upTo(length) {
	      if (currentChunk.length - offset < length) {
	        await read(length);
	      }
	      return currentChunk.subarray(offset, offset + Math.min(currentChunk.length - offset, length));
	    },
	    async exactly(length) {
	      if (currentChunk.length - offset < length) {
	        await read(length);
	      }
	      if (currentChunk.length - offset < length) {
	        throw new Error('Unexpected end of data');
	      }
	      return currentChunk.subarray(offset, offset + length);
	    },
	    seek(length) {
	      pos += length;
	      offset += length;
	    },
	    get pos() {
	      return pos;
	    }
	  };
	}
	function asyncIterableReader(asyncIterable) {
	  const iterator = asyncIterable[Symbol.asyncIterator]();
	  async function readChunk() {
	    const next = await iterator.next();
	    if (next.done) {
	      return null;
	    }
	    return next.value;
	  }
	  return chunkReader(readChunk);
	}

	class CarWriter {
	  constructor(roots, encoder) {
	    this._encoder = encoder;
	    this._mutex = encoder.setRoots(roots);
	    this._ended = false;
	  }
	  async put(block) {
	    if (!(block.bytes instanceof Uint8Array) || !block.cid) {
	      throw new TypeError('Can only write {cid, bytes} objects');
	    }
	    if (this._ended) {
	      throw new Error('Already closed');
	    }
	    const cid = CID$6.asCID(block.cid);
	    if (!cid) {
	      throw new TypeError('Can only write {cid, bytes} objects');
	    }
	    this._mutex = this._mutex.then(() => this._encoder.writeBlock({
	      cid,
	      bytes: block.bytes
	    }));
	    return this._mutex;
	  }
	  async close() {
	    if (this._ended) {
	      throw new Error('Already closed');
	    }
	    await this._mutex;
	    this._ended = true;
	    return this._encoder.close();
	  }
	  static create(roots) {
	    roots = toRoots(roots);
	    const {encoder, iterator} = encodeWriter();
	    const writer = new CarWriter(roots, encoder);
	    const out = new CarWriterOut(iterator);
	    return {
	      writer,
	      out
	    };
	  }
	  static createAppender() {
	    const {encoder, iterator} = encodeWriter();
	    encoder.setRoots = () => Promise.resolve();
	    const writer = new CarWriter([], encoder);
	    const out = new CarWriterOut(iterator);
	    return {
	      writer,
	      out
	    };
	  }
	  static async updateRootsInBytes(bytes, roots) {
	    const reader = bytesReader(bytes);
	    await readHeader$1(reader);
	    const newHeader = createHeader(roots);
	    if (reader.pos !== newHeader.length) {
	      throw new Error(`updateRoots() can only overwrite a header of the same length (old header is ${ reader.pos } bytes, new header is ${ newHeader.length } bytes)`);
	    }
	    bytes.set(newHeader, 0);
	    return bytes;
	  }
	}
	class CarWriterOut {
	  constructor(iterator) {
	    this._iterator = iterator;
	  }
	  [Symbol.asyncIterator]() {
	    if (this._iterating) {
	      throw new Error('Multiple iterator not supported');
	    }
	    this._iterating = true;
	    return this._iterator;
	  }
	}
	function encodeWriter() {
	  const iw = create$3();
	  const {writer, iterator} = iw;
	  const encoder = createEncoder(writer);
	  return {
	    encoder,
	    iterator
	  };
	}
	function toRoots(roots) {
	  if (roots === undefined) {
	    return [];
	  }
	  if (!Array.isArray(roots)) {
	    const cid = CID$6.asCID(roots);
	    if (!cid) {
	      throw new TypeError('roots must be a single CID or an array of CIDs');
	    }
	    return [cid];
	  }
	  const _roots = [];
	  for (const root of roots) {
	    const _root = CID$6.asCID(root);
	    if (!_root) {
	      throw new TypeError('roots must be a single CID or an array of CIDs');
	    }
	    _roots.push(_root);
	  }
	  return _roots;
	}

	const walk = async ({cid, load, seen}) => {
	  seen = seen || new Set();
	  const b58Cid = cid.toString(base58btc$6);
	  if (seen.has(b58Cid)) {
	    return;
	  }
	  const block = await load(cid);
	  seen.add(b58Cid);
	  if (block === null) {
	    return;
	  }
	  for (const [, cid] of block.links()) {
	    await walk({
	      cid,
	      load,
	      seen
	    });
	  }
	};

	const log$1j = debug$S('ipfs:components:dag:import');
	const NO_LINKS_CODECS = [
	  code$2,
	  code$1
	];
	function createExport$3({repo, preload, codecs}) {
	  async function* dagExport(root, options = {}) {
	    if (options.preload !== false) {
	      preload(root);
	    }
	    const cid = CID$6.asCID(root);
	    if (!cid) {
	      throw new Error(`Unexpected error converting CID type: ${ root }`);
	    }
	    log$1j(`Exporting ${ cid } as car`);
	    const {writer, out} = await CarWriter.create([cid]);
	    let err = null;
	    (async () => {
	      try {
	        const load = makeLoader(repo, writer, {
	          signal: options.signal,
	          timeout: options.timeout
	        }, codecs);
	        await walk({
	          cid,
	          load
	        });
	      } catch (e) {
	        err = e;
	      } finally {
	        writer.close();
	      }
	    })();
	    for await (const chunk of out) {
	      if (err) {
	        break;
	      }
	      yield chunk;
	    }
	    if (err) {
	      throw err;
	    }
	  }
	  return withTimeoutOption(dagExport);
	}
	function makeLoader(repo, writer, options, codecs) {
	  return async cid => {
	    const codec = await codecs.getCodec(cid.code);
	    if (!codec) {
	      throw new Error(`Can't decode links in block with codec 0x${ cid.code.toString(16) } to form complete DAG`);
	    }
	    const bytes = await repo.blocks.get(cid, options);
	    log$1j(`Adding block ${ cid } to car`);
	    await writer.put({
	      cid,
	      bytes
	    });
	    if (NO_LINKS_CODECS.includes(cid.code)) {
	      return null;
	    }
	    return createUnsafe({
	      bytes,
	      cid,
	      codec
	    });
	  };
	}

	/**
	 * Returns the first result from an (async) iterable, unless empty, in which
	 * case returns `undefined`.
	 *
	 * @template T
	 * @param {AsyncIterable<T>|Iterable<T>} source
	 */
	const first$3 = async (source) => {
	  for await (const entry of source) { // eslint-disable-line no-unreachable-loop
	    return entry
	  }

	  return undefined
	};

	var itFirst = first$3;

	function createGet$7({codecs, repo, preload}) {
	  const get = async function get(cid, options = {}) {
	    if (options.preload !== false) {
	      preload(cid);
	    }
	    if (options.path) {
	      const entry = options.localResolve ? await itFirst(resolve$5(cid, options.path, codecs, repo, options)) : await itLast(resolve$5(cid, options.path, codecs, repo, options));
	      const result = entry;
	      if (!result) {
	        throw errCode$q(new Error('Not found'), 'ERR_NOT_FOUND');
	      }
	      return result;
	    }
	    const codec = await codecs.getCodec(cid.code);
	    const block = await repo.blocks.get(cid, options);
	    const node = codec.decode(block);
	    return {
	      value: node,
	      remainderPath: ''
	    };
	  };
	  return withTimeoutOption(get);
	}

	class CarIteratorBase {
	  constructor(version, roots, iterable) {
	    this._version = version;
	    this._roots = roots;
	    this._iterable = iterable;
	    this._decoded = false;
	  }
	  get version() {
	    return this._version;
	  }
	  async getRoots() {
	    return this._roots;
	  }
	}
	class CarBlockIterator extends CarIteratorBase {
	  [Symbol.asyncIterator]() {
	    if (this._decoded) {
	      throw new Error('Cannot decode more than once');
	    }
	    if (!this._iterable) {
	      throw new Error('Block iterable not found');
	    }
	    this._decoded = true;
	    return this._iterable[Symbol.asyncIterator]();
	  }
	  static async fromBytes(bytes) {
	    const {version, roots, iterator} = await fromBytes(bytes);
	    return new CarBlockIterator(version, roots, iterator);
	  }
	  static async fromIterable(asyncIterable) {
	    const {version, roots, iterator} = await fromIterable(asyncIterable);
	    return new CarBlockIterator(version, roots, iterator);
	  }
	}
	async function fromBytes(bytes) {
	  if (!(bytes instanceof Uint8Array)) {
	    throw new TypeError('fromBytes() requires a Uint8Array');
	  }
	  return decodeIterator(bytesReader(bytes));
	}
	async function fromIterable(asyncIterable) {
	  if (!asyncIterable || !(typeof asyncIterable[Symbol.asyncIterator] === 'function')) {
	    throw new TypeError('fromIterable() requires an async iterable');
	  }
	  return decodeIterator(asyncIterableReader(asyncIterable));
	}
	async function decodeIterator(reader) {
	  const decoder = createDecoder(reader);
	  const {version, roots} = await decoder.header();
	  return {
	    version,
	    roots,
	    iterator: decoder.blocks()
	  };
	}

	const log$1i = debug$S('ipfs:components:dag:import');
	function createImport$3({repo}) {
	  async function* dagImport(sources, options = {}) {
	    const release = await repo.gcLock.readLock();
	    try {
	      const abortOptions = {
	        signal: options.signal,
	        timeout: options.timeout
	      };
	      const peekable = itPeekable(sources);
	      const {value, done} = await peekable.peek();
	      if (done) {
	        return;
	      }
	      if (value) {
	        peekable.push(value);
	      }
	      let cars;
	      if (value instanceof Uint8Array) {
	        cars = [peekable];
	      } else {
	        cars = peekable;
	      }
	      for await (const car of cars) {
	        const roots = await importCar(repo, abortOptions, car);
	        if (options.pinRoots !== false) {
	          for (const cid of roots) {
	            let pinErrorMsg = '';
	            try {
	              if (await repo.blocks.has(cid)) {
	                log$1i(`Pinning root ${ cid }`);
	                await repo.pins.pinRecursively(cid);
	              } else {
	                pinErrorMsg = 'blockstore: block not found';
	              }
	            } catch (err) {
	              pinErrorMsg = err.message;
	            }
	            yield {
	              root: {
	                cid,
	                pinErrorMsg
	              }
	            };
	          }
	        }
	      }
	    } finally {
	      release();
	    }
	  }
	  return withTimeoutOption(dagImport);
	}
	async function importCar(repo, options, source) {
	  const reader = await CarBlockIterator.fromIterable(source);
	  const roots = await reader.getRoots();
	  await itDrain(repo.blocks.putMany(itMap(reader, ({
	    cid: key,
	    bytes: value
	  }) => {
	    log$1i(`Import block ${ key }`);
	    return {
	      key,
	      value
	    };
	  }), { signal: options.signal }));
	  return roots;
	}

	function createPut$5({repo, codecs, hashers, preload}) {
	  async function put(dagNode, options = {}) {
	    const release = options.pin ? await repo.gcLock.readLock() : null;
	    try {
	      const storeCodec = await codecs.getCodec(options.storeCodec || 'dag-cbor');
	      if (!storeCodec) {
	        throw new Error(`Unknown storeCodec ${ options.storeCodec }, please configure additional BlockCodecs for this IPFS instance`);
	      }
	      if (options.inputCodec) {
	        if (!(dagNode instanceof Uint8Array)) {
	          throw new Error('Can only inputCodec on raw bytes that can be decoded');
	        }
	        const inputCodec = await codecs.getCodec(options.inputCodec);
	        if (!inputCodec) {
	          throw new Error(`Unknown inputCodec ${ options.inputCodec }, please configure additional BlockCodecs for this IPFS instance`);
	        }
	        dagNode = inputCodec.decode(dagNode);
	      }
	      const cidVersion = options.version != null ? options.version : 1;
	      const hasher = await hashers.getHasher(options.hashAlg || 'sha2-256');
	      if (!hasher) {
	        throw new Error(`Unknown hash algorithm ${ options.hashAlg }, please configure additional MultihashHashers for this IPFS instance`);
	      }
	      const buf = storeCodec.encode(dagNode);
	      const hash = await hasher.digest(buf);
	      const cid = CID$6.create(cidVersion, storeCodec.code, hash);
	      await repo.blocks.put(cid, buf, { signal: options.signal });
	      if (options.pin) {
	        await repo.pins.pinRecursively(cid);
	      }
	      if (options.preload !== false) {
	        preload(cid);
	      }
	      return cid;
	    } finally {
	      if (release) {
	        release();
	      }
	    }
	  }
	  return withTimeoutOption(put);
	}

	function createResolve$3({repo, codecs, preload}) {
	  async function dagResolve(ipfsPath, options = {}) {
	    const {cid} = toCidAndPath(ipfsPath);
	    if (options.preload !== false) {
	      preload(cid);
	    }
	    return resolvePath$1(repo, codecs, ipfsPath, options);
	  }
	  return withTimeoutOption(dagResolve);
	}

	class DagAPI {
	  constructor({repo, codecs, hashers, preload}) {
	    this.export = createExport$3({
	      repo,
	      preload,
	      codecs
	    });
	    this.get = createGet$7({
	      codecs,
	      repo,
	      preload
	    });
	    this.import = createImport$3({ repo });
	    this.resolve = createResolve$3({
	      repo,
	      codecs,
	      preload
	    });
	    this.put = createPut$5({
	      repo,
	      codecs,
	      hashers,
	      preload
	    });
	  }
	}

	const { Multiaddr: Multiaddr$i } = src$s;

	const reduceValue = (_, v) => v;
	const tcpUri = (str, port, parts, opts) => {
	  // return tcp when explicitly requested
	  if (opts && opts.assumeHttp === false) return `tcp://${str}:${port}`
	  // check if tcp is the last protocol in multiaddr
	  let protocol = 'tcp';
	  let explicitPort = `:${port}`;
	  const last = parts[parts.length - 1];
	  if (last.protocol === 'tcp') {
	    // assume http and produce clean urls
	    protocol = port === '443' ? 'https' : 'http';
	    explicitPort = port === '443' || port === '80' ? '' : explicitPort;
	  }
	  return `${protocol}://${str}${explicitPort}`
	};

	const Reducers = {
	  ip4: reduceValue,
	  ip6: (str, content, i, parts) => (
	    parts.length === 1 && parts[0].protocol === 'ip6'
	      ? content
	      : `[${content}]`
	  ),
	  tcp: (str, content, i, parts, opts) => (
	    parts.some(p => ['http', 'https', 'ws', 'wss'].includes(p.protocol))
	      ? `${str}:${content}`
	      : tcpUri(str, content, parts, opts)
	  ),
	  udp: (str, content) => `udp://${str}:${content}`,
	  dnsaddr: reduceValue,
	  dns4: reduceValue,
	  dns6: reduceValue,
	  ipfs: (str, content) => `${str}/ipfs/${content}`,
	  p2p: (str, content) => `${str}/p2p/${content}`,
	  http: str => `http://${str}`,
	  https: str => `https://${str}`,
	  ws: str => `ws://${str}`,
	  wss: str => `wss://${str}`,
	  'p2p-websocket-star': str => `${str}/p2p-websocket-star`,
	  'p2p-webrtc-star': str => `${str}/p2p-webrtc-star`,
	  'p2p-webrtc-direct': str => `${str}/p2p-webrtc-direct`
	};

	var multiaddrToUri = (multiaddr, opts) => {
	  const ma = new Multiaddr$i(multiaddr);
	  const parts = multiaddr.toString().split('/').slice(1);
	  return ma
	    .tuples()
	    .map(tuple => ({
	      protocol: parts.shift(),
	      content: tuple[1] ? parts.shift() : null
	    }))
	    .reduce((str, part, i, parts) => {
	      const reduce = Reducers[part.protocol];
	      if (!reduce) throw new Error(`Unsupported protocol ${part.protocol}`)
	      return reduce(str, part.content, i, parts, opts)
	    }, '')
	};

	var arrayShuffle = array => {
		if (!Array.isArray(array)) {
			throw new TypeError(`Expected an array, got ${typeof array}`);
		}

		array = [...array];

		for (let index = array.length - 1; index > 0; index--) {
			const newIndex = Math.floor(Math.random() * (index + 1));
			[array[index], array[newIndex]] = [array[newIndex], array[index]];
		}

		return array;
	};

	const log$1h = Object.assign(debug$S('ipfs:preload'), { error: debug$S('ipfs:preload:error') });
	const Queue$6 = _default.default ? _default.default : _default;
	const httpQueue = new Queue$6({ concurrency: 4 });
	function preload(url, options = {}) {
	  log$1h(url);
	  return httpQueue.add(async () => {
	    const res = await http.post(url, { signal: options.signal });
	    const reader = res.body.getReader();
	    try {
	      while (true) {
	        const {done} = await reader.read();
	        if (done)
	          return;
	      }
	    } finally {
	      reader.releaseLock();
	    }
	  });
	}

	const log$1g = Object.assign(debug$S('ipfs:preload'), { error: debug$S('ipfs:preload:error') });
	function createPreloader(options = {}) {
	  options.enabled = Boolean(options.enabled);
	  options.addresses = options.addresses || [];
	  options.cache = options.cache || 1000;
	  if (!options.enabled || !options.addresses.length) {
	    log$1g('preload disabled');
	    const api = () => {
	    };
	    return Object.assign(api, {
	      start: () => {
	      },
	      stop: () => {
	      }
	    });
	  }
	  let stopped = true;
	  let requests = [];
	  const apiUris = options.addresses.map(multiaddrToUri);
	  const cache = hashlru(options.cache);
	  const api = async cid => {
	    try {
	      if (stopped) {
	        throw new Error(`preload ${ cid } but preloader is not started`);
	      }
	      const path = cid.toString();
	      if (cache.has(path)) {
	        return;
	      }
	      cache.set(path, true);
	      const fallbackApiUris = arrayShuffle(apiUris);
	      let success = false;
	      const now = Date.now();
	      for (const uri of fallbackApiUris) {
	        if (stopped)
	          throw new Error(`preload aborted for ${ path }`);
	        let controller;
	        try {
	          controller = new AbortController();
	          requests = requests.concat(controller);
	          await preload(`${ uri }/api/v0/refs?r=true&arg=${ encodeURIComponent(path) }`, { signal: controller.signal });
	          success = true;
	        } catch (err) {
	          if (err.type !== 'aborted')
	            log$1g.error(err);
	        } finally {
	          requests = requests.filter(r => r !== controller);
	        }
	        if (success)
	          break;
	      }
	      log$1g(`${ success ? '' : 'un' }successfully preloaded ${ path } in ${ Date.now() - now }ms`);
	    } catch (err) {
	      log$1g.error(err);
	    }
	  };
	  api.start = () => {
	    stopped = false;
	  };
	  api.stop = () => {
	    stopped = true;
	    log$1g(`aborting ${ requests.length } pending preload request(s)`);
	    requests.forEach(r => r.abort());
	    requests = [];
	  };
	  return api;
	}

	const log$1f = Object.assign(debug$S('ipfs:mfs-preload'), { error: debug$S('ipfs:mfs-preload:error') });
	function createMfsPreloader({preload, files, options = {}}) {
	  options.interval = options.interval || 30 * 1000;
	  if (!options.enabled) {
	    log$1f('MFS preload disabled');
	    const noop = async () => {
	    };
	    return {
	      start: noop,
	      stop: noop
	    };
	  }
	  let rootCid = '';
	  let timeoutId;
	  const preloadMfs = async () => {
	    try {
	      const stats = await files.stat('/');
	      const nextRootCid = stats.cid.toString();
	      if (rootCid !== nextRootCid) {
	        log$1f(`preloading updated MFS root ${ rootCid } -> ${ stats.cid }`);
	        await preload(stats.cid);
	        rootCid = nextRootCid;
	      }
	    } catch (err) {
	      log$1f.error('failed to preload MFS root', err);
	    } finally {
	      timeoutId = setTimeout(preloadMfs, options.interval);
	    }
	  };
	  return {
	    async start() {
	      const stats = await files.stat('/');
	      rootCid = stats.cid.toString();
	      log$1f(`monitoring MFS root ${ stats.cid }`);
	      timeoutId = setTimeout(preloadMfs, options.interval);
	    },
	    stop() {
	      clearTimeout(timeoutId);
	    }
	  };
	}

	var lib$2 = {exports: {}};

	var require$$1$4 = /*@__PURE__*/getAugmentedNamespace(index_browser$1);

	var constants$g = {
	  WORKER_REQUEST_READ_LOCK: 'lock:worker:request-read',
	  WORKER_RELEASE_READ_LOCK: 'lock:worker:release-read',
	  MASTER_GRANT_READ_LOCK: 'lock:master:grant-read',

	  WORKER_REQUEST_WRITE_LOCK: 'lock:worker:request-write',
	  WORKER_RELEASE_WRITE_LOCK: 'lock:worker:release-write',
	  MASTER_GRANT_WRITE_LOCK: 'lock:master:grant-write'
	};

	const EventEmitter$l = require$$1$5.EventEmitter;
	const { nanoid: nanoid$1 } = require$$1$4;
	const {
	  WORKER_REQUEST_READ_LOCK: WORKER_REQUEST_READ_LOCK$1,
	  WORKER_RELEASE_READ_LOCK: WORKER_RELEASE_READ_LOCK$1,
	  MASTER_GRANT_READ_LOCK: MASTER_GRANT_READ_LOCK$1,
	  WORKER_REQUEST_WRITE_LOCK: WORKER_REQUEST_WRITE_LOCK$1,
	  WORKER_RELEASE_WRITE_LOCK: WORKER_RELEASE_WRITE_LOCK$1,
	  MASTER_GRANT_WRITE_LOCK: MASTER_GRANT_WRITE_LOCK$1
	} = constants$g;
	let cluster;

	const handleWorkerLockRequest$1 = (emitter, masterEvent, requestType, releaseType, grantType) => {
	  return (worker, requestEvent) => {
	    if (requestEvent && requestEvent.type === requestType) {
	      emitter.emit(masterEvent, requestEvent.name, () => {
	        // grant lock to worker
	        worker.send({
	          type: grantType,
	          name: requestEvent.name,
	          identifier: requestEvent.identifier
	        });

	        // wait for worker to finish
	        return new Promise((resolve) => {
	          const releaseEventListener = (releaseEvent) => {
	            if (releaseEvent && releaseEvent.type === releaseType && releaseEvent.identifier === requestEvent.identifier) {
	              worker.removeListener('message', releaseEventListener);
	              resolve();
	            }
	          };

	          worker.on('message', releaseEventListener);
	        })
	      });
	    }
	  }
	};

	const makeWorkerLockRequest$1 = (name, requestType, grantType, releaseType) => {
	  return () => {
	    const id = nanoid$1();

	    process$3.send({
	      type: requestType,
	      identifier: id,
	      name
	    });

	    return new Promise((resolve) => {
	      const listener = (event) => {
	        if (event && event.type === grantType && event.identifier === id) {
	          process$3.removeListener('message', listener);

	          // grant lock
	          resolve(() => {
	            // release lock
	            process$3.send({
	              type: releaseType,
	              identifier: id,
	              name
	            });
	          });
	        }
	      };

	      process$3.on('message', listener);
	    })
	  }
	};

	var node$2 = (options) => {
	  try {
	    cluster = require('cluster');

	    if (!Object.keys(cluster).length) {
	      return
	    }
	  } catch (_) {
	    return
	  }

	  if (cluster.isMaster || options.singleProcess) {
	    const emitter = new EventEmitter$l();

	    cluster.on('message', handleWorkerLockRequest$1(emitter, 'requestReadLock', WORKER_REQUEST_READ_LOCK$1, WORKER_RELEASE_READ_LOCK$1, MASTER_GRANT_READ_LOCK$1));
	    cluster.on('message', handleWorkerLockRequest$1(emitter, 'requestWriteLock', WORKER_REQUEST_WRITE_LOCK$1, WORKER_RELEASE_WRITE_LOCK$1, MASTER_GRANT_WRITE_LOCK$1));

	    return emitter
	  }

	  return {
	    isWorker: true,
	    readLock: (name) => makeWorkerLockRequest$1(name, WORKER_REQUEST_READ_LOCK$1, MASTER_GRANT_READ_LOCK$1, WORKER_RELEASE_READ_LOCK$1),
	    writeLock: (name) => makeWorkerLockRequest$1(name, WORKER_REQUEST_WRITE_LOCK$1, MASTER_GRANT_WRITE_LOCK$1, WORKER_RELEASE_WRITE_LOCK$1)
	  }
	};

	const events$1 = {};

	const observable = (worker) => {
	  worker.addEventListener('message', (event) => {
	    observable.dispatchEvent('message', worker, event);
	  });

	  if (worker.port) {
	    worker.port.addEventListener('message', (event) => {
	      observable.dispatchEvent('message', worker, event);
	    });
	  }
	};

	observable.addEventListener = (type, fn) => {
	  if (!events$1[type]) {
	    events$1[type] = [];
	  }

	  events$1[type].push(fn);
	};

	observable.removeEventListener = (type, fn) => {
	  if (!events$1[type]) {
	    return
	  }

	  events$1[type] = events$1[type]
	    .filter(listener => listener === fn);
	};

	observable.dispatchEvent = function () {
	  const args = Array.prototype.slice.call(arguments);
	  const type = args.shift();

	  if (!events$1[type]) {
	    return
	  }

	  events$1[type].forEach(fn => fn.apply(null, args));
	};

	var lib$1 = observable;

	const EventEmitter$k = require$$1$5.EventEmitter;
	const { nanoid } = require$$1$4;
	const {
	  WORKER_REQUEST_READ_LOCK,
	  WORKER_RELEASE_READ_LOCK,
	  MASTER_GRANT_READ_LOCK,
	  WORKER_REQUEST_WRITE_LOCK,
	  WORKER_RELEASE_WRITE_LOCK,
	  MASTER_GRANT_WRITE_LOCK
	} = constants$g;
	const observer = lib$1;

	const handleWorkerLockRequest = (emitter, masterEvent, requestType, releaseType, grantType) => {
	  return (worker, event) => {
	    if (!event || !event.data || event.data.type !== requestType) {
	      return
	    }

	    const requestEvent = {
	      type: event.data.type,
	      name: event.data.name,
	      identifier: event.data.identifier
	    };

	    emitter.emit(masterEvent, requestEvent.name, () => {
	      // grant lock to worker
	      worker.postMessage({
	        type: grantType,
	        name: requestEvent.name,
	        identifier: requestEvent.identifier
	      });

	      // wait for worker to finish
	      return new Promise((resolve) => {
	        const releaseEventListener = (event) => {
	          if (!event || !event.data) {
	            return
	          }

	          const releaseEvent = {
	            type: event.data.type,
	            name: event.data.name,
	            identifier: event.data.identifier
	          };

	          if (releaseEvent && releaseEvent.type === releaseType && releaseEvent.identifier === requestEvent.identifier) {
	            worker.removeEventListener('message', releaseEventListener);
	            resolve();
	          }
	        };

	        worker.addEventListener('message', releaseEventListener);
	      })
	    });
	  }
	};

	const makeWorkerLockRequest = (name, requestType, grantType, releaseType) => {
	  return () => {
	    const id = nanoid();

	    globalThis.postMessage({
	      type: requestType,
	      identifier: id,
	      name
	    });

	    return new Promise((resolve) => {
	      const listener = (event) => {
	        if (!event || !event.data) {
	          return
	        }

	        const responseEvent = {
	          type: event.data.type,
	          identifier: event.data.identifier
	        };

	        if (responseEvent && responseEvent.type === grantType && responseEvent.identifier === id) {
	          globalThis.removeEventListener('message', listener);

	          // grant lock
	          resolve(() => {
	            // release lock
	            globalThis.postMessage({
	              type: releaseType,
	              identifier: id,
	              name
	            });
	          });
	        }
	      };

	      globalThis.addEventListener('message', listener);
	    })
	  }
	};

	const defaultOptions$k = {
	  singleProcess: false
	};

	var browser$8 = (options) => {
	  options = Object.assign({}, defaultOptions$k, options);
	  const isMaster = !!globalThis.document || options.singleProcess;

	  if (isMaster) {
	    const emitter = new EventEmitter$k();

	    observer.addEventListener('message', handleWorkerLockRequest(emitter, 'requestReadLock', WORKER_REQUEST_READ_LOCK, WORKER_RELEASE_READ_LOCK, MASTER_GRANT_READ_LOCK));
	    observer.addEventListener('message', handleWorkerLockRequest(emitter, 'requestWriteLock', WORKER_REQUEST_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK));

	    return emitter
	  }

	  return {
	    isWorker: true,
	    readLock: (name) => makeWorkerLockRequest(name, WORKER_REQUEST_READ_LOCK, MASTER_GRANT_READ_LOCK, WORKER_RELEASE_READ_LOCK),
	    writeLock: (name) => makeWorkerLockRequest(name, WORKER_REQUEST_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK)
	  }
	};

	var promiseTimeout = {};

	/**
	 * Local reference to TimeoutError
	 * @private
	 */
	var TimeoutError$1;

	/**
	 * Rejects a promise with a {@link TimeoutError} if it does not settle within
	 * the specified timeout.
	 *
	 * @param {Promise} promise The promise.
	 * @param {number} timeoutMillis Number of milliseconds to wait on settling.
	 * @returns {Promise} Either resolves/rejects with `promise`, or rejects with
	 *                   `TimeoutError`, whichever settles first.
	 */
	promiseTimeout.timeout = function(promise, timeoutMillis) {
	  var error = new TimeoutError$1(),
	      timeout;

	  return Promise.race([
	    promise,
	    new Promise(function(resolve, reject) {
	      timeout = setTimeout(function() {
	        reject(error);
	      }, timeoutMillis);
	    }),
	  ]).then(function(v) {
	    clearTimeout(timeout);
	    return v;
	  }, function(err) {
	    clearTimeout(timeout);
	    throw err;
	  });
	};

	/**
	 * Exception indicating that the timeout expired.
	 */
	TimeoutError$1 = promiseTimeout.TimeoutError = function() {
	  Error.call(this);
	  this.stack = Error().stack;
	  this.message = 'Timeout';
	};

	TimeoutError$1.prototype = Object.create(Error.prototype);
	TimeoutError$1.prototype.name = "TimeoutError";

	const node$1 = node$2;
	const browser$7 = browser$8;
	const { default: Queue$5 } = dist$1;
	const { timeout } = promiseTimeout;
	const observe = lib$1;

	const mutexes = {};
	let implementation;

	function createReleaseable (queue, options) {
	  let res;

	  const p = new Promise((resolve) => {
	    res = resolve;
	  });

	  queue.add(() => timeout((() => {
	    return new Promise((resolve) => {
	      res(() => {
	        resolve();
	      });
	    })
	  })(), options.timeout));

	  return p
	}

	const createMutex = (name, options) => {
	  if (implementation.isWorker) {
	    return {
	      readLock: implementation.readLock(name, options),
	      writeLock: implementation.writeLock(name, options)
	    }
	  }

	  const masterQueue = new Queue$5({ concurrency: 1 });
	  let readQueue = null;

	  return {
	    readLock: () => {
	      // If there's already a read queue, just add the task to it
	      if (readQueue) {
	        return createReleaseable(readQueue, options)
	      }

	      // Create a new read queue
	      readQueue = new Queue$5({
	        concurrency: options.concurrency,
	        autoStart: false
	      });
	      const localReadQueue = readQueue;

	      // Add the task to the read queue
	      const readPromise = createReleaseable(readQueue, options);

	      masterQueue.add(() => {
	        // Start the task only once the master queue has completed processing
	        // any previous tasks
	        localReadQueue.start();

	        // Once all the tasks in the read queue have completed, remove it so
	        // that the next read lock will occur after any write locks that were
	        // started in the interim
	        return localReadQueue.onIdle()
	          .then(() => {
	            if (readQueue === localReadQueue) {
	              readQueue = null;
	            }
	          })
	      });

	      return readPromise
	    },
	    writeLock: () => {
	      // Remove the read queue reference, so that any later read locks will be
	      // added to a new queue that starts after this write lock has been
	      // released
	      readQueue = null;

	      return createReleaseable(masterQueue, options)
	    }
	  }
	};

	const defaultOptions$j = {
	  concurrency: Infinity,
	  timeout: 84600000,
	  global: commonjsGlobal,
	  singleProcess: false
	};

	lib$2.exports = (name, options) => {
	  if (!options) {
	    options = {};
	  }

	  if (typeof name === 'object') {
	    options = name;
	    name = 'lock';
	  }

	  if (!name) {
	    name = 'lock';
	  }

	  options = Object.assign({}, defaultOptions$j, options);

	  if (!implementation) {
	    implementation = node$1(options) || browser$7(options);

	    if (!implementation.isWorker) {
	      // we are master, set up worker requests
	      implementation.on('requestReadLock', (name, fn) => {
	        if (!mutexes[name]) {
	          return
	        }

	        mutexes[name].readLock()
	          .then(release => fn().finally(() => release()));
	      });

	      implementation.on('requestWriteLock', async (name, fn) => {
	        if (!mutexes[name]) {
	          return
	        }

	        mutexes[name].writeLock()
	          .then(release => fn().finally(() => release()));
	      });
	    }
	  }

	  if (!mutexes[name]) {
	    mutexes[name] = createMutex(name, options);
	  }

	  return mutexes[name]
	};

	lib$2.exports.Worker = function (script, Impl) {
	  Impl = Impl || commonjsGlobal.Worker;
	  let worker;

	  try {
	    worker = new Impl(script);
	  } catch (error) {
	    if (error.message.includes('not a constructor')) {
	      worker = Impl(script);
	    }
	  }

	  if (!worker) {
	    throw new Error('Could not create Worker from', Impl)
	  }

	  observe(worker);

	  return worker
	};

	var mortice$1 = lib$2.exports;

	let lock$1;
	function createLock(repoOwner = false) {
	  if (lock$1) {
	    return lock$1;
	  }
	  const mutex = mortice$1({ singleProcess: repoOwner });
	  lock$1 = {
	    readLock: func => {
	      return async (...args) => {
	        const releaseLock = await mutex.readLock();
	        try {
	          return await func.apply(null, args);
	        } finally {
	          releaseLock();
	        }
	      };
	    },
	    writeLock: func => {
	      return async (...args) => {
	        const releaseLock = await mutex.writeLock();
	        try {
	          return await func.apply(null, args);
	        } finally {
	          releaseLock();
	        }
	      };
	    }
	  };
	  return lock$1;
	}

	const log$1e = debug$S('ipfs:mfs:utils:with-mfs-root');
	async function loadMfsRoot(context, options) {
	  if (options && options.signal && options.signal.aborted) {
	    throw errCode$q(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' });
	  }
	  await context.repo.datastore.open();
	  let cid;
	  try {
	    const buf = await context.repo.datastore.get(MFS_ROOT_KEY$2);
	    cid = CID$6.decode(buf);
	  } catch (err) {
	    if (err.code !== 'ERR_NOT_FOUND') {
	      throw err;
	    }
	    log$1e('Creating new MFS root');
	    const buf = encode$k({
	      Data: new UnixFS({ type: 'directory' }).marshal(),
	      Links: []
	    });
	    const hash = await sha256$b.digest(buf);
	    cid = CID$6.createV0(hash);
	    await context.repo.blocks.put(cid, buf);
	    if (options && options.signal && options.signal.aborted) {
	      throw errCode$q(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' });
	    }
	    await context.repo.datastore.put(MFS_ROOT_KEY$2, cid.bytes);
	  }
	  log$1e(`Loaded MFS root /ipfs/${ cid }`);
	  return cid;
	}

	function toPathComponents(path = '') {
	  return (path.trim().match(/([^\\^/]|\\\/)+/g) || []).filter(Boolean);
	}

	const IPFS_PREFIX = 'ipfs';
	const toMfsPath = async (context, path, options) => {
	  const root = await loadMfsRoot(context, options);
	  let output = { entryType: 'file' };
	  let ipfsPath = '';
	  if (CID$6.asCID(path)) {
	    ipfsPath = `/ipfs/${ path }`;
	  } else {
	    ipfsPath = path.toString();
	  }
	  ipfsPath = ipfsPath.trim();
	  ipfsPath = ipfsPath.replace(/(\/\/+)/g, '/');
	  if (ipfsPath.endsWith('/') && ipfsPath.length > 1) {
	    ipfsPath = ipfsPath.substring(0, ipfsPath.length - 1);
	  }
	  if (!ipfsPath) {
	    throw errCode$q(new Error('paths must not be empty'), 'ERR_NO_PATH');
	  }
	  if (ipfsPath.substring(0, 1) !== '/') {
	    throw errCode$q(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH');
	  }
	  if (ipfsPath.substring(ipfsPath.length - 1) === '/') {
	    ipfsPath = ipfsPath.substring(0, ipfsPath.length - 1);
	  }
	  const pathComponents = toPathComponents(ipfsPath);
	  if (pathComponents[0] === IPFS_PREFIX) {
	    let mfsDirectory;
	    if (pathComponents.length === 2) {
	      mfsDirectory = `/${ pathComponents.join('/') }`;
	    } else {
	      mfsDirectory = `/${ pathComponents.slice(0, pathComponents.length - 1).join('/') }`;
	    }
	    output = {
	      type: 'ipfs',
	      depth: pathComponents.length - 2,
	      entryType: 'file',
	      mfsPath: `/${ pathComponents.join('/') }`,
	      mfsDirectory,
	      parts: pathComponents,
	      path: `/${ pathComponents.join('/') }`,
	      name: pathComponents[pathComponents.length - 1]
	    };
	  } else {
	    const mfsPath = `/${ IPFS_PREFIX }/${ root }${ pathComponents.length ? '/' + pathComponents.join('/') : '' }`;
	    const mfsDirectory = `/${ IPFS_PREFIX }/${ root }/${ pathComponents.slice(0, pathComponents.length - 1).join('/') }`;
	    output = {
	      type: 'mfs',
	      depth: pathComponents.length,
	      entryType: 'file',
	      mfsDirectory,
	      mfsPath,
	      parts: pathComponents,
	      path: `/${ pathComponents.join('/') }`,
	      name: pathComponents[pathComponents.length - 1]
	    };
	  }
	  const cidPath = output.type === 'mfs' ? output.mfsPath : output.path;
	  try {
	    const res = await exporter(cidPath, context.repo.blocks, options);
	    output.cid = res.cid;
	    output.mfsPath = `/ipfs/${ res.path }`;
	    output.entryType = res.type;
	    output.content = res.content;
	    if ((output.entryType === 'file' || output.entryType === 'directory') && (res.type === 'file' || res.type === 'directory')) {
	      output.unixfs = res.unixfs;
	    }
	  } catch (err) {
	    if (err.code !== 'ERR_NOT_FOUND') {
	      throw err;
	    }
	  }
	  output.exists = Boolean(output.cid);
	  return output;
	};

	const mergeOptions$h = mergeOptions$k.bind({ ignoreUndefined: true });
	const log$1d = debug$S('ipfs:mfs:stat');
	const defaultOptions$i = { withLocal: false };
	function createStat$7(context) {
	  async function mfsStat(path, options = {}) {
	    options = mergeOptions$h(defaultOptions$i, options);
	    log$1d(`Fetching stats for ${ path }`);
	    const {type, cid, mfsPath} = await toMfsPath(context, path, options);
	    const exportPath = type === 'ipfs' && cid ? cid : mfsPath;
	    let file;
	    try {
	      file = await exporter(exportPath, context.repo.blocks);
	    } catch (err) {
	      if (err.code === 'ERR_NOT_FOUND') {
	        throw errCode$q(new Error(`${ path } does not exist`), 'ERR_NOT_FOUND');
	      }
	      throw err;
	    }
	    if (!statters[file.type]) {
	      throw new Error(`Cannot stat codec ${ file.cid.code }`);
	    }
	    return statters[file.type](file);
	  }
	  return withTimeoutOption(mfsStat);
	}
	const statters = {
	  raw: file => {
	    return {
	      cid: file.cid,
	      size: file.node.length,
	      cumulativeSize: file.node.length,
	      blocks: 0,
	      type: 'file',
	      local: undefined,
	      sizeLocal: undefined,
	      withLocality: false
	    };
	  },
	  file: file => {
	    const stat = {
	      cid: file.cid,
	      type: 'file',
	      size: file.unixfs.fileSize(),
	      cumulativeSize: encode$k(file.node).length + (file.node.Links || []).reduce((acc, curr) => acc + (curr.Tsize || 0), 0),
	      blocks: file.unixfs.blockSizes.length,
	      local: undefined,
	      sizeLocal: undefined,
	      withLocality: false,
	      mode: file.unixfs.mode
	    };
	    if (file.unixfs.mtime) {
	      stat.mtime = file.unixfs.mtime;
	    }
	    return stat;
	  },
	  directory: file => {
	    const stat = {
	      cid: file.cid,
	      type: 'directory',
	      size: 0,
	      cumulativeSize: encode$k(file.node).length + (file.node.Links || []).reduce((acc, curr) => acc + (curr.Tsize || 0), 0),
	      blocks: file.node.Links.length,
	      local: undefined,
	      sizeLocal: undefined,
	      withLocality: false,
	      mode: file.unixfs.mode
	    };
	    if (file.unixfs.mtime) {
	      stat.mtime = file.unixfs.mtime;
	    }
	    return stat;
	  },
	  object: file => {
	    return {
	      cid: file.cid,
	      size: file.node.length,
	      cumulativeSize: file.node.length,
	      type: 'file',
	      blocks: 0,
	      local: undefined,
	      sizeLocal: undefined,
	      withLocality: false
	    };
	  },
	  identity: file => {
	    return {
	      cid: file.cid,
	      size: file.node.length,
	      cumulativeSize: file.node.length,
	      blocks: 0,
	      type: 'file',
	      local: undefined,
	      sizeLocal: undefined,
	      withLocality: false
	    };
	  }
	};

	const log$1c = debug$S('ipfs:mfs:utils:to-trail');
	async function toTrail(context, path) {
	  log$1c(`Creating trail for path ${ path }`);
	  const output = [];
	  for await (const fsEntry of walkPath(path, context.repo.blocks)) {
	    output.push({
	      name: fsEntry.name,
	      cid: fsEntry.cid,
	      size: fsEntry.size,
	      type: fsEntry.type
	    });
	  }
	  return output;
	}

	const persist = async (buffer, blockstore, options) => {
	  if (!options.codec) {
	    options.codec = dagPB;
	  }
	  if (!options.hasher) {
	    options.hasher = sha256$b;
	  }
	  if (options.cidVersion === undefined) {
	    options.cidVersion = 1;
	  }
	  if (options.codec === dagPB && options.hasher !== sha256$b) {
	    options.cidVersion = 1;
	  }
	  const multihash = await options.hasher.digest(buffer);
	  const cid = CID$6.create(options.cidVersion, options.codec.code, multihash);
	  if (!options.onlyHash) {
	    await blockstore.put(cid, buffer, { signal: options.signal });
	  }
	  return cid;
	};

	const hamtHashCode = murmur3128.code;
	const hamtBucketBits = 8;
	async function hamtHashFn(buf) {
	  return (await murmur3128.encode(buf)).slice(0, 8).reverse();
	}

	class Dir {
	  constructor(props, options) {
	    this.options = options || {};
	    this.root = props.root;
	    this.dir = props.dir;
	    this.path = props.path;
	    this.dirty = props.dirty;
	    this.flat = props.flat;
	    this.parent = props.parent;
	    this.parentKey = props.parentKey;
	    this.unixfs = props.unixfs;
	    this.mode = props.mode;
	    this.mtime = props.mtime;
	    this.cid = undefined;
	    this.size = undefined;
	  }
	  async put(name, value) {
	  }
	  get(name) {
	    return Promise.resolve(this);
	  }
	  async *eachChildSeries() {
	  }
	  async *flush(blockstore) {
	  }
	}
	class DirSharded extends Dir {
	  constructor(props, options) {
	    super(props, options);
	    this._bucket = src$j.createHAMT({
	      hashFn: hamtHashFn,
	      bits: hamtBucketBits
	    });
	  }
	  async put(name, value) {
	    await this._bucket.put(name, value);
	  }
	  get(name) {
	    return this._bucket.get(name);
	  }
	  childCount() {
	    return this._bucket.leafCount();
	  }
	  directChildrenCount() {
	    return this._bucket.childrenCount();
	  }
	  onlyChild() {
	    return this._bucket.onlyChild();
	  }
	  async *eachChildSeries() {
	    for await (const {key, value} of this._bucket.eachLeafSeries()) {
	      yield {
	        key,
	        child: value
	      };
	    }
	  }
	  async *flush(blockstore) {
	    yield* flush(this._bucket, blockstore, this, this.options);
	  }
	}
	async function* flush(bucket, blockstore, shardRoot, options) {
	  const children = bucket._children;
	  const links = [];
	  let childrenSize = 0;
	  for (let i = 0; i < children.length; i++) {
	    const child = children.get(i);
	    if (!child) {
	      continue;
	    }
	    const labelPrefix = i.toString(16).toUpperCase().padStart(2, '0');
	    if (child instanceof src$j.Bucket) {
	      let shard;
	      for await (const subShard of await flush(child, blockstore, null, options)) {
	        shard = subShard;
	      }
	      if (!shard) {
	        throw new Error('Could not flush sharded directory, no subshard found');
	      }
	      links.push({
	        Name: labelPrefix,
	        Tsize: shard.size,
	        Hash: shard.cid
	      });
	      childrenSize += shard.size;
	    } else if (typeof child.value.flush === 'function') {
	      const dir = child.value;
	      let flushedDir;
	      for await (const entry of dir.flush(blockstore)) {
	        flushedDir = entry;
	        yield flushedDir;
	      }
	      const label = labelPrefix + child.key;
	      links.push({
	        Name: label,
	        Tsize: flushedDir.size,
	        Hash: flushedDir.cid
	      });
	      childrenSize += flushedDir.size;
	    } else {
	      const value = child.value;
	      if (!value.cid) {
	        continue;
	      }
	      const label = labelPrefix + child.key;
	      const size = value.size;
	      links.push({
	        Name: label,
	        Tsize: size,
	        Hash: value.cid
	      });
	      childrenSize += size;
	    }
	  }
	  const data = Uint8Array.from(children.bitField().reverse());
	  const dir = new UnixFS({
	    type: 'hamt-sharded-directory',
	    data,
	    fanout: bucket.tableSize(),
	    hashType: hamtHashCode,
	    mtime: shardRoot && shardRoot.mtime,
	    mode: shardRoot && shardRoot.mode
	  });
	  const node = {
	    Data: dir.marshal(),
	    Links: links
	  };
	  const buffer = encode$k(prepare(node));
	  const cid = await persist(buffer, blockstore, options);
	  const size = buffer.length + childrenSize;
	  yield {
	    cid,
	    node,
	    size
	  };
	}

	const log$1b = debug$S('ipfs:mfs:core:utils:hamt-utils');
	const updateHamtDirectory = async (context, links, bucket, options) => {
	  if (!options.parent.Data) {
	    throw new Error('Could not update HAMT directory because parent had no data');
	  }
	  const data = Uint8Array.from(bucket._children.bitField().reverse());
	  const node = UnixFS.unmarshal(options.parent.Data);
	  const dir = new UnixFS({
	    type: 'hamt-sharded-directory',
	    data,
	    fanout: bucket.tableSize(),
	    hashType: hamtHashCode,
	    mode: node.mode,
	    mtime: node.mtime
	  });
	  const hasher = await context.hashers.getHasher(options.hashAlg);
	  const parent = {
	    Data: dir.marshal(),
	    Links: links.sort((a, b) => (a.Name || '').localeCompare(b.Name || ''))
	  };
	  const buf = encode$k(parent);
	  const hash = await hasher.digest(buf);
	  const cid = CID$6.create(options.cidVersion, code$8, hash);
	  if (options.flush) {
	    await context.repo.blocks.put(cid, buf);
	  }
	  return {
	    node: parent,
	    cid,
	    size: links.reduce((sum, link) => sum + (link.Tsize || 0), buf.length)
	  };
	};
	const recreateHamtLevel = async (context, links, rootBucket, parentBucket, positionAtParent) => {
	  const bucket = new src$j.Bucket({
	    hash: rootBucket._options.hash,
	    bits: rootBucket._options.bits
	  }, parentBucket, positionAtParent);
	  parentBucket._putObjectAt(positionAtParent, bucket);
	  await addLinksToHamtBucket(context, links, bucket, rootBucket);
	  return bucket;
	};
	const recreateInitialHamtLevel = async links => {
	  const bucket = src$j.createHAMT({
	    hashFn: hamtHashFn,
	    bits: hamtBucketBits
	  });
	  await Promise.all(links.map(async link => {
	    const linkName = link.Name || '';
	    if (linkName.length === 2) {
	      const pos = parseInt(linkName, 16);
	      const subBucket = new src$j.Bucket({
	        hash: bucket._options.hash,
	        bits: bucket._options.bits
	      }, bucket, pos);
	      bucket._putObjectAt(pos, subBucket);
	      return Promise.resolve();
	    }
	    return bucket.put(linkName.substring(2), {
	      size: link.Tsize,
	      cid: link.Hash
	    });
	  }));
	  return bucket;
	};
	const addLinksToHamtBucket = async (context, links, bucket, rootBucket) => {
	  await Promise.all(links.map(async link => {
	    const linkName = link.Name || '';
	    if (linkName.length === 2) {
	      log$1b('Populating sub bucket', linkName);
	      const pos = parseInt(linkName, 16);
	      const block = await context.repo.blocks.get(link.Hash);
	      const node = decode$i(block);
	      const subBucket = new src$j.Bucket({
	        hash: rootBucket._options.hash,
	        bits: rootBucket._options.bits
	      }, bucket, pos);
	      bucket._putObjectAt(pos, subBucket);
	      await addLinksToHamtBucket(context, node.Links, subBucket, rootBucket);
	      return Promise.resolve();
	    }
	    return rootBucket.put(linkName.substring(2), {
	      size: link.Tsize,
	      cid: link.Hash
	    });
	  }));
	};
	const toPrefix = position => {
	  return position.toString(16).toUpperCase().padStart(2, '0').substring(0, 2);
	};
	const generatePath = async (context, fileName, rootNode) => {
	  const rootBucket = await recreateInitialHamtLevel(rootNode.Links);
	  const position = await rootBucket._findNewBucketAndPos(fileName);
	  const path = [{
	      bucket: position.bucket,
	      prefix: toPrefix(position.pos)
	    }];
	  let currentBucket = position.bucket;
	  while (currentBucket !== rootBucket) {
	    path.push({
	      bucket: currentBucket,
	      prefix: toPrefix(currentBucket._posAtParent)
	    });
	    currentBucket = currentBucket._parent;
	  }
	  path.reverse();
	  path[0].node = rootNode;
	  for (let i = 0; i < path.length; i++) {
	    const segment = path[i];
	    if (!segment.node) {
	      throw new Error('Could not generate HAMT path');
	    }
	    const link = segment.node.Links.filter(link => (link.Name || '').substring(0, 2) === segment.prefix).pop();
	    if (!link) {
	      log$1b(`Link ${ segment.prefix }${ fileName } will be added`);
	      continue;
	    }
	    if (link.Name === `${ segment.prefix }${ fileName }`) {
	      log$1b(`Link ${ segment.prefix }${ fileName } will be replaced`);
	      continue;
	    }
	    log$1b(`Found subshard ${ segment.prefix }`);
	    const block = await context.repo.blocks.get(link.Hash);
	    const node = decode$i(block);
	    if (!path[i + 1]) {
	      log$1b(`Loaded new subshard ${ segment.prefix }`);
	      await recreateHamtLevel(context, node.Links, rootBucket, segment.bucket, parseInt(segment.prefix, 16));
	      const position = await rootBucket._findNewBucketAndPos(fileName);
	      path.push({
	        bucket: position.bucket,
	        prefix: toPrefix(position.pos),
	        node: node
	      });
	      continue;
	    }
	    const nextSegment = path[i + 1];
	    await addLinksToHamtBucket(context, node.Links, nextSegment.bucket, rootBucket);
	    nextSegment.node = node;
	  }
	  await rootBucket.put(fileName, true);
	  path.reverse();
	  return {
	    rootBucket,
	    path
	  };
	};
	const createShard = async (context, contents, options = {}) => {
	  const shard = new DirSharded({
	    root: true,
	    dir: true,
	    parent: undefined,
	    parentKey: undefined,
	    path: '',
	    dirty: true,
	    flat: false,
	    mtime: options.mtime,
	    mode: options.mode
	  }, options);
	  for (let i = 0; i < contents.length; i++) {
	    await shard._bucket.put(contents[i].name, {
	      size: contents[i].size,
	      cid: contents[i].cid
	    });
	  }
	  const res = await itLast(shard.flush(context.repo.blocks));
	  if (!res) {
	    throw new Error('Flushing shard yielded no result');
	  }
	  return res;
	};

	const log$1a = debug$S('ipfs:mfs:core:utils:add-link');
	async function addLink(context, options) {
	  let parent = options.parent;
	  if (options.parentCid) {
	    const parentCid = CID$6.asCID(options.parentCid);
	    if (parentCid === null) {
	      throw errCode$q(new Error('Invalid CID passed to addLink'), 'EINVALIDPARENTCID');
	    }
	    if (parentCid.code !== code$8) {
	      throw errCode$q(new Error('Unsupported codec. Only DAG-PB is supported'), 'EINVALIDPARENTCID');
	    }
	    log$1a(`Loading parent node ${ parentCid }`);
	    const block = await context.repo.blocks.get(parentCid);
	    parent = decode$i(block);
	  }
	  if (!parent) {
	    throw errCode$q(new Error('No parent node or CID passed to addLink'), 'EINVALIDPARENT');
	  }
	  if (!options.cid) {
	    throw errCode$q(new Error('No child cid passed to addLink'), 'EINVALIDCHILDCID');
	  }
	  if (!options.name) {
	    throw errCode$q(new Error('No child name passed to addLink'), 'EINVALIDCHILDNAME');
	  }
	  if (!options.size && options.size !== 0) {
	    throw errCode$q(new Error('No child size passed to addLink'), 'EINVALIDCHILDSIZE');
	  }
	  if (!parent.Data) {
	    throw errCode$q(new Error('Parent node with no data passed to addLink'), 'ERR_INVALID_PARENT');
	  }
	  const meta = UnixFS.unmarshal(parent.Data);
	  if (meta.type === 'hamt-sharded-directory') {
	    log$1a('Adding link to sharded directory');
	    return addToShardedDirectory(context, {
	      ...options,
	      parent
	    });
	  }
	  if (parent.Links.length >= options.shardSplitThreshold) {
	    log$1a('Converting directory to sharded directory');
	    return convertToShardedDirectory(context, {
	      ...options,
	      parent,
	      mtime: meta.mtime,
	      mode: meta.mode
	    });
	  }
	  log$1a(`Adding ${ options.name } (${ options.cid }) to regular directory`);
	  return addToDirectory(context, {
	    ...options,
	    parent
	  });
	}
	const convertToShardedDirectory = async (context, options) => {
	  const result = await createShard(context, options.parent.Links.map(link => ({
	    name: link.Name || '',
	    size: link.Tsize || 0,
	    cid: link.Hash
	  })).concat({
	    name: options.name,
	    size: options.size,
	    cid: options.cid
	  }), options);
	  log$1a(`Converted directory to sharded directory ${ result.cid }`);
	  return result;
	};
	const addToDirectory = async (context, options) => {
	  const parentLinks = options.parent.Links.filter(link => {
	    return link.Name !== options.name;
	  });
	  parentLinks.push({
	    Name: options.name,
	    Tsize: options.size,
	    Hash: options.cid
	  });
	  if (!options.parent.Data) {
	    throw errCode$q(new Error('Parent node with no data passed to addToDirectory'), 'ERR_INVALID_PARENT');
	  }
	  const node = UnixFS.unmarshal(options.parent.Data);
	  let data;
	  if (node.mtime) {
	    const ms = Date.now();
	    const secs = Math.floor(ms / 1000);
	    node.mtime = {
	      secs: secs,
	      nsecs: (ms - secs * 1000) * 1000
	    };
	    data = node.marshal();
	  } else {
	    data = options.parent.Data;
	  }
	  options.parent = prepare({
	    Data: data,
	    Links: parentLinks
	  });
	  const hasher = await context.hashers.getHasher(options.hashAlg);
	  const buf = encode$k(options.parent);
	  const hash = await hasher.digest(buf);
	  const cid = CID$6.create(options.cidVersion, code$8, hash);
	  if (options.flush) {
	    await context.repo.blocks.put(cid, buf);
	  }
	  return {
	    node: options.parent,
	    cid,
	    size: buf.length
	  };
	};
	const addToShardedDirectory = async (context, options) => {
	  const {shard, path} = await addFileToShardedDirectory(context, options);
	  const result = await itLast(shard.flush(context.repo.blocks));
	  if (!result) {
	    throw new Error('No result from flushing shard');
	  }
	  const block = await context.repo.blocks.get(result.cid);
	  const node = decode$i(block);
	  const parentLinks = options.parent.Links.filter(link => {
	    return (link.Name || '').substring(0, 2) !== path[0].prefix;
	  });
	  const newLink = node.Links.find(link => (link.Name || '').substring(0, 2) === path[0].prefix);
	  if (!newLink) {
	    throw new Error(`No link found with prefix ${ path[0].prefix }`);
	  }
	  parentLinks.push(newLink);
	  return updateHamtDirectory(context, parentLinks, path[0].bucket, options);
	};
	const addFileToShardedDirectory = async (context, options) => {
	  const file = {
	    name: options.name,
	    cid: options.cid,
	    size: options.size
	  };
	  if (!options.parent.Data) {
	    throw errCode$q(new Error('Parent node with no data passed to addFileToShardedDirectory'), 'ERR_INVALID_PARENT');
	  }
	  const rootBucket = await recreateInitialHamtLevel(options.parent.Links);
	  const node = UnixFS.unmarshal(options.parent.Data);
	  const shard = new DirSharded({
	    root: true,
	    dir: true,
	    parent: undefined,
	    parentKey: undefined,
	    path: '',
	    dirty: true,
	    flat: false,
	    mode: node.mode
	  }, options);
	  shard._bucket = rootBucket;
	  if (node.mtime) {
	    shard.mtime = { secs: Math.round(Date.now() / 1000) };
	  }
	  const position = await rootBucket._findNewBucketAndPos(file.name);
	  const path = toBucketPath(position);
	  path[0].node = options.parent;
	  let index = 0;
	  while (index < path.length) {
	    const segment = path[index];
	    index++;
	    const node = segment.node;
	    if (!node) {
	      throw new Error('Segment had no node');
	    }
	    const link = node.Links.find(link => (link.Name || '').substring(0, 2) === segment.prefix);
	    if (!link) {
	      log$1a(`Link ${ segment.prefix }${ file.name } will be added`);
	      index = path.length;
	      break;
	    }
	    if (link.Name === `${ segment.prefix }${ file.name }`) {
	      log$1a(`Link ${ segment.prefix }${ file.name } will be replaced`);
	      index = path.length;
	      break;
	    }
	    if ((link.Name || '').length > 2) {
	      log$1a(`Link ${ link.Name } ${ link.Hash } will be replaced with a subshard`);
	      index = path.length;
	      break;
	    }
	    log$1a(`Found subshard ${ segment.prefix }`);
	    const block = await context.repo.blocks.get(link.Hash);
	    const subShard = decode$i(block);
	    if (!path[index]) {
	      log$1a(`Loaded new subshard ${ segment.prefix }`);
	      await recreateHamtLevel(context, subShard.Links, rootBucket, segment.bucket, parseInt(segment.prefix, 16));
	      const position = await rootBucket._findNewBucketAndPos(file.name);
	      path.push({
	        bucket: position.bucket,
	        prefix: toPrefix(position.pos),
	        node: subShard
	      });
	      break;
	    }
	    const nextSegment = path[index];
	    await addLinksToHamtBucket(context, subShard.Links, nextSegment.bucket, rootBucket);
	    nextSegment.node = subShard;
	  }
	  await shard._bucket.put(file.name, {
	    size: file.size,
	    cid: file.cid
	  });
	  return {
	    shard,
	    path
	  };
	};
	const toBucketPath = position => {
	  const path = [{
	      bucket: position.bucket,
	      prefix: toPrefix(position.pos)
	    }];
	  let bucket = position.bucket._parent;
	  let positionInBucket = position.bucket._posAtParent;
	  while (bucket) {
	    path.push({
	      bucket,
	      prefix: toPrefix(positionInBucket)
	    });
	    positionInBucket = bucket._posAtParent;
	    bucket = bucket._parent;
	  }
	  path.reverse();
	  return path;
	};

	const log$19 = debug$S('ipfs:mfs:utils:update-tree');
	const defaultOptions$h = { shardSplitThreshold: 1000 };
	async function updateTree(context, trail, options) {
	  options = Object.assign({}, defaultOptions$h, options);
	  log$19('Trail', trail);
	  trail = trail.slice().reverse();
	  let index = 0;
	  let child;
	  for await (const block of context.repo.blocks.getMany(trail.map(node => node.cid))) {
	    const node = decode$i(block);
	    const cid = trail[index].cid;
	    const name = trail[index].name;
	    index++;
	    if (!child) {
	      child = {
	        cid,
	        name,
	        size: block.length
	      };
	      continue;
	    }
	    const result = await addLink(context, {
	      parent: node,
	      name: child.name,
	      cid: child.cid,
	      size: child.size,
	      flush: options.flush,
	      shardSplitThreshold: options.shardSplitThreshold,
	      hashAlg: options.hashAlg,
	      cidVersion: options.cidVersion
	    });
	    child = {
	      cid: result.cid,
	      name,
	      size: result.size
	    };
	  }
	  const {cid} = child;
	  log$19(`Final CID ${ cid }`);
	  return cid;
	}

	const log$18 = debug$S('ipfs:mfs:utils:update-mfs-root');
	async function updateMfsRoot(context, cid, options) {
	  if (options && options.signal && options.signal.aborted) {
	    throw errCode$q(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' });
	  }
	  log$18(`New MFS root will be ${ cid }`);
	  await context.repo.datastore.put(MFS_ROOT_KEY$2, cid.bytes);
	  return cid;
	}

	async function createNode$1(context, type, options) {
	  const metadata = new UnixFS({
	    type,
	    mode: options.mode,
	    mtime: options.mtime
	  });
	  const hasher = await context.hashers.getHasher(options.hashAlg);
	  const node = {
	    Data: metadata.marshal(),
	    Links: []
	  };
	  const buf = encode$k(node);
	  const hash = await hasher.digest(buf);
	  const cid = CID$6.create(options.cidVersion, code$8, hash);
	  if (options.flush) {
	    await context.repo.blocks.put(cid, buf);
	  }
	  return {
	    cid,
	    node
	  };
	}

	const mergeOptions$g = mergeOptions$k.bind({ ignoreUndefined: true });
	const log$17 = debug$S('ipfs:mfs:mkdir');
	const defaultOptions$g = {
	  parents: false,
	  hashAlg: 'sha2-256',
	  cidVersion: 0,
	  shardSplitThreshold: 1000,
	  flush: true
	};
	function createMkdir$1(context) {
	  async function mfsMkdir(path, options = {}) {
	    const opts = mergeOptions$g(defaultOptions$g, options);
	    if (!path) {
	      throw new Error('no path given to Mkdir');
	    }
	    path = path.trim();
	    if (path === '/') {
	      if (opts.parents) {
	        return;
	      }
	      throw errCode$q(new Error('cannot create directory \'/\': Already exists'), 'ERR_INVALID_PATH');
	    }
	    if (path.substring(0, 1) !== '/') {
	      throw errCode$q(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH');
	    }
	    log$17(`Creating ${ path }`);
	    const pathComponents = toPathComponents(path);
	    if (pathComponents[0] === 'ipfs') {
	      throw errCode$q(new Error('path cannot have the prefix \'ipfs\''), 'ERR_INVALID_PATH');
	    }
	    const root = await loadMfsRoot(context, opts);
	    let parent;
	    const trail = [];
	    const emptyDir = await createNode$1(context, 'directory', opts);
	    for (let i = 0; i <= pathComponents.length; i++) {
	      const subPathComponents = pathComponents.slice(0, i);
	      const subPath = `/ipfs/${ root }/${ subPathComponents.join('/') }`;
	      try {
	        parent = await exporter(subPath, context.repo.blocks);
	        if (parent.type !== 'file' && parent.type !== 'directory') {
	          throw errCode$q(new Error(`${ path } was not a UnixFS node`), 'ERR_NOT_UNIXFS');
	        }
	        if (i === pathComponents.length) {
	          if (opts.parents) {
	            return;
	          }
	          throw errCode$q(new Error('file already exists'), 'ERR_ALREADY_EXISTS');
	        }
	        trail.push({
	          name: parent.name,
	          cid: parent.cid
	        });
	      } catch (err) {
	        if (err.code === 'ERR_NOT_FOUND') {
	          if (i < pathComponents.length && !opts.parents) {
	            throw errCode$q(new Error(`Intermediate directory path ${ subPath } does not exist, use the -p flag to create it`), 'ERR_NOT_FOUND');
	          }
	          await addEmptyDir$1(context, subPathComponents[subPathComponents.length - 1], emptyDir, trail[trail.length - 1], trail, opts);
	        } else {
	          throw err;
	        }
	      }
	    }
	    const newRootCid = await updateTree(context, trail, opts);
	    await updateMfsRoot(context, newRootCid, opts);
	  }
	  return withTimeoutOption(mfsMkdir);
	}
	const addEmptyDir$1 = async (context, childName, emptyDir, parent, trail, options) => {
	  log$17(`Adding empty dir called ${ childName } to ${ parent.cid }`);
	  const result = await addLink(context, {
	    parent: parent.node,
	    parentCid: parent.cid,
	    size: 0,
	    cid: emptyDir.cid,
	    name: childName,
	    hashAlg: options.hashAlg,
	    cidVersion: options.cidVersion,
	    flush: options.flush,
	    shardSplitThreshold: options.shardSplitThreshold
	  });
	  trail[trail.length - 1].cid = result.cid;
	  trail.push({
	    name: childName,
	    cid: emptyDir.cid
	  });
	};

	const mergeOptions$f = mergeOptions$k.bind({ ignoreUndefined: true });
	const log$16 = debug$S('ipfs:mfs:cp');
	const defaultOptions$f = {
	  parents: false,
	  flush: true,
	  hashAlg: 'sha2-256',
	  cidVersion: 0,
	  shardSplitThreshold: 1000
	};
	function createCp$1(context) {
	  async function mfsCp(from, to, opts = {}) {
	    const options = mergeOptions$f(defaultOptions$f, opts);
	    if (!Array.isArray(from)) {
	      from = [from];
	    }
	    const sources = await Promise.all(from.map(path => toMfsPath(context, path, options)));
	    let destination = await toMfsPath(context, to, options);
	    if (!sources.length || !destination) {
	      throw errCode$q(new Error('Please supply at least one source'), 'ERR_INVALID_PARAMS');
	    }
	    const missing = sources.find(source => !source.exists);
	    if (missing) {
	      throw errCode$q(new Error(`${ missing.path } does not exist`), 'ERR_INVALID_PARAMS');
	    }
	    const destinationIsDirectory = isDirectory(destination);
	    if (destination.exists) {
	      log$16('Destination exists');
	      if (sources.length === 1 && !destinationIsDirectory) {
	        throw errCode$q(new Error('directory already has entry by that name'), 'ERR_ALREADY_EXISTS');
	      }
	    } else {
	      log$16('Destination does not exist');
	      if (sources.length > 1) {
	        if (!options.parents) {
	          throw errCode$q(new Error('destination did not exist, pass -p to create intermediate directories'), 'ERR_INVALID_PARAMS');
	        }
	        await createMkdir$1(context)(destination.path, options);
	        destination = await toMfsPath(context, destination.path, options);
	      } else if (destination.parts.length > 1) {
	        const parentFolder = `/${ destination.parts.slice(0, -1).join('/') }`;
	        try {
	          await createStat$7(context)(parentFolder, options);
	        } catch (err) {
	          if (err.code !== 'ERR_NOT_FOUND') {
	            throw err;
	          }
	          if (!options.parents) {
	            throw errCode$q(new Error('destination did not exist, pass -p to create intermediate directories'), 'ERR_INVALID_PARAMS');
	          }
	          await createMkdir$1(context)(parentFolder, options);
	          destination = await toMfsPath(context, destination.path, options);
	        }
	      }
	    }
	    const destinationPath = isDirectory(destination) ? destination.mfsPath : destination.mfsDirectory;
	    const trail = await toTrail(context, destinationPath);
	    if (sources.length === 1) {
	      const source = sources.pop();
	      if (!source) {
	        throw errCode$q(new Error('could not find source'), 'ERR_INVALID_PARAMS');
	      }
	      const destinationName = destinationIsDirectory ? source.name : destination.name;
	      log$16(`Only one source, copying to destination ${ destinationIsDirectory ? 'directory' : 'file' } ${ destinationName }`);
	      return copyToFile(context, source, destinationName, trail, options);
	    }
	    log$16('Multiple sources, wrapping in a directory');
	    return copyToDirectory(context, sources, destination, trail, options);
	  }
	  return withTimeoutOption(mfsCp);
	}
	const isDirectory = destination => {
	  return destination.unixfs && destination.unixfs.type && destination.unixfs.type.includes('directory');
	};
	const copyToFile = async (context, source, destination, destinationTrail, options) => {
	  let parent = destinationTrail.pop();
	  if (!parent) {
	    throw errCode$q(new Error('destination had no parent'), 'ERR_INVALID_PARAMS');
	  }
	  parent = await addSourceToParent(context, source, destination, parent, options);
	  destinationTrail.push(parent);
	  const newRootCid = await updateTree(context, destinationTrail, options);
	  await updateMfsRoot(context, newRootCid, options);
	};
	const copyToDirectory = async (context, sources, destination, destinationTrail, options) => {
	  for (let i = 0; i < sources.length; i++) {
	    const source = sources[i];
	    destination = await addSourceToParent(context, source, source.name, destination, options);
	  }
	  destinationTrail[destinationTrail.length - 1] = destination;
	  const newRootCid = await updateTree(context, destinationTrail, options);
	  await updateMfsRoot(context, newRootCid, options);
	};
	const addSourceToParent = async (context, source, childName, parent, options) => {
	  const sourceBlock = await context.repo.blocks.get(source.cid);
	  const {node, cid, size} = await addLink(context, {
	    parentCid: parent.cid,
	    size: sourceBlock.length,
	    cid: source.cid,
	    name: childName,
	    hashAlg: options.hashAlg,
	    cidVersion: options.cidVersion,
	    flush: options.flush,
	    shardSplitThreshold: options.shardSplitThreshold
	  });
	  parent.node = node;
	  parent.cid = cid;
	  parent.size = size;
	  return parent;
	};

	const log$15 = debug$S('ipfs:mfs:core:utils:remove-link');
	async function removeLink(context, options) {
	  let parent = options.parent;
	  if (options.parentCid) {
	    const parentCid = CID$6.asCID(options.parentCid);
	    if (parentCid === null) {
	      throw errCode$q(new Error('Invalid CID passed to removeLink'), 'EINVALIDPARENTCID');
	    }
	    log$15(`Loading parent node ${ parentCid }`);
	    const block = await context.repo.blocks.get(parentCid);
	    parent = decode$i(block);
	  }
	  if (!parent) {
	    throw errCode$q(new Error('No parent node or CID passed to removeLink'), 'EINVALIDPARENT');
	  }
	  if (!options.name) {
	    throw errCode$q(new Error('No child name passed to removeLink'), 'EINVALIDCHILDNAME');
	  }
	  if (!parent.Data) {
	    throw errCode$q(new Error('Parent node had no data'), 'ERR_INVALID_NODE');
	  }
	  const meta = UnixFS.unmarshal(parent.Data);
	  if (meta.type === 'hamt-sharded-directory') {
	    log$15(`Removing ${ options.name } from sharded directory`);
	    return removeFromShardedDirectory(context, {
	      ...options,
	      parent
	    });
	  }
	  log$15(`Removing link ${ options.name } regular directory`);
	  return removeFromDirectory(context, {
	    ...options,
	    parent
	  });
	}
	const removeFromDirectory = async (context, options) => {
	  options.parent.Links = options.parent.Links.filter(link => {
	    return link.Name !== options.name;
	  });
	  const parentBlock = await encode$k(options.parent);
	  const hasher = await context.hashers.getHasher(options.hashAlg);
	  const hash = await hasher.digest(parentBlock);
	  const parentCid = CID$6.create(options.cidVersion, code$8, hash);
	  await context.repo.blocks.put(parentCid, parentBlock);
	  log$15(`Updated regular directory ${ parentCid }`);
	  return {
	    node: options.parent,
	    cid: parentCid
	  };
	};
	const removeFromShardedDirectory = async (context, options) => {
	  const {rootBucket, path} = await generatePath(context, options.name, options.parent);
	  await rootBucket.del(options.name);
	  const {node} = await updateShard(context, path, options.name, options);
	  return updateHamtDirectory(context, node.Links, rootBucket, options);
	};
	const updateShard = async (context, positions, name, options) => {
	  const last = positions.pop();
	  if (!last) {
	    throw errCode$q(new Error('Could not find parent'), 'EINVALIDPARENT');
	  }
	  const {bucket, prefix, node} = last;
	  if (!node) {
	    throw errCode$q(new Error('Could not find parent'), 'EINVALIDPARENT');
	  }
	  const link = node.Links.find(link => (link.Name || '').substring(0, 2) === prefix);
	  if (!link) {
	    throw errCode$q(new Error(`No link found with prefix ${ prefix } for file ${ name }`), 'ERR_NOT_FOUND');
	  }
	  if (link.Name === `${ prefix }${ name }`) {
	    log$15(`Removing existing link ${ link.Name }`);
	    const links = node.Links.filter(nodeLink => {
	      return nodeLink.Name !== link.Name;
	    });
	    await bucket.del(name);
	    return updateHamtDirectory(context, links, bucket, options);
	  }
	  log$15(`Descending into sub-shard ${ link.Name } for ${ prefix }${ name }`);
	  const result = await updateShard(context, positions, name, options);
	  let cid = result.cid;
	  let size = result.size;
	  let newName = prefix;
	  if (result.node.Links.length === 1) {
	    log$15(`Removing subshard for ${ prefix }`);
	    const link = result.node.Links[0];
	    newName = `${ prefix }${ (link.Name || '').substring(2) }`;
	    cid = link.Hash;
	    size = link.Tsize || 0;
	  }
	  log$15(`Updating shard ${ prefix } with name ${ newName }`);
	  return updateShardParent(context, bucket, node, prefix, newName, size, cid, options);
	};
	const updateShardParent = (context, bucket, parent, oldName, newName, size, cid, options) => {
	  const parentLinks = parent.Links.filter(link => {
	    return link.Name !== oldName;
	  });
	  parentLinks.push({
	    Name: newName,
	    Tsize: size,
	    Hash: cid
	  });
	  return updateHamtDirectory(context, parentLinks, bucket, options);
	};

	const mergeOptions$e = mergeOptions$k.bind({ ignoreUndefined: true });
	const defaultOptions$e = {
	  recursive: false,
	  cidVersion: 0,
	  hashAlg: 'sha2-256',
	  flush: true,
	  shardSplitThreshold: 1000
	};
	function createRm$8(context) {
	  async function mfsRm(paths, opts = {}) {
	    const options = mergeOptions$e(defaultOptions$e, opts);
	    if (!Array.isArray(paths)) {
	      paths = [paths];
	    }
	    const sources = await Promise.all(paths.map(path => toMfsPath(context, path, options)));
	    if (!sources.length) {
	      throw errCode$q(new Error('Please supply at least one path to remove'), 'ERR_INVALID_PARAMS');
	    }
	    sources.forEach(source => {
	      if (source.path === '/') {
	        throw errCode$q(new Error('Cannot delete root'), 'ERR_INVALID_PARAMS');
	      }
	    });
	    for (const source of sources) {
	      await removePath(context, source.path, options);
	    }
	  }
	  return withTimeoutOption(mfsRm);
	}
	const removePath = async (context, path, options) => {
	  const mfsPath = await toMfsPath(context, path, options);
	  const trail = await toTrail(context, mfsPath.mfsPath);
	  const child = trail[trail.length - 1];
	  trail.pop();
	  const parent = trail[trail.length - 1];
	  if (!parent) {
	    throw errCode$q(new Error(`${ path } does not exist`), 'ERR_NOT_FOUND');
	  }
	  if (child.type === 'directory' && !options.recursive) {
	    throw errCode$q(new Error(`${ path } is a directory, use -r to remove directories`), 'ERR_WAS_DIR');
	  }
	  const {cid} = await removeLink(context, {
	    parentCid: parent.cid,
	    name: child.name,
	    hashAlg: options.hashAlg,
	    cidVersion: options.cidVersion,
	    flush: options.flush,
	    shardSplitThreshold: options.shardSplitThreshold
	  });
	  parent.cid = cid;
	  const newRootCid = await updateTree(context, trail, options);
	  await updateMfsRoot(context, newRootCid, options);
	};

	const mergeOptions$d = mergeOptions$k.bind({ ignoreUndefined: true });
	const log$14 = debug$S('ipfs:mfs:touch');
	const defaultOptions$d = {
	  flush: true,
	  shardSplitThreshold: 1000,
	  hashAlg: 'sha2-256',
	  cidVersion: 0,
	  recursive: false
	};
	function calculateModification(mode, originalMode, isDirectory) {
	  let modification = 0;
	  if (mode.includes('x') || mode.includes('X') && (isDirectory || (originalMode & 1 || originalMode & 8 || originalMode & 64))) {
	    modification += 1;
	  }
	  if (mode.includes('w')) {
	    modification += 2;
	  }
	  if (mode.includes('r')) {
	    modification += 4;
	  }
	  return modification;
	}
	function calculateUGO(references, modification) {
	  let ugo = 0;
	  if (references.includes('u')) {
	    ugo += modification << 6;
	  }
	  if (references.includes('g')) {
	    ugo += modification << 3;
	  }
	  if (references.includes('o')) {
	    ugo += modification;
	  }
	  return ugo;
	}
	function calculateSpecial(references, mode, modification) {
	  if (mode.includes('t')) {
	    modification += parseInt('1000', 8);
	  }
	  if (mode.includes('s')) {
	    if (references.includes('u')) {
	      modification += parseInt('4000', 8);
	    }
	    if (references.includes('g')) {
	      modification += parseInt('2000', 8);
	    }
	  }
	  return modification;
	}
	function parseSymbolicMode(input, originalMode, isDirectory) {
	  if (!originalMode) {
	    originalMode = 0;
	  }
	  const match = input.match(/^(u?g?o?a?)(-?\+?=?)?(r?w?x?X?s?t?)$/);
	  if (!match) {
	    throw new Error(`Invalid file mode: ${ input }`);
	  }
	  let [, references, operator, mode] = match;
	  if (references === 'a' || !references) {
	    references = 'ugo';
	  }
	  let modification = calculateModification(mode, originalMode, isDirectory);
	  modification = calculateUGO(references, modification);
	  modification = calculateSpecial(references, mode, modification);
	  if (operator === '=') {
	    if (references.includes('u')) {
	      originalMode = originalMode & parseInt('7077', 8);
	      originalMode = originalMode | modification;
	    }
	    if (references.includes('g')) {
	      originalMode = originalMode & parseInt('7707', 8);
	      originalMode = originalMode | modification;
	    }
	    if (references.includes('o')) {
	      originalMode = originalMode & parseInt('7770', 8);
	      originalMode = originalMode | modification;
	    }
	    return originalMode;
	  }
	  if (operator === '+') {
	    return modification | originalMode;
	  }
	  if (operator === '-') {
	    return modification ^ originalMode;
	  }
	  return originalMode;
	}
	function calculateMode(mode, metadata) {
	  if (mode instanceof String || typeof mode === 'string') {
	    const strMode = `${ mode }`;
	    if (strMode.match(/^\d+$/g)) {
	      mode = parseInt(strMode, 8);
	    } else {
	      mode = 0 + strMode.split(',').reduce((curr, acc) => {
	        return parseSymbolicMode(acc, curr, metadata.isDirectory());
	      }, metadata.mode || 0);
	    }
	  }
	  return mode;
	}
	function createChmod$1(context) {
	  async function mfsChmod(path, mode, options = {}) {
	    const opts = mergeOptions$d(defaultOptions$d, options);
	    log$14(`Fetching stats for ${ path }`);
	    const {cid, mfsDirectory, name} = await toMfsPath(context, path, opts);
	    if (cid.code !== code$8) {
	      throw errCode$q(new Error(`${ path } was not a UnixFS node`), 'ERR_NOT_UNIXFS');
	    }
	    if (opts.recursive) {
	      const root = await pipe_1(async function* () {
	        for await (const entry of recursive(cid, context.repo.blocks)) {
	          if (entry.type !== 'file' && entry.type !== 'directory') {
	            throw errCode$q(new Error(`${ path } was not a UnixFS node`), 'ERR_NOT_UNIXFS');
	          }
	          entry.unixfs.mode = calculateMode(mode, entry.unixfs);
	          const node = prepare({
	            Data: entry.unixfs.marshal(),
	            Links: entry.node.Links
	          });
	          yield {
	            path: entry.path,
	            content: node
	          };
	        }
	      }, source => importer(source, context.repo.blocks, {
	        ...opts,
	        pin: false,
	        dagBuilder: async function* (source, block, opts) {
	          for await (const entry of source) {
	            yield async function () {
	              const node = entry.content;
	              const buf = encode$k(node);
	              const cid = await persist(buf, block, opts);
	              if (!node.Data) {
	                throw errCode$q(new Error(`${ cid } had no data`), 'ERR_INVALID_NODE');
	              }
	              const unixfs = UnixFS.unmarshal(node.Data);
	              return {
	                cid,
	                size: buf.length,
	                path: entry.path,
	                unixfs
	              };
	            };
	          }
	        }
	      }), nodes => itLast(nodes));
	      if (!root) {
	        throw errCode$q(new Error(`Could not chmod ${ path }`), 'ERR_COULD_NOT_CHMOD');
	      }
	      await createRm$8(context)(path, opts);
	      await createCp$1(context)(`/ipfs/${ root.cid }`, path, opts);
	      return;
	    }
	    const block = await context.repo.blocks.get(cid);
	    const node = decode$i(block);
	    if (!node.Data) {
	      throw errCode$q(new Error(`${ cid } had no data`), 'ERR_INVALID_NODE');
	    }
	    const metadata = UnixFS.unmarshal(node.Data);
	    metadata.mode = calculateMode(mode, metadata);
	    const updatedBlock = encode$k({
	      Data: metadata.marshal(),
	      Links: node.Links
	    });
	    const hashAlg = opts.hashAlg || defaultOptions$d.hashAlg;
	    const hasher = await context.hashers.getHasher(hashAlg);
	    const hash = await hasher.digest(updatedBlock);
	    const updatedCid = CID$6.create(opts.cidVersion, code$8, hash);
	    if (opts.flush) {
	      await context.repo.blocks.put(updatedCid, updatedBlock);
	    }
	    const trail = await toTrail(context, mfsDirectory);
	    const parent = trail[trail.length - 1];
	    const parentCid = CID$6.decode(parent.cid.bytes);
	    const parentBlock = await context.repo.blocks.get(parentCid);
	    const parentNode = decode$i(parentBlock);
	    const result = await addLink(context, {
	      parent: parentNode,
	      name: name,
	      cid: updatedCid,
	      size: updatedBlock.length,
	      flush: opts.flush,
	      hashAlg,
	      cidVersion: cid.version,
	      shardSplitThreshold: Infinity
	    });
	    parent.cid = result.cid;
	    const newRootCid = await updateTree(context, trail, opts);
	    await updateMfsRoot(context, newRootCid, opts);
	  }
	  return withTimeoutOption(mfsChmod);
	}

	const mergeOptions$c = mergeOptions$k.bind({ ignoreUndefined: true });
	const defaultOptions$c = {};
	function createFlush$1(context) {
	  async function mfsFlush(path, options = {}) {
	    options = mergeOptions$c(defaultOptions$c, options);
	    const {cid} = await createStat$7(context)(path, options);
	    return cid;
	  }
	  return withTimeoutOption(mfsFlush);
	}

	const mergeOptions$b = mergeOptions$k.bind({ ignoreUndefined: true });
	const defaultOptions$b = {
	  parents: false,
	  flush: true,
	  cidVersion: 0,
	  hashAlg: 'sha2-256',
	  shardSplitThreshold: 1000
	};
	function createMv$1(context) {
	  async function mfsMv(from, to, options = {}) {
	    const opts = mergeOptions$b(defaultOptions$b, options);
	    await createCp$1(context)(from, to, opts);
	    await createRm$8(context)(from, {
	      ...opts,
	      recursive: true
	    });
	  }
	  return withTimeoutOption(mfsMv);
	}

	const mergeOptions$a = mergeOptions$k.bind({ ignoreUndefined: true });
	const log$13 = debug$S('ipfs:mfs:touch');
	const defaultOptions$a = {
	  flush: true,
	  shardSplitThreshold: 1000,
	  cidVersion: 0,
	  hashAlg: 'sha2-256'
	};
	function createTouch$1(context) {
	  async function mfsTouch(path, options = {}) {
	    const settings = mergeOptions$a(defaultOptions$a, options);
	    settings.mtime = settings.mtime || new Date();
	    log$13(`Touching ${ path } mtime: ${ settings.mtime }`);
	    const {cid, mfsDirectory, name, exists} = await toMfsPath(context, path, settings);
	    const hashAlg = options.hashAlg || defaultOptions$a.hashAlg;
	    const hasher = await context.hashers.getHasher(hashAlg);
	    let updatedBlock;
	    let updatedCid;
	    let cidVersion = settings.cidVersion;
	    if (!exists) {
	      const metadata = new UnixFS({
	        type: 'file',
	        mtime: settings.mtime
	      });
	      updatedBlock = encode$k({
	        Data: metadata.marshal(),
	        Links: []
	      });
	      const hash = await hasher.digest(updatedBlock);
	      updatedCid = CID$6.create(settings.cidVersion, code$8, hash);
	      if (settings.flush) {
	        await context.repo.blocks.put(updatedCid, updatedBlock);
	      }
	    } else {
	      if (cid.code !== code$8) {
	        throw errCode$q(new Error(`${ path } was not a UnixFS node`), 'ERR_NOT_UNIXFS');
	      }
	      cidVersion = cid.version;
	      const block = await context.repo.blocks.get(cid);
	      const node = decode$i(block);
	      if (!node.Data) {
	        throw errCode$q(new Error(`${ path } had no data`), 'ERR_INVALID_NODE');
	      }
	      const metadata = UnixFS.unmarshal(node.Data);
	      metadata.mtime = settings.mtime;
	      updatedBlock = encode$k({
	        Data: metadata.marshal(),
	        Links: node.Links
	      });
	      const hash = await hasher.digest(updatedBlock);
	      updatedCid = CID$6.create(settings.cidVersion, code$8, hash);
	      if (settings.flush) {
	        await context.repo.blocks.put(updatedCid, updatedBlock);
	      }
	    }
	    const trail = await toTrail(context, mfsDirectory);
	    const parent = trail[trail.length - 1];
	    const parentCid = parent.cid;
	    const parentBlock = await context.repo.blocks.get(parentCid);
	    const parentNode = decode$i(parentBlock);
	    const result = await addLink(context, {
	      parent: parentNode,
	      name: name,
	      cid: updatedCid,
	      size: updatedBlock.length,
	      flush: settings.flush,
	      shardSplitThreshold: settings.shardSplitThreshold,
	      hashAlg: settings.hashAlg,
	      cidVersion
	    });
	    parent.cid = result.cid;
	    const newRootCid = await updateTree(context, trail, settings);
	    await updateMfsRoot(context, newRootCid, settings);
	  }
	  return withTimeoutOption(mfsTouch);
	}

	const mergeOptions$9 = mergeOptions$k.bind({ ignoreUndefined: true });
	const defaultOptions$9 = {
	  offset: 0,
	  length: Infinity
	};
	function createRead$1(context) {
	  function mfsRead(path, options = {}) {
	    options = mergeOptions$9(defaultOptions$9, options);
	    return {
	      [Symbol.asyncIterator]: async function* read() {
	        const mfsPath = await toMfsPath(context, path, options);
	        const result = await exporter(mfsPath.mfsPath, context.repo.blocks);
	        if (result.type !== 'file') {
	          throw errCode$q(new Error(`${ path } was not a file`), 'ERR_NOT_FILE');
	        }
	        if (!result.content) {
	          throw errCode$q(new Error(`Could not load content stream from ${ path }`), 'ERR_NO_CONTENT');
	        }
	        for await (const buf of result.content({
	            offset: options.offset,
	            length: options.length
	          })) {
	          yield buf;
	        }
	      }
	    };
	  }
	  return withTimeoutOption(mfsRead);
	}

	const log$12 = debug$S('ipfs:mfs:utils:to-async-iterator');
	function toAsyncIterator(content) {
	  if (!content) {
	    throw errCode$q(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH');
	  }
	  if (typeof content === 'string' || content instanceof String) {
	    log$12('Content was a string');
	    content = fromString$4(content.toString());
	  }
	  if (content.length) {
	    log$12('Content was array-like');
	    return {
	      [Symbol.asyncIterator]: function* bufferContent() {
	        yield content;
	      }
	    };
	  }
	  if (content[Symbol.asyncIterator]) {
	    log$12('Content was an async iterator');
	    return content;
	  }
	  if (content[Symbol.iterator]) {
	    log$12('Content was an iterator');
	    return content;
	  }
	  if (global$1.Blob && content instanceof global$1.Blob) {
	    log$12('Content was an HTML5 Blob');
	    let index = 0;
	    const iterator = {
	      next: () => {
	        if (index > content.size) {
	          return { done: true };
	        }
	        return new Promise((resolve, reject) => {
	          const chunk = content.slice(index, MFS_MAX_CHUNK_SIZE);
	          index += MFS_MAX_CHUNK_SIZE;
	          const reader = new global$1.FileReader();
	          const handleLoad = ev => {
	            reader.removeEventListener('loadend', handleLoad, false);
	            if (ev.error) {
	              return reject(ev.error);
	            }
	            resolve({
	              done: false,
	              value: new Uint8Array(reader.result)
	            });
	          };
	          reader.addEventListener('loadend', handleLoad);
	          reader.readAsArrayBuffer(chunk);
	        });
	      }
	    };
	    return {
	      [Symbol.asyncIterator]: () => {
	        return iterator;
	      }
	    };
	  }
	  throw errCode$q(new Error(`Don't know how to convert ${ content } into an async iterator`), 'ERR_INVALID_PARAMS');
	}

	const mergeOptions$8 = mergeOptions$k.bind({ ignoreUndefined: true });
	const log$11 = debug$S('ipfs:mfs:write');
	const defaultOptions$8 = {
	  offset: 0,
	  length: Infinity,
	  create: false,
	  truncate: false,
	  rawLeaves: false,
	  reduceSingleLeafToSelf: false,
	  cidVersion: 0,
	  hashAlg: 'sha2-256',
	  parents: false,
	  progress: (bytes, path) => {
	  },
	  strategy: 'trickle',
	  flush: true,
	  leafType: 'raw',
	  shardSplitThreshold: 1000
	};
	function createWrite$1(context) {
	  async function mfsWrite(path, content, opts = {}) {
	    const options = mergeOptions$8(defaultOptions$8, opts);
	    let source;
	    let destination;
	    let parent;
	    log$11('Reading source, destination and parent');
	    await createLock().readLock(async () => {
	      source = await toAsyncIterator(content);
	      destination = await toMfsPath(context, path, options);
	      parent = await toMfsPath(context, destination.mfsDirectory, options);
	    })();
	    log$11('Read source, destination and parent');
	    if (!options.parents && !parent.exists) {
	      throw errCode$q(new Error('directory does not exist'), 'ERR_NO_EXIST');
	    }
	    if (source == null) {
	      throw errCode$q(new Error('could not create source'), 'ERR_NO_SOURCE');
	    }
	    if (destination == null) {
	      throw errCode$q(new Error('could not create destination'), 'ERR_NO_DESTINATION');
	    }
	    if (!options.create && !destination.exists) {
	      throw errCode$q(new Error('file does not exist'), 'ERR_NO_EXIST');
	    }
	    if (destination.entryType !== 'file') {
	      throw errCode$q(new Error('not a file'), 'ERR_NOT_A_FILE');
	    }
	    return updateOrImport(context, path, source, destination, options);
	  }
	  return withTimeoutOption(mfsWrite);
	}
	const updateOrImport = async (context, path, source, destination, options) => {
	  const child = await write$1(context, source, destination, options);
	  await createLock().writeLock(async () => {
	    const pathComponents = toPathComponents(path);
	    const fileName = pathComponents.pop();
	    if (fileName == null) {
	      throw errCode$q(new Error('source does not exist'), 'ERR_NO_EXIST');
	    }
	    let parentExists = false;
	    try {
	      await createStat$7(context)(`/${ pathComponents.join('/') }`, options);
	      parentExists = true;
	    } catch (err) {
	      if (err.code !== 'ERR_NOT_FOUND') {
	        throw err;
	      }
	    }
	    if (!parentExists) {
	      await createMkdir$1(context)(`/${ pathComponents.join('/') }`, options);
	    }
	    const updatedPath = await toMfsPath(context, path, options);
	    const trail = await toTrail(context, updatedPath.mfsDirectory);
	    const parent = trail[trail.length - 1];
	    if (!parent) {
	      throw errCode$q(new Error('directory does not exist'), 'ERR_NO_EXIST');
	    }
	    if (!parent.type || !parent.type.includes('directory')) {
	      throw errCode$q(new Error(`cannot write to ${ parent.name }: Not a directory`), 'ERR_NOT_A_DIRECTORY');
	    }
	    const parentBlock = await context.repo.blocks.get(parent.cid);
	    const parentNode = decode$i(parentBlock);
	    const result = await addLink(context, {
	      parent: parentNode,
	      name: fileName,
	      cid: child.cid,
	      size: child.size,
	      flush: options.flush,
	      shardSplitThreshold: options.shardSplitThreshold,
	      hashAlg: options.hashAlg,
	      cidVersion: options.cidVersion
	    });
	    parent.cid = result.cid;
	    const newRootCid = await updateTree(context, trail, options);
	    await updateMfsRoot(context, newRootCid, options);
	  })();
	};
	const write$1 = async (context, source, destination, options) => {
	  if (destination.exists) {
	    log$11(`Overwriting file ${ destination.cid } offset ${ options.offset } length ${ options.length }`);
	  } else {
	    log$11(`Writing file offset ${ options.offset } length ${ options.length }`);
	  }
	  const sources = [];
	  if (options.offset > 0) {
	    if (destination.unixfs) {
	      log$11(`Writing first ${ options.offset } bytes of original file`);
	      sources.push(() => {
	        return destination.content({
	          offset: 0,
	          length: options.offset
	        });
	      });
	      if (destination.unixfs.fileSize() < options.offset) {
	        const extra = options.offset - destination.unixfs.fileSize();
	        log$11(`Writing zeros for extra ${ extra } bytes`);
	        sources.push(asyncZeroes(extra));
	      }
	    } else {
	      log$11(`Writing zeros for first ${ options.offset } bytes`);
	      sources.push(asyncZeroes(options.offset));
	    }
	  }
	  sources.push(limitAsyncStreamBytes(source, options.length));
	  const content = countBytesStreamed(catAsyncIterators(sources), bytesWritten => {
	    if (destination.unixfs && !options.truncate) {
	      const fileSize = destination.unixfs.fileSize();
	      if (fileSize > bytesWritten) {
	        log$11(`Writing last ${ fileSize - bytesWritten } of ${ fileSize } bytes from original file starting at offset ${ bytesWritten }`);
	        return destination.content({ offset: bytesWritten });
	      } else {
	        log$11('Not writing last bytes from original file');
	      }
	    }
	    return {
	      [Symbol.asyncIterator]: async function* () {
	      }
	    };
	  });
	  let mode;
	  if (options.mode !== undefined && options.mode !== null) {
	    mode = parseMode(options.mode);
	  } else if (destination && destination.unixfs) {
	    mode = destination.unixfs.mode;
	  }
	  let mtime;
	  if (options.mtime != null) {
	    mtime = parseMtime$1(options.mtime);
	  } else if (destination && destination.unixfs) {
	    mtime = destination.unixfs.mtime;
	  }
	  const hasher = await context.hashers.getHasher(options.hashAlg);
	  const result = await itLast(importer([{
	      content: content,
	      mode,
	      mtime
	    }], context.repo.blocks, {
	    progress: options.progress,
	    hasher,
	    cidVersion: options.cidVersion,
	    strategy: options.strategy,
	    rawLeaves: options.rawLeaves,
	    reduceSingleLeafToSelf: options.reduceSingleLeafToSelf,
	    leafType: options.leafType
	  }));
	  if (!result) {
	    throw errCode$q(new Error(`cannot write to ${ parent.name }`), 'ERR_COULD_NOT_WRITE');
	  }
	  log$11(`Wrote ${ result.cid }`);
	  return {
	    cid: result.cid,
	    size: result.size
	  };
	};
	const limitAsyncStreamBytes = (stream, limit) => {
	  return async function* _limitAsyncStreamBytes() {
	    let emitted = 0;
	    for await (const buf of stream) {
	      emitted += buf.length;
	      if (emitted > limit) {
	        yield buf.slice(0, limit - emitted);
	        return;
	      }
	      yield buf;
	    }
	  };
	};
	const asyncZeroes = (count, chunkSize = MFS_MAX_CHUNK_SIZE) => {
	  const buf = new Uint8Array(chunkSize);
	  async function* _asyncZeroes() {
	    while (true) {
	      yield buf.slice();
	    }
	  }
	  return limitAsyncStreamBytes(_asyncZeroes(), count);
	};
	const catAsyncIterators = async function* (sources) {
	  for (let i = 0; i < sources.length; i++) {
	    yield* sources[i]();
	  }
	};
	const countBytesStreamed = async function* (source, notify) {
	  let wrote = 0;
	  for await (const buf of source) {
	    wrote += buf.length;
	    yield buf;
	  }
	  for await (const buf of notify(wrote)) {
	    wrote += buf.length;
	    yield buf;
	  }
	};

	const toOutput = fsEntry => {
	  const output = {
	    cid: fsEntry.cid,
	    name: fsEntry.name,
	    type: fsEntry.type === 'directory' ? 'directory' : 'file',
	    size: fsEntry.size
	  };
	  if (fsEntry.type === 'file' || fsEntry.type === 'directory') {
	    output.mode = fsEntry.unixfs.mode;
	    output.mtime = fsEntry.unixfs.mtime;
	  }
	  return output;
	};
	function createLs$7(context) {
	  async function* mfsLs(path, options = {}) {
	    const mfsPath = await toMfsPath(context, path, options);
	    const fsEntry = await exporter(mfsPath.mfsPath, context.repo.blocks);
	    if (fsEntry.type === 'directory') {
	      yield* itMap(fsEntry.content(options), toOutput);
	      return;
	    }
	    yield toOutput(fsEntry);
	  }
	  return withTimeoutOption(mfsLs);
	}

	const readOperations = { stat: createStat$7 };
	const writeOperations = {
	  chmod: createChmod$1,
	  cp: createCp$1,
	  flush: createFlush$1,
	  mkdir: createMkdir$1,
	  mv: createMv$1,
	  rm: createRm$8,
	  touch: createTouch$1
	};
	const unwrappedOperations = {
	  write: createWrite$1,
	  read: createRead$1,
	  ls: createLs$7
	};
	const wrap = ({options, mfs, operations, lock}) => {
	  Object.keys(operations).forEach(key => {
	    mfs[key] = lock(operations[key](options));
	  });
	};
	const defaultOptions$7 = {
	  repoOwner: true,
	  repo: null
	};
	function createMfs(options) {
	  const {repoOwner} = Object.assign({}, defaultOptions$7 || {}, options);
	  const lock = createLock(repoOwner);
	  const readLock = operation => {
	    return lock.readLock(operation);
	  };
	  const writeLock = operation => {
	    return lock.writeLock(operation);
	  };
	  const mfs = {};
	  wrap({
	    options,
	    mfs,
	    operations: readOperations,
	    lock: readLock
	  });
	  wrap({
	    options,
	    mfs,
	    operations: writeOperations,
	    lock: writeLock
	  });
	  Object.keys(unwrappedOperations).forEach(key => {
	    mfs[key] = unwrappedOperations[key](options);
	  });
	  return mfs;
	}
	function createFiles$1({
	  repo,
	  preload,
	  hashers,
	  options: constructorOptions
	}) {
	  const methods = createMfs({
	    repo,
	    repoOwner: Boolean(constructorOptions.repoOwner),
	    hashers
	  });
	  const withPreload = fn => {
	    const wrapped = (...args) => {
	      const paths = args.filter(arg => src$q.ipfsPath(arg) || src$q.cid(arg));
	      if (paths.length) {
	        const options = args[args.length - 1];
	        if (options && options.preload !== false) {
	          paths.forEach(path => preload(path));
	        }
	      }
	      return fn(...args);
	    };
	    return wrapped;
	  };
	  return {
	    ...methods,
	    chmod: methods.chmod,
	    cp: withPreload(methods.cp),
	    mkdir: methods.mkdir,
	    stat: withPreload(methods.stat),
	    rm: methods.rm,
	    read: withPreload(methods.read),
	    touch: methods.touch,
	    write: methods.write,
	    mv: withPreload(methods.mv),
	    flush: methods.flush,
	    ls: withPreload(async function* (...args) {
	      for await (const file of methods.ls(...args)) {
	        yield {
	          ...file,
	          size: file.size || 0
	        };
	      }
	    })
	  };
	}

	function createExport$2({keychain}) {
	  const exportKey = (name, password) => keychain.exportKey(name, password);
	  return withTimeoutOption(exportKey);
	}

	const DEFAULT_KEY_TYPE = 'ed25519';
	const DEFAULT_KEY_SIZE = 2048;
	function createGen$1({keychain}) {
	  const gen = (name, options = {
	    type: DEFAULT_KEY_TYPE,
	    size: DEFAULT_KEY_SIZE
	  }) => {
	    return keychain.createKey(name, options.type || DEFAULT_KEY_TYPE, options.size || DEFAULT_KEY_SIZE);
	  };
	  return withTimeoutOption(gen);
	}

	function createImport$2({keychain}) {
	  const importKey = (name, pem, password) => {
	    return keychain.importKey(name, pem, password);
	  };
	  return withTimeoutOption(importKey);
	}

	function createInfo$1({keychain}) {
	  const info = name => keychain.findKeyByName(name);
	  return withTimeoutOption(info);
	}

	function createList$3({keychain}) {
	  const list = () => keychain.listKeys();
	  return withTimeoutOption(list);
	}

	function createRename$1({keychain}) {
	  const rename = async (oldName, newName) => {
	    const key = await keychain.renameKey(oldName, newName);
	    return {
	      was: oldName,
	      now: key.name,
	      id: key.id,
	      overwrite: false
	    };
	  };
	  return withTimeoutOption(rename);
	}

	function createRm$7({keychain}) {
	  const rm = name => keychain.removeKey(name);
	  return withTimeoutOption(rm);
	}

	class KeyAPI {
	  constructor({keychain}) {
	    this.gen = createGen$1({ keychain });
	    this.list = createList$3({ keychain });
	    this.rm = createRm$7({ keychain });
	    this.rename = createRename$1({ keychain });
	    this.export = createExport$2({ keychain });
	    this.import = createImport$2({ keychain });
	    this.info = createInfo$1({ keychain });
	  }
	}

	function createGet$6({repo, preload}) {
	  async function get(cid, options = {}) {
	    if (options.preload !== false) {
	      preload(cid);
	    }
	    const block = await repo.blocks.get(cid, options);
	    return decode$i(block);
	  }
	  return withTimeoutOption(get);
	}

	function createData$1({repo, preload}) {
	  const get = createGet$6({
	    repo,
	    preload
	  });
	  async function data(multihash, options = {}) {
	    const node = await get(multihash, options);
	    return node.Data || new Uint8Array(0);
	  }
	  return withTimeoutOption(data);
	}

	function findLinks(node, links = []) {
	  for (const key in node) {
	    const val = node[key];
	    if (key === '/' && Object.keys(node).length === 1) {
	      try {
	        links.push({
	          Name: '',
	          Tsize: 0,
	          Hash: CID$6.parse(val)
	        });
	        continue;
	      } catch (_) {
	      }
	    }
	    const cid = CID$6.asCID(val);
	    if (cid) {
	      links.push({
	        Name: '',
	        Tsize: 0,
	        Hash: cid
	      });
	      continue;
	    }
	    if (Array.isArray(val)) {
	      findLinks(val, links);
	    }
	    if (val && typeof val === 'object') {
	      findLinks(val, links);
	    }
	  }
	  return links;
	}
	function createLinks$1({repo, codecs}) {
	  async function links(cid, options = {}) {
	    const codec = await codecs.getCodec(cid.code);
	    const block = await repo.blocks.get(cid, options);
	    const node = codec.decode(block);
	    switch (cid.code) {
	    case code$2:
	      return [];
	    case code$8:
	      return node.Links;
	    case code$7:
	    case code$6:
	      return findLinks(node);
	    default:
	      throw new Error(`Cannot resolve links from codec ${ cid.code }`);
	    }
	  }
	  return withTimeoutOption(links);
	}

	function createNew$1({repo, preload}) {
	  async function _new(options = {}) {
	    let data;
	    if (options.template) {
	      if (options.template === 'unixfs-dir') {
	        data = new UnixFS({ type: 'directory' }).marshal();
	      } else {
	        throw new Error('unknown template');
	      }
	    }
	    const buf = encode$k({
	      Data: data,
	      Links: []
	    });
	    const hash = await sha256$b.digest(buf);
	    const cid = CID$6.createV0(hash);
	    await repo.blocks.put(cid, buf, { signal: options.signal });
	    if (options.preload !== false) {
	      preload(cid);
	    }
	    return cid;
	  }
	  return withTimeoutOption(_new);
	}

	function createPut$4({repo, preload}) {
	  async function put(obj, options = {}) {
	    const release = await repo.gcLock.readLock();
	    try {
	      const buf = encode$k(obj);
	      const hash = await sha256$b.digest(buf);
	      const cid = CID$6.createV1(code$8, hash);
	      await repo.blocks.put(cid, buf, { signal: options.signal });
	      if (options.preload !== false) {
	        preload(cid);
	      }
	      if (options.pin) {
	        await repo.pins.pinRecursively(cid, { signal: options.signal });
	      }
	      return cid;
	    } finally {
	      release();
	    }
	  }
	  return withTimeoutOption(put);
	}

	function createStat$6({repo, preload}) {
	  const get = createGet$6({
	    repo,
	    preload
	  });
	  async function stat(cid, options = {}) {
	    const node = await get(cid, options);
	    const serialized = encode$k(node);
	    const blockSize = serialized.length;
	    const linkLength = node.Links.reduce((a, l) => a + (l.Tsize || 0), 0);
	    return {
	      Hash: cid,
	      NumLinks: node.Links.length,
	      BlockSize: blockSize,
	      LinksSize: blockSize - (node.Data || []).length,
	      DataSize: (node.Data || []).length,
	      CumulativeSize: blockSize + linkLength
	    };
	  }
	  return withTimeoutOption(stat);
	}

	function createAddLink$1({repo, preload}) {
	  const get = createGet$6({
	    repo,
	    preload
	  });
	  const put = createPut$4({
	    repo,
	    preload
	  });
	  async function addLink(cid, link, options = {}) {
	    const node = await get(cid, options);
	    return put({
	      ...node,
	      Links: node.Links.concat([link])
	    }, options);
	  }
	  return withTimeoutOption(addLink);
	}

	function createAppendData$1({repo, preload}) {
	  const get = createGet$6({
	    repo,
	    preload
	  });
	  const put = createPut$4({
	    repo,
	    preload
	  });
	  async function appendData(cid, data, options = {}) {
	    const node = await get(cid, options);
	    const newData = concat$2([
	      node.Data || [],
	      data
	    ]);
	    return put({
	      ...node,
	      Data: newData
	    }, options);
	  }
	  return withTimeoutOption(appendData);
	}

	function createRmLink$1({repo, preload}) {
	  const get = createGet$6({
	    repo,
	    preload
	  });
	  const put = createPut$4({
	    repo,
	    preload
	  });
	  async function rmLink(multihash, linkRef, options = {}) {
	    const node = await get(multihash, options);
	    const name = (typeof linkRef === 'string' ? linkRef : linkRef.Name) || '';
	    node.Links = node.Links.filter(l => l.Name !== name);
	    return put(node, options);
	  }
	  return withTimeoutOption(rmLink);
	}

	function createSetData$1({repo, preload}) {
	  const get = createGet$6({
	    repo,
	    preload
	  });
	  const put = createPut$4({
	    repo,
	    preload
	  });
	  async function setData(cid, data, options = {}) {
	    const node = await get(cid, options);
	    return put({
	      ...node,
	      Data: data
	    }, options);
	  }
	  return withTimeoutOption(setData);
	}

	class ObjectPatchAPI {
	  constructor({repo, preload}) {
	    this.addLink = createAddLink$1({
	      repo,
	      preload
	    });
	    this.appendData = createAppendData$1({
	      repo,
	      preload
	    });
	    this.rmLink = createRmLink$1({
	      repo,
	      preload
	    });
	    this.setData = createSetData$1({
	      repo,
	      preload
	    });
	  }
	}

	class ObjectAPI {
	  constructor({repo, codecs, preload}) {
	    this.data = createData$1({
	      repo,
	      preload
	    });
	    this.get = createGet$6({
	      repo,
	      preload
	    });
	    this.links = createLinks$1({
	      repo,
	      codecs
	    });
	    this.new = createNew$1({
	      repo,
	      preload
	    });
	    this.put = createPut$4({
	      repo,
	      preload
	    });
	    this.stat = createStat$6({
	      repo,
	      preload
	    });
	    this.patch = new ObjectPatchAPI({
	      repo,
	      preload
	    });
	  }
	}

	const log$10 = debug$S('ipfs:repo:gc');
	function createGc$1({repo, hashers}) {
	  async function* gc(options = {}) {
	    const start = Date.now();
	    let mfsRootCid;
	    try {
	      mfsRootCid = await loadMfsRoot({
	        repo,
	        hashers
	      }, options);
	      await repo.pins.pinRecursively(mfsRootCid);
	      yield* repo.gc();
	    } finally {
	      if (mfsRootCid) {
	        await repo.pins.unpin(mfsRootCid);
	      }
	    }
	    log$10(`Complete (${ Date.now() - start }ms)`);
	  }
	  return withTimeoutOption(gc);
	}

	function createStat$5({repo}) {
	  async function stat(options = {}) {
	    const stats = await repo.stat();
	    return {
	      numObjects: BigInt(stats.numObjects.toString()),
	      repoSize: BigInt(stats.repoSize.toString()),
	      repoPath: stats.repoPath,
	      version: `${ stats.version }`,
	      storageMax: BigInt(stats.storageMax.toString())
	    };
	  }
	  return withTimeoutOption(stat);
	}

	const repoVersion = 12;

	function createVersion$2({repo}) {
	  async function version(options = {}) {
	    try {
	      await repo._checkInitialized(options);
	    } catch (err) {
	      const match = [
	        /Key not found in database \[\/version\]/,
	        /ENOENT/,
	        /repo is not initialized yet/
	      ].some(m => {
	        return m.test(err.message);
	      });
	      if (match) {
	        return repoVersion;
	      }
	      throw err;
	    }
	    return repo.version.get();
	  }
	  return withTimeoutOption(version);
	}

	class RepoAPI {
	  constructor({repo, hashers}) {
	    this.gc = createGc$1({
	      repo,
	      hashers
	    });
	    this.stat = createStat$5({ repo });
	    this.version = createVersion$2({ repo });
	    this.setApiAddr = addr => repo.apiAddr.set(addr);
	  }
	}

	function getBandwidthStats(libp2p, opts) {
	  let stats;
	  if (!libp2p.metrics) {
	    stats = undefined;
	  } else if (opts.peer) {
	    stats = libp2p.metrics.forPeer(PeerIdImport.parse(opts.peer));
	  } else if (opts.proto) {
	    stats = libp2p.metrics.forProtocol(opts.proto);
	  } else {
	    stats = libp2p.metrics.global;
	  }
	  if (!stats) {
	    return {
	      totalIn: BigInt(0),
	      totalOut: BigInt(0),
	      rateIn: 0,
	      rateOut: 0
	    };
	  }
	  const {movingAverages, snapshot} = stats;
	  return {
	    totalIn: BigInt(snapshot.dataReceived.integerValue().toString()),
	    totalOut: BigInt(snapshot.dataSent.integerValue().toString()),
	    rateIn: movingAverages.dataReceived[60000].movingAverage() / 60,
	    rateOut: movingAverages.dataSent[60000].movingAverage() / 60
	  };
	}
	function createBw$1({network}) {
	  const bw = async function* (options = {}) {
	    const {libp2p} = await network.use(options);
	    if (!options.poll) {
	      yield getBandwidthStats(libp2p, options);
	      return;
	    }
	    const interval = options.interval || 1000;
	    let ms = -1;
	    try {
	      ms = typeof interval === 'string' ? parse$1(interval) || -1 : interval;
	      if (!ms || ms < 0)
	        throw new Error('invalid duration');
	    } catch (err) {
	      throw errCode$q(err, 'ERR_INVALID_POLL_INTERVAL');
	    }
	    let timeoutId;
	    try {
	      while (true) {
	        yield getBandwidthStats(libp2p, options);
	        await new Promise(resolve => {
	          timeoutId = setTimeout(resolve, ms);
	        });
	      }
	    } finally {
	      clearTimeout(timeoutId);
	    }
	  };
	  return withTimeoutOption(bw);
	}

	class StatsAPI {
	  constructor({repo, network}) {
	    this.repo = createStat$5({ repo });
	    this.bw = createBw$1({ network });
	    this.bitswap = createStat$9({ network });
	  }
	}

	var justSafeGet = get;

	/*
	  const obj = {a: {aa: {aaa: 2}}, b: 4};

	  get(obj, 'a.aa.aaa'); // 2
	  get(obj, ['a', 'aa', 'aaa']); // 2

	  get(obj, 'b.bb.bbb'); // undefined
	  get(obj, ['b', 'bb', 'bbb']); // undefined

	  get(obj.a, 'aa.aaa'); // 2
	  get(obj.a, ['aa', 'aaa']); // 2

	  get(obj.b, 'bb.bbb'); // undefined
	  get(obj.b, ['bb', 'bbb']); // undefined

	  get(obj.b, 'bb.bbb', 42); // 42
	  get(obj.b, ['bb', 'bbb'], 42); // 42

	  get(null, 'a'); // undefined
	  get(undefined, ['a']); // undefined

	  get(null, 'a', 42); // 42
	  get(undefined, ['a'], 42); // 42

	  const obj = {a: {}};
	  const sym = Symbol();
	  obj.a[sym] = 4;
	  get(obj.a, sym); // 4
	*/

	function get(obj, propsArg, defaultValue) {
	  if (!obj) {
	    return defaultValue;
	  }
	  var props, prop;
	  if (Array.isArray(propsArg)) {
	    props = propsArg.slice(0);
	  }
	  if (typeof propsArg == 'string') {
	    props = propsArg.split('.');
	  }
	  if (typeof propsArg == 'symbol') {
	    props = [propsArg];
	  }
	  if (!Array.isArray(props)) {
	    throw new Error('props arg must be an array, a string or a symbol');
	  }
	  while (props.length) {
	    prop = props.shift();
	    if (!obj) {
	      return defaultValue;
	    }
	    obj = obj[prop];
	    if (obj === undefined) {
	      return defaultValue;
	    }
	  }
	  return obj;
	}

	/**
	 * Consumes the passed iterator and returns the number of items it contained.
	 *
	 * @param {AsyncIterable<any> | Iterable<any>} iterator
	 * @returns {Promise<number>}
	 */
	const length$4 = async (iterator) => {
	  let count = 0;

	  for await (const _ of iterator) { // eslint-disable-line no-unused-vars
	    count++;
	  }

	  return count
	};

	var itLength = length$4;

	const log$$ = debug$S('ipfs:repo:migrator:migration-8');
	function unwrap$1(blockstore) {
	  if (blockstore.child) {
	    return unwrap$1(blockstore.child);
	  }
	  return blockstore;
	}
	function keyToMultihash$1(key) {
	  try {
	    const buf = base32$4.decode(`b${ key.toString().toLowerCase().slice(1) }`);
	    const multihash = CID$6.decode(buf).multihash.bytes;
	    const multihashStr = base32$4.encode(multihash).slice(1).toUpperCase();
	    return new Key$5(`/${ multihashStr }`, false);
	  } catch (err) {
	    return key;
	  }
	}
	function keyToCid$1(key) {
	  try {
	    const buf = base32$4.decode(`b${ key.toString().toLowerCase().slice(1) }`);
	    const digest = decode$k(buf);
	    const multihash = base32$4.encode(CID$6.createV1(code$2, digest).bytes).slice(1);
	    return new Key$5(`/${ multihash.toUpperCase() }`, false);
	  } catch {
	    return key;
	  }
	}
	async function process$2(backends, onProgress, keyFunction) {
	  const blockstore = backends.blocks;
	  await blockstore.open();
	  const unwrapped = unwrap$1(blockstore);
	  const blockCount = await itLength(unwrapped.queryKeys({
	    filters: [key => {
	        const newKey = keyFunction(key);
	        return newKey.toString() !== key.toString();
	      }]
	  }));
	  try {
	    let counter = 0;
	    for await (const block of unwrapped.query({})) {
	      const newKey = keyFunction(block.key);
	      if (newKey.toString() !== block.key.toString()) {
	        counter += 1;
	        log$$(`Migrating Block from ${ block.key } to ${ newKey }`, await unwrapped.has(block.key));
	        await unwrapped.delete(block.key);
	        await unwrapped.put(newKey, block.value);
	        onProgress(counter / blockCount * 100, `Migrated Block from ${ block.key } to ${ newKey }`);
	      }
	    }
	  } finally {
	    await blockstore.close();
	  }
	}
	const migration$4 = {
	  version: 8,
	  description: 'Transforms key names into base32 encoding and converts Block store to use bare multihashes encoded as base32',
	  migrate: (backends, onProgress = () => {
	  }) => {
	    return process$2(backends, onProgress, keyToMultihash$1);
	  },
	  revert: (backends, onProgress = () => {
	  }) => {
	    return process$2(backends, onProgress, keyToCid$1);
	  }
	};

	const $Reader$e = minimal.Reader, $Writer$e = minimal.Writer; minimal.util;
	const $root$e = minimal.roots['default'] || (minimal.roots['default'] = {});
	const ipfs = $root$e.ipfs = (() => {
	  const ipfs = {};
	  ipfs.pin = function () {
	    const pin = {};
	    pin.Set = function () {
	      function Set(p) {
	        if (p)
	          for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	            if (p[ks[i]] != null)
	              this[ks[i]] = p[ks[i]];
	      }
	      Set.prototype.version = 0;
	      Set.prototype.fanout = 0;
	      Set.prototype.seed = 0;
	      Set.encode = function encode(m, w) {
	        if (!w)
	          w = $Writer$e.create();
	        if (m.version != null && Object.hasOwnProperty.call(m, 'version'))
	          w.uint32(8).uint32(m.version);
	        if (m.fanout != null && Object.hasOwnProperty.call(m, 'fanout'))
	          w.uint32(16).uint32(m.fanout);
	        if (m.seed != null && Object.hasOwnProperty.call(m, 'seed'))
	          w.uint32(29).fixed32(m.seed);
	        return w;
	      };
	      Set.decode = function decode(r, l) {
	        if (!(r instanceof $Reader$e))
	          r = $Reader$e.create(r);
	        var c = l === undefined ? r.len : r.pos + l, m = new $root$e.ipfs.pin.Set();
	        while (r.pos < c) {
	          var t = r.uint32();
	          switch (t >>> 3) {
	          case 1:
	            m.version = r.uint32();
	            break;
	          case 2:
	            m.fanout = r.uint32();
	            break;
	          case 3:
	            m.seed = r.fixed32();
	            break;
	          default:
	            r.skipType(t & 7);
	            break;
	          }
	        }
	        return m;
	      };
	      Set.fromObject = function fromObject(d) {
	        if (d instanceof $root$e.ipfs.pin.Set)
	          return d;
	        var m = new $root$e.ipfs.pin.Set();
	        if (d.version != null) {
	          m.version = d.version >>> 0;
	        }
	        if (d.fanout != null) {
	          m.fanout = d.fanout >>> 0;
	        }
	        if (d.seed != null) {
	          m.seed = d.seed >>> 0;
	        }
	        return m;
	      };
	      Set.toObject = function toObject(m, o) {
	        if (!o)
	          o = {};
	        var d = {};
	        if (o.defaults) {
	          d.version = 0;
	          d.fanout = 0;
	          d.seed = 0;
	        }
	        if (m.version != null && m.hasOwnProperty('version')) {
	          d.version = m.version;
	        }
	        if (m.fanout != null && m.hasOwnProperty('fanout')) {
	          d.fanout = m.fanout;
	        }
	        if (m.seed != null && m.hasOwnProperty('seed')) {
	          d.seed = m.seed;
	        }
	        return d;
	      };
	      Set.prototype.toJSON = function toJSON() {
	        return this.constructor.toObject(this, minimal.util.toJSONOptions);
	      };
	      return Set;
	    }();
	    return pin;
	  }();
	  return ipfs;
	})();

	/**
	 * Created by schwarzkopfb on 15/11/17.
	 */

	/**
	 * FNV-1a hash generation init value.
	 * It's exposed, because this allows user to override it.
	 *
	 * @type {number}
	 */
	hash$2.BASE = 0x811c9dc5;

	/**
	 * Generates 32 bit FNV-1a hash from the given string.
	 * As explained here: http://isthe.com/chongo/tech/comp/fnv/
	 *
	 * @param s {string} String to generate hash from.
	 * @returns {number} The result integer hash.
	 */
	function hash$2(s) {
	    var h = hash$2.BASE;

	    for (var i = 0, l = s.length; i < l; i++) {
	        h ^= s.charCodeAt(i);
	        h += (h << 1) + (h << 4) + (h << 7) + (h << 8) + (h << 24);
	    }

	    return h >>> 0
	}

	var fnv1a = hash$2;

	const PIN_DS_KEY = new Key$5('/local/pins');
	const DEFAULT_FANOUT = 256;
	const MAX_ITEMS = 8192;
	const EMPTY_KEY = CID$6.parse('QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n');
	const PinTypes = {
	  direct: 'direct',
	  recursive: 'recursive'
	};
	function cidToKey$2(cid) {
	  return new Key$5(`/${ base32$4.encode(cid.multihash.bytes).toUpperCase().substring(1) }`);
	}

	function compare$1(a, b) {
	  for (let i = 0; i < a.byteLength; i++) {
	    if (a[i] < b[i]) {
	      return -1;
	    }
	    if (a[i] > b[i]) {
	      return 1;
	    }
	  }
	  if (a.byteLength > b.byteLength) {
	    return 1;
	  }
	  if (a.byteLength < b.byteLength) {
	    return -1;
	  }
	  return 0;
	}

	var compare$2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		compare: compare$1
	});

	const PinSet = ipfs.pin.Set;
	function readHeader(rootNode) {
	  const rootData = rootNode.Data;
	  if (!rootData) {
	    throw new Error('No data present');
	  }
	  const hdrLength = varint$9.decode(rootData);
	  const vBytes = varint$9.decode.bytes;
	  if (vBytes <= 0) {
	    throw new Error('Invalid Set header length');
	  }
	  if (vBytes + hdrLength > rootData.length) {
	    throw new Error('Impossibly large set header length');
	  }
	  const hdrSlice = rootData.slice(vBytes, hdrLength + vBytes);
	  const header = PinSet.toObject(PinSet.decode(hdrSlice), {
	    defaults: false,
	    arrays: true,
	    longs: Number,
	    objects: false
	  });
	  if (header.version !== 1) {
	    throw new Error(`Unsupported Set version: ${ header.version }`);
	  }
	  if (header.fanout > rootNode.Links.length) {
	    throw new Error('Impossibly large fanout');
	  }
	  return {
	    header: header,
	    data: rootData.slice(hdrLength + vBytes)
	  };
	}
	function hash$1(seed, key) {
	  const buffer = new Uint8Array(4);
	  const dataView = new DataView(buffer.buffer);
	  dataView.setUint32(0, seed, true);
	  const encodedKey = fromString$4(key.toString());
	  const data = concat$2([
	    buffer,
	    encodedKey
	  ], buffer.byteLength + encodedKey.byteLength);
	  return fnv1a(toString$6(data));
	}
	async function* walkItems(blockstore, node) {
	  const pbh = readHeader(node);
	  let idx = 0;
	  for (const link of node.Links) {
	    if (idx < pbh.header.fanout) {
	      const linkHash = link.Hash;
	      if (!EMPTY_KEY.equals(linkHash)) {
	        const buf = await blockstore.get(linkHash);
	        const node = decode$i(buf);
	        yield* walkItems(blockstore, node);
	      }
	    } else {
	      yield link.Hash;
	    }
	    idx++;
	  }
	}
	async function* loadSet(blockstore, rootNode, name) {
	  const link = rootNode.Links.find(l => l.Name === name);
	  if (!link) {
	    throw new Error('No link found with name ' + name);
	  }
	  const buf = await blockstore.get(link.Hash);
	  const node = decode$i(buf);
	  yield* walkItems(blockstore, node);
	}
	function storeItems(blockstore, items) {
	  return storePins(items, 0);
	  async function storePins(pins, depth) {
	    const pbHeader = PinSet.encode({
	      version: 1,
	      fanout: DEFAULT_FANOUT,
	      seed: depth
	    }).finish();
	    const header = varint$9.encode(pbHeader.length);
	    const headerBuf = concat$2([
	      header,
	      pbHeader
	    ]);
	    const fanoutLinks = [];
	    for (let i = 0; i < DEFAULT_FANOUT; i++) {
	      fanoutLinks.push({
	        Name: '',
	        Tsize: 1,
	        Hash: EMPTY_KEY
	      });
	    }
	    if (pins.length <= MAX_ITEMS) {
	      const nodes = pins.map(item => {
	        return {
	          link: {
	            Name: '',
	            Tsize: 1,
	            Hash: item.key
	          },
	          data: item.data || new Uint8Array()
	        };
	      }).sort((a, b) => {
	        return compare$1(a.link.Hash.bytes, b.link.Hash.bytes);
	      });
	      const rootLinks = fanoutLinks.concat(nodes.map(item => item.link));
	      const rootData = concat$2([
	        headerBuf,
	        ...nodes.map(item => item.data)
	      ]);
	      return {
	        Data: rootData,
	        Links: rootLinks
	      };
	    } else {
	      const bins = pins.reduce((bins, pin) => {
	        const n = hash$1(depth, pin.key) % DEFAULT_FANOUT;
	        bins[n] = n in bins ? bins[n].concat([pin]) : [pin];
	        return bins;
	      }, []);
	      let idx = 0;
	      for (const bin of bins) {
	        const child = await storePins(bin, depth + 1);
	        await storeChild(child, idx);
	        idx++;
	      }
	      return {
	        Data: headerBuf,
	        Links: fanoutLinks
	      };
	    }
	    async function storeChild(child, binIdx) {
	      const buf = encode$k(child);
	      const digest = await sha256$b.digest(buf);
	      const cid = CID$6.createV0(digest);
	      await blockstore.put(cid, buf);
	      const size = child.Links.reduce((acc, curr) => acc + (curr.Tsize || 0), 0) + buf.length;
	      fanoutLinks[binIdx] = {
	        Name: '',
	        Tsize: size,
	        Hash: cid
	      };
	    }
	  }
	}
	async function storeSet(blockstore, type, cids) {
	  const rootNode = await storeItems(blockstore, cids.map(cid => {
	    return { key: cid };
	  }));
	  const buf = encode$k(rootNode);
	  const digest = await sha256$b.digest(buf);
	  const cid = CID$6.createV0(digest);
	  await blockstore.put(cid, buf);
	  const size = rootNode.Links.reduce((acc, curr) => acc + curr.Tsize, 0) + buf.length;
	  return {
	    Name: type,
	    Tsize: size,
	    Hash: cid
	  };
	}

	async function pinsToDatastore(blockstore, datastore, pinstore, onProgress) {
	  if (!await datastore.has(PIN_DS_KEY)) {
	    return;
	  }
	  const mh = await datastore.get(PIN_DS_KEY);
	  const cid = CID$6.decode(mh);
	  const pinRootBuf = await blockstore.get(cid);
	  const pinRoot = decode$i(pinRootBuf);
	  let counter = 0;
	  const pinCount = await itLength(loadSet(blockstore, pinRoot, PinTypes.recursive)) + await itLength(loadSet(blockstore, pinRoot, PinTypes.direct));
	  for await (const cid of loadSet(blockstore, pinRoot, PinTypes.recursive)) {
	    counter++;
	    const pin = { depth: Infinity };
	    if (cid.version !== 0) {
	      pin.version = cid.version;
	    }
	    if (cid.code !== code$8) {
	      pin.codec = cid.code;
	    }
	    await pinstore.put(cidToKey$2(cid), encode$j(pin));
	    onProgress(counter / pinCount * 100, `Migrated recursive pin ${ cid }`);
	  }
	  for await (const cid of loadSet(blockstore, pinRoot, PinTypes.direct)) {
	    counter++;
	    const pin = { depth: 0 };
	    if (cid.version !== 0) {
	      pin.version = cid.version;
	    }
	    if (cid.code !== code$8) {
	      pin.codec = cid.code;
	    }
	    await pinstore.put(cidToKey$2(cid), encode$j(pin));
	    onProgress(counter / pinCount * 100, `Migrated direct pin ${ cid }`);
	  }
	  await blockstore.delete(cid);
	  await datastore.delete(PIN_DS_KEY);
	}
	async function pinsToDAG(blockstore, datastore, pinstore, onProgress) {
	  const recursivePins = [];
	  const directPins = [];
	  let counter = 0;
	  const pinCount = await itLength(pinstore.queryKeys({}));
	  for await (const {key, value} of pinstore.query({})) {
	    counter++;
	    const pin = decode$h(value);
	    const cid = CID$6.create(pin.version || 0, pin.codec || code$8, decode$k(base32$4.decode('b' + key.toString().toLowerCase().split('/').pop())));
	    if (pin.depth === 0) {
	      onProgress(counter / pinCount * 100, `Reverted direct pin ${ cid }`);
	      directPins.push(cid);
	    } else {
	      onProgress(counter / pinCount * 100, `Reverted recursive pin ${ cid }`);
	      recursivePins.push(cid);
	    }
	  }
	  onProgress(100, 'Updating pin root');
	  const pinRoot = {
	    Links: [
	      await storeSet(blockstore, PinTypes.direct, directPins),
	      await storeSet(blockstore, PinTypes.recursive, recursivePins)
	    ]
	  };
	  const buf = encode$k(pinRoot);
	  const digest = await sha256$b.digest(buf);
	  const cid = CID$6.createV0(digest);
	  await blockstore.put(cid, buf);
	  await datastore.put(PIN_DS_KEY, cid.bytes);
	}
	async function process$1(backends, onProgress, fn) {
	  const blockstore = backends.blocks;
	  const datastore = backends.datastore;
	  const pinstore = backends.pins;
	  await blockstore.open();
	  await datastore.open();
	  await pinstore.open();
	  try {
	    await fn(blockstore, datastore, pinstore, onProgress);
	  } finally {
	    await pinstore.close();
	    await datastore.close();
	    await blockstore.close();
	  }
	}
	const migration$3 = {
	  version: 9,
	  description: 'Migrates pins to datastore',
	  migrate: (backends, onProgress = () => {
	  }) => {
	    return process$1(backends, onProgress, pinsToDatastore);
	  },
	  revert: (backends, onProgress = () => {
	  }) => {
	    return process$1(backends, onProgress, pinsToDAG);
	  }
	};

	const CONFIG_KEY = new Key$5('/config');
	const VERSION_KEY = new Key$5('/version');
	function findLevelJs$1(store) {
	  let db = store;
	  while (db.db || db.child) {
	    db = db.db || db.child;
	    if (db.type === 'level-js' || db.constructor.name === 'Level') {
	      return db;
	    }
	  }
	}
	async function hasWithFallback$1(key, has, store) {
	  const result = await has(key);
	  if (result) {
	    return result;
	  }
	  const levelJs = findLevelJs$1(store);
	  if (!levelJs) {
	    return false;
	  }
	  return new Promise((resolve, reject) => {
	    const req = levelJs.store('readonly').get(key.toString());
	    req.transaction.onabort = () => {
	      reject(req.transaction.error);
	    };
	    req.transaction.oncomplete = () => {
	      resolve(Boolean(req.result));
	    };
	  });
	}
	async function getWithFallback$1(key, get, has, store) {
	  if (await has(key)) {
	    return get(key);
	  }
	  const levelJs = findLevelJs$1(store);
	  if (!levelJs) {
	    throw notFoundError$1();
	  }
	  return new Promise((resolve, reject) => {
	    const req = levelJs.store('readonly').get(key.toString());
	    req.transaction.onabort = () => {
	      reject(req.transaction.error);
	    };
	    req.transaction.oncomplete = () => {
	      if (req.result) {
	        return resolve(req.result);
	      }
	      reject(notFoundError$1());
	    };
	  });
	}
	function wrapStore(store) {
	  const originalGet = store.get.bind(store);
	  const originalHas = store.has.bind(store);
	  store.get = key => getWithFallback$1(key, originalGet, originalHas, store);
	  store.has = key => hasWithFallback$1(key, originalHas, store);
	  return store;
	}
	function wrapBackends(backends) {
	  return {
	    ...backends,
	    root: wrapStore(backends.root),
	    datastore: wrapStore(backends.datastore),
	    pins: wrapStore(backends.pins),
	    keys: wrapStore(backends.keys)
	  };
	}

	async function keysToBinary(name, store, onProgress = () => {
	}) {
	  const db = findLevelJs$1(store);
	  if (!db) {
	    onProgress(`${ name } did not need an upgrade`);
	    return;
	  }
	  onProgress(`Upgrading ${ name }`);
	  const upgrade = (key, value) => {
	    return [
	      {
	        type: 'del',
	        key: key
	      },
	      {
	        type: 'put',
	        key: fromString$4(key),
	        value: value
	      }
	    ];
	  };
	  await withEach(db, upgrade);
	}
	async function keysToStrings(name, store, onProgress = () => {
	}) {
	  const db = findLevelJs$1(store);
	  if (!db) {
	    onProgress(`${ name } did not need a downgrade`);
	    return;
	  }
	  onProgress(`Downgrading ${ name }`);
	  const downgrade = (key, value) => {
	    return [
	      {
	        type: 'del',
	        key: key
	      },
	      {
	        type: 'put',
	        key: toString$6(key),
	        value: value
	      }
	    ];
	  };
	  await withEach(db, downgrade);
	}
	function unwrap(store) {
	  if (store.child) {
	    return unwrap(store.child);
	  }
	  return store;
	}
	async function process(backends, onProgress, fn) {
	  const datastores = Object.entries(backends).map(([key, backend]) => ({
	    key,
	    backend: unwrap(backend)
	  })).filter(({key, backend}) => backend.constructor.name === 'LevelDatastore').map(({key, backend}) => ({
	    name: key,
	    store: backend
	  }));
	  onProgress(0, `Migrating ${ datastores.length } dbs`);
	  let migrated = 0;
	  const progress = message => {
	    onProgress(Math.round(migrated / datastores.length * 100), message);
	  };
	  for (const {name, store} of datastores) {
	    await store.open();
	    try {
	      await fn(name, store, progress);
	    } finally {
	      migrated++;
	      await store.close();
	    }
	  }
	  onProgress(100, `Migrated ${ datastores.length } dbs`);
	}
	const migration$2 = {
	  version: 10,
	  description: 'Migrates datastore-level keys to binary',
	  migrate: (backends, onProgress = () => {
	  }) => {
	    return process(backends, onProgress, keysToBinary);
	  },
	  revert: (backends, onProgress = () => {
	  }) => {
	    return process(backends, onProgress, keysToStrings);
	  }
	};
	function withEach(db, fn) {
	  function batch(operations, next) {
	    const store = db.store('readwrite');
	    const transaction = store.transaction;
	    let index = 0;
	    let error;
	    transaction.onabort = () => next(error || transaction.error || new Error('aborted by user'));
	    transaction.oncomplete = () => next();
	    function loop() {
	      const op = operations[index++];
	      const key = op.key;
	      let req;
	      try {
	        req = op.type === 'del' ? store.delete(key) : store.put(op.value, key);
	      } catch (err) {
	        error = err;
	        transaction.abort();
	        return;
	      }
	      if (index < operations.length) {
	        req.onsuccess = loop;
	      }
	    }
	    loop();
	  }
	  return new Promise((resolve, reject) => {
	    const it = db.iterator();
	    const id = data => data;
	    it._deserializeKey = it._deserializeValue = id;
	    next();
	    function next() {
	      const handleNext = (err, key, value) => {
	        if (err || key === undefined) {
	          const handleEnd = err2 => {
	            if (err2) {
	              reject(err2);
	              return;
	            }
	            resolve();
	          };
	          it.end(handleEnd);
	          return;
	        }
	        batch(fn(key, value), next);
	      };
	      it.next(handleNext);
	    }
	  });
	}

	const MFS_ROOT_KEY$1 = new Key$5('/local/filesroot');
	async function storeMfsRootInDatastore(backends, onProgress = () => {
	}) {
	  onProgress(100, 'Migrating MFS root to repo datastore');
	  await backends.root.open();
	  await backends.datastore.open();
	  if (await backends.root.has(MFS_ROOT_KEY$1)) {
	    const root = await backends.root.get(MFS_ROOT_KEY$1);
	    await backends.datastore.put(MFS_ROOT_KEY$1, root);
	    await backends.root.delete(MFS_ROOT_KEY$1);
	  }
	  await backends.datastore.close();
	  await backends.root.close();
	  onProgress(100, 'Stored MFS root in repo datastore');
	}
	async function storeMfsRootInRoot(backends, onProgress = () => {
	}) {
	  onProgress(100, 'Migrating MFS root to repo root datastore');
	  await backends.root.open();
	  await backends.datastore.open();
	  if (await backends.datastore.has(MFS_ROOT_KEY$1)) {
	    const root = await backends.datastore.get(MFS_ROOT_KEY$1);
	    await backends.root.put(MFS_ROOT_KEY$1, root);
	    await backends.datastore.delete(MFS_ROOT_KEY$1);
	  }
	  await backends.datastore.close();
	  await backends.root.close();
	  onProgress(100, 'Stored MFS root in repo root datastore');
	}
	const migration$1 = {
	  version: 11,
	  description: 'Store mfs root in the datastore',
	  migrate: storeMfsRootInDatastore,
	  revert: storeMfsRootInRoot
	};

	const $Reader$d = minimal.Reader, $Writer$d = minimal.Writer, $util$d = minimal.util;
	const $root$d = minimal.roots['default'] || (minimal.roots['default'] = {});
	const Protocols = $root$d.Protocols = (() => {
	  function Protocols(p) {
	    this.protocols = [];
	    if (p)
	      for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	        if (p[ks[i]] != null)
	          this[ks[i]] = p[ks[i]];
	  }
	  Protocols.prototype.protocols = $util$d.emptyArray;
	  Protocols.encode = function encode(m, w) {
	    if (!w)
	      w = $Writer$d.create();
	    if (m.protocols != null && m.protocols.length) {
	      for (var i = 0; i < m.protocols.length; ++i)
	        w.uint32(10).string(m.protocols[i]);
	    }
	    return w;
	  };
	  Protocols.decode = function decode(r, l) {
	    if (!(r instanceof $Reader$d))
	      r = $Reader$d.create(r);
	    var c = l === undefined ? r.len : r.pos + l, m = new $root$d.Protocols();
	    while (r.pos < c) {
	      var t = r.uint32();
	      switch (t >>> 3) {
	      case 1:
	        if (!(m.protocols && m.protocols.length))
	          m.protocols = [];
	        m.protocols.push(r.string());
	        break;
	      default:
	        r.skipType(t & 7);
	        break;
	      }
	    }
	    return m;
	  };
	  Protocols.fromObject = function fromObject(d) {
	    if (d instanceof $root$d.Protocols)
	      return d;
	    var m = new $root$d.Protocols();
	    if (d.protocols) {
	      if (!Array.isArray(d.protocols))
	        throw TypeError('.Protocols.protocols: array expected');
	      m.protocols = [];
	      for (var i = 0; i < d.protocols.length; ++i) {
	        m.protocols[i] = String(d.protocols[i]);
	      }
	    }
	    return m;
	  };
	  Protocols.toObject = function toObject(m, o) {
	    if (!o)
	      o = {};
	    var d = {};
	    if (o.arrays || o.defaults) {
	      d.protocols = [];
	    }
	    if (m.protocols && m.protocols.length) {
	      d.protocols = [];
	      for (var j = 0; j < m.protocols.length; ++j) {
	        d.protocols[j] = m.protocols[j];
	      }
	    }
	    return d;
	  };
	  Protocols.prototype.toJSON = function toJSON() {
	    return this.constructor.toObject(this, minimal.util.toJSONOptions);
	  };
	  return Protocols;
	})();

	const $Reader$c = minimal.Reader, $Writer$c = minimal.Writer, $util$c = minimal.util;
	const $root$c = minimal.roots['default'] || (minimal.roots['default'] = {});
	const Addresses = $root$c.Addresses = (() => {
	  function Addresses(p) {
	    this.addrs = [];
	    if (p)
	      for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	        if (p[ks[i]] != null)
	          this[ks[i]] = p[ks[i]];
	  }
	  Addresses.prototype.addrs = $util$c.emptyArray;
	  Addresses.prototype.certifiedRecord = null;
	  Addresses.encode = function encode(m, w) {
	    if (!w)
	      w = $Writer$c.create();
	    if (m.addrs != null && m.addrs.length) {
	      for (var i = 0; i < m.addrs.length; ++i)
	        $root$c.Addresses.Address.encode(m.addrs[i], w.uint32(10).fork()).ldelim();
	    }
	    if (m.certifiedRecord != null && Object.hasOwnProperty.call(m, 'certifiedRecord'))
	      $root$c.Addresses.CertifiedRecord.encode(m.certifiedRecord, w.uint32(18).fork()).ldelim();
	    return w;
	  };
	  Addresses.decode = function decode(r, l) {
	    if (!(r instanceof $Reader$c))
	      r = $Reader$c.create(r);
	    var c = l === undefined ? r.len : r.pos + l, m = new $root$c.Addresses();
	    while (r.pos < c) {
	      var t = r.uint32();
	      switch (t >>> 3) {
	      case 1:
	        if (!(m.addrs && m.addrs.length))
	          m.addrs = [];
	        m.addrs.push($root$c.Addresses.Address.decode(r, r.uint32()));
	        break;
	      case 2:
	        m.certifiedRecord = $root$c.Addresses.CertifiedRecord.decode(r, r.uint32());
	        break;
	      default:
	        r.skipType(t & 7);
	        break;
	      }
	    }
	    return m;
	  };
	  Addresses.fromObject = function fromObject(d) {
	    if (d instanceof $root$c.Addresses)
	      return d;
	    var m = new $root$c.Addresses();
	    if (d.addrs) {
	      if (!Array.isArray(d.addrs))
	        throw TypeError('.Addresses.addrs: array expected');
	      m.addrs = [];
	      for (var i = 0; i < d.addrs.length; ++i) {
	        if (typeof d.addrs[i] !== 'object')
	          throw TypeError('.Addresses.addrs: object expected');
	        m.addrs[i] = $root$c.Addresses.Address.fromObject(d.addrs[i]);
	      }
	    }
	    if (d.certifiedRecord != null) {
	      if (typeof d.certifiedRecord !== 'object')
	        throw TypeError('.Addresses.certifiedRecord: object expected');
	      m.certifiedRecord = $root$c.Addresses.CertifiedRecord.fromObject(d.certifiedRecord);
	    }
	    return m;
	  };
	  Addresses.toObject = function toObject(m, o) {
	    if (!o)
	      o = {};
	    var d = {};
	    if (o.arrays || o.defaults) {
	      d.addrs = [];
	    }
	    if (o.defaults) {
	      d.certifiedRecord = null;
	    }
	    if (m.addrs && m.addrs.length) {
	      d.addrs = [];
	      for (var j = 0; j < m.addrs.length; ++j) {
	        d.addrs[j] = $root$c.Addresses.Address.toObject(m.addrs[j], o);
	      }
	    }
	    if (m.certifiedRecord != null && m.hasOwnProperty('certifiedRecord')) {
	      d.certifiedRecord = $root$c.Addresses.CertifiedRecord.toObject(m.certifiedRecord, o);
	    }
	    return d;
	  };
	  Addresses.prototype.toJSON = function toJSON() {
	    return this.constructor.toObject(this, minimal.util.toJSONOptions);
	  };
	  Addresses.Address = function () {
	    function Address(p) {
	      if (p)
	        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	          if (p[ks[i]] != null)
	            this[ks[i]] = p[ks[i]];
	    }
	    Address.prototype.multiaddr = $util$c.newBuffer([]);
	    Address.prototype.isCertified = null;
	    let $oneOfFields;
	    Object.defineProperty(Address.prototype, '_isCertified', {
	      get: $util$c.oneOfGetter($oneOfFields = ['isCertified']),
	      set: $util$c.oneOfSetter($oneOfFields)
	    });
	    Address.encode = function encode(m, w) {
	      if (!w)
	        w = $Writer$c.create();
	      if (m.multiaddr != null && Object.hasOwnProperty.call(m, 'multiaddr'))
	        w.uint32(10).bytes(m.multiaddr);
	      if (m.isCertified != null && Object.hasOwnProperty.call(m, 'isCertified'))
	        w.uint32(16).bool(m.isCertified);
	      return w;
	    };
	    Address.decode = function decode(r, l) {
	      if (!(r instanceof $Reader$c))
	        r = $Reader$c.create(r);
	      var c = l === undefined ? r.len : r.pos + l, m = new $root$c.Addresses.Address();
	      while (r.pos < c) {
	        var t = r.uint32();
	        switch (t >>> 3) {
	        case 1:
	          m.multiaddr = r.bytes();
	          break;
	        case 2:
	          m.isCertified = r.bool();
	          break;
	        default:
	          r.skipType(t & 7);
	          break;
	        }
	      }
	      return m;
	    };
	    Address.fromObject = function fromObject(d) {
	      if (d instanceof $root$c.Addresses.Address)
	        return d;
	      var m = new $root$c.Addresses.Address();
	      if (d.multiaddr != null) {
	        if (typeof d.multiaddr === 'string')
	          $util$c.base64.decode(d.multiaddr, m.multiaddr = $util$c.newBuffer($util$c.base64.length(d.multiaddr)), 0);
	        else if (d.multiaddr.length)
	          m.multiaddr = d.multiaddr;
	      }
	      if (d.isCertified != null) {
	        m.isCertified = Boolean(d.isCertified);
	      }
	      return m;
	    };
	    Address.toObject = function toObject(m, o) {
	      if (!o)
	        o = {};
	      var d = {};
	      if (o.defaults) {
	        if (o.bytes === String)
	          d.multiaddr = '';
	        else {
	          d.multiaddr = [];
	          if (o.bytes !== Array)
	            d.multiaddr = $util$c.newBuffer(d.multiaddr);
	        }
	      }
	      if (m.multiaddr != null && m.hasOwnProperty('multiaddr')) {
	        d.multiaddr = o.bytes === String ? $util$c.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;
	      }
	      if (m.isCertified != null && m.hasOwnProperty('isCertified')) {
	        d.isCertified = m.isCertified;
	        if (o.oneofs)
	          d._isCertified = 'isCertified';
	      }
	      return d;
	    };
	    Address.prototype.toJSON = function toJSON() {
	      return this.constructor.toObject(this, minimal.util.toJSONOptions);
	    };
	    return Address;
	  }();
	  Addresses.CertifiedRecord = function () {
	    function CertifiedRecord(p) {
	      if (p)
	        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	          if (p[ks[i]] != null)
	            this[ks[i]] = p[ks[i]];
	    }
	    CertifiedRecord.prototype.seq = $util$c.Long ? $util$c.Long.fromBits(0, 0, true) : 0;
	    CertifiedRecord.prototype.raw = $util$c.newBuffer([]);
	    CertifiedRecord.encode = function encode(m, w) {
	      if (!w)
	        w = $Writer$c.create();
	      if (m.seq != null && Object.hasOwnProperty.call(m, 'seq'))
	        w.uint32(8).uint64(m.seq);
	      if (m.raw != null && Object.hasOwnProperty.call(m, 'raw'))
	        w.uint32(18).bytes(m.raw);
	      return w;
	    };
	    CertifiedRecord.decode = function decode(r, l) {
	      if (!(r instanceof $Reader$c))
	        r = $Reader$c.create(r);
	      var c = l === undefined ? r.len : r.pos + l, m = new $root$c.Addresses.CertifiedRecord();
	      while (r.pos < c) {
	        var t = r.uint32();
	        switch (t >>> 3) {
	        case 1:
	          m.seq = r.uint64();
	          break;
	        case 2:
	          m.raw = r.bytes();
	          break;
	        default:
	          r.skipType(t & 7);
	          break;
	        }
	      }
	      return m;
	    };
	    CertifiedRecord.fromObject = function fromObject(d) {
	      if (d instanceof $root$c.Addresses.CertifiedRecord)
	        return d;
	      var m = new $root$c.Addresses.CertifiedRecord();
	      if (d.seq != null) {
	        if ($util$c.Long)
	          (m.seq = $util$c.Long.fromValue(d.seq)).unsigned = true;
	        else if (typeof d.seq === 'string')
	          m.seq = parseInt(d.seq, 10);
	        else if (typeof d.seq === 'number')
	          m.seq = d.seq;
	        else if (typeof d.seq === 'object')
	          m.seq = new $util$c.LongBits(d.seq.low >>> 0, d.seq.high >>> 0).toNumber(true);
	      }
	      if (d.raw != null) {
	        if (typeof d.raw === 'string')
	          $util$c.base64.decode(d.raw, m.raw = $util$c.newBuffer($util$c.base64.length(d.raw)), 0);
	        else if (d.raw.length)
	          m.raw = d.raw;
	      }
	      return m;
	    };
	    CertifiedRecord.toObject = function toObject(m, o) {
	      if (!o)
	        o = {};
	      var d = {};
	      if (o.defaults) {
	        if ($util$c.Long) {
	          var n = new $util$c.Long(0, 0, true);
	          d.seq = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	        } else
	          d.seq = o.longs === String ? '0' : 0;
	        if (o.bytes === String)
	          d.raw = '';
	        else {
	          d.raw = [];
	          if (o.bytes !== Array)
	            d.raw = $util$c.newBuffer(d.raw);
	        }
	      }
	      if (m.seq != null && m.hasOwnProperty('seq')) {
	        if (typeof m.seq === 'number')
	          d.seq = o.longs === String ? String(m.seq) : m.seq;
	        else
	          d.seq = o.longs === String ? $util$c.Long.prototype.toString.call(m.seq) : o.longs === Number ? new $util$c.LongBits(m.seq.low >>> 0, m.seq.high >>> 0).toNumber(true) : m.seq;
	      }
	      if (m.raw != null && m.hasOwnProperty('raw')) {
	        d.raw = o.bytes === String ? $util$c.base64.encode(m.raw, 0, m.raw.length) : o.bytes === Array ? Array.prototype.slice.call(m.raw) : m.raw;
	      }
	      return d;
	    };
	    CertifiedRecord.prototype.toJSON = function toJSON() {
	      return this.constructor.toObject(this, minimal.util.toJSONOptions);
	    };
	    return CertifiedRecord;
	  }();
	  return Addresses;
	})();

	const $Reader$b = minimal.Reader, $Writer$b = minimal.Writer, $util$b = minimal.util;
	const $root$b = minimal.roots['default'] || (minimal.roots['default'] = {});
	const Peer$1 = $root$b.Peer = (() => {
	  function Peer(p) {
	    this.addresses = [];
	    this.protocols = [];
	    this.metadata = [];
	    if (p)
	      for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	        if (p[ks[i]] != null)
	          this[ks[i]] = p[ks[i]];
	  }
	  Peer.prototype.addresses = $util$b.emptyArray;
	  Peer.prototype.protocols = $util$b.emptyArray;
	  Peer.prototype.metadata = $util$b.emptyArray;
	  Peer.prototype.pubKey = null;
	  Peer.prototype.peerRecordEnvelope = null;
	  let $oneOfFields;
	  Object.defineProperty(Peer.prototype, '_pubKey', {
	    get: $util$b.oneOfGetter($oneOfFields = ['pubKey']),
	    set: $util$b.oneOfSetter($oneOfFields)
	  });
	  Object.defineProperty(Peer.prototype, '_peerRecordEnvelope', {
	    get: $util$b.oneOfGetter($oneOfFields = ['peerRecordEnvelope']),
	    set: $util$b.oneOfSetter($oneOfFields)
	  });
	  Peer.encode = function encode(m, w) {
	    if (!w)
	      w = $Writer$b.create();
	    if (m.addresses != null && m.addresses.length) {
	      for (var i = 0; i < m.addresses.length; ++i)
	        $root$b.Address.encode(m.addresses[i], w.uint32(10).fork()).ldelim();
	    }
	    if (m.protocols != null && m.protocols.length) {
	      for (var i = 0; i < m.protocols.length; ++i)
	        w.uint32(18).string(m.protocols[i]);
	    }
	    if (m.metadata != null && m.metadata.length) {
	      for (var i = 0; i < m.metadata.length; ++i)
	        $root$b.Metadata.encode(m.metadata[i], w.uint32(26).fork()).ldelim();
	    }
	    if (m.pubKey != null && Object.hasOwnProperty.call(m, 'pubKey'))
	      w.uint32(34).bytes(m.pubKey);
	    if (m.peerRecordEnvelope != null && Object.hasOwnProperty.call(m, 'peerRecordEnvelope'))
	      w.uint32(42).bytes(m.peerRecordEnvelope);
	    return w;
	  };
	  Peer.decode = function decode(r, l) {
	    if (!(r instanceof $Reader$b))
	      r = $Reader$b.create(r);
	    var c = l === undefined ? r.len : r.pos + l, m = new $root$b.Peer();
	    while (r.pos < c) {
	      var t = r.uint32();
	      switch (t >>> 3) {
	      case 1:
	        if (!(m.addresses && m.addresses.length))
	          m.addresses = [];
	        m.addresses.push($root$b.Address.decode(r, r.uint32()));
	        break;
	      case 2:
	        if (!(m.protocols && m.protocols.length))
	          m.protocols = [];
	        m.protocols.push(r.string());
	        break;
	      case 3:
	        if (!(m.metadata && m.metadata.length))
	          m.metadata = [];
	        m.metadata.push($root$b.Metadata.decode(r, r.uint32()));
	        break;
	      case 4:
	        m.pubKey = r.bytes();
	        break;
	      case 5:
	        m.peerRecordEnvelope = r.bytes();
	        break;
	      default:
	        r.skipType(t & 7);
	        break;
	      }
	    }
	    return m;
	  };
	  Peer.fromObject = function fromObject(d) {
	    if (d instanceof $root$b.Peer)
	      return d;
	    var m = new $root$b.Peer();
	    if (d.addresses) {
	      if (!Array.isArray(d.addresses))
	        throw TypeError('.Peer.addresses: array expected');
	      m.addresses = [];
	      for (var i = 0; i < d.addresses.length; ++i) {
	        if (typeof d.addresses[i] !== 'object')
	          throw TypeError('.Peer.addresses: object expected');
	        m.addresses[i] = $root$b.Address.fromObject(d.addresses[i]);
	      }
	    }
	    if (d.protocols) {
	      if (!Array.isArray(d.protocols))
	        throw TypeError('.Peer.protocols: array expected');
	      m.protocols = [];
	      for (var i = 0; i < d.protocols.length; ++i) {
	        m.protocols[i] = String(d.protocols[i]);
	      }
	    }
	    if (d.metadata) {
	      if (!Array.isArray(d.metadata))
	        throw TypeError('.Peer.metadata: array expected');
	      m.metadata = [];
	      for (var i = 0; i < d.metadata.length; ++i) {
	        if (typeof d.metadata[i] !== 'object')
	          throw TypeError('.Peer.metadata: object expected');
	        m.metadata[i] = $root$b.Metadata.fromObject(d.metadata[i]);
	      }
	    }
	    if (d.pubKey != null) {
	      if (typeof d.pubKey === 'string')
	        $util$b.base64.decode(d.pubKey, m.pubKey = $util$b.newBuffer($util$b.base64.length(d.pubKey)), 0);
	      else if (d.pubKey.length)
	        m.pubKey = d.pubKey;
	    }
	    if (d.peerRecordEnvelope != null) {
	      if (typeof d.peerRecordEnvelope === 'string')
	        $util$b.base64.decode(d.peerRecordEnvelope, m.peerRecordEnvelope = $util$b.newBuffer($util$b.base64.length(d.peerRecordEnvelope)), 0);
	      else if (d.peerRecordEnvelope.length)
	        m.peerRecordEnvelope = d.peerRecordEnvelope;
	    }
	    return m;
	  };
	  Peer.toObject = function toObject(m, o) {
	    if (!o)
	      o = {};
	    var d = {};
	    if (o.arrays || o.defaults) {
	      d.addresses = [];
	      d.protocols = [];
	      d.metadata = [];
	    }
	    if (m.addresses && m.addresses.length) {
	      d.addresses = [];
	      for (var j = 0; j < m.addresses.length; ++j) {
	        d.addresses[j] = $root$b.Address.toObject(m.addresses[j], o);
	      }
	    }
	    if (m.protocols && m.protocols.length) {
	      d.protocols = [];
	      for (var j = 0; j < m.protocols.length; ++j) {
	        d.protocols[j] = m.protocols[j];
	      }
	    }
	    if (m.metadata && m.metadata.length) {
	      d.metadata = [];
	      for (var j = 0; j < m.metadata.length; ++j) {
	        d.metadata[j] = $root$b.Metadata.toObject(m.metadata[j], o);
	      }
	    }
	    if (m.pubKey != null && m.hasOwnProperty('pubKey')) {
	      d.pubKey = o.bytes === String ? $util$b.base64.encode(m.pubKey, 0, m.pubKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.pubKey) : m.pubKey;
	      if (o.oneofs)
	        d._pubKey = 'pubKey';
	    }
	    if (m.peerRecordEnvelope != null && m.hasOwnProperty('peerRecordEnvelope')) {
	      d.peerRecordEnvelope = o.bytes === String ? $util$b.base64.encode(m.peerRecordEnvelope, 0, m.peerRecordEnvelope.length) : o.bytes === Array ? Array.prototype.slice.call(m.peerRecordEnvelope) : m.peerRecordEnvelope;
	      if (o.oneofs)
	        d._peerRecordEnvelope = 'peerRecordEnvelope';
	    }
	    return d;
	  };
	  Peer.prototype.toJSON = function toJSON() {
	    return this.constructor.toObject(this, minimal.util.toJSONOptions);
	  };
	  return Peer;
	})();
	$root$b.Address = (() => {
	  function Address(p) {
	    if (p)
	      for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	        if (p[ks[i]] != null)
	          this[ks[i]] = p[ks[i]];
	  }
	  Address.prototype.multiaddr = $util$b.newBuffer([]);
	  Address.prototype.isCertified = null;
	  let $oneOfFields;
	  Object.defineProperty(Address.prototype, '_isCertified', {
	    get: $util$b.oneOfGetter($oneOfFields = ['isCertified']),
	    set: $util$b.oneOfSetter($oneOfFields)
	  });
	  Address.encode = function encode(m, w) {
	    if (!w)
	      w = $Writer$b.create();
	    if (m.multiaddr != null && Object.hasOwnProperty.call(m, 'multiaddr'))
	      w.uint32(10).bytes(m.multiaddr);
	    if (m.isCertified != null && Object.hasOwnProperty.call(m, 'isCertified'))
	      w.uint32(16).bool(m.isCertified);
	    return w;
	  };
	  Address.decode = function decode(r, l) {
	    if (!(r instanceof $Reader$b))
	      r = $Reader$b.create(r);
	    var c = l === undefined ? r.len : r.pos + l, m = new $root$b.Address();
	    while (r.pos < c) {
	      var t = r.uint32();
	      switch (t >>> 3) {
	      case 1:
	        m.multiaddr = r.bytes();
	        break;
	      case 2:
	        m.isCertified = r.bool();
	        break;
	      default:
	        r.skipType(t & 7);
	        break;
	      }
	    }
	    return m;
	  };
	  Address.fromObject = function fromObject(d) {
	    if (d instanceof $root$b.Address)
	      return d;
	    var m = new $root$b.Address();
	    if (d.multiaddr != null) {
	      if (typeof d.multiaddr === 'string')
	        $util$b.base64.decode(d.multiaddr, m.multiaddr = $util$b.newBuffer($util$b.base64.length(d.multiaddr)), 0);
	      else if (d.multiaddr.length)
	        m.multiaddr = d.multiaddr;
	    }
	    if (d.isCertified != null) {
	      m.isCertified = Boolean(d.isCertified);
	    }
	    return m;
	  };
	  Address.toObject = function toObject(m, o) {
	    if (!o)
	      o = {};
	    var d = {};
	    if (o.defaults) {
	      if (o.bytes === String)
	        d.multiaddr = '';
	      else {
	        d.multiaddr = [];
	        if (o.bytes !== Array)
	          d.multiaddr = $util$b.newBuffer(d.multiaddr);
	      }
	    }
	    if (m.multiaddr != null && m.hasOwnProperty('multiaddr')) {
	      d.multiaddr = o.bytes === String ? $util$b.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;
	    }
	    if (m.isCertified != null && m.hasOwnProperty('isCertified')) {
	      d.isCertified = m.isCertified;
	      if (o.oneofs)
	        d._isCertified = 'isCertified';
	    }
	    return d;
	  };
	  Address.prototype.toJSON = function toJSON() {
	    return this.constructor.toObject(this, minimal.util.toJSONOptions);
	  };
	  return Address;
	})();
	$root$b.Metadata = (() => {
	  function Metadata(p) {
	    if (p)
	      for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	        if (p[ks[i]] != null)
	          this[ks[i]] = p[ks[i]];
	  }
	  Metadata.prototype.key = '';
	  Metadata.prototype.value = $util$b.newBuffer([]);
	  Metadata.encode = function encode(m, w) {
	    if (!w)
	      w = $Writer$b.create();
	    if (m.key != null && Object.hasOwnProperty.call(m, 'key'))
	      w.uint32(10).string(m.key);
	    if (m.value != null && Object.hasOwnProperty.call(m, 'value'))
	      w.uint32(18).bytes(m.value);
	    return w;
	  };
	  Metadata.decode = function decode(r, l) {
	    if (!(r instanceof $Reader$b))
	      r = $Reader$b.create(r);
	    var c = l === undefined ? r.len : r.pos + l, m = new $root$b.Metadata();
	    while (r.pos < c) {
	      var t = r.uint32();
	      switch (t >>> 3) {
	      case 1:
	        m.key = r.string();
	        break;
	      case 2:
	        m.value = r.bytes();
	        break;
	      default:
	        r.skipType(t & 7);
	        break;
	      }
	    }
	    return m;
	  };
	  Metadata.fromObject = function fromObject(d) {
	    if (d instanceof $root$b.Metadata)
	      return d;
	    var m = new $root$b.Metadata();
	    if (d.key != null) {
	      m.key = String(d.key);
	    }
	    if (d.value != null) {
	      if (typeof d.value === 'string')
	        $util$b.base64.decode(d.value, m.value = $util$b.newBuffer($util$b.base64.length(d.value)), 0);
	      else if (d.value.length)
	        m.value = d.value;
	    }
	    return m;
	  };
	  Metadata.toObject = function toObject(m, o) {
	    if (!o)
	      o = {};
	    var d = {};
	    if (o.defaults) {
	      d.key = '';
	      if (o.bytes === String)
	        d.value = '';
	      else {
	        d.value = [];
	        if (o.bytes !== Array)
	          d.value = $util$b.newBuffer(d.value);
	      }
	    }
	    if (m.key != null && m.hasOwnProperty('key')) {
	      d.key = m.key;
	    }
	    if (m.value != null && m.hasOwnProperty('value')) {
	      d.value = o.bytes === String ? $util$b.base64.encode(m.value, 0, m.value.length) : o.bytes === Array ? Array.prototype.slice.call(m.value) : m.value;
	    }
	    return d;
	  };
	  Metadata.prototype.toJSON = function toJSON() {
	    return this.constructor.toObject(this, minimal.util.toJSONOptions);
	  };
	  return Metadata;
	})();

	const $Reader$a = minimal.Reader, $Writer$a = minimal.Writer, $util$a = minimal.util;
	const $root$a = minimal.roots['default'] || (minimal.roots['default'] = {});
	const Envelope$5 = $root$a.Envelope = (() => {
	  function Envelope(p) {
	    if (p)
	      for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	        if (p[ks[i]] != null)
	          this[ks[i]] = p[ks[i]];
	  }
	  Envelope.prototype.publicKey = $util$a.newBuffer([]);
	  Envelope.prototype.payloadType = $util$a.newBuffer([]);
	  Envelope.prototype.payload = $util$a.newBuffer([]);
	  Envelope.prototype.signature = $util$a.newBuffer([]);
	  Envelope.encode = function encode(m, w) {
	    if (!w)
	      w = $Writer$a.create();
	    if (m.publicKey != null && Object.hasOwnProperty.call(m, 'publicKey'))
	      w.uint32(10).bytes(m.publicKey);
	    if (m.payloadType != null && Object.hasOwnProperty.call(m, 'payloadType'))
	      w.uint32(18).bytes(m.payloadType);
	    if (m.payload != null && Object.hasOwnProperty.call(m, 'payload'))
	      w.uint32(26).bytes(m.payload);
	    if (m.signature != null && Object.hasOwnProperty.call(m, 'signature'))
	      w.uint32(42).bytes(m.signature);
	    return w;
	  };
	  Envelope.decode = function decode(r, l) {
	    if (!(r instanceof $Reader$a))
	      r = $Reader$a.create(r);
	    var c = l === undefined ? r.len : r.pos + l, m = new $root$a.Envelope();
	    while (r.pos < c) {
	      var t = r.uint32();
	      switch (t >>> 3) {
	      case 1:
	        m.publicKey = r.bytes();
	        break;
	      case 2:
	        m.payloadType = r.bytes();
	        break;
	      case 3:
	        m.payload = r.bytes();
	        break;
	      case 5:
	        m.signature = r.bytes();
	        break;
	      default:
	        r.skipType(t & 7);
	        break;
	      }
	    }
	    return m;
	  };
	  Envelope.fromObject = function fromObject(d) {
	    if (d instanceof $root$a.Envelope)
	      return d;
	    var m = new $root$a.Envelope();
	    if (d.publicKey != null) {
	      if (typeof d.publicKey === 'string')
	        $util$a.base64.decode(d.publicKey, m.publicKey = $util$a.newBuffer($util$a.base64.length(d.publicKey)), 0);
	      else if (d.publicKey.length)
	        m.publicKey = d.publicKey;
	    }
	    if (d.payloadType != null) {
	      if (typeof d.payloadType === 'string')
	        $util$a.base64.decode(d.payloadType, m.payloadType = $util$a.newBuffer($util$a.base64.length(d.payloadType)), 0);
	      else if (d.payloadType.length)
	        m.payloadType = d.payloadType;
	    }
	    if (d.payload != null) {
	      if (typeof d.payload === 'string')
	        $util$a.base64.decode(d.payload, m.payload = $util$a.newBuffer($util$a.base64.length(d.payload)), 0);
	      else if (d.payload.length)
	        m.payload = d.payload;
	    }
	    if (d.signature != null) {
	      if (typeof d.signature === 'string')
	        $util$a.base64.decode(d.signature, m.signature = $util$a.newBuffer($util$a.base64.length(d.signature)), 0);
	      else if (d.signature.length)
	        m.signature = d.signature;
	    }
	    return m;
	  };
	  Envelope.toObject = function toObject(m, o) {
	    if (!o)
	      o = {};
	    var d = {};
	    if (o.defaults) {
	      if (o.bytes === String)
	        d.publicKey = '';
	      else {
	        d.publicKey = [];
	        if (o.bytes !== Array)
	          d.publicKey = $util$a.newBuffer(d.publicKey);
	      }
	      if (o.bytes === String)
	        d.payloadType = '';
	      else {
	        d.payloadType = [];
	        if (o.bytes !== Array)
	          d.payloadType = $util$a.newBuffer(d.payloadType);
	      }
	      if (o.bytes === String)
	        d.payload = '';
	      else {
	        d.payload = [];
	        if (o.bytes !== Array)
	          d.payload = $util$a.newBuffer(d.payload);
	      }
	      if (o.bytes === String)
	        d.signature = '';
	      else {
	        d.signature = [];
	        if (o.bytes !== Array)
	          d.signature = $util$a.newBuffer(d.signature);
	      }
	    }
	    if (m.publicKey != null && m.hasOwnProperty('publicKey')) {
	      d.publicKey = o.bytes === String ? $util$a.base64.encode(m.publicKey, 0, m.publicKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.publicKey) : m.publicKey;
	    }
	    if (m.payloadType != null && m.hasOwnProperty('payloadType')) {
	      d.payloadType = o.bytes === String ? $util$a.base64.encode(m.payloadType, 0, m.payloadType.length) : o.bytes === Array ? Array.prototype.slice.call(m.payloadType) : m.payloadType;
	    }
	    if (m.payload != null && m.hasOwnProperty('payload')) {
	      d.payload = o.bytes === String ? $util$a.base64.encode(m.payload, 0, m.payload.length) : o.bytes === Array ? Array.prototype.slice.call(m.payload) : m.payload;
	    }
	    if (m.signature != null && m.hasOwnProperty('signature')) {
	      d.signature = o.bytes === String ? $util$a.base64.encode(m.signature, 0, m.signature.length) : o.bytes === Array ? Array.prototype.slice.call(m.signature) : m.signature;
	    }
	    return d;
	  };
	  Envelope.prototype.toJSON = function toJSON() {
	    return this.constructor.toObject(this, minimal.util.toJSONOptions);
	  };
	  return Envelope;
	})();

	const $Reader$9 = minimal.Reader, $Writer$9 = minimal.Writer, $util$9 = minimal.util;
	const $root$9 = minimal.roots['default'] || (minimal.roots['default'] = {});
	const PeerRecord$4 = $root$9.PeerRecord = (() => {
	  function PeerRecord(p) {
	    this.addresses = [];
	    if (p)
	      for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	        if (p[ks[i]] != null)
	          this[ks[i]] = p[ks[i]];
	  }
	  PeerRecord.prototype.peerId = $util$9.newBuffer([]);
	  PeerRecord.prototype.seq = $util$9.Long ? $util$9.Long.fromBits(0, 0, true) : 0;
	  PeerRecord.prototype.addresses = $util$9.emptyArray;
	  PeerRecord.encode = function encode(m, w) {
	    if (!w)
	      w = $Writer$9.create();
	    if (m.peerId != null && Object.hasOwnProperty.call(m, 'peerId'))
	      w.uint32(10).bytes(m.peerId);
	    if (m.seq != null && Object.hasOwnProperty.call(m, 'seq'))
	      w.uint32(16).uint64(m.seq);
	    if (m.addresses != null && m.addresses.length) {
	      for (var i = 0; i < m.addresses.length; ++i)
	        $root$9.PeerRecord.AddressInfo.encode(m.addresses[i], w.uint32(26).fork()).ldelim();
	    }
	    return w;
	  };
	  PeerRecord.decode = function decode(r, l) {
	    if (!(r instanceof $Reader$9))
	      r = $Reader$9.create(r);
	    var c = l === undefined ? r.len : r.pos + l, m = new $root$9.PeerRecord();
	    while (r.pos < c) {
	      var t = r.uint32();
	      switch (t >>> 3) {
	      case 1:
	        m.peerId = r.bytes();
	        break;
	      case 2:
	        m.seq = r.uint64();
	        break;
	      case 3:
	        if (!(m.addresses && m.addresses.length))
	          m.addresses = [];
	        m.addresses.push($root$9.PeerRecord.AddressInfo.decode(r, r.uint32()));
	        break;
	      default:
	        r.skipType(t & 7);
	        break;
	      }
	    }
	    return m;
	  };
	  PeerRecord.fromObject = function fromObject(d) {
	    if (d instanceof $root$9.PeerRecord)
	      return d;
	    var m = new $root$9.PeerRecord();
	    if (d.peerId != null) {
	      if (typeof d.peerId === 'string')
	        $util$9.base64.decode(d.peerId, m.peerId = $util$9.newBuffer($util$9.base64.length(d.peerId)), 0);
	      else if (d.peerId.length)
	        m.peerId = d.peerId;
	    }
	    if (d.seq != null) {
	      if ($util$9.Long)
	        (m.seq = $util$9.Long.fromValue(d.seq)).unsigned = true;
	      else if (typeof d.seq === 'string')
	        m.seq = parseInt(d.seq, 10);
	      else if (typeof d.seq === 'number')
	        m.seq = d.seq;
	      else if (typeof d.seq === 'object')
	        m.seq = new $util$9.LongBits(d.seq.low >>> 0, d.seq.high >>> 0).toNumber(true);
	    }
	    if (d.addresses) {
	      if (!Array.isArray(d.addresses))
	        throw TypeError('.PeerRecord.addresses: array expected');
	      m.addresses = [];
	      for (var i = 0; i < d.addresses.length; ++i) {
	        if (typeof d.addresses[i] !== 'object')
	          throw TypeError('.PeerRecord.addresses: object expected');
	        m.addresses[i] = $root$9.PeerRecord.AddressInfo.fromObject(d.addresses[i]);
	      }
	    }
	    return m;
	  };
	  PeerRecord.toObject = function toObject(m, o) {
	    if (!o)
	      o = {};
	    var d = {};
	    if (o.arrays || o.defaults) {
	      d.addresses = [];
	    }
	    if (o.defaults) {
	      if (o.bytes === String)
	        d.peerId = '';
	      else {
	        d.peerId = [];
	        if (o.bytes !== Array)
	          d.peerId = $util$9.newBuffer(d.peerId);
	      }
	      if ($util$9.Long) {
	        var n = new $util$9.Long(0, 0, true);
	        d.seq = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	      } else
	        d.seq = o.longs === String ? '0' : 0;
	    }
	    if (m.peerId != null && m.hasOwnProperty('peerId')) {
	      d.peerId = o.bytes === String ? $util$9.base64.encode(m.peerId, 0, m.peerId.length) : o.bytes === Array ? Array.prototype.slice.call(m.peerId) : m.peerId;
	    }
	    if (m.seq != null && m.hasOwnProperty('seq')) {
	      if (typeof m.seq === 'number')
	        d.seq = o.longs === String ? String(m.seq) : m.seq;
	      else
	        d.seq = o.longs === String ? $util$9.Long.prototype.toString.call(m.seq) : o.longs === Number ? new $util$9.LongBits(m.seq.low >>> 0, m.seq.high >>> 0).toNumber(true) : m.seq;
	    }
	    if (m.addresses && m.addresses.length) {
	      d.addresses = [];
	      for (var j = 0; j < m.addresses.length; ++j) {
	        d.addresses[j] = $root$9.PeerRecord.AddressInfo.toObject(m.addresses[j], o);
	      }
	    }
	    return d;
	  };
	  PeerRecord.prototype.toJSON = function toJSON() {
	    return this.constructor.toObject(this, minimal.util.toJSONOptions);
	  };
	  PeerRecord.AddressInfo = function () {
	    function AddressInfo(p) {
	      if (p)
	        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	          if (p[ks[i]] != null)
	            this[ks[i]] = p[ks[i]];
	    }
	    AddressInfo.prototype.multiaddr = $util$9.newBuffer([]);
	    AddressInfo.encode = function encode(m, w) {
	      if (!w)
	        w = $Writer$9.create();
	      if (m.multiaddr != null && Object.hasOwnProperty.call(m, 'multiaddr'))
	        w.uint32(10).bytes(m.multiaddr);
	      return w;
	    };
	    AddressInfo.decode = function decode(r, l) {
	      if (!(r instanceof $Reader$9))
	        r = $Reader$9.create(r);
	      var c = l === undefined ? r.len : r.pos + l, m = new $root$9.PeerRecord.AddressInfo();
	      while (r.pos < c) {
	        var t = r.uint32();
	        switch (t >>> 3) {
	        case 1:
	          m.multiaddr = r.bytes();
	          break;
	        default:
	          r.skipType(t & 7);
	          break;
	        }
	      }
	      return m;
	    };
	    AddressInfo.fromObject = function fromObject(d) {
	      if (d instanceof $root$9.PeerRecord.AddressInfo)
	        return d;
	      var m = new $root$9.PeerRecord.AddressInfo();
	      if (d.multiaddr != null) {
	        if (typeof d.multiaddr === 'string')
	          $util$9.base64.decode(d.multiaddr, m.multiaddr = $util$9.newBuffer($util$9.base64.length(d.multiaddr)), 0);
	        else if (d.multiaddr.length)
	          m.multiaddr = d.multiaddr;
	      }
	      return m;
	    };
	    AddressInfo.toObject = function toObject(m, o) {
	      if (!o)
	        o = {};
	      var d = {};
	      if (o.defaults) {
	        if (o.bytes === String)
	          d.multiaddr = '';
	        else {
	          d.multiaddr = [];
	          if (o.bytes !== Array)
	            d.multiaddr = $util$9.newBuffer(d.multiaddr);
	        }
	      }
	      if (m.multiaddr != null && m.hasOwnProperty('multiaddr')) {
	        d.multiaddr = o.bytes === String ? $util$9.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;
	      }
	      return d;
	    };
	    AddressInfo.prototype.toJSON = function toJSON() {
	      return this.constructor.toObject(this, minimal.util.toJSONOptions);
	    };
	    return AddressInfo;
	  }();
	  return PeerRecord;
	})();

	minimal.util.Long = undefined;
	minimal.configure();
	async function storePeerUnderSingleDatastoreKey(backends, onProgress = () => {
	}) {
	  onProgress(0, 'Storing each peerstore key under a single datastore key');
	  await backends.datastore.open();
	  const peers = {};
	  const keys = [];
	  for await (const {key, value} of backends.datastore.query({ prefix: '/peers' })) {
	    keys.push(key);
	    const keyStr = key.toString();
	    const [_, prefix, type, peerId, metadataKey] = keyStr.split('/');
	    if (prefix !== 'peers') {
	      continue;
	    }
	    if (![
	        'protos',
	        'addrs',
	        'metadata',
	        'keys'
	      ].includes(type)) {
	      continue;
	    }
	    if (!peerId) {
	      continue;
	    }
	    peers[peerId] = peers[peerId] || {
	      addresses: [],
	      protocols: [],
	      metadata: []
	    };
	    if (type === 'protos') {
	      const protos = Protocols.decode(value);
	      peers[peerId].protocols = protos.protocols.sort();
	    } else if (type === 'addrs') {
	      const addrs = Addresses.decode(value);
	      peers[peerId].addresses = addrs.addrs.sort((a, b) => {
	        return new src$s.Multiaddr(a.multiaddr).toString().localeCompare(new src$s.Multiaddr(b.multiaddr).toString());
	      });
	      if (addrs.certifiedRecord && addrs.certifiedRecord.raw) {
	        peers[peerId].peerRecordEnvelope = addrs.certifiedRecord.raw;
	      }
	    } else if (type === 'metadata') {
	      peers[peerId].metadata.push({
	        key: metadataKey,
	        value
	      });
	    } else if (type === 'keys') {
	      peers[peerId].pubKey = value;
	    }
	  }
	  onProgress(33, 'Read peer data from store');
	  for (const key of keys) {
	    await backends.datastore.delete(key);
	  }
	  onProgress(66, 'Removed existing peer data from store');
	  for (const peerId of Object.keys(peers)) {
	    const peer = peers[peerId];
	    peer.metadata = peer.metadata.sort((a, b) => a.key.localeCompare(b.key));
	    const data = Peer$1.encode(peer).finish();
	    await backends.datastore.put(new Key$5(`/peers/${ peerId }`), data);
	  }
	  await backends.datastore.close();
	  onProgress(100, 'Stored each peerstore key under a single datastore key');
	}
	async function storePeerUnderMultipleDatastoreKeys(backends, onProgress = () => {
	}) {
	  onProgress(0, 'Storing each peerstore key under a multiple datastore keys');
	  await backends.datastore.open();
	  const peers = {};
	  const keys = [];
	  for await (const {key, value} of backends.datastore.query({ prefix: '/peers' })) {
	    keys.push(key);
	    const keyStr = key.toString();
	    const [_, _prefix, peerId] = keyStr.split('/');
	    peers[peerId] = Peer$1.decode(value);
	  }
	  onProgress(33, 'Read peer data from store');
	  for (const key of keys) {
	    await backends.datastore.delete(key);
	  }
	  onProgress(66, 'Removed existing peer data from store');
	  for (const [peerId, peer] of Object.entries(peers)) {
	    if (peer.protocols && peer.protocols.length > 0) {
	      await backends.datastore.put(new Key$5(`/peers/protos/${ peerId }`), Protocols.encode({ protocols: peer.protocols }).finish());
	    }
	    if (peer.addresses && peer.addresses.length > 0) {
	      const peerRecordEnvelope = peer.peerRecordEnvelope;
	      let certifiedRecord;
	      if (peerRecordEnvelope) {
	        const envelope = Envelope$5.decode(peerRecordEnvelope);
	        const record = PeerRecord$4.decode(envelope.payload);
	        certifiedRecord = {
	          raw: peerRecordEnvelope,
	          seq: record.seq
	        };
	      }
	      await backends.datastore.put(new Key$5(`/peers/addrs/${ peerId }`), Addresses.encode({
	        addrs: peer.addresses,
	        certifiedRecord
	      }).finish());
	    }
	    if (peer.metadata && peer.metadata.length > 0) {
	      for (const {key, value} of peer.metadata) {
	        await backends.datastore.put(new Key$5(`/peers/metadata/${ peerId }/${ key }`), value);
	      }
	    }
	    if (peer.pubKey) {
	      await backends.datastore.put(new Key$5(`/peers/keys/${ peerId }`), peer.pubKey);
	    }
	  }
	  await backends.datastore.close();
	  onProgress(100, 'Stored each peerstore key under multiple datastore keys');
	}
	const migration = {
	  version: 12,
	  description: 'Store each peerstore peer under a single datastore key',
	  migrate: storePeerUnderSingleDatastoreKey,
	  revert: storePeerUnderMultipleDatastoreKeys
	};

	const emptyMigration = {
	  description: 'Empty migration.',
	  migrate: () => {
	  },
	  revert: () => {
	  },
	  empty: true
	};
	var defaultMigrations = [
	  Object.assign({ version: 1 }, emptyMigration),
	  Object.assign({ version: 2 }, emptyMigration),
	  Object.assign({ version: 3 }, emptyMigration),
	  Object.assign({ version: 4 }, emptyMigration),
	  Object.assign({ version: 5 }, emptyMigration),
	  Object.assign({ version: 6 }, emptyMigration),
	  Object.assign({ version: 7 }, emptyMigration),
	  migration$4,
	  migration$3,
	  migration$2,
	  migration$1,
	  migration
	];

	class NonReversibleMigrationError extends Error {
	  constructor(message) {
	    super(message);
	    this.name = 'NonReversibleMigrationError';
	    this.code = NonReversibleMigrationError.code;
	    this.message = message;
	  }
	}
	NonReversibleMigrationError.code = 'ERR_NON_REVERSIBLE_MIGRATION';
	class NotInitializedRepoError extends Error {
	  constructor(message) {
	    super(message);
	    this.name = 'NotInitializedRepoError';
	    this.code = NotInitializedRepoError.code;
	    this.message = message;
	  }
	}
	NotInitializedRepoError.code = 'ERR_NOT_INITIALIZED_REPO';
	class RequiredParameterError extends Error {
	  constructor(message) {
	    super(message);
	    this.name = 'RequiredParameterError';
	    this.code = RequiredParameterError.code;
	    this.message = message;
	  }
	}
	RequiredParameterError.code = 'ERR_REQUIRED_PARAMETER';
	class InvalidValueError extends Error {
	  constructor(message) {
	    super(message);
	    this.name = 'InvalidValueError';
	    this.code = InvalidValueError.code;
	    this.message = message;
	  }
	}
	InvalidValueError.code = 'ERR_INVALID_VALUE';
	class MissingRepoOptionsError extends Error {
	  constructor(message) {
	    super(message);
	    this.name = 'MissingRepoOptionsError';
	    this.code = MissingRepoOptionsError.code;
	    this.message = message;
	  }
	}
	MissingRepoOptionsError.code = 'ERR_MISSING_REPO_OPTIONS';

	var Errors$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		NonReversibleMigrationError: NonReversibleMigrationError,
		NotInitializedRepoError: NotInitializedRepoError,
		RequiredParameterError: RequiredParameterError,
		InvalidValueError: InvalidValueError,
		MissingRepoOptionsError: MissingRepoOptionsError
	});

	const log$_ = debug$S('ipfs:repo:migrator:repo:init');
	async function isRepoInitialized(backends) {
	  if (!backends) {
	    throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo');
	  }
	  const root = backends.root;
	  try {
	    await root.open();
	    const versionCheck = await root.has(VERSION_KEY);
	    const configCheck = await root.has(CONFIG_KEY);
	    if (!versionCheck || !configCheck) {
	      log$_(`Version entry present: ${ versionCheck }`);
	      log$_(`Config entry present: ${ configCheck }`);
	      return false;
	    }
	    return true;
	  } catch (e) {
	    log$_('While checking if repo is initialized error was thrown: ' + e.message);
	    return false;
	  } finally {
	    if (root !== undefined) {
	      try {
	        await root.close();
	      } catch {
	      }
	    }
	  }
	}

	async function getVersion(backends) {
	  if (!await isRepoInitialized(backends)) {
	    throw new NotInitializedRepoError('Repo is not initialized!');
	  }
	  const store = backends.root;
	  await store.open();
	  try {
	    return parseInt(toString$6(await store.get(VERSION_KEY)));
	  } finally {
	    await store.close();
	  }
	}
	async function setVersion(version, backends) {
	  if (!backends) {
	    throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo');
	  }
	  const store = backends.root;
	  await store.open();
	  await store.put(VERSION_KEY, fromString$4(String(version)));
	  await store.close();
	}

	const log$Z = debug$S('ipfs:repo:migrator');
	function getLatestMigrationVersion(migrations) {
	  migrations = migrations || defaultMigrations;
	  if (!Array.isArray(migrations) || migrations.length === 0) {
	    return 0;
	  }
	  return migrations[migrations.length - 1].version;
	}
	async function migrate(path, backends, repoOptions, toVersion, {ignoreLock = false, onProgress, isDryRun = false, migrations}) {
	  migrations = migrations || defaultMigrations;
	  if (!path) {
	    throw new errors$7.RequiredParameterError('Path argument is required!');
	  }
	  if (!repoOptions) {
	    throw new errors$7.RequiredParameterError('repoOptions argument is required!');
	  }
	  if (!toVersion) {
	    throw new errors$7.RequiredParameterError('toVersion argument is required!');
	  }
	  if (!Number.isInteger(toVersion) || toVersion <= 0) {
	    throw new errors$7.InvalidValueError('Version has to be positive integer!');
	  }
	  backends = wrapBackends(backends);
	  const currentVersion = await getVersion(backends);
	  if (currentVersion === toVersion) {
	    log$Z('Nothing to migrate.');
	    return;
	  }
	  if (currentVersion > toVersion) {
	    throw new errors$7.InvalidValueError(`Current repo's version (${ currentVersion }) is higher then toVersion (${ toVersion }), you probably wanted to revert it?`);
	  }
	  verifyAvailableMigrations(migrations, currentVersion, toVersion);
	  let lock;
	  if (!isDryRun && !ignoreLock) {
	    lock = await repoOptions.repoLock.lock(path);
	  }
	  try {
	    for (const migration of migrations) {
	      if (toVersion !== undefined && migration.version > toVersion) {
	        break;
	      }
	      if (migration.version <= currentVersion) {
	        continue;
	      }
	      log$Z(`Migrating version ${ migration.version }`);
	      try {
	        if (!isDryRun) {
	          let progressCallback = () => {
	          };
	          if (onProgress) {
	            progressCallback = (percent, message) => onProgress(migration.version, percent.toFixed(2), message);
	          }
	          await migration.migrate(backends, progressCallback);
	        }
	      } catch (e) {
	        const lastSuccessfullyMigratedVersion = migration.version - 1;
	        log$Z(`An exception was raised during execution of migration. Setting the repo's version to last successfully migrated version: ${ lastSuccessfullyMigratedVersion }`);
	        await setVersion(lastSuccessfullyMigratedVersion, backends);
	        throw new Error(`During migration to version ${ migration.version } exception was raised: ${ e.stack || e.message || e }`);
	      }
	      log$Z(`Migrating to version ${ migration.version } finished`);
	    }
	    if (!isDryRun) {
	      await setVersion(toVersion || getLatestMigrationVersion(migrations), backends);
	    }
	    log$Z('Repo successfully migrated', toVersion !== undefined ? `to version ${ toVersion }!` : 'to latest version!');
	  } finally {
	    if (!isDryRun && !ignoreLock && lock) {
	      await lock.close();
	    }
	  }
	}
	async function revert(path, backends, repoOptions, toVersion, {ignoreLock = false, onProgress, isDryRun = false, migrations}) {
	  migrations = migrations || defaultMigrations;
	  if (!path) {
	    throw new errors$7.RequiredParameterError('Path argument is required!');
	  }
	  if (!repoOptions) {
	    throw new errors$7.RequiredParameterError('repoOptions argument is required!');
	  }
	  if (!toVersion) {
	    throw new errors$7.RequiredParameterError('When reverting migrations, you have to specify to which version to revert!');
	  }
	  if (!Number.isInteger(toVersion) || toVersion <= 0) {
	    throw new errors$7.InvalidValueError('Version has to be positive integer!');
	  }
	  backends = wrapBackends(backends);
	  const currentVersion = await getVersion(backends);
	  if (currentVersion === toVersion) {
	    log$Z('Nothing to revert.');
	    return;
	  }
	  if (currentVersion < toVersion) {
	    throw new errors$7.InvalidValueError(`Current repo's version (${ currentVersion }) is lower then toVersion (${ toVersion }), you probably wanted to migrate it?`);
	  }
	  verifyAvailableMigrations(migrations, toVersion, currentVersion, true);
	  let lock;
	  if (!isDryRun && !ignoreLock) {
	    lock = await repoOptions.repoLock.lock(path);
	  }
	  log$Z(`Reverting from version ${ currentVersion } to ${ toVersion }`);
	  try {
	    const reversedMigrationArray = migrations.slice().reverse();
	    for (const migration of reversedMigrationArray) {
	      if (migration.version <= toVersion) {
	        break;
	      }
	      if (migration.version > currentVersion) {
	        continue;
	      }
	      log$Z(`Reverting migration version ${ migration.version }`);
	      try {
	        if (!isDryRun) {
	          let progressCallback = () => {
	          };
	          if (onProgress) {
	            progressCallback = (percent, message) => onProgress(migration.version, percent.toFixed(2), message);
	          }
	          await migration.revert(backends, progressCallback);
	        }
	      } catch (e) {
	        const lastSuccessfullyRevertedVersion = migration.version;
	        log$Z(`An exception was raised during execution of migration. Setting the repo's version to last successfully reverted version: ${ lastSuccessfullyRevertedVersion }`);
	        await setVersion(lastSuccessfullyRevertedVersion, backends);
	        e.message = `During reversion to version ${ migration.version } exception was raised: ${ e.message }`;
	        throw e;
	      }
	      log$Z(`Reverting to version ${ migration.version } finished`);
	    }
	    if (!isDryRun) {
	      await setVersion(toVersion, backends);
	    }
	    log$Z(`All migrations successfully reverted to version ${ toVersion }!`);
	  } finally {
	    if (!isDryRun && !ignoreLock && lock) {
	      await lock.close();
	    }
	  }
	}
	function verifyAvailableMigrations(migrations, fromVersion, toVersion, checkReversibility = false) {
	  let migrationCounter = 0;
	  for (const migration of migrations) {
	    if (migration.version > toVersion) {
	      break;
	    }
	    if (migration.version > fromVersion) {
	      if (checkReversibility && !migration.revert) {
	        throw new errors$7.NonReversibleMigrationError(`It is not possible to revert to version ${ fromVersion } because migration version ${ migration.version } is not reversible. Cancelling reversion.`);
	      }
	      migrationCounter++;
	    }
	  }
	  if (migrationCounter !== toVersion - fromVersion) {
	    throw new errors$7.InvalidValueError(`The ipfs-repo-migrations package does not have all migration to migrate from version ${ fromVersion } to ${ toVersion }`);
	  }
	}
	const errors$7 = Errors$1;

	var bytes$2 = {exports: {}};

	/*!
	 * bytes
	 * Copyright(c) 2012-2014 TJ Holowaychuk
	 * Copyright(c) 2015 Jed Watson
	 * MIT Licensed
	 */

	/**
	 * Module exports.
	 * @public
	 */

	bytes$2.exports = bytes;
	bytes$2.exports.format = format$1;
	bytes$2.exports.parse = parse;

	/**
	 * Module variables.
	 * @private
	 */

	var formatThousandsRegExp = /\B(?=(\d{3})+(?!\d))/g;

	var formatDecimalsRegExp = /(?:\.0*|(\.[^0]+)0+)$/;

	var map$6 = {
	  b:  1,
	  kb: 1 << 10,
	  mb: 1 << 20,
	  gb: 1 << 30,
	  tb: Math.pow(1024, 4),
	  pb: Math.pow(1024, 5),
	};

	var parseRegExp = /^((-|\+)?(\d+(?:\.\d+)?)) *(kb|mb|gb|tb|pb)$/i;

	/**
	 * Convert the given value in bytes into a string or parse to string to an integer in bytes.
	 *
	 * @param {string|number} value
	 * @param {{
	 *  case: [string],
	 *  decimalPlaces: [number]
	 *  fixedDecimals: [boolean]
	 *  thousandsSeparator: [string]
	 *  unitSeparator: [string]
	 *  }} [options] bytes options.
	 *
	 * @returns {string|number|null}
	 */

	function bytes(value, options) {
	  if (typeof value === 'string') {
	    return parse(value);
	  }

	  if (typeof value === 'number') {
	    return format$1(value, options);
	  }

	  return null;
	}

	/**
	 * Format the given value in bytes into a string.
	 *
	 * If the value is negative, it is kept as such. If it is a float,
	 * it is rounded.
	 *
	 * @param {number} value
	 * @param {object} [options]
	 * @param {number} [options.decimalPlaces=2]
	 * @param {number} [options.fixedDecimals=false]
	 * @param {string} [options.thousandsSeparator=]
	 * @param {string} [options.unit=]
	 * @param {string} [options.unitSeparator=]
	 *
	 * @returns {string|null}
	 * @public
	 */

	function format$1(value, options) {
	  if (!Number.isFinite(value)) {
	    return null;
	  }

	  var mag = Math.abs(value);
	  var thousandsSeparator = (options && options.thousandsSeparator) || '';
	  var unitSeparator = (options && options.unitSeparator) || '';
	  var decimalPlaces = (options && options.decimalPlaces !== undefined) ? options.decimalPlaces : 2;
	  var fixedDecimals = Boolean(options && options.fixedDecimals);
	  var unit = (options && options.unit) || '';

	  if (!unit || !map$6[unit.toLowerCase()]) {
	    if (mag >= map$6.pb) {
	      unit = 'PB';
	    } else if (mag >= map$6.tb) {
	      unit = 'TB';
	    } else if (mag >= map$6.gb) {
	      unit = 'GB';
	    } else if (mag >= map$6.mb) {
	      unit = 'MB';
	    } else if (mag >= map$6.kb) {
	      unit = 'KB';
	    } else {
	      unit = 'B';
	    }
	  }

	  var val = value / map$6[unit.toLowerCase()];
	  var str = val.toFixed(decimalPlaces);

	  if (!fixedDecimals) {
	    str = str.replace(formatDecimalsRegExp, '$1');
	  }

	  if (thousandsSeparator) {
	    str = str.split('.').map(function (s, i) {
	      return i === 0
	        ? s.replace(formatThousandsRegExp, thousandsSeparator)
	        : s
	    }).join('.');
	  }

	  return str + unitSeparator + unit;
	}

	/**
	 * Parse the string value into an integer in bytes.
	 *
	 * If no unit is given, it is assumed the value is in bytes.
	 *
	 * @param {number|string} val
	 *
	 * @returns {number|null}
	 * @public
	 */

	function parse(val) {
	  if (typeof val === 'number' && !isNaN(val)) {
	    return val;
	  }

	  if (typeof val !== 'string') {
	    return null;
	  }

	  // Test if the string passed is valid
	  var results = parseRegExp.exec(val);
	  var floatValue;
	  var unit = 'b';

	  if (!results) {
	    // Nothing could be extracted from the given string
	    floatValue = parseInt(val, 10);
	    unit = 'b';
	  } else {
	    // Retrieve the value and the unit
	    floatValue = parseFloat(results[1]);
	    unit = results[4].toLowerCase();
	  }

	  if (isNaN(floatValue)) {
	    return null;
	  }

	  return Math.floor(map$6[unit] * floatValue);
	}

	var bytes$1 = bytes$2.exports;

	class LockExistsError extends Error {
	  constructor(message) {
	    super(message);
	    this.name = 'LockExistsError';
	    this.code = LockExistsError.code;
	  }
	}
	LockExistsError.code = 'ERR_LOCK_EXISTS';
	class NotFoundError$1 extends Error {
	  constructor(message) {
	    super(message);
	    this.name = 'NotFoundError';
	    this.code = NotFoundError$1.code;
	  }
	}
	NotFoundError$1.code = 'ERR_NOT_FOUND';
	class InvalidRepoVersionError extends Error {
	  constructor(message) {
	    super(message);
	    this.name = 'InvalidRepoVersionError';
	    this.code = InvalidRepoVersionError.code;
	  }
	}
	InvalidRepoVersionError.code = 'ERR_INVALID_REPO_VERSION';
	const ERR_REPO_NOT_INITIALIZED = 'ERR_REPO_NOT_INITIALIZED';
	const ERR_REPO_ALREADY_OPEN = 'ERR_REPO_ALREADY_OPEN';
	const ERR_REPO_ALREADY_CLOSED = 'ERR_REPO_ALREADY_CLOSED';

	async function hasWithFallback(key, has, store) {
	  const result = await has(key);
	  if (result) {
	    return result;
	  }
	  const levelJs = findLevelJs(store);
	  if (!levelJs) {
	    return false;
	  }
	  return new Promise((resolve, reject) => {
	    const req = levelJs.store('readonly').get(key.toString());
	    req.transaction.onabort = () => {
	      reject(req.transaction.error);
	    };
	    req.transaction.oncomplete = () => {
	      resolve(Boolean(req.result));
	    };
	  });
	}
	async function getWithFallback(key, get, has, store) {
	  if (await has(key)) {
	    return get(key);
	  }
	  const levelJs = findLevelJs(store);
	  if (!levelJs) {
	    throw new NotFoundError$1();
	  }
	  return new Promise((resolve, reject) => {
	    const req = levelJs.store('readonly').get(key.toString());
	    req.transaction.onabort = () => {
	      reject(req.transaction.error);
	    };
	    req.transaction.oncomplete = () => {
	      if (req.result) {
	        return resolve(req.result);
	      }
	      reject(new NotFoundError$1());
	    };
	  });
	}
	function findLevelJs(store) {
	  let db = store;
	  while (db.db || db.child) {
	    db = db.db || db.child;
	    if (db.type === 'level-js' || db.constructor.name === 'Level') {
	      return db;
	    }
	  }
	}

	const log$Y = debug$S('ipfs:repo:version');
	const versionKey = new Key$5('version');
	function version$1(store) {
	  return {
	    async exists() {
	      return hasWithFallback(versionKey, store.has.bind(store), store);
	    },
	    async get() {
	      const buf = await getWithFallback(versionKey, store.get.bind(store), store.has.bind(store), store);
	      return parseInt(toString$6(buf), 10);
	    },
	    set(version) {
	      return store.put(versionKey, fromString$4(String(version)));
	    },
	    async check(expected) {
	      const version = await this.get();
	      log$Y('comparing version: %s and %s', version, expected);
	      const compatibleVersion = version === 6 && expected === 7 || expected === 6 && version === 7;
	      return version === expected || compatibleVersion;
	    }
	  };
	}

	const Queue$4 = _default.default ? _default.default : _default;
	const configKey = new Key$5('config');
	function config$2(store) {
	  const setQueue = new Queue$4({ concurrency: 1 });
	  const configStore = {
	    async getAll(options = {}) {
	      const encodedValue = await getWithFallback(configKey, store.get.bind(store), store.has.bind(store), store);
	      return JSON.parse(toString$6(encodedValue));
	    },
	    async get(key, options = {}) {
	      if (key == null) {
	        throw new NotFoundError$1(`Key ${ key } does not exist in config`);
	      }
	      const config = await this.getAll(options);
	      const value = justSafeGet(config, key);
	      if (value === undefined) {
	        throw new NotFoundError$1(`Key ${ key } does not exist in config`);
	      }
	      return value;
	    },
	    set(key, value, options = {}) {
	      if (typeof key !== 'string' && !(key instanceof String)) {
	        throw errCode$q(new Error('Invalid key type: ' + typeof key), 'ERR_INVALID_KEY');
	      }
	      if (value === undefined || value instanceof Uint8Array) {
	        throw errCode$q(new Error('Invalid value type: ' + typeof value), 'ERR_INVALID_VALUE');
	      }
	      return setQueue.add(() => _maybeDoSet({
	        key: key,
	        value: value
	      }, options.signal));
	    },
	    replace(value, options = {}) {
	      if (!value || value instanceof Uint8Array) {
	        throw errCode$q(new Error('Invalid value type: ' + typeof value), 'ERR_INVALID_VALUE');
	      }
	      return setQueue.add(() => _maybeDoSet({
	        key: undefined,
	        value: value
	      }, options.signal));
	    },
	    async exists() {
	      return hasWithFallback(configKey, store.has.bind(store), store);
	    }
	  };
	  return configStore;
	  async function _maybeDoSet(m, signal) {
	    if (signal && signal.aborted) {
	      return;
	    }
	    const key = m.key;
	    const value = m.value;
	    if (key) {
	      const config = await configStore.getAll();
	      if (typeof config === 'object' && config !== null) {
	        justSafeSet(config, key, value);
	      }
	      return _saveAll(config);
	    }
	    return _saveAll(value);
	  }
	  function _saveAll(config) {
	    const buf = fromString$4(JSON.stringify(config, null, 2));
	    return store.put(configKey, buf);
	  }
	}

	const isPlainObject = isPlainObj;

	var sortKeys = (object, options = {}) => {
		if (!isPlainObject(object) && !Array.isArray(object)) {
			throw new TypeError('Expected a plain object or array');
		}

		const {deep} = options;
		const seenInput = [];
		const seenOutput = [];

		const deepSortArray = array => {
			const seenIndex = seenInput.indexOf(array);

			if (seenIndex !== -1) {
				return seenOutput[seenIndex];
			}

			const result = [];
			seenInput.push(array);
			seenOutput.push(result);

			result.push(...array.map(item => {
				if (Array.isArray(item)) {
					return deepSortArray(item);
				}

				if (isPlainObject(item)) {
					return sortKeys(item);
				}

				return item;
			}));

			return result;
		};

		const sortKeys = object => {
			const seenIndex = seenInput.indexOf(object);

			if (seenIndex !== -1) {
				return seenOutput[seenIndex];
			}

			const result = {};
			const keys = Object.keys(object).sort(options.compare);

			seenInput.push(object);
			seenOutput.push(result);

			for (const key of keys) {
				const value = object[key];
				let newValue;

				if (deep && Array.isArray(value)) {
					newValue = deepSortArray(value);
				} else {
					newValue = deep && isPlainObject(value) ? sortKeys(value) : value;
				}

				Object.defineProperty(result, key, {
					...Object.getOwnPropertyDescriptor(object, key),
					value: newValue
				});
			}

			return result;
		};

		if (Array.isArray(object)) {
			return deep ? deepSortArray(object) : object.slice();
		}

		return sortKeys(object);
	};

	const specKey = new Key$5('datastore_spec');
	function spec(store) {
	  return {
	    exists() {
	      return store.has(specKey);
	    },
	    async get() {
	      const buf = await store.get(specKey);
	      return JSON.parse(toString$6(buf));
	    },
	    async set(spec) {
	      return store.put(specKey, fromString$4(JSON.stringify(sortKeys(spec, { deep: true }))));
	    }
	  };
	}

	const apiFile = new Key$5('api');
	function apiAddr(store) {
	  return {
	    async get() {
	      const value = await store.get(apiFile);
	      return value && value.toString();
	    },
	    set(value) {
	      return store.put(apiFile, fromString$4(value.toString()));
	    },
	    delete() {
	      return store.delete(apiFile);
	    }
	  };
	}

	function createIdStore(store) {
	  return {
	    open() {
	      return store.open();
	    },
	    close() {
	      return store.close();
	    },
	    query(query, options) {
	      return store.query(query, options);
	    },
	    queryKeys(query, options) {
	      return store.queryKeys(query, options);
	    },
	    async get(cid, options) {
	      const extracted = extractContents(cid);
	      if (extracted.isIdentity) {
	        return Promise.resolve(extracted.digest);
	      }
	      return store.get(cid, options);
	    },
	    async *getMany(cids, options) {
	      for await (const cid of cids) {
	        yield this.get(cid, options);
	      }
	    },
	    async put(cid, buf, options) {
	      const {isIdentity} = extractContents(cid);
	      if (isIdentity) {
	        return;
	      }
	      await store.put(cid, buf, options);
	    },
	    async *putMany(pairs, options) {
	      const output = itPushable();
	      const runner = globalThis.process && globalThis.process.nextTick ? globalThis.process.nextTick : globalThis.setImmediate || globalThis.setTimeout;
	      runner(async () => {
	        try {
	          await itDrain(store.putMany(async function* () {
	            for await (const {key, value} of pairs) {
	              if (!extractContents(key).isIdentity) {
	                yield {
	                  key,
	                  value
	                };
	              }
	              output.push({
	                key,
	                value
	              });
	            }
	          }()));
	          output.end();
	        } catch (err) {
	          output.end(err);
	        }
	      });
	      yield* output;
	    },
	    has(cid, options) {
	      const {isIdentity} = extractContents(cid);
	      if (isIdentity) {
	        return Promise.resolve(true);
	      }
	      return store.has(cid, options);
	    },
	    delete(cid, options) {
	      const {isIdentity} = extractContents(cid);
	      if (isIdentity) {
	        return Promise.resolve();
	      }
	      return store.delete(cid, options);
	    },
	    deleteMany(cids, options) {
	      return store.deleteMany(itFilter(cids, cid => !extractContents(cid).isIdentity), options);
	    },
	    batch() {
	      const batch = store.batch();
	      return {
	        put(cid, buf) {
	          const {isIdentity} = extractContents(cid);
	          if (isIdentity) {
	            return;
	          }
	          batch.put(cid, buf);
	        },
	        delete(cid) {
	          const {isIdentity} = extractContents(cid);
	          if (isIdentity) {
	            return;
	          }
	          batch.delete(cid);
	        },
	        commit: options => {
	          return batch.commit(options);
	        }
	      };
	    }
	  };
	}
	function extractContents(k) {
	  const cid = CID$6.asCID(k);
	  if (cid == null) {
	    throw errCode$q(new Error('Not a valid cid'), 'ERR_INVALID_CID');
	  }
	  if (cid.multihash.code !== identity$2.code) {
	    return { isIdentity: false };
	  }
	  return {
	    isIdentity: true,
	    digest: cid.multihash.digest
	  };
	}

	const log$X = debug$S('ipfs:repo:lock:memory');
	const lockFile = 'repo.lock';
	const LOCKS = {};
	async function lock(dir) {
	  const file = dir + '/' + lockFile;
	  log$X('locking %s', file);
	  if (LOCKS[file] === true) {
	    throw new LockExistsError(`Lock already being held for file: ${ file }`);
	  }
	  LOCKS[file] = true;
	  const closer = {
	    async close() {
	      if (LOCKS[file]) {
	        delete LOCKS[file];
	      }
	    }
	  };
	  return closer;
	}
	async function locked(dir) {
	  const file = dir + '/' + lockFile;
	  log$X(`checking lock: ${ file }`);
	  return Boolean(LOCKS[file]);
	}
	const MemoryLock = {
	  lock,
	  locked
	};

	var defaultOptions$6 = {
	  autoMigrate: true,
	  onMigrationProgress: () => {
	  },
	  repoOwner: true,
	  repoLock: MemoryLock
	};

	var defaultDatastore = {
	  Spec: {
	    type: 'mount',
	    mounts: [
	      {
	        mountpoint: '/blocks',
	        type: 'measure',
	        prefix: 'flatfs.datastore',
	        child: {
	          type: 'flatfs',
	          path: 'blocks',
	          sync: true,
	          shardFunc: '/repo/flatfs/shard/v1/next-to-last/2'
	        }
	      },
	      {
	        mountpoint: '/',
	        type: 'measure',
	        prefix: 'leveldb.datastore',
	        child: {
	          type: 'levelds',
	          path: 'datastore',
	          compression: 'none'
	        }
	      }
	    ]
	  }
	};

	function cidToKey$1(c) {
	  const cid = CID$6.asCID(c);
	  if (cid == null) {
	    throw errCode$q(new Error('Not a valid cid'), 'ERR_INVALID_CID');
	  }
	  const encoded = base32$4.encode(cid.multihash.bytes);
	  return new Key$5('/' + encoded.slice(1).toUpperCase(), false);
	}
	function keyToMultihash(key) {
	  return decode$k(base32$4.decode(`b${ key.toString().toLowerCase().substring(1) }`));
	}

	const log$W = debug$S('ipfs:repo:utils:walk-dag');
	async function* walkDag(cid, blockstore, loadCodec, options) {
	  try {
	    const bytes = await blockstore.get(cid, options);
	    const codec = await loadCodec(cid.code);
	    const block = createUnsafe({
	      bytes,
	      cid,
	      codec
	    });
	    for (const [, childCid] of block.links()) {
	      yield childCid;
	      yield* walkDag(childCid, blockstore, loadCodec, options);
	    }
	  } catch (err) {
	    log$W('Could not walk DAG for CID', cid.toString(), err);
	    throw err;
	  }
	}

	function invalidPinTypeErr(type) {
	  const errMsg = `Invalid type '${ type }', must be one of {direct, indirect, recursive, all}`;
	  return errCode$q(new Error(errMsg), 'ERR_INVALID_PIN_TYPE');
	}
	class PinManager {
	  constructor({pinstore, blockstore, loadCodec}) {
	    this.pinstore = pinstore;
	    this.blockstore = blockstore;
	    this.loadCodec = loadCodec;
	    this.log = debug$S('ipfs:repo:pin');
	    this.directPins = new Set();
	    this.recursivePins = new Set();
	  }
	  async pinDirectly(cid, options = {}) {
	    await this.blockstore.get(cid, options);
	    const pin = { depth: 0 };
	    if (cid.version !== 0) {
	      pin.version = cid.version;
	    }
	    if (cid.code !== code$8) {
	      pin.codec = cid.code;
	    }
	    if (options.metadata) {
	      pin.metadata = options.metadata;
	    }
	    return this.pinstore.put(cidToKey$1(cid), encode$j(pin));
	  }
	  unpin(cid, options) {
	    return this.pinstore.delete(cidToKey$1(cid), options);
	  }
	  async pinRecursively(cid, options = {}) {
	    await this.fetchCompleteDag(cid, options);
	    const pin = { depth: Infinity };
	    if (cid.version !== 0) {
	      pin.version = cid.version;
	    }
	    if (cid.code !== code$8) {
	      pin.codec = cid.code;
	    }
	    if (options.metadata) {
	      pin.metadata = options.metadata;
	    }
	    await this.pinstore.put(cidToKey$1(cid), encode$j(pin));
	  }
	  async *directKeys(options) {
	    for await (const entry of this.pinstore.query({
	        filters: [entry => {
	            const pin = decode$h(entry.value);
	            return pin.depth === 0;
	          }]
	      })) {
	      const pin = decode$h(entry.value);
	      const version = pin.version || 0;
	      const codec = pin.codec != null ? pin.codec : code$8;
	      const multihash = keyToMultihash(entry.key);
	      yield {
	        cid: CID$6.create(version, codec, multihash),
	        metadata: pin.metadata
	      };
	    }
	  }
	  async *recursiveKeys(options) {
	    for await (const entry of this.pinstore.query({
	        filters: [entry => {
	            const pin = decode$h(entry.value);
	            return pin.depth === Infinity;
	          }]
	      })) {
	      const pin = decode$h(entry.value);
	      const version = pin.version || 0;
	      const codec = pin.codec != null ? pin.codec : code$8;
	      const multihash = keyToMultihash(entry.key);
	      yield {
	        cid: CID$6.create(version, codec, multihash),
	        metadata: pin.metadata
	      };
	    }
	  }
	  async *indirectKeys(options) {
	    for await (const {cid} of this.recursiveKeys()) {
	      for await (const childCid of walkDag(cid, this.blockstore, this.loadCodec, options)) {
	        const types = [PinTypes$1.recursive];
	        const result = await this.isPinnedWithType(childCid, types);
	        if (result.pinned) {
	          continue;
	        }
	        yield childCid;
	      }
	    }
	  }
	  async isPinnedWithType(cid, types, options) {
	    if (!Array.isArray(types)) {
	      types = [types];
	    }
	    const all = types.includes(PinTypes$1.all);
	    const direct = types.includes(PinTypes$1.direct);
	    const recursive = types.includes(PinTypes$1.recursive);
	    const indirect = types.includes(PinTypes$1.indirect);
	    if (recursive || direct || all) {
	      const result = await itFirst(this.pinstore.query({
	        prefix: cidToKey$1(cid).toString(),
	        filters: [entry => {
	            if (all) {
	              return true;
	            }
	            const pin = decode$h(entry.value);
	            return types.includes(pin.depth === 0 ? PinTypes$1.direct : PinTypes$1.recursive);
	          }],
	        limit: 1
	      }));
	      if (result) {
	        const pin = decode$h(result.value);
	        return {
	          cid,
	          pinned: true,
	          reason: pin.depth === 0 ? PinTypes$1.direct : PinTypes$1.recursive,
	          metadata: pin.metadata
	        };
	      }
	    }
	    const self = this;
	    async function* findChild(key, source) {
	      for await (const {cid: parentCid} of source) {
	        for await (const childCid of walkDag(parentCid, self.blockstore, self.loadCodec)) {
	          if (childCid.equals(key)) {
	            yield parentCid;
	            return;
	          }
	        }
	      }
	    }
	    if (all || indirect) {
	      const parentCid = await itFirst(findChild(cid, this.recursiveKeys()));
	      if (parentCid) {
	        return {
	          cid,
	          pinned: true,
	          reason: PinTypes$1.indirect,
	          parent: parentCid
	        };
	      }
	    }
	    return {
	      cid,
	      pinned: false
	    };
	  }
	  async fetchCompleteDag(cid, options) {
	    const seen = new Set();
	    const walkDag = async (cid, options) => {
	      if (seen.has(cid.toString())) {
	        return;
	      }
	      seen.add(cid.toString());
	      const bytes = await this.blockstore.get(cid, options);
	      const codec = await this.loadCodec(cid.code);
	      const block = createUnsafe({
	        bytes,
	        cid,
	        codec
	      });
	      await Promise.all([...block.links()].map(([, childCid]) => walkDag(childCid, options)));
	    };
	    await walkDag(cid, options);
	  }
	  static checkPinType(type) {
	    if (typeof type !== 'string' || !Object.keys(PinTypes$1).includes(type)) {
	      throw invalidPinTypeErr(type);
	    }
	    return true;
	  }
	}

	function createPinnedBlockstore(pins, store) {
	  return {
	    open() {
	      return store.open();
	    },
	    close() {
	      return store.close();
	    },
	    query(query, options) {
	      return store.query(query, options);
	    },
	    queryKeys(query, options) {
	      return store.queryKeys(query, options);
	    },
	    async get(cid, options) {
	      return store.get(cid, options);
	    },
	    async *getMany(cids, options) {
	      yield* store.getMany(cids, options);
	    },
	    async put(cid, buf, options) {
	      await store.put(cid, buf, options);
	    },
	    async *putMany(pairs, options) {
	      yield* store.putMany(pairs, options);
	    },
	    has(cid, options) {
	      return store.has(cid, options);
	    },
	    async delete(cid, options) {
	      await ensureNotPinned(cid, pins);
	      return store.delete(cid, options);
	    },
	    deleteMany(cids, options) {
	      return store.deleteMany(itMap(cids, async cid => {
	        await ensureNotPinned(cid, pins);
	        return cid;
	      }), options);
	    },
	    batch() {
	      return store.batch();
	    }
	  };
	}
	async function ensureNotPinned(cid, pins) {
	  const {pinned, reason} = await pins.isPinnedWithType(cid, PinTypes$1.all);
	  if (pinned) {
	    throw errCode$q(new Error(`pinned: ${ reason }`), 'ERR_BLOCK_PINNED');
	  }
	}

	const log$V = debug$S('ipfs:repo:gc');
	const ERR_NOT_FOUND = notFoundError$1().code;
	const BLOCK_RM_CONCURRENCY = 256;
	const MFS_ROOT_KEY = new Key$5('/local/filesroot');
	function gc({gcLock, pins, blockstore, root, loadCodec}) {
	  async function* gc() {
	    const start = Date.now();
	    log$V('Creating set of marked blocks');
	    const release = await gcLock.writeLock();
	    try {
	      const markedSet = await createMarkedSet({
	        pins,
	        blockstore,
	        root,
	        loadCodec
	      });
	      const blockKeys = blockstore.queryKeys({});
	      yield* deleteUnmarkedBlocks({ blockstore }, markedSet, blockKeys);
	      log$V(`Complete (${ Date.now() - start }ms)`);
	    } finally {
	      release();
	    }
	  }
	  return gc;
	}
	async function createMarkedSet({pins, blockstore, loadCodec, root}) {
	  const mfsSource = async function* () {
	    let mh;
	    try {
	      mh = await root.get(MFS_ROOT_KEY);
	    } catch (err) {
	      if (err.code === ERR_NOT_FOUND) {
	        log$V('No blocks in MFS');
	        return;
	      }
	      throw err;
	    }
	    const rootCid = CID$6.decode(mh);
	    yield rootCid;
	    yield* walkDag(rootCid, blockstore, loadCodec);
	  }();
	  const pinsSource = itMerge(itMap(pins.recursiveKeys(), ({cid}) => cid), pins.indirectKeys(), itMap(pins.directKeys(), ({cid}) => cid), mfsSource);
	  const output = new Set();
	  for await (const cid of itMerge(pinsSource, mfsSource)) {
	    output.add(base32$4.encode(cid.multihash.bytes));
	  }
	  return output;
	}
	async function* deleteUnmarkedBlocks({blockstore}, markedSet, blockKeys) {
	  let blocksCount = 0;
	  let removedBlocksCount = 0;
	  const removeBlock = async cid => {
	    return async function remove() {
	      blocksCount++;
	      try {
	        const b32 = base32$4.encode(cid.multihash.bytes);
	        if (markedSet.has(b32)) {
	          return null;
	        }
	        try {
	          await blockstore.delete(cid);
	          removedBlocksCount++;
	        } catch (err) {
	          return { err: new Error(`Could not delete block with CID ${ cid }: ${ err.message }`) };
	        }
	        return { cid };
	      } catch (err) {
	        const msg = `Could delete block with CID ${ cid }`;
	        log$V(msg, err);
	        return { err: new Error(msg + `: ${ err.message }`) };
	      }
	    };
	  };
	  yield* pipe_1(itParallelBatch(itMap(blockKeys, removeBlock), BLOCK_RM_CONCURRENCY), source => itFilter(source, Boolean));
	  log$V(`Marked set has ${ markedSet.size } unique blocks. Blockstore has ${ blocksCount } blocks. ` + `Deleted ${ removedBlocksCount } blocks.`);
	}

	const log$U = debug$S('ipfs:repo');
	const noLimit = Number.MAX_SAFE_INTEGER;
	const AUTO_MIGRATE_CONFIG_KEY = 'repoAutoMigrate';
	class Repo {
	  constructor(path, loadCodec, backends, options) {
	    if (typeof path !== 'string') {
	      throw new Error('missing repo path');
	    }
	    if (typeof loadCodec !== 'function') {
	      throw new Error('missing codec loader');
	    }
	    this.options = mergeOptions$k(defaultOptions$6, options);
	    this.closed = true;
	    this.path = path;
	    this.root = backends.root;
	    this.datastore = backends.datastore;
	    this.keys = backends.keys;
	    const blockstore = backends.blocks;
	    const pinstore = backends.pins;
	    this.pins = new PinManager({
	      pinstore,
	      blockstore,
	      loadCodec
	    });
	    const pinnedBlockstore = createPinnedBlockstore(this.pins, blockstore);
	    this.blocks = createIdStore(pinnedBlockstore);
	    this.version = version$1(this.root);
	    this.config = config$2(this.root);
	    this.spec = spec(this.root);
	    this.apiAddr = apiAddr(this.root);
	    this.gcLock = mortice$1(path, { singleProcess: this.options.repoOwner !== false });
	    this.gc = gc({
	      gcLock: this.gcLock,
	      pins: this.pins,
	      blockstore: this.blocks,
	      root: this.root,
	      loadCodec
	    });
	  }
	  async init(config) {
	    log$U('initializing at: %s', this.path);
	    await this._openRoot();
	    await this.config.replace(buildConfig(config));
	    await this.spec.set(buildDatastoreSpec(config));
	    await this.version.set(repoVersion);
	  }
	  async isInitialized() {
	    if (!this.closed) {
	      return true;
	    }
	    try {
	      await this._openRoot();
	      await this._checkInitialized();
	      await this.root.close();
	      return true;
	    } catch (err) {
	      return false;
	    }
	  }
	  async open() {
	    if (!this.closed) {
	      throw errCode$q(new Error('repo is already open'), ERR_REPO_ALREADY_OPEN);
	    }
	    log$U('opening at: %s', this.path);
	    try {
	      await this._openRoot();
	      await this._checkInitialized();
	      this._lockfile = await this._openLock();
	      log$U('acquired repo.lock');
	      const isCompatible = await this.version.check(repoVersion);
	      if (!isCompatible) {
	        if (await this._isAutoMigrationEnabled()) {
	          await this._migrate(repoVersion, {
	            root: this.root,
	            datastore: this.datastore,
	            pins: this.pins.pinstore,
	            blocks: this.pins.blockstore,
	            keys: this.keys
	          });
	        } else {
	          throw new InvalidRepoVersionError('Incompatible repo versions. Automatic migrations disabled. Please migrate the repo manually.');
	        }
	      }
	      log$U('creating datastore');
	      await this.datastore.open();
	      log$U('creating blocks');
	      await this.blocks.open();
	      log$U('creating keystore');
	      await this.keys.open();
	      log$U('creating pins');
	      await this.pins.pinstore.open();
	      this.closed = false;
	      log$U('all opened');
	    } catch (err) {
	      if (this._lockfile) {
	        try {
	          await this._closeLock();
	          this._lockfile = null;
	        } catch (err2) {
	          log$U('error removing lock', err2);
	        }
	      }
	      throw err;
	    }
	  }
	  async _openRoot() {
	    try {
	      await this.root.open();
	    } catch (err) {
	      if (err.message !== 'Already open') {
	        throw err;
	      }
	    }
	  }
	  async _openLock() {
	    const lockfile = await this.options.repoLock.lock(this.path);
	    if (typeof lockfile.close !== 'function') {
	      throw errCode$q(new Error('Locks must have a close method'), 'ERR_NO_CLOSE_FUNCTION');
	    }
	    return lockfile;
	  }
	  _closeLock() {
	    return this._lockfile && this._lockfile.close();
	  }
	  async _checkInitialized() {
	    log$U('init check');
	    let config;
	    try {
	      [config] = await Promise.all([
	        this.config.exists(),
	        this.spec.exists(),
	        this.version.exists()
	      ]);
	    } catch (err) {
	      if (err.code === 'ERR_NOT_FOUND') {
	        throw errCode$q(new Error('repo is not initialized yet'), ERR_REPO_NOT_INITIALIZED, { path: this.path });
	      }
	      throw err;
	    }
	    if (!config) {
	      throw errCode$q(new Error('repo is not initialized yet'), ERR_REPO_NOT_INITIALIZED, { path: this.path });
	    }
	  }
	  async close() {
	    if (this.closed) {
	      throw errCode$q(new Error('repo is already closed'), ERR_REPO_ALREADY_CLOSED);
	    }
	    log$U('closing at: %s', this.path);
	    try {
	      await this.apiAddr.delete();
	    } catch (err) {
	      if (err.code !== ERR_REPO_NOT_INITIALIZED && !err.message.startsWith('ENOENT')) {
	        throw err;
	      }
	    }
	    await Promise.all([
	      this.root,
	      this.blocks,
	      this.keys,
	      this.datastore,
	      this.pins.pinstore
	    ].map(store => store && store.close()));
	    log$U('unlocking');
	    this.closed = true;
	    await this._closeLock();
	  }
	  exists() {
	    return this.version.exists();
	  }
	  async stat() {
	    if (this.datastore && this.keys) {
	      const [storageMax, blocks, version, datastore, keys] = await Promise.all([
	        this._storageMaxStat(),
	        this._blockStat(),
	        this.version.get(),
	        getSize(this.datastore),
	        getSize(this.keys)
	      ]);
	      const size = blocks.size + datastore + keys;
	      return {
	        repoPath: this.path,
	        storageMax,
	        version: version,
	        numObjects: blocks.count,
	        repoSize: size
	      };
	    }
	    throw errCode$q(new Error('repo is not initialized yet'), ERR_REPO_NOT_INITIALIZED, { path: this.path });
	  }
	  async _isAutoMigrationEnabled() {
	    if (this.options.autoMigrate !== undefined) {
	      return this.options.autoMigrate;
	    }
	    let autoMigrateConfig;
	    try {
	      autoMigrateConfig = await this.config.get(AUTO_MIGRATE_CONFIG_KEY);
	    } catch (e) {
	      if (e.code === NotFoundError$1.code) {
	        autoMigrateConfig = true;
	      } else {
	        throw e;
	      }
	    }
	    return autoMigrateConfig;
	  }
	  async _migrate(toVersion, backends) {
	    const currentRepoVersion = await this.version.get();
	    if (currentRepoVersion > toVersion) {
	      log$U(`reverting to version ${ toVersion }`);
	      return revert(this.path, backends, this.options, toVersion, {
	        ignoreLock: true,
	        onProgress: this.options.onMigrationProgress
	      });
	    } else {
	      log$U(`migrating to version ${ toVersion }`);
	      return migrate(this.path, backends, this.options, toVersion, {
	        ignoreLock: true,
	        onProgress: this.options.onMigrationProgress
	      });
	    }
	  }
	  async _storageMaxStat() {
	    try {
	      const max = await this.config.get('Datastore.StorageMax');
	      return BigInt(bytes$1(max));
	    } catch (err) {
	      return BigInt(noLimit);
	    }
	  }
	  async _blockStat() {
	    let count = BigInt(0);
	    let size = BigInt(0);
	    if (this.blocks) {
	      for await (const {key, value} of this.blocks.query({})) {
	        count += BigInt(1);
	        size += BigInt(value.byteLength);
	        size += BigInt(key.bytes.byteLength);
	      }
	    }
	    return {
	      count,
	      size
	    };
	  }
	}
	async function getSize(datastore) {
	  let sum = BigInt(0);
	  for await (const block of datastore.query({})) {
	    sum += BigInt(block.value.byteLength);
	    sum += BigInt(block.key.uint8Array().byteLength);
	  }
	  return sum;
	}
	function createRepo$2(path, loadCodec, backends, options) {
	  return new Repo(path, loadCodec, backends, options);
	}
	function buildConfig(_config) {
	  _config.Datastore = Object.assign({}, defaultDatastore, justSafeGet(_config, 'datastore'));
	  return _config;
	}
	function buildDatastoreSpec(_config) {
	  const spec = {
	    ...defaultDatastore.Spec,
	    ...justSafeGet(_config, 'Datastore.Spec')
	  };
	  return {
	    type: spec.type,
	    mounts: spec.mounts.map(mounting => ({
	      mountpoint: mounting.mountpoint,
	      type: mounting.child.type,
	      path: mounting.child.path,
	      shardFunc: mounting.child.shardFunc
	    }))
	  };
	}

	const all$4 = itAll;

	/**
	 * Collects all values from an async iterator, sorts them
	 * using the passed function and yields them
	 *
	 * @template T
	 * @param {AsyncIterable<T> | Iterable<T>} source
	 * @param {(a: T, b: T) => -1 | 0 | 1} sorter
	 */
	const sort$1 = async function * (source, sorter) {
	  const arr = await all$4(source);

	  yield * arr.sort(sorter);
	};

	var itSort = sort$1;

	var inherits$7;
	if (typeof Object.create === 'function'){
	  inherits$7 = function inherits(ctor, superCtor) {
	    // implementation from standard node.js 'util' module
	    ctor.super_ = superCtor;
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  inherits$7 = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function () {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  };
	}
	var inherits$8 = inherits$7;

	var formatRegExp = /%[sdj%]/g;
	function format(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect$1(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect$1(x);
	    }
	  }
	  return str;
	}

	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	function deprecate$1(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global$1.process)) {
	    return function() {
	      return deprecate$1(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process$3.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process$3.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process$3.traceDeprecation) ; else ;
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	var debugs = {};
	var debugEnviron;
	function debuglog(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process$3.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      debugs[set] = function() {
	        format.apply(null, arguments);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	}

	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect$1(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    _extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}

	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect$1.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect$1.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect$1.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect$1.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect$1.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== inspect$1 &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty$1(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty$1(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var length = output.reduce(function(prev, cur) {
	    if (cur.indexOf('\n') >= 0) ;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}

	function isNull(arg) {
	  return arg === null;
	}

	function isNullOrUndefined(arg) {
	  return arg == null;
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isString(arg) {
	  return typeof arg === 'string';
	}

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}

	function isBuffer$2(maybeBuf) {
	  return Buffer$h.isBuffer(maybeBuf);
	}

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	function log$T() {
	}

	function _extend(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	}
	function hasOwnProperty$1(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	var util$3 = {
	  inherits: inherits$8,
	  _extend: _extend,
	  log: log$T,
	  isBuffer: isBuffer$2,
	  isPrimitive: isPrimitive,
	  isFunction: isFunction,
	  isError: isError,
	  isDate: isDate,
	  isObject: isObject,
	  isRegExp: isRegExp,
	  isUndefined: isUndefined,
	  isSymbol: isSymbol,
	  isString: isString,
	  isNumber: isNumber,
	  isNullOrUndefined: isNullOrUndefined,
	  isNull: isNull,
	  isBoolean: isBoolean,
	  isArray: isArray,
	  inspect: inspect$1,
	  deprecate: deprecate$1,
	  format: format,
	  debuglog: debuglog
	};

	var util$4 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		format: format,
		deprecate: deprecate$1,
		debuglog: debuglog,
		inspect: inspect$1,
		isArray: isArray,
		isBoolean: isBoolean,
		isNull: isNull,
		isNullOrUndefined: isNullOrUndefined,
		isNumber: isNumber,
		isString: isString,
		isSymbol: isSymbol,
		isUndefined: isUndefined,
		isRegExp: isRegExp,
		isObject: isObject,
		isDate: isDate,
		isError: isError,
		isFunction: isFunction,
		isPrimitive: isPrimitive,
		isBuffer: isBuffer$2,
		log: log$T,
		inherits: inherits$8,
		_extend: _extend,
		'default': util$3
	});

	var require$$1$3 = /*@__PURE__*/getAugmentedNamespace(util$4);

	var deferredLeveldown = {exports: {}};

	var abstractLeveldown$1 = {};

	var levelSupports = function supports (...manifests) {
	  const manifest = manifests.reduce((acc, m) => Object.assign(acc, m), {});

	  return Object.assign(manifest, {
	    // Features of abstract-leveldown
	    bufferKeys: manifest.bufferKeys || false,
	    snapshots: manifest.snapshots || false,
	    permanence: manifest.permanence || false,
	    seek: manifest.seek || false,
	    clear: manifest.clear || false,
	    getMany: manifest.getMany || false,
	    keyIterator: manifest.keyIterator || false,
	    valueIterator: manifest.valueIterator || false,
	    iteratorNextv: manifest.iteratorNextv || false,
	    iteratorAll: manifest.iteratorAll || false,

	    // Features of abstract-leveldown that levelup doesn't have
	    status: manifest.status || false,
	    idempotentOpen: manifest.idempotentOpen || false,
	    passiveOpen: manifest.passiveOpen || false,
	    serialize: manifest.serialize || false,

	    // Features of disk-based implementations
	    createIfMissing: manifest.createIfMissing || false,
	    errorIfExists: manifest.errorIfExists || false,

	    // Features of level(up) that abstract-leveldown doesn't have yet
	    deferredOpen: manifest.deferredOpen || false,
	    openCallback: manifest.openCallback || false,
	    promises: manifest.promises || false,
	    streams: manifest.streams || false,
	    encodings: maybeObject(manifest.encodings),
	    events: maybeObject(manifest.events),

	    // Methods that are not part of abstract-leveldown or levelup
	    additionalMethods: Object.assign({}, manifest.additionalMethods)
	  })
	};

	function maybeObject (value) {
	  return !value ? false : Object.assign({}, value)
	}

	/*!
	 * Determine if an object is a Buffer
	 *
	 * @author   Feross Aboukhadijeh <https://feross.org>
	 * @license  MIT
	 */

	var isBuffer$1 = function isBuffer (obj) {
	  return obj != null && obj.constructor != null &&
	    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
	};

	var catering$3 = {};

	var nextTickBrowser$2 = typeof queueMicrotask === 'function' ? queueMicrotask : (fn) => Promise.resolve().then(fn);

	var nextTick$1 = nextTickBrowser$2;

	catering$3.fromCallback = function (callback, symbol) {
	  if (callback === undefined) {
	    var promise = new Promise(function (resolve, reject) {
	      callback = function (err, res) {
	        if (err) reject(err);
	        else resolve(res);
	      };
	    });

	    callback[symbol !== undefined ? symbol : 'promise'] = promise;
	  } else if (typeof callback !== 'function') {
	    throw new TypeError('Callback must be a function')
	  }

	  return callback
	};

	catering$3.fromPromise = function (promise, callback) {
	  if (callback === undefined) return promise

	  promise
	    .then(function (res) { nextTick$1(() => callback(null, res)); })
	    .catch(function (err) { nextTick$1(() => callback(err)); });
	};

	/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

	let promise;

	var queueMicrotask_1 = typeof queueMicrotask === 'function'
	  ? queueMicrotask.bind(typeof window !== 'undefined' ? window : commonjsGlobal)
	  // reuse resolved promise, and allocate it lazily
	  : cb => (promise || (promise = Promise.resolve()))
	    .then(cb)
	    .catch(err => setTimeout(() => { throw err }, 0));

	const queueMicrotask$4 = queueMicrotask_1;

	var nextTickBrowser$1 = function (fn, ...args) {
	  if (args.length === 0) {
	    queueMicrotask$4(fn);
	  } else {
	    queueMicrotask$4(() => fn(...args));
	  }
	};

	function AbstractIterator$4 (db) {
	  if (typeof db !== 'object' || db === null) {
	    throw new TypeError('First argument must be an abstract-leveldown compliant store')
	  }

	  this.db = db;
	  this._ended = false;
	  this._nexting = false;
	}

	AbstractIterator$4.prototype.next = function (callback) {
	  // In callback mode, we return `this`
	  let ret = this;

	  if (callback === undefined) {
	    ret = new Promise(function (resolve, reject) {
	      callback = function (err, key, value) {
	        if (err) reject(err);
	        else if (key === undefined && value === undefined) resolve();
	        else resolve([key, value]);
	      };
	    });
	  } else if (typeof callback !== 'function') {
	    throw new Error('next() requires a callback argument')
	  }

	  if (this._ended) {
	    this._nextTick(callback, new Error('cannot call next() after end()'));
	    return ret
	  }

	  if (this._nexting) {
	    this._nextTick(callback, new Error('cannot call next() before previous next() has completed'));
	    return ret
	  }

	  this._nexting = true;
	  this._next((err, ...rest) => {
	    this._nexting = false;
	    callback(err, ...rest);
	  });

	  return ret
	};

	AbstractIterator$4.prototype._next = function (callback) {
	  this._nextTick(callback);
	};

	AbstractIterator$4.prototype.seek = function (target) {
	  if (this._ended) {
	    throw new Error('cannot call seek() after end()')
	  }
	  if (this._nexting) {
	    throw new Error('cannot call seek() before next() has completed')
	  }

	  target = this.db._serializeKey(target);
	  this._seek(target);
	};

	AbstractIterator$4.prototype._seek = function (target) {};

	AbstractIterator$4.prototype.end = function (callback) {
	  let promise;

	  if (callback === undefined) {
	    promise = new Promise(function (resolve, reject) {
	      callback = function (err) {
	        if (err) reject(err);
	        else resolve();
	      };
	    });
	  } else if (typeof callback !== 'function') {
	    throw new Error('end() requires a callback argument')
	  }

	  if (this._ended) {
	    this._nextTick(callback, new Error('end() already called on iterator'));
	    return promise
	  }

	  this._ended = true;
	  this._end(callback);

	  return promise
	};

	AbstractIterator$4.prototype._end = function (callback) {
	  this._nextTick(callback);
	};

	AbstractIterator$4.prototype[Symbol.asyncIterator] = async function * () {
	  try {
	    let kv;

	    while ((kv = (await this.next())) !== undefined) {
	      yield kv;
	    }
	  } finally {
	    if (!this._ended) await this.end();
	  }
	};

	// Expose browser-compatible nextTick for dependents
	AbstractIterator$4.prototype._nextTick = nextTickBrowser$1;

	var abstractIterator = AbstractIterator$4;

	const emptyOptions = Object.freeze({});

	function AbstractChainedBatch$3 (db) {
	  if (typeof db !== 'object' || db === null) {
	    throw new TypeError('First argument must be an abstract-leveldown compliant store')
	  }

	  this.db = db;
	  this._operations = [];
	  this._written = false;
	}

	AbstractChainedBatch$3.prototype._checkWritten = function () {
	  if (this._written) {
	    throw new Error('write() already called on this batch')
	  }
	};

	AbstractChainedBatch$3.prototype.put = function (key, value, options) {
	  this._checkWritten();

	  const err = this.db._checkKey(key) || this.db._checkValue(value);
	  if (err) throw err

	  key = this.db._serializeKey(key);
	  value = this.db._serializeValue(value);

	  this._put(key, value, options != null ? options : emptyOptions);

	  return this
	};

	AbstractChainedBatch$3.prototype._put = function (key, value, options) {
	  this._operations.push({ ...options, type: 'put', key, value });
	};

	AbstractChainedBatch$3.prototype.del = function (key, options) {
	  this._checkWritten();

	  const err = this.db._checkKey(key);
	  if (err) throw err

	  key = this.db._serializeKey(key);
	  this._del(key, options != null ? options : emptyOptions);

	  return this
	};

	AbstractChainedBatch$3.prototype._del = function (key, options) {
	  this._operations.push({ ...options, type: 'del', key });
	};

	AbstractChainedBatch$3.prototype.clear = function () {
	  this._checkWritten();
	  this._clear();

	  return this
	};

	AbstractChainedBatch$3.prototype._clear = function () {
	  this._operations = [];
	};

	AbstractChainedBatch$3.prototype.write = function (options, callback) {
	  this._checkWritten();

	  if (typeof options === 'function') {
	    callback = options;
	  }
	  if (typeof callback !== 'function') {
	    throw new Error('write() requires a callback argument')
	  }
	  if (typeof options !== 'object' || options === null) {
	    options = {};
	  }

	  this._written = true;
	  this._write(options, callback);
	};

	AbstractChainedBatch$3.prototype._write = function (options, callback) {
	  this.db._batch(this._operations, options, callback);
	};

	// Expose browser-compatible nextTick for dependents
	AbstractChainedBatch$3.prototype._nextTick = nextTickBrowser$1;

	var abstractChainedBatch = AbstractChainedBatch$3;

	var common$4 = {};

	common$4.getCallback = function (options, callback) {
	  return typeof options === 'function' ? options : callback
	};

	common$4.getOptions = function (options) {
	  return typeof options === 'object' && options !== null ? options : {}
	};

	const supports$2 = levelSupports;
	const isBuffer = isBuffer$1;
	const catering$2 = catering$3;
	const AbstractIterator$3 = abstractIterator;
	const AbstractChainedBatch$2 = abstractChainedBatch;
	const getCallback$4 = common$4.getCallback;
	const getOptions$2 = common$4.getOptions;

	const hasOwnProperty = Object.prototype.hasOwnProperty;
	const rangeOptions$1 = ['lt', 'lte', 'gt', 'gte'];

	function AbstractLevelDOWN$3 (manifest) {
	  this.status = 'new';

	  // TODO (next major): make this mandatory
	  this.supports = supports$2(manifest, {
	    status: true
	  });
	}

	AbstractLevelDOWN$3.prototype.open = function (options, callback) {
	  const oldStatus = this.status;

	  if (typeof options === 'function') callback = options;

	  if (typeof callback !== 'function') {
	    throw new Error('open() requires a callback argument')
	  }

	  if (typeof options !== 'object' || options === null) options = {};

	  options.createIfMissing = options.createIfMissing !== false;
	  options.errorIfExists = !!options.errorIfExists;

	  this.status = 'opening';
	  this._open(options, (err) => {
	    if (err) {
	      this.status = oldStatus;
	      return callback(err)
	    }
	    this.status = 'open';
	    callback();
	  });
	};

	AbstractLevelDOWN$3.prototype._open = function (options, callback) {
	  this._nextTick(callback);
	};

	AbstractLevelDOWN$3.prototype.close = function (callback) {
	  const oldStatus = this.status;

	  if (typeof callback !== 'function') {
	    throw new Error('close() requires a callback argument')
	  }

	  this.status = 'closing';
	  this._close((err) => {
	    if (err) {
	      this.status = oldStatus;
	      return callback(err)
	    }
	    this.status = 'closed';
	    callback();
	  });
	};

	AbstractLevelDOWN$3.prototype._close = function (callback) {
	  this._nextTick(callback);
	};

	AbstractLevelDOWN$3.prototype.get = function (key, options, callback) {
	  if (typeof options === 'function') callback = options;

	  if (typeof callback !== 'function') {
	    throw new Error('get() requires a callback argument')
	  }

	  const err = this._checkKey(key);
	  if (err) return this._nextTick(callback, err)

	  key = this._serializeKey(key);

	  if (typeof options !== 'object' || options === null) options = {};

	  options.asBuffer = options.asBuffer !== false;

	  this._get(key, options, callback);
	};

	AbstractLevelDOWN$3.prototype._get = function (key, options, callback) {
	  this._nextTick(function () { callback(new Error('NotFound')); });
	};

	AbstractLevelDOWN$3.prototype.getMany = function (keys, options, callback) {
	  callback = getCallback$4(options, callback);
	  callback = catering$2.fromCallback(callback);
	  options = getOptions$2(options);

	  if (maybeError$1(this, callback)) {
	    return callback.promise
	  }

	  if (!Array.isArray(keys)) {
	    this._nextTick(callback, new Error('getMany() requires an array argument'));
	    return callback.promise
	  }

	  if (keys.length === 0) {
	    this._nextTick(callback, null, []);
	    return callback.promise
	  }

	  if (typeof options.asBuffer !== 'boolean') {
	    options = { ...options, asBuffer: true };
	  }

	  const serialized = new Array(keys.length);

	  for (let i = 0; i < keys.length; i++) {
	    const key = keys[i];
	    const err = this._checkKey(key);

	    if (err) {
	      this._nextTick(callback, err);
	      return callback.promise
	    }

	    serialized[i] = this._serializeKey(key);
	  }

	  this._getMany(serialized, options, callback);
	  return callback.promise
	};

	AbstractLevelDOWN$3.prototype._getMany = function (keys, options, callback) {
	  this._nextTick(callback, null, new Array(keys.length).fill(undefined));
	};

	AbstractLevelDOWN$3.prototype.put = function (key, value, options, callback) {
	  if (typeof options === 'function') callback = options;

	  if (typeof callback !== 'function') {
	    throw new Error('put() requires a callback argument')
	  }

	  const err = this._checkKey(key) || this._checkValue(value);
	  if (err) return this._nextTick(callback, err)

	  key = this._serializeKey(key);
	  value = this._serializeValue(value);

	  if (typeof options !== 'object' || options === null) options = {};

	  this._put(key, value, options, callback);
	};

	AbstractLevelDOWN$3.prototype._put = function (key, value, options, callback) {
	  this._nextTick(callback);
	};

	AbstractLevelDOWN$3.prototype.del = function (key, options, callback) {
	  if (typeof options === 'function') callback = options;

	  if (typeof callback !== 'function') {
	    throw new Error('del() requires a callback argument')
	  }

	  const err = this._checkKey(key);
	  if (err) return this._nextTick(callback, err)

	  key = this._serializeKey(key);

	  if (typeof options !== 'object' || options === null) options = {};

	  this._del(key, options, callback);
	};

	AbstractLevelDOWN$3.prototype._del = function (key, options, callback) {
	  this._nextTick(callback);
	};

	AbstractLevelDOWN$3.prototype.batch = function (array, options, callback) {
	  if (!arguments.length) return this._chainedBatch()

	  if (typeof options === 'function') callback = options;

	  if (typeof array === 'function') callback = array;

	  if (typeof callback !== 'function') {
	    throw new Error('batch(array) requires a callback argument')
	  }

	  if (!Array.isArray(array)) {
	    return this._nextTick(callback, new Error('batch(array) requires an array argument'))
	  }

	  if (array.length === 0) {
	    return this._nextTick(callback)
	  }

	  if (typeof options !== 'object' || options === null) options = {};

	  const serialized = new Array(array.length);

	  for (let i = 0; i < array.length; i++) {
	    if (typeof array[i] !== 'object' || array[i] === null) {
	      return this._nextTick(callback, new Error('batch(array) element must be an object and not `null`'))
	    }

	    const e = Object.assign({}, array[i]);

	    if (e.type !== 'put' && e.type !== 'del') {
	      return this._nextTick(callback, new Error("`type` must be 'put' or 'del'"))
	    }

	    const err = this._checkKey(e.key);
	    if (err) return this._nextTick(callback, err)

	    e.key = this._serializeKey(e.key);

	    if (e.type === 'put') {
	      const valueErr = this._checkValue(e.value);
	      if (valueErr) return this._nextTick(callback, valueErr)

	      e.value = this._serializeValue(e.value);
	    }

	    serialized[i] = e;
	  }

	  this._batch(serialized, options, callback);
	};

	AbstractLevelDOWN$3.prototype._batch = function (array, options, callback) {
	  this._nextTick(callback);
	};

	AbstractLevelDOWN$3.prototype.clear = function (options, callback) {
	  if (typeof options === 'function') {
	    callback = options;
	  } else if (typeof callback !== 'function') {
	    throw new Error('clear() requires a callback argument')
	  }

	  options = cleanRangeOptions(this, options);
	  options.reverse = !!options.reverse;
	  options.limit = 'limit' in options ? options.limit : -1;

	  this._clear(options, callback);
	};

	AbstractLevelDOWN$3.prototype._clear = function (options, callback) {
	  // Avoid setupIteratorOptions, would serialize range options a second time.
	  options.keys = true;
	  options.values = false;
	  options.keyAsBuffer = true;
	  options.valueAsBuffer = true;

	  const iterator = this._iterator(options);
	  const emptyOptions = {};

	  const next = (err) => {
	    if (err) {
	      return iterator.end(function () {
	        callback(err);
	      })
	    }

	    iterator.next((err, key) => {
	      if (err) return next(err)
	      if (key === undefined) return iterator.end(callback)

	      // This could be optimized by using a batch, but the default _clear
	      // is not meant to be fast. Implementations have more room to optimize
	      // if they override _clear. Note: using _del bypasses key serialization.
	      this._del(key, emptyOptions, next);
	    });
	  };

	  next();
	};

	AbstractLevelDOWN$3.prototype._setupIteratorOptions = function (options) {
	  options = cleanRangeOptions(this, options);

	  options.reverse = !!options.reverse;
	  options.keys = options.keys !== false;
	  options.values = options.values !== false;
	  options.limit = 'limit' in options ? options.limit : -1;
	  options.keyAsBuffer = options.keyAsBuffer !== false;
	  options.valueAsBuffer = options.valueAsBuffer !== false;

	  return options
	};

	function cleanRangeOptions (db, options) {
	  const result = {};

	  for (const k in options) {
	    if (!hasOwnProperty.call(options, k)) continue

	    if (k === 'start' || k === 'end') {
	      throw new Error('Legacy range options ("start" and "end") have been removed')
	    }

	    let opt = options[k];

	    if (isRangeOption(k)) {
	      // Note that we don't reject nullish and empty options here. While
	      // those types are invalid as keys, they are valid as range options.
	      opt = db._serializeKey(opt);
	    }

	    result[k] = opt;
	  }

	  return result
	}

	function isRangeOption (k) {
	  return rangeOptions$1.indexOf(k) !== -1
	}

	AbstractLevelDOWN$3.prototype.iterator = function (options) {
	  if (typeof options !== 'object' || options === null) options = {};
	  options = this._setupIteratorOptions(options);
	  return this._iterator(options)
	};

	AbstractLevelDOWN$3.prototype._iterator = function (options) {
	  return new AbstractIterator$3(this)
	};

	AbstractLevelDOWN$3.prototype._chainedBatch = function () {
	  return new AbstractChainedBatch$2(this)
	};

	AbstractLevelDOWN$3.prototype._serializeKey = function (key) {
	  return key
	};

	AbstractLevelDOWN$3.prototype._serializeValue = function (value) {
	  return value
	};

	AbstractLevelDOWN$3.prototype._checkKey = function (key) {
	  if (key === null || key === undefined) {
	    return new Error('key cannot be `null` or `undefined`')
	  } else if (isBuffer(key) && key.length === 0) { // TODO: replace with typed array check
	    return new Error('key cannot be an empty Buffer')
	  } else if (key === '') {
	    return new Error('key cannot be an empty String')
	  } else if (Array.isArray(key) && key.length === 0) {
	    return new Error('key cannot be an empty Array')
	  }
	};

	AbstractLevelDOWN$3.prototype._checkValue = function (value) {
	  if (value === null || value === undefined) {
	    return new Error('value cannot be `null` or `undefined`')
	  }
	};

	// TODO: docs and tests
	AbstractLevelDOWN$3.prototype.isOperational = function () {
	  return this.status === 'open' || this._isOperational()
	};

	// Implementation may accept operations in other states too
	AbstractLevelDOWN$3.prototype._isOperational = function () {
	  return false
	};

	// Expose browser-compatible nextTick for dependents
	// TODO: rename _nextTick to _queueMicrotask
	// TODO: after we drop node 10, also use queueMicrotask in node
	AbstractLevelDOWN$3.prototype._nextTick = nextTickBrowser$1;

	var abstractLeveldown = AbstractLevelDOWN$3;

	function maybeError$1 (db, callback) {
	  if (!db.isOperational()) {
	    db._nextTick(callback, new Error('Database is not open'));
	    return true
	  }

	  return false
	}

	abstractLeveldown$1.AbstractLevelDOWN = abstractLeveldown;
	abstractLeveldown$1.AbstractIterator = abstractIterator;
	abstractLeveldown$1.AbstractChainedBatch = abstractChainedBatch;

	var inherits_browser = {exports: {}};

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  inherits_browser.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      ctor.prototype = Object.create(superCtor.prototype, {
	        constructor: {
	          value: ctor,
	          enumerable: false,
	          writable: true,
	          configurable: true
	        }
	      });
	    }
	  };
	} else {
	  // old school shim for old browsers
	  inherits_browser.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor;
	      var TempCtor = function () {};
	      TempCtor.prototype = superCtor.prototype;
	      ctor.prototype = new TempCtor();
	      ctor.prototype.constructor = ctor;
	    }
	  };
	}

	var util$2 = {};

	util$2.getCallback = function (args, symbol, map) {
	  let callback = args[args.length - 1];

	  if (typeof callback !== 'function') {
	    const promise = new Promise((resolve, reject) => {
	      args.push(callback = function (err, ...results) {
	        if (err) reject(err);
	        else resolve(map ? map(...results) : results[0]);
	      });
	    });

	    callback[symbol] = promise;
	  }

	  return callback
	};

	const { AbstractIterator: AbstractIterator$2 } = abstractLeveldown$1;
	const inherits$6 = inherits_browser.exports;
	const getCallback$3 = util$2.getCallback;

	const kOptions = Symbol('options');
	const kIterator = Symbol('iterator');
	const kOperations$2 = Symbol('operations');
	const kPromise$1 = Symbol('promise');

	function DeferredIterator$1 (db, options) {
	  AbstractIterator$2.call(this, db);

	  this[kOptions] = options;
	  this[kIterator] = null;
	  this[kOperations$2] = [];
	}

	inherits$6(DeferredIterator$1, AbstractIterator$2);

	DeferredIterator$1.prototype.setDb = function (db) {
	  this[kIterator] = db.iterator(this[kOptions]);

	  for (const op of this[kOperations$2].splice(0, this[kOperations$2].length)) {
	    this[kIterator][op.method](...op.args);
	  }
	};

	DeferredIterator$1.prototype.next = function (...args) {
	  if (this.db.status === 'open') {
	    return this[kIterator].next(...args)
	  }

	  const callback = getCallback$3(args, kPromise$1, function map (key, value) {
	    if (key === undefined && value === undefined) {
	      return undefined
	    } else {
	      return [key, value]
	    }
	  });

	  if (this.db.status === 'opening') {
	    this[kOperations$2].push({ method: 'next', args });
	  } else {
	    this._nextTick(callback, new Error('Database is not open'));
	  }

	  return callback[kPromise$1] || this
	};

	DeferredIterator$1.prototype.seek = function (...args) {
	  if (this.db.status === 'open') {
	    this[kIterator].seek(...args);
	  } else if (this.db.status === 'opening') {
	    this[kOperations$2].push({ method: 'seek', args });
	  } else {
	    throw new Error('Database is not open')
	  }
	};

	DeferredIterator$1.prototype.end = function (...args) {
	  if (this.db.status === 'open') {
	    return this[kIterator].end(...args)
	  }

	  const callback = getCallback$3(args, kPromise$1);

	  if (this.db.status === 'opening') {
	    this[kOperations$2].push({ method: 'end', args });
	  } else {
	    this._nextTick(callback, new Error('Database is not open'));
	  }

	  return callback[kPromise$1] || this
	};

	for (const method of ['next', 'seek', 'end']) {
	  DeferredIterator$1.prototype['_' + method] = function () {
	    /* istanbul ignore next: assertion */
	    throw new Error('Did not expect private method to be called: ' + method)
	  };
	}

	var deferredIterator = DeferredIterator$1;

	const { AbstractChainedBatch: AbstractChainedBatch$1 } = abstractLeveldown$1;
	const kOperations$1 = Symbol('operations');

	var deferredChainedBatch = class DeferredChainedBatch extends AbstractChainedBatch$1 {
	  constructor (db) {
	    super(db);
	    this[kOperations$1] = [];
	  }

	  _put (key, value, options) {
	    this[kOperations$1].push({ ...options, type: 'put', key, value });
	  }

	  _del (key, options) {
	    this[kOperations$1].push({ ...options, type: 'del', key });
	  }

	  _clear () {
	    this[kOperations$1] = [];
	  }

	  _write (options, callback) {
	    // AbstractChainedBatch would call _batch(), we call batch()
	    this.db.batch(this[kOperations$1], options, callback);
	  }
	};

	const { AbstractLevelDOWN: AbstractLevelDOWN$2 } = abstractLeveldown$1;
	const inherits$5 = inherits_browser.exports;
	const DeferredIterator = deferredIterator;
	const DeferredChainedBatch = deferredChainedBatch;
	const getCallback$2 = util$2.getCallback;

	const deferrables = ['put', 'get', 'getMany', 'del', 'batch', 'clear'];
	const optionalDeferrables = ['approximateSize', 'compactRange'];

	const kInnerDb = Symbol('innerDb');
	const kOperations = Symbol('operations');
	const kPromise = Symbol('promise');

	function DeferredLevelDOWN$1 (db) {
	  AbstractLevelDOWN$2.call(this, db.supports || {});

	  // TODO (future major): remove this fallback; db must have manifest that
	  // declares approximateSize and compactRange in additionalMethods.
	  for (const m of optionalDeferrables) {
	    if (typeof db[m] === 'function' && !this.supports.additionalMethods[m]) {
	      this.supports.additionalMethods[m] = true;
	    }
	  }

	  this[kInnerDb] = db;
	  this[kOperations] = [];

	  implement(this);
	}

	inherits$5(DeferredLevelDOWN$1, AbstractLevelDOWN$2);

	DeferredLevelDOWN$1.prototype.type = 'deferred-leveldown';

	// Backwards compatibility for reachdown and subleveldown
	Object.defineProperty(DeferredLevelDOWN$1.prototype, '_db', {
	  enumerable: true,
	  get () {
	    return this[kInnerDb]
	  }
	});

	DeferredLevelDOWN$1.prototype._open = function (options, callback) {
	  const onopen = (err) => {
	    if (err || this[kInnerDb].status !== 'open') {
	      // TODO: reject scheduled operations
	      return callback(err || new Error('Database is not open'))
	    }

	    const operations = this[kOperations];
	    this[kOperations] = [];

	    for (const op of operations) {
	      if (op.iterator) {
	        op.iterator.setDb(this[kInnerDb]);
	      } else {
	        this[kInnerDb][op.method](...op.args);
	      }
	    }

	    /* istanbul ignore if: assertion */
	    if (this[kOperations].length > 0) {
	      throw new Error('Did not expect further operations')
	    }

	    callback();
	  };

	  if (this[kInnerDb].status === 'new' || this[kInnerDb].status === 'closed') {
	    this[kInnerDb].open(options, onopen);
	  } else {
	    this._nextTick(onopen);
	  }
	};

	DeferredLevelDOWN$1.prototype._close = function (callback) {
	  this[kInnerDb].close(callback);
	};

	DeferredLevelDOWN$1.prototype._isOperational = function () {
	  return this.status === 'opening'
	};

	function implement (self) {
	  const additionalMethods = Object.keys(self.supports.additionalMethods);

	  for (const method of deferrables.concat(additionalMethods)) {
	    // Override the public rather than private methods to cover cases where abstract-leveldown
	    // has a fast-path like on db.batch([]) which bypasses _batch() because the array is empty.
	    self[method] = function (...args) {
	      if (method === 'batch' && args.length === 0) {
	        return new DeferredChainedBatch(this)
	      } else if (this.status === 'open') {
	        return this[kInnerDb][method](...args)
	      }

	      const callback = getCallback$2(args, kPromise);

	      if (this.status === 'opening') {
	        this[kOperations].push({ method, args });
	      } else {
	        this._nextTick(callback, new Error('Database is not open'));
	      }

	      return callback[kPromise]
	    };
	  }

	  self.iterator = function (options) {
	    if (this.status === 'open') {
	      return this[kInnerDb].iterator(options)
	    } else if (this.status === 'opening') {
	      const iterator = new DeferredIterator(this, options);
	      this[kOperations].push({ iterator });
	      return iterator
	    } else {
	      throw new Error('Database is not open')
	    }
	  };

	  for (const method of deferrables.concat(['iterator'])) {
	    self['_' + method] = function () {
	      /* istanbul ignore next: assertion */
	      throw new Error('Did not expect private method to be called: ' + method)
	    };
	  }
	}

	deferredLeveldown.exports = DeferredLevelDOWN$1;
	deferredLeveldown.exports.DeferredIterator = DeferredIterator;

	var readableBrowser = {exports: {}};

	var streamBrowser = require$$1$5.EventEmitter;

	function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty$1(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function _defineProperty$1(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

	var _require$2 = require$$0$1,
	    Buffer$c = _require$2.Buffer;

	var _require2 = require$$1$3,
	    inspect = _require2.inspect;

	var custom = inspect && inspect.custom || 'inspect';

	function copyBuffer(src, target, offset) {
	  Buffer$c.prototype.copy.call(src, target, offset);
	}

	var buffer_list =
	/*#__PURE__*/
	function () {
	  function BufferList() {
	    _classCallCheck(this, BufferList);

	    this.head = null;
	    this.tail = null;
	    this.length = 0;
	  }

	  _createClass(BufferList, [{
	    key: "push",
	    value: function push(v) {
	      var entry = {
	        data: v,
	        next: null
	      };
	      if (this.length > 0) this.tail.next = entry;else this.head = entry;
	      this.tail = entry;
	      ++this.length;
	    }
	  }, {
	    key: "unshift",
	    value: function unshift(v) {
	      var entry = {
	        data: v,
	        next: this.head
	      };
	      if (this.length === 0) this.tail = entry;
	      this.head = entry;
	      ++this.length;
	    }
	  }, {
	    key: "shift",
	    value: function shift() {
	      if (this.length === 0) return;
	      var ret = this.head.data;
	      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	      --this.length;
	      return ret;
	    }
	  }, {
	    key: "clear",
	    value: function clear() {
	      this.head = this.tail = null;
	      this.length = 0;
	    }
	  }, {
	    key: "join",
	    value: function join(s) {
	      if (this.length === 0) return '';
	      var p = this.head;
	      var ret = '' + p.data;

	      while (p = p.next) {
	        ret += s + p.data;
	      }

	      return ret;
	    }
	  }, {
	    key: "concat",
	    value: function concat(n) {
	      if (this.length === 0) return Buffer$c.alloc(0);
	      var ret = Buffer$c.allocUnsafe(n >>> 0);
	      var p = this.head;
	      var i = 0;

	      while (p) {
	        copyBuffer(p.data, ret, i);
	        i += p.data.length;
	        p = p.next;
	      }

	      return ret;
	    } // Consumes a specified amount of bytes or characters from the buffered data.

	  }, {
	    key: "consume",
	    value: function consume(n, hasStrings) {
	      var ret;

	      if (n < this.head.data.length) {
	        // `slice` is the same for buffers and strings.
	        ret = this.head.data.slice(0, n);
	        this.head.data = this.head.data.slice(n);
	      } else if (n === this.head.data.length) {
	        // First chunk is a perfect match.
	        ret = this.shift();
	      } else {
	        // Result spans more than one buffer.
	        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
	      }

	      return ret;
	    }
	  }, {
	    key: "first",
	    value: function first() {
	      return this.head.data;
	    } // Consumes a specified amount of characters from the buffered data.

	  }, {
	    key: "_getString",
	    value: function _getString(n) {
	      var p = this.head;
	      var c = 1;
	      var ret = p.data;
	      n -= ret.length;

	      while (p = p.next) {
	        var str = p.data;
	        var nb = n > str.length ? str.length : n;
	        if (nb === str.length) ret += str;else ret += str.slice(0, n);
	        n -= nb;

	        if (n === 0) {
	          if (nb === str.length) {
	            ++c;
	            if (p.next) this.head = p.next;else this.head = this.tail = null;
	          } else {
	            this.head = p;
	            p.data = str.slice(nb);
	          }

	          break;
	        }

	        ++c;
	      }

	      this.length -= c;
	      return ret;
	    } // Consumes a specified amount of bytes from the buffered data.

	  }, {
	    key: "_getBuffer",
	    value: function _getBuffer(n) {
	      var ret = Buffer$c.allocUnsafe(n);
	      var p = this.head;
	      var c = 1;
	      p.data.copy(ret);
	      n -= p.data.length;

	      while (p = p.next) {
	        var buf = p.data;
	        var nb = n > buf.length ? buf.length : n;
	        buf.copy(ret, ret.length - n, 0, nb);
	        n -= nb;

	        if (n === 0) {
	          if (nb === buf.length) {
	            ++c;
	            if (p.next) this.head = p.next;else this.head = this.tail = null;
	          } else {
	            this.head = p;
	            p.data = buf.slice(nb);
	          }

	          break;
	        }

	        ++c;
	      }

	      this.length -= c;
	      return ret;
	    } // Make sure the linked list only shows the minimal necessary information.

	  }, {
	    key: custom,
	    value: function value(_, options) {
	      return inspect(this, _objectSpread({}, options, {
	        // Only inspect one level.
	        depth: 0,
	        // It should not recurse.
	        customInspect: false
	      }));
	    }
	  }]);

	  return BufferList;
	}();

	function destroy(err, cb) {
	  var _this = this;

	  var readableDestroyed = this._readableState && this._readableState.destroyed;
	  var writableDestroyed = this._writableState && this._writableState.destroyed;

	  if (readableDestroyed || writableDestroyed) {
	    if (cb) {
	      cb(err);
	    } else if (err) {
	      if (!this._writableState) {
	        process$3.nextTick(emitErrorNT, this, err);
	      } else if (!this._writableState.errorEmitted) {
	        this._writableState.errorEmitted = true;
	        process$3.nextTick(emitErrorNT, this, err);
	      }
	    }

	    return this;
	  } // we set destroyed to true before firing error callbacks in order
	  // to make it re-entrance safe in case destroy() is called within callbacks


	  if (this._readableState) {
	    this._readableState.destroyed = true;
	  } // if this is a duplex stream mark the writable part as destroyed as well


	  if (this._writableState) {
	    this._writableState.destroyed = true;
	  }

	  this._destroy(err || null, function (err) {
	    if (!cb && err) {
	      if (!_this._writableState) {
	        process$3.nextTick(emitErrorAndCloseNT, _this, err);
	      } else if (!_this._writableState.errorEmitted) {
	        _this._writableState.errorEmitted = true;
	        process$3.nextTick(emitErrorAndCloseNT, _this, err);
	      } else {
	        process$3.nextTick(emitCloseNT, _this);
	      }
	    } else if (cb) {
	      process$3.nextTick(emitCloseNT, _this);
	      cb(err);
	    } else {
	      process$3.nextTick(emitCloseNT, _this);
	    }
	  });

	  return this;
	}

	function emitErrorAndCloseNT(self, err) {
	  emitErrorNT(self, err);
	  emitCloseNT(self);
	}

	function emitCloseNT(self) {
	  if (self._writableState && !self._writableState.emitClose) return;
	  if (self._readableState && !self._readableState.emitClose) return;
	  self.emit('close');
	}

	function undestroy() {
	  if (this._readableState) {
	    this._readableState.destroyed = false;
	    this._readableState.reading = false;
	    this._readableState.ended = false;
	    this._readableState.endEmitted = false;
	  }

	  if (this._writableState) {
	    this._writableState.destroyed = false;
	    this._writableState.ended = false;
	    this._writableState.ending = false;
	    this._writableState.finalCalled = false;
	    this._writableState.prefinished = false;
	    this._writableState.finished = false;
	    this._writableState.errorEmitted = false;
	  }
	}

	function emitErrorNT(self, err) {
	  self.emit('error', err);
	}

	function errorOrDestroy$2(stream, err) {
	  // We have tests that rely on errors being emitted
	  // in the same tick, so changing this is semver major.
	  // For now when you opt-in to autoDestroy we allow
	  // the error to be emitted nextTick. In a future
	  // semver major update we should change the default to this.
	  var rState = stream._readableState;
	  var wState = stream._writableState;
	  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
	}

	var destroy_1 = {
	  destroy: destroy,
	  undestroy: undestroy,
	  errorOrDestroy: errorOrDestroy$2
	};

	var errorsBrowser = {};

	function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

	var codes$l = {};

	function createErrorType(code, message, Base) {
	  if (!Base) {
	    Base = Error;
	  }

	  function getMessage(arg1, arg2, arg3) {
	    if (typeof message === 'string') {
	      return message;
	    } else {
	      return message(arg1, arg2, arg3);
	    }
	  }

	  var NodeError =
	  /*#__PURE__*/
	  function (_Base) {
	    _inheritsLoose(NodeError, _Base);

	    function NodeError(arg1, arg2, arg3) {
	      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
	    }

	    return NodeError;
	  }(Base);

	  NodeError.prototype.name = Base.name;
	  NodeError.prototype.code = code;
	  codes$l[code] = NodeError;
	} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


	function oneOf(expected, thing) {
	  if (Array.isArray(expected)) {
	    var len = expected.length;
	    expected = expected.map(function (i) {
	      return String(i);
	    });

	    if (len > 2) {
	      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
	    } else if (len === 2) {
	      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
	    } else {
	      return "of ".concat(thing, " ").concat(expected[0]);
	    }
	  } else {
	    return "of ".concat(thing, " ").concat(String(expected));
	  }
	} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


	function startsWith(str, search, pos) {
	  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
	} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


	function endsWith(str, search, this_len) {
	  if (this_len === undefined || this_len > str.length) {
	    this_len = str.length;
	  }

	  return str.substring(this_len - search.length, this_len) === search;
	} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


	function includes(str, search, start) {
	  if (typeof start !== 'number') {
	    start = 0;
	  }

	  if (start + search.length > str.length) {
	    return false;
	  } else {
	    return str.indexOf(search, start) !== -1;
	  }
	}

	createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
	  return 'The value "' + value + '" is invalid for option "' + name + '"';
	}, TypeError);
	createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
	  // determiner: 'must be' or 'must not be'
	  var determiner;

	  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
	    determiner = 'must not be';
	    expected = expected.replace(/^not /, '');
	  } else {
	    determiner = 'must be';
	  }

	  var msg;

	  if (endsWith(name, ' argument')) {
	    // For cases like 'first argument'
	    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
	  } else {
	    var type = includes(name, '.') ? 'property' : 'argument';
	    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
	  }

	  msg += ". Received type ".concat(typeof actual);
	  return msg;
	}, TypeError);
	createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
	createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
	  return 'The ' + name + ' method is not implemented';
	});
	createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
	createErrorType('ERR_STREAM_DESTROYED', function (name) {
	  return 'Cannot call ' + name + ' after a stream was destroyed';
	});
	createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
	createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
	createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
	createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
	createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
	  return 'Unknown encoding: ' + arg;
	}, TypeError);
	createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
	errorsBrowser.codes = codes$l;

	var ERR_INVALID_OPT_VALUE = errorsBrowser.codes.ERR_INVALID_OPT_VALUE;

	function highWaterMarkFrom(options, isDuplex, duplexKey) {
	  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
	}

	function getHighWaterMark$2(state, options, duplexKey, isDuplex) {
	  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

	  if (hwm != null) {
	    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
	      var name = isDuplex ? duplexKey : 'highWaterMark';
	      throw new ERR_INVALID_OPT_VALUE(name, hwm);
	    }

	    return Math.floor(hwm);
	  } // Default value


	  return state.objectMode ? 16 : 16 * 1024;
	}

	var state = {
	  getHighWaterMark: getHighWaterMark$2
	};

	/**
	 * Module exports.
	 */

	var browser$6 = deprecate;

	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */

	function deprecate (fn, msg) {
	  if (config$1('noDeprecation')) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (config$1('throwDeprecation')) {
	        throw new Error(msg);
	      } else if (config$1('traceDeprecation')) ; else ;
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */

	function config$1 (name) {
	  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
	  try {
	    if (!commonjsGlobal.localStorage) return false;
	  } catch (_) {
	    return false;
	  }
	  var val = commonjsGlobal.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
	}

	var _stream_writable = Writable$1;
	// there will be only 2 of these for each stream


	function CorkedRequest(state) {
	  var _this = this;

	  this.next = null;
	  this.entry = null;

	  this.finish = function () {
	    onCorkedFinish(_this, state);
	  };
	}
	/* </replacement> */

	/*<replacement>*/


	var Duplex$3;
	/*</replacement>*/

	Writable$1.WritableState = WritableState;
	/*<replacement>*/

	var internalUtil = {
	  deprecate: browser$6
	};
	/*</replacement>*/

	/*<replacement>*/

	var Stream$1 = streamBrowser;
	/*</replacement>*/


	var Buffer$b = require$$0$1.Buffer;

	var OurUint8Array$1 = commonjsGlobal.Uint8Array || function () {};

	function _uint8ArrayToBuffer$1(chunk) {
	  return Buffer$b.from(chunk);
	}

	function _isUint8Array$1(obj) {
	  return Buffer$b.isBuffer(obj) || obj instanceof OurUint8Array$1;
	}

	var destroyImpl$1 = destroy_1;

	var _require$1 = state,
	    getHighWaterMark$1 = _require$1.getHighWaterMark;

	var _require$codes$3 = errorsBrowser.codes,
	    ERR_INVALID_ARG_TYPE$1 = _require$codes$3.ERR_INVALID_ARG_TYPE,
	    ERR_METHOD_NOT_IMPLEMENTED$2 = _require$codes$3.ERR_METHOD_NOT_IMPLEMENTED,
	    ERR_MULTIPLE_CALLBACK$1 = _require$codes$3.ERR_MULTIPLE_CALLBACK,
	    ERR_STREAM_CANNOT_PIPE = _require$codes$3.ERR_STREAM_CANNOT_PIPE,
	    ERR_STREAM_DESTROYED$1 = _require$codes$3.ERR_STREAM_DESTROYED,
	    ERR_STREAM_NULL_VALUES = _require$codes$3.ERR_STREAM_NULL_VALUES,
	    ERR_STREAM_WRITE_AFTER_END = _require$codes$3.ERR_STREAM_WRITE_AFTER_END,
	    ERR_UNKNOWN_ENCODING = _require$codes$3.ERR_UNKNOWN_ENCODING;

	var errorOrDestroy$1 = destroyImpl$1.errorOrDestroy;

	inherits_browser.exports(Writable$1, Stream$1);

	function nop() {}

	function WritableState(options, stream, isDuplex) {
	  Duplex$3 = Duplex$3 || _stream_duplex;
	  options = options || {}; // Duplex streams are both readable and writable, but share
	  // the same options object.
	  // However, some cases require setting options to different
	  // values for the readable and the writable sides of the duplex stream,
	  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

	  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex$3; // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.

	  this.objectMode = !!options.objectMode;
	  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()

	  this.highWaterMark = getHighWaterMark$1(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

	  this.finalCalled = false; // drain event flag.

	  this.needDrain = false; // at the start of calling end()

	  this.ending = false; // when end() has been called, and returned

	  this.ended = false; // when 'finish' is emitted

	  this.finished = false; // has it been destroyed

	  this.destroyed = false; // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.

	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.

	  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.

	  this.length = 0; // a flag to see when we're in the middle of a write.

	  this.writing = false; // when true all writes will be buffered until .uncork() call

	  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.

	  this.sync = true; // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.

	  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  }; // the callback that the user supplies to write(chunk,encoding,cb)


	  this.writecb = null; // the amount that is being written when _write is called.

	  this.writelen = 0;
	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted

	  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams

	  this.prefinished = false; // True if the error was already emitted and should not be thrown again

	  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

	  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

	  this.autoDestroy = !!options.autoDestroy; // count buffered requests

	  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two

	  this.corkedRequestsFree = new CorkedRequest(this);
	}

	WritableState.prototype.getBuffer = function getBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];

	  while (current) {
	    out.push(current);
	    current = current.next;
	  }

	  return out;
	};

	(function () {
	  try {
	    Object.defineProperty(WritableState.prototype, 'buffer', {
	      get: internalUtil.deprecate(function writableStateBufferGetter() {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
	    });
	  } catch (_) {}
	})(); // Test _writableState for inheritance to account for Duplex streams,
	// whose prototype chain only points to Readable.


	var realHasInstance;

	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
	  realHasInstance = Function.prototype[Symbol.hasInstance];
	  Object.defineProperty(Writable$1, Symbol.hasInstance, {
	    value: function value(object) {
	      if (realHasInstance.call(this, object)) return true;
	      if (this !== Writable$1) return false;
	      return object && object._writableState instanceof WritableState;
	    }
	  });
	} else {
	  realHasInstance = function realHasInstance(object) {
	    return object instanceof this;
	  };
	}

	function Writable$1(options) {
	  Duplex$3 = Duplex$3 || _stream_duplex; // Writable ctor is applied to Duplexes, too.
	  // `realHasInstance` is necessary because using plain `instanceof`
	  // would return false, as no `_writableState` property is attached.
	  // Trying to use the custom `instanceof` for Writable here will also break the
	  // Node.js LazyTransform implementation, which has a non-trivial getter for
	  // `_writableState` that would lead to infinite recursion.
	  // Checking for a Stream.Duplex instance is faster here instead of inside
	  // the WritableState constructor, at least with V8 6.5

	  var isDuplex = this instanceof Duplex$3;
	  if (!isDuplex && !realHasInstance.call(Writable$1, this)) return new Writable$1(options);
	  this._writableState = new WritableState(options, this, isDuplex); // legacy.

	  this.writable = true;

	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;
	    if (typeof options.writev === 'function') this._writev = options.writev;
	    if (typeof options.destroy === 'function') this._destroy = options.destroy;
	    if (typeof options.final === 'function') this._final = options.final;
	  }

	  Stream$1.call(this);
	} // Otherwise people can pipe Writable streams, which is just wrong.


	Writable$1.prototype.pipe = function () {
	  errorOrDestroy$1(this, new ERR_STREAM_CANNOT_PIPE());
	};

	function writeAfterEnd(stream, cb) {
	  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

	  errorOrDestroy$1(stream, er);
	  process$3.nextTick(cb, er);
	} // Checks that a user-supplied chunk is valid, especially for the particular
	// mode the stream is in. Currently this means that `null` is never accepted
	// and undefined/non-string values are only allowed in object mode.


	function validChunk(stream, state, chunk, cb) {
	  var er;

	  if (chunk === null) {
	    er = new ERR_STREAM_NULL_VALUES();
	  } else if (typeof chunk !== 'string' && !state.objectMode) {
	    er = new ERR_INVALID_ARG_TYPE$1('chunk', ['string', 'Buffer'], chunk);
	  }

	  if (er) {
	    errorOrDestroy$1(stream, er);
	    process$3.nextTick(cb, er);
	    return false;
	  }

	  return true;
	}

	Writable$1.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  var isBuf = !state.objectMode && _isUint8Array$1(chunk);

	  if (isBuf && !Buffer$b.isBuffer(chunk)) {
	    chunk = _uint8ArrayToBuffer$1(chunk);
	  }

	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
	  if (typeof cb !== 'function') cb = nop;
	  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
	  }
	  return ret;
	};

	Writable$1.prototype.cork = function () {
	  this._writableState.corked++;
	};

	Writable$1.prototype.uncork = function () {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;
	    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};

	Writable$1.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};

	Object.defineProperty(Writable$1.prototype, 'writableBuffer', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState && this._writableState.getBuffer();
	  }
	});

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = Buffer$b.from(chunk, encoding);
	  }

	  return chunk;
	}

	Object.defineProperty(Writable$1.prototype, 'writableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.highWaterMark;
	  }
	}); // if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.

	function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
	  if (!isBuf) {
	    var newChunk = decodeChunk(state, chunk, encoding);

	    if (chunk !== newChunk) {
	      isBuf = true;
	      encoding = 'buffer';
	      chunk = newChunk;
	    }
	  }

	  var len = state.objectMode ? 1 : chunk.length;
	  state.length += len;
	  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

	  if (!ret) state.needDrain = true;

	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = {
	      chunk: chunk,
	      encoding: encoding,
	      isBuf: isBuf,
	      callback: cb,
	      next: null
	    };

	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }

	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED$1('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;

	  if (sync) {
	    // defer the callback if we are being called synchronously
	    // to avoid piling up things on the stack
	    process$3.nextTick(cb, er); // this can emit finish, and it will always happen
	    // after error

	    process$3.nextTick(finishMaybe, stream, state);
	    stream._writableState.errorEmitted = true;
	    errorOrDestroy$1(stream, er);
	  } else {
	    // the caller expect this to happen before if
	    // it is async
	    cb(er);
	    stream._writableState.errorEmitted = true;
	    errorOrDestroy$1(stream, er); // this can emit finish, but finish must
	    // always follow error

	    finishMaybe(stream, state);
	  }
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;
	  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK$1();
	  onwriteStateUpdate(state);
	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state) || stream.destroyed;

	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      process$3.nextTick(afterWrite, stream, state, finished, cb);
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	} // Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.


	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	} // if there's something in the buffer waiting, then process it


	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;

	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;
	    var count = 0;
	    var allBuffers = true;

	    while (entry) {
	      buffer[count] = entry;
	      if (!entry.isBuf) allBuffers = false;
	      entry = entry.next;
	      count += 1;
	    }

	    buffer.allBuffers = allBuffers;
	    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite

	    state.pendingcb++;
	    state.lastBufferedRequest = null;

	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }

	    state.bufferedRequestCount = 0;
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;
	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.

	      if (state.writing) {
	        break;
	      }
	    }

	    if (entry === null) state.lastBufferedRequest = null;
	  }

	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}

	Writable$1.prototype._write = function (chunk, encoding, cb) {
	  cb(new ERR_METHOD_NOT_IMPLEMENTED$2('_write()'));
	};

	Writable$1.prototype._writev = null;

	Writable$1.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;

	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  } // ignore unnecessary end() calls.


	  if (!state.ending) endWritable(this, state, cb);
	  return this;
	};

	Object.defineProperty(Writable$1.prototype, 'writableLength', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.length;
	  }
	});

	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}

	function callFinal(stream, state) {
	  stream._final(function (err) {
	    state.pendingcb--;

	    if (err) {
	      errorOrDestroy$1(stream, err);
	    }

	    state.prefinished = true;
	    stream.emit('prefinish');
	    finishMaybe(stream, state);
	  });
	}

	function prefinish$1(stream, state) {
	  if (!state.prefinished && !state.finalCalled) {
	    if (typeof stream._final === 'function' && !state.destroyed) {
	      state.pendingcb++;
	      state.finalCalled = true;
	      process$3.nextTick(callFinal, stream, state);
	    } else {
	      state.prefinished = true;
	      stream.emit('prefinish');
	    }
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(state);

	  if (need) {
	    prefinish$1(stream, state);

	    if (state.pendingcb === 0) {
	      state.finished = true;
	      stream.emit('finish');

	      if (state.autoDestroy) {
	        // In case of duplex streams we need a way to detect
	        // if the readable side is ready for autoDestroy as well
	        var rState = stream._readableState;

	        if (!rState || rState.autoDestroy && rState.endEmitted) {
	          stream.destroy();
	        }
	      }
	    }
	  }

	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);

	  if (cb) {
	    if (state.finished) process$3.nextTick(cb);else stream.once('finish', cb);
	  }

	  state.ended = true;
	  stream.writable = false;
	}

	function onCorkedFinish(corkReq, state, err) {
	  var entry = corkReq.entry;
	  corkReq.entry = null;

	  while (entry) {
	    var cb = entry.callback;
	    state.pendingcb--;
	    cb(err);
	    entry = entry.next;
	  } // reuse the free corkReq.


	  state.corkedRequestsFree.next = corkReq;
	}

	Object.defineProperty(Writable$1.prototype, 'destroyed', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    if (this._writableState === undefined) {
	      return false;
	    }

	    return this._writableState.destroyed;
	  },
	  set: function set(value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (!this._writableState) {
	      return;
	    } // backward compatibility, the user is explicitly
	    // managing destroyed


	    this._writableState.destroyed = value;
	  }
	});
	Writable$1.prototype.destroy = destroyImpl$1.destroy;
	Writable$1.prototype._undestroy = destroyImpl$1.undestroy;

	Writable$1.prototype._destroy = function (err, cb) {
	  cb(err);
	};

	/*<replacement>*/

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];

	  for (var key in obj) {
	    keys.push(key);
	  }

	  return keys;
	};
	/*</replacement>*/


	var _stream_duplex = Duplex$2;

	var Readable$2 = _stream_readable;

	var Writable = _stream_writable;

	inherits_browser.exports(Duplex$2, Readable$2);

	{
	  // Allow the keys array to be GC'ed.
	  var keys = objectKeys(Writable.prototype);

	  for (var v = 0; v < keys.length; v++) {
	    var method = keys[v];
	    if (!Duplex$2.prototype[method]) Duplex$2.prototype[method] = Writable.prototype[method];
	  }
	}

	function Duplex$2(options) {
	  if (!(this instanceof Duplex$2)) return new Duplex$2(options);
	  Readable$2.call(this, options);
	  Writable.call(this, options);
	  this.allowHalfOpen = true;

	  if (options) {
	    if (options.readable === false) this.readable = false;
	    if (options.writable === false) this.writable = false;

	    if (options.allowHalfOpen === false) {
	      this.allowHalfOpen = false;
	      this.once('end', onend);
	    }
	  }
	}

	Object.defineProperty(Duplex$2.prototype, 'writableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.highWaterMark;
	  }
	});
	Object.defineProperty(Duplex$2.prototype, 'writableBuffer', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState && this._writableState.getBuffer();
	  }
	});
	Object.defineProperty(Duplex$2.prototype, 'writableLength', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._writableState.length;
	  }
	}); // the no-half-open enforcer

	function onend() {
	  // If the writable side ended, then we're ok.
	  if (this._writableState.ended) return; // no more data can be written.
	  // But allow more writes to happen in this tick.

	  process$3.nextTick(onEndNT, this);
	}

	function onEndNT(self) {
	  self.end();
	}

	Object.defineProperty(Duplex$2.prototype, 'destroyed', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    if (this._readableState === undefined || this._writableState === undefined) {
	      return false;
	    }

	    return this._readableState.destroyed && this._writableState.destroyed;
	  },
	  set: function set(value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (this._readableState === undefined || this._writableState === undefined) {
	      return;
	    } // backward compatibility, the user is explicitly
	    // managing destroyed


	    this._readableState.destroyed = value;
	    this._writableState.destroyed = value;
	  }
	});

	var string_decoder = {};

	var safeBuffer = {exports: {}};

	/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

	(function (module, exports) {
	/* eslint-disable node/no-deprecated-api */
	var buffer = require$$0$1;
	var Buffer = buffer.Buffer;

	// alternative to using Object.keys for old browsers
	function copyProps (src, dst) {
	  for (var key in src) {
	    dst[key] = src[key];
	  }
	}
	if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
	  module.exports = buffer;
	} else {
	  // Copy properties from require('buffer')
	  copyProps(buffer, exports);
	  exports.Buffer = SafeBuffer;
	}

	function SafeBuffer (arg, encodingOrOffset, length) {
	  return Buffer(arg, encodingOrOffset, length)
	}

	SafeBuffer.prototype = Object.create(Buffer.prototype);

	// Copy static methods from Buffer
	copyProps(Buffer, SafeBuffer);

	SafeBuffer.from = function (arg, encodingOrOffset, length) {
	  if (typeof arg === 'number') {
	    throw new TypeError('Argument must not be a number')
	  }
	  return Buffer(arg, encodingOrOffset, length)
	};

	SafeBuffer.alloc = function (size, fill, encoding) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  var buf = Buffer(size);
	  if (fill !== undefined) {
	    if (typeof encoding === 'string') {
	      buf.fill(fill, encoding);
	    } else {
	      buf.fill(fill);
	    }
	  } else {
	    buf.fill(0);
	  }
	  return buf
	};

	SafeBuffer.allocUnsafe = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return Buffer(size)
	};

	SafeBuffer.allocUnsafeSlow = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return buffer.SlowBuffer(size)
	};
	}(safeBuffer, safeBuffer.exports));

	/*<replacement>*/

	var Buffer$a = safeBuffer.exports.Buffer;
	/*</replacement>*/

	var isEncoding = Buffer$a.isEncoding || function (encoding) {
	  encoding = '' + encoding;
	  switch (encoding && encoding.toLowerCase()) {
	    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
	      return true;
	    default:
	      return false;
	  }
	};

	function _normalizeEncoding(enc) {
	  if (!enc) return 'utf8';
	  var retried;
	  while (true) {
	    switch (enc) {
	      case 'utf8':
	      case 'utf-8':
	        return 'utf8';
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return 'utf16le';
	      case 'latin1':
	      case 'binary':
	        return 'latin1';
	      case 'base64':
	      case 'ascii':
	      case 'hex':
	        return enc;
	      default:
	        if (retried) return; // undefined
	        enc = ('' + enc).toLowerCase();
	        retried = true;
	    }
	  }
	}
	// Do not cache `Buffer.isEncoding` when checking encoding names as some
	// modules monkey-patch it to support additional encodings
	function normalizeEncoding(enc) {
	  var nenc = _normalizeEncoding(enc);
	  if (typeof nenc !== 'string' && (Buffer$a.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
	  return nenc || enc;
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters.
	string_decoder.StringDecoder = StringDecoder$1;
	function StringDecoder$1(encoding) {
	  this.encoding = normalizeEncoding(encoding);
	  var nb;
	  switch (this.encoding) {
	    case 'utf16le':
	      this.text = utf16Text;
	      this.end = utf16End;
	      nb = 4;
	      break;
	    case 'utf8':
	      this.fillLast = utf8FillLast;
	      nb = 4;
	      break;
	    case 'base64':
	      this.text = base64Text;
	      this.end = base64End;
	      nb = 3;
	      break;
	    default:
	      this.write = simpleWrite;
	      this.end = simpleEnd;
	      return;
	  }
	  this.lastNeed = 0;
	  this.lastTotal = 0;
	  this.lastChar = Buffer$a.allocUnsafe(nb);
	}

	StringDecoder$1.prototype.write = function (buf) {
	  if (buf.length === 0) return '';
	  var r;
	  var i;
	  if (this.lastNeed) {
	    r = this.fillLast(buf);
	    if (r === undefined) return '';
	    i = this.lastNeed;
	    this.lastNeed = 0;
	  } else {
	    i = 0;
	  }
	  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
	  return r || '';
	};

	StringDecoder$1.prototype.end = utf8End;

	// Returns only complete characters in a Buffer
	StringDecoder$1.prototype.text = utf8Text;

	// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
	StringDecoder$1.prototype.fillLast = function (buf) {
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
	  this.lastNeed -= buf.length;
	};

	// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
	// continuation byte. If an invalid byte is detected, -2 is returned.
	function utf8CheckByte(byte) {
	  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
	  return byte >> 6 === 0x02 ? -1 : -2;
	}

	// Checks at most 3 bytes at the end of a Buffer in order to detect an
	// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
	// needed to complete the UTF-8 character (if applicable) are returned.
	function utf8CheckIncomplete(self, buf, i) {
	  var j = buf.length - 1;
	  if (j < i) return 0;
	  var nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 1;
	    return nb;
	  }
	  if (--j < i || nb === -2) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 2;
	    return nb;
	  }
	  if (--j < i || nb === -2) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) {
	      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
	    }
	    return nb;
	  }
	  return 0;
	}

	// Validates as many continuation bytes for a multi-byte UTF-8 character as
	// needed or are available. If we see a non-continuation byte where we expect
	// one, we "replace" the validated continuation bytes we've seen so far with
	// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
	// behavior. The continuation byte check is included three times in the case
	// where all of the continuation bytes for a character exist in the same buffer.
	// It is also done this way as a slight performance increase instead of using a
	// loop.
	function utf8CheckExtraBytes(self, buf, p) {
	  if ((buf[0] & 0xC0) !== 0x80) {
	    self.lastNeed = 0;
	    return '\ufffd';
	  }
	  if (self.lastNeed > 1 && buf.length > 1) {
	    if ((buf[1] & 0xC0) !== 0x80) {
	      self.lastNeed = 1;
	      return '\ufffd';
	    }
	    if (self.lastNeed > 2 && buf.length > 2) {
	      if ((buf[2] & 0xC0) !== 0x80) {
	        self.lastNeed = 2;
	        return '\ufffd';
	      }
	    }
	  }
	}

	// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
	function utf8FillLast(buf) {
	  var p = this.lastTotal - this.lastNeed;
	  var r = utf8CheckExtraBytes(this, buf);
	  if (r !== undefined) return r;
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, p, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, p, 0, buf.length);
	  this.lastNeed -= buf.length;
	}

	// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
	// partial character, the character's bytes are buffered until the required
	// number of bytes are available.
	function utf8Text(buf, i) {
	  var total = utf8CheckIncomplete(this, buf, i);
	  if (!this.lastNeed) return buf.toString('utf8', i);
	  this.lastTotal = total;
	  var end = buf.length - (total - this.lastNeed);
	  buf.copy(this.lastChar, 0, end);
	  return buf.toString('utf8', i, end);
	}

	// For UTF-8, a replacement character is added when ending on a partial
	// character.
	function utf8End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + '\ufffd';
	  return r;
	}

	// UTF-16LE typically needs two bytes per character, but even if we have an even
	// number of bytes available, we need to check if we end on a leading/high
	// surrogate. In that case, we need to wait for the next two bytes in order to
	// decode the last character properly.
	function utf16Text(buf, i) {
	  if ((buf.length - i) % 2 === 0) {
	    var r = buf.toString('utf16le', i);
	    if (r) {
	      var c = r.charCodeAt(r.length - 1);
	      if (c >= 0xD800 && c <= 0xDBFF) {
	        this.lastNeed = 2;
	        this.lastTotal = 4;
	        this.lastChar[0] = buf[buf.length - 2];
	        this.lastChar[1] = buf[buf.length - 1];
	        return r.slice(0, -1);
	      }
	    }
	    return r;
	  }
	  this.lastNeed = 1;
	  this.lastTotal = 2;
	  this.lastChar[0] = buf[buf.length - 1];
	  return buf.toString('utf16le', i, buf.length - 1);
	}

	// For UTF-16LE we do not explicitly append special replacement characters if we
	// end on a partial character, we simply let v8 handle that.
	function utf16End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) {
	    var end = this.lastTotal - this.lastNeed;
	    return r + this.lastChar.toString('utf16le', 0, end);
	  }
	  return r;
	}

	function base64Text(buf, i) {
	  var n = (buf.length - i) % 3;
	  if (n === 0) return buf.toString('base64', i);
	  this.lastNeed = 3 - n;
	  this.lastTotal = 3;
	  if (n === 1) {
	    this.lastChar[0] = buf[buf.length - 1];
	  } else {
	    this.lastChar[0] = buf[buf.length - 2];
	    this.lastChar[1] = buf[buf.length - 1];
	  }
	  return buf.toString('base64', i, buf.length - n);
	}

	function base64End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
	  return r;
	}

	// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
	function simpleWrite(buf) {
	  return buf.toString(this.encoding);
	}

	function simpleEnd(buf) {
	  return buf && buf.length ? this.write(buf) : '';
	}

	var ERR_STREAM_PREMATURE_CLOSE = errorsBrowser.codes.ERR_STREAM_PREMATURE_CLOSE;

	function once$1(callback) {
	  var called = false;
	  return function () {
	    if (called) return;
	    called = true;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    callback.apply(this, args);
	  };
	}

	function noop$4() {}

	function isRequest$1(stream) {
	  return stream.setHeader && typeof stream.abort === 'function';
	}

	function eos$1(stream, opts, callback) {
	  if (typeof opts === 'function') return eos$1(stream, null, opts);
	  if (!opts) opts = {};
	  callback = once$1(callback || noop$4);
	  var readable = opts.readable || opts.readable !== false && stream.readable;
	  var writable = opts.writable || opts.writable !== false && stream.writable;

	  var onlegacyfinish = function onlegacyfinish() {
	    if (!stream.writable) onfinish();
	  };

	  var writableEnded = stream._writableState && stream._writableState.finished;

	  var onfinish = function onfinish() {
	    writable = false;
	    writableEnded = true;
	    if (!readable) callback.call(stream);
	  };

	  var readableEnded = stream._readableState && stream._readableState.endEmitted;

	  var onend = function onend() {
	    readable = false;
	    readableEnded = true;
	    if (!writable) callback.call(stream);
	  };

	  var onerror = function onerror(err) {
	    callback.call(stream, err);
	  };

	  var onclose = function onclose() {
	    var err;

	    if (readable && !readableEnded) {
	      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
	      return callback.call(stream, err);
	    }

	    if (writable && !writableEnded) {
	      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
	      return callback.call(stream, err);
	    }
	  };

	  var onrequest = function onrequest() {
	    stream.req.on('finish', onfinish);
	  };

	  if (isRequest$1(stream)) {
	    stream.on('complete', onfinish);
	    stream.on('abort', onclose);
	    if (stream.req) onrequest();else stream.on('request', onrequest);
	  } else if (writable && !stream._writableState) {
	    // legacy streams
	    stream.on('end', onlegacyfinish);
	    stream.on('close', onlegacyfinish);
	  }

	  stream.on('end', onend);
	  stream.on('finish', onfinish);
	  if (opts.error !== false) stream.on('error', onerror);
	  stream.on('close', onclose);
	  return function () {
	    stream.removeListener('complete', onfinish);
	    stream.removeListener('abort', onclose);
	    stream.removeListener('request', onrequest);
	    if (stream.req) stream.req.removeListener('finish', onfinish);
	    stream.removeListener('end', onlegacyfinish);
	    stream.removeListener('close', onlegacyfinish);
	    stream.removeListener('finish', onfinish);
	    stream.removeListener('end', onend);
	    stream.removeListener('error', onerror);
	    stream.removeListener('close', onclose);
	  };
	}

	var endOfStream = eos$1;

	var _Object$setPrototypeO;

	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var finished = endOfStream;

	var kLastResolve = Symbol('lastResolve');
	var kLastReject = Symbol('lastReject');
	var kError = Symbol('error');
	var kEnded = Symbol('ended');
	var kLastPromise = Symbol('lastPromise');
	var kHandlePromise = Symbol('handlePromise');
	var kStream = Symbol('stream');

	function createIterResult(value, done) {
	  return {
	    value: value,
	    done: done
	  };
	}

	function readAndResolve(iter) {
	  var resolve = iter[kLastResolve];

	  if (resolve !== null) {
	    var data = iter[kStream].read(); // we defer if data is null
	    // we can be expecting either 'end' or
	    // 'error'

	    if (data !== null) {
	      iter[kLastPromise] = null;
	      iter[kLastResolve] = null;
	      iter[kLastReject] = null;
	      resolve(createIterResult(data, false));
	    }
	  }
	}

	function onReadable(iter) {
	  // we wait for the next tick, because it might
	  // emit an error with process.nextTick
	  process$3.nextTick(readAndResolve, iter);
	}

	function wrapForNext(lastPromise, iter) {
	  return function (resolve, reject) {
	    lastPromise.then(function () {
	      if (iter[kEnded]) {
	        resolve(createIterResult(undefined, true));
	        return;
	      }

	      iter[kHandlePromise](resolve, reject);
	    }, reject);
	  };
	}

	var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
	var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
	  get stream() {
	    return this[kStream];
	  },

	  next: function next() {
	    var _this = this;

	    // if we have detected an error in the meanwhile
	    // reject straight away
	    var error = this[kError];

	    if (error !== null) {
	      return Promise.reject(error);
	    }

	    if (this[kEnded]) {
	      return Promise.resolve(createIterResult(undefined, true));
	    }

	    if (this[kStream].destroyed) {
	      // We need to defer via nextTick because if .destroy(err) is
	      // called, the error will be emitted via nextTick, and
	      // we cannot guarantee that there is no error lingering around
	      // waiting to be emitted.
	      return new Promise(function (resolve, reject) {
	        process$3.nextTick(function () {
	          if (_this[kError]) {
	            reject(_this[kError]);
	          } else {
	            resolve(createIterResult(undefined, true));
	          }
	        });
	      });
	    } // if we have multiple next() calls
	    // we will wait for the previous Promise to finish
	    // this logic is optimized to support for await loops,
	    // where next() is only called once at a time


	    var lastPromise = this[kLastPromise];
	    var promise;

	    if (lastPromise) {
	      promise = new Promise(wrapForNext(lastPromise, this));
	    } else {
	      // fast path needed to support multiple this.push()
	      // without triggering the next() queue
	      var data = this[kStream].read();

	      if (data !== null) {
	        return Promise.resolve(createIterResult(data, false));
	      }

	      promise = new Promise(this[kHandlePromise]);
	    }

	    this[kLastPromise] = promise;
	    return promise;
	  }
	}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
	  return this;
	}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
	  var _this2 = this;

	  // destroy(err, cb) is a private API
	  // we can guarantee we have that here, because we control the
	  // Readable class this is attached to
	  return new Promise(function (resolve, reject) {
	    _this2[kStream].destroy(null, function (err) {
	      if (err) {
	        reject(err);
	        return;
	      }

	      resolve(createIterResult(undefined, true));
	    });
	  });
	}), _Object$setPrototypeO), AsyncIteratorPrototype);

	var createReadableStreamAsyncIterator$1 = function createReadableStreamAsyncIterator(stream) {
	  var _Object$create;

	  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
	    value: stream,
	    writable: true
	  }), _defineProperty(_Object$create, kLastResolve, {
	    value: null,
	    writable: true
	  }), _defineProperty(_Object$create, kLastReject, {
	    value: null,
	    writable: true
	  }), _defineProperty(_Object$create, kError, {
	    value: null,
	    writable: true
	  }), _defineProperty(_Object$create, kEnded, {
	    value: stream._readableState.endEmitted,
	    writable: true
	  }), _defineProperty(_Object$create, kHandlePromise, {
	    value: function value(resolve, reject) {
	      var data = iterator[kStream].read();

	      if (data) {
	        iterator[kLastPromise] = null;
	        iterator[kLastResolve] = null;
	        iterator[kLastReject] = null;
	        resolve(createIterResult(data, false));
	      } else {
	        iterator[kLastResolve] = resolve;
	        iterator[kLastReject] = reject;
	      }
	    },
	    writable: true
	  }), _Object$create));
	  iterator[kLastPromise] = null;
	  finished(stream, function (err) {
	    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
	      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
	      // returned by next() and store the error

	      if (reject !== null) {
	        iterator[kLastPromise] = null;
	        iterator[kLastResolve] = null;
	        iterator[kLastReject] = null;
	        reject(err);
	      }

	      iterator[kError] = err;
	      return;
	    }

	    var resolve = iterator[kLastResolve];

	    if (resolve !== null) {
	      iterator[kLastPromise] = null;
	      iterator[kLastResolve] = null;
	      iterator[kLastReject] = null;
	      resolve(createIterResult(undefined, true));
	    }

	    iterator[kEnded] = true;
	  });
	  stream.on('readable', onReadable.bind(null, iterator));
	  return iterator;
	};

	var async_iterator = createReadableStreamAsyncIterator$1;

	var fromBrowser = function () {
	  throw new Error('Readable.from is not available in the browser')
	};

	var _stream_readable = Readable$1;
	/*<replacement>*/

	var Duplex$1;
	/*</replacement>*/

	Readable$1.ReadableState = ReadableState;
	/*<replacement>*/

	require$$1$5.EventEmitter;

	var EElistenerCount = function EElistenerCount(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	/*<replacement>*/


	var Stream = streamBrowser;
	/*</replacement>*/


	var Buffer$9 = require$$0$1.Buffer;

	var OurUint8Array = commonjsGlobal.Uint8Array || function () {};

	function _uint8ArrayToBuffer(chunk) {
	  return Buffer$9.from(chunk);
	}

	function _isUint8Array(obj) {
	  return Buffer$9.isBuffer(obj) || obj instanceof OurUint8Array;
	}
	/*<replacement>*/


	var debugUtil = require$$1$3;

	var debug$R;

	if (debugUtil && debugUtil.debuglog) {
	  debug$R = debugUtil.debuglog('stream');
	} else {
	  debug$R = function debug() {};
	}
	/*</replacement>*/


	var BufferList$7 = buffer_list;

	var destroyImpl = destroy_1;

	var _require = state,
	    getHighWaterMark = _require.getHighWaterMark;

	var _require$codes$2 = errorsBrowser.codes,
	    ERR_INVALID_ARG_TYPE = _require$codes$2.ERR_INVALID_ARG_TYPE,
	    ERR_STREAM_PUSH_AFTER_EOF = _require$codes$2.ERR_STREAM_PUSH_AFTER_EOF,
	    ERR_METHOD_NOT_IMPLEMENTED$1 = _require$codes$2.ERR_METHOD_NOT_IMPLEMENTED,
	    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes$2.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


	var StringDecoder;
	var createReadableStreamAsyncIterator;
	var from;

	inherits_browser.exports(Readable$1, Stream);

	var errorOrDestroy = destroyImpl.errorOrDestroy;
	var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
	  // userland ones.  NEVER DO THIS. This is here only because this code needs
	  // to continue to work with older versions of Node.js that do not include
	  // the prependListener() method. The goal is to eventually remove this hack.

	  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	}

	function ReadableState(options, stream, isDuplex) {
	  Duplex$1 = Duplex$1 || _stream_duplex;
	  options = options || {}; // Duplex streams are both readable and writable, but share
	  // the same options object.
	  // However, some cases require setting options to different
	  // values for the readable and the writable sides of the duplex stream.
	  // These options can be provided separately as readableXXX and writableXXX.

	  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex$1; // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away

	  this.objectMode = !!options.objectMode;
	  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"

	  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()

	  this.buffer = new BufferList$7();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
	  // immediately, or on a later tick.  We set this to true at first, because
	  // any actions that shouldn't happen until "later" should generally also
	  // not happen before the first read call.

	  this.sync = true; // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.

	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;
	  this.paused = true; // Should close be emitted on destroy. Defaults to true.

	  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

	  this.autoDestroy = !!options.autoDestroy; // has it been destroyed

	  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.

	  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

	  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

	  this.readingMore = false;
	  this.decoder = null;
	  this.encoding = null;

	  if (options.encoding) {
	    if (!StringDecoder) StringDecoder = string_decoder.StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable$1(options) {
	  Duplex$1 = Duplex$1 || _stream_duplex;
	  if (!(this instanceof Readable$1)) return new Readable$1(options); // Checking for a Stream.Duplex instance is faster here instead of inside
	  // the ReadableState constructor, at least with V8 6.5

	  var isDuplex = this instanceof Duplex$1;
	  this._readableState = new ReadableState(options, this, isDuplex); // legacy

	  this.readable = true;

	  if (options) {
	    if (typeof options.read === 'function') this._read = options.read;
	    if (typeof options.destroy === 'function') this._destroy = options.destroy;
	  }

	  Stream.call(this);
	}

	Object.defineProperty(Readable$1.prototype, 'destroyed', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    if (this._readableState === undefined) {
	      return false;
	    }

	    return this._readableState.destroyed;
	  },
	  set: function set(value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (!this._readableState) {
	      return;
	    } // backward compatibility, the user is explicitly
	    // managing destroyed


	    this._readableState.destroyed = value;
	  }
	});
	Readable$1.prototype.destroy = destroyImpl.destroy;
	Readable$1.prototype._undestroy = destroyImpl.undestroy;

	Readable$1.prototype._destroy = function (err, cb) {
	  cb(err);
	}; // Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.


	Readable$1.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;
	  var skipChunkCheck;

	  if (!state.objectMode) {
	    if (typeof chunk === 'string') {
	      encoding = encoding || state.defaultEncoding;

	      if (encoding !== state.encoding) {
	        chunk = Buffer$9.from(chunk, encoding);
	        encoding = '';
	      }

	      skipChunkCheck = true;
	    }
	  } else {
	    skipChunkCheck = true;
	  }

	  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
	}; // Unshift should *always* be something directly out of read()


	Readable$1.prototype.unshift = function (chunk) {
	  return readableAddChunk(this, chunk, null, true, false);
	};

	function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
	  debug$R('readableAddChunk', chunk);
	  var state = stream._readableState;

	  if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else {
	    var er;
	    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

	    if (er) {
	      errorOrDestroy(stream, er);
	    } else if (state.objectMode || chunk && chunk.length > 0) {
	      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer$9.prototype) {
	        chunk = _uint8ArrayToBuffer(chunk);
	      }

	      if (addToFront) {
	        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
	      } else if (state.ended) {
	        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
	      } else if (state.destroyed) {
	        return false;
	      } else {
	        state.reading = false;

	        if (state.decoder && !encoding) {
	          chunk = state.decoder.write(chunk);
	          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
	        } else {
	          addChunk(stream, state, chunk, false);
	        }
	      }
	    } else if (!addToFront) {
	      state.reading = false;
	      maybeReadMore(stream, state);
	    }
	  } // We can push more data if we are below the highWaterMark.
	  // Also, if we have no data yet, we can stand some more bytes.
	  // This is to work around cases where hwm=0, such as the repl.


	  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
	}

	function addChunk(stream, state, chunk, addToFront) {
	  if (state.flowing && state.length === 0 && !state.sync) {
	    state.awaitDrain = 0;
	    stream.emit('data', chunk);
	  } else {
	    // update the buffer info.
	    state.length += state.objectMode ? 1 : chunk.length;
	    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
	    if (state.needReadable) emitReadable(stream);
	  }

	  maybeReadMore(stream, state);
	}

	function chunkInvalid(state, chunk) {
	  var er;

	  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
	  }

	  return er;
	}

	Readable$1.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	}; // backwards compatibility.


	Readable$1.prototype.setEncoding = function (enc) {
	  if (!StringDecoder) StringDecoder = string_decoder.StringDecoder;
	  var decoder = new StringDecoder(enc);
	  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

	  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

	  var p = this._readableState.buffer.head;
	  var content = '';

	  while (p !== null) {
	    content += decoder.write(p.data);
	    p = p.next;
	  }

	  this._readableState.buffer.clear();

	  if (content !== '') this._readableState.buffer.push(content);
	  this._readableState.length = content.length;
	  return this;
	}; // Don't raise the hwm > 1GB


	var MAX_HWM = 0x40000000;

	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }

	  return n;
	} // This function is designed to be inlinable, so please take care when making
	// changes to the function body.


	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;

	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  } // If we're asking for more than the current hwm, then raise the hwm.


	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n; // Don't have enough

	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }

	  return state.length;
	} // you can override either this method, or the async _read(n) below.


	Readable$1.prototype.read = function (n) {
	  debug$R('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;
	  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.

	  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
	    debug$R('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  } // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.
	  // if we need a readable event, then we need to do some reading.


	  var doRead = state.needReadable;
	  debug$R('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug$R('length less than watermark', doRead);
	  } // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.


	  if (state.ended || state.reading) {
	    doRead = false;
	    debug$R('reading or ended', doRead);
	  } else if (doRead) {
	    debug$R('do read');
	    state.reading = true;
	    state.sync = true; // if the length is currently zero, then we *need* a readable event.

	    if (state.length === 0) state.needReadable = true; // call internal read method

	    this._read(state.highWaterMark);

	    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.

	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }

	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;

	  if (ret === null) {
	    state.needReadable = state.length <= state.highWaterMark;
	    n = 0;
	  } else {
	    state.length -= n;
	    state.awaitDrain = 0;
	  }

	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

	    if (nOrig !== n && state.ended) endReadable(this);
	  }

	  if (ret !== null) this.emit('data', ret);
	  return ret;
	};

	function onEofChunk(stream, state) {
	  debug$R('onEofChunk');
	  if (state.ended) return;

	  if (state.decoder) {
	    var chunk = state.decoder.end();

	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }

	  state.ended = true;

	  if (state.sync) {
	    // if we are sync, wait until next tick to emit the data.
	    // Otherwise we risk emitting data in the flow()
	    // the readable code triggers during a read() call
	    emitReadable(stream);
	  } else {
	    // emit 'readable' now to make sure it gets picked up.
	    state.needReadable = false;

	    if (!state.emittedReadable) {
	      state.emittedReadable = true;
	      emitReadable_(stream);
	    }
	  }
	} // Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.


	function emitReadable(stream) {
	  var state = stream._readableState;
	  debug$R('emitReadable', state.needReadable, state.emittedReadable);
	  state.needReadable = false;

	  if (!state.emittedReadable) {
	    debug$R('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    process$3.nextTick(emitReadable_, stream);
	  }
	}

	function emitReadable_(stream) {
	  var state = stream._readableState;
	  debug$R('emitReadable_', state.destroyed, state.length, state.ended);

	  if (!state.destroyed && (state.length || state.ended)) {
	    stream.emit('readable');
	    state.emittedReadable = false;
	  } // The stream needs another readable event if
	  // 1. It is not flowing, as the flow mechanism will take
	  //    care of it.
	  // 2. It is not ended.
	  // 3. It is below the highWaterMark, so we can schedule
	  //    another readable later.


	  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
	  flow(stream);
	} // at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.


	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process$3.nextTick(maybeReadMore_, stream, state);
	  }
	}

	function maybeReadMore_(stream, state) {
	  // Attempt to read more data if we should.
	  //
	  // The conditions for reading more data are (one of):
	  // - Not enough data buffered (state.length < state.highWaterMark). The loop
	  //   is responsible for filling the buffer with enough data if such data
	  //   is available. If highWaterMark is 0 and we are not in the flowing mode
	  //   we should _not_ attempt to buffer any extra data. We'll get more data
	  //   when the stream consumer calls read() instead.
	  // - No data in the buffer, and the stream is in flowing mode. In this mode
	  //   the loop below is responsible for ensuring read() is called. Failing to
	  //   call read here would abort the flow and there's no other mechanism for
	  //   continuing the flow if the stream consumer has just subscribed to the
	  //   'data' event.
	  //
	  // In addition to the above conditions to keep reading data, the following
	  // conditions prevent the data from being read:
	  // - The stream has ended (state.ended).
	  // - There is already a pending 'read' operation (state.reading). This is a
	  //   case where the the stream has called the implementation defined _read()
	  //   method, but they are processing the call asynchronously and have _not_
	  //   called push() with new data. In this case we skip performing more
	  //   read()s. The execution ends in this method again after the _read() ends
	  //   up calling push() with more data.
	  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
	    var len = state.length;
	    debug$R('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length) // didn't get any data, stop spinning.
	      break;
	  }

	  state.readingMore = false;
	} // abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.


	Readable$1.prototype._read = function (n) {
	  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED$1('_read()'));
	};

	Readable$1.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;

	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;

	    default:
	      state.pipes.push(dest);
	      break;
	  }

	  state.pipesCount += 1;
	  debug$R('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process$3.stdout && dest !== process$3.stderr;
	  var endFn = doEnd ? onend : unpipe;
	  if (state.endEmitted) process$3.nextTick(endFn);else src.once('end', endFn);
	  dest.on('unpipe', onunpipe);

	  function onunpipe(readable, unpipeInfo) {
	    debug$R('onunpipe');

	    if (readable === src) {
	      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
	        unpipeInfo.hasUnpiped = true;
	        cleanup();
	      }
	    }
	  }

	  function onend() {
	    debug$R('onend');
	    dest.end();
	  } // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.


	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);
	  var cleanedUp = false;

	  function cleanup() {
	    debug$R('cleanup'); // cleanup event handlers once the pipe is broken

	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', unpipe);
	    src.removeListener('data', ondata);
	    cleanedUp = true; // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.

	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }

	  src.on('data', ondata);

	  function ondata(chunk) {
	    debug$R('ondata');
	    var ret = dest.write(chunk);
	    debug$R('dest.write', ret);

	    if (ret === false) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug$R('false write response, pause', state.awaitDrain);
	        state.awaitDrain++;
	      }

	      src.pause();
	    }
	  } // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.


	  function onerror(er) {
	    debug$R('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
	  } // Make sure our error handler is attached before userland ones.


	  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }

	  dest.once('close', onclose);

	  function onfinish() {
	    debug$R('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }

	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug$R('unpipe');
	    src.unpipe(dest);
	  } // tell the dest that it's being piped to


	  dest.emit('pipe', src); // start the flow if it hasn't been started already.

	  if (!state.flowing) {
	    debug$R('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function pipeOnDrainFunctionResult() {
	    var state = src._readableState;
	    debug$R('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;

	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}

	Readable$1.prototype.unpipe = function (dest) {
	  var state = this._readableState;
	  var unpipeInfo = {
	    hasUnpiped: false
	  }; // if we're not piping anywhere, then do nothing.

	  if (state.pipesCount === 0) return this; // just one destination.  most common case.

	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;
	    if (!dest) dest = state.pipes; // got a match.

	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this, unpipeInfo);
	    return this;
	  } // slow case. multiple pipe destinations.


	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++) {
	      dests[i].emit('unpipe', this, {
	        hasUnpiped: false
	      });
	    }

	    return this;
	  } // try to find the right one.


	  var index = indexOf(state.pipes, dest);
	  if (index === -1) return this;
	  state.pipes.splice(index, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];
	  dest.emit('unpipe', this, unpipeInfo);
	  return this;
	}; // set up data events if they are asked for
	// Ensure readable listeners eventually get something


	Readable$1.prototype.on = function (ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);
	  var state = this._readableState;

	  if (ev === 'data') {
	    // update readableListening so that resume() may be a no-op
	    // a few lines down. This is needed to support once('readable').
	    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

	    if (state.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.flowing = false;
	      state.emittedReadable = false;
	      debug$R('on readable', state.length, state.reading);

	      if (state.length) {
	        emitReadable(this);
	      } else if (!state.reading) {
	        process$3.nextTick(nReadingNextTick, this);
	      }
	    }
	  }

	  return res;
	};

	Readable$1.prototype.addListener = Readable$1.prototype.on;

	Readable$1.prototype.removeListener = function (ev, fn) {
	  var res = Stream.prototype.removeListener.call(this, ev, fn);

	  if (ev === 'readable') {
	    // We need to check if there is someone still listening to
	    // readable and reset the state. However this needs to happen
	    // after readable has been emitted but before I/O (nextTick) to
	    // support once('readable', fn) cycles. This means that calling
	    // resume within the same tick will have no
	    // effect.
	    process$3.nextTick(updateReadableListening, this);
	  }

	  return res;
	};

	Readable$1.prototype.removeAllListeners = function (ev) {
	  var res = Stream.prototype.removeAllListeners.apply(this, arguments);

	  if (ev === 'readable' || ev === undefined) {
	    // We need to check if there is someone still listening to
	    // readable and reset the state. However this needs to happen
	    // after readable has been emitted but before I/O (nextTick) to
	    // support once('readable', fn) cycles. This means that calling
	    // resume within the same tick will have no
	    // effect.
	    process$3.nextTick(updateReadableListening, this);
	  }

	  return res;
	};

	function updateReadableListening(self) {
	  var state = self._readableState;
	  state.readableListening = self.listenerCount('readable') > 0;

	  if (state.resumeScheduled && !state.paused) {
	    // flowing needs to be set to true now, otherwise
	    // the upcoming resume will not flow.
	    state.flowing = true; // crude way to check if we should resume
	  } else if (self.listenerCount('data') > 0) {
	    self.resume();
	  }
	}

	function nReadingNextTick(self) {
	  debug$R('readable nexttick read 0');
	  self.read(0);
	} // pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.


	Readable$1.prototype.resume = function () {
	  var state = this._readableState;

	  if (!state.flowing) {
	    debug$R('resume'); // we flow only if there is no one listening
	    // for readable, but we still have to call
	    // resume()

	    state.flowing = !state.readableListening;
	    resume(this, state);
	  }

	  state.paused = false;
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    process$3.nextTick(resume_, stream, state);
	  }
	}

	function resume_(stream, state) {
	  debug$R('resume', state.reading);

	  if (!state.reading) {
	    stream.read(0);
	  }

	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}

	Readable$1.prototype.pause = function () {
	  debug$R('call pause flowing=%j', this._readableState.flowing);

	  if (this._readableState.flowing !== false) {
	    debug$R('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }

	  this._readableState.paused = true;
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug$R('flow', state.flowing);

	  while (state.flowing && stream.read() !== null) {
	  }
	} // wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.


	Readable$1.prototype.wrap = function (stream) {
	  var _this = this;

	  var state = this._readableState;
	  var paused = false;
	  stream.on('end', function () {
	    debug$R('wrapped end');

	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) _this.push(chunk);
	    }

	    _this.push(null);
	  });
	  stream.on('data', function (chunk) {
	    debug$R('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

	    var ret = _this.push(chunk);

	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  }); // proxy all the other methods.
	  // important when wrapping filters and duplexes.

	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function methodWrap(method) {
	        return function methodWrapReturnFunction() {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  } // proxy certain important events.


	  for (var n = 0; n < kProxyEvents.length; n++) {
	    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
	  } // when we try to consume some more bytes, simply unpause the
	  // underlying stream.


	  this._read = function (n) {
	    debug$R('wrapped _read', n);

	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return this;
	};

	if (typeof Symbol === 'function') {
	  Readable$1.prototype[Symbol.asyncIterator] = function () {
	    if (createReadableStreamAsyncIterator === undefined) {
	      createReadableStreamAsyncIterator = async_iterator;
	    }

	    return createReadableStreamAsyncIterator(this);
	  };
	}

	Object.defineProperty(Readable$1.prototype, 'readableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState.highWaterMark;
	  }
	});
	Object.defineProperty(Readable$1.prototype, 'readableBuffer', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState && this._readableState.buffer;
	  }
	});
	Object.defineProperty(Readable$1.prototype, 'readableFlowing', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState.flowing;
	  },
	  set: function set(state) {
	    if (this._readableState) {
	      this._readableState.flowing = state;
	    }
	  }
	}); // exposed for testing purposes only.

	Readable$1._fromList = fromList;
	Object.defineProperty(Readable$1.prototype, 'readableLength', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function get() {
	    return this._readableState.length;
	  }
	}); // Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.

	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;
	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = state.buffer.consume(n, state.decoder);
	  }
	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;
	  debug$R('endReadable', state.endEmitted);

	  if (!state.endEmitted) {
	    state.ended = true;
	    process$3.nextTick(endReadableNT, state, stream);
	  }
	}

	function endReadableNT(state, stream) {
	  debug$R('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');

	    if (state.autoDestroy) {
	      // In case of duplex streams we need a way to detect
	      // if the writable side is ready for autoDestroy as well
	      var wState = stream._writableState;

	      if (!wState || wState.autoDestroy && wState.finished) {
	        stream.destroy();
	      }
	    }
	  }
	}

	if (typeof Symbol === 'function') {
	  Readable$1.from = function (iterable, opts) {
	    if (from === undefined) {
	      from = fromBrowser;
	    }

	    return from(Readable$1, iterable, opts);
	  };
	}

	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }

	  return -1;
	}

	var _stream_transform = Transform$1;

	var _require$codes$1 = errorsBrowser.codes,
	    ERR_METHOD_NOT_IMPLEMENTED = _require$codes$1.ERR_METHOD_NOT_IMPLEMENTED,
	    ERR_MULTIPLE_CALLBACK = _require$codes$1.ERR_MULTIPLE_CALLBACK,
	    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes$1.ERR_TRANSFORM_ALREADY_TRANSFORMING,
	    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes$1.ERR_TRANSFORM_WITH_LENGTH_0;

	var Duplex = _stream_duplex;

	inherits_browser.exports(Transform$1, Duplex);

	function afterTransform(er, data) {
	  var ts = this._transformState;
	  ts.transforming = false;
	  var cb = ts.writecb;

	  if (cb === null) {
	    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
	  }

	  ts.writechunk = null;
	  ts.writecb = null;
	  if (data != null) // single equals check for both `null` and `undefined`
	    this.push(data);
	  cb(er);
	  var rs = this._readableState;
	  rs.reading = false;

	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    this._read(rs.highWaterMark);
	  }
	}

	function Transform$1(options) {
	  if (!(this instanceof Transform$1)) return new Transform$1(options);
	  Duplex.call(this, options);
	  this._transformState = {
	    afterTransform: afterTransform.bind(this),
	    needTransform: false,
	    transforming: false,
	    writecb: null,
	    writechunk: null,
	    writeencoding: null
	  }; // start out asking for a readable event once data is transformed.

	  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.

	  this._readableState.sync = false;

	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;
	    if (typeof options.flush === 'function') this._flush = options.flush;
	  } // When the writable side finishes, then flush out anything remaining.


	  this.on('prefinish', prefinish);
	}

	function prefinish() {
	  var _this = this;

	  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
	    this._flush(function (er, data) {
	      done(_this, er, data);
	    });
	  } else {
	    done(this, null, null);
	  }
	}

	Transform$1.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	}; // This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.


	Transform$1.prototype._transform = function (chunk, encoding, cb) {
	  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
	};

	Transform$1.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;

	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	}; // Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.


	Transform$1.prototype._read = function (n) {
	  var ts = this._transformState;

	  if (ts.writechunk !== null && !ts.transforming) {
	    ts.transforming = true;

	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};

	Transform$1.prototype._destroy = function (err, cb) {
	  Duplex.prototype._destroy.call(this, err, function (err2) {
	    cb(err2);
	  });
	};

	function done(stream, er, data) {
	  if (er) return stream.emit('error', er);
	  if (data != null) // single equals check for both `null` and `undefined`
	    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided

	  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
	  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
	  return stream.push(null);
	}

	var _stream_passthrough = PassThrough;

	var Transform = _stream_transform;

	inherits_browser.exports(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);
	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

	var eos;

	function once(callback) {
	  var called = false;
	  return function () {
	    if (called) return;
	    called = true;
	    callback.apply(void 0, arguments);
	  };
	}

	var _require$codes = errorsBrowser.codes,
	    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
	    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

	function noop$3(err) {
	  // Rethrow the error if it exists to avoid swallowing it
	  if (err) throw err;
	}

	function isRequest(stream) {
	  return stream.setHeader && typeof stream.abort === 'function';
	}

	function destroyer(stream, reading, writing, callback) {
	  callback = once(callback);
	  var closed = false;
	  stream.on('close', function () {
	    closed = true;
	  });
	  if (eos === undefined) eos = endOfStream;
	  eos(stream, {
	    readable: reading,
	    writable: writing
	  }, function (err) {
	    if (err) return callback(err);
	    closed = true;
	    callback();
	  });
	  var destroyed = false;
	  return function (err) {
	    if (closed) return;
	    if (destroyed) return;
	    destroyed = true; // request.destroy just do .end - .abort is what we want

	    if (isRequest(stream)) return stream.abort();
	    if (typeof stream.destroy === 'function') return stream.destroy();
	    callback(err || new ERR_STREAM_DESTROYED('pipe'));
	  };
	}

	function call(fn) {
	  fn();
	}

	function pipe$j(from, to) {
	  return from.pipe(to);
	}

	function popCallback(streams) {
	  if (!streams.length) return noop$3;
	  if (typeof streams[streams.length - 1] !== 'function') return noop$3;
	  return streams.pop();
	}

	function pipeline() {
	  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
	    streams[_key] = arguments[_key];
	  }

	  var callback = popCallback(streams);
	  if (Array.isArray(streams[0])) streams = streams[0];

	  if (streams.length < 2) {
	    throw new ERR_MISSING_ARGS('streams');
	  }

	  var error;
	  var destroys = streams.map(function (stream, i) {
	    var reading = i < streams.length - 1;
	    var writing = i > 0;
	    return destroyer(stream, reading, writing, function (err) {
	      if (!error) error = err;
	      if (err) destroys.forEach(call);
	      if (reading) return;
	      destroys.forEach(call);
	      callback(error);
	    });
	  });
	  return streams.reduce(pipe$j);
	}

	var pipeline_1 = pipeline;

	(function (module, exports) {
	exports = module.exports = _stream_readable;
	exports.Stream = exports;
	exports.Readable = exports;
	exports.Writable = _stream_writable;
	exports.Duplex = _stream_duplex;
	exports.Transform = _stream_transform;
	exports.PassThrough = _stream_passthrough;
	exports.finished = endOfStream;
	exports.pipeline = pipeline_1;
	}(readableBrowser, readableBrowser.exports));

	const inherits$4 = inherits_browser.exports;
	const { Readable } = readableBrowser.exports;

	var levelIteratorStream = ReadStream;
	inherits$4(ReadStream, Readable);

	function ReadStream (iterator, options) {
	  if (!(this instanceof ReadStream)) return new ReadStream(iterator, options)
	  options = options || {};
	  Readable.call(this, Object.assign({}, options, {
	    objectMode: true
	  }));
	  this._iterator = iterator;
	  this._options = options;
	  this.on('end', this.destroy.bind(this, null, null));
	}

	ReadStream.prototype._read = function () {
	  if (this.destroyed) return

	  this._iterator.next((err, key, value) => {
	    if (this.destroyed) return
	    if (err) return this.destroy(err)

	    if (key === undefined && value === undefined) {
	      this.push(null);
	    } else if (this._options.keys !== false && this._options.values === false) {
	      this.push(key);
	    } else if (this._options.keys === false && this._options.values !== false) {
	      this.push(value);
	    } else {
	      this.push({ key, value });
	    }
	  });
	};

	ReadStream.prototype._destroy = function (err, callback) {
	  this._iterator.end(function (err2) {
	    callback(err || err2);
	  });
	};

	var errors$6 = {exports: {}};

	(function (module) {

	function createError (type, Proto) {
	  const Err = function (message, cause) {
	    if (typeof message === 'object' && message !== null) {
	      // Can be passed just a cause
	      cause = cause || message;
	      message = message.message || message.name;
	    }

	    message = message || '';
	    cause = cause || undefined;

	    // If input is already of type, return as-is to keep its stack trace.
	    // Avoid instanceof, for when node_modules has multiple copies of level-errors.
	    if (typeof cause === 'object' && cause.type === type && cause.message === message) {
	      return cause
	    }

	    Object.defineProperty(this, 'type', { value: type, enumerable: false, writable: true, configurable: true });
	    Object.defineProperty(this, 'name', { value: type, enumerable: false, writable: true, configurable: true });
	    Object.defineProperty(this, 'cause', { value: cause, enumerable: false, writable: true, configurable: true });
	    Object.defineProperty(this, 'message', { value: message, enumerable: false, writable: true, configurable: true });

	    Error.call(this);

	    if (typeof Error.captureStackTrace === 'function') {
	      Error.captureStackTrace(this, Err);
	    }
	  };

	  Err.prototype = new Proto();
	  return Err
	}

	const LevelUPError = createError('LevelUPError', Error);

	module.exports = {
	  LevelUPError: LevelUPError,
	  InitializationError: createError('InitializationError', LevelUPError),
	  OpenError: createError('OpenError', LevelUPError),
	  ReadError: createError('ReadError', LevelUPError),
	  WriteError: createError('WriteError', LevelUPError),
	  NotFoundError: createError('NotFoundError', LevelUPError),
	  EncodingError: createError('EncodingError', LevelUPError)
	};

	module.exports.NotFoundError.prototype.notFound = true;
	module.exports.NotFoundError.prototype.status = 404;
	}(errors$6));

	var common$3 = {};

	common$3.getCallback = function (options, callback) {
	  return typeof options === 'function' ? options : callback
	};

	common$3.getOptions = function (options) {
	  return typeof options === 'object' && options !== null ? options : {}
	};

	const WriteError$1 = errors$6.exports.WriteError;
	const catering$1 = catering$3;
	const getCallback$1 = common$3.getCallback;
	const getOptions$1 = common$3.getOptions;

	function Batch$2 (levelup) {
	  this.db = levelup;
	  this.batch = levelup.db.batch();
	  this.ops = [];
	  this.length = 0;
	}

	Batch$2.prototype.put = function (key, value, options) {
	  try {
	    this.batch.put(key, value, options);
	  } catch (e) {
	    throw new WriteError$1(e)
	  }

	  this.ops.push({ ...options, type: 'put', key, value });
	  this.length++;

	  return this
	};

	Batch$2.prototype.del = function (key, options) {
	  try {
	    this.batch.del(key, options);
	  } catch (err) {
	    throw new WriteError$1(err)
	  }

	  this.ops.push({ ...options, type: 'del', key });
	  this.length++;

	  return this
	};

	Batch$2.prototype.clear = function () {
	  try {
	    this.batch.clear();
	  } catch (err) {
	    throw new WriteError$1(err)
	  }

	  this.ops = [];
	  this.length = 0;

	  return this
	};

	Batch$2.prototype.write = function (options, callback) {
	  const levelup = this.db;
	  const ops = this.ops;

	  callback = getCallback$1(options, callback);
	  callback = catering$1.fromCallback(callback);
	  options = getOptions$1(options);

	  try {
	    this.batch.write(options, function (err) {
	      if (err) { return callback(new WriteError$1(err)) }
	      levelup.emit('batch', ops);
	      callback();
	    });
	  } catch (err) {
	    throw new WriteError$1(err)
	  }

	  return callback.promise
	};

	var batch = Batch$2;

	const queueMicrotask$3 = queueMicrotask_1;

	var nextTickBrowser = function (fn, ...args) {
	  if (args.length === 0) {
	    queueMicrotask$3(fn);
	  } else {
	    queueMicrotask$3(() => fn(...args));
	  }
	};

	const EventEmitter$j = require$$1$5.EventEmitter;
	const inherits$3 = require$$1$3.inherits;
	const DeferredLevelDOWN = deferredLeveldown.exports;
	const IteratorStream = levelIteratorStream;
	const Batch$1 = batch;
	const errors$5 = errors$6.exports;
	const supports$1 = levelSupports;
	const catering = catering$3;
	const getCallback = common$3.getCallback;
	const getOptions = common$3.getOptions;

	// TODO: after we drop node 10, also use queueMicrotask() in node
	const nextTick = nextTickBrowser;

	const WriteError = errors$5.WriteError;
	const ReadError = errors$5.ReadError;
	const NotFoundError = errors$5.NotFoundError;
	const OpenError = errors$5.OpenError;
	const InitializationError = errors$5.InitializationError;

	function LevelUP (db, options, callback) {
	  if (!(this instanceof LevelUP)) {
	    return new LevelUP(db, options, callback)
	  }

	  let error;

	  EventEmitter$j.call(this);
	  this.setMaxListeners(Infinity);

	  if (typeof options === 'function') {
	    callback = options;
	    options = {};
	  }

	  options = options || {};

	  if (!db || typeof db !== 'object') {
	    error = new InitializationError('First argument must be an abstract-leveldown compliant store');
	    if (typeof callback === 'function') {
	      return nextTick(callback, error)
	    }
	    throw error
	  }

	  if (typeof db.status !== 'string') {
	    throw new Error('.status required, old abstract-leveldown')
	  }

	  this.options = getOptions(options);
	  this._db = db;
	  this.db = null;
	  this.open(callback || ((err) => {
	    if (err) this.emit('error', err);
	  }));

	  // Create manifest based on deferred-leveldown's
	  this.supports = supports$1(this.db.supports, {
	    status: true,
	    deferredOpen: true,
	    openCallback: true,
	    promises: true,
	    streams: true
	  });

	  // Experimental: enrich levelup interface
	  for (const method of Object.keys(this.supports.additionalMethods)) {
	    if (this[method] != null) continue

	    // Don't do this.db[method].bind() because this.db is dynamic.
	    this[method] = function (...args) {
	      return this.db[method](...args)
	    };
	  }
	}

	LevelUP.prototype.emit = EventEmitter$j.prototype.emit;
	LevelUP.prototype.once = EventEmitter$j.prototype.once;
	inherits$3(LevelUP, EventEmitter$j);

	// TODO: tests
	Object.defineProperty(LevelUP.prototype, 'status', {
	  enumerable: true,
	  get () {
	    return this.db.status
	  }
	});

	// TODO: tests
	LevelUP.prototype.isOperational = function () {
	  return this.db.status === 'open' || this.db.status === 'opening'
	};

	LevelUP.prototype.open = function (opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = null;
	  }

	  callback = catering.fromCallback(callback);

	  if (!opts) {
	    opts = this.options;
	  }

	  // 1) Don't check db.status until levelup has opened,
	  // in order for levelup events to be consistent
	  if (this.db && this.isOpen()) {
	    nextTick(callback, null, this);
	    return callback.promise
	  }

	  if (this.db && this._isOpening()) {
	    this.once('open', () => { callback(null, this); });
	    return callback.promise
	  }

	  // 2) Instead let deferred-leveldown handle already-open cases.
	  // TODO: ideally though, levelup would have its own status
	  this.db = new DeferredLevelDOWN(this._db);
	  this.emit('opening');

	  this.db.open(opts, (err) => {
	    if (err) {
	      return callback(new OpenError(err))
	    }
	    this.db = this._db;
	    callback(null, this);
	    this.emit('open');
	    this.emit('ready');
	  });

	  return callback.promise
	};

	LevelUP.prototype.close = function (callback) {
	  callback = catering.fromCallback(callback);

	  if (this.isOpen()) {
	    this.db.close((err, ...rest) => {
	      this.emit('closed');
	      callback(err, ...rest);
	    });
	    this.emit('closing');
	  } else if (this.isClosed()) {
	    nextTick(callback);
	  } else if (this.db.status === 'closing') {
	    this.once('closed', callback);
	  } else if (this._isOpening()) {
	    this.once('open', () => {
	      this.close(callback);
	    });
	  }

	  return callback.promise
	};

	// TODO: remove in future major
	LevelUP.prototype.isOpen = function () {
	  return this.db.status === 'open'
	};

	// TODO: remove in future major
	LevelUP.prototype._isOpening = function () {
	  return this.db.status === 'opening'
	};

	// TODO: remove in future major
	LevelUP.prototype.isClosed = function () {
	  return (/^clos|new/).test(this.db.status)
	};

	LevelUP.prototype.get = function (key, options, callback) {
	  callback = getCallback(options, callback);
	  callback = catering.fromCallback(callback);

	  if (maybeError(this, callback)) {
	    return callback.promise
	  }

	  options = getOptions(options);

	  this.db.get(key, options, function (err, value) {
	    if (err) {
	      if ((/notfound/i).test(err) || err.notFound) {
	        err = new NotFoundError('Key not found in database [' + key + ']', err);
	      } else {
	        err = new ReadError(err);
	      }
	      return callback(err)
	    }
	    callback(null, value);
	  });

	  return callback.promise
	};

	LevelUP.prototype.getMany = function (keys, options, callback) {
	  return this.db.getMany(keys, options, callback)
	};

	LevelUP.prototype.put = function (key, value, options, callback) {
	  callback = getCallback(options, callback);
	  callback = catering.fromCallback(callback);

	  if (maybeError(this, callback)) {
	    return callback.promise
	  }

	  options = getOptions(options);

	  this.db.put(key, value, options, (err) => {
	    if (err) {
	      return callback(new WriteError(err))
	    }
	    this.emit('put', key, value);
	    callback();
	  });

	  return callback.promise
	};

	LevelUP.prototype.del = function (key, options, callback) {
	  callback = getCallback(options, callback);
	  callback = catering.fromCallback(callback);

	  if (maybeError(this, callback)) {
	    return callback.promise
	  }

	  options = getOptions(options);

	  this.db.del(key, options, (err) => {
	    if (err) {
	      return callback(new WriteError(err))
	    }
	    this.emit('del', key);
	    callback();
	  });

	  return callback.promise
	};

	LevelUP.prototype.batch = function (arr, options, callback) {
	  if (!arguments.length) {
	    return new Batch$1(this)
	  }

	  if (typeof arr === 'function') callback = arr;
	  else callback = getCallback(options, callback);

	  callback = catering.fromCallback(callback);

	  if (maybeError(this, callback)) {
	    return callback.promise
	  }

	  options = getOptions(options);

	  this.db.batch(arr, options, (err) => {
	    if (err) {
	      return callback(new WriteError(err))
	    }
	    this.emit('batch', arr);
	    callback();
	  });

	  return callback.promise
	};

	LevelUP.prototype.iterator = function (options) {
	  return this.db.iterator(options)
	};

	LevelUP.prototype.clear = function (options, callback) {
	  callback = getCallback(options, callback);
	  options = getOptions(options);
	  callback = catering.fromCallback(callback);

	  if (maybeError(this, callback)) {
	    return callback.promise
	  }

	  this.db.clear(options, (err) => {
	    if (err) {
	      return callback(new WriteError(err))
	    }
	    this.emit('clear', options);
	    callback();
	  });

	  return callback.promise
	};

	LevelUP.prototype.readStream =
	LevelUP.prototype.createReadStream = function (options) {
	  options = Object.assign({ keys: true, values: true }, options);
	  if (typeof options.limit !== 'number') { options.limit = -1; }
	  return new IteratorStream(this.db.iterator(options), options)
	};

	LevelUP.prototype.keyStream =
	LevelUP.prototype.createKeyStream = function (options) {
	  return this.createReadStream(Object.assign({}, options, { keys: true, values: false }))
	};

	LevelUP.prototype.valueStream =
	LevelUP.prototype.createValueStream = function (options) {
	  return this.createReadStream(Object.assign({}, options, { keys: false, values: true }))
	};

	LevelUP.prototype.toString = function () {
	  return 'LevelUP'
	};

	LevelUP.prototype.type = 'levelup';

	// Expose nextTick for API parity with abstract-leveldown
	LevelUP.prototype._nextTick = nextTick;

	function maybeError (db, callback) {
	  if (!db.isOperational()) {
	    nextTick(callback, new ReadError('Database is not open'));
	    return true
	  }

	  return false
	}

	LevelUP.errors = errors$5;
	var levelup$1 = LevelUP;

	var encodings$1 = {};

	(function (exports) {

	const { Buffer } = require$$0$1;

	exports.utf8 = exports['utf-8'] = {
	  encode: function (data) {
	    return isBinary(data) ? data : String(data)
	  },
	  decode: identity,
	  buffer: false,
	  type: 'utf8'
	};

	exports.json = {
	  encode: JSON.stringify,
	  decode: JSON.parse,
	  buffer: false,
	  type: 'json'
	};

	exports.binary = {
	  encode: function (data) {
	    return isBinary(data) ? data : Buffer.from(data)
	  },
	  decode: identity,
	  buffer: true,
	  type: 'binary'
	};

	exports.none = {
	  encode: identity,
	  decode: identity,
	  buffer: false,
	  type: 'id'
	};

	exports.id = exports.none;

	const bufferEncodings = [
	  'hex',
	  'ascii',
	  'base64',
	  'ucs2',
	  'ucs-2',
	  'utf16le',
	  'utf-16le'
	];

	for (const type of bufferEncodings) {
	  exports[type] = {
	    encode: function (data) {
	      return isBinary(data) ? data : Buffer.from(data, type)
	    },
	    decode: function (buffer) {
	      return buffer.toString(type)
	    },
	    buffer: true,
	    type: type
	  };
	}

	function identity (value) {
	  return value
	}

	function isBinary (data) {
	  return data === undefined || data === null || Buffer.isBuffer(data)
	}
	}(encodings$1));

	const encodings = encodings$1;
	const rangeOptions = new Set(['lt', 'gt', 'lte', 'gte']);

	var levelCodec = Codec$1;

	function Codec$1 (opts) {
	  if (!(this instanceof Codec$1)) {
	    return new Codec$1(opts)
	  }
	  this.opts = opts || {};
	  this.encodings = encodings;
	}

	Codec$1.prototype._encoding = function (encoding) {
	  if (typeof encoding === 'string') encoding = encodings[encoding];
	  if (!encoding) encoding = encodings.id;
	  return encoding
	};

	Codec$1.prototype._keyEncoding = function (opts, batchOpts) {
	  return this._encoding((batchOpts && batchOpts.keyEncoding) ||
	                        (opts && opts.keyEncoding) ||
	                        this.opts.keyEncoding)
	};

	Codec$1.prototype._valueEncoding = function (opts, batchOpts) {
	  return this._encoding((batchOpts && (batchOpts.valueEncoding || batchOpts.encoding)) ||
	                        (opts && (opts.valueEncoding || opts.encoding)) ||
	                        (this.opts.valueEncoding || this.opts.encoding))
	};

	Codec$1.prototype.encodeKey = function (key, opts, batchOpts) {
	  return this._keyEncoding(opts, batchOpts).encode(key)
	};

	Codec$1.prototype.encodeValue = function (value, opts, batchOpts) {
	  return this._valueEncoding(opts, batchOpts).encode(value)
	};

	Codec$1.prototype.decodeKey = function (key, opts) {
	  return this._keyEncoding(opts).decode(key)
	};

	Codec$1.prototype.decodeValue = function (value, opts) {
	  return this._valueEncoding(opts).decode(value)
	};

	Codec$1.prototype.encodeBatch = function (ops, opts) {
	  return ops.map((_op) => {
	    const op = {
	      type: _op.type,
	      key: this.encodeKey(_op.key, opts, _op)
	    };
	    if (this.keyAsBuffer(opts, _op)) op.keyEncoding = 'binary';
	    if (_op.prefix) op.prefix = _op.prefix;
	    if ('value' in _op) {
	      op.value = this.encodeValue(_op.value, opts, _op);
	      if (this.valueAsBuffer(opts, _op)) op.valueEncoding = 'binary';
	    }
	    return op
	  })
	};

	Codec$1.prototype.encodeLtgt = function (ltgt) {
	  const ret = {};

	  for (const key of Object.keys(ltgt)) {
	    if (key === 'start' || key === 'end') {
	      throw new Error('Legacy range options ("start" and "end") have been removed')
	    }

	    ret[key] = rangeOptions.has(key)
	      ? this.encodeKey(ltgt[key], ltgt)
	      : ltgt[key];
	  }

	  return ret
	};

	Codec$1.prototype.createStreamDecoder = function (opts) {
	  if (opts.keys && opts.values) {
	    return (key, value) => {
	      return {
	        key: this.decodeKey(key, opts),
	        value: this.decodeValue(value, opts)
	      }
	    }
	  } else if (opts.keys) {
	    return (key) => {
	      return this.decodeKey(key, opts)
	    }
	  } else if (opts.values) {
	    return (_, value) => {
	      return this.decodeValue(value, opts)
	    }
	  } else {
	    return function () {}
	  }
	};

	Codec$1.prototype.keyAsBuffer = function (opts) {
	  return this._keyEncoding(opts).buffer
	};

	Codec$1.prototype.valueAsBuffer = function (opts) {
	  return this._valueEncoding(opts).buffer
	};

	const AbstractLevelDOWN$1 = abstractLeveldown$1.AbstractLevelDOWN;
	const AbstractChainedBatch = abstractLeveldown$1.AbstractChainedBatch;
	const AbstractIterator$1 = abstractLeveldown$1.AbstractIterator;
	const inherits$2 = inherits_browser.exports;
	const Codec = levelCodec;
	const EncodingError = errors$6.exports.EncodingError;
	const rangeMethods = ['approximateSize', 'compactRange'];

	var encodingDown = DB;

	function DB (db, opts) {
	  if (!(this instanceof DB)) return new DB(db, opts)

	  const manifest = db.supports || {};
	  const additionalMethods = manifest.additionalMethods || {};

	  AbstractLevelDOWN$1.call(this, manifest);

	  this.supports.encodings = true;
	  this.supports.additionalMethods = {};

	  rangeMethods.forEach(function (m) {
	    // TODO (future major): remove this fallback
	    const fallback = typeof db[m] === 'function';

	    if (additionalMethods[m] || fallback) {
	      this.supports.additionalMethods[m] = true;

	      this[m] = function (start, end, opts, cb) {
	        start = this.codec.encodeKey(start, opts);
	        end = this.codec.encodeKey(end, opts);
	        return this.db[m](start, end, opts, cb)
	      };
	    }
	  }, this);

	  opts = opts || {};
	  if (typeof opts.keyEncoding === 'undefined') opts.keyEncoding = 'utf8';
	  if (typeof opts.valueEncoding === 'undefined') opts.valueEncoding = 'utf8';

	  this.db = db;
	  this.codec = new Codec(opts);
	}

	inherits$2(DB, AbstractLevelDOWN$1);

	DB.prototype.type = 'encoding-down';

	DB.prototype._serializeKey =
	DB.prototype._serializeValue = function (datum) {
	  return datum
	};

	DB.prototype._open = function (opts, cb) {
	  this.db.open(opts, cb);
	};

	DB.prototype._close = function (cb) {
	  this.db.close(cb);
	};

	DB.prototype._put = function (key, value, opts, cb) {
	  key = this.codec.encodeKey(key, opts);
	  value = this.codec.encodeValue(value, opts);
	  this.db.put(key, value, opts, cb);
	};

	DB.prototype._get = function (key, opts, cb) {
	  key = this.codec.encodeKey(key, opts);
	  opts.asBuffer = this.codec.valueAsBuffer(opts);

	  this.db.get(key, opts, (err, value) => {
	    if (err) return cb(err)

	    try {
	      value = this.codec.decodeValue(value, opts);
	    } catch (err) {
	      return cb(new EncodingError(err))
	    }

	    cb(null, value);
	  });
	};

	DB.prototype._getMany = function (keys, opts, cb) {
	  keys = keys.map((key) => this.codec.encodeKey(key, opts));
	  opts.asBuffer = this.codec.valueAsBuffer(opts);

	  this.db.getMany(keys, opts, (err, values) => {
	    if (err) return cb(err)

	    const decoded = new Array(values.length);

	    for (let i = 0; i < values.length; i++) {
	      if (values[i] === undefined) {
	        decoded[i] = undefined;
	        continue
	      }

	      try {
	        decoded[i] = this.codec.decodeValue(values[i], opts);
	      } catch (err) {
	        return cb(new EncodingError(err))
	      }
	    }

	    cb(null, decoded);
	  });
	};

	DB.prototype._del = function (key, opts, cb) {
	  key = this.codec.encodeKey(key, opts);
	  this.db.del(key, opts, cb);
	};

	DB.prototype._chainedBatch = function () {
	  return new Batch(this)
	};

	DB.prototype._batch = function (ops, opts, cb) {
	  ops = this.codec.encodeBatch(ops, opts);
	  this.db.batch(ops, opts, cb);
	};

	DB.prototype._iterator = function (opts) {
	  opts.keyAsBuffer = this.codec.keyAsBuffer(opts);
	  opts.valueAsBuffer = this.codec.valueAsBuffer(opts);
	  return new Iterator$2(this, opts)
	};

	DB.prototype._clear = function (opts, callback) {
	  opts = this.codec.encodeLtgt(opts);
	  this.db.clear(opts, callback);
	};

	function Iterator$2 (db, opts) {
	  AbstractIterator$1.call(this, db);
	  this.codec = db.codec;
	  this.keys = opts.keys;
	  this.values = opts.values;
	  this.opts = this.codec.encodeLtgt(opts);
	  this.it = db.db.iterator(this.opts);
	}

	inherits$2(Iterator$2, AbstractIterator$1);

	Iterator$2.prototype._next = function (cb) {
	  this.it.next((err, key, value) => {
	    if (err) return cb(err)

	    try {
	      if (this.keys && typeof key !== 'undefined') {
	        key = this.codec.decodeKey(key, this.opts);
	      } else {
	        key = undefined;
	      }

	      if (this.values && typeof value !== 'undefined') {
	        value = this.codec.decodeValue(value, this.opts);
	      } else {
	        value = undefined;
	      }
	    } catch (err) {
	      return cb(new EncodingError(err))
	    }

	    cb(null, key, value);
	  });
	};

	Iterator$2.prototype._seek = function (key) {
	  key = this.codec.encodeKey(key, this.opts);
	  this.it.seek(key);
	};

	Iterator$2.prototype._end = function (cb) {
	  this.it.end(cb);
	};

	function Batch (db, codec) {
	  AbstractChainedBatch.call(this, db);
	  this.codec = db.codec;
	  this.batch = db.db.batch();
	}

	inherits$2(Batch, AbstractChainedBatch);

	Batch.prototype._put = function (key, value, options) {
	  key = this.codec.encodeKey(key, options);
	  value = this.codec.encodeValue(value, options);
	  this.batch.put(key, value);
	};

	Batch.prototype._del = function (key, options) {
	  key = this.codec.encodeKey(key, options);
	  this.batch.del(key);
	};

	Batch.prototype._clear = function () {
	  this.batch.clear();
	};

	Batch.prototype._write = function (opts, cb) {
	  this.batch.write(opts, cb);
	};

	const levelup = levelup$1;
	const encode$6 = encodingDown;

	function packager (leveldown) {
	  function Level (location, options, callback) {
	    if (typeof location === 'function') {
	      callback = location;
	    } else if (typeof options === 'function') {
	      callback = options;
	    }

	    if (!isObject(options)) {
	      options = isObject(location) ? location : {};
	    }

	    return levelup(encode$6(leveldown(location, options), options), options, callback)
	  }

	  function isObject (o) {
	    return typeof o === 'object' && o !== null
	  }

	  for (const m of ['destroy', 'repair']) {
	    if (typeof leveldown[m] === 'function') {
	      Level[m] = function (...args) {
	        leveldown[m](...args);
	      };
	    }
	  }

	  Level.errors = levelup.errors;

	  return Level
	}

	var levelPackager = packager;

	/*! run-parallel-limit. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

	var runParallelLimit_1 = runParallelLimit;

	const queueMicrotask$2 = queueMicrotask_1;

	function runParallelLimit (tasks, limit, cb) {
	  if (typeof limit !== 'number') throw new Error('second argument must be a Number')
	  let results, len, pending, keys, isErrored;
	  let isSync = true;
	  let next;

	  if (Array.isArray(tasks)) {
	    results = [];
	    pending = len = tasks.length;
	  } else {
	    keys = Object.keys(tasks);
	    results = {};
	    pending = len = keys.length;
	  }

	  function done (err) {
	    function end () {
	      if (cb) cb(err, results);
	      cb = null;
	    }
	    if (isSync) queueMicrotask$2(end);
	    else end();
	  }

	  function each (i, err, result) {
	    results[i] = result;
	    if (err) isErrored = true;
	    if (--pending === 0 || err) {
	      done(err);
	    } else if (!isErrored && next < len) {
	      let key;
	      if (keys) {
	        key = keys[next];
	        next += 1;
	        tasks[key](function (err, result) { each(key, err, result); });
	      } else {
	        key = next;
	        next += 1;
	        tasks[key](function (err, result) { each(key, err, result); });
	      }
	    }
	  }

	  next = limit;
	  if (!pending) {
	    // empty
	    done(null);
	  } else if (keys) {
	    // object
	    keys.some(function (key, i) {
	      tasks[key](function (err, result) { each(key, err, result); });
	      if (i === limit - 1) return true // early return
	      return false
	    });
	  } else {
	    // array
	    tasks.some(function (task, i) {
	      task(function (err, result) { each(i, err, result); });
	      if (i === limit - 1) return true // early return
	      return false
	    });
	  }

	  isSync = false;
	}

	var ltgt$1 = {};

	(function (exports) {
	exports.compare = function (a, b) {

	  if(Buffer$h.isBuffer(a)) {
	    var l = Math.min(a.length, b.length);
	    for(var i = 0; i < l; i++) {
	      var cmp = a[i] - b[i];
	      if(cmp) return cmp
	    }
	    return a.length - b.length
	  }

	  return a < b ? -1 : a > b ? 1 : 0
	};

	// to be compatible with the current abstract-leveldown tests
	// nullish or empty strings.
	// I could use !!val but I want to permit numbers and booleans,
	// if possible.

	function isDef (val) {
	  return val !== undefined && val !== ''
	}

	function has (range, name) {
	  return Object.hasOwnProperty.call(range, name)
	}

	function hasKey(range, name) {
	  return Object.hasOwnProperty.call(range, name) && name
	}

	var lowerBoundKey = exports.lowerBoundKey = function (range) {
	    return (
	       hasKey(range, 'gt')
	    || hasKey(range, 'gte')
	    || hasKey(range, 'min')
	    || (range.reverse ? hasKey(range, 'end') : hasKey(range, 'start'))
	    || undefined
	    )
	};

	var lowerBound = exports.lowerBound = function (range, def) {
	  var k = lowerBoundKey(range);
	  return k ? range[k] : def
	};

	var lowerBoundInclusive = exports.lowerBoundInclusive = function (range) {
	  return has(range, 'gt') ? false : true
	};

	var upperBoundInclusive = exports.upperBoundInclusive =
	  function (range) {
	    return (has(range, 'lt') /*&& !range.maxEx*/) ? false : true
	  };

	var lowerBoundExclusive = exports.lowerBoundExclusive =
	  function (range) {
	    return !lowerBoundInclusive(range)
	  };

	var upperBoundExclusive = exports.upperBoundExclusive =
	  function (range) {
	    return !upperBoundInclusive(range)
	  };

	var upperBoundKey = exports.upperBoundKey = function (range) {
	    return (
	       hasKey(range, 'lt')
	    || hasKey(range, 'lte')
	    || hasKey(range, 'max')
	    || (range.reverse ? hasKey(range, 'start') : hasKey(range, 'end'))
	    || undefined
	    )
	};

	var upperBound = exports.upperBound = function (range, def) {
	  var k = upperBoundKey(range);
	  return k ? range[k] : def
	};

	exports.start = function (range, def) {
	  return range.reverse ? upperBound(range, def) : lowerBound(range, def)
	};
	exports.end = function (range, def) {
	  return range.reverse ? lowerBound(range, def) : upperBound(range, def)
	};
	exports.startInclusive = function (range) {
	  return (
	    range.reverse
	  ? upperBoundInclusive(range)
	  : lowerBoundInclusive(range)
	  )
	};
	exports.endInclusive = function (range) {
	  return (
	    range.reverse
	  ? lowerBoundInclusive(range)
	  : upperBoundInclusive(range)
	  )
	};

	function id (e) { return e }

	exports.toLtgt = function (range, _range, map, lower, upper) {
	  _range = _range || {};
	  map = map || id;
	  var defaults = arguments.length > 3;
	  var lb = exports.lowerBoundKey(range);
	  var ub = exports.upperBoundKey(range);
	  if(lb) {
	    if(lb === 'gt') _range.gt = map(range.gt, false);
	    else            _range.gte = map(range[lb], false);
	  }
	  else if(defaults)
	    _range.gte = map(lower, false);

	  if(ub) {
	    if(ub === 'lt') _range.lt = map(range.lt, true);
	    else            _range.lte = map(range[ub], true);
	  }
	  else if(defaults)
	    _range.lte = map(upper, true);

	  if(range.reverse != null)
	    _range.reverse = !!range.reverse;

	  //if range was used mutably
	  //(in level-sublevel it's part of an options object
	  //that has more properties on it.)
	  if(has(_range, 'max'))   delete _range.max;
	  if(has(_range, 'min'))   delete _range.min;
	  if(has(_range, 'start')) delete _range.start;
	  if(has(_range, 'end'))   delete _range.end;

	  return _range
	};

	exports.contains = function (range, key, compare) {
	  compare = compare || exports.compare;

	  var lb = lowerBound(range);
	  if(isDef(lb)) {
	    var cmp = compare(key, lb);
	    if(cmp < 0 || (cmp === 0 && lowerBoundExclusive(range)))
	      return false
	  }

	  var ub = upperBound(range);
	  if(isDef(ub)) {
	    var cmp = compare(key, ub);
	    if(cmp > 0 || (cmp === 0) && upperBoundExclusive(range))
	      return false
	  }

	  return true
	};

	exports.filter = function (range, compare) {
	  return function (key) {
	    return exports.contains(range, key, compare)
	  }
	};
	}(ltgt$1));

	/* global IDBKeyRange */

	const ltgt = ltgt$1;
	const NONE = Symbol('none');

	var keyRange = function createKeyRange (options) {
	  const lower = ltgt.lowerBound(options, NONE);
	  const upper = ltgt.upperBound(options, NONE);
	  const lowerOpen = ltgt.lowerBoundExclusive(options, NONE);
	  const upperOpen = ltgt.upperBoundExclusive(options, NONE);

	  if (lower !== NONE && upper !== NONE) {
	    return IDBKeyRange.bound(lower, upper, lowerOpen, upperOpen)
	  } else if (lower !== NONE) {
	    return IDBKeyRange.lowerBound(lower, lowerOpen)
	  } else if (upper !== NONE) {
	    return IDBKeyRange.upperBound(upper, upperOpen)
	  } else {
	    return null
	  }
	};

	const Buffer$8 = require$$0$1.Buffer;
	const ta2str = (function () {
	  if (commonjsGlobal.TextDecoder) {
	    const decoder = new TextDecoder('utf-8');
	    return decoder.decode.bind(decoder)
	  } else {
	    return function ta2str (ta) {
	      return ta2buf(ta).toString()
	    }
	  }
	})();

	const ab2str = (function () {
	  if (commonjsGlobal.TextDecoder) {
	    const decoder = new TextDecoder('utf-8');
	    return decoder.decode.bind(decoder)
	  } else {
	    return function ab2str (ab) {
	      return Buffer$8.from(ab).toString()
	    }
	  }
	})();

	function ta2buf (ta) {
	  const buf = Buffer$8.from(ta.buffer);

	  if (ta.byteLength === ta.buffer.byteLength) {
	    return buf
	  } else {
	    return buf.slice(ta.byteOffset, ta.byteOffset + ta.byteLength)
	  }
	}

	var deserialize$2 = function (data, asBuffer) {
	  if (data instanceof Uint8Array) {
	    return asBuffer ? ta2buf(data) : ta2str(data)
	  } else if (data instanceof ArrayBuffer) {
	    return asBuffer ? Buffer$8.from(data) : ab2str(data)
	  } else {
	    return asBuffer ? Buffer$8.from(String(data)) : String(data)
	  }
	};

	const inherits$1 = inherits_browser.exports;
	const AbstractIterator = abstractLeveldown$1.AbstractIterator;
	const createKeyRange$1 = keyRange;
	const deserialize$1 = deserialize$2;
	const noop$2 = function () {};

	var iterator = Iterator$1;

	function Iterator$1 (db, location, options) {
	  AbstractIterator.call(this, db);

	  this._limit = options.limit;
	  this._count = 0;
	  this._callback = null;
	  this._cache = [];
	  this._completed = false;
	  this._aborted = false;
	  this._error = null;
	  this._transaction = null;

	  this._keys = options.keys;
	  this._values = options.values;
	  this._keyAsBuffer = options.keyAsBuffer;
	  this._valueAsBuffer = options.valueAsBuffer;

	  if (this._limit === 0) {
	    this._completed = true;
	    return
	  }

	  let keyRange;

	  try {
	    keyRange = createKeyRange$1(options);
	  } catch (e) {
	    // The lower key is greater than the upper key.
	    // IndexedDB throws an error, but we'll just return 0 results.
	    this._completed = true;
	    return
	  }

	  this.createIterator(location, keyRange, options.reverse);
	}

	inherits$1(Iterator$1, AbstractIterator);

	Iterator$1.prototype.createIterator = function (location, keyRange, reverse) {
	  const transaction = this.db.db.transaction([location], 'readonly');
	  const store = transaction.objectStore(location);
	  const req = store.openCursor(keyRange, reverse ? 'prev' : 'next');

	  req.onsuccess = (ev) => {
	    const cursor = ev.target.result;
	    if (cursor) this.onItem(cursor);
	  };

	  this._transaction = transaction;

	  // If an error occurs (on the request), the transaction will abort.
	  transaction.onabort = () => {
	    this.onAbort(this._transaction.error || new Error('aborted by user'));
	  };

	  transaction.oncomplete = () => {
	    this.onComplete();
	  };
	};

	Iterator$1.prototype.onItem = function (cursor) {
	  this._cache.push(cursor.key, cursor.value);

	  if (this._limit <= 0 || ++this._count < this._limit) {
	    cursor.continue();
	  }

	  this.maybeNext();
	};

	Iterator$1.prototype.onAbort = function (err) {
	  this._aborted = true;
	  this._error = err;
	  this.maybeNext();
	};

	Iterator$1.prototype.onComplete = function () {
	  this._completed = true;
	  this.maybeNext();
	};

	Iterator$1.prototype.maybeNext = function () {
	  if (this._callback) {
	    this._next(this._callback);
	    this._callback = null;
	  }
	};

	Iterator$1.prototype._next = function (callback) {
	  if (this._aborted) {
	    // The error should be picked up by either next() or end().
	    const err = this._error;
	    this._error = null;
	    this._nextTick(callback, err);
	  } else if (this._cache.length > 0) {
	    let key = this._cache.shift();
	    let value = this._cache.shift();

	    if (this._keys && key !== undefined) {
	      key = this._deserializeKey(key, this._keyAsBuffer);
	    } else {
	      key = undefined;
	    }

	    if (this._values && value !== undefined) {
	      value = this._deserializeValue(value, this._valueAsBuffer);
	    } else {
	      value = undefined;
	    }

	    this._nextTick(callback, null, key, value);
	  } else if (this._completed) {
	    this._nextTick(callback);
	  } else {
	    this._callback = callback;
	  }
	};

	// Exposed for the v4 to v5 upgrade utility
	Iterator$1.prototype._deserializeKey = deserialize$1;
	Iterator$1.prototype._deserializeValue = deserialize$1;

	Iterator$1.prototype._end = function (callback) {
	  if (this._aborted || this._completed) {
	    return this._nextTick(callback, this._error)
	  }

	  // Don't advance the cursor anymore, and the transaction will complete
	  // on its own in the next tick. This approach is much cleaner than calling
	  // transaction.abort() with its unpredictable event order.
	  this.onItem = noop$2;
	  this.onAbort = callback;
	  this.onComplete = callback;
	};

	const Buffer$7 = require$$0$1.Buffer;
	// Returns either a Uint8Array or Buffer (doesn't matter to
	// IndexedDB, because Buffer is a subclass of Uint8Array)
	const str2bin = (function () {
	  if (commonjsGlobal.TextEncoder) {
	    const encoder = new TextEncoder('utf-8');
	    return encoder.encode.bind(encoder)
	  } else {
	    return Buffer$7.from
	  }
	})();

	var serialize$1 = function (data, asBuffer) {
	  if (asBuffer) {
	    return Buffer$7.isBuffer(data) ? data : str2bin(String(data))
	  } else {
	    return String(data)
	  }
	};

	var support$1 = {};

	(function (exports) {

	const Buffer = require$$0$1.Buffer;

	exports.test = function (key) {
	  return function test (impl) {
	    try {
	      impl.cmp(key, 0);
	      return true
	    } catch (err) {
	      return false
	    }
	  }
	};

	// Detect binary key support (IndexedDB Second Edition)
	exports.bufferKeys = exports.test(Buffer.alloc(0));
	}(support$1));

	var clear$1 = function clear (db, location, keyRange, options, callback) {
	  if (options.limit === 0) return db._nextTick(callback)

	  const transaction = db.db.transaction([location], 'readwrite');
	  const store = transaction.objectStore(location);
	  let count = 0;

	  transaction.oncomplete = function () {
	    callback();
	  };

	  transaction.onabort = function () {
	    callback(transaction.error || new Error('aborted by user'));
	  };

	  // A key cursor is faster (skips reading values) but not supported by IE
	  const method = store.openKeyCursor ? 'openKeyCursor' : 'openCursor';
	  const direction = options.reverse ? 'prev' : 'next';

	  store[method](keyRange, direction).onsuccess = function (ev) {
	    const cursor = ev.target.result;

	    if (cursor) {
	      // Wait for a request to complete before continuing, saving CPU.
	      store.delete(cursor.key).onsuccess = function () {
	        if (options.limit <= 0 || ++count < options.limit) {
	          cursor.continue();
	        }
	      };
	    }
	  };
	};

	/* global indexedDB */

	var levelJs = Level;

	const AbstractLevelDOWN = abstractLeveldown$1.AbstractLevelDOWN;
	const inherits = inherits_browser.exports;
	const parallel$2 = runParallelLimit_1;
	const Iterator = iterator;
	const serialize = serialize$1;
	const deserialize = deserialize$2;
	const support = support$1;
	const clear = clear$1;
	const createKeyRange = keyRange;

	const DEFAULT_PREFIX = 'level-js-';

	function Level (location, opts) {
	  if (!(this instanceof Level)) return new Level(location, opts)

	  AbstractLevelDOWN.call(this, {
	    bufferKeys: support.bufferKeys(indexedDB),
	    snapshots: true,
	    permanence: true,
	    clear: true,
	    getMany: true
	  });

	  opts = opts || {};

	  if (typeof location !== 'string') {
	    throw new Error('constructor requires a location string argument')
	  }

	  this.location = location;
	  this.prefix = opts.prefix == null ? DEFAULT_PREFIX : opts.prefix;
	  this.version = parseInt(opts.version || 1, 10);
	}

	inherits(Level, AbstractLevelDOWN);

	Level.prototype.type = 'level-js';

	Level.prototype._open = function (options, callback) {
	  const req = indexedDB.open(this.prefix + this.location, this.version);

	  req.onerror = function () {
	    callback(req.error || new Error('unknown error'));
	  };

	  req.onsuccess = () => {
	    this.db = req.result;
	    callback();
	  };

	  req.onupgradeneeded = (ev) => {
	    const db = ev.target.result;

	    if (!db.objectStoreNames.contains(this.location)) {
	      db.createObjectStore(this.location);
	    }
	  };
	};

	Level.prototype.store = function (mode) {
	  const transaction = this.db.transaction([this.location], mode);
	  return transaction.objectStore(this.location)
	};

	Level.prototype.await = function (request, callback) {
	  const transaction = request.transaction;

	  // Take advantage of the fact that a non-canceled request error aborts
	  // the transaction. I.e. no need to listen for "request.onerror".
	  transaction.onabort = function () {
	    callback(transaction.error || new Error('aborted by user'));
	  };

	  transaction.oncomplete = function () {
	    callback(null, request.result);
	  };
	};

	Level.prototype._get = function (key, options, callback) {
	  const store = this.store('readonly');
	  let req;

	  try {
	    req = store.get(key);
	  } catch (err) {
	    return this._nextTick(callback, err)
	  }

	  this.await(req, function (err, value) {
	    if (err) return callback(err)

	    if (value === undefined) {
	      // 'NotFound' error, consistent with LevelDOWN API
	      return callback(new Error('NotFound'))
	    }

	    callback(null, deserialize(value, options.asBuffer));
	  });
	};

	Level.prototype._getMany = function (keys, options, callback) {
	  const asBuffer = options.asBuffer;
	  const store = this.store('readonly');
	  const tasks = keys.map((key) => (next) => {
	    let request;

	    try {
	      request = store.get(key);
	    } catch (err) {
	      return next(err)
	    }

	    request.onsuccess = () => {
	      const value = request.result;
	      next(null, value === undefined ? value : deserialize(value, asBuffer));
	    };

	    request.onerror = (ev) => {
	      ev.stopPropagation();
	      next(request.error);
	    };
	  });

	  parallel$2(tasks, 16, callback);
	};

	Level.prototype._del = function (key, options, callback) {
	  const store = this.store('readwrite');
	  let req;

	  try {
	    req = store.delete(key);
	  } catch (err) {
	    return this._nextTick(callback, err)
	  }

	  this.await(req, callback);
	};

	Level.prototype._put = function (key, value, options, callback) {
	  const store = this.store('readwrite');
	  let req;

	  try {
	    // Will throw a DataError or DataCloneError if the environment
	    // does not support serializing the key or value respectively.
	    req = store.put(value, key);
	  } catch (err) {
	    return this._nextTick(callback, err)
	  }

	  this.await(req, callback);
	};

	Level.prototype._serializeKey = function (key) {
	  return serialize(key, this.supports.bufferKeys)
	};

	Level.prototype._serializeValue = function (value) {
	  return serialize(value, true)
	};

	Level.prototype._iterator = function (options) {
	  return new Iterator(this, this.location, options)
	};

	Level.prototype._batch = function (operations, options, callback) {
	  if (operations.length === 0) return this._nextTick(callback)

	  const store = this.store('readwrite');
	  const transaction = store.transaction;
	  let index = 0;
	  let error;

	  transaction.onabort = function () {
	    callback(error || transaction.error || new Error('aborted by user'));
	  };

	  transaction.oncomplete = function () {
	    callback();
	  };

	  // Wait for a request to complete before making the next, saving CPU.
	  function loop () {
	    const op = operations[index++];
	    const key = op.key;

	    let req;

	    try {
	      req = op.type === 'del' ? store.delete(key) : store.put(op.value, key);
	    } catch (err) {
	      error = err;
	      transaction.abort();
	      return
	    }

	    if (index < operations.length) {
	      req.onsuccess = loop;
	    }
	  }

	  loop();
	};

	Level.prototype._clear = function (options, callback) {
	  let keyRange;
	  let req;

	  try {
	    keyRange = createKeyRange(options);
	  } catch (e) {
	    // The lower key is greater than the upper key.
	    // IndexedDB throws an error, but we'll just do nothing.
	    return this._nextTick(callback)
	  }

	  if (options.limit >= 0) {
	    // IDBObjectStore#delete(range) doesn't have such an option.
	    // Fall back to cursor-based implementation.
	    return clear(this, this.location, keyRange, options, callback)
	  }

	  try {
	    const store = this.store('readwrite');
	    req = keyRange ? store.delete(keyRange) : store.clear();
	  } catch (err) {
	    return this._nextTick(callback, err)
	  }

	  this.await(req, callback);
	};

	Level.prototype._close = function (callback) {
	  this.db.close();
	  this._nextTick(callback);
	};

	// NOTE: remove in a next major release
	Level.prototype.upgrade = function (callback) {
	  if (this.status !== 'open') {
	    return this._nextTick(callback, new Error('cannot upgrade() before open()'))
	  }

	  const it = this.iterator();
	  const batchOptions = {};
	  const self = this;

	  it._deserializeKey = it._deserializeValue = identity;
	  next();

	  function next (err) {
	    if (err) return finish(err)
	    it.next(each);
	  }

	  function each (err, key, value) {
	    if (err || key === undefined) {
	      return finish(err)
	    }

	    const newKey = self._serializeKey(deserialize(key, true));
	    const newValue = self._serializeValue(deserialize(value, true));

	    // To bypass serialization on the old key, use _batch() instead of batch().
	    // NOTE: if we disable snapshotting (#86) this could lead to a loop of
	    // inserting and then iterating those same entries, because the new keys
	    // possibly sort after the old keys.
	    self._batch([
	      { type: 'del', key: key },
	      { type: 'put', key: newKey, value: newValue }
	    ], batchOptions, next);
	  }

	  function finish (err) {
	    it.end(function (err2) {
	      callback(err || err2);
	    });
	  }

	  function identity (data) {
	    return data
	  }
	};

	Level.destroy = function (location, prefix, callback) {
	  if (typeof prefix === 'function') {
	    callback = prefix;
	    prefix = DEFAULT_PREFIX;
	  }
	  const request = indexedDB.deleteDatabase(prefix + location);
	  request.onsuccess = function () {
	    callback();
	  };
	  request.onerror = function (err) {
	    callback(err);
	  };
	};

	var browser$5 = levelPackager(levelJs);

	class LevelDatastore extends BaseDatastore {
	  constructor(path, opts) {
	    super();
	    this.path = path;
	    this.opts = opts;
	    if (opts && opts.db) {
	      this.database = opts.db;
	      delete opts.db;
	    } else {
	      this.database = browser$5;
	    }
	  }
	  _initDb() {
	    return new Promise((resolve, reject) => {
	      this.db = this.database(this.path, {
	        ...this.opts,
	        valueEncoding: 'binary',
	        compression: false
	      }, err => {
	        if (err) {
	          return reject(err);
	        }
	        resolve(this.db);
	      });
	    });
	  }
	  async open() {
	    try {
	      if (this.db) {
	        await this.db.open();
	      } else {
	        this.db = await this._initDb();
	      }
	    } catch (err) {
	      throw Errors$2.dbOpenFailedError(err);
	    }
	  }
	  async put(key, value) {
	    try {
	      await this.db.put(key.toString(), value);
	    } catch (err) {
	      throw Errors$2.dbWriteFailedError(err);
	    }
	  }
	  async get(key) {
	    let data;
	    try {
	      data = await this.db.get(key.toString());
	    } catch (err) {
	      if (err.notFound)
	        throw Errors$2.notFoundError(err);
	      throw Errors$2.dbWriteFailedError(err);
	    }
	    return data;
	  }
	  async has(key) {
	    try {
	      await this.db.get(key.toString());
	    } catch (err) {
	      if (err.notFound)
	        return false;
	      throw err;
	    }
	    return true;
	  }
	  async delete(key) {
	    try {
	      await this.db.del(key.toString());
	    } catch (err) {
	      throw Errors$2.dbDeleteFailedError(err);
	    }
	  }
	  close() {
	    return this.db && this.db.close();
	  }
	  batch() {
	    const ops = [];
	    return {
	      put: (key, value) => {
	        ops.push({
	          type: 'put',
	          key: key.toString(),
	          value: value
	        });
	      },
	      delete: key => {
	        ops.push({
	          type: 'del',
	          key: key.toString()
	        });
	      },
	      commit: () => {
	        return this.db.batch(ops);
	      }
	    };
	  }
	  query(q) {
	    let it = this._query({
	      values: true,
	      prefix: q.prefix
	    });
	    if (Array.isArray(q.filters)) {
	      it = q.filters.reduce((it, f) => itFilter(it, f), it);
	    }
	    if (Array.isArray(q.orders)) {
	      it = q.orders.reduce((it, f) => itSort(it, f), it);
	    }
	    const {offset, limit} = q;
	    if (offset) {
	      let i = 0;
	      it = itFilter(it, () => i++ >= offset);
	    }
	    if (limit) {
	      it = itTake(it, limit);
	    }
	    return it;
	  }
	  queryKeys(q) {
	    let it = itMap(this._query({
	      values: false,
	      prefix: q.prefix
	    }), ({key}) => key);
	    if (Array.isArray(q.filters)) {
	      it = q.filters.reduce((it, f) => itFilter(it, f), it);
	    }
	    if (Array.isArray(q.orders)) {
	      it = q.orders.reduce((it, f) => itSort(it, f), it);
	    }
	    const {offset, limit} = q;
	    if (offset) {
	      let i = 0;
	      it = itFilter(it, () => i++ >= offset);
	    }
	    if (limit) {
	      it = itTake(it, limit);
	    }
	    return it;
	  }
	  _query(opts) {
	    const iteratorOpts = {
	      keys: true,
	      keyAsBuffer: true,
	      values: opts.values
	    };
	    if (opts.prefix != null) {
	      const prefix = opts.prefix.toString();
	      iteratorOpts.gte = prefix;
	      iteratorOpts.lt = prefix + 'ÿ';
	    }
	    return levelIteratorToIterator(this.db.iterator(iteratorOpts));
	  }
	}
	function levelIteratorToIterator(li) {
	  return {
	    [Symbol.asyncIterator]() {
	      return {
	        next: () => new Promise((resolve, reject) => {
	          li.next((err, key, value) => {
	            if (err)
	              return reject(err);
	            if (key == null) {
	              return li.end(err => {
	                if (err)
	                  return reject(err);
	                resolve({
	                  done: true,
	                  value: undefined
	                });
	              });
	            }
	            resolve({
	              done: false,
	              value: {
	                key: new Key$5(key, false),
	                value
	              }
	            });
	          });
	        }),
	        return: () => new Promise((resolve, reject) => {
	          li.end(err => {
	            if (err)
	              return reject(err);
	            resolve({
	              done: true,
	              value: undefined
	            });
	          });
	        })
	      };
	    }
	  };
	}

	const sortAll = (iterable, sorter) => {
	  return async function* () {
	    const values = await itAll(iterable);
	    yield* values.sort(sorter);
	  }();
	};
	class BaseBlockstore {
	  open() {
	    return Promise.reject(new Error('.open is not implemented'));
	  }
	  close() {
	    return Promise.reject(new Error('.close is not implemented'));
	  }
	  put(key, val, options) {
	    return Promise.reject(new Error('.put is not implemented'));
	  }
	  get(key, options) {
	    return Promise.reject(new Error('.get is not implemented'));
	  }
	  has(key, options) {
	    return Promise.reject(new Error('.has is not implemented'));
	  }
	  delete(key, options) {
	    return Promise.reject(new Error('.delete is not implemented'));
	  }
	  async *putMany(source, options = {}) {
	    for await (const {key, value} of source) {
	      await this.put(key, value, options);
	      yield {
	        key,
	        value
	      };
	    }
	  }
	  async *getMany(source, options = {}) {
	    for await (const key of source) {
	      yield this.get(key, options);
	    }
	  }
	  async *deleteMany(source, options = {}) {
	    for await (const key of source) {
	      await this.delete(key, options);
	      yield key;
	    }
	  }
	  batch() {
	    let puts = [];
	    let dels = [];
	    return {
	      put(key, value) {
	        puts.push({
	          key,
	          value
	        });
	      },
	      delete(key) {
	        dels.push(key);
	      },
	      commit: async options => {
	        await itDrain(this.putMany(puts, options));
	        puts = [];
	        await itDrain(this.deleteMany(dels, options));
	        dels = [];
	      }
	    };
	  }
	  async *_all(q, options) {
	    throw new Error('._all is not implemented');
	  }
	  async *_allKeys(q, options) {
	    throw new Error('._allKeys is not implemented');
	  }
	  query(q, options) {
	    let it = this._all(q, options);
	    if (q.prefix != null) {
	      it = itFilter(it, e => e.key.toString().startsWith(q.prefix || ''));
	    }
	    if (Array.isArray(q.filters)) {
	      it = q.filters.reduce((it, f) => itFilter(it, f), it);
	    }
	    if (Array.isArray(q.orders)) {
	      it = q.orders.reduce((it, f) => sortAll(it, f), it);
	    }
	    if (q.offset != null) {
	      let i = 0;
	      it = itFilter(it, () => i++ >= (q.offset || 0));
	    }
	    if (q.limit != null) {
	      it = itTake(it, q.limit);
	    }
	    return it;
	  }
	  queryKeys(q, options) {
	    let it = this._allKeys(q, options);
	    if (q.prefix != null) {
	      it = itFilter(it, cid => cid.toString().startsWith(q.prefix || ''));
	    }
	    if (Array.isArray(q.filters)) {
	      it = q.filters.reduce((it, f) => itFilter(it, f), it);
	    }
	    if (Array.isArray(q.orders)) {
	      it = q.orders.reduce((it, f) => sortAll(it, f), it);
	    }
	    if (q.offset != null) {
	      let i = 0;
	      it = itFilter(it, () => i++ >= q.offset);
	    }
	    if (q.limit != null) {
	      it = itTake(it, q.limit);
	    }
	    return it;
	  }
	}

	function cidToKey(cid) {
	  const c = CID$6.asCID(cid);
	  if (!c) {
	    throw errCode$q(new Error('Not a valid cid'), 'ERR_INVALID_CID');
	  }
	  return new Key$5('/' + base32$4.encode(c.multihash.bytes).slice(1).toUpperCase(), false);
	}
	function keyToCid(key) {
	  return CID$6.createV1(code$2, decode$k(base32$4.decode('b' + key.toString().slice(1).toLowerCase())));
	}
	function convertPrefix(prefix) {
	  const firstChar = prefix.substring(0, 1);
	  if (firstChar === '/') {
	    return convertPrefix(prefix.substring(1));
	  }
	  let decoder;
	  if (firstChar.toLowerCase() === 'b') {
	    decoder = input => base32$4.decode(input.toLowerCase()).subarray(2);
	  } else if (firstChar.toLowerCase() === 'c') {
	    decoder = input => base32pad.decode(input.toLowerCase()).subarray(2);
	  } else if (firstChar === 'z') {
	    decoder = input => base58btc$6.decode(input).subarray(2);
	  } else if (firstChar === 'Q') {
	    decoder = input => base58btc$6.decode('z' + input);
	  } else {
	    decoder = input => base32$4.decode('b' + input.toLowerCase()).subarray(2);
	  }
	  let bytes;
	  for (let i = 1; i < prefix.length; i++) {
	    try {
	      bytes = decoder(prefix.substring(0, i));
	    } catch (err) {
	      if (err.message !== 'Unexpected end of data') {
	        throw err;
	      }
	    }
	  }
	  let str = '/C';
	  if (bytes) {
	    str = `/${ base32$4.encode(bytes).slice(1, -1).toUpperCase() || 'C' }`;
	  }
	  return str;
	}
	function convertQuery(query) {
	  return {
	    ...query,
	    prefix: query.prefix ? convertPrefix(query.prefix) : undefined,
	    filters: query.filters ? query.filters.map(filter => pair => {
	      return filter({
	        key: keyToCid(pair.key),
	        value: pair.value
	      });
	    }) : undefined,
	    orders: query.orders ? query.orders.map(order => (a, b) => {
	      return order({
	        key: keyToCid(a.key),
	        value: a.value
	      }, {
	        key: keyToCid(b.key),
	        value: b.value
	      });
	    }) : undefined
	  };
	}
	function convertKeyQuery(query) {
	  return {
	    ...query,
	    prefix: query.prefix ? convertPrefix(query.prefix) : undefined,
	    filters: query.filters ? query.filters.map(filter => key => {
	      return filter(keyToCid(key));
	    }) : undefined,
	    orders: query.orders ? query.orders.map(order => (a, b) => {
	      return order(keyToCid(a), keyToCid(b));
	    }) : undefined
	  };
	}
	class BlockstoreDatastoreAdapter extends BaseBlockstore {
	  constructor(datastore) {
	    super();
	    this.child = datastore;
	  }
	  open() {
	    return this.child.open();
	  }
	  close() {
	    return this.child.close();
	  }
	  async *query(query, options) {
	    for await (const {key, value} of this.child.query(convertQuery(query), options)) {
	      yield {
	        key: keyToCid(key),
	        value
	      };
	    }
	  }
	  async *queryKeys(query, options) {
	    for await (const key of this.child.queryKeys(convertKeyQuery(query), options)) {
	      yield keyToCid(key);
	    }
	  }
	  async get(cid, options) {
	    return this.child.get(cidToKey(cid), options);
	  }
	  async *getMany(cids, options) {
	    for await (const cid of cids) {
	      yield this.get(cid, options);
	    }
	  }
	  async put(cid, value, options) {
	    await this.child.put(cidToKey(cid), value, options);
	  }
	  async *putMany(blocks, options) {
	    const output = itPushable();
	    const runner = globalThis.process && globalThis.process.nextTick ? globalThis.process.nextTick : globalThis.setImmediate || globalThis.setTimeout;
	    runner(async () => {
	      try {
	        const store = this.child;
	        await itDrain(this.child.putMany(async function* () {
	          for await (const block of blocks) {
	            const key = cidToKey(block.key);
	            const exists = await store.has(key, options);
	            if (!exists) {
	              yield {
	                key,
	                value: block.value
	              };
	            }
	            output.push(block);
	          }
	        }()));
	        output.end();
	      } catch (err) {
	        output.end(err);
	      }
	    });
	    yield* output;
	  }
	  has(cid, options) {
	    return this.child.has(cidToKey(cid), options);
	  }
	  delete(cid, options) {
	    return this.child.delete(cidToKey(cid), options);
	  }
	  deleteMany(cids, options) {
	    const out = itPushable();
	    itDrain(this.child.deleteMany(async function* () {
	      for await (const cid of cids) {
	        yield cidToKey(cid);
	        out.push(cid);
	      }
	      out.end();
	    }(), options)).catch(err => {
	      out.end(err);
	    });
	    return out;
	  }
	}

	function createRepo$1(print, codecs, options) {
	  const repoPath = options.path || 'ipfs';
	  return createRepo$2(repoPath, codeOrName => codecs.getCodec(codeOrName), {
	    root: new LevelDatastore(repoPath, {
	      prefix: '',
	      version: 2
	    }),
	    blocks: new BlockstoreDatastoreAdapter(new LevelDatastore(`${ repoPath }/blocks`, {
	      prefix: '',
	      version: 2
	    })),
	    datastore: new LevelDatastore(`${ repoPath }/datastore`, {
	      prefix: '',
	      version: 2
	    }),
	    keys: new LevelDatastore(`${ repoPath }/keys`, {
	      prefix: '',
	      version: 2
	    }),
	    pins: new LevelDatastore(`${ repoPath }/pins`, {
	      prefix: '',
	      version: 2
	    })
	  }, {
	    autoMigrate: options.autoMigrate,
	    onMigrationProgress: options.onMigrationProgress || print,
	    repoLock: MemoryLock
	  });
	}

	const noop$1 = () => {};
	const topologySymbol = Symbol.for('@libp2p/js-interfaces/topology');

	/**
	 * @typedef {import('peer-id')} PeerId
	 */

	/**
	 * @typedef {Object} Options
	 * @property {number} [min=0] - minimum needed connections.
	 * @property {number} [max=Infinity] - maximum needed connections.
	 * @property {Handlers} [handlers]
	 *
	 * @typedef {Object} Handlers
	 * @property {(peerId: PeerId, conn: Connection) => void} [onConnect] - protocol "onConnect" handler
	 * @property {(peerId: PeerId, error?:Error) => void} [onDisconnect] - protocol "onDisconnect" handler
	 *
	 * @typedef {import('../connection/connection')} Connection
	 */

	class Topology$2 {
	  /**
	   * @param {Options} options
	   */
	  constructor ({
	    min = 0,
	    max = Infinity,
	    handlers = {}
	  }) {
	    this.min = min;
	    this.max = max;

	    // Handlers
	    this._onConnect = handlers.onConnect || noop$1;
	    this._onDisconnect = handlers.onDisconnect || noop$1;

	    /**
	     * Set of peers that support the protocol.
	     *
	     * @type {Set<string>}
	     */
	    this.peers = new Set();
	  }

	  get [Symbol.toStringTag] () {
	    return 'Topology'
	  }

	  get [topologySymbol] () {
	    return true
	  }

	  /**
	   * Checks if the given value is a Topology instance.
	   *
	   * @param {any} other
	   * @returns {other is Topology}
	   */
	  static isTopology (other) {
	    return Boolean(other && other[topologySymbol])
	  }

	  /**
	   * @param {any} registrar
	   */
	  async setRegistrar (registrar) {
	    this._registrar = registrar;
	  }

	  /**
	   * Notify about peer disconnected event.
	   *
	   * @param {PeerId} peerId
	   * @returns {void}
	   */
	  disconnect (peerId) {
	    this._onDisconnect(peerId);
	  }
	}

	var topology = Topology$2;

	const Topology$1 = topology;
	const multicodecTopologySymbol = Symbol.for('@libp2p/js-interfaces/topology/multicodec-topology');
	const debug$Q = browser$a.exports;

	const log$S = Object.assign(debug$Q('libp2p:topology:multicodec-topology'), {
	  error: debug$Q('libp2p:topology:multicodec-topology:error')
	});

	class MulticodecTopology$2 extends Topology$1 {
	  /**
	   * @param {TopologyOptions & MulticodecOptions} props
	   */
	  constructor ({
	    min,
	    max,
	    multicodecs,
	    handlers
	  }) {
	    super({ min, max, handlers });

	    if (!multicodecs) {
	      throw new Error('one or more multicodec should be provided')
	    }

	    if (!handlers) {
	      throw new Error('the handlers should be provided')
	    }

	    if (typeof handlers.onConnect !== 'function') {
	      throw new Error('the \'onConnect\' handler must be provided')
	    }

	    if (typeof handlers.onDisconnect !== 'function') {
	      throw new Error('the \'onDisconnect\' handler must be provided')
	    }

	    this.multicodecs = Array.isArray(multicodecs) ? multicodecs : [multicodecs];
	    this._registrar = undefined;

	    this._onProtocolChange = this._onProtocolChange.bind(this);
	    this._onPeerConnect = this._onPeerConnect.bind(this);
	  }

	  get [Symbol.toStringTag] () {
	    return 'Topology'
	  }

	  get [multicodecTopologySymbol] () {
	    return true
	  }

	  /**
	   * Checks if the given value is a `MulticodecTopology` instance.
	   *
	   * @param {any} other
	   * @returns {other is MulticodecTopology}
	   */
	  static isMulticodecTopology (other) {
	    return Boolean(other && other[multicodecTopologySymbol])
	  }

	  /**
	   * @param {any} registrar
	   */
	  async setRegistrar (registrar) { // eslint-disable-line
	    this._registrar = registrar;
	    this._registrar.peerStore.on('change:protocols', this._onProtocolChange);
	    this._registrar.connectionManager.on('peer:connect', this._onPeerConnect);

	    // Update topology peers
	    await this._updatePeers(this._registrar.peerStore.getPeers());
	  }

	  /**
	   * Update topology.
	   *
	   * @param {AsyncIterable<any> | Iterable<any>} peerDataIterable
	   */
	  async _updatePeers (peerDataIterable) {
	    for await (const { id, protocols } of peerDataIterable) {
	      if (this.multicodecs.filter(multicodec => protocols.includes(multicodec)).length) {
	        // Add the peer regardless of whether or not there is currently a connection
	        this.peers.add(id.toB58String());
	        // If there is a connection, call _onConnect
	        const connection = this._registrar.getConnection(id);
	        connection && this._onConnect(id, connection);
	      } else {
	        // Remove any peers we might be tracking that are no longer of value to us
	        this.peers.delete(id.toB58String());
	      }
	    }
	  }

	  /**
	   * Check if a new peer support the multicodecs for this topology.
	   *
	   * @param {Object} props
	   * @param {PeerId} props.peerId
	   * @param {Array<string>} props.protocols
	   */
	  async _onProtocolChange ({ peerId, protocols }) {
	    try {
	      const hadPeer = this.peers.has(peerId.toB58String());
	      const hasProtocol = protocols.filter(protocol => this.multicodecs.includes(protocol));

	      // Not supporting the protocol anymore?
	      if (hadPeer && hasProtocol.length === 0) {
	        this._onDisconnect(peerId);
	      }

	      // New to protocol support
	      for (const protocol of protocols) {
	        if (this.multicodecs.includes(protocol)) {
	          const peerData = await this._registrar.peerStore.get(peerId);
	          await this._updatePeers([peerData]);
	          return
	        }
	      }
	    } catch (err) {
	      log$S.error(err);
	    }
	  }

	  /**
	   * Verify if a new connected peer has a topology multicodec and call _onConnect.
	   *
	   * @param {Connection} connection
	   */
	  async _onPeerConnect (connection) {
	    try {
	      // @ts-ignore - remotePeer does not existist on Connection
	      const peerId = connection.remotePeer;
	      const protocols = await this._registrar.peerStore.protoBook.get(peerId);

	      if (!protocols) {
	        return
	      }

	      if (this.multicodecs.find(multicodec => protocols.includes(multicodec))) {
	        this.peers.add(peerId.toB58String());
	        this._onConnect(peerId, connection);
	      }
	    } catch (err) {
	      log$S.error(err);
	    }
	  }
	}

	/**
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('multiaddr')} Multiaddr
	 * @typedef {import('../connection/connection')} Connection
	 * @typedef {import('.').Options} TopologyOptions
	 * @typedef {Object} MulticodecOptions
	 * @property {string[]} multicodecs - protocol multicodecs
	 * @property {Required<Handlers>} handlers
	 * @typedef {import('.').Handlers} Handlers
	 */
	var multicodecTopology = MulticodecTopology$2;

	var errors$4 = {};

	errors$4.codes = {
	  /**
	   * Signature policy is invalid
	   */
	  ERR_INVALID_SIGNATURE_POLICY: 'ERR_INVALID_SIGNATURE_POLICY',
	  /**
	   * Signature policy is unhandled
	   */
	  ERR_UNHANDLED_SIGNATURE_POLICY: 'ERR_UNHANDLED_SIGNATURE_POLICY',

	  // Strict signing codes

	  /**
	   * Message expected to have a `signature`, but doesn't
	   */
	  ERR_MISSING_SIGNATURE: 'ERR_MISSING_SIGNATURE',
	  /**
	   * Message expected to have a `seqno`, but doesn't
	   */
	  ERR_MISSING_SEQNO: 'ERR_MISSING_SEQNO',
	  /**
	   * Message `signature` is invalid
	   */
	  ERR_INVALID_SIGNATURE: 'ERR_INVALID_SIGNATURE',

	  // Strict no-signing codes

	  /**
	   * Message expected to not have a `from`, but does
	   */
	  ERR_UNEXPECTED_FROM: 'ERR_UNEXPECTED_FROM',
	  /**
	   * Message expected to not have a `signature`, but does
	   */
	  ERR_UNEXPECTED_SIGNATURE: 'ERR_UNEXPECTED_SIGNATURE',
	  /**
	   * Message expected to not have a `key`, but does
	   */
	  ERR_UNEXPECTED_KEY: 'ERR_UNEXPECTED_KEY',
	  /**
	   * Message expected to not have a `seqno`, but does
	   */
	  ERR_UNEXPECTED_SEQNO: 'ERR_UNEXPECTED_SEQNO'
	};

	/*eslint-disable*/

	var $protobuf$7 = minimal;

	// Common aliases
	var $Reader$8 = $protobuf$7.Reader, $Writer$8 = $protobuf$7.Writer, $util$8 = $protobuf$7.util;

	// Exported root namespace
	var $root$8 = $protobuf$7.roots["libp2p-pubsub-rpc"] || ($protobuf$7.roots["libp2p-pubsub-rpc"] = {});

	$root$8.RPC = (function() {

	    /**
	     * Properties of a RPC.
	     * @exports IRPC
	     * @interface IRPC
	     * @property {Array.<RPC.ISubOpts>|null} [subscriptions] RPC subscriptions
	     * @property {Array.<RPC.IMessage>|null} [msgs] RPC msgs
	     */

	    /**
	     * Constructs a new RPC.
	     * @exports RPC
	     * @classdesc Represents a RPC.
	     * @implements IRPC
	     * @constructor
	     * @param {IRPC=} [p] Properties to set
	     */
	    function RPC(p) {
	        this.subscriptions = [];
	        this.msgs = [];
	        if (p)
	            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                if (p[ks[i]] != null)
	                    this[ks[i]] = p[ks[i]];
	    }

	    /**
	     * RPC subscriptions.
	     * @member {Array.<RPC.ISubOpts>} subscriptions
	     * @memberof RPC
	     * @instance
	     */
	    RPC.prototype.subscriptions = $util$8.emptyArray;

	    /**
	     * RPC msgs.
	     * @member {Array.<RPC.IMessage>} msgs
	     * @memberof RPC
	     * @instance
	     */
	    RPC.prototype.msgs = $util$8.emptyArray;

	    /**
	     * Encodes the specified RPC message. Does not implicitly {@link RPC.verify|verify} messages.
	     * @function encode
	     * @memberof RPC
	     * @static
	     * @param {IRPC} m RPC message or plain object to encode
	     * @param {$protobuf.Writer} [w] Writer to encode to
	     * @returns {$protobuf.Writer} Writer
	     */
	    RPC.encode = function encode(m, w) {
	        if (!w)
	            w = $Writer$8.create();
	        if (m.subscriptions != null && m.subscriptions.length) {
	            for (var i = 0; i < m.subscriptions.length; ++i)
	                $root$8.RPC.SubOpts.encode(m.subscriptions[i], w.uint32(10).fork()).ldelim();
	        }
	        if (m.msgs != null && m.msgs.length) {
	            for (var i = 0; i < m.msgs.length; ++i)
	                $root$8.RPC.Message.encode(m.msgs[i], w.uint32(18).fork()).ldelim();
	        }
	        return w;
	    };

	    /**
	     * Decodes a RPC message from the specified reader or buffer.
	     * @function decode
	     * @memberof RPC
	     * @static
	     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	     * @param {number} [l] Message length if known beforehand
	     * @returns {RPC} RPC
	     * @throws {Error} If the payload is not a reader or valid buffer
	     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	     */
	    RPC.decode = function decode(r, l) {
	        if (!(r instanceof $Reader$8))
	            r = $Reader$8.create(r);
	        var c = l === undefined ? r.len : r.pos + l, m = new $root$8.RPC();
	        while (r.pos < c) {
	            var t = r.uint32();
	            switch (t >>> 3) {
	            case 1:
	                if (!(m.subscriptions && m.subscriptions.length))
	                    m.subscriptions = [];
	                m.subscriptions.push($root$8.RPC.SubOpts.decode(r, r.uint32()));
	                break;
	            case 2:
	                if (!(m.msgs && m.msgs.length))
	                    m.msgs = [];
	                m.msgs.push($root$8.RPC.Message.decode(r, r.uint32()));
	                break;
	            default:
	                r.skipType(t & 7);
	                break;
	            }
	        }
	        return m;
	    };

	    /**
	     * Creates a RPC message from a plain object. Also converts values to their respective internal types.
	     * @function fromObject
	     * @memberof RPC
	     * @static
	     * @param {Object.<string,*>} d Plain object
	     * @returns {RPC} RPC
	     */
	    RPC.fromObject = function fromObject(d) {
	        if (d instanceof $root$8.RPC)
	            return d;
	        var m = new $root$8.RPC();
	        if (d.subscriptions) {
	            if (!Array.isArray(d.subscriptions))
	                throw TypeError(".RPC.subscriptions: array expected");
	            m.subscriptions = [];
	            for (var i = 0; i < d.subscriptions.length; ++i) {
	                if (typeof d.subscriptions[i] !== "object")
	                    throw TypeError(".RPC.subscriptions: object expected");
	                m.subscriptions[i] = $root$8.RPC.SubOpts.fromObject(d.subscriptions[i]);
	            }
	        }
	        if (d.msgs) {
	            if (!Array.isArray(d.msgs))
	                throw TypeError(".RPC.msgs: array expected");
	            m.msgs = [];
	            for (var i = 0; i < d.msgs.length; ++i) {
	                if (typeof d.msgs[i] !== "object")
	                    throw TypeError(".RPC.msgs: object expected");
	                m.msgs[i] = $root$8.RPC.Message.fromObject(d.msgs[i]);
	            }
	        }
	        return m;
	    };

	    /**
	     * Creates a plain object from a RPC message. Also converts values to other types if specified.
	     * @function toObject
	     * @memberof RPC
	     * @static
	     * @param {RPC} m RPC
	     * @param {$protobuf.IConversionOptions} [o] Conversion options
	     * @returns {Object.<string,*>} Plain object
	     */
	    RPC.toObject = function toObject(m, o) {
	        if (!o)
	            o = {};
	        var d = {};
	        if (o.arrays || o.defaults) {
	            d.subscriptions = [];
	            d.msgs = [];
	        }
	        if (m.subscriptions && m.subscriptions.length) {
	            d.subscriptions = [];
	            for (var j = 0; j < m.subscriptions.length; ++j) {
	                d.subscriptions[j] = $root$8.RPC.SubOpts.toObject(m.subscriptions[j], o);
	            }
	        }
	        if (m.msgs && m.msgs.length) {
	            d.msgs = [];
	            for (var j = 0; j < m.msgs.length; ++j) {
	                d.msgs[j] = $root$8.RPC.Message.toObject(m.msgs[j], o);
	            }
	        }
	        return d;
	    };

	    /**
	     * Converts this RPC to JSON.
	     * @function toJSON
	     * @memberof RPC
	     * @instance
	     * @returns {Object.<string,*>} JSON object
	     */
	    RPC.prototype.toJSON = function toJSON() {
	        return this.constructor.toObject(this, $protobuf$7.util.toJSONOptions);
	    };

	    RPC.SubOpts = (function() {

	        /**
	         * Properties of a SubOpts.
	         * @memberof RPC
	         * @interface ISubOpts
	         * @property {boolean|null} [subscribe] SubOpts subscribe
	         * @property {string|null} [topicID] SubOpts topicID
	         */

	        /**
	         * Constructs a new SubOpts.
	         * @memberof RPC
	         * @classdesc Represents a SubOpts.
	         * @implements ISubOpts
	         * @constructor
	         * @param {RPC.ISubOpts=} [p] Properties to set
	         */
	        function SubOpts(p) {
	            if (p)
	                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                    if (p[ks[i]] != null)
	                        this[ks[i]] = p[ks[i]];
	        }

	        /**
	         * SubOpts subscribe.
	         * @member {boolean|null|undefined} subscribe
	         * @memberof RPC.SubOpts
	         * @instance
	         */
	        SubOpts.prototype.subscribe = null;

	        /**
	         * SubOpts topicID.
	         * @member {string|null|undefined} topicID
	         * @memberof RPC.SubOpts
	         * @instance
	         */
	        SubOpts.prototype.topicID = null;

	        // OneOf field names bound to virtual getters and setters
	        var $oneOfFields;

	        /**
	         * SubOpts _subscribe.
	         * @member {"subscribe"|undefined} _subscribe
	         * @memberof RPC.SubOpts
	         * @instance
	         */
	        Object.defineProperty(SubOpts.prototype, "_subscribe", {
	            get: $util$8.oneOfGetter($oneOfFields = ["subscribe"]),
	            set: $util$8.oneOfSetter($oneOfFields)
	        });

	        /**
	         * SubOpts _topicID.
	         * @member {"topicID"|undefined} _topicID
	         * @memberof RPC.SubOpts
	         * @instance
	         */
	        Object.defineProperty(SubOpts.prototype, "_topicID", {
	            get: $util$8.oneOfGetter($oneOfFields = ["topicID"]),
	            set: $util$8.oneOfSetter($oneOfFields)
	        });

	        /**
	         * Encodes the specified SubOpts message. Does not implicitly {@link RPC.SubOpts.verify|verify} messages.
	         * @function encode
	         * @memberof RPC.SubOpts
	         * @static
	         * @param {RPC.ISubOpts} m SubOpts message or plain object to encode
	         * @param {$protobuf.Writer} [w] Writer to encode to
	         * @returns {$protobuf.Writer} Writer
	         */
	        SubOpts.encode = function encode(m, w) {
	            if (!w)
	                w = $Writer$8.create();
	            if (m.subscribe != null && Object.hasOwnProperty.call(m, "subscribe"))
	                w.uint32(8).bool(m.subscribe);
	            if (m.topicID != null && Object.hasOwnProperty.call(m, "topicID"))
	                w.uint32(18).string(m.topicID);
	            return w;
	        };

	        /**
	         * Decodes a SubOpts message from the specified reader or buffer.
	         * @function decode
	         * @memberof RPC.SubOpts
	         * @static
	         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	         * @param {number} [l] Message length if known beforehand
	         * @returns {RPC.SubOpts} SubOpts
	         * @throws {Error} If the payload is not a reader or valid buffer
	         * @throws {$protobuf.util.ProtocolError} If required fields are missing
	         */
	        SubOpts.decode = function decode(r, l) {
	            if (!(r instanceof $Reader$8))
	                r = $Reader$8.create(r);
	            var c = l === undefined ? r.len : r.pos + l, m = new $root$8.RPC.SubOpts();
	            while (r.pos < c) {
	                var t = r.uint32();
	                switch (t >>> 3) {
	                case 1:
	                    m.subscribe = r.bool();
	                    break;
	                case 2:
	                    m.topicID = r.string();
	                    break;
	                default:
	                    r.skipType(t & 7);
	                    break;
	                }
	            }
	            return m;
	        };

	        /**
	         * Creates a SubOpts message from a plain object. Also converts values to their respective internal types.
	         * @function fromObject
	         * @memberof RPC.SubOpts
	         * @static
	         * @param {Object.<string,*>} d Plain object
	         * @returns {RPC.SubOpts} SubOpts
	         */
	        SubOpts.fromObject = function fromObject(d) {
	            if (d instanceof $root$8.RPC.SubOpts)
	                return d;
	            var m = new $root$8.RPC.SubOpts();
	            if (d.subscribe != null) {
	                m.subscribe = Boolean(d.subscribe);
	            }
	            if (d.topicID != null) {
	                m.topicID = String(d.topicID);
	            }
	            return m;
	        };

	        /**
	         * Creates a plain object from a SubOpts message. Also converts values to other types if specified.
	         * @function toObject
	         * @memberof RPC.SubOpts
	         * @static
	         * @param {RPC.SubOpts} m SubOpts
	         * @param {$protobuf.IConversionOptions} [o] Conversion options
	         * @returns {Object.<string,*>} Plain object
	         */
	        SubOpts.toObject = function toObject(m, o) {
	            if (!o)
	                o = {};
	            var d = {};
	            if (m.subscribe != null && m.hasOwnProperty("subscribe")) {
	                d.subscribe = m.subscribe;
	                if (o.oneofs)
	                    d._subscribe = "subscribe";
	            }
	            if (m.topicID != null && m.hasOwnProperty("topicID")) {
	                d.topicID = m.topicID;
	                if (o.oneofs)
	                    d._topicID = "topicID";
	            }
	            return d;
	        };

	        /**
	         * Converts this SubOpts to JSON.
	         * @function toJSON
	         * @memberof RPC.SubOpts
	         * @instance
	         * @returns {Object.<string,*>} JSON object
	         */
	        SubOpts.prototype.toJSON = function toJSON() {
	            return this.constructor.toObject(this, $protobuf$7.util.toJSONOptions);
	        };

	        return SubOpts;
	    })();

	    RPC.Message = (function() {

	        /**
	         * Properties of a Message.
	         * @memberof RPC
	         * @interface IMessage
	         * @property {Uint8Array|null} [from] Message from
	         * @property {Uint8Array|null} [data] Message data
	         * @property {Uint8Array|null} [seqno] Message seqno
	         * @property {Array.<string>|null} [topicIDs] Message topicIDs
	         * @property {Uint8Array|null} [signature] Message signature
	         * @property {Uint8Array|null} [key] Message key
	         */

	        /**
	         * Constructs a new Message.
	         * @memberof RPC
	         * @classdesc Represents a Message.
	         * @implements IMessage
	         * @constructor
	         * @param {RPC.IMessage=} [p] Properties to set
	         */
	        function Message(p) {
	            this.topicIDs = [];
	            if (p)
	                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                    if (p[ks[i]] != null)
	                        this[ks[i]] = p[ks[i]];
	        }

	        /**
	         * Message from.
	         * @member {Uint8Array|null|undefined} from
	         * @memberof RPC.Message
	         * @instance
	         */
	        Message.prototype.from = null;

	        /**
	         * Message data.
	         * @member {Uint8Array|null|undefined} data
	         * @memberof RPC.Message
	         * @instance
	         */
	        Message.prototype.data = null;

	        /**
	         * Message seqno.
	         * @member {Uint8Array|null|undefined} seqno
	         * @memberof RPC.Message
	         * @instance
	         */
	        Message.prototype.seqno = null;

	        /**
	         * Message topicIDs.
	         * @member {Array.<string>} topicIDs
	         * @memberof RPC.Message
	         * @instance
	         */
	        Message.prototype.topicIDs = $util$8.emptyArray;

	        /**
	         * Message signature.
	         * @member {Uint8Array|null|undefined} signature
	         * @memberof RPC.Message
	         * @instance
	         */
	        Message.prototype.signature = null;

	        /**
	         * Message key.
	         * @member {Uint8Array|null|undefined} key
	         * @memberof RPC.Message
	         * @instance
	         */
	        Message.prototype.key = null;

	        // OneOf field names bound to virtual getters and setters
	        var $oneOfFields;

	        /**
	         * Message _from.
	         * @member {"from"|undefined} _from
	         * @memberof RPC.Message
	         * @instance
	         */
	        Object.defineProperty(Message.prototype, "_from", {
	            get: $util$8.oneOfGetter($oneOfFields = ["from"]),
	            set: $util$8.oneOfSetter($oneOfFields)
	        });

	        /**
	         * Message _data.
	         * @member {"data"|undefined} _data
	         * @memberof RPC.Message
	         * @instance
	         */
	        Object.defineProperty(Message.prototype, "_data", {
	            get: $util$8.oneOfGetter($oneOfFields = ["data"]),
	            set: $util$8.oneOfSetter($oneOfFields)
	        });

	        /**
	         * Message _seqno.
	         * @member {"seqno"|undefined} _seqno
	         * @memberof RPC.Message
	         * @instance
	         */
	        Object.defineProperty(Message.prototype, "_seqno", {
	            get: $util$8.oneOfGetter($oneOfFields = ["seqno"]),
	            set: $util$8.oneOfSetter($oneOfFields)
	        });

	        /**
	         * Message _signature.
	         * @member {"signature"|undefined} _signature
	         * @memberof RPC.Message
	         * @instance
	         */
	        Object.defineProperty(Message.prototype, "_signature", {
	            get: $util$8.oneOfGetter($oneOfFields = ["signature"]),
	            set: $util$8.oneOfSetter($oneOfFields)
	        });

	        /**
	         * Message _key.
	         * @member {"key"|undefined} _key
	         * @memberof RPC.Message
	         * @instance
	         */
	        Object.defineProperty(Message.prototype, "_key", {
	            get: $util$8.oneOfGetter($oneOfFields = ["key"]),
	            set: $util$8.oneOfSetter($oneOfFields)
	        });

	        /**
	         * Encodes the specified Message message. Does not implicitly {@link RPC.Message.verify|verify} messages.
	         * @function encode
	         * @memberof RPC.Message
	         * @static
	         * @param {RPC.IMessage} m Message message or plain object to encode
	         * @param {$protobuf.Writer} [w] Writer to encode to
	         * @returns {$protobuf.Writer} Writer
	         */
	        Message.encode = function encode(m, w) {
	            if (!w)
	                w = $Writer$8.create();
	            if (m.from != null && Object.hasOwnProperty.call(m, "from"))
	                w.uint32(10).bytes(m.from);
	            if (m.data != null && Object.hasOwnProperty.call(m, "data"))
	                w.uint32(18).bytes(m.data);
	            if (m.seqno != null && Object.hasOwnProperty.call(m, "seqno"))
	                w.uint32(26).bytes(m.seqno);
	            if (m.topicIDs != null && m.topicIDs.length) {
	                for (var i = 0; i < m.topicIDs.length; ++i)
	                    w.uint32(34).string(m.topicIDs[i]);
	            }
	            if (m.signature != null && Object.hasOwnProperty.call(m, "signature"))
	                w.uint32(42).bytes(m.signature);
	            if (m.key != null && Object.hasOwnProperty.call(m, "key"))
	                w.uint32(50).bytes(m.key);
	            return w;
	        };

	        /**
	         * Decodes a Message message from the specified reader or buffer.
	         * @function decode
	         * @memberof RPC.Message
	         * @static
	         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	         * @param {number} [l] Message length if known beforehand
	         * @returns {RPC.Message} Message
	         * @throws {Error} If the payload is not a reader or valid buffer
	         * @throws {$protobuf.util.ProtocolError} If required fields are missing
	         */
	        Message.decode = function decode(r, l) {
	            if (!(r instanceof $Reader$8))
	                r = $Reader$8.create(r);
	            var c = l === undefined ? r.len : r.pos + l, m = new $root$8.RPC.Message();
	            while (r.pos < c) {
	                var t = r.uint32();
	                switch (t >>> 3) {
	                case 1:
	                    m.from = r.bytes();
	                    break;
	                case 2:
	                    m.data = r.bytes();
	                    break;
	                case 3:
	                    m.seqno = r.bytes();
	                    break;
	                case 4:
	                    if (!(m.topicIDs && m.topicIDs.length))
	                        m.topicIDs = [];
	                    m.topicIDs.push(r.string());
	                    break;
	                case 5:
	                    m.signature = r.bytes();
	                    break;
	                case 6:
	                    m.key = r.bytes();
	                    break;
	                default:
	                    r.skipType(t & 7);
	                    break;
	                }
	            }
	            return m;
	        };

	        /**
	         * Creates a Message message from a plain object. Also converts values to their respective internal types.
	         * @function fromObject
	         * @memberof RPC.Message
	         * @static
	         * @param {Object.<string,*>} d Plain object
	         * @returns {RPC.Message} Message
	         */
	        Message.fromObject = function fromObject(d) {
	            if (d instanceof $root$8.RPC.Message)
	                return d;
	            var m = new $root$8.RPC.Message();
	            if (d.from != null) {
	                if (typeof d.from === "string")
	                    $util$8.base64.decode(d.from, m.from = $util$8.newBuffer($util$8.base64.length(d.from)), 0);
	                else if (d.from.length)
	                    m.from = d.from;
	            }
	            if (d.data != null) {
	                if (typeof d.data === "string")
	                    $util$8.base64.decode(d.data, m.data = $util$8.newBuffer($util$8.base64.length(d.data)), 0);
	                else if (d.data.length)
	                    m.data = d.data;
	            }
	            if (d.seqno != null) {
	                if (typeof d.seqno === "string")
	                    $util$8.base64.decode(d.seqno, m.seqno = $util$8.newBuffer($util$8.base64.length(d.seqno)), 0);
	                else if (d.seqno.length)
	                    m.seqno = d.seqno;
	            }
	            if (d.topicIDs) {
	                if (!Array.isArray(d.topicIDs))
	                    throw TypeError(".RPC.Message.topicIDs: array expected");
	                m.topicIDs = [];
	                for (var i = 0; i < d.topicIDs.length; ++i) {
	                    m.topicIDs[i] = String(d.topicIDs[i]);
	                }
	            }
	            if (d.signature != null) {
	                if (typeof d.signature === "string")
	                    $util$8.base64.decode(d.signature, m.signature = $util$8.newBuffer($util$8.base64.length(d.signature)), 0);
	                else if (d.signature.length)
	                    m.signature = d.signature;
	            }
	            if (d.key != null) {
	                if (typeof d.key === "string")
	                    $util$8.base64.decode(d.key, m.key = $util$8.newBuffer($util$8.base64.length(d.key)), 0);
	                else if (d.key.length)
	                    m.key = d.key;
	            }
	            return m;
	        };

	        /**
	         * Creates a plain object from a Message message. Also converts values to other types if specified.
	         * @function toObject
	         * @memberof RPC.Message
	         * @static
	         * @param {RPC.Message} m Message
	         * @param {$protobuf.IConversionOptions} [o] Conversion options
	         * @returns {Object.<string,*>} Plain object
	         */
	        Message.toObject = function toObject(m, o) {
	            if (!o)
	                o = {};
	            var d = {};
	            if (o.arrays || o.defaults) {
	                d.topicIDs = [];
	            }
	            if (m.from != null && m.hasOwnProperty("from")) {
	                d.from = o.bytes === String ? $util$8.base64.encode(m.from, 0, m.from.length) : o.bytes === Array ? Array.prototype.slice.call(m.from) : m.from;
	                if (o.oneofs)
	                    d._from = "from";
	            }
	            if (m.data != null && m.hasOwnProperty("data")) {
	                d.data = o.bytes === String ? $util$8.base64.encode(m.data, 0, m.data.length) : o.bytes === Array ? Array.prototype.slice.call(m.data) : m.data;
	                if (o.oneofs)
	                    d._data = "data";
	            }
	            if (m.seqno != null && m.hasOwnProperty("seqno")) {
	                d.seqno = o.bytes === String ? $util$8.base64.encode(m.seqno, 0, m.seqno.length) : o.bytes === Array ? Array.prototype.slice.call(m.seqno) : m.seqno;
	                if (o.oneofs)
	                    d._seqno = "seqno";
	            }
	            if (m.topicIDs && m.topicIDs.length) {
	                d.topicIDs = [];
	                for (var j = 0; j < m.topicIDs.length; ++j) {
	                    d.topicIDs[j] = m.topicIDs[j];
	                }
	            }
	            if (m.signature != null && m.hasOwnProperty("signature")) {
	                d.signature = o.bytes === String ? $util$8.base64.encode(m.signature, 0, m.signature.length) : o.bytes === Array ? Array.prototype.slice.call(m.signature) : m.signature;
	                if (o.oneofs)
	                    d._signature = "signature";
	            }
	            if (m.key != null && m.hasOwnProperty("key")) {
	                d.key = o.bytes === String ? $util$8.base64.encode(m.key, 0, m.key.length) : o.bytes === Array ? Array.prototype.slice.call(m.key) : m.key;
	                if (o.oneofs)
	                    d._key = "key";
	            }
	            return d;
	        };

	        /**
	         * Converts this Message to JSON.
	         * @function toJSON
	         * @memberof RPC.Message
	         * @instance
	         * @returns {Object.<string,*>} JSON object
	         */
	        Message.prototype.toJSON = function toJSON() {
	            return this.constructor.toObject(this, $protobuf$7.util.toJSONOptions);
	        };

	        return Message;
	    })();

	    return RPC;
	})();

	var rpc$2 = $root$8;

	var src$i = {};

	var encode$5 = {exports: {}};

	// @ts-ignore no types
	const Varint$1 = varint$9;
	const { Buffer: Buffer$6 } = require$$0$1;

	/**
	 * Encode the passed length `value` to the `target` buffer at the given `offset`
	 *
	 * @type {import('./types').LengthEncoderFunction}
	 */
	// @ts-ignore cannot declare expected bytes property
	const varintEncode$1 = (value, target, offset) => {
	  const ret = Varint$1.encode(value, target, offset);
	  varintEncode$1.bytes = Varint$1.encode.bytes;
	  // If no target, create Buffer from returned array
	  return target || Buffer$6.from(ret)
	};

	var varintEncode_1 = varintEncode$1;

	const { Buffer: Buffer$5 } = require$$0$1;
	// @ts-ignore
	const BufferList$6 = BufferList_1;
	const varintEncode = varintEncode_1;

	const MIN_POOL_SIZE = 8; // Varint.encode(Number.MAX_SAFE_INTEGER).length
	const DEFAULT_POOL_SIZE = 10 * 1024;

	/**
	 * @param {import('./types').EncoderOptions} [options]
	 */
	function encode$4 (options) {
	  options = options || {};

	  const poolSize = Math.max(options.poolSize || DEFAULT_POOL_SIZE, options.minPoolSize || MIN_POOL_SIZE);
	  const encodeLength = options.lengthEncoder || varintEncode;

	  /**
	   * @param {AsyncIterable<BufferList>} source
	   */
	  const encoder = async function * (source) {
	    let pool = Buffer$5.alloc(poolSize);
	    let poolOffset = 0;

	    for await (const chunk of source) {
	      encodeLength(chunk.length, pool, poolOffset);
	      const encodedLength = pool.slice(poolOffset, poolOffset + encodeLength.bytes);
	      poolOffset += encodeLength.bytes;

	      if (pool.length - poolOffset < MIN_POOL_SIZE) {
	        pool = Buffer$5.alloc(poolSize);
	        poolOffset = 0;
	      }

	      yield new BufferList$6().append(encodedLength).append(chunk);
	      // yield Buffer.concat([encodedLength, chunk])
	    }
	  };

	  return encoder
	}

	/**
	 * @param {BufferList | Buffer} chunk
	 * @param {import('./types').EncoderOptions} [options]
	 */
	encode$4.single = (chunk, options) => {
	  options = options || {};
	  const encodeLength = options.lengthEncoder || varintEncode;
	  return new BufferList$6([encodeLength(chunk.length), chunk.slice()])
	};

	encode$5.exports = encode$4;
	encode$5.exports.MIN_POOL_SIZE = MIN_POOL_SIZE;
	encode$5.exports.DEFAULT_POOL_SIZE = DEFAULT_POOL_SIZE;

	var decode$5 = {exports: {}};

	// @ts-ignore no types
	const Varint = varint$9;
	const { Buffer: Buffer$4 } = require$$0$1;

	/**
	 * @param {any} bl
	 */
	const toBufferProxy = bl => new Proxy({}, {
	  get: (_, prop) => {
	    // @ts-ignore magic
	    return prop[0] === 'l' ? bl[prop] : bl.get(parseInt(prop))
	  }
	});

	/**
	 * @type {import('./types').LengthDecoderFunction}
	 */
	// @ts-ignore cannot declare expected bytes property
	const varintDecode$1 = data => {
	  const len = Varint.decode(Buffer$4.isBuffer(data) ? data : toBufferProxy(data));
	  varintDecode$1.bytes = Varint.decode.bytes;
	  return len
	};

	var varintDecode_1 = varintDecode$1;

	const { Buffer: Buffer$3 } = require$$0$1;
	// @ts-ignore
	const BufferList$5 = BufferList_1;
	const varintDecode = varintDecode_1;

	// Maximum length of the length section of the message
	const MAX_LENGTH_LENGTH = 8; // Varint.encode(Number.MAX_SAFE_INTEGER).length
	// Maximum length of the data section of the message
	const MAX_DATA_LENGTH = 1024 * 1024 * 4;

	const Empty = Buffer$3.alloc(0);
	const ReadModes = { LENGTH: 'readLength', DATA: 'readData' };

	const ReadHandlers = {
	  /**
	   * @param {BufferList} chunk
	   * @param {BufferList} buffer
	   * @param {import('./types').ReadState | undefined} state
	   * @param {import('./types').DecoderOptions} options
	   * @returns {import('./types').ReadResult}
	   */
	  [ReadModes.LENGTH]: (chunk, buffer, state, options) => {
	    // console.log(ReadModes.LENGTH, chunk.length)
	    buffer = buffer.append(chunk);

	    let dataLength;
	    try {
	      dataLength = options.lengthDecoder(buffer);
	    } catch (err) {
	      if (buffer.length > options.maxLengthLength) {
	        throw Object.assign(err, { message: 'message length too long', code: 'ERR_MSG_LENGTH_TOO_LONG' })
	      }
	      if (err instanceof RangeError) {
	        return { mode: ReadModes.LENGTH, buffer, chunk: undefined, state: undefined, data: undefined }
	      }
	      throw err
	    }

	    if (dataLength > options.maxDataLength) {
	      throw Object.assign(new Error('message data too long'), { code: 'ERR_MSG_DATA_TOO_LONG' })
	    }

	    chunk = buffer.shallowSlice(options.lengthDecoder.bytes);
	    buffer = new BufferList$5();

	    if (options.onLength) options.onLength(dataLength);

	    if (dataLength <= 0) {
	      if (options.onData) options.onData(Empty);
	      return { mode: ReadModes.LENGTH, chunk, buffer, data: Empty }
	    }

	    return { mode: ReadModes.DATA, chunk, buffer, state: { dataLength }, data: undefined }
	  },

	  /**
	   * @param {BufferList} chunk
	   * @param {BufferList} buffer
	   * @param {import('./types').ReadState | undefined} state
	   * @param {import('./types').DecoderOptions} options
	   * @returns {import('./types').ReadResult}
	   */
	  [ReadModes.DATA]: (chunk, buffer, state, options) => {
	    // console.log(ReadModes.DATA, chunk.length)
	    buffer = buffer.append(chunk);

	    if (!state) {
	      throw new Error('state is required')
	    }

	    if (buffer.length < state.dataLength) {
	      return { mode: ReadModes.DATA, buffer, state, chunk: undefined, data: undefined }
	    }

	    const { dataLength } = state;
	    const data = buffer.shallowSlice(0, dataLength);

	    const nextChunk = buffer.length > dataLength ? buffer.shallowSlice(dataLength) : undefined;
	    buffer = new BufferList$5();

	    if (options.onData) options.onData(data);
	    return { mode: ReadModes.LENGTH, chunk: nextChunk, buffer, state: undefined, data }
	  }
	};

	/**
	 * @param {any} [options]
	 */
	function decode$4 (options) {
	  options = options || {};

	  /**
	   * @type {import('./types').DecoderOptions}
	   */
	  const opts = {
	    lengthDecoder: options.lengthDecoder || varintDecode,
	    maxLengthLength: options.maxLengthLength || MAX_LENGTH_LENGTH,
	    maxDataLength: options.maxDataLength || MAX_DATA_LENGTH,
	    onLength: options.onLength,
	    onData: options.onData
	  };

	  /**
	   * @param {AsyncIterable<BufferList>} source
	   */
	  const decoder = async function * (source) {
	    let buffer = new BufferList$5();
	    let mode = ReadModes.LENGTH; // current parsing mode
	    let state; // accumulated state for the current mode

	    for await (const chunk of source) {
	      /** @type {BufferList | undefined} */
	      let nextChunk = chunk;

	      // Each chunk may contain multiple messages - keep calling handler for the
	      // current parsing mode until all handlers have consumed the chunk.
	      while (nextChunk) {
	        const result = ReadHandlers[mode](nextChunk, buffer, state, opts);

	        mode = result.mode;
	        nextChunk = result.chunk;
	        buffer = result.buffer;
	        state = result.state;

	        if (result.data) {
	          yield result.data;
	        }
	      }
	    }

	    if (buffer.length) {
	      throw Object.assign(new Error('unexpected end of input'), { code: 'ERR_UNEXPECTED_EOF' })
	    }
	  };

	  return decoder
	}

	/**
	 * @param {*} reader
	 * @param {import('./types').DecoderOptions} [options]
	 * @returns
	 */
	decode$4.fromReader = (reader, options) => {
	  let byteLength = 1; // Read single byte chunks until the length is known

	  const varByteSource = {
	    [Symbol.asyncIterator] () { return this },
	    next: async () => {
	      try {
	        return await reader.next(byteLength)
	      } catch (err) {
	        if (err.code === 'ERR_UNDER_READ') {
	          return { done: true, value: null }
	        }
	        throw err
	      } finally {
	        // Reset the byteLength so we continue to check for varints
	        byteLength = 1;
	      }
	    }
	  };

	  /**
	   * Once the length has been parsed, read chunk for that length
	   *
	   * @param {number} l
	   */
	  const onLength = l => { byteLength = l; };
	  return decode$4({
	    ...(options || {}),
	    onLength
	  })(varByteSource)
	};

	decode$5.exports = decode$4;
	decode$5.exports.MAX_LENGTH_LENGTH = MAX_LENGTH_LENGTH;
	decode$5.exports.MAX_DATA_LENGTH = MAX_DATA_LENGTH;

	const { Buffer: Buffer$2 } = require$$0$1;

	/**
	 * @param {number} value
	 * @param {Buffer} target
	 * @param {number} offset
	 */
	const int32BEEncode = (value, target, offset) => {
	  target = target || Buffer$2.allocUnsafe(4);
	  target.writeInt32BE(value, offset);
	  return target
	};

	int32BEEncode.bytes = 4; // Always because fixed length

	var int32BEEncode_1 = int32BEEncode;

	/**
	 * @param {import('buffer').Buffer} data
	 */
	const int32BEDecode = data => {
	  if (data.length < 4) throw RangeError('Could not decode int32BE')
	  return data.readInt32BE(0)
	};

	int32BEDecode.bytes = 4; // Always because fixed length

	var int32BEDecode_1 = int32BEDecode;

	/**
	 * @typedef {import('./types').EncoderOptions} EncoderOptions
	 * @typedef {import('./types').DecoderOptions} DecoderOptions
	 */

	src$i.encode = encode$5.exports;
	src$i.decode = decode$5.exports;

	src$i.varintEncode = varintEncode_1;
	src$i.varintDecode = varintDecode_1;

	src$i.int32BEEncode = int32BEEncode_1;
	src$i.int32BEDecode = int32BEDecode_1;

	var abortableIterator = {exports: {}};

	// If the passed object is an (async) iterable, then get the iterator
	// If it's probably an iterator already (i.e. has next function) return it
	// else throw
	var getIterator$3 = function getIterator (obj) {
	  if (obj) {
	    if (typeof obj[Symbol.iterator] === 'function') {
	      return obj[Symbol.iterator]()
	    }
	    if (typeof obj[Symbol.asyncIterator] === 'function') {
	      return obj[Symbol.asyncIterator]()
	    }
	    if (typeof obj.next === 'function') {
	      return obj // probably an iterator
	    }
	  }
	  throw new Error('argument is not an iterator or iterable')
	};

	var AbortError_1 = class AbortError extends Error {
	  constructor (message, code) {
	    super(message || 'The operation was aborted');
	    this.type = 'aborted';
	    this.code = code || 'ABORT_ERR';
	  }
	};

	const getIterator$2 = getIterator$3;
	const AbortError$4 = AbortError_1;

	// Wrap an iterator to make it abortable, allow cleanup when aborted via onAbort
	const toAbortableSource = (source, signal, options) => (
	  toMultiAbortableSource(source, Array.isArray(signal) ? signal : [{ signal, options }])
	);

	const toMultiAbortableSource = (source, signals) => {
	  source = getIterator$2(source);
	  signals = signals.map(({ signal, options }) => ({ signal, options: options || {} }));

	  async function * abortable () {
	    let nextAbortHandler;
	    const abortHandler = () => {
	      if (nextAbortHandler) nextAbortHandler();
	    };

	    for (const { signal } of signals) {
	      signal.addEventListener('abort', abortHandler);
	    }

	    while (true) {
	      let result;
	      try {
	        for (const { signal, options } of signals) {
	          if (signal.aborted) {
	            const { abortMessage, abortCode } = options;
	            throw new AbortError$4(abortMessage, abortCode)
	          }
	        }

	        const abort = new Promise((resolve, reject) => {
	          nextAbortHandler = () => {
	            const { options } = signals.find(({ signal }) => signal.aborted);
	            const { abortMessage, abortCode } = options;
	            reject(new AbortError$4(abortMessage, abortCode));
	          };
	        });

	        // Race the iterator and the abort signals
	        result = await Promise.race([abort, source.next()]);
	        nextAbortHandler = null;
	      } catch (err) {
	        for (const { signal } of signals) {
	          signal.removeEventListener('abort', abortHandler);
	        }

	        // Might not have been aborted by a known signal
	        const aborter = signals.find(({ signal }) => signal.aborted);
	        const isKnownAborter = err.type === 'aborted' && aborter;

	        if (isKnownAborter && aborter.options.onAbort) {
	          // Do any custom abort handling for the iterator
	          await aborter.options.onAbort(source);
	        }

	        // End the iterator if it is a generator
	        if (typeof source.return === 'function') {
	          try {
	            const p = source.return();

	            if (p instanceof Promise) { // eslint-disable-line max-depth
	              p.catch(err => {
	                if (aborter.options.onReturnError != null) {
	                  aborter.options.onReturnError(err);
	                }
	              });
	            }
	          } catch (err) {
	            if (aborter.options.onReturnError != null) { // eslint-disable-line max-depth
	              aborter.options.onReturnError(err);
	            }
	          }
	        }

	        if (isKnownAborter && aborter.options.returnOnAbort) {
	          return
	        }

	        throw err
	      }

	      if (result.done) break
	      yield result.value;
	    }

	    for (const { signal } of signals) {
	      signal.removeEventListener('abort', abortHandler);
	    }
	  }

	  return abortable()
	};

	const toAbortableSink = (sink, signal, options) => (
	  toMultiAbortableSink(sink, Array.isArray(signal) ? signal : [{ signal, options }])
	);

	const toMultiAbortableSink = (sink, signals) => source => (
	  sink(toMultiAbortableSource(source, signals))
	);

	const toAbortableDuplex = (duplex, signal, options) => (
	  toMultiAbortableDuplex(duplex, Array.isArray(signal) ? signal : [{ signal, options }])
	);

	const toMultiAbortableDuplex = (duplex, signals) => ({
	  sink: toMultiAbortableSink(duplex.sink, signals),
	  source: toMultiAbortableSource(duplex.source, signals)
	});

	abortableIterator.exports = toAbortableSource;
	abortableIterator.exports.AbortError = AbortError$4;
	abortableIterator.exports.source = toAbortableSource;
	abortableIterator.exports.sink = toAbortableSink;
	abortableIterator.exports.transform = toAbortableSink;
	abortableIterator.exports.duplex = toAbortableDuplex;

	const debug$P = browser$a.exports;
	const log$R = Object.assign(debug$P('libp2p-pubsub:peer-streams'), {
	  error: debug$P('libp2p-pubsub:peer-streams:err')
	});
	const { EventEmitter: EventEmitter$i } = require$$1$5;

	const lp$7 = src$i;
	const pushable$2 = itPushable;
	const { pipe: pipe$i } = itPipe.exports;
	const { source: abortable$5 } = abortableIterator.exports;

	/**
	 * @typedef {import('../stream-muxer/types').MuxedStream} MuxedStream
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('it-pushable').Pushable<Uint8Array>} PushableStream
	 */

	/**
	 * Thin wrapper around a peer's inbound / outbound pubsub streams
	 */
	class PeerStreams$1 extends EventEmitter$i {
	  /**
	   * @param {object} properties - properties of the PeerStreams.
	   * @param {PeerId} properties.id
	   * @param {string} properties.protocol
	   */
	  constructor ({ id, protocol }) {
	    super();

	    /**
	     * @type {import('peer-id')}
	     */
	    this.id = id;
	    /**
	     * Established protocol
	     *
	     * @type {string}
	     */
	    this.protocol = protocol;
	    /**
	     * The raw outbound stream, as retrieved from conn.newStream
	     *
	     * @private
	     * @type {null|MuxedStream}
	     */
	    this._rawOutboundStream = null;
	    /**
	     * The raw inbound stream, as retrieved from the callback from libp2p.handle
	     *
	     * @private
	     * @type {null|MuxedStream}
	     */
	    this._rawInboundStream = null;
	    /**
	     * An AbortController for controlled shutdown of the inbound stream
	     *
	     * @private
	     * @type {AbortController}
	     */
	    this._inboundAbortController = new AbortController();
	    /**
	     * Write stream -- its preferable to use the write method
	     *
	     * @type {null|PushableStream}
	     */
	    this.outboundStream = null;
	    /**
	     * Read stream
	     *
	     * @type {null| AsyncIterable<Uint8Array>}
	     */
	    this.inboundStream = null;
	  }

	  /**
	   * Do we have a connection to read from?
	   *
	   * @type {boolean}
	   */
	  get isReadable () {
	    return Boolean(this.inboundStream)
	  }

	  /**
	   * Do we have a connection to write on?
	   *
	   * @type {boolean}
	   */
	  get isWritable () {
	    return Boolean(this.outboundStream)
	  }

	  /**
	   * Send a message to this peer.
	   * Throws if there is no `stream` to write to available.
	   *
	   * @param {Uint8Array} data
	   * @returns {void}
	   */
	  write (data) {
	    if (!this.outboundStream) {
	      const id = this.id.toB58String();
	      throw new Error('No writable connection to ' + id)
	    }

	    this.outboundStream.push(data);
	  }

	  /**
	   * Attach a raw inbound stream and setup a read stream
	   *
	   * @param {MuxedStream} stream
	   * @returns {AsyncIterable<Uint8Array>}
	   */
	  attachInboundStream (stream) {
	    // Create and attach a new inbound stream
	    // The inbound stream is:
	    // - abortable, set to only return on abort, rather than throw
	    // - transformed with length-prefix transform
	    this._rawInboundStream = stream;
	    this.inboundStream = abortable$5(
	      pipe$i(
	        this._rawInboundStream,
	        lp$7.decode()
	      ),
	      this._inboundAbortController.signal,
	      { returnOnAbort: true }
	    );

	    this.emit('stream:inbound');
	    return this.inboundStream
	  }

	  /**
	   * Attach a raw outbound stream and setup a write stream
	   *
	   * @param {MuxedStream} stream
	   * @returns {Promise<void>}
	   */
	  async attachOutboundStream (stream) {
	    // If an outbound stream already exists, gently close it
	    const _prevStream = this.outboundStream;
	    if (this.outboundStream) {
	      // End the stream without emitting a close event
	      await this.outboundStream.end();
	    }

	    this._rawOutboundStream = stream;
	    this.outboundStream = pushable$2({
	      onEnd: (shouldEmit) => {
	        // close writable side of the stream
	        this._rawOutboundStream && this._rawOutboundStream.reset && this._rawOutboundStream.reset();
	        this._rawOutboundStream = null;
	        this.outboundStream = null;
	        if (shouldEmit) {
	          this.emit('close');
	        }
	      }
	    });

	    pipe$i(
	      this.outboundStream,
	      lp$7.encode(),
	      this._rawOutboundStream
	    ).catch(/** @param {Error} err */ err => {
	      log$R.error(err);
	    });

	    // Only emit if the connection is new
	    if (!_prevStream) {
	      this.emit('stream:outbound');
	    }
	  }

	  /**
	   * Closes the open connection to peer
	   *
	   * @returns {void}
	   */
	  close () {
	    // End the outbound stream
	    if (this.outboundStream) {
	      this.outboundStream.end();
	    }
	    // End the inbound stream
	    if (this.inboundStream) {
	      this._inboundAbortController.abort();
	    }

	    this._rawOutboundStream = null;
	    this.outboundStream = null;
	    this._rawInboundStream = null;
	    this.inboundStream = null;
	    this.emit('close');
	  }
	}

	var peerStreams = PeerStreams$1;

	var signaturePolicy = {};

	/**
	 * Enum for Signature Policy
	 * Details how message signatures are produced/consumed
	 */
	const SignaturePolicy$1 = {
	  /**
	   * On the producing side:
	   * * Build messages with the signature, key (from may be enough for certain inlineable public key types), from and seqno fields.
	   *
	   * On the consuming side:
	   * * Enforce the fields to be present, reject otherwise.
	   * * Propagate only if the fields are valid and signature can be verified, reject otherwise.
	   */
	  StrictSign: /** @type {'StrictSign'} */ ('StrictSign'),
	  /**
	   * On the producing side:
	   * * Build messages without the signature, key, from and seqno fields.
	   * * The corresponding protobuf key-value pairs are absent from the marshalled message, not just empty.
	   *
	   * On the consuming side:
	   * * Enforce the fields to be absent, reject otherwise.
	   * * Propagate only if the fields are absent, reject otherwise.
	   * * A message_id function will not be able to use the above fields, and should instead rely on the data field. A commonplace strategy is to calculate a hash.
	   */
	  StrictNoSign: /** @type {'StrictNoSign'} */ ('StrictNoSign')
	};
	signaturePolicy.SignaturePolicy = SignaturePolicy$1;

	// @ts-ignore libp2p crypto has no types
	const randomBytes$2 = randomBytes_1;
	const { toString: uint8ArrayToString$8 } = require$$8;
	const { fromString: uint8ArrayFromString$7 } = require$$5$3;
	const PeerId$s = src$o.exports;
	const { sha256: sha256$4 } = require$$1$6;

	/**
	 * @typedef {import('./message/rpc').RPC.IMessage} IMessage
	 * @typedef {import('./message/rpc').RPC.Message} Message
	 * @typedef {import('.').InMessage} NormalizedIMessage
	 */

	/**
	 * Generatea random sequence number.
	 *
	 * @returns {Uint8Array}
	 * @private
	 */
	const randomSeqno = () => {
	  return randomBytes$2(8)
	};

	/**
	 * Generate a message id, based on the `from` and `seqno`.
	 *
	 * @param {Uint8Array|string} from
	 * @param {Uint8Array} seqno
	 * @returns {Uint8Array}
	 * @private
	 */
	const msgId = (from, seqno) => {
	  let fromBytes;

	  if (from instanceof Uint8Array) {
	    fromBytes = PeerId$s.createFromBytes(from).id;
	  } else {
	    fromBytes = PeerId$s.parse(from).id;
	  }

	  const msgId = new Uint8Array(fromBytes.length + seqno.length);
	  msgId.set(fromBytes, 0);
	  msgId.set(seqno, fromBytes.length);
	  return msgId
	};

	/**
	 * Generate a message id, based on message `data`.
	 *
	 * @param {Uint8Array} data
	 * @private
	 */
	const noSignMsgId = (data) => sha256$4.encode(data);

	/**
	 * Check if any member of the first set is also a member
	 * of the second set.
	 *
	 * @param {Set<number>|Array<number>} a
	 * @param {Set<number>|Array<number>} b
	 * @returns {boolean}
	 * @private
	 */
	const anyMatch = (a, b) => {
	  let bHas;
	  if (Array.isArray(b)) {
	    /**
	     * @param {number} val
	     */
	    bHas = (val) => b.indexOf(val) > -1;
	  } else {
	    /**
	     * @param {number} val
	     */
	    bHas = (val) => b.has(val);
	  }

	  for (const val of a) {
	    if (bHas(val)) {
	      return true
	    }
	  }

	  return false
	};

	/**
	 * Make everything an array.
	 *
	 * @template T
	 * @param {T|T[]} maybeArray
	 * @returns {T[]}
	 * @private
	 */
	const ensureArray = (maybeArray) => {
	  if (!Array.isArray(maybeArray)) {
	    return [maybeArray]
	  }

	  return maybeArray
	};

	/**
	 * Ensures `message.from` is base58 encoded
	 *
	 * @template {{from?:any}} T
	 * @param {T & IMessage} message
	 * @param {string} [peerId]
	 * @returns {NormalizedIMessage}
	 */
	const normalizeInRpcMessage = (message, peerId) => {
	  /** @type {NormalizedIMessage} */
	  // @ts-ignore receivedFrom not yet defined
	  const m = Object.assign({}, message);
	  if (message.from instanceof Uint8Array) {
	    m.from = uint8ArrayToString$8(message.from, 'base58btc');
	  }
	  if (peerId) {
	    m.receivedFrom = peerId;
	  }
	  return m
	};

	/**
	 * @template {{from?:any, data?:any}} T
	 *
	 * @param {T & NormalizedIMessage} message
	 * @returns {Message}
	 */
	const normalizeOutRpcMessage$1 = (message) => {
	  /** @type {Message} */
	  // @ts-ignore from not yet defined
	  const m = Object.assign({}, message);
	  if (typeof message.from === 'string') {
	    m.from = uint8ArrayFromString$7(message.from, 'base58btc');
	  }
	  if (typeof message.data === 'string') {
	    m.data = uint8ArrayFromString$7(message.data);
	  }
	  return m
	};

	var utils$t = {
	  randomSeqno,
	  msgId,
	  noSignMsgId,
	  anyMatch,
	  ensureArray,
	  normalizeInRpcMessage,
	  normalizeOutRpcMessage: normalizeOutRpcMessage$1
	};

	const PeerId$r = src$o.exports;
	const { RPC: RPC$3 } = rpc$2;
	const { concat: uint8ArrayConcat$1 } = require$$9;
	const { fromString: uint8ArrayFromString$6 } = require$$5$3;
	const SignPrefix = uint8ArrayFromString$6('libp2p-pubsub:');
	const { normalizeOutRpcMessage } = utils$t;

	/**
	 * @typedef {import('..').InMessage}
	 */

	/**
	 * Signs the provided message with the given `peerId`
	 *
	 * @param {PeerId} peerId
	 * @param {InMessage} message
	 * @returns {Promise<InMessage>}
	 */
	async function signMessage$1 (peerId, message) {
	  // Get the message in bytes, and prepend with the pubsub prefix
	  const bytes = uint8ArrayConcat$1([
	    SignPrefix,
	    RPC$3.Message.encode(normalizeOutRpcMessage(message)).finish()
	  ]);

	  const signature = await peerId.privKey.sign(bytes);

	  return {
	    ...message,
	    signature: signature,
	    key: peerId.pubKey.bytes
	  }
	}

	/**
	 * Verifies the signature of the given message
	 *
	 * @param {InMessage} message
	 * @returns {Promise<boolean>}
	 */
	async function verifySignature$1 (message) {
	  if (!message.signature) {
	    throw new Error('Message must contain a signature to be verified')
	  }

	  if (!message.from) {
	    throw new Error('Message must contain a from property to be verified')
	  }

	  // Get message sans the signature
	  const bytes = uint8ArrayConcat$1([
	    SignPrefix,
	    RPC$3.Message.encode({
	      ...message,
	      from: PeerId$r.createFromB58String(message.from).toBytes(),
	      signature: undefined,
	      key: undefined
	    }).finish()
	  ]);

	  // Get the public key
	  const pubKey = await messagePublicKey(message);

	  // verify the base message
	  return pubKey.verify(bytes, message.signature)
	}

	/**
	 * Returns the PublicKey associated with the given message.
	 * If no, valid PublicKey can be retrieved an error will be returned.
	 *
	 * @param {InMessage} message
	 * @returns {Promise<PublicKey>}
	 */
	async function messagePublicKey (message) {
	  // should be available in the from property of the message (peer id)
	  if (!message.from) {
	    throw new Error('Could not get the public key from the originator id')
	  }

	  const from = PeerId$r.createFromB58String(message.from);

	  if (message.key) {
	    const keyPeerId = await PeerId$r.createFromPubKey(message.key);

	    // the key belongs to the sender, return the key
	    if (keyPeerId.equals(from)) return keyPeerId.pubKey
	    // We couldn't validate pubkey is from the originator, error
	    throw new Error('Public Key does not match the originator')
	  } else if (from.pubKey) {
	    return from.pubKey
	  } else {
	    throw new Error('Could not get the public key from the originator id')
	  }
	}

	/**
	 * @typedef {import('..').InMessage} InMessage
	 * @typedef {import('libp2p-crypto').PublicKey} PublicKey
	 */

	var sign = {
	  messagePublicKey,
	  signMessage: signMessage$1,
	  SignPrefix,
	  verifySignature: verifySignature$1
	};

	const debug$O = browser$a.exports;
	const { EventEmitter: EventEmitter$h } = require$$1$5;
	const errcode$i = errCode$q;

	const { pipe: pipe$h } = itPipe.exports;
	const { default: Queue$3 } = dist$1;

	const MulticodecTopology$1 = multicodecTopology;
	const { codes: codes$k } = errors$4;

	const { RPC: RPC$2 } = rpc$2;
	const PeerStreams = peerStreams;
	const { SignaturePolicy } = signaturePolicy;
	const utils$s = utils$t;

	const {
	  signMessage,
	  verifySignature
	} = sign;

	/**
	 * @typedef {any} Libp2p
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('bl')} BufferList
	 * @typedef {import('../stream-muxer/types').MuxedStream} MuxedStream
	 * @typedef {import('../connection/connection')} Connection
	 * @typedef {import('./signature-policy').SignaturePolicyType} SignaturePolicyType
	 * @typedef {import('./message/rpc').IRPC} IRPC
	 * @typedef {import('./message/rpc').RPC.SubOpts} RPCSubOpts
	 * @typedef {import('./message/rpc').RPC.Message} RPCMessage
	 */

	/**
	 * @typedef {Object} InMessage
	 * @property {string} [from]
	 * @property {string} receivedFrom
	 * @property {string[]} topicIDs
	 * @property {Uint8Array} [seqno]
	 * @property {Uint8Array} data
	 * @property {Uint8Array} [signature]
	 * @property {Uint8Array} [key]
	 *
	 * @typedef {Object} PubsubProperties
	 * @property {string} debugName - log namespace
	 * @property {Array<string>|string} multicodecs - protocol identificers to connect
	 * @property {Libp2p} libp2p
	 *
	 * @typedef {Object} PubsubOptions
	 * @property {SignaturePolicyType} [globalSignaturePolicy = SignaturePolicy.StrictSign] - defines how signatures should be handled
	 * @property {boolean} [canRelayMessage = false] - if can relay messages not subscribed
	 * @property {boolean} [emitSelf = false] - if publish should emit to self, if subscribed
	 * @property {number} [messageProcessingConcurrency = 10] - handle this many incoming pubsub messages concurrently
	 */

	/**
	 * PubsubBaseProtocol handles the peers and connections logic for pubsub routers
	 * and specifies the API that pubsub routers should have.
	 */
	class PubsubBaseProtocol extends EventEmitter$h {
	  /**
	   * @param {PubsubProperties & PubsubOptions} props
	   * @abstract
	   */
	  constructor ({
	    debugName,
	    multicodecs,
	    libp2p,
	    globalSignaturePolicy = SignaturePolicy.StrictSign,
	    canRelayMessage = false,
	    emitSelf = false,
	    messageProcessingConcurrency = 10
	  }) {
	    if (typeof debugName !== 'string') {
	      throw new Error('a debugname `string` is required')
	    }

	    if (!multicodecs) {
	      throw new Error('multicodecs are required')
	    }

	    if (!libp2p) {
	      throw new Error('libp2p is required')
	    }

	    super();

	    this.log = Object.assign(debug$O(debugName), {
	      err: debug$O(`${debugName}:error`)
	    });

	    /**
	     * @type {Array<string>}
	     */
	    this.multicodecs = utils$s.ensureArray(multicodecs);
	    this._libp2p = libp2p;
	    this.registrar = libp2p.registrar;
	    /**
	     * @type {PeerId}
	     */
	    this.peerId = libp2p.peerId;

	    this.started = false;

	    /**
	     * Map of topics to which peers are subscribed to
	     *
	     * @type {Map<string, Set<string>>}
	     */
	    this.topics = new Map();

	    /**
	     * List of our subscriptions
	     *
	     * @type {Set<string>}
	     */
	    this.subscriptions = new Set();

	    /**
	     * Map of peer streams
	     *
	     * @type {Map<string, import('./peer-streams')>}
	     */
	    this.peers = new Map();

	    // validate signature policy
	    if (!SignaturePolicy[globalSignaturePolicy]) {
	      throw errcode$i(new Error('Invalid global signature policy'), codes$k.ERR_INVALID_SIGNATURE_POLICY)
	    }

	    /**
	     * The signature policy to follow by default
	     *
	     * @type {string}
	     */
	    this.globalSignaturePolicy = globalSignaturePolicy;

	    /**
	     * If router can relay received messages, even if not subscribed
	     *
	     * @type {boolean}
	     */
	    this.canRelayMessage = canRelayMessage;

	    /**
	     * if publish should emit to self, if subscribed
	     *
	     * @type {boolean}
	     */
	    this.emitSelf = emitSelf;

	    /**
	     * Topic validator function
	     *
	     * @typedef {function(string, InMessage): Promise<void>} validator
	     */
	    /**
	     * Topic validator map
	     *
	     * Keyed by topic
	     * Topic validators are functions with the following input:
	     *
	     * @type {Map<string, validator>}
	     */
	    this.topicValidators = new Map();

	    /**
	     * @type {Queue}
	     */
	    this.queue = new Queue$3({ concurrency: messageProcessingConcurrency });

	    this._registrarId = undefined;
	    this._onIncomingStream = this._onIncomingStream.bind(this);
	    this._onPeerConnected = this._onPeerConnected.bind(this);
	    this._onPeerDisconnected = this._onPeerDisconnected.bind(this);
	  }

	  // LIFECYCLE METHODS

	  /**
	   * Register the pubsub protocol onto the libp2p node
	   */
	  async start () {
	    if (this.started) {
	      return
	    }
	    this.log('starting');

	    // Incoming streams
	    // Called after a peer dials us
	    this.registrar.handle(this.multicodecs, this._onIncomingStream);

	    // register protocol with topology
	    // Topology callbacks called on connection manager changes
	    const topology = new MulticodecTopology$1({
	      multicodecs: this.multicodecs,
	      handlers: {
	        onConnect: this._onPeerConnected,
	        onDisconnect: this._onPeerDisconnected
	      }
	    });
	    this._registrarId = await this.registrar.register(topology);

	    this.log('started');
	    this.started = true;
	  }

	  /**
	   * Unregister the pubsub protocol and the streams with other peers will be closed.
	   */
	  async stop () {
	    if (!this.started) {
	      return
	    }

	    // unregister protocol and handlers
	    this.registrar.unregister(this._registrarId);

	    this.log('stopping');
	    this.peers.forEach((peerStreams) => peerStreams.close());

	    this.peers = new Map();
	    this.subscriptions = new Set();
	    this.started = false;
	    this.log('stopped');
	  }

	  /**
	   * On an inbound stream opened.
	   *
	   * @protected
	   * @param {Object} props
	   * @param {string} props.protocol
	   * @param {MuxedStream} props.stream
	   * @param {Connection} props.connection - connection
	   */
	  _onIncomingStream ({ protocol, stream, connection }) {
	    const peerId = connection.remotePeer;
	    const idB58Str = peerId.toB58String();
	    const peer = this._addPeer(peerId, protocol);
	    const inboundStream = peer.attachInboundStream(stream);

	    this._processMessages(idB58Str, inboundStream, peer);
	  }

	  /**
	   * Registrar notifies an established connection with pubsub protocol.
	   *
	   * @protected
	   * @param {PeerId} peerId - remote peer-id
	   * @param {Connection} conn - connection to the peer
	   */
	  async _onPeerConnected (peerId, conn) {
	    const idB58Str = peerId.toB58String();
	    this.log('connected', idB58Str);

	    try {
	      const { stream, protocol } = await conn.newStream(this.multicodecs);
	      const peer = this._addPeer(peerId, protocol);
	      await peer.attachOutboundStream(stream);
	    } catch (/** @type {any} */ err) {
	      this.log.err(err);
	    }

	    // Immediately send my own subscriptions to the newly established conn
	    this._sendSubscriptions(idB58Str, Array.from(this.subscriptions), true);
	  }

	  /**
	   * Registrar notifies a closing connection with pubsub protocol.
	   *
	   * @protected
	   * @param {PeerId} peerId - peerId
	   * @param {Error} [err] - error for connection end
	   */
	  _onPeerDisconnected (peerId, err) {
	    const idB58Str = peerId.toB58String();

	    this.log('connection ended', idB58Str, err ? err.message : '');
	    this._removePeer(peerId);
	  }

	  /**
	   * Notifies the router that a peer has been connected
	   *
	   * @protected
	   * @param {PeerId} peerId
	   * @param {string} protocol
	   * @returns {PeerStreams}
	   */
	  _addPeer (peerId, protocol) {
	    const id = peerId.toB58String();
	    const existing = this.peers.get(id);

	    // If peer streams already exists, do nothing
	    if (existing) {
	      return existing
	    }

	    // else create a new peer streams
	    this.log('new peer', id);

	    const peerStreams = new PeerStreams({
	      id: peerId,
	      protocol
	    });

	    this.peers.set(id, peerStreams);
	    peerStreams.once('close', () => this._removePeer(peerId));

	    return peerStreams
	  }

	  /**
	   * Notifies the router that a peer has been disconnected.
	   *
	   * @protected
	   * @param {PeerId} peerId
	   * @returns {PeerStreams | undefined}
	   */
	  _removePeer (peerId) {
	    if (!peerId) return
	    const id = peerId.toB58String();
	    const peerStreams = this.peers.get(id);
	    if (!peerStreams) return

	    // close peer streams
	    peerStreams.removeAllListeners();
	    peerStreams.close();

	    // delete peer streams
	    this.log('delete peer', id);
	    this.peers.delete(id);

	    // remove peer from topics map
	    for (const peers of this.topics.values()) {
	      peers.delete(id);
	    }

	    return peerStreams
	  }

	  // MESSAGE METHODS

	  /**
	   * Responsible for processing each RPC message received by other peers.
	   *
	   * @param {string} idB58Str - peer id string in base58
	   * @param {AsyncIterable<Uint8Array|BufferList>} stream - inbound stream
	   * @param {PeerStreams} peerStreams - PubSub peer
	   * @returns {Promise<void>}
	   */
	  async _processMessages (idB58Str, stream, peerStreams) {
	    try {
	      await pipe$h(
	        stream,
	        async (source) => {
	          for await (const data of source) {
	            const rpcBytes = data instanceof Uint8Array ? data : data.slice();
	            const rpcMsg = this._decodeRpc(rpcBytes)

	            // Since _processRpc may be overridden entirely in unsafe ways,
	            // the simplest/safest option here is to wrap in a function and capture all errors
	            // to prevent a top-level unhandled exception
	            // This processing of rpc messages should happen without awaiting full validation/execution of prior messages
	            ;(async () => {
	              try {
	                await this._processRpc(idB58Str, peerStreams, rpcMsg);
	              } catch (/** @type {any} */ err) {
	                this.log.err(err);
	              }
	            })();
	          }
	        }
	      );
	    } catch (/** @type {any} */ err) {
	      this._onPeerDisconnected(peerStreams.id, err);
	    }
	  }

	  /**
	   * Handles an rpc request from a peer
	   *
	   * @param {string} idB58Str
	   * @param {PeerStreams} peerStreams
	   * @param {RPC} rpc
	   * @returns {Promise<boolean>}
	   */
	  async _processRpc (idB58Str, peerStreams, rpc) {
	    this.log('rpc from', idB58Str);
	    const subs = rpc.subscriptions;
	    const msgs = rpc.msgs;

	    if (subs.length) {
	      // update peer subscriptions
	      subs.forEach((subOpt) => {
	        this._processRpcSubOpt(idB58Str, subOpt);
	      });
	      this.emit('pubsub:subscription-change', peerStreams.id, subs);
	    }

	    if (!this._acceptFrom(idB58Str)) {
	      this.log('received message from unacceptable peer %s', idB58Str);
	      return false
	    }

	    if (msgs.length) {
	      this.queue.addAll(msgs.map(message => async () => {
	        if (!(this.canRelayMessage || (message.topicIDs && message.topicIDs.some((topic) => this.subscriptions.has(topic))))) {
	          this.log('received message we didn\'t subscribe to. Dropping.');
	          return
	        }

	        try {
	          const msg = utils$s.normalizeInRpcMessage(message, idB58Str);

	          await this._processRpcMessage(msg);
	        } catch (/** @type {any} */ err) {
	          this.log.err(err);
	        }
	      }));
	    }
	    return true
	  }

	  /**
	   * Handles a subscription change from a peer
	   *
	   * @param {string} id
	   * @param {RPC.ISubOpts} subOpt
	   */
	  _processRpcSubOpt (id, subOpt) {
	    const t = subOpt.topicID;

	    if (!t) {
	      return
	    }

	    let topicSet = this.topics.get(t);
	    if (!topicSet) {
	      topicSet = new Set();
	      this.topics.set(t, topicSet);
	    }

	    if (subOpt.subscribe) {
	      // subscribe peer to new topic
	      topicSet.add(id);
	    } else {
	      // unsubscribe from existing topic
	      topicSet.delete(id);
	    }
	  }

	  /**
	   * Handles an message from a peer
	   *
	   * @param {InMessage} msg
	   * @returns {Promise<void>}
	   */
	  async _processRpcMessage (msg) {
	    if (this.peerId.toB58String() === msg.from && !this.emitSelf) {
	      return
	    }

	    // Ensure the message is valid before processing it
	    try {
	      await this.validate(msg);
	    } catch (/** @type {any} */ err) {
	      this.log('Message is invalid, dropping it. %O', err);
	      return
	    }

	    // Emit to self
	    this._emitMessage(msg);

	    return this._publish(utils$s.normalizeOutRpcMessage(msg))
	  }

	  /**
	   * Emit a message from a peer
	   *
	   * @param {InMessage} message
	   */
	  _emitMessage (message) {
	    message.topicIDs.forEach((topic) => {
	      if (this.subscriptions.has(topic)) {
	        this.emit(topic, message);
	      }
	    });
	  }

	  /**
	   * The default msgID implementation
	   * Child class can override this.
	   *
	   * @param {InMessage} msg - the message object
	   * @returns {Promise<Uint8Array> | Uint8Array} message id as bytes
	   */
	  getMsgId (msg) {
	    const signaturePolicy = this.globalSignaturePolicy;
	    switch (signaturePolicy) {
	      case SignaturePolicy.StrictSign:
	        // @ts-ignore seqno is optional in protobuf definition but it will exist
	        return utils$s.msgId(msg.from, msg.seqno)
	      case SignaturePolicy.StrictNoSign:
	        return utils$s.noSignMsgId(msg.data)
	      default:
	        throw errcode$i(new Error('Cannot get message id: unhandled signature policy: ' + signaturePolicy), codes$k.ERR_UNHANDLED_SIGNATURE_POLICY)
	    }
	  }

	  /**
	   * Whether to accept a message from a peer
	   * Override to create a graylist
	   *
	   * @param {string} id
	   * @returns {boolean}
	   */
	  _acceptFrom (id) {
	    return true
	  }

	  /**
	   * Decode Uint8Array into an RPC object.
	   * This can be override to use a custom router protobuf.
	   *
	   * @param {Uint8Array} bytes
	   * @returns {RPC}
	   */
	  _decodeRpc (bytes) {
	    return RPC$2.decode(bytes)
	  }

	  /**
	   * Encode RPC object into a Uint8Array.
	   * This can be override to use a custom router protobuf.
	   *
	   * @param {IRPC} rpc
	   * @returns {Uint8Array}
	   */
	  _encodeRpc (rpc) {
	    return RPC$2.encode(rpc).finish()
	  }

	  /**
	   * Send an rpc object to a peer
	   *
	   * @param {string} id - peer id
	   * @param {IRPC} rpc
	   * @returns {void}
	   */
	  _sendRpc (id, rpc) {
	    const peerStreams = this.peers.get(id);
	    if (!peerStreams || !peerStreams.isWritable) {
	      const msg = `Cannot send RPC to ${id} as there is no open stream to it available`;

	      this.log.err(msg);
	      return
	    }
	    peerStreams.write(this._encodeRpc(rpc));
	  }

	  /**
	   * Send subscroptions to a peer
	   *
	   * @param {string} id - peer id
	   * @param {string[]} topics
	   * @param {boolean} subscribe - set to false for unsubscriptions
	   * @returns {void}
	   */
	  _sendSubscriptions (id, topics, subscribe) {
	    return this._sendRpc(id, {
	      subscriptions: topics.map(t => ({ topicID: t, subscribe: subscribe }))
	    })
	  }

	  /**
	   * Validates the given message. The signature will be checked for authenticity.
	   * Throws an error on invalid messages
	   *
	   * @param {InMessage} message
	   * @returns {Promise<void>}
	   */
	  async validate (message) { // eslint-disable-line require-await
	    const signaturePolicy = this.globalSignaturePolicy;
	    switch (signaturePolicy) {
	      case SignaturePolicy.StrictNoSign:
	        if (message.from) {
	          throw errcode$i(new Error('StrictNoSigning: from should not be present'), codes$k.ERR_UNEXPECTED_FROM)
	        }
	        if (message.signature) {
	          throw errcode$i(new Error('StrictNoSigning: signature should not be present'), codes$k.ERR_UNEXPECTED_SIGNATURE)
	        }
	        if (message.key) {
	          throw errcode$i(new Error('StrictNoSigning: key should not be present'), codes$k.ERR_UNEXPECTED_KEY)
	        }
	        if (message.seqno) {
	          throw errcode$i(new Error('StrictNoSigning: seqno should not be present'), codes$k.ERR_UNEXPECTED_SEQNO)
	        }
	        break
	      case SignaturePolicy.StrictSign:
	        if (!message.signature) {
	          throw errcode$i(new Error('StrictSigning: Signing required and no signature was present'), codes$k.ERR_MISSING_SIGNATURE)
	        }
	        if (!message.seqno) {
	          throw errcode$i(new Error('StrictSigning: Signing required and no seqno was present'), codes$k.ERR_MISSING_SEQNO)
	        }
	        if (!(await verifySignature(message))) {
	          throw errcode$i(new Error('StrictSigning: Invalid message signature'), codes$k.ERR_INVALID_SIGNATURE)
	        }
	        break
	      default:
	        throw errcode$i(new Error('Cannot validate message: unhandled signature policy: ' + signaturePolicy), codes$k.ERR_UNHANDLED_SIGNATURE_POLICY)
	    }

	    for (const topic of message.topicIDs) {
	      const validatorFn = this.topicValidators.get(topic);
	      if (validatorFn) {
	        await validatorFn(topic, message);
	      }
	    }
	  }

	  /**
	   * Normalizes the message and signs it, if signing is enabled.
	   * Should be used by the routers to create the message to send.
	   *
	   * @protected
	   * @param {InMessage} message
	   * @returns {Promise<InMessage>}
	   */
	  _buildMessage (message) {
	    const signaturePolicy = this.globalSignaturePolicy;
	    switch (signaturePolicy) {
	      case SignaturePolicy.StrictSign:
	        message.from = this.peerId.toB58String();
	        message.seqno = utils$s.randomSeqno();
	        return signMessage(this.peerId, message)
	      case SignaturePolicy.StrictNoSign:
	        return Promise.resolve(message)
	      default:
	        throw errcode$i(new Error('Cannot build message: unhandled signature policy: ' + signaturePolicy), codes$k.ERR_UNHANDLED_SIGNATURE_POLICY)
	    }
	  }

	  // API METHODS

	  /**
	   * Get a list of the peer-ids that are subscribed to one topic.
	   *
	   * @param {string} topic
	   * @returns {Array<string>}
	   */
	  getSubscribers (topic) {
	    if (!this.started) {
	      throw errcode$i(new Error('not started yet'), 'ERR_NOT_STARTED_YET')
	    }

	    if (!topic || typeof topic !== 'string') {
	      throw errcode$i(new Error('a string topic must be provided'), 'ERR_NOT_VALID_TOPIC')
	    }

	    const peersInTopic = this.topics.get(topic);
	    if (!peersInTopic) {
	      return []
	    }
	    return Array.from(peersInTopic)
	  }

	  /**
	   * Publishes messages to all subscribed peers
	   *
	   * @param {string} topic
	   * @param {Uint8Array} message
	   * @returns {Promise<void>}
	   */
	  async publish (topic, message) {
	    if (!this.started) {
	      throw new Error('Pubsub has not started')
	    }

	    this.log('publish', topic, message);

	    const from = this.peerId.toB58String();
	    const msgObject = {
	      receivedFrom: from,
	      data: message,
	      topicIDs: [topic]
	    };

	    // ensure that the message follows the signature policy
	    const outMsg = await this._buildMessage(msgObject);
	    // @ts-ignore different type as from is converted
	    const msg = utils$s.normalizeInRpcMessage(outMsg);

	    // Emit to self if I'm interested and emitSelf enabled
	    this.emitSelf && this._emitMessage(msg);

	    // send to all the other peers
	    await this._publish(msg);
	  }

	  /**
	   * Overriding the implementation of publish should handle the appropriate algorithms for the publish/subscriber implementation.
	   * For example, a Floodsub implementation might simply publish each message to each topic for every peer
	   *
	   * @abstract
	   * @param {InMessage|RPCMessage} message
	   * @returns {Promise<void>}
	   *
	   */
	  _publish (message) {
	    throw errcode$i(new Error('publish must be implemented by the subclass'), 'ERR_NOT_IMPLEMENTED')
	  }

	  /**
	   * Subscribes to a given topic.
	   *
	   * @abstract
	   * @param {string} topic
	   * @returns {void}
	   */
	  subscribe (topic) {
	    if (!this.started) {
	      throw new Error('Pubsub has not started')
	    }

	    if (!this.subscriptions.has(topic)) {
	      this.subscriptions.add(topic);
	      this.peers.forEach((_, id) => this._sendSubscriptions(id, [topic], true));
	    }
	  }

	  /**
	   * Unsubscribe from the given topic.
	   *
	   * @param {string} topic
	   * @returns {void}
	   */
	  unsubscribe (topic) {
	    if (!this.started) {
	      throw new Error('Pubsub is not started')
	    }

	    if (this.subscriptions.has(topic) && this.listenerCount(topic) === 0) {
	      this.subscriptions.delete(topic);
	      this.peers.forEach((_, id) => this._sendSubscriptions(id, [topic], false));
	    }
	  }

	  /**
	   * Get the list of topics which the peer is subscribed to.
	   *
	   * @returns {Array<string>}
	   */
	  getTopics () {
	    if (!this.started) {
	      throw new Error('Pubsub is not started')
	    }

	    return Array.from(this.subscriptions)
	  }
	}

	PubsubBaseProtocol.utils = utils$s;
	PubsubBaseProtocol.SignaturePolicy = SignaturePolicy;

	var pubsub = PubsubBaseProtocol;

	var messageCache = {};

	var utils$r = {};

	var createGossipRpc$1 = {};

	Object.defineProperty(createGossipRpc$1, "__esModule", { value: true });
	createGossipRpc$1.createGossipRpc = void 0;
	/**
	 * Create a gossipsub RPC object
	 * @param {Array<RPC.IMessage>} msgs
	 * @param {Partial<RPC.IControlMessage>} control
	 * @returns {IRPC}
	 */
	function createGossipRpc(msgs = [], control = {}) {
	    return {
	        subscriptions: [],
	        msgs: msgs,
	        control: Object.assign({ ihave: [], iwant: [], graft: [], prune: [] }, control)
	    };
	}
	createGossipRpc$1.createGossipRpc = createGossipRpc;

	var shuffle$1 = {};

	Object.defineProperty(shuffle$1, "__esModule", { value: true });
	shuffle$1.shuffle = void 0;
	/**
	 * Pseudo-randomly shuffles an array
	 *
	 * Mutates the input array
	 *
	 * @param {Array} arr
	 * @returns {Array}
	 */
	function shuffle(arr) {
	    if (arr.length <= 1) {
	        return arr;
	    }
	    const randInt = () => {
	        return Math.floor(Math.random() * Math.floor(arr.length));
	    };
	    for (let i = 0; i < arr.length; i++) {
	        const j = randInt();
	        const tmp = arr[i];
	        arr[i] = arr[j];
	        arr[j] = tmp;
	    }
	    return arr;
	}
	shuffle$1.shuffle = shuffle;

	var hasGossipProtocol$1 = {};

	var constants$f = {};

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ACCEPT_FROM_WHITELIST_DURATION_MS = exports.ACCEPT_FROM_WHITELIST_MAX_MESSAGES = exports.ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE = exports.ERR_TOPIC_VALIDATOR_IGNORE = exports.ERR_TOPIC_VALIDATOR_REJECT = exports.TimeCacheDuration = exports.GossipsubSeenTTL = exports.GossipsubIWantFollowupTime = exports.GossipsubMaxIHaveMessages = exports.GossipsubMaxIHaveLength = exports.GossipsubGraftFloodThreshold = exports.GossipsubOpportunisticGraftPeers = exports.GossipsubOpportunisticGraftTicks = exports.GossipsubDirectConnectInitialDelay = exports.GossipsubDirectConnectTicks = exports.GossipsubConnectionTimeout = exports.GossipsubMaxPendingConnections = exports.GossipsubConnectors = exports.GossipsubPruneBackoffTicks = exports.GossipsubPruneBackoff = exports.GossipsubPrunePeers = exports.GossipsubFanoutTTL = exports.GossipsubHeartbeatInterval = exports.GossipsubHeartbeatInitialDelay = exports.GossipsubGossipRetransmission = exports.GossipsubGossipFactor = exports.GossipsubDlazy = exports.GossipsubHistoryGossip = exports.GossipsubHistoryLength = exports.GossipsubDout = exports.GossipsubDscore = exports.GossipsubDhi = exports.GossipsubDlo = exports.GossipsubD = exports.GossipsubIDv11 = exports.GossipsubIDv10 = exports.FloodsubID = exports.minute = exports.second = void 0;
	exports.second = 1000;
	exports.minute = 60 * exports.second;
	// Protocol identifiers
	exports.FloodsubID = '/floodsub/1.0.0';
	/**
	 * The protocol ID for version 1.0.0 of the Gossipsub protocol
	 * It is advertised along with GossipsubIDv11 for backwards compatability
	 */
	exports.GossipsubIDv10 = '/meshsub/1.0.0';
	/**
	 * The protocol ID for version 1.1.0 of the Gossipsub protocol
	 * See the spec for details about how v1.1.0 compares to v1.0.0:
	 * https://github.com/libp2p/specs/blob/master/pubsub/gossipsub/gossipsub-v1.1.md
	 */
	exports.GossipsubIDv11 = '/meshsub/1.1.0';
	// Overlay parameters
	/**
	 * GossipsubD sets the optimal degree for a Gossipsub topic mesh. For example, if GossipsubD == 6,
	 * each peer will want to have about six peers in their mesh for each topic they're subscribed to.
	 * GossipsubD should be set somewhere between GossipsubDlo and GossipsubDhi.
	 */
	exports.GossipsubD = 6;
	/**
	 * GossipsubDlo sets the lower bound on the number of peers we keep in a Gossipsub topic mesh.
	 * If we have fewer than GossipsubDlo peers, we will attempt to graft some more into the mesh at
	 * the next heartbeat.
	 */
	exports.GossipsubDlo = 4;
	/**
	 * GossipsubDhi sets the upper bound on the number of peers we keep in a Gossipsub topic mesh.
	 * If we have more than GossipsubDhi peers, we will select some to prune from the mesh at the next heartbeat.
	 */
	exports.GossipsubDhi = 12;
	/**
	 * GossipsubDscore affects how peers are selected when pruning a mesh due to over subscription.
	 * At least GossipsubDscore of the retained peers will be high-scoring, while the remainder are
	 * chosen randomly.
	 */
	exports.GossipsubDscore = 4;
	/**
	 * GossipsubDout sets the quota for the number of outbound connections to maintain in a topic mesh.
	 * When the mesh is pruned due to over subscription, we make sure that we have outbound connections
	 * to at least GossipsubDout of the survivor peers. This prevents sybil attackers from overwhelming
	 * our mesh with incoming connections.
	 *
	 * GossipsubDout must be set below GossipsubDlo, and must not exceed GossipsubD / 2.
	 */
	exports.GossipsubDout = 2;
	// Gossip parameters
	/**
	 * GossipsubHistoryLength controls the size of the message cache used for gossip.
	 * The message cache will remember messages for GossipsubHistoryLength heartbeats.
	 */
	exports.GossipsubHistoryLength = 5;
	/**
	 * GossipsubHistoryGossip controls how many cached message ids we will advertise in
	 * IHAVE gossip messages. When asked for our seen message IDs, we will return
	 * only those from the most recent GossipsubHistoryGossip heartbeats. The slack between
	 * GossipsubHistoryGossip and GossipsubHistoryLength allows us to avoid advertising messages
	 * that will be expired by the time they're requested.
	 *
	 * GossipsubHistoryGossip must be less than or equal to GossipsubHistoryLength to
	 * avoid a runtime panic.
	 */
	exports.GossipsubHistoryGossip = 3;
	/**
	 * GossipsubDlazy affects how many peers we will emit gossip to at each heartbeat.
	 * We will send gossip to at least GossipsubDlazy peers outside our mesh. The actual
	 * number may be more, depending on GossipsubGossipFactor and how many peers we're
	 * connected to.
	 */
	exports.GossipsubDlazy = 6;
	/**
	 * GossipsubGossipFactor affects how many peers we will emit gossip to at each heartbeat.
	 * We will send gossip to GossipsubGossipFactor * (total number of non-mesh peers), or
	 * GossipsubDlazy, whichever is greater.
	 */
	exports.GossipsubGossipFactor = 0.25;
	/**
	 * GossipsubGossipRetransmission controls how many times we will allow a peer to request
	 * the same message id through IWANT gossip before we start ignoring them. This is designed
	 * to prevent peers from spamming us with requests and wasting our resources.
	 */
	exports.GossipsubGossipRetransmission = 3;
	// Heartbeat interval
	/**
	 * GossipsubHeartbeatInitialDelay is the short delay before the heartbeat timer begins
	 * after the router is initialized.
	 */
	exports.GossipsubHeartbeatInitialDelay = 100;
	/**
	 * GossipsubHeartbeatInterval controls the time between heartbeats.
	 */
	exports.GossipsubHeartbeatInterval = exports.second;
	/**
	 * GossipsubFanoutTTL controls how long we keep track of the fanout state. If it's been
	 * GossipsubFanoutTTL since we've published to a topic that we're not subscribed to,
	 * we'll delete the fanout map for that topic.
	 */
	exports.GossipsubFanoutTTL = exports.minute;
	/**
	 * GossipsubPrunePeers controls the number of peers to include in prune Peer eXchange.
	 * When we prune a peer that's eligible for PX (has a good score, etc), we will try to
	 * send them signed peer records for up to GossipsubPrunePeers other peers that we
	 * know of.
	 */
	exports.GossipsubPrunePeers = 16;
	/**
	 * GossipsubPruneBackoff controls the backoff time for pruned peers. This is how long
	 * a peer must wait before attempting to graft into our mesh again after being pruned.
	 * When pruning a peer, we send them our value of GossipsubPruneBackoff so they know
	 * the minimum time to wait. Peers running older versions may not send a backoff time,
	 * so if we receive a prune message without one, we will wait at least GossipsubPruneBackoff
	 * before attempting to re-graft.
	 */
	exports.GossipsubPruneBackoff = exports.minute;
	/**
	 * GossipsubPruneBackoffTicks is the number of heartbeat ticks for attempting to prune expired
	 * backoff timers.
	 */
	exports.GossipsubPruneBackoffTicks = 15;
	/**
	 * GossipsubConnectors controls the number of active connection attempts for peers obtained through PX.
	 */
	exports.GossipsubConnectors = 8;
	/**
	 * GossipsubMaxPendingConnections sets the maximum number of pending connections for peers attempted through px.
	 */
	exports.GossipsubMaxPendingConnections = 128;
	/**
	 * GossipsubConnectionTimeout controls the timeout for connection attempts.
	 */
	exports.GossipsubConnectionTimeout = 30 * exports.second;
	/**
	 * GossipsubDirectConnectTicks is the number of heartbeat ticks for attempting to reconnect direct peers
	 * that are not currently connected.
	 */
	exports.GossipsubDirectConnectTicks = 300;
	/**
	 * GossipsubDirectConnectInitialDelay is the initial delay before opening connections to direct peers
	 */
	exports.GossipsubDirectConnectInitialDelay = exports.second;
	/**
	 * GossipsubOpportunisticGraftTicks is the number of heartbeat ticks for attempting to improve the mesh
	 * with opportunistic grafting. Every GossipsubOpportunisticGraftTicks we will attempt to select some
	 * high-scoring mesh peers to replace lower-scoring ones, if the median score of our mesh peers falls
	 * below a threshold
	 */
	exports.GossipsubOpportunisticGraftTicks = 60;
	/**
	 * GossipsubOpportunisticGraftPeers is the number of peers to opportunistically graft.
	 */
	exports.GossipsubOpportunisticGraftPeers = 2;
	/**
	 * If a GRAFT comes before GossipsubGraftFloodThreshold has elapsed since the last PRUNE,
	 * then there is an extra score penalty applied to the peer through P7.
	 */
	exports.GossipsubGraftFloodThreshold = 10 * exports.second;
	/**
	 * GossipsubMaxIHaveLength is the maximum number of messages to include in an IHAVE message.
	 * Also controls the maximum number of IHAVE ids we will accept and request with IWANT from a
	 * peer within a heartbeat, to protect from IHAVE floods. You should adjust this value from the
	 * default if your system is pushing more than 5000 messages in GossipsubHistoryGossip heartbeats;
	 * with the defaults this is 1666 messages/s.
	 */
	exports.GossipsubMaxIHaveLength = 5000;
	/**
	 * GossipsubMaxIHaveMessages is the maximum number of IHAVE messages to accept from a peer within a heartbeat.
	 */
	exports.GossipsubMaxIHaveMessages = 10;
	/**
	 * Time to wait for a message requested through IWANT following an IHAVE advertisement.
	 * If the message is not received within this window, a broken promise is declared and
	 * the router may apply bahavioural penalties.
	 */
	exports.GossipsubIWantFollowupTime = 3 * exports.second;
	/**
	 * Time in milliseconds to keep message ids in the seen cache
	 */
	exports.GossipsubSeenTTL = 30 * exports.second;
	exports.TimeCacheDuration = 120 * 1000;
	exports.ERR_TOPIC_VALIDATOR_REJECT = 'ERR_TOPIC_VALIDATOR_REJECT';
	exports.ERR_TOPIC_VALIDATOR_IGNORE = 'ERR_TOPIC_VALIDATOR_IGNORE';
	/**
	 * If peer score is better than this, we accept messages from this peer
	 * within ACCEPT_FROM_WHITELIST_DURATION_MS from the last time computing score.
	 **/
	exports.ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE = 0;
	/**
	 * If peer score >= ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE, accept up to this
	 * number of messages from that peer.
	 */
	exports.ACCEPT_FROM_WHITELIST_MAX_MESSAGES = 128;
	/**
	 * If peer score >= ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE, accept messages from
	 * this peer up to this time duration.
	 */
	exports.ACCEPT_FROM_WHITELIST_DURATION_MS = 1000;
	}(constants$f));

	Object.defineProperty(hasGossipProtocol$1, "__esModule", { value: true });
	hasGossipProtocol$1.hasGossipProtocol = void 0;
	const constants_1$5 = constants$f;
	function hasGossipProtocol(protocol) {
	    return (protocol === constants_1$5.GossipsubIDv10 || protocol === constants_1$5.GossipsubIDv11);
	}
	hasGossipProtocol$1.hasGossipProtocol = hasGossipProtocol;

	var messageIdToString$1 = {};

	Object.defineProperty(messageIdToString$1, "__esModule", { value: true });
	messageIdToString$1.messageIdFromString = messageIdToString$1.messageIdToString = void 0;
	const from_string_1$1 = require$$5$3;
	const to_string_1 = require$$8;
	function messageIdToString(msgId) {
	    return to_string_1.toString(msgId, 'base64');
	}
	messageIdToString$1.messageIdToString = messageIdToString;
	function messageIdFromString(msgId) {
	    return from_string_1$1.fromString(msgId, 'base64');
	}
	messageIdToString$1.messageIdFromString = messageIdFromString;

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(createGossipRpc$1, exports);
	__exportStar(shuffle$1, exports);
	__exportStar(hasGossipProtocol$1, exports);
	__exportStar(messageIdToString$1, exports);
	}(utils$r));

	var __awaiter$3 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	Object.defineProperty(messageCache, "__esModule", { value: true });
	messageCache.MessageCache = void 0;
	const utils_1$a = utils$r;
	class MessageCache {
	    /**
	     * @param {Number} gossip
	     * @param {Number} history
	     * @param {msgIdFn} msgIdFn a function that returns message id from a message
	     *
	     * @constructor
	     */
	    constructor(gossip, history) {
	        /**
	         * @type {Map<string, RPC.Message>}
	         */
	        this.msgs = new Map();
	        this.peertx = new Map();
	        /**
	         * @type {Array<Array<CacheEntry>>}
	         */
	        this.history = [];
	        for (let i = 0; i < history; i++) {
	            this.history[i] = [];
	        }
	        /**
	         * @type {Number}
	         */
	        this.gossip = gossip;
	    }
	    /**
	     * Adds a message to the current window and the cache
	     *
	     * @param {string} msgIdStr
	     * @param {RPC.Message} msg
	     * @returns {Promise<void>}
	     */
	    put(msg, msgIdStr) {
	        return __awaiter$3(this, void 0, void 0, function* () {
	            this.msgs.set(msgIdStr, msg);
	            const msgId = utils_1$a.messageIdFromString(msgIdStr);
	            this.history[0].push({ msgId: msgId, topics: msg.topicIDs });
	        });
	    }
	    /**
	     * Retrieves a message from the cache by its ID, if it is still present
	     *
	     * @param {Uint8Array} msgId
	     * @returns {Message}
	     */
	    get(msgId) {
	        return this.msgs.get(utils_1$a.messageIdToString(msgId));
	    }
	    /**
	     * Retrieves a message from the cache by its ID, if it is present
	     * for a specific peer.
	     * Returns the message and the number of times the peer has requested the message
	     *
	     * @param {string} msgIdStr
	     * @param {string} p
	     * @returns {[InMessage | undefined, number]}
	     */
	    getForPeer(msgIdStr, p) {
	        const msg = this.msgs.get(msgIdStr);
	        if (!msg) {
	            return [undefined, 0];
	        }
	        let peertx = this.peertx.get(msgIdStr);
	        if (!peertx) {
	            peertx = new Map();
	            this.peertx.set(msgIdStr, peertx);
	        }
	        const count = (peertx.get(p) || 0) + 1;
	        peertx.set(p, count);
	        return [msg, count];
	    }
	    /**
	     * Retrieves a list of message IDs for a given topic
	     *
	     * @param {String} topic
	     *
	     * @returns {Array<Uint8Array>}
	     */
	    getGossipIDs(topic) {
	        const msgIds = [];
	        for (let i = 0; i < this.gossip; i++) {
	            this.history[i].forEach((entry) => {
	                for (const t of entry.topics) {
	                    if (t === topic) {
	                        msgIds.push(entry.msgId);
	                        break;
	                    }
	                }
	            });
	        }
	        return msgIds;
	    }
	    /**
	     * Shifts the current window, discarding messages older than this.history.length of the cache
	     *
	     * @returns {void}
	     */
	    shift() {
	        const last = this.history[this.history.length - 1];
	        last.forEach((entry) => {
	            const msgIdStr = utils_1$a.messageIdToString(entry.msgId);
	            this.msgs.delete(msgIdStr);
	            this.peertx.delete(msgIdStr);
	        });
	        this.history.pop();
	        this.history.unshift([]);
	    }
	}
	messageCache.MessageCache = MessageCache;

	var rpc$1 = {exports: {}};

	/*eslint-disable*/

	(function (module) {
	(function(global, factory) { /* global define, require, module */

	    /* AMD */ if (typeof commonjsRequire === 'function' && 'object' === 'object' && module && module.exports)
	        module.exports = factory(minimal);

	})(commonjsGlobal, function($protobuf) {

	    // Common aliases
	    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
	    
	    // Exported root namespace
	    var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});
	    
	    $root.RPC = (function() {
	    
	        /**
	         * Properties of a RPC.
	         * @exports IRPC
	         * @interface IRPC
	         * @property {Array.<RPC.ISubOpts>|null} [subscriptions] RPC subscriptions
	         * @property {Array.<RPC.IMessage>|null} [msgs] RPC msgs
	         * @property {RPC.IControlMessage|null} [control] RPC control
	         */
	    
	        /**
	         * Constructs a new RPC.
	         * @exports RPC
	         * @classdesc Represents a RPC.
	         * @implements IRPC
	         * @constructor
	         * @param {IRPC=} [p] Properties to set
	         */
	        function RPC(p) {
	            this.subscriptions = [];
	            this.msgs = [];
	            if (p)
	                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                    if (p[ks[i]] != null)
	                        this[ks[i]] = p[ks[i]];
	        }
	    
	        /**
	         * RPC subscriptions.
	         * @member {Array.<RPC.ISubOpts>} subscriptions
	         * @memberof RPC
	         * @instance
	         */
	        RPC.prototype.subscriptions = $util.emptyArray;
	    
	        /**
	         * RPC msgs.
	         * @member {Array.<RPC.IMessage>} msgs
	         * @memberof RPC
	         * @instance
	         */
	        RPC.prototype.msgs = $util.emptyArray;
	    
	        /**
	         * RPC control.
	         * @member {RPC.IControlMessage|null|undefined} control
	         * @memberof RPC
	         * @instance
	         */
	        RPC.prototype.control = null;
	    
	        // OneOf field names bound to virtual getters and setters
	        var $oneOfFields;
	    
	        /**
	         * RPC _control.
	         * @member {"control"|undefined} _control
	         * @memberof RPC
	         * @instance
	         */
	        Object.defineProperty(RPC.prototype, "_control", {
	            get: $util.oneOfGetter($oneOfFields = ["control"]),
	            set: $util.oneOfSetter($oneOfFields)
	        });
	    
	        /**
	         * Encodes the specified RPC message. Does not implicitly {@link RPC.verify|verify} messages.
	         * @function encode
	         * @memberof RPC
	         * @static
	         * @param {IRPC} m RPC message or plain object to encode
	         * @param {$protobuf.Writer} [w] Writer to encode to
	         * @returns {$protobuf.Writer} Writer
	         */
	        RPC.encode = function encode(m, w) {
	            if (!w)
	                w = $Writer.create();
	            if (m.subscriptions != null && m.subscriptions.length) {
	                for (var i = 0; i < m.subscriptions.length; ++i)
	                    $root.RPC.SubOpts.encode(m.subscriptions[i], w.uint32(10).fork()).ldelim();
	            }
	            if (m.msgs != null && m.msgs.length) {
	                for (var i = 0; i < m.msgs.length; ++i)
	                    $root.RPC.Message.encode(m.msgs[i], w.uint32(18).fork()).ldelim();
	            }
	            if (m.control != null && Object.hasOwnProperty.call(m, "control"))
	                $root.RPC.ControlMessage.encode(m.control, w.uint32(26).fork()).ldelim();
	            return w;
	        };
	    
	        /**
	         * Decodes a RPC message from the specified reader or buffer.
	         * @function decode
	         * @memberof RPC
	         * @static
	         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	         * @param {number} [l] Message length if known beforehand
	         * @returns {RPC} RPC
	         * @throws {Error} If the payload is not a reader or valid buffer
	         * @throws {$protobuf.util.ProtocolError} If required fields are missing
	         */
	        RPC.decode = function decode(r, l) {
	            if (!(r instanceof $Reader))
	                r = $Reader.create(r);
	            var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC();
	            while (r.pos < c) {
	                var t = r.uint32();
	                switch (t >>> 3) {
	                case 1:
	                    if (!(m.subscriptions && m.subscriptions.length))
	                        m.subscriptions = [];
	                    m.subscriptions.push($root.RPC.SubOpts.decode(r, r.uint32()));
	                    break;
	                case 2:
	                    if (!(m.msgs && m.msgs.length))
	                        m.msgs = [];
	                    m.msgs.push($root.RPC.Message.decode(r, r.uint32()));
	                    break;
	                case 3:
	                    m.control = $root.RPC.ControlMessage.decode(r, r.uint32());
	                    break;
	                default:
	                    r.skipType(t & 7);
	                    break;
	                }
	            }
	            return m;
	        };
	    
	        /**
	         * Creates a RPC message from a plain object. Also converts values to their respective internal types.
	         * @function fromObject
	         * @memberof RPC
	         * @static
	         * @param {Object.<string,*>} d Plain object
	         * @returns {RPC} RPC
	         */
	        RPC.fromObject = function fromObject(d) {
	            if (d instanceof $root.RPC)
	                return d;
	            var m = new $root.RPC();
	            if (d.subscriptions) {
	                if (!Array.isArray(d.subscriptions))
	                    throw TypeError(".RPC.subscriptions: array expected");
	                m.subscriptions = [];
	                for (var i = 0; i < d.subscriptions.length; ++i) {
	                    if (typeof d.subscriptions[i] !== "object")
	                        throw TypeError(".RPC.subscriptions: object expected");
	                    m.subscriptions[i] = $root.RPC.SubOpts.fromObject(d.subscriptions[i]);
	                }
	            }
	            if (d.msgs) {
	                if (!Array.isArray(d.msgs))
	                    throw TypeError(".RPC.msgs: array expected");
	                m.msgs = [];
	                for (var i = 0; i < d.msgs.length; ++i) {
	                    if (typeof d.msgs[i] !== "object")
	                        throw TypeError(".RPC.msgs: object expected");
	                    m.msgs[i] = $root.RPC.Message.fromObject(d.msgs[i]);
	                }
	            }
	            if (d.control != null) {
	                if (typeof d.control !== "object")
	                    throw TypeError(".RPC.control: object expected");
	                m.control = $root.RPC.ControlMessage.fromObject(d.control);
	            }
	            return m;
	        };
	    
	        /**
	         * Creates a plain object from a RPC message. Also converts values to other types if specified.
	         * @function toObject
	         * @memberof RPC
	         * @static
	         * @param {RPC} m RPC
	         * @param {$protobuf.IConversionOptions} [o] Conversion options
	         * @returns {Object.<string,*>} Plain object
	         */
	        RPC.toObject = function toObject(m, o) {
	            if (!o)
	                o = {};
	            var d = {};
	            if (o.arrays || o.defaults) {
	                d.subscriptions = [];
	                d.msgs = [];
	            }
	            if (m.subscriptions && m.subscriptions.length) {
	                d.subscriptions = [];
	                for (var j = 0; j < m.subscriptions.length; ++j) {
	                    d.subscriptions[j] = $root.RPC.SubOpts.toObject(m.subscriptions[j], o);
	                }
	            }
	            if (m.msgs && m.msgs.length) {
	                d.msgs = [];
	                for (var j = 0; j < m.msgs.length; ++j) {
	                    d.msgs[j] = $root.RPC.Message.toObject(m.msgs[j], o);
	                }
	            }
	            if (m.control != null && m.hasOwnProperty("control")) {
	                d.control = $root.RPC.ControlMessage.toObject(m.control, o);
	                if (o.oneofs)
	                    d._control = "control";
	            }
	            return d;
	        };
	    
	        /**
	         * Converts this RPC to JSON.
	         * @function toJSON
	         * @memberof RPC
	         * @instance
	         * @returns {Object.<string,*>} JSON object
	         */
	        RPC.prototype.toJSON = function toJSON() {
	            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	        };
	    
	        RPC.SubOpts = (function() {
	    
	            /**
	             * Properties of a SubOpts.
	             * @memberof RPC
	             * @interface ISubOpts
	             * @property {boolean|null} [subscribe] SubOpts subscribe
	             * @property {string|null} [topicID] SubOpts topicID
	             */
	    
	            /**
	             * Constructs a new SubOpts.
	             * @memberof RPC
	             * @classdesc Represents a SubOpts.
	             * @implements ISubOpts
	             * @constructor
	             * @param {RPC.ISubOpts=} [p] Properties to set
	             */
	            function SubOpts(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }
	    
	            /**
	             * SubOpts subscribe.
	             * @member {boolean|null|undefined} subscribe
	             * @memberof RPC.SubOpts
	             * @instance
	             */
	            SubOpts.prototype.subscribe = null;
	    
	            /**
	             * SubOpts topicID.
	             * @member {string|null|undefined} topicID
	             * @memberof RPC.SubOpts
	             * @instance
	             */
	            SubOpts.prototype.topicID = null;
	    
	            // OneOf field names bound to virtual getters and setters
	            var $oneOfFields;
	    
	            /**
	             * SubOpts _subscribe.
	             * @member {"subscribe"|undefined} _subscribe
	             * @memberof RPC.SubOpts
	             * @instance
	             */
	            Object.defineProperty(SubOpts.prototype, "_subscribe", {
	                get: $util.oneOfGetter($oneOfFields = ["subscribe"]),
	                set: $util.oneOfSetter($oneOfFields)
	            });
	    
	            /**
	             * SubOpts _topicID.
	             * @member {"topicID"|undefined} _topicID
	             * @memberof RPC.SubOpts
	             * @instance
	             */
	            Object.defineProperty(SubOpts.prototype, "_topicID", {
	                get: $util.oneOfGetter($oneOfFields = ["topicID"]),
	                set: $util.oneOfSetter($oneOfFields)
	            });
	    
	            /**
	             * Encodes the specified SubOpts message. Does not implicitly {@link RPC.SubOpts.verify|verify} messages.
	             * @function encode
	             * @memberof RPC.SubOpts
	             * @static
	             * @param {RPC.ISubOpts} m SubOpts message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            SubOpts.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.subscribe != null && Object.hasOwnProperty.call(m, "subscribe"))
	                    w.uint32(8).bool(m.subscribe);
	                if (m.topicID != null && Object.hasOwnProperty.call(m, "topicID"))
	                    w.uint32(18).string(m.topicID);
	                return w;
	            };
	    
	            /**
	             * Decodes a SubOpts message from the specified reader or buffer.
	             * @function decode
	             * @memberof RPC.SubOpts
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {RPC.SubOpts} SubOpts
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            SubOpts.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.SubOpts();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1:
	                        m.subscribe = r.bool();
	                        break;
	                    case 2:
	                        m.topicID = r.string();
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };
	    
	            /**
	             * Creates a SubOpts message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof RPC.SubOpts
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {RPC.SubOpts} SubOpts
	             */
	            SubOpts.fromObject = function fromObject(d) {
	                if (d instanceof $root.RPC.SubOpts)
	                    return d;
	                var m = new $root.RPC.SubOpts();
	                if (d.subscribe != null) {
	                    m.subscribe = Boolean(d.subscribe);
	                }
	                if (d.topicID != null) {
	                    m.topicID = String(d.topicID);
	                }
	                return m;
	            };
	    
	            /**
	             * Creates a plain object from a SubOpts message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof RPC.SubOpts
	             * @static
	             * @param {RPC.SubOpts} m SubOpts
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            SubOpts.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (m.subscribe != null && m.hasOwnProperty("subscribe")) {
	                    d.subscribe = m.subscribe;
	                    if (o.oneofs)
	                        d._subscribe = "subscribe";
	                }
	                if (m.topicID != null && m.hasOwnProperty("topicID")) {
	                    d.topicID = m.topicID;
	                    if (o.oneofs)
	                        d._topicID = "topicID";
	                }
	                return d;
	            };
	    
	            /**
	             * Converts this SubOpts to JSON.
	             * @function toJSON
	             * @memberof RPC.SubOpts
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            SubOpts.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };
	    
	            return SubOpts;
	        })();
	    
	        RPC.Message = (function() {
	    
	            /**
	             * Properties of a Message.
	             * @memberof RPC
	             * @interface IMessage
	             * @property {Uint8Array|null} [from] Message from
	             * @property {Uint8Array|null} [data] Message data
	             * @property {Uint8Array|null} [seqno] Message seqno
	             * @property {Array.<string>|null} [topicIDs] Message topicIDs
	             * @property {Uint8Array|null} [signature] Message signature
	             * @property {Uint8Array|null} [key] Message key
	             */
	    
	            /**
	             * Constructs a new Message.
	             * @memberof RPC
	             * @classdesc Represents a Message.
	             * @implements IMessage
	             * @constructor
	             * @param {RPC.IMessage=} [p] Properties to set
	             */
	            function Message(p) {
	                this.topicIDs = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }
	    
	            /**
	             * Message from.
	             * @member {Uint8Array|null|undefined} from
	             * @memberof RPC.Message
	             * @instance
	             */
	            Message.prototype.from = null;
	    
	            /**
	             * Message data.
	             * @member {Uint8Array|null|undefined} data
	             * @memberof RPC.Message
	             * @instance
	             */
	            Message.prototype.data = null;
	    
	            /**
	             * Message seqno.
	             * @member {Uint8Array|null|undefined} seqno
	             * @memberof RPC.Message
	             * @instance
	             */
	            Message.prototype.seqno = null;
	    
	            /**
	             * Message topicIDs.
	             * @member {Array.<string>} topicIDs
	             * @memberof RPC.Message
	             * @instance
	             */
	            Message.prototype.topicIDs = $util.emptyArray;
	    
	            /**
	             * Message signature.
	             * @member {Uint8Array|null|undefined} signature
	             * @memberof RPC.Message
	             * @instance
	             */
	            Message.prototype.signature = null;
	    
	            /**
	             * Message key.
	             * @member {Uint8Array|null|undefined} key
	             * @memberof RPC.Message
	             * @instance
	             */
	            Message.prototype.key = null;
	    
	            // OneOf field names bound to virtual getters and setters
	            var $oneOfFields;
	    
	            /**
	             * Message _from.
	             * @member {"from"|undefined} _from
	             * @memberof RPC.Message
	             * @instance
	             */
	            Object.defineProperty(Message.prototype, "_from", {
	                get: $util.oneOfGetter($oneOfFields = ["from"]),
	                set: $util.oneOfSetter($oneOfFields)
	            });
	    
	            /**
	             * Message _data.
	             * @member {"data"|undefined} _data
	             * @memberof RPC.Message
	             * @instance
	             */
	            Object.defineProperty(Message.prototype, "_data", {
	                get: $util.oneOfGetter($oneOfFields = ["data"]),
	                set: $util.oneOfSetter($oneOfFields)
	            });
	    
	            /**
	             * Message _seqno.
	             * @member {"seqno"|undefined} _seqno
	             * @memberof RPC.Message
	             * @instance
	             */
	            Object.defineProperty(Message.prototype, "_seqno", {
	                get: $util.oneOfGetter($oneOfFields = ["seqno"]),
	                set: $util.oneOfSetter($oneOfFields)
	            });
	    
	            /**
	             * Message _signature.
	             * @member {"signature"|undefined} _signature
	             * @memberof RPC.Message
	             * @instance
	             */
	            Object.defineProperty(Message.prototype, "_signature", {
	                get: $util.oneOfGetter($oneOfFields = ["signature"]),
	                set: $util.oneOfSetter($oneOfFields)
	            });
	    
	            /**
	             * Message _key.
	             * @member {"key"|undefined} _key
	             * @memberof RPC.Message
	             * @instance
	             */
	            Object.defineProperty(Message.prototype, "_key", {
	                get: $util.oneOfGetter($oneOfFields = ["key"]),
	                set: $util.oneOfSetter($oneOfFields)
	            });
	    
	            /**
	             * Encodes the specified Message message. Does not implicitly {@link RPC.Message.verify|verify} messages.
	             * @function encode
	             * @memberof RPC.Message
	             * @static
	             * @param {RPC.IMessage} m Message message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            Message.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.from != null && Object.hasOwnProperty.call(m, "from"))
	                    w.uint32(10).bytes(m.from);
	                if (m.data != null && Object.hasOwnProperty.call(m, "data"))
	                    w.uint32(18).bytes(m.data);
	                if (m.seqno != null && Object.hasOwnProperty.call(m, "seqno"))
	                    w.uint32(26).bytes(m.seqno);
	                if (m.topicIDs != null && m.topicIDs.length) {
	                    for (var i = 0; i < m.topicIDs.length; ++i)
	                        w.uint32(34).string(m.topicIDs[i]);
	                }
	                if (m.signature != null && Object.hasOwnProperty.call(m, "signature"))
	                    w.uint32(42).bytes(m.signature);
	                if (m.key != null && Object.hasOwnProperty.call(m, "key"))
	                    w.uint32(50).bytes(m.key);
	                return w;
	            };
	    
	            /**
	             * Decodes a Message message from the specified reader or buffer.
	             * @function decode
	             * @memberof RPC.Message
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {RPC.Message} Message
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            Message.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.Message();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1:
	                        m.from = r.bytes();
	                        break;
	                    case 2:
	                        m.data = r.bytes();
	                        break;
	                    case 3:
	                        m.seqno = r.bytes();
	                        break;
	                    case 4:
	                        if (!(m.topicIDs && m.topicIDs.length))
	                            m.topicIDs = [];
	                        m.topicIDs.push(r.string());
	                        break;
	                    case 5:
	                        m.signature = r.bytes();
	                        break;
	                    case 6:
	                        m.key = r.bytes();
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };
	    
	            /**
	             * Creates a Message message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof RPC.Message
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {RPC.Message} Message
	             */
	            Message.fromObject = function fromObject(d) {
	                if (d instanceof $root.RPC.Message)
	                    return d;
	                var m = new $root.RPC.Message();
	                if (d.from != null) {
	                    if (typeof d.from === "string")
	                        $util.base64.decode(d.from, m.from = $util.newBuffer($util.base64.length(d.from)), 0);
	                    else if (d.from.length)
	                        m.from = d.from;
	                }
	                if (d.data != null) {
	                    if (typeof d.data === "string")
	                        $util.base64.decode(d.data, m.data = $util.newBuffer($util.base64.length(d.data)), 0);
	                    else if (d.data.length)
	                        m.data = d.data;
	                }
	                if (d.seqno != null) {
	                    if (typeof d.seqno === "string")
	                        $util.base64.decode(d.seqno, m.seqno = $util.newBuffer($util.base64.length(d.seqno)), 0);
	                    else if (d.seqno.length)
	                        m.seqno = d.seqno;
	                }
	                if (d.topicIDs) {
	                    if (!Array.isArray(d.topicIDs))
	                        throw TypeError(".RPC.Message.topicIDs: array expected");
	                    m.topicIDs = [];
	                    for (var i = 0; i < d.topicIDs.length; ++i) {
	                        m.topicIDs[i] = String(d.topicIDs[i]);
	                    }
	                }
	                if (d.signature != null) {
	                    if (typeof d.signature === "string")
	                        $util.base64.decode(d.signature, m.signature = $util.newBuffer($util.base64.length(d.signature)), 0);
	                    else if (d.signature.length)
	                        m.signature = d.signature;
	                }
	                if (d.key != null) {
	                    if (typeof d.key === "string")
	                        $util.base64.decode(d.key, m.key = $util.newBuffer($util.base64.length(d.key)), 0);
	                    else if (d.key.length)
	                        m.key = d.key;
	                }
	                return m;
	            };
	    
	            /**
	             * Creates a plain object from a Message message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof RPC.Message
	             * @static
	             * @param {RPC.Message} m Message
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            Message.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.topicIDs = [];
	                }
	                if (m.from != null && m.hasOwnProperty("from")) {
	                    d.from = o.bytes === String ? $util.base64.encode(m.from, 0, m.from.length) : o.bytes === Array ? Array.prototype.slice.call(m.from) : m.from;
	                    if (o.oneofs)
	                        d._from = "from";
	                }
	                if (m.data != null && m.hasOwnProperty("data")) {
	                    d.data = o.bytes === String ? $util.base64.encode(m.data, 0, m.data.length) : o.bytes === Array ? Array.prototype.slice.call(m.data) : m.data;
	                    if (o.oneofs)
	                        d._data = "data";
	                }
	                if (m.seqno != null && m.hasOwnProperty("seqno")) {
	                    d.seqno = o.bytes === String ? $util.base64.encode(m.seqno, 0, m.seqno.length) : o.bytes === Array ? Array.prototype.slice.call(m.seqno) : m.seqno;
	                    if (o.oneofs)
	                        d._seqno = "seqno";
	                }
	                if (m.topicIDs && m.topicIDs.length) {
	                    d.topicIDs = [];
	                    for (var j = 0; j < m.topicIDs.length; ++j) {
	                        d.topicIDs[j] = m.topicIDs[j];
	                    }
	                }
	                if (m.signature != null && m.hasOwnProperty("signature")) {
	                    d.signature = o.bytes === String ? $util.base64.encode(m.signature, 0, m.signature.length) : o.bytes === Array ? Array.prototype.slice.call(m.signature) : m.signature;
	                    if (o.oneofs)
	                        d._signature = "signature";
	                }
	                if (m.key != null && m.hasOwnProperty("key")) {
	                    d.key = o.bytes === String ? $util.base64.encode(m.key, 0, m.key.length) : o.bytes === Array ? Array.prototype.slice.call(m.key) : m.key;
	                    if (o.oneofs)
	                        d._key = "key";
	                }
	                return d;
	            };
	    
	            /**
	             * Converts this Message to JSON.
	             * @function toJSON
	             * @memberof RPC.Message
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            Message.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };
	    
	            return Message;
	        })();
	    
	        RPC.ControlMessage = (function() {
	    
	            /**
	             * Properties of a ControlMessage.
	             * @memberof RPC
	             * @interface IControlMessage
	             * @property {Array.<RPC.IControlIHave>|null} [ihave] ControlMessage ihave
	             * @property {Array.<RPC.IControlIWant>|null} [iwant] ControlMessage iwant
	             * @property {Array.<RPC.IControlGraft>|null} [graft] ControlMessage graft
	             * @property {Array.<RPC.IControlPrune>|null} [prune] ControlMessage prune
	             */
	    
	            /**
	             * Constructs a new ControlMessage.
	             * @memberof RPC
	             * @classdesc Represents a ControlMessage.
	             * @implements IControlMessage
	             * @constructor
	             * @param {RPC.IControlMessage=} [p] Properties to set
	             */
	            function ControlMessage(p) {
	                this.ihave = [];
	                this.iwant = [];
	                this.graft = [];
	                this.prune = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }
	    
	            /**
	             * ControlMessage ihave.
	             * @member {Array.<RPC.IControlIHave>} ihave
	             * @memberof RPC.ControlMessage
	             * @instance
	             */
	            ControlMessage.prototype.ihave = $util.emptyArray;
	    
	            /**
	             * ControlMessage iwant.
	             * @member {Array.<RPC.IControlIWant>} iwant
	             * @memberof RPC.ControlMessage
	             * @instance
	             */
	            ControlMessage.prototype.iwant = $util.emptyArray;
	    
	            /**
	             * ControlMessage graft.
	             * @member {Array.<RPC.IControlGraft>} graft
	             * @memberof RPC.ControlMessage
	             * @instance
	             */
	            ControlMessage.prototype.graft = $util.emptyArray;
	    
	            /**
	             * ControlMessage prune.
	             * @member {Array.<RPC.IControlPrune>} prune
	             * @memberof RPC.ControlMessage
	             * @instance
	             */
	            ControlMessage.prototype.prune = $util.emptyArray;
	    
	            /**
	             * Encodes the specified ControlMessage message. Does not implicitly {@link RPC.ControlMessage.verify|verify} messages.
	             * @function encode
	             * @memberof RPC.ControlMessage
	             * @static
	             * @param {RPC.IControlMessage} m ControlMessage message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            ControlMessage.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.ihave != null && m.ihave.length) {
	                    for (var i = 0; i < m.ihave.length; ++i)
	                        $root.RPC.ControlIHave.encode(m.ihave[i], w.uint32(10).fork()).ldelim();
	                }
	                if (m.iwant != null && m.iwant.length) {
	                    for (var i = 0; i < m.iwant.length; ++i)
	                        $root.RPC.ControlIWant.encode(m.iwant[i], w.uint32(18).fork()).ldelim();
	                }
	                if (m.graft != null && m.graft.length) {
	                    for (var i = 0; i < m.graft.length; ++i)
	                        $root.RPC.ControlGraft.encode(m.graft[i], w.uint32(26).fork()).ldelim();
	                }
	                if (m.prune != null && m.prune.length) {
	                    for (var i = 0; i < m.prune.length; ++i)
	                        $root.RPC.ControlPrune.encode(m.prune[i], w.uint32(34).fork()).ldelim();
	                }
	                return w;
	            };
	    
	            /**
	             * Decodes a ControlMessage message from the specified reader or buffer.
	             * @function decode
	             * @memberof RPC.ControlMessage
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {RPC.ControlMessage} ControlMessage
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            ControlMessage.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.ControlMessage();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1:
	                        if (!(m.ihave && m.ihave.length))
	                            m.ihave = [];
	                        m.ihave.push($root.RPC.ControlIHave.decode(r, r.uint32()));
	                        break;
	                    case 2:
	                        if (!(m.iwant && m.iwant.length))
	                            m.iwant = [];
	                        m.iwant.push($root.RPC.ControlIWant.decode(r, r.uint32()));
	                        break;
	                    case 3:
	                        if (!(m.graft && m.graft.length))
	                            m.graft = [];
	                        m.graft.push($root.RPC.ControlGraft.decode(r, r.uint32()));
	                        break;
	                    case 4:
	                        if (!(m.prune && m.prune.length))
	                            m.prune = [];
	                        m.prune.push($root.RPC.ControlPrune.decode(r, r.uint32()));
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };
	    
	            /**
	             * Creates a ControlMessage message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof RPC.ControlMessage
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {RPC.ControlMessage} ControlMessage
	             */
	            ControlMessage.fromObject = function fromObject(d) {
	                if (d instanceof $root.RPC.ControlMessage)
	                    return d;
	                var m = new $root.RPC.ControlMessage();
	                if (d.ihave) {
	                    if (!Array.isArray(d.ihave))
	                        throw TypeError(".RPC.ControlMessage.ihave: array expected");
	                    m.ihave = [];
	                    for (var i = 0; i < d.ihave.length; ++i) {
	                        if (typeof d.ihave[i] !== "object")
	                            throw TypeError(".RPC.ControlMessage.ihave: object expected");
	                        m.ihave[i] = $root.RPC.ControlIHave.fromObject(d.ihave[i]);
	                    }
	                }
	                if (d.iwant) {
	                    if (!Array.isArray(d.iwant))
	                        throw TypeError(".RPC.ControlMessage.iwant: array expected");
	                    m.iwant = [];
	                    for (var i = 0; i < d.iwant.length; ++i) {
	                        if (typeof d.iwant[i] !== "object")
	                            throw TypeError(".RPC.ControlMessage.iwant: object expected");
	                        m.iwant[i] = $root.RPC.ControlIWant.fromObject(d.iwant[i]);
	                    }
	                }
	                if (d.graft) {
	                    if (!Array.isArray(d.graft))
	                        throw TypeError(".RPC.ControlMessage.graft: array expected");
	                    m.graft = [];
	                    for (var i = 0; i < d.graft.length; ++i) {
	                        if (typeof d.graft[i] !== "object")
	                            throw TypeError(".RPC.ControlMessage.graft: object expected");
	                        m.graft[i] = $root.RPC.ControlGraft.fromObject(d.graft[i]);
	                    }
	                }
	                if (d.prune) {
	                    if (!Array.isArray(d.prune))
	                        throw TypeError(".RPC.ControlMessage.prune: array expected");
	                    m.prune = [];
	                    for (var i = 0; i < d.prune.length; ++i) {
	                        if (typeof d.prune[i] !== "object")
	                            throw TypeError(".RPC.ControlMessage.prune: object expected");
	                        m.prune[i] = $root.RPC.ControlPrune.fromObject(d.prune[i]);
	                    }
	                }
	                return m;
	            };
	    
	            /**
	             * Creates a plain object from a ControlMessage message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof RPC.ControlMessage
	             * @static
	             * @param {RPC.ControlMessage} m ControlMessage
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            ControlMessage.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.ihave = [];
	                    d.iwant = [];
	                    d.graft = [];
	                    d.prune = [];
	                }
	                if (m.ihave && m.ihave.length) {
	                    d.ihave = [];
	                    for (var j = 0; j < m.ihave.length; ++j) {
	                        d.ihave[j] = $root.RPC.ControlIHave.toObject(m.ihave[j], o);
	                    }
	                }
	                if (m.iwant && m.iwant.length) {
	                    d.iwant = [];
	                    for (var j = 0; j < m.iwant.length; ++j) {
	                        d.iwant[j] = $root.RPC.ControlIWant.toObject(m.iwant[j], o);
	                    }
	                }
	                if (m.graft && m.graft.length) {
	                    d.graft = [];
	                    for (var j = 0; j < m.graft.length; ++j) {
	                        d.graft[j] = $root.RPC.ControlGraft.toObject(m.graft[j], o);
	                    }
	                }
	                if (m.prune && m.prune.length) {
	                    d.prune = [];
	                    for (var j = 0; j < m.prune.length; ++j) {
	                        d.prune[j] = $root.RPC.ControlPrune.toObject(m.prune[j], o);
	                    }
	                }
	                return d;
	            };
	    
	            /**
	             * Converts this ControlMessage to JSON.
	             * @function toJSON
	             * @memberof RPC.ControlMessage
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            ControlMessage.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };
	    
	            return ControlMessage;
	        })();
	    
	        RPC.ControlIHave = (function() {
	    
	            /**
	             * Properties of a ControlIHave.
	             * @memberof RPC
	             * @interface IControlIHave
	             * @property {string|null} [topicID] ControlIHave topicID
	             * @property {Array.<Uint8Array>|null} [messageIDs] ControlIHave messageIDs
	             */
	    
	            /**
	             * Constructs a new ControlIHave.
	             * @memberof RPC
	             * @classdesc Represents a ControlIHave.
	             * @implements IControlIHave
	             * @constructor
	             * @param {RPC.IControlIHave=} [p] Properties to set
	             */
	            function ControlIHave(p) {
	                this.messageIDs = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }
	    
	            /**
	             * ControlIHave topicID.
	             * @member {string|null|undefined} topicID
	             * @memberof RPC.ControlIHave
	             * @instance
	             */
	            ControlIHave.prototype.topicID = null;
	    
	            /**
	             * ControlIHave messageIDs.
	             * @member {Array.<Uint8Array>} messageIDs
	             * @memberof RPC.ControlIHave
	             * @instance
	             */
	            ControlIHave.prototype.messageIDs = $util.emptyArray;
	    
	            // OneOf field names bound to virtual getters and setters
	            var $oneOfFields;
	    
	            /**
	             * ControlIHave _topicID.
	             * @member {"topicID"|undefined} _topicID
	             * @memberof RPC.ControlIHave
	             * @instance
	             */
	            Object.defineProperty(ControlIHave.prototype, "_topicID", {
	                get: $util.oneOfGetter($oneOfFields = ["topicID"]),
	                set: $util.oneOfSetter($oneOfFields)
	            });
	    
	            /**
	             * Encodes the specified ControlIHave message. Does not implicitly {@link RPC.ControlIHave.verify|verify} messages.
	             * @function encode
	             * @memberof RPC.ControlIHave
	             * @static
	             * @param {RPC.IControlIHave} m ControlIHave message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            ControlIHave.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.topicID != null && Object.hasOwnProperty.call(m, "topicID"))
	                    w.uint32(10).string(m.topicID);
	                if (m.messageIDs != null && m.messageIDs.length) {
	                    for (var i = 0; i < m.messageIDs.length; ++i)
	                        w.uint32(18).bytes(m.messageIDs[i]);
	                }
	                return w;
	            };
	    
	            /**
	             * Decodes a ControlIHave message from the specified reader or buffer.
	             * @function decode
	             * @memberof RPC.ControlIHave
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {RPC.ControlIHave} ControlIHave
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            ControlIHave.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.ControlIHave();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1:
	                        m.topicID = r.string();
	                        break;
	                    case 2:
	                        if (!(m.messageIDs && m.messageIDs.length))
	                            m.messageIDs = [];
	                        m.messageIDs.push(r.bytes());
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };
	    
	            /**
	             * Creates a ControlIHave message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof RPC.ControlIHave
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {RPC.ControlIHave} ControlIHave
	             */
	            ControlIHave.fromObject = function fromObject(d) {
	                if (d instanceof $root.RPC.ControlIHave)
	                    return d;
	                var m = new $root.RPC.ControlIHave();
	                if (d.topicID != null) {
	                    m.topicID = String(d.topicID);
	                }
	                if (d.messageIDs) {
	                    if (!Array.isArray(d.messageIDs))
	                        throw TypeError(".RPC.ControlIHave.messageIDs: array expected");
	                    m.messageIDs = [];
	                    for (var i = 0; i < d.messageIDs.length; ++i) {
	                        if (typeof d.messageIDs[i] === "string")
	                            $util.base64.decode(d.messageIDs[i], m.messageIDs[i] = $util.newBuffer($util.base64.length(d.messageIDs[i])), 0);
	                        else if (d.messageIDs[i].length)
	                            m.messageIDs[i] = d.messageIDs[i];
	                    }
	                }
	                return m;
	            };
	    
	            /**
	             * Creates a plain object from a ControlIHave message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof RPC.ControlIHave
	             * @static
	             * @param {RPC.ControlIHave} m ControlIHave
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            ControlIHave.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.messageIDs = [];
	                }
	                if (m.topicID != null && m.hasOwnProperty("topicID")) {
	                    d.topicID = m.topicID;
	                    if (o.oneofs)
	                        d._topicID = "topicID";
	                }
	                if (m.messageIDs && m.messageIDs.length) {
	                    d.messageIDs = [];
	                    for (var j = 0; j < m.messageIDs.length; ++j) {
	                        d.messageIDs[j] = o.bytes === String ? $util.base64.encode(m.messageIDs[j], 0, m.messageIDs[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.messageIDs[j]) : m.messageIDs[j];
	                    }
	                }
	                return d;
	            };
	    
	            /**
	             * Converts this ControlIHave to JSON.
	             * @function toJSON
	             * @memberof RPC.ControlIHave
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            ControlIHave.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };
	    
	            return ControlIHave;
	        })();
	    
	        RPC.ControlIWant = (function() {
	    
	            /**
	             * Properties of a ControlIWant.
	             * @memberof RPC
	             * @interface IControlIWant
	             * @property {Array.<Uint8Array>|null} [messageIDs] ControlIWant messageIDs
	             */
	    
	            /**
	             * Constructs a new ControlIWant.
	             * @memberof RPC
	             * @classdesc Represents a ControlIWant.
	             * @implements IControlIWant
	             * @constructor
	             * @param {RPC.IControlIWant=} [p] Properties to set
	             */
	            function ControlIWant(p) {
	                this.messageIDs = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }
	    
	            /**
	             * ControlIWant messageIDs.
	             * @member {Array.<Uint8Array>} messageIDs
	             * @memberof RPC.ControlIWant
	             * @instance
	             */
	            ControlIWant.prototype.messageIDs = $util.emptyArray;
	    
	            /**
	             * Encodes the specified ControlIWant message. Does not implicitly {@link RPC.ControlIWant.verify|verify} messages.
	             * @function encode
	             * @memberof RPC.ControlIWant
	             * @static
	             * @param {RPC.IControlIWant} m ControlIWant message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            ControlIWant.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.messageIDs != null && m.messageIDs.length) {
	                    for (var i = 0; i < m.messageIDs.length; ++i)
	                        w.uint32(10).bytes(m.messageIDs[i]);
	                }
	                return w;
	            };
	    
	            /**
	             * Decodes a ControlIWant message from the specified reader or buffer.
	             * @function decode
	             * @memberof RPC.ControlIWant
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {RPC.ControlIWant} ControlIWant
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            ControlIWant.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.ControlIWant();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1:
	                        if (!(m.messageIDs && m.messageIDs.length))
	                            m.messageIDs = [];
	                        m.messageIDs.push(r.bytes());
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };
	    
	            /**
	             * Creates a ControlIWant message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof RPC.ControlIWant
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {RPC.ControlIWant} ControlIWant
	             */
	            ControlIWant.fromObject = function fromObject(d) {
	                if (d instanceof $root.RPC.ControlIWant)
	                    return d;
	                var m = new $root.RPC.ControlIWant();
	                if (d.messageIDs) {
	                    if (!Array.isArray(d.messageIDs))
	                        throw TypeError(".RPC.ControlIWant.messageIDs: array expected");
	                    m.messageIDs = [];
	                    for (var i = 0; i < d.messageIDs.length; ++i) {
	                        if (typeof d.messageIDs[i] === "string")
	                            $util.base64.decode(d.messageIDs[i], m.messageIDs[i] = $util.newBuffer($util.base64.length(d.messageIDs[i])), 0);
	                        else if (d.messageIDs[i].length)
	                            m.messageIDs[i] = d.messageIDs[i];
	                    }
	                }
	                return m;
	            };
	    
	            /**
	             * Creates a plain object from a ControlIWant message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof RPC.ControlIWant
	             * @static
	             * @param {RPC.ControlIWant} m ControlIWant
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            ControlIWant.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.messageIDs = [];
	                }
	                if (m.messageIDs && m.messageIDs.length) {
	                    d.messageIDs = [];
	                    for (var j = 0; j < m.messageIDs.length; ++j) {
	                        d.messageIDs[j] = o.bytes === String ? $util.base64.encode(m.messageIDs[j], 0, m.messageIDs[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.messageIDs[j]) : m.messageIDs[j];
	                    }
	                }
	                return d;
	            };
	    
	            /**
	             * Converts this ControlIWant to JSON.
	             * @function toJSON
	             * @memberof RPC.ControlIWant
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            ControlIWant.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };
	    
	            return ControlIWant;
	        })();
	    
	        RPC.ControlGraft = (function() {
	    
	            /**
	             * Properties of a ControlGraft.
	             * @memberof RPC
	             * @interface IControlGraft
	             * @property {string|null} [topicID] ControlGraft topicID
	             */
	    
	            /**
	             * Constructs a new ControlGraft.
	             * @memberof RPC
	             * @classdesc Represents a ControlGraft.
	             * @implements IControlGraft
	             * @constructor
	             * @param {RPC.IControlGraft=} [p] Properties to set
	             */
	            function ControlGraft(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }
	    
	            /**
	             * ControlGraft topicID.
	             * @member {string|null|undefined} topicID
	             * @memberof RPC.ControlGraft
	             * @instance
	             */
	            ControlGraft.prototype.topicID = null;
	    
	            // OneOf field names bound to virtual getters and setters
	            var $oneOfFields;
	    
	            /**
	             * ControlGraft _topicID.
	             * @member {"topicID"|undefined} _topicID
	             * @memberof RPC.ControlGraft
	             * @instance
	             */
	            Object.defineProperty(ControlGraft.prototype, "_topicID", {
	                get: $util.oneOfGetter($oneOfFields = ["topicID"]),
	                set: $util.oneOfSetter($oneOfFields)
	            });
	    
	            /**
	             * Encodes the specified ControlGraft message. Does not implicitly {@link RPC.ControlGraft.verify|verify} messages.
	             * @function encode
	             * @memberof RPC.ControlGraft
	             * @static
	             * @param {RPC.IControlGraft} m ControlGraft message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            ControlGraft.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.topicID != null && Object.hasOwnProperty.call(m, "topicID"))
	                    w.uint32(10).string(m.topicID);
	                return w;
	            };
	    
	            /**
	             * Decodes a ControlGraft message from the specified reader or buffer.
	             * @function decode
	             * @memberof RPC.ControlGraft
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {RPC.ControlGraft} ControlGraft
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            ControlGraft.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.ControlGraft();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1:
	                        m.topicID = r.string();
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };
	    
	            /**
	             * Creates a ControlGraft message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof RPC.ControlGraft
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {RPC.ControlGraft} ControlGraft
	             */
	            ControlGraft.fromObject = function fromObject(d) {
	                if (d instanceof $root.RPC.ControlGraft)
	                    return d;
	                var m = new $root.RPC.ControlGraft();
	                if (d.topicID != null) {
	                    m.topicID = String(d.topicID);
	                }
	                return m;
	            };
	    
	            /**
	             * Creates a plain object from a ControlGraft message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof RPC.ControlGraft
	             * @static
	             * @param {RPC.ControlGraft} m ControlGraft
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            ControlGraft.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (m.topicID != null && m.hasOwnProperty("topicID")) {
	                    d.topicID = m.topicID;
	                    if (o.oneofs)
	                        d._topicID = "topicID";
	                }
	                return d;
	            };
	    
	            /**
	             * Converts this ControlGraft to JSON.
	             * @function toJSON
	             * @memberof RPC.ControlGraft
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            ControlGraft.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };
	    
	            return ControlGraft;
	        })();
	    
	        RPC.ControlPrune = (function() {
	    
	            /**
	             * Properties of a ControlPrune.
	             * @memberof RPC
	             * @interface IControlPrune
	             * @property {string|null} [topicID] ControlPrune topicID
	             * @property {Array.<RPC.IPeerInfo>|null} [peers] ControlPrune peers
	             * @property {number|null} [backoff] ControlPrune backoff
	             */
	    
	            /**
	             * Constructs a new ControlPrune.
	             * @memberof RPC
	             * @classdesc Represents a ControlPrune.
	             * @implements IControlPrune
	             * @constructor
	             * @param {RPC.IControlPrune=} [p] Properties to set
	             */
	            function ControlPrune(p) {
	                this.peers = [];
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }
	    
	            /**
	             * ControlPrune topicID.
	             * @member {string|null|undefined} topicID
	             * @memberof RPC.ControlPrune
	             * @instance
	             */
	            ControlPrune.prototype.topicID = null;
	    
	            /**
	             * ControlPrune peers.
	             * @member {Array.<RPC.IPeerInfo>} peers
	             * @memberof RPC.ControlPrune
	             * @instance
	             */
	            ControlPrune.prototype.peers = $util.emptyArray;
	    
	            /**
	             * ControlPrune backoff.
	             * @member {number|null|undefined} backoff
	             * @memberof RPC.ControlPrune
	             * @instance
	             */
	            ControlPrune.prototype.backoff = null;
	    
	            // OneOf field names bound to virtual getters and setters
	            var $oneOfFields;
	    
	            /**
	             * ControlPrune _topicID.
	             * @member {"topicID"|undefined} _topicID
	             * @memberof RPC.ControlPrune
	             * @instance
	             */
	            Object.defineProperty(ControlPrune.prototype, "_topicID", {
	                get: $util.oneOfGetter($oneOfFields = ["topicID"]),
	                set: $util.oneOfSetter($oneOfFields)
	            });
	    
	            /**
	             * ControlPrune _backoff.
	             * @member {"backoff"|undefined} _backoff
	             * @memberof RPC.ControlPrune
	             * @instance
	             */
	            Object.defineProperty(ControlPrune.prototype, "_backoff", {
	                get: $util.oneOfGetter($oneOfFields = ["backoff"]),
	                set: $util.oneOfSetter($oneOfFields)
	            });
	    
	            /**
	             * Encodes the specified ControlPrune message. Does not implicitly {@link RPC.ControlPrune.verify|verify} messages.
	             * @function encode
	             * @memberof RPC.ControlPrune
	             * @static
	             * @param {RPC.IControlPrune} m ControlPrune message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            ControlPrune.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.topicID != null && Object.hasOwnProperty.call(m, "topicID"))
	                    w.uint32(10).string(m.topicID);
	                if (m.peers != null && m.peers.length) {
	                    for (var i = 0; i < m.peers.length; ++i)
	                        $root.RPC.PeerInfo.encode(m.peers[i], w.uint32(18).fork()).ldelim();
	                }
	                if (m.backoff != null && Object.hasOwnProperty.call(m, "backoff"))
	                    w.uint32(24).uint64(m.backoff);
	                return w;
	            };
	    
	            /**
	             * Decodes a ControlPrune message from the specified reader or buffer.
	             * @function decode
	             * @memberof RPC.ControlPrune
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {RPC.ControlPrune} ControlPrune
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            ControlPrune.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.ControlPrune();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1:
	                        m.topicID = r.string();
	                        break;
	                    case 2:
	                        if (!(m.peers && m.peers.length))
	                            m.peers = [];
	                        m.peers.push($root.RPC.PeerInfo.decode(r, r.uint32()));
	                        break;
	                    case 3:
	                        m.backoff = r.uint64();
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };
	    
	            /**
	             * Creates a ControlPrune message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof RPC.ControlPrune
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {RPC.ControlPrune} ControlPrune
	             */
	            ControlPrune.fromObject = function fromObject(d) {
	                if (d instanceof $root.RPC.ControlPrune)
	                    return d;
	                var m = new $root.RPC.ControlPrune();
	                if (d.topicID != null) {
	                    m.topicID = String(d.topicID);
	                }
	                if (d.peers) {
	                    if (!Array.isArray(d.peers))
	                        throw TypeError(".RPC.ControlPrune.peers: array expected");
	                    m.peers = [];
	                    for (var i = 0; i < d.peers.length; ++i) {
	                        if (typeof d.peers[i] !== "object")
	                            throw TypeError(".RPC.ControlPrune.peers: object expected");
	                        m.peers[i] = $root.RPC.PeerInfo.fromObject(d.peers[i]);
	                    }
	                }
	                if (d.backoff != null) {
	                    if ($util.Long)
	                        (m.backoff = $util.Long.fromValue(d.backoff)).unsigned = true;
	                    else if (typeof d.backoff === "string")
	                        m.backoff = parseInt(d.backoff, 10);
	                    else if (typeof d.backoff === "number")
	                        m.backoff = d.backoff;
	                    else if (typeof d.backoff === "object")
	                        m.backoff = new $util.LongBits(d.backoff.low >>> 0, d.backoff.high >>> 0).toNumber(true);
	                }
	                return m;
	            };
	    
	            /**
	             * Creates a plain object from a ControlPrune message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof RPC.ControlPrune
	             * @static
	             * @param {RPC.ControlPrune} m ControlPrune
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            ControlPrune.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (o.arrays || o.defaults) {
	                    d.peers = [];
	                }
	                if (m.topicID != null && m.hasOwnProperty("topicID")) {
	                    d.topicID = m.topicID;
	                    if (o.oneofs)
	                        d._topicID = "topicID";
	                }
	                if (m.peers && m.peers.length) {
	                    d.peers = [];
	                    for (var j = 0; j < m.peers.length; ++j) {
	                        d.peers[j] = $root.RPC.PeerInfo.toObject(m.peers[j], o);
	                    }
	                }
	                if (m.backoff != null && m.hasOwnProperty("backoff")) {
	                    if (typeof m.backoff === "number")
	                        d.backoff = o.longs === String ? String(m.backoff) : m.backoff;
	                    else
	                        d.backoff = o.longs === String ? $util.Long.prototype.toString.call(m.backoff) : o.longs === Number ? new $util.LongBits(m.backoff.low >>> 0, m.backoff.high >>> 0).toNumber(true) : m.backoff;
	                    if (o.oneofs)
	                        d._backoff = "backoff";
	                }
	                return d;
	            };
	    
	            /**
	             * Converts this ControlPrune to JSON.
	             * @function toJSON
	             * @memberof RPC.ControlPrune
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            ControlPrune.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };
	    
	            return ControlPrune;
	        })();
	    
	        RPC.PeerInfo = (function() {
	    
	            /**
	             * Properties of a PeerInfo.
	             * @memberof RPC
	             * @interface IPeerInfo
	             * @property {Uint8Array|null} [peerID] PeerInfo peerID
	             * @property {Uint8Array|null} [signedPeerRecord] PeerInfo signedPeerRecord
	             */
	    
	            /**
	             * Constructs a new PeerInfo.
	             * @memberof RPC
	             * @classdesc Represents a PeerInfo.
	             * @implements IPeerInfo
	             * @constructor
	             * @param {RPC.IPeerInfo=} [p] Properties to set
	             */
	            function PeerInfo(p) {
	                if (p)
	                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                        if (p[ks[i]] != null)
	                            this[ks[i]] = p[ks[i]];
	            }
	    
	            /**
	             * PeerInfo peerID.
	             * @member {Uint8Array|null|undefined} peerID
	             * @memberof RPC.PeerInfo
	             * @instance
	             */
	            PeerInfo.prototype.peerID = null;
	    
	            /**
	             * PeerInfo signedPeerRecord.
	             * @member {Uint8Array|null|undefined} signedPeerRecord
	             * @memberof RPC.PeerInfo
	             * @instance
	             */
	            PeerInfo.prototype.signedPeerRecord = null;
	    
	            // OneOf field names bound to virtual getters and setters
	            var $oneOfFields;
	    
	            /**
	             * PeerInfo _peerID.
	             * @member {"peerID"|undefined} _peerID
	             * @memberof RPC.PeerInfo
	             * @instance
	             */
	            Object.defineProperty(PeerInfo.prototype, "_peerID", {
	                get: $util.oneOfGetter($oneOfFields = ["peerID"]),
	                set: $util.oneOfSetter($oneOfFields)
	            });
	    
	            /**
	             * PeerInfo _signedPeerRecord.
	             * @member {"signedPeerRecord"|undefined} _signedPeerRecord
	             * @memberof RPC.PeerInfo
	             * @instance
	             */
	            Object.defineProperty(PeerInfo.prototype, "_signedPeerRecord", {
	                get: $util.oneOfGetter($oneOfFields = ["signedPeerRecord"]),
	                set: $util.oneOfSetter($oneOfFields)
	            });
	    
	            /**
	             * Encodes the specified PeerInfo message. Does not implicitly {@link RPC.PeerInfo.verify|verify} messages.
	             * @function encode
	             * @memberof RPC.PeerInfo
	             * @static
	             * @param {RPC.IPeerInfo} m PeerInfo message or plain object to encode
	             * @param {$protobuf.Writer} [w] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            PeerInfo.encode = function encode(m, w) {
	                if (!w)
	                    w = $Writer.create();
	                if (m.peerID != null && Object.hasOwnProperty.call(m, "peerID"))
	                    w.uint32(10).bytes(m.peerID);
	                if (m.signedPeerRecord != null && Object.hasOwnProperty.call(m, "signedPeerRecord"))
	                    w.uint32(18).bytes(m.signedPeerRecord);
	                return w;
	            };
	    
	            /**
	             * Decodes a PeerInfo message from the specified reader or buffer.
	             * @function decode
	             * @memberof RPC.PeerInfo
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	             * @param {number} [l] Message length if known beforehand
	             * @returns {RPC.PeerInfo} PeerInfo
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            PeerInfo.decode = function decode(r, l) {
	                if (!(r instanceof $Reader))
	                    r = $Reader.create(r);
	                var c = l === undefined ? r.len : r.pos + l, m = new $root.RPC.PeerInfo();
	                while (r.pos < c) {
	                    var t = r.uint32();
	                    switch (t >>> 3) {
	                    case 1:
	                        m.peerID = r.bytes();
	                        break;
	                    case 2:
	                        m.signedPeerRecord = r.bytes();
	                        break;
	                    default:
	                        r.skipType(t & 7);
	                        break;
	                    }
	                }
	                return m;
	            };
	    
	            /**
	             * Creates a PeerInfo message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof RPC.PeerInfo
	             * @static
	             * @param {Object.<string,*>} d Plain object
	             * @returns {RPC.PeerInfo} PeerInfo
	             */
	            PeerInfo.fromObject = function fromObject(d) {
	                if (d instanceof $root.RPC.PeerInfo)
	                    return d;
	                var m = new $root.RPC.PeerInfo();
	                if (d.peerID != null) {
	                    if (typeof d.peerID === "string")
	                        $util.base64.decode(d.peerID, m.peerID = $util.newBuffer($util.base64.length(d.peerID)), 0);
	                    else if (d.peerID.length)
	                        m.peerID = d.peerID;
	                }
	                if (d.signedPeerRecord != null) {
	                    if (typeof d.signedPeerRecord === "string")
	                        $util.base64.decode(d.signedPeerRecord, m.signedPeerRecord = $util.newBuffer($util.base64.length(d.signedPeerRecord)), 0);
	                    else if (d.signedPeerRecord.length)
	                        m.signedPeerRecord = d.signedPeerRecord;
	                }
	                return m;
	            };
	    
	            /**
	             * Creates a plain object from a PeerInfo message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof RPC.PeerInfo
	             * @static
	             * @param {RPC.PeerInfo} m PeerInfo
	             * @param {$protobuf.IConversionOptions} [o] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            PeerInfo.toObject = function toObject(m, o) {
	                if (!o)
	                    o = {};
	                var d = {};
	                if (m.peerID != null && m.hasOwnProperty("peerID")) {
	                    d.peerID = o.bytes === String ? $util.base64.encode(m.peerID, 0, m.peerID.length) : o.bytes === Array ? Array.prototype.slice.call(m.peerID) : m.peerID;
	                    if (o.oneofs)
	                        d._peerID = "peerID";
	                }
	                if (m.signedPeerRecord != null && m.hasOwnProperty("signedPeerRecord")) {
	                    d.signedPeerRecord = o.bytes === String ? $util.base64.encode(m.signedPeerRecord, 0, m.signedPeerRecord.length) : o.bytes === Array ? Array.prototype.slice.call(m.signedPeerRecord) : m.signedPeerRecord;
	                    if (o.oneofs)
	                        d._signedPeerRecord = "signedPeerRecord";
	                }
	                return d;
	            };
	    
	            /**
	             * Converts this PeerInfo to JSON.
	             * @function toJSON
	             * @memberof RPC.PeerInfo
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            PeerInfo.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };
	    
	            return PeerInfo;
	        })();
	    
	        return RPC;
	    })();

	    return $root;
	});
	}(rpc$1));

	var heartbeat = {};

	var getGossipPeers$1 = {};

	Object.defineProperty(getGossipPeers$1, "__esModule", { value: true });
	getGossipPeers$1.getGossipPeers = void 0;
	const utils_1$9 = utils$r;
	/**
	 * Given a topic, returns up to count peers subscribed to that topic
	 * that pass an optional filter function
	 *
	 * @param {Gossipsub} router
	 * @param {String} topic
	 * @param {Number} count
	 * @param {Function} [filter] a function to filter acceptable peers
	 * @returns {Set<string>}
	 *
	 */
	function getGossipPeers(router, topic, count, filter = () => true) {
	    const peersInTopic = router.topics.get(topic);
	    if (!peersInTopic) {
	        return new Set();
	    }
	    // Adds all peers using our protocol
	    // that also pass the filter function
	    let peers = [];
	    peersInTopic.forEach((id) => {
	        const peerStreams = router.peers.get(id);
	        if (!peerStreams) {
	            return;
	        }
	        if (utils_1$9.hasGossipProtocol(peerStreams.protocol) &&
	            filter(id)) {
	            peers.push(id);
	        }
	    });
	    // Pseudo-randomly shuffles peers
	    peers = utils_1$9.shuffle(peers);
	    if (count > 0 && peers.length > count) {
	        peers = peers.slice(0, count);
	    }
	    return new Set(peers);
	}
	getGossipPeers$1.getGossipPeers = getGossipPeers;

	var __createBinding$7 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$7 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$7 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$7(result, mod, k);
	    __setModuleDefault$7(result, mod);
	    return result;
	};
	Object.defineProperty(heartbeat, "__esModule", { value: true });
	heartbeat.Heartbeat = void 0;
	const constants$e = __importStar$7(constants$f);
	const get_gossip_peers_1$1 = getGossipPeers$1;
	const utils_1$8 = utils$r;
	// eslint-disable-next-line @typescript-eslint/ban-ts-comment
	class Heartbeat {
	    /**
	     * @param {Object} gossipsub
	     * @constructor
	     */
	    constructor(gossipsub) {
	        this.gossipsub = gossipsub;
	    }
	    start() {
	        if (this._heartbeatTimer) {
	            return;
	        }
	        const heartbeat = this._heartbeat.bind(this);
	        const timeout = setTimeout(() => {
	            heartbeat();
	            this._heartbeatTimer.runPeriodically(heartbeat, this.gossipsub._options.heartbeatInterval);
	        }, constants$e.GossipsubHeartbeatInitialDelay);
	        this._heartbeatTimer = {
	            _intervalId: undefined,
	            runPeriodically: (fn, period) => {
	                this._heartbeatTimer._intervalId = setInterval(fn, period);
	            },
	            cancel: () => {
	                clearTimeout(timeout);
	                clearInterval(this._heartbeatTimer._intervalId);
	            }
	        };
	    }
	    /**
	     * Unmounts the gossipsub protocol and shuts down every connection
	     * @override
	     * @returns {void}
	     */
	    stop() {
	        if (!this._heartbeatTimer) {
	            return;
	        }
	        this._heartbeatTimer.cancel();
	        this._heartbeatTimer = null;
	    }
	    /**
	     * Maintains the mesh and fanout maps in gossipsub.
	     *
	     * @returns {void}
	     */
	    _heartbeat() {
	        const { D, Dlo, Dhi, Dscore, Dout, fanoutTTL } = this.gossipsub._options;
	        this.gossipsub.heartbeatTicks++;
	        // cache scores throught the heartbeat
	        const scores = new Map();
	        const getScore = (id) => {
	            let s = scores.get(id);
	            if (s === undefined) {
	                s = this.gossipsub.score.score(id);
	                scores.set(id, s);
	            }
	            return s;
	        };
	        // peer id => topic[]
	        const tograft = new Map();
	        // peer id => topic[]
	        const toprune = new Map();
	        // peer id => don't px
	        const noPX = new Map();
	        // clean up expired backoffs
	        this.gossipsub._clearBackoff();
	        // clean up peerhave/iasked counters
	        this.gossipsub.peerhave.clear();
	        this.gossipsub.iasked.clear();
	        // apply IWANT request penalties
	        this.gossipsub._applyIwantPenalties();
	        // ensure direct peers are connected
	        this.gossipsub._directConnect();
	        // maintain the mesh for topics we have joined
	        this.gossipsub.mesh.forEach((peers, topic) => {
	            // prune/graft helper functions (defined per topic)
	            const prunePeer = (id) => {
	                this.gossipsub.log('HEARTBEAT: Remove mesh link to %s in %s', id, topic);
	                // update peer score
	                this.gossipsub.score.prune(id, topic);
	                // add prune backoff record
	                this.gossipsub._addBackoff(id, topic);
	                // remove peer from mesh
	                peers.delete(id);
	                // add to toprune
	                const topics = toprune.get(id);
	                if (!topics) {
	                    toprune.set(id, [topic]);
	                }
	                else {
	                    topics.push(topic);
	                }
	            };
	            const graftPeer = (id) => {
	                this.gossipsub.log('HEARTBEAT: Add mesh link to %s in %s', id, topic);
	                // update peer score
	                this.gossipsub.score.graft(id, topic);
	                // add peer to mesh
	                peers.add(id);
	                // add to tograft
	                const topics = tograft.get(id);
	                if (!topics) {
	                    tograft.set(id, [topic]);
	                }
	                else {
	                    topics.push(topic);
	                }
	            };
	            // drop all peers with negative score, without PX
	            peers.forEach(id => {
	                const score = getScore(id);
	                if (score < 0) {
	                    this.gossipsub.log('HEARTBEAT: Prune peer %s with negative score: score=%d, topic=%s', id, score, topic);
	                    prunePeer(id);
	                    noPX.set(id, true);
	                }
	            });
	            // do we have enough peers?
	            if (peers.size < Dlo) {
	                const backoff = this.gossipsub.backoff.get(topic);
	                const ineed = D - peers.size;
	                const peersSet = get_gossip_peers_1$1.getGossipPeers(this.gossipsub, topic, ineed, id => {
	                    // filter out mesh peers, direct peers, peers we are backing off, peers with negative score
	                    return !peers.has(id) && !this.gossipsub.direct.has(id) && (!backoff || !backoff.has(id)) && getScore(id) >= 0;
	                });
	                peersSet.forEach(graftPeer);
	            }
	            // do we have to many peers?
	            if (peers.size > Dhi) {
	                let peersArray = Array.from(peers);
	                // sort by score
	                peersArray.sort((a, b) => getScore(b) - getScore(a));
	                // We keep the first D_score peers by score and the remaining up to D randomly
	                // under the constraint that we keep D_out peers in the mesh (if we have that many)
	                peersArray = peersArray.slice(0, Dscore).concat(utils_1$8.shuffle(peersArray.slice(Dscore)));
	                // count the outbound peers we are keeping
	                let outbound = 0;
	                peersArray.slice(0, D).forEach(p => {
	                    if (this.gossipsub.outbound.get(p)) {
	                        outbound++;
	                    }
	                });
	                // if it's less than D_out, bubble up some outbound peers from the random selection
	                if (outbound < Dout) {
	                    const rotate = (i) => {
	                        // rotate the peersArray to the right and put the ith peer in the front
	                        const p = peersArray[i];
	                        for (let j = i; j > 0; j--) {
	                            peersArray[j] = peersArray[j - 1];
	                        }
	                        peersArray[0] = p;
	                    };
	                    // first bubble up all outbound peers already in the selection to the front
	                    if (outbound > 0) {
	                        let ihave = outbound;
	                        for (let i = 1; i < D && ihave > 0; i++) {
	                            if (this.gossipsub.outbound.get(peersArray[i])) {
	                                rotate(i);
	                                ihave--;
	                            }
	                        }
	                    }
	                    // now bubble up enough outbound peers outside the selection to the front
	                    let ineed = D - outbound;
	                    for (let i = D; i < peersArray.length && ineed > 0; i++) {
	                        if (this.gossipsub.outbound.get(peersArray[i])) {
	                            rotate(i);
	                            ineed--;
	                        }
	                    }
	                }
	                // prune the excess peers
	                peersArray.slice(D).forEach(prunePeer);
	            }
	            // do we have enough outbound peers?
	            if (peers.size >= Dlo) {
	                // count the outbound peers we have
	                let outbound = 0;
	                peers.forEach(p => {
	                    if (this.gossipsub.outbound.get(p)) {
	                        outbound++;
	                    }
	                });
	                // if it's less than D_out, select some peers with outbound connections and graft them
	                if (outbound < Dout) {
	                    const ineed = Dout - outbound;
	                    const backoff = this.gossipsub.backoff.get(topic);
	                    get_gossip_peers_1$1.getGossipPeers(this.gossipsub, topic, ineed, (id) => {
	                        // filter our current mesh peers, direct peers, peers we are backing off, peers with negative score
	                        return !peers.has(id) && !this.gossipsub.direct.has(id) && (!backoff || !backoff.has(id)) && getScore(id) >= 0;
	                    }).forEach(graftPeer);
	                }
	            }
	            // should we try to improve the mesh with opportunistic grafting?
	            if (this.gossipsub.heartbeatTicks % constants$e.GossipsubOpportunisticGraftTicks === 0 && peers.size > 1) {
	                // Opportunistic grafting works as follows: we check the median score of peers in the
	                // mesh; if this score is below the opportunisticGraftThreshold, we select a few peers at
	                // random with score over the median.
	                // The intention is to (slowly) improve an underperforming mesh by introducing good
	                // scoring peers that may have been gossiping at us. This allows us to get out of sticky
	                // situations where we are stuck with poor peers and also recover from churn of good peers.
	                // now compute the median peer score in the mesh
	                const peersList = Array.from(peers)
	                    .sort((a, b) => getScore(a) - getScore(b));
	                const medianIndex = Math.floor(peers.size / 2);
	                const medianScore = getScore(peersList[medianIndex]);
	                // if the median score is below the threshold, select a better peer (if any) and GRAFT
	                if (medianScore < this.gossipsub._options.scoreThresholds.opportunisticGraftThreshold) {
	                    const backoff = this.gossipsub.backoff.get(topic);
	                    const peersToGraft = get_gossip_peers_1$1.getGossipPeers(this.gossipsub, topic, constants$e.GossipsubOpportunisticGraftPeers, (id) => {
	                        // filter out current mesh peers, direct peers, peers we are backing off, peers below or at threshold
	                        return peers.has(id) && !this.gossipsub.direct.has(id) && (!backoff || !backoff.has(id)) && getScore(id) > medianScore;
	                    });
	                    peersToGraft.forEach(id => {
	                        this.gossipsub.log('HEARTBEAT: Opportunistically graft peer %s on topic %s', id, topic);
	                        graftPeer(id);
	                    });
	                }
	            }
	            // 2nd arg are mesh peers excluded from gossip. We have already pushed
	            // messages to them, so its redundant to gossip IHAVEs.
	            this.gossipsub._emitGossip(topic, peers);
	        });
	        // expire fanout for topics we haven't published to in a while
	        const now = this.gossipsub._now();
	        this.gossipsub.lastpub.forEach((lastpb, topic) => {
	            if ((lastpb + fanoutTTL) < now) {
	                this.gossipsub.fanout.delete(topic);
	                this.gossipsub.lastpub.delete(topic);
	            }
	        });
	        // maintain our fanout for topics we are publishing but we have not joined
	        this.gossipsub.fanout.forEach((fanoutPeers, topic) => {
	            // checks whether our peers are still in the topic and have a score above the publish threshold
	            const topicPeers = this.gossipsub.topics.get(topic);
	            fanoutPeers.forEach(id => {
	                if (!topicPeers.has(id) ||
	                    getScore(id) < this.gossipsub._options.scoreThresholds.publishThreshold) {
	                    fanoutPeers.delete(id);
	                }
	            });
	            // do we need more peers?
	            if (fanoutPeers.size < D) {
	                const ineed = D - fanoutPeers.size;
	                const peersSet = get_gossip_peers_1$1.getGossipPeers(this.gossipsub, topic, ineed, (id) => {
	                    // filter out existing fanout peers, direct peers, and peers with score above the publish threshold
	                    return !fanoutPeers.has(id) &&
	                        !this.gossipsub.direct.has(id) &&
	                        getScore(id) >= this.gossipsub._options.scoreThresholds.publishThreshold;
	                });
	                peersSet.forEach(id => {
	                    fanoutPeers.add(id);
	                });
	            }
	            // 2nd arg are fanout peers excluded from gossip.
	            // We have already pushed messages to them, so its redundant to gossip IHAVEs
	            this.gossipsub._emitGossip(topic, fanoutPeers);
	        });
	        // send coalesced GRAFT/PRUNE messages (will piggyback gossip)
	        this.gossipsub._sendGraftPrune(tograft, toprune, noPX);
	        // flush pending gossip that wasn't piggybacked above
	        this.gossipsub._flush();
	        // advance the message history window
	        this.gossipsub.messageCache.shift();
	        this.gossipsub.emit('gossipsub:heartbeat');
	    }
	}
	heartbeat.Heartbeat = Heartbeat;

	var score = {};

	var peerScoreParams = {};

	var constants$d = {};

	Object.defineProperty(constants$d, "__esModule", { value: true });
	constants$d.ERR_INVALID_PEER_SCORE_THRESHOLDS = constants$d.ERR_INVALID_PEER_SCORE_PARAMS = void 0;
	constants$d.ERR_INVALID_PEER_SCORE_PARAMS = 'ERR_INVALID_PEER_SCORE_PARAMS';
	constants$d.ERR_INVALID_PEER_SCORE_THRESHOLDS = 'ERR_INVALID_PEER_SCORE_THRESHOLDS';

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.validateTopicScoreParams = exports.validatePeerScoreParams = exports.createTopicScoreParams = exports.createPeerScoreParams = exports.defaultTopicScoreParams = exports.defaultPeerScoreParams = void 0;
	const constants_1 = constants$d;
	// eslint-disable-next-line @typescript-eslint/ban-ts-comment
	// @ts-ignore
	const errcode = errCode$q;
	exports.defaultPeerScoreParams = {
	    topics: {},
	    topicScoreCap: 10,
	    appSpecificScore: () => 0,
	    appSpecificWeight: 10,
	    IPColocationFactorWeight: -5,
	    IPColocationFactorThreshold: 10,
	    IPColocationFactorWhitelist: new Set(),
	    behaviourPenaltyWeight: -10,
	    behaviourPenaltyDecay: 0.2,
	    decayInterval: 1000,
	    decayToZero: 0.1,
	    retainScore: 3600 * 1000
	};
	exports.defaultTopicScoreParams = {
	    topicWeight: 0.5,
	    timeInMeshWeight: 1,
	    timeInMeshQuantum: 1,
	    timeInMeshCap: 3600,
	    firstMessageDeliveriesWeight: 1,
	    firstMessageDeliveriesDecay: 0.5,
	    firstMessageDeliveriesCap: 2000,
	    meshMessageDeliveriesWeight: -1,
	    meshMessageDeliveriesDecay: 0.5,
	    meshMessageDeliveriesCap: 100,
	    meshMessageDeliveriesThreshold: 20,
	    meshMessageDeliveriesWindow: 10,
	    meshMessageDeliveriesActivation: 5000,
	    meshFailurePenaltyWeight: -1,
	    meshFailurePenaltyDecay: 0.5,
	    invalidMessageDeliveriesWeight: -1,
	    invalidMessageDeliveriesDecay: 0.3
	};
	function createPeerScoreParams(p = {}) {
	    return Object.assign(Object.assign(Object.assign({}, exports.defaultPeerScoreParams), p), { topics: p.topics
	            ? Object.entries(p.topics)
	                .reduce((topics, [topic, topicScoreParams]) => {
	                topics[topic] = createTopicScoreParams(topicScoreParams);
	                return topics;
	            }, {})
	            : {} });
	}
	exports.createPeerScoreParams = createPeerScoreParams;
	function createTopicScoreParams(p = {}) {
	    return Object.assign(Object.assign({}, exports.defaultTopicScoreParams), p);
	}
	exports.createTopicScoreParams = createTopicScoreParams;
	// peer score parameter validation
	function validatePeerScoreParams(p) {
	    for (const [topic, params] of Object.entries(p.topics)) {
	        try {
	            validateTopicScoreParams(params);
	        }
	        catch (e) {
	            throw errcode(new Error(`invalid score parameters for topic ${topic}: ${e.message}`), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);
	        }
	    }
	    // check that the topic score is 0 or something positive
	    if (p.topicScoreCap < 0) {
	        throw errcode(new Error('invalid topic score cap; must be positive (or 0 for no cap)'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);
	    }
	    // check that we have an app specific score; the weight can be anything (but expected positive)
	    if (p.appSpecificScore === null || p.appSpecificScore === undefined) {
	        throw errcode(new Error('missing application specific score function'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);
	    }
	    // check the IP colocation factor
	    if (p.IPColocationFactorWeight > 0) {
	        throw errcode(new Error('invalid IPColocationFactorWeight; must be negative (or 0 to disable)'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);
	    }
	    if (p.IPColocationFactorWeight !== 0 && p.IPColocationFactorThreshold < 1) {
	        throw errcode(new Error('invalid IPColocationFactorThreshold; must be at least 1'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);
	    }
	    // check the behaviour penalty
	    if (p.behaviourPenaltyWeight > 0) {
	        throw errcode(new Error('invalid BehaviourPenaltyWeight; must be negative (or 0 to disable)'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);
	    }
	    if (p.behaviourPenaltyWeight !== 0 && (p.behaviourPenaltyDecay <= 0 || p.behaviourPenaltyDecay >= 1)) {
	        throw errcode(new Error('invalid BehaviourPenaltyDecay; must be between 0 and 1'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);
	    }
	    // check the decay parameters
	    if (p.decayInterval < 1000) {
	        throw errcode(new Error('invalid DecayInterval; must be at least 1s'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);
	    }
	    if (p.decayToZero <= 0 || p.decayToZero >= 1) {
	        throw errcode(new Error('invalid DecayToZero; must be between 0 and 1'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);
	    }
	    // no need to check the score retention; a value of 0 means that we don't retain scores
	}
	exports.validatePeerScoreParams = validatePeerScoreParams;
	function validateTopicScoreParams(p) {
	    // make sure we have a sane topic weight
	    if (p.topicWeight < 0) {
	        throw errcode(new Error('invalid topic weight; must be >= 0'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);
	    }
	    // check P1
	    if (p.timeInMeshQuantum === 0) {
	        throw errcode(new Error('invalid TimeInMeshQuantum; must be non zero'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);
	    }
	    if (p.timeInMeshWeight < 0) {
	        throw errcode(new Error('invalid TimeInMeshWeight; must be positive (or 0 to disable)'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);
	    }
	    if (p.timeInMeshWeight !== 0 && p.timeInMeshQuantum <= 0) {
	        throw errcode(new Error('invalid TimeInMeshQuantum; must be positive'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);
	    }
	    if (p.timeInMeshWeight !== 0 && p.timeInMeshCap <= 0) {
	        throw errcode(new Error('invalid TimeInMeshCap; must be positive'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);
	    }
	    // check P2
	    if (p.firstMessageDeliveriesWeight < 0) {
	        throw errcode(new Error('invallid FirstMessageDeliveriesWeight; must be positive (or 0 to disable)'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);
	    }
	    if (p.firstMessageDeliveriesWeight !== 0 && (p.firstMessageDeliveriesDecay <= 0 || p.firstMessageDeliveriesDecay >= 1)) {
	        throw errcode(new Error('invalid FirstMessageDeliveriesDecay; must be between 0 and 1'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);
	    }
	    if (p.firstMessageDeliveriesWeight !== 0 && p.firstMessageDeliveriesCap <= 0) {
	        throw errcode(new Error('invalid FirstMessageDeliveriesCap; must be positive'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);
	    }
	    // check P3
	    if (p.meshMessageDeliveriesWeight > 0) {
	        throw errcode(new Error('invalid MeshMessageDeliveriesWeight; must be negative (or 0 to disable)'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);
	    }
	    if (p.meshMessageDeliveriesWeight !== 0 && (p.meshMessageDeliveriesDecay <= 0 || p.meshMessageDeliveriesDecay >= 1)) {
	        throw errcode(new Error('invalid MeshMessageDeliveriesDecay; must be between 0 and 1'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);
	    }
	    if (p.meshMessageDeliveriesWeight !== 0 && p.meshMessageDeliveriesCap <= 0) {
	        throw errcode(new Error('invalid MeshMessageDeliveriesCap; must be positive'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);
	    }
	    if (p.meshMessageDeliveriesWeight !== 0 && p.meshMessageDeliveriesThreshold <= 0) {
	        throw errcode(new Error('invalid MeshMessageDeliveriesThreshold; must be positive'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);
	    }
	    if (p.meshMessageDeliveriesWindow < 0) {
	        throw errcode(new Error('invalid MeshMessageDeliveriesWindow; must be non-negative'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);
	    }
	    if (p.meshMessageDeliveriesWeight !== 0 && p.meshMessageDeliveriesActivation < 1000) {
	        throw errcode(new Error('invalid MeshMessageDeliveriesActivation; must be at least 1s'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);
	    }
	    // check P3b
	    if (p.meshFailurePenaltyWeight > 0) {
	        throw errcode(new Error('invalid MeshFailurePenaltyWeight; must be negative (or 0 to disable)'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);
	    }
	    if (p.meshFailurePenaltyWeight !== 0 && (p.meshFailurePenaltyDecay <= 0 || p.meshFailurePenaltyDecay >= 1)) {
	        throw errcode(new Error('invalid MeshFailurePenaltyDecay; must be between 0 and 1'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);
	    }
	    // check P4
	    if (p.invalidMessageDeliveriesWeight > 0) {
	        throw errcode(new Error('invalid InvalidMessageDeliveriesWeight; must be negative (or 0 to disable)'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);
	    }
	    if (p.invalidMessageDeliveriesDecay <= 0 || p.invalidMessageDeliveriesDecay >= 1) {
	        throw errcode(new Error('invalid InvalidMessageDeliveriesDecay; must be between 0 and 1'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);
	    }
	}
	exports.validateTopicScoreParams = validateTopicScoreParams;
	}(peerScoreParams));

	var peerScoreThresholds = {};

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.validatePeerScoreThresholds = exports.createPeerScoreThresholds = exports.defaultPeerScoreThresholds = void 0;
	const constants_1 = constants$d;
	// eslint-disable-next-line @typescript-eslint/ban-ts-comment
	// @ts-ignore
	const errcode = errCode$q;
	exports.defaultPeerScoreThresholds = {
	    gossipThreshold: -10,
	    publishThreshold: -50,
	    graylistThreshold: -80,
	    acceptPXThreshold: 10,
	    opportunisticGraftThreshold: 20
	};
	function createPeerScoreThresholds(p = {}) {
	    return Object.assign(Object.assign({}, exports.defaultPeerScoreThresholds), p);
	}
	exports.createPeerScoreThresholds = createPeerScoreThresholds;
	function validatePeerScoreThresholds(p) {
	    if (p.gossipThreshold > 0) {
	        throw errcode(new Error('invalid gossip threshold; it must be <= 0'), constants_1.ERR_INVALID_PEER_SCORE_THRESHOLDS);
	    }
	    if (p.publishThreshold > 0 || p.publishThreshold > p.gossipThreshold) {
	        throw errcode(new Error('invalid publish threshold; it must be <= 0 and <= gossip threshold'), constants_1.ERR_INVALID_PEER_SCORE_THRESHOLDS);
	    }
	    if (p.graylistThreshold > 0 || p.graylistThreshold > p.publishThreshold) {
	        throw errcode(new Error('invalid graylist threshold; it must be <= 0 and <= publish threshold'), constants_1.ERR_INVALID_PEER_SCORE_THRESHOLDS);
	    }
	    if (p.acceptPXThreshold < 0) {
	        throw errcode(new Error('invalid accept PX threshold; it must be >= 0'), constants_1.ERR_INVALID_PEER_SCORE_THRESHOLDS);
	    }
	    if (p.opportunisticGraftThreshold < 0) {
	        throw errcode(new Error('invalid opportunistic grafting threshold; it must be >= 0'), constants_1.ERR_INVALID_PEER_SCORE_THRESHOLDS);
	    }
	}
	exports.validatePeerScoreThresholds = validatePeerScoreThresholds;
	}(peerScoreThresholds));

	var peerScore = {};

	var peerStats = {};

	Object.defineProperty(peerStats, "__esModule", { value: true });
	peerStats.ensureTopicStats = peerStats.createTopicStats = peerStats.createPeerStats = void 0;
	function createPeerStats(ps = {}) {
	    return Object.assign(Object.assign({ connected: false, expire: 0, ips: [], behaviourPenalty: 0 }, ps), { topics: ps.topics
	            ? Object.entries(ps.topics)
	                .reduce((topics, [topic, topicStats]) => {
	                topics[topic] = createTopicStats(topicStats);
	                return topics;
	            }, {})
	            : {} });
	}
	peerStats.createPeerStats = createPeerStats;
	function createTopicStats(ts = {}) {
	    return Object.assign({ inMesh: false, graftTime: 0, meshTime: 0, firstMessageDeliveries: 0, meshMessageDeliveries: 0, meshMessageDeliveriesActive: false, meshFailurePenalty: 0, invalidMessageDeliveries: 0 }, ts);
	}
	peerStats.createTopicStats = createTopicStats;
	function ensureTopicStats(topic, ps, params) {
	    let ts = ps.topics[topic];
	    if (ts) {
	        return ts;
	    }
	    if (!params.topics[topic]) {
	        return undefined;
	    }
	    ps.topics[topic] = ts = createTopicStats();
	    return ts;
	}
	peerStats.ensureTopicStats = ensureTopicStats;

	var computeScore$1 = {};

	Object.defineProperty(computeScore$1, "__esModule", { value: true });
	computeScore$1.computeScore = void 0;
	function computeScore(peer, pstats, params, peerIPs) {
	    let score = 0;
	    // topic stores
	    Object.entries(pstats.topics).forEach(([topic, tstats]) => {
	        // the topic parameters
	        const topicParams = params.topics[topic];
	        if (!topicParams) {
	            // we are not scoring this topic
	            return;
	        }
	        let topicScore = 0;
	        // P1: time in Mesh
	        if (tstats.inMesh) {
	            let p1 = tstats.meshTime / topicParams.timeInMeshQuantum;
	            if (p1 > topicParams.timeInMeshCap) {
	                p1 = topicParams.timeInMeshCap;
	            }
	            topicScore += p1 * topicParams.timeInMeshWeight;
	        }
	        // P2: first message deliveries
	        const p2 = tstats.firstMessageDeliveries;
	        topicScore += p2 * topicParams.firstMessageDeliveriesWeight;
	        // P3: mesh message deliveries
	        if (tstats.meshMessageDeliveriesActive) {
	            if (tstats.meshMessageDeliveries < topicParams.meshMessageDeliveriesThreshold) {
	                const deficit = topicParams.meshMessageDeliveriesThreshold - tstats.meshMessageDeliveries;
	                const p3 = deficit * deficit;
	                topicScore += p3 * topicParams.meshMessageDeliveriesWeight;
	            }
	        }
	        // P3b:
	        // NOTE: the weight of P3b is negative (validated in validateTopicScoreParams) so this detracts
	        const p3b = tstats.meshFailurePenalty;
	        topicScore += p3b * topicParams.meshFailurePenaltyWeight;
	        // P4: invalid messages
	        // NOTE: the weight of P4 is negative (validated in validateTopicScoreParams) so this detracts
	        const p4 = tstats.invalidMessageDeliveries * tstats.invalidMessageDeliveries;
	        topicScore += p4 * topicParams.invalidMessageDeliveriesWeight;
	        // update score, mixing with topic weight
	        score += topicScore * topicParams.topicWeight;
	    });
	    // apply the topic score cap, if any
	    if (params.topicScoreCap > 0 && score > params.topicScoreCap) {
	        score = params.topicScoreCap;
	    }
	    // P5: application-specific score
	    const p5 = params.appSpecificScore(peer);
	    score += p5 * params.appSpecificWeight;
	    // P6: IP colocation factor
	    pstats.ips.forEach(ip => {
	        if (params.IPColocationFactorWhitelist.has(ip)) {
	            return;
	        }
	        // P6 has a cliff (IPColocationFactorThreshold)
	        // It's only applied if at least that many peers are connected to us from that source IP addr.
	        // It is quadratic, and the weight is negative (validated in validatePeerScoreParams)
	        const peersInIP = peerIPs.get(ip);
	        const numPeersInIP = peersInIP ? peersInIP.size : 0;
	        if (numPeersInIP > params.IPColocationFactorThreshold) {
	            const surplus = numPeersInIP - params.IPColocationFactorThreshold;
	            const p6 = surplus * surplus;
	            score += p6 * params.IPColocationFactorWeight;
	        }
	    });
	    // P7: behavioural pattern penalty
	    const p7 = pstats.behaviourPenalty * pstats.behaviourPenalty;
	    score += p7 * params.behaviourPenaltyWeight;
	    return score;
	}
	computeScore$1.computeScore = computeScore;

	var messageDeliveries = {};

	/**
	 * Custom implementation of a double ended queue.
	 */
	function Denque(array, options) {
	  var options = options || {};

	  this._head = 0;
	  this._tail = 0;
	  this._capacity = options.capacity;
	  this._capacityMask = 0x3;
	  this._list = new Array(4);
	  if (Array.isArray(array)) {
	    this._fromArray(array);
	  }
	}

	/**
	 * -------------
	 *  PUBLIC API
	 * -------------
	 */

	/**
	 * Returns the item at the specified index from the list.
	 * 0 is the first element, 1 is the second, and so on...
	 * Elements at negative values are that many from the end: -1 is one before the end
	 * (the last element), -2 is two before the end (one before last), etc.
	 * @param index
	 * @returns {*}
	 */
	Denque.prototype.peekAt = function peekAt(index) {
	  var i = index;
	  // expect a number or return undefined
	  if ((i !== (i | 0))) {
	    return void 0;
	  }
	  var len = this.size();
	  if (i >= len || i < -len) return undefined;
	  if (i < 0) i += len;
	  i = (this._head + i) & this._capacityMask;
	  return this._list[i];
	};

	/**
	 * Alias for peekAt()
	 * @param i
	 * @returns {*}
	 */
	Denque.prototype.get = function get(i) {
	  return this.peekAt(i);
	};

	/**
	 * Returns the first item in the list without removing it.
	 * @returns {*}
	 */
	Denque.prototype.peek = function peek() {
	  if (this._head === this._tail) return undefined;
	  return this._list[this._head];
	};

	/**
	 * Alias for peek()
	 * @returns {*}
	 */
	Denque.prototype.peekFront = function peekFront() {
	  return this.peek();
	};

	/**
	 * Returns the item that is at the back of the queue without removing it.
	 * Uses peekAt(-1)
	 */
	Denque.prototype.peekBack = function peekBack() {
	  return this.peekAt(-1);
	};

	/**
	 * Returns the current length of the queue
	 * @return {Number}
	 */
	Object.defineProperty(Denque.prototype, 'length', {
	  get: function length() {
	    return this.size();
	  }
	});

	/**
	 * Return the number of items on the list, or 0 if empty.
	 * @returns {number}
	 */
	Denque.prototype.size = function size() {
	  if (this._head === this._tail) return 0;
	  if (this._head < this._tail) return this._tail - this._head;
	  else return this._capacityMask + 1 - (this._head - this._tail);
	};

	/**
	 * Add an item at the beginning of the list.
	 * @param item
	 */
	Denque.prototype.unshift = function unshift(item) {
	  if (item === undefined) return this.size();
	  var len = this._list.length;
	  this._head = (this._head - 1 + len) & this._capacityMask;
	  this._list[this._head] = item;
	  if (this._tail === this._head) this._growArray();
	  if (this._capacity && this.size() > this._capacity) this.pop();
	  if (this._head < this._tail) return this._tail - this._head;
	  else return this._capacityMask + 1 - (this._head - this._tail);
	};

	/**
	 * Remove and return the first item on the list,
	 * Returns undefined if the list is empty.
	 * @returns {*}
	 */
	Denque.prototype.shift = function shift() {
	  var head = this._head;
	  if (head === this._tail) return undefined;
	  var item = this._list[head];
	  this._list[head] = undefined;
	  this._head = (head + 1) & this._capacityMask;
	  if (head < 2 && this._tail > 10000 && this._tail <= this._list.length >>> 2) this._shrinkArray();
	  return item;
	};

	/**
	 * Add an item to the bottom of the list.
	 * @param item
	 */
	Denque.prototype.push = function push(item) {
	  if (item === undefined) return this.size();
	  var tail = this._tail;
	  this._list[tail] = item;
	  this._tail = (tail + 1) & this._capacityMask;
	  if (this._tail === this._head) {
	    this._growArray();
	  }
	  if (this._capacity && this.size() > this._capacity) {
	    this.shift();
	  }
	  if (this._head < this._tail) return this._tail - this._head;
	  else return this._capacityMask + 1 - (this._head - this._tail);
	};

	/**
	 * Remove and return the last item on the list.
	 * Returns undefined if the list is empty.
	 * @returns {*}
	 */
	Denque.prototype.pop = function pop() {
	  var tail = this._tail;
	  if (tail === this._head) return undefined;
	  var len = this._list.length;
	  this._tail = (tail - 1 + len) & this._capacityMask;
	  var item = this._list[this._tail];
	  this._list[this._tail] = undefined;
	  if (this._head < 2 && tail > 10000 && tail <= len >>> 2) this._shrinkArray();
	  return item;
	};

	/**
	 * Remove and return the item at the specified index from the list.
	 * Returns undefined if the list is empty.
	 * @param index
	 * @returns {*}
	 */
	Denque.prototype.removeOne = function removeOne(index) {
	  var i = index;
	  // expect a number or return undefined
	  if ((i !== (i | 0))) {
	    return void 0;
	  }
	  if (this._head === this._tail) return void 0;
	  var size = this.size();
	  var len = this._list.length;
	  if (i >= size || i < -size) return void 0;
	  if (i < 0) i += size;
	  i = (this._head + i) & this._capacityMask;
	  var item = this._list[i];
	  var k;
	  if (index < size / 2) {
	    for (k = index; k > 0; k--) {
	      this._list[i] = this._list[i = (i - 1 + len) & this._capacityMask];
	    }
	    this._list[i] = void 0;
	    this._head = (this._head + 1 + len) & this._capacityMask;
	  } else {
	    for (k = size - 1 - index; k > 0; k--) {
	      this._list[i] = this._list[i = ( i + 1 + len) & this._capacityMask];
	    }
	    this._list[i] = void 0;
	    this._tail = (this._tail - 1 + len) & this._capacityMask;
	  }
	  return item;
	};

	/**
	 * Remove number of items from the specified index from the list.
	 * Returns array of removed items.
	 * Returns undefined if the list is empty.
	 * @param index
	 * @param count
	 * @returns {array}
	 */
	Denque.prototype.remove = function remove(index, count) {
	  var i = index;
	  var removed;
	  var del_count = count;
	  // expect a number or return undefined
	  if ((i !== (i | 0))) {
	    return void 0;
	  }
	  if (this._head === this._tail) return void 0;
	  var size = this.size();
	  var len = this._list.length;
	  if (i >= size || i < -size || count < 1) return void 0;
	  if (i < 0) i += size;
	  if (count === 1 || !count) {
	    removed = new Array(1);
	    removed[0] = this.removeOne(i);
	    return removed;
	  }
	  if (i === 0 && i + count >= size) {
	    removed = this.toArray();
	    this.clear();
	    return removed;
	  }
	  if (i + count > size) count = size - i;
	  var k;
	  removed = new Array(count);
	  for (k = 0; k < count; k++) {
	    removed[k] = this._list[(this._head + i + k) & this._capacityMask];
	  }
	  i = (this._head + i) & this._capacityMask;
	  if (index + count === size) {
	    this._tail = (this._tail - count + len) & this._capacityMask;
	    for (k = count; k > 0; k--) {
	      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;
	    }
	    return removed;
	  }
	  if (index === 0) {
	    this._head = (this._head + count + len) & this._capacityMask;
	    for (k = count - 1; k > 0; k--) {
	      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;
	    }
	    return removed;
	  }
	  if (i < size / 2) {
	    this._head = (this._head + index + count + len) & this._capacityMask;
	    for (k = index; k > 0; k--) {
	      this.unshift(this._list[i = (i - 1 + len) & this._capacityMask]);
	    }
	    i = (this._head - 1 + len) & this._capacityMask;
	    while (del_count > 0) {
	      this._list[i = (i - 1 + len) & this._capacityMask] = void 0;
	      del_count--;
	    }
	    if (index < 0) this._tail = i;
	  } else {
	    this._tail = i;
	    i = (i + count + len) & this._capacityMask;
	    for (k = size - (count + index); k > 0; k--) {
	      this.push(this._list[i++]);
	    }
	    i = this._tail;
	    while (del_count > 0) {
	      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;
	      del_count--;
	    }
	  }
	  if (this._head < 2 && this._tail > 10000 && this._tail <= len >>> 2) this._shrinkArray();
	  return removed;
	};

	/**
	 * Native splice implementation.
	 * Remove number of items from the specified index from the list and/or add new elements.
	 * Returns array of removed items or empty array if count == 0.
	 * Returns undefined if the list is empty.
	 *
	 * @param index
	 * @param count
	 * @param {...*} [elements]
	 * @returns {array}
	 */
	Denque.prototype.splice = function splice(index, count) {
	  var i = index;
	  // expect a number or return undefined
	  if ((i !== (i | 0))) {
	    return void 0;
	  }
	  var size = this.size();
	  if (i < 0) i += size;
	  if (i > size) return void 0;
	  if (arguments.length > 2) {
	    var k;
	    var temp;
	    var removed;
	    var arg_len = arguments.length;
	    var len = this._list.length;
	    var arguments_index = 2;
	    if (!size || i < size / 2) {
	      temp = new Array(i);
	      for (k = 0; k < i; k++) {
	        temp[k] = this._list[(this._head + k) & this._capacityMask];
	      }
	      if (count === 0) {
	        removed = [];
	        if (i > 0) {
	          this._head = (this._head + i + len) & this._capacityMask;
	        }
	      } else {
	        removed = this.remove(i, count);
	        this._head = (this._head + i + len) & this._capacityMask;
	      }
	      while (arg_len > arguments_index) {
	        this.unshift(arguments[--arg_len]);
	      }
	      for (k = i; k > 0; k--) {
	        this.unshift(temp[k - 1]);
	      }
	    } else {
	      temp = new Array(size - (i + count));
	      var leng = temp.length;
	      for (k = 0; k < leng; k++) {
	        temp[k] = this._list[(this._head + i + count + k) & this._capacityMask];
	      }
	      if (count === 0) {
	        removed = [];
	        if (i != size) {
	          this._tail = (this._head + i + len) & this._capacityMask;
	        }
	      } else {
	        removed = this.remove(i, count);
	        this._tail = (this._tail - leng + len) & this._capacityMask;
	      }
	      while (arguments_index < arg_len) {
	        this.push(arguments[arguments_index++]);
	      }
	      for (k = 0; k < leng; k++) {
	        this.push(temp[k]);
	      }
	    }
	    return removed;
	  } else {
	    return this.remove(i, count);
	  }
	};

	/**
	 * Soft clear - does not reset capacity.
	 */
	Denque.prototype.clear = function clear() {
	  this._head = 0;
	  this._tail = 0;
	};

	/**
	 * Returns true or false whether the list is empty.
	 * @returns {boolean}
	 */
	Denque.prototype.isEmpty = function isEmpty() {
	  return this._head === this._tail;
	};

	/**
	 * Returns an array of all queue items.
	 * @returns {Array}
	 */
	Denque.prototype.toArray = function toArray() {
	  return this._copyArray(false);
	};

	/**
	 * -------------
	 *   INTERNALS
	 * -------------
	 */

	/**
	 * Fills the queue with items from an array
	 * For use in the constructor
	 * @param array
	 * @private
	 */
	Denque.prototype._fromArray = function _fromArray(array) {
	  for (var i = 0; i < array.length; i++) this.push(array[i]);
	};

	/**
	 *
	 * @param fullCopy
	 * @returns {Array}
	 * @private
	 */
	Denque.prototype._copyArray = function _copyArray(fullCopy) {
	  var newArray = [];
	  var list = this._list;
	  var len = list.length;
	  var i;
	  if (fullCopy || this._head > this._tail) {
	    for (i = this._head; i < len; i++) newArray.push(list[i]);
	    for (i = 0; i < this._tail; i++) newArray.push(list[i]);
	  } else {
	    for (i = this._head; i < this._tail; i++) newArray.push(list[i]);
	  }
	  return newArray;
	};

	/**
	 * Grows the internal list array.
	 * @private
	 */
	Denque.prototype._growArray = function _growArray() {
	  if (this._head) {
	    // copy existing data, head to end, then beginning to tail.
	    this._list = this._copyArray(true);
	    this._head = 0;
	  }

	  // head is at 0 and array is now full, safe to extend
	  this._tail = this._list.length;

	  this._list.length <<= 1;
	  this._capacityMask = (this._capacityMask << 1) | 1;
	};

	/**
	 * Shrinks the internal list array.
	 * @private
	 */
	Denque.prototype._shrinkArray = function _shrinkArray() {
	  this._list.length >>>= 1;
	  this._capacityMask >>>= 1;
	};


	var denque = Denque;

	(function (exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.MessageDeliveries = exports.DeliveryRecordStatus = void 0;
	const constants_1 = constants$f;
	const denque_1 = __importDefault(denque);
	var DeliveryRecordStatus;
	(function (DeliveryRecordStatus) {
	    /**
	     * we don't know (yet) if the message is valid
	     */
	    DeliveryRecordStatus[DeliveryRecordStatus["unknown"] = 0] = "unknown";
	    /**
	     * we know the message is valid
	     */
	    DeliveryRecordStatus[DeliveryRecordStatus["valid"] = 1] = "valid";
	    /**
	     * we know the message is invalid
	     */
	    DeliveryRecordStatus[DeliveryRecordStatus["invalid"] = 2] = "invalid";
	    /**
	     * we were instructed by the validator to ignore the message
	     */
	    DeliveryRecordStatus[DeliveryRecordStatus["ignored"] = 3] = "ignored";
	})(DeliveryRecordStatus = exports.DeliveryRecordStatus || (exports.DeliveryRecordStatus = {}));
	/**
	 * Map of canonical message ID to DeliveryRecord
	 *
	 * Maintains an internal queue for efficient gc of old messages
	 */
	class MessageDeliveries {
	    constructor() {
	        this.records = new Map();
	        this.queue = new denque_1.default();
	    }
	    ensureRecord(msgIdStr) {
	        let drec = this.records.get(msgIdStr);
	        if (drec) {
	            return drec;
	        }
	        // record doesn't exist yet
	        // create record
	        drec = {
	            status: DeliveryRecordStatus.unknown,
	            firstSeen: Date.now(),
	            validated: 0,
	            peers: new Set()
	        };
	        this.records.set(msgIdStr, drec);
	        // and add msgId to the queue
	        const entry = {
	            msgId: msgIdStr,
	            expire: Date.now() + constants_1.TimeCacheDuration
	        };
	        this.queue.push(entry);
	        return drec;
	    }
	    gc() {
	        const now = Date.now();
	        // queue is sorted by expiry time
	        // remove expired messages, remove from queue until first un-expired message found
	        let head = this.queue.peekFront();
	        while (head && head.expire < now) {
	            this.records.delete(head.msgId);
	            this.queue.shift();
	            head = this.queue.peekFront();
	        }
	    }
	    clear() {
	        this.records.clear();
	        this.queue.clear();
	    }
	}
	exports.MessageDeliveries = MessageDeliveries;
	}(messageDeliveries));

	var __awaiter$2 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __importDefault$e = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(peerScore, "__esModule", { value: true });
	peerScore.PeerScore = void 0;
	const peer_score_params_1 = peerScoreParams;
	const peer_stats_1 = peerStats;
	const compute_score_1 = computeScore$1;
	const message_deliveries_1 = messageDeliveries;
	const constants_1$4 = constants$f;
	const peer_id_1$1 = __importDefault$e(src$o.exports);
	const debug$N = browser$a.exports;
	const pubsubErrors$1 = errors$4;
	const { ERR_INVALID_SIGNATURE: ERR_INVALID_SIGNATURE$1, ERR_MISSING_SIGNATURE: ERR_MISSING_SIGNATURE$1 } = pubsubErrors$1.codes;
	const log$Q = debug$N('libp2p:gossipsub:score');
	class PeerScore {
	    constructor(params, connectionManager) {
	        peer_score_params_1.validatePeerScoreParams(params);
	        this.params = params;
	        this._connectionManager = connectionManager;
	        this.peerStats = new Map();
	        this.peerIPs = new Map();
	        this.scoreCache = new Map();
	        this.deliveryRecords = new message_deliveries_1.MessageDeliveries();
	    }
	    /**
	     * Start PeerScore instance
	     * @returns {void}
	     */
	    start() {
	        if (this._backgroundInterval) {
	            log$Q('Peer score already running');
	            return;
	        }
	        this._backgroundInterval = setInterval(() => this.background(), this.params.decayInterval);
	        log$Q('started');
	    }
	    /**
	     * Stop PeerScore instance
	     * @returns {void}
	     */
	    stop() {
	        if (!this._backgroundInterval) {
	            log$Q('Peer score already stopped');
	            return;
	        }
	        clearInterval(this._backgroundInterval);
	        delete this._backgroundInterval;
	        this.peerIPs.clear();
	        this.peerStats.clear();
	        this.deliveryRecords.clear();
	        log$Q('stopped');
	    }
	    /**
	     * Periodic maintenance
	     * @returns {void}
	     */
	    background() {
	        this._refreshScores();
	        this._updateIPs();
	        this.deliveryRecords.gc();
	    }
	    /**
	     * Decays scores, and purges score records for disconnected peers once their expiry has elapsed.
	     * @returns {void}
	     */
	    _refreshScores() {
	        const now = Date.now();
	        const decayToZero = this.params.decayToZero;
	        this.peerStats.forEach((pstats, id) => {
	            if (!pstats.connected) {
	                // has the retention perious expired?
	                if (now > pstats.expire) {
	                    // yes, throw it away (but clean up the IP tracking first)
	                    this._removeIPs(id, pstats.ips);
	                    this.peerStats.delete(id);
	                }
	                // we don't decay retained scores, as the peer is not active.
	                // this way the peer cannot reset a negative score by simply disconnecting and reconnecting,
	                // unless the retention period has ellapsed.
	                // similarly, a well behaved peer does not lose its score by getting disconnected.
	                return;
	            }
	            Object.entries(pstats.topics).forEach(([topic, tstats]) => {
	                const tparams = this.params.topics[topic];
	                if (!tparams) {
	                    // we are not scoring this topic
	                    // should be unreachable, we only add scored topics to pstats
	                    return;
	                }
	                // decay counters
	                tstats.firstMessageDeliveries *= tparams.firstMessageDeliveriesDecay;
	                if (tstats.firstMessageDeliveries < decayToZero) {
	                    tstats.firstMessageDeliveries = 0;
	                }
	                tstats.meshMessageDeliveries *= tparams.meshMessageDeliveriesDecay;
	                if (tstats.meshMessageDeliveries < decayToZero) {
	                    tstats.meshMessageDeliveries = 0;
	                }
	                tstats.meshFailurePenalty *= tparams.meshFailurePenaltyDecay;
	                if (tstats.meshFailurePenalty < decayToZero) {
	                    tstats.meshFailurePenalty = 0;
	                }
	                tstats.invalidMessageDeliveries *= tparams.invalidMessageDeliveriesDecay;
	                if (tstats.invalidMessageDeliveries < decayToZero) {
	                    tstats.invalidMessageDeliveries = 0;
	                }
	                // update mesh time and activate mesh message delivery parameter if need be
	                if (tstats.inMesh) {
	                    tstats.meshTime = now - tstats.graftTime;
	                    if (tstats.meshTime > tparams.meshMessageDeliveriesActivation) {
	                        tstats.meshMessageDeliveriesActive = true;
	                    }
	                }
	            });
	            // decay P7 counter
	            pstats.behaviourPenalty *= this.params.behaviourPenaltyDecay;
	            if (pstats.behaviourPenalty < decayToZero) {
	                pstats.behaviourPenalty = 0;
	            }
	            this.scoreCache.set(id, { score: null, cacheUntil: 0 });
	        });
	    }
	    /**
	     * Return the score for a peer
	     * @param {string} id
	     * @returns {Number}
	     */
	    score(id) {
	        const pstats = this.peerStats.get(id);
	        if (!pstats) {
	            return 0;
	        }
	        const now = Date.now();
	        let cacheEntry = this.scoreCache.get(id);
	        if (cacheEntry === undefined) {
	            cacheEntry = { score: null, cacheUntil: 0 };
	            this.scoreCache.set(id, cacheEntry);
	        }
	        const { score, cacheUntil } = cacheEntry;
	        if (cacheUntil > now && score !== null)
	            return score;
	        cacheEntry.score = compute_score_1.computeScore(id, pstats, this.params, this.peerIPs);
	        // decayInterval is used to refresh score so we don't want to cache more than that
	        cacheEntry.cacheUntil = now + this.params.decayInterval;
	        return cacheEntry.score;
	    }
	    /**
	     * Apply a behavioural penalty to a peer
	     * @param {string} id
	     * @param {Number} penalty
	     * @returns {void}
	     */
	    addPenalty(id, penalty) {
	        const pstats = this.peerStats.get(id);
	        if (!pstats) {
	            return;
	        }
	        pstats.behaviourPenalty += penalty;
	        this.scoreCache.set(id, { score: null, cacheUntil: 0 });
	    }
	    /**
	     * @param {string} id
	     * @returns {void}
	     */
	    addPeer(id) {
	        // create peer stats (not including topic stats for each topic to be scored)
	        // topic stats will be added as needed
	        const pstats = peer_stats_1.createPeerStats({
	            connected: true
	        });
	        this.peerStats.set(id, pstats);
	        // get + update peer IPs
	        const ips = this._getIPs(id);
	        this._setIPs(id, ips, pstats.ips);
	        pstats.ips = ips;
	    }
	    /**
	     * @param {string} id
	     * @returns {void}
	     */
	    removePeer(id) {
	        const pstats = this.peerStats.get(id);
	        if (!pstats) {
	            return;
	        }
	        // decide whether to retain the score; this currently only retains non-positive scores
	        // to dissuade attacks on the score function.
	        if (this.score(id) > 0) {
	            this._removeIPs(id, pstats.ips);
	            this.peerStats.delete(id);
	            return;
	        }
	        // delete score cache
	        this.scoreCache.delete(id);
	        // furthermore, when we decide to retain the score, the firstMessageDelivery counters are
	        // reset to 0 and mesh delivery penalties applied.
	        Object.entries(pstats.topics).forEach(([topic, tstats]) => {
	            tstats.firstMessageDeliveries = 0;
	            const threshold = this.params.topics[topic].meshMessageDeliveriesThreshold;
	            if (tstats.inMesh && tstats.meshMessageDeliveriesActive && tstats.meshMessageDeliveries < threshold) {
	                const deficit = threshold - tstats.meshMessageDeliveries;
	                tstats.meshFailurePenalty += deficit * deficit;
	            }
	            tstats.inMesh = false;
	        });
	        pstats.connected = false;
	        pstats.expire = Date.now() + this.params.retainScore;
	    }
	    /**
	     * @param {string} id
	     * @param {String} topic
	     * @returns {void}
	     */
	    graft(id, topic) {
	        const pstats = this.peerStats.get(id);
	        if (!pstats) {
	            return;
	        }
	        const tstats = peer_stats_1.ensureTopicStats(topic, pstats, this.params);
	        if (!tstats) {
	            return;
	        }
	        tstats.inMesh = true;
	        tstats.graftTime = Date.now();
	        tstats.meshTime = 0;
	        tstats.meshMessageDeliveriesActive = false;
	        this.scoreCache.set(id, { score: null, cacheUntil: 0 });
	    }
	    /**
	     * @param {string} id
	     * @param {string} topic
	     * @returns {void}
	     */
	    prune(id, topic) {
	        const pstats = this.peerStats.get(id);
	        if (!pstats) {
	            return;
	        }
	        const tstats = peer_stats_1.ensureTopicStats(topic, pstats, this.params);
	        if (!tstats) {
	            return;
	        }
	        // sticky mesh delivery rate failure penalty
	        const threshold = this.params.topics[topic].meshMessageDeliveriesThreshold;
	        if (tstats.meshMessageDeliveriesActive && tstats.meshMessageDeliveries < threshold) {
	            const deficit = threshold - tstats.meshMessageDeliveries;
	            tstats.meshFailurePenalty += deficit * deficit;
	        }
	        tstats.inMesh = false;
	        this.scoreCache.set(id, { score: null, cacheUntil: 0 });
	    }
	    /**
	     * @param {InMessage} message
	     * @returns {Promise<void>}
	     */
	    validateMessage(msgIdStr) {
	        return __awaiter$2(this, void 0, void 0, function* () {
	            this.deliveryRecords.ensureRecord(msgIdStr);
	        });
	    }
	    /**
	     * @param {InMessage} msg
	     * @returns {Promise<void>}
	     */
	    deliverMessage(msg, msgIdStr) {
	        return __awaiter$2(this, void 0, void 0, function* () {
	            const id = msg.receivedFrom;
	            this._markFirstMessageDelivery(id, msg);
	            const drec = this.deliveryRecords.ensureRecord(msgIdStr);
	            const now = Date.now();
	            // defensive check that this is the first delivery trace -- delivery status should be unknown
	            if (drec.status !== message_deliveries_1.DeliveryRecordStatus.unknown) {
	                log$Q('unexpected delivery: message from %s was first seen %s ago and has delivery status %d', id, now - drec.firstSeen, message_deliveries_1.DeliveryRecordStatus[drec.status]);
	                return;
	            }
	            // mark the message as valid and reward mesh peers that have already forwarded it to us
	            drec.status = message_deliveries_1.DeliveryRecordStatus.valid;
	            drec.validated = now;
	            drec.peers.forEach(p => {
	                // this check is to make sure a peer can't send us a message twice and get a double count
	                // if it is a first delivery.
	                if (p !== id) {
	                    this._markDuplicateMessageDelivery(p, msg);
	                }
	            });
	        });
	    }
	    /**
	     * @param {InMessage} msg
	     * @param {string} reason
	     * @returns {Promise<void>}
	     */
	    rejectMessage(msg, msgIdStr, reason) {
	        return __awaiter$2(this, void 0, void 0, function* () {
	            const id = msg.receivedFrom;
	            switch (reason) {
	                case ERR_MISSING_SIGNATURE$1:
	                case ERR_INVALID_SIGNATURE$1:
	                    this._markInvalidMessageDelivery(id, msg);
	                    return;
	            }
	            const drec = this.deliveryRecords.ensureRecord(msgIdStr);
	            // defensive check that this is the first rejection -- delivery status should be unknown
	            if (drec.status !== message_deliveries_1.DeliveryRecordStatus.unknown) {
	                log$Q('unexpected rejection: message from %s was first seen %s ago and has delivery status %d', id, Date.now() - drec.firstSeen, message_deliveries_1.DeliveryRecordStatus[drec.status]);
	                return;
	            }
	            switch (reason) {
	                case constants_1$4.ERR_TOPIC_VALIDATOR_IGNORE:
	                    // we were explicitly instructed by the validator to ignore the message but not penalize the peer
	                    drec.status = message_deliveries_1.DeliveryRecordStatus.ignored;
	                    return;
	            }
	            // mark the message as invalid and penalize peers that have already forwarded it.
	            drec.status = message_deliveries_1.DeliveryRecordStatus.invalid;
	            this._markInvalidMessageDelivery(id, msg);
	            drec.peers.forEach(p => {
	                this._markInvalidMessageDelivery(p, msg);
	            });
	        });
	    }
	    /**
	     * @param {InMessage} msg
	     * @returns {Promise<void>}
	     */
	    duplicateMessage(msg, msgIdStr) {
	        return __awaiter$2(this, void 0, void 0, function* () {
	            const id = msg.receivedFrom;
	            const drec = this.deliveryRecords.ensureRecord(msgIdStr);
	            if (drec.peers.has(id)) {
	                // we have already seen this duplicate
	                return;
	            }
	            switch (drec.status) {
	                case message_deliveries_1.DeliveryRecordStatus.unknown:
	                    // the message is being validated; track the peer delivery and wait for
	                    // the Deliver/Reject/Ignore notification.
	                    drec.peers.add(id);
	                    break;
	                case message_deliveries_1.DeliveryRecordStatus.valid:
	                    // mark the peer delivery time to only count a duplicate delivery once.
	                    drec.peers.add(id);
	                    this._markDuplicateMessageDelivery(id, msg, drec.validated);
	                    break;
	                case message_deliveries_1.DeliveryRecordStatus.invalid:
	                    // we no longer track delivery time
	                    this._markInvalidMessageDelivery(id, msg);
	                    break;
	            }
	        });
	    }
	    /**
	     * Increments the "invalid message deliveries" counter for all scored topics the message is published in.
	     * @param {string} id
	     * @param {InMessage} msg
	     * @returns {void}
	     */
	    _markInvalidMessageDelivery(id, msg) {
	        const pstats = this.peerStats.get(id);
	        if (!pstats) {
	            return;
	        }
	        msg.topicIDs.forEach(topic => {
	            const tstats = peer_stats_1.ensureTopicStats(topic, pstats, this.params);
	            if (!tstats) {
	                return;
	            }
	            tstats.invalidMessageDeliveries += 1;
	        });
	        this.scoreCache.set(id, { score: null, cacheUntil: 0 });
	    }
	    /**
	     * Increments the "first message deliveries" counter for all scored topics the message is published in,
	     * as well as the "mesh message deliveries" counter, if the peer is in the mesh for the topic.
	     * @param {string} id
	     * @param {InMessage} msg
	     * @returns {void}
	     */
	    _markFirstMessageDelivery(id, msg) {
	        const pstats = this.peerStats.get(id);
	        if (!pstats) {
	            return;
	        }
	        msg.topicIDs.forEach(topic => {
	            const tstats = peer_stats_1.ensureTopicStats(topic, pstats, this.params);
	            if (!tstats) {
	                return;
	            }
	            let cap = this.params.topics[topic].firstMessageDeliveriesCap;
	            tstats.firstMessageDeliveries += 1;
	            if (tstats.firstMessageDeliveries > cap) {
	                tstats.firstMessageDeliveries = cap;
	            }
	            if (!tstats.inMesh) {
	                return;
	            }
	            cap = this.params.topics[topic].meshMessageDeliveriesCap;
	            tstats.meshMessageDeliveries += 1;
	            if (tstats.meshMessageDeliveries > cap) {
	                tstats.meshMessageDeliveries = cap;
	            }
	        });
	        this.scoreCache.set(id, { score: null, cacheUntil: 0 });
	    }
	    /**
	     * Increments the "mesh message deliveries" counter for messages we've seen before,
	     * as long the message was received within the P3 window.
	     * @param {string} id
	     * @param {InMessage} msg
	     * @param {number} validatedTime
	     * @returns {void}
	     */
	    _markDuplicateMessageDelivery(id, msg, validatedTime = 0) {
	        const pstats = this.peerStats.get(id);
	        if (!pstats) {
	            return;
	        }
	        const now = validatedTime ? Date.now() : 0;
	        msg.topicIDs.forEach(topic => {
	            const tstats = peer_stats_1.ensureTopicStats(topic, pstats, this.params);
	            if (!tstats) {
	                return;
	            }
	            if (!tstats.inMesh) {
	                return;
	            }
	            const tparams = this.params.topics[topic];
	            // check against the mesh delivery window -- if the validated time is passed as 0, then
	            // the message was received before we finished validation and thus falls within the mesh
	            // delivery window.
	            if (validatedTime && now > validatedTime + tparams.meshMessageDeliveriesWindow) {
	                return;
	            }
	            const cap = tparams.meshMessageDeliveriesCap;
	            tstats.meshMessageDeliveries += 1;
	            if (tstats.meshMessageDeliveries > cap) {
	                tstats.meshMessageDeliveries = cap;
	            }
	        });
	        this.scoreCache.set(id, { score: null, cacheUntil: 0 });
	    }
	    /**
	     * Gets the current IPs for a peer.
	     * @param {string} id
	     * @returns {Array<string>}
	     */
	    _getIPs(id) {
	        return this._connectionManager.getAll(peer_id_1$1.default.createFromB58String(id))
	            .map(c => c.remoteAddr.toOptions().host);
	    }
	    /**
	     * Adds tracking for the new IPs in the list, and removes tracking from the obsolete IPs.
	     * @param {string} id
	     * @param {Array<string>} newIPs
	     * @param {Array<string>} oldIPs
	     * @returns {void}
	     */
	    _setIPs(id, newIPs, oldIPs) {
	        // add the new IPs to the tracking
	        // eslint-disable-next-line no-labels
	        addNewIPs: for (const ip of newIPs) {
	            // check if it is in the old ips list
	            for (const xip of oldIPs) {
	                if (ip === xip) {
	                    // eslint-disable-next-line no-labels
	                    continue addNewIPs;
	                }
	            }
	            // no, it's a new one -- add it to the tracker
	            let peers = this.peerIPs.get(ip);
	            if (!peers) {
	                peers = new Set();
	                this.peerIPs.set(ip, peers);
	            }
	            peers.add(id);
	        }
	        // remove the obsolete old IPs from the tracking
	        // eslint-disable-next-line no-labels
	        removeOldIPs: for (const ip of oldIPs) {
	            // check if it is in the new ips list
	            for (const xip of newIPs) {
	                if (ip === xip) {
	                    // eslint-disable-next-line no-labels
	                    continue removeOldIPs;
	                }
	            }
	            // no, its obselete -- remove it from the tracker
	            const peers = this.peerIPs.get(ip);
	            if (!peers) {
	                continue;
	            }
	            peers.delete(id);
	            if (!peers.size) {
	                this.peerIPs.delete(ip);
	            }
	        }
	        this.scoreCache.set(id, { score: null, cacheUntil: 0 });
	    }
	    /**
	     * Removes an IP list from the tracking list for a peer.
	     * @param {string} id
	     * @param {Array<string>} ips
	     * @returns {void}
	     */
	    _removeIPs(id, ips) {
	        ips.forEach(ip => {
	            const peers = this.peerIPs.get(ip);
	            if (!peers) {
	                return;
	            }
	            peers.delete(id);
	            if (!peers.size) {
	                this.peerIPs.delete(ip);
	            }
	        });
	        this.scoreCache.set(id, { score: null, cacheUntil: 0 });
	    }
	    /**
	     * Update all peer IPs to currently open connections
	     * @returns {void}
	     */
	    _updateIPs() {
	        this.peerStats.forEach((pstats, id) => {
	            const newIPs = this._getIPs(id);
	            this._setIPs(id, newIPs, pstats.ips);
	            pstats.ips = newIPs;
	            this.scoreCache.set(id, { score: null, cacheUntil: 0 });
	        });
	    }
	}
	peerScore.PeerScore = PeerScore;

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(peerScoreParams, exports);
	__exportStar(peerScoreThresholds, exports);
	__exportStar(peerScore, exports);
	}(score));

	var tracer = {};

	var __awaiter$1 = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	Object.defineProperty(tracer, "__esModule", { value: true });
	tracer.IWantTracer = void 0;
	const constants_1$3 = constants$f;
	const utils_1$7 = utils$r;
	const pubsubErrors = errors$4;
	const { ERR_INVALID_SIGNATURE, ERR_MISSING_SIGNATURE } = pubsubErrors.codes;
	/**
	 * IWantTracer is an internal tracer that tracks IWANT requests in order to penalize
	 * peers who don't follow up on IWANT requests after an IHAVE advertisement.
	 * The tracking of promises is probabilistic to avoid using too much memory.
	 *
	 * Note: Do not confuse these 'promises' with JS Promise objects.
	 * These 'promises' are merely expectations of a peer's behavior.
	 */
	class IWantTracer {
	    constructor() {
	        this.promises = new Map();
	    }
	    /**
	     * Track a promise to deliver a message from a list of msgIds we are requesting
	     * @param {string} p peer id
	     * @param {string[]} msgIds
	     * @returns {void}
	     */
	    addPromise(p, msgIds) {
	        // pick msgId randomly from the list
	        const ix = Math.floor(Math.random() * msgIds.length);
	        const msgId = msgIds[ix];
	        const msgIdStr = utils_1$7.messageIdToString(msgId);
	        let peers = this.promises.get(msgIdStr);
	        if (!peers) {
	            peers = new Map();
	            this.promises.set(msgIdStr, peers);
	        }
	        if (!peers.has(p)) {
	            peers.set(p, Date.now() + constants_1$3.GossipsubIWantFollowupTime);
	        }
	    }
	    /**
	     * Returns the number of broken promises for each peer who didn't follow up on an IWANT request.
	     * @returns {Map<string, number>}
	     */
	    getBrokenPromises() {
	        const now = Date.now();
	        const result = new Map();
	        this.promises.forEach((peers, msgId) => {
	            peers.forEach((expire, p) => {
	                // the promise has been broken
	                if (expire < now) {
	                    // add 1 to result
	                    result.set(p, (result.get(p) || 0) + 1);
	                    // delete from tracked promises
	                    peers.delete(p);
	                }
	            });
	            // clean up empty promises for a msgId
	            if (!peers.size) {
	                this.promises.delete(msgId);
	            }
	        });
	        return result;
	    }
	    /**
	     * Someone delivered a message, stop tracking promises for it
	     * @param {string} msgIdStr
	     * @returns {Promise<void>}
	     */
	    deliverMessage(msgIdStr) {
	        return __awaiter$1(this, void 0, void 0, function* () {
	            this.promises.delete(msgIdStr);
	        });
	    }
	    /**
	     * A message got rejected, so we can stop tracking promises and let the score penalty apply from invalid message delivery,
	     * unless its an obviously invalid message.
	     * @param {string} msgIdStr
	     * @param {string} reason
	     * @returns {Promise<void>}
	     */
	    rejectMessage(msgIdStr, reason) {
	        return __awaiter$1(this, void 0, void 0, function* () {
	            switch (reason) {
	                case ERR_INVALID_SIGNATURE:
	                case ERR_MISSING_SIGNATURE:
	                    return;
	            }
	            this.promises.delete(msgIdStr);
	        });
	    }
	    clear() {
	        this.promises.clear();
	    }
	}
	tracer.IWantTracer = IWantTracer;

	var timeCache = {};

	Object.defineProperty(timeCache, "__esModule", { value: true });
	timeCache.SimpleTimeCache = void 0;
	/**
	 * This is similar to https://github.com/daviddias/time-cache/blob/master/src/index.js
	 * for our own need, we don't use lodash throttle to improve performance.
	 * This gives 4x - 5x performance gain compared to npm TimeCache
	 */
	class SimpleTimeCache {
	    constructor(options) {
	        this.lastPruneTime = 0;
	        this.entries = new Map();
	        this.validityMs = options.validityMs;
	        // allow negative validityMs so that this does not cache anything, spec test compliance.spec.js
	        // sends duplicate messages and expect peer to receive all. Application likely uses positive validityMs
	    }
	    put(key, value) {
	        this.entries.set(key, { value, validUntilMs: Date.now() + this.validityMs });
	        this.prune();
	    }
	    prune() {
	        const now = Date.now();
	        if (now - this.lastPruneTime < 200) {
	            return;
	        }
	        this.lastPruneTime = now;
	        for (const [k, v] of this.entries.entries()) {
	            if (v.validUntilMs < now) {
	                this.entries.delete(k);
	            }
	            else {
	                // sort by insertion order
	                break;
	            }
	        }
	    }
	    has(key) {
	        return this.entries.has(key);
	    }
	    get(key) {
	        const value = this.entries.get(key);
	        return (value && value.validUntilMs >= Date.now()) ? value.value : undefined;
	    }
	    clear() {
	        this.entries = new Map();
	        this.lastPruneTime = 0;
	    }
	}
	timeCache.SimpleTimeCache = SimpleTimeCache;

	var errors$3 = {};

	errors$3.messages = {
	  NOT_STARTED_YET: 'The libp2p node is not started yet',
	  DHT_DISABLED: 'DHT is not available',
	  CONN_ENCRYPTION_REQUIRED: 'At least one connection encryption module is required',
	  NOT_FOUND: 'Not found'
	};

	errors$3.codes = {
	  DHT_DISABLED: 'ERR_DHT_DISABLED',
	  PUBSUB_NOT_STARTED: 'ERR_PUBSUB_NOT_STARTED',
	  DHT_NOT_STARTED: 'ERR_DHT_NOT_STARTED',
	  CONN_ENCRYPTION_REQUIRED: 'ERR_CONN_ENCRYPTION_REQUIRED',
	  ERR_PEER_DIAL_INTERCEPTED: 'ERR_PEER_DIAL_INTERCEPTED',
	  ERR_CONNECTION_INTERCEPTED: 'ERR_CONNECTION_INTERCEPTED',
	  ERR_INVALID_PROTOCOLS_FOR_STREAM: 'ERR_INVALID_PROTOCOLS_FOR_STREAM',
	  ERR_CONNECTION_ENDED: 'ERR_CONNECTION_ENDED',
	  ERR_CONNECTION_FAILED: 'ERR_CONNECTION_FAILED',
	  ERR_NODE_NOT_STARTED: 'ERR_NODE_NOT_STARTED',
	  ERR_ALREADY_ABORTED: 'ERR_ALREADY_ABORTED',
	  ERR_TOO_MANY_ADDRESSES: 'ERR_TOO_MANY_ADDRESSES',
	  ERR_NO_VALID_ADDRESSES: 'ERR_NO_VALID_ADDRESSES',
	  ERR_RELAYED_DIAL: 'ERR_RELAYED_DIAL',
	  ERR_DIALED_SELF: 'ERR_DIALED_SELF',
	  ERR_DISCOVERED_SELF: 'ERR_DISCOVERED_SELF',
	  ERR_DUPLICATE_TRANSPORT: 'ERR_DUPLICATE_TRANSPORT',
	  ERR_ENCRYPTION_FAILED: 'ERR_ENCRYPTION_FAILED',
	  ERR_HOP_REQUEST_FAILED: 'ERR_HOP_REQUEST_FAILED',
	  ERR_INVALID_KEY: 'ERR_INVALID_KEY',
	  ERR_INVALID_MESSAGE: 'ERR_INVALID_MESSAGE',
	  ERR_INVALID_PARAMETERS: 'ERR_INVALID_PARAMETERS',
	  ERR_INVALID_PEER: 'ERR_INVALID_PEER',
	  ERR_MUXER_UNAVAILABLE: 'ERR_MUXER_UNAVAILABLE',
	  ERR_NOT_FOUND: 'ERR_NOT_FOUND',
	  ERR_TIMEOUT: 'ERR_TIMEOUT',
	  ERR_TRANSPORT_UNAVAILABLE: 'ERR_TRANSPORT_UNAVAILABLE',
	  ERR_TRANSPORT_DIAL_FAILED: 'ERR_TRANSPORT_DIAL_FAILED',
	  ERR_UNSUPPORTED_PROTOCOL: 'ERR_UNSUPPORTED_PROTOCOL',
	  ERR_INVALID_MULTIADDR: 'ERR_INVALID_MULTIADDR',
	  ERR_SIGNATURE_NOT_VALID: 'ERR_SIGNATURE_NOT_VALID',
	  ERR_FIND_SELF: 'ERR_FIND_SELF',
	  ERR_NO_ROUTERS_AVAILABLE: 'ERR_NO_ROUTERS_AVAILABLE',
	  ERR_CONNECTION_NOT_MULTIPLEXED: 'ERR_CONNECTION_NOT_MULTIPLEXED',
	  ERR_NO_DIAL_TOKENS: 'ERR_NO_DIAL_TOKENS',
	  ERR_KEYCHAIN_REQUIRED: 'ERR_KEYCHAIN_REQUIRED',
	  ERR_INVALID_CMS: 'ERR_INVALID_CMS',
	  ERR_MISSING_KEYS: 'ERR_MISSING_KEYS',
	  ERR_NO_KEY: 'ERR_NO_KEY',
	  ERR_INVALID_KEY_NAME: 'ERR_INVALID_KEY_NAME',
	  ERR_INVALID_KEY_TYPE: 'ERR_INVALID_KEY_TYPE',
	  ERR_KEY_ALREADY_EXISTS: 'ERR_KEY_ALREADY_EXISTS',
	  ERR_INVALID_KEY_SIZE: 'ERR_INVALID_KEY_SIZE',
	  ERR_KEY_NOT_FOUND: 'ERR_KEY_NOT_FOUND',
	  ERR_OLD_KEY_NAME_INVALID: 'ERR_OLD_KEY_NAME_INVALID',
	  ERR_NEW_KEY_NAME_INVALID: 'ERR_NEW_KEY_NAME_INVALID',
	  ERR_PASSWORD_REQUIRED: 'ERR_PASSWORD_REQUIRED',
	  ERR_PEM_REQUIRED: 'ERR_PEM_REQUIRED',
	  ERR_CANNOT_READ_KEY: 'ERR_CANNOT_READ_KEY',
	  ERR_MISSING_PRIVATE_KEY: 'ERR_MISSING_PRIVATE_KEY',
	  ERR_INVALID_OLD_PASS_TYPE: 'ERR_INVALID_OLD_PASS_TYPE',
	  ERR_INVALID_NEW_PASS_TYPE: 'ERR_INVALID_NEW_PASS_TYPE',
	  ERR_INVALID_PASS_LENGTH: 'ERR_INVALID_PASS_LENGTH',
	  ERR_NOT_IMPLEMENTED: 'ERR_NOT_IMPLEMENTED',
	  ERR_WRONG_PING_ACK: 'ERR_WRONG_PING_ACK'
	};

	/*eslint-disable*/

	var $protobuf$6 = minimal;

	// Common aliases
	var $Reader$7 = $protobuf$6.Reader, $Writer$7 = $protobuf$6.Writer, $util$7 = $protobuf$6.util;

	// Exported root namespace
	var $root$7 = $protobuf$6.roots["libp2p-envelope"] || ($protobuf$6.roots["libp2p-envelope"] = {});

	$root$7.Envelope = (function() {

	    /**
	     * Properties of an Envelope.
	     * @exports IEnvelope
	     * @interface IEnvelope
	     * @property {Uint8Array|null} [publicKey] Envelope publicKey
	     * @property {Uint8Array|null} [payloadType] Envelope payloadType
	     * @property {Uint8Array|null} [payload] Envelope payload
	     * @property {Uint8Array|null} [signature] Envelope signature
	     */

	    /**
	     * Constructs a new Envelope.
	     * @exports Envelope
	     * @classdesc Represents an Envelope.
	     * @implements IEnvelope
	     * @constructor
	     * @param {IEnvelope=} [p] Properties to set
	     */
	    function Envelope(p) {
	        if (p)
	            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                if (p[ks[i]] != null)
	                    this[ks[i]] = p[ks[i]];
	    }

	    /**
	     * Envelope publicKey.
	     * @member {Uint8Array} publicKey
	     * @memberof Envelope
	     * @instance
	     */
	    Envelope.prototype.publicKey = $util$7.newBuffer([]);

	    /**
	     * Envelope payloadType.
	     * @member {Uint8Array} payloadType
	     * @memberof Envelope
	     * @instance
	     */
	    Envelope.prototype.payloadType = $util$7.newBuffer([]);

	    /**
	     * Envelope payload.
	     * @member {Uint8Array} payload
	     * @memberof Envelope
	     * @instance
	     */
	    Envelope.prototype.payload = $util$7.newBuffer([]);

	    /**
	     * Envelope signature.
	     * @member {Uint8Array} signature
	     * @memberof Envelope
	     * @instance
	     */
	    Envelope.prototype.signature = $util$7.newBuffer([]);

	    /**
	     * Encodes the specified Envelope message. Does not implicitly {@link Envelope.verify|verify} messages.
	     * @function encode
	     * @memberof Envelope
	     * @static
	     * @param {IEnvelope} m Envelope message or plain object to encode
	     * @param {$protobuf.Writer} [w] Writer to encode to
	     * @returns {$protobuf.Writer} Writer
	     */
	    Envelope.encode = function encode(m, w) {
	        if (!w)
	            w = $Writer$7.create();
	        if (m.publicKey != null && Object.hasOwnProperty.call(m, "publicKey"))
	            w.uint32(10).bytes(m.publicKey);
	        if (m.payloadType != null && Object.hasOwnProperty.call(m, "payloadType"))
	            w.uint32(18).bytes(m.payloadType);
	        if (m.payload != null && Object.hasOwnProperty.call(m, "payload"))
	            w.uint32(26).bytes(m.payload);
	        if (m.signature != null && Object.hasOwnProperty.call(m, "signature"))
	            w.uint32(42).bytes(m.signature);
	        return w;
	    };

	    /**
	     * Decodes an Envelope message from the specified reader or buffer.
	     * @function decode
	     * @memberof Envelope
	     * @static
	     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	     * @param {number} [l] Message length if known beforehand
	     * @returns {Envelope} Envelope
	     * @throws {Error} If the payload is not a reader or valid buffer
	     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	     */
	    Envelope.decode = function decode(r, l) {
	        if (!(r instanceof $Reader$7))
	            r = $Reader$7.create(r);
	        var c = l === undefined ? r.len : r.pos + l, m = new $root$7.Envelope();
	        while (r.pos < c) {
	            var t = r.uint32();
	            switch (t >>> 3) {
	            case 1:
	                m.publicKey = r.bytes();
	                break;
	            case 2:
	                m.payloadType = r.bytes();
	                break;
	            case 3:
	                m.payload = r.bytes();
	                break;
	            case 5:
	                m.signature = r.bytes();
	                break;
	            default:
	                r.skipType(t & 7);
	                break;
	            }
	        }
	        return m;
	    };

	    /**
	     * Creates an Envelope message from a plain object. Also converts values to their respective internal types.
	     * @function fromObject
	     * @memberof Envelope
	     * @static
	     * @param {Object.<string,*>} d Plain object
	     * @returns {Envelope} Envelope
	     */
	    Envelope.fromObject = function fromObject(d) {
	        if (d instanceof $root$7.Envelope)
	            return d;
	        var m = new $root$7.Envelope();
	        if (d.publicKey != null) {
	            if (typeof d.publicKey === "string")
	                $util$7.base64.decode(d.publicKey, m.publicKey = $util$7.newBuffer($util$7.base64.length(d.publicKey)), 0);
	            else if (d.publicKey.length)
	                m.publicKey = d.publicKey;
	        }
	        if (d.payloadType != null) {
	            if (typeof d.payloadType === "string")
	                $util$7.base64.decode(d.payloadType, m.payloadType = $util$7.newBuffer($util$7.base64.length(d.payloadType)), 0);
	            else if (d.payloadType.length)
	                m.payloadType = d.payloadType;
	        }
	        if (d.payload != null) {
	            if (typeof d.payload === "string")
	                $util$7.base64.decode(d.payload, m.payload = $util$7.newBuffer($util$7.base64.length(d.payload)), 0);
	            else if (d.payload.length)
	                m.payload = d.payload;
	        }
	        if (d.signature != null) {
	            if (typeof d.signature === "string")
	                $util$7.base64.decode(d.signature, m.signature = $util$7.newBuffer($util$7.base64.length(d.signature)), 0);
	            else if (d.signature.length)
	                m.signature = d.signature;
	        }
	        return m;
	    };

	    /**
	     * Creates a plain object from an Envelope message. Also converts values to other types if specified.
	     * @function toObject
	     * @memberof Envelope
	     * @static
	     * @param {Envelope} m Envelope
	     * @param {$protobuf.IConversionOptions} [o] Conversion options
	     * @returns {Object.<string,*>} Plain object
	     */
	    Envelope.toObject = function toObject(m, o) {
	        if (!o)
	            o = {};
	        var d = {};
	        if (o.defaults) {
	            if (o.bytes === String)
	                d.publicKey = "";
	            else {
	                d.publicKey = [];
	                if (o.bytes !== Array)
	                    d.publicKey = $util$7.newBuffer(d.publicKey);
	            }
	            if (o.bytes === String)
	                d.payloadType = "";
	            else {
	                d.payloadType = [];
	                if (o.bytes !== Array)
	                    d.payloadType = $util$7.newBuffer(d.payloadType);
	            }
	            if (o.bytes === String)
	                d.payload = "";
	            else {
	                d.payload = [];
	                if (o.bytes !== Array)
	                    d.payload = $util$7.newBuffer(d.payload);
	            }
	            if (o.bytes === String)
	                d.signature = "";
	            else {
	                d.signature = [];
	                if (o.bytes !== Array)
	                    d.signature = $util$7.newBuffer(d.signature);
	            }
	        }
	        if (m.publicKey != null && m.hasOwnProperty("publicKey")) {
	            d.publicKey = o.bytes === String ? $util$7.base64.encode(m.publicKey, 0, m.publicKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.publicKey) : m.publicKey;
	        }
	        if (m.payloadType != null && m.hasOwnProperty("payloadType")) {
	            d.payloadType = o.bytes === String ? $util$7.base64.encode(m.payloadType, 0, m.payloadType.length) : o.bytes === Array ? Array.prototype.slice.call(m.payloadType) : m.payloadType;
	        }
	        if (m.payload != null && m.hasOwnProperty("payload")) {
	            d.payload = o.bytes === String ? $util$7.base64.encode(m.payload, 0, m.payload.length) : o.bytes === Array ? Array.prototype.slice.call(m.payload) : m.payload;
	        }
	        if (m.signature != null && m.hasOwnProperty("signature")) {
	            d.signature = o.bytes === String ? $util$7.base64.encode(m.signature, 0, m.signature.length) : o.bytes === Array ? Array.prototype.slice.call(m.signature) : m.signature;
	        }
	        return d;
	    };

	    /**
	     * Converts this Envelope to JSON.
	     * @function toJSON
	     * @memberof Envelope
	     * @instance
	     * @returns {Object.<string,*>} JSON object
	     */
	    Envelope.prototype.toJSON = function toJSON() {
	        return this.constructor.toObject(this, $protobuf$6.util.toJSONOptions);
	    };

	    return Envelope;
	})();

	var envelope$1 = $root$7;

	const errCode$o = errCode$q;
	const { concat: uint8arraysConcat } = require$$9;
	const { fromString: uint8arraysFromString } = require$$5$3;
	// @ts-ignore libp2p-crypto does not support types
	const cryptoKeys = keys$2;
	const PeerId$q = src$o.exports;
	const varint$5 = varint$9;
	const { equals: uint8arraysEquals } = require$$7$1;

	const { codes: codes$j } = errors$3;
	const { Envelope: Protobuf$1 } = envelope$1;

	/**
	 * @typedef {import('libp2p-interfaces/src/record/types').Record} Record
	 */

	class Envelope$4 {
	  /**
	   * The Envelope is responsible for keeping an arbitrary signed record
	   * by a libp2p peer.
	   *
	   * @class
	   * @param {object} params
	   * @param {PeerId} params.peerId
	   * @param {Uint8Array} params.payloadType
	   * @param {Uint8Array} params.payload - marshaled record
	   * @param {Uint8Array} params.signature - signature of the domain string :: type hint :: payload.
	   */
	  constructor ({ peerId, payloadType, payload, signature }) {
	    this.peerId = peerId;
	    this.payloadType = payloadType;
	    this.payload = payload;
	    this.signature = signature;

	    // Cache
	    this._marshal = undefined;
	  }

	  /**
	   * Marshal the envelope content.
	   *
	   * @returns {Uint8Array}
	   */
	  marshal () {
	    if (this._marshal) {
	      return this._marshal
	    }

	    const publicKey = cryptoKeys.marshalPublicKey(this.peerId.pubKey);

	    this._marshal = Protobuf$1.encode({
	      publicKey: publicKey,
	      payloadType: this.payloadType,
	      payload: this.payload,
	      signature: this.signature
	    }).finish();

	    return this._marshal
	  }

	  /**
	   * Verifies if the other Envelope is identical to this one.
	   *
	   * @param {Envelope} other
	   * @returns {boolean}
	   */
	  equals (other) {
	    return uint8arraysEquals(this.peerId.pubKey.bytes, other.peerId.pubKey.bytes) &&
	      uint8arraysEquals(this.payloadType, other.payloadType) &&
	      uint8arraysEquals(this.payload, other.payload) &&
	      uint8arraysEquals(this.signature, other.signature)
	  }

	  /**
	   * Validate envelope data signature for the given domain.
	   *
	   * @param {string} domain
	   * @returns {Promise<boolean>}
	   */
	  validate (domain) {
	    const signData = formatSignaturePayload(domain, this.payloadType, this.payload);

	    return this.peerId.pubKey.verify(signData, this.signature)
	  }
	}

	/**
	 * Helper function that prepares a Uint8Array to sign or verify a signature.
	 *
	 * @param {string} domain
	 * @param {Uint8Array} payloadType
	 * @param {Uint8Array} payload
	 * @returns {Uint8Array}
	 */
	const formatSignaturePayload = (domain, payloadType, payload) => {
	  // When signing, a peer will prepare a Uint8Array by concatenating the following:
	  // - The length of the domain separation string string in bytes
	  // - The domain separation string, encoded as UTF-8
	  // - The length of the payload_type field in bytes
	  // - The value of the payload_type field
	  // - The length of the payload field in bytes
	  // - The value of the payload field

	  const domainUint8Array = uint8arraysFromString(domain);
	  const domainLength = varint$5.encode(domainUint8Array.byteLength);
	  const payloadTypeLength = varint$5.encode(payloadType.length);
	  const payloadLength = varint$5.encode(payload.length);

	  return uint8arraysConcat([
	    new Uint8Array(domainLength),
	    domainUint8Array,
	    new Uint8Array(payloadTypeLength),
	    payloadType,
	    new Uint8Array(payloadLength),
	    payload
	  ])
	};

	/**
	 * Unmarshal a serialized Envelope protobuf message.
	 *
	 * @param {Uint8Array} data
	 * @returns {Promise<Envelope>}
	 */
	Envelope$4.createFromProtobuf = async (data) => {
	  const envelopeData = Protobuf$1.decode(data);
	  const peerId = await PeerId$q.createFromPubKey(envelopeData.publicKey);

	  return new Envelope$4({
	    peerId,
	    payloadType: envelopeData.payloadType,
	    payload: envelopeData.payload,
	    signature: envelopeData.signature
	  })
	};

	/**
	 * Seal marshals the given Record, places the marshaled bytes inside an Envelope
	 * and signs it with the given peerId's private key.
	 *
	 * @async
	 * @param {Record} record
	 * @param {PeerId} peerId
	 * @returns {Promise<Envelope>}
	 */
	Envelope$4.seal = async (record, peerId) => {
	  const domain = record.domain;
	  const payloadType = record.codec;
	  const payload = record.marshal();

	  const signData = formatSignaturePayload(domain, payloadType, payload);
	  const signature = await peerId.privKey.sign(signData);

	  return new Envelope$4({
	    peerId,
	    payloadType,
	    payload,
	    signature
	  })
	};

	/**
	 * Open and certify a given marshalled envelope.
	 * Data is unmarshalled and the signature validated for the given domain.
	 *
	 * @param {Uint8Array} data
	 * @param {string} domain
	 * @returns {Promise<Envelope>}
	 */
	Envelope$4.openAndCertify = async (data, domain) => {
	  const envelope = await Envelope$4.createFromProtobuf(data);
	  const valid = await envelope.validate(domain);

	  if (!valid) {
	    throw errCode$o(new Error('envelope signature is not valid for the given domain'), codes$j.ERR_SIGNATURE_NOT_VALID)
	  }

	  return envelope
	};

	var envelope = Envelope$4;

	var __createBinding$6 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$6 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$6 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$6(result, mod, k);
	    __setModuleDefault$6(result, mod);
	    return result;
	};
	var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	const pubsub_1 = __importStar$6(pubsub);
	const message_cache_1 = messageCache;
	const rpc_1 = rpc$1.exports;
	const constants$c = __importStar$6(constants$f);
	const heartbeat_1 = heartbeat;
	const get_gossip_peers_1 = getGossipPeers$1;
	const utils_1$6 = utils$r;
	const score_1 = score;
	const tracer_1 = tracer;
	const time_cache_1 = timeCache;
	const PeerId$p = src$o.exports;
	// eslint-disable-next-line @typescript-eslint/ban-ts-comment
	// @ts-ignore
	const Envelope$3 = envelope;
	const constants_1$2 = constants$f;
	class Gossipsub extends pubsub_1.default {
	    // TODO: add remaining props
	    /**
	     * @param {Libp2p} libp2p
	     * @param {Object} [options]
	     * @param {boolean} [options.emitSelf = false] if publish should emit to self, if subscribed
	     * @param {boolean} [options.canRelayMessage = false] - if can relay messages not subscribed
	     * @param {boolean} [options.gossipIncoming = true] if incoming messages on a subscribed topic should be automatically gossiped
	     * @param {boolean} [options.fallbackToFloodsub = true] if dial should fallback to floodsub
	     * @param {boolean} [options.floodPublish = true] if self-published messages should be sent to all peers
	     * @param {boolean} [options.doPX = false] whether PX is enabled; this should be enabled in bootstrappers and other well connected/trusted nodes.
	     * @param {Object} [options.messageCache] override the default MessageCache
	     * @param {FastMsgIdFn} [options.fastMsgIdFn] fast message id function
	     * @param {string} [options.globalSignaturePolicy = "StrictSign"] signing policy to apply across all messages
	     * @param {Object} [options.scoreParams] peer score parameters
	     * @param {Object} [options.scoreThresholds] peer score thresholds
	     * @param {AddrInfo[]} [options.directPeers] peers with which we will maintain direct connections
	     * @constructor
	     */
	    constructor(libp2p, options = {}) {
	        var _a;
	        const multicodecs = [constants$c.GossipsubIDv11, constants$c.GossipsubIDv10];
	        const opts = Object.assign(Object.assign({ gossipIncoming: true, fallbackToFloodsub: true, floodPublish: true, doPX: false, directPeers: [], D: constants$c.GossipsubD, Dlo: constants$c.GossipsubDlo, Dhi: constants$c.GossipsubDhi, Dscore: constants$c.GossipsubDscore, Dout: constants$c.GossipsubDout, Dlazy: constants$c.GossipsubDlazy, heartbeatInterval: constants$c.GossipsubHeartbeatInterval, fanoutTTL: constants$c.GossipsubFanoutTTL, mcacheLength: constants$c.GossipsubHistoryLength, mcacheGossip: constants$c.GossipsubHistoryGossip, seenTTL: constants$c.GossipsubSeenTTL }, options), { scoreParams: score_1.createPeerScoreParams(options.scoreParams), scoreThresholds: score_1.createPeerScoreThresholds(options.scoreThresholds) });
	        // Also wants to get notified of peers connected using floodsub
	        if (opts.fallbackToFloodsub) {
	            multicodecs.push(constants$c.FloodsubID);
	        }
	        super(Object.assign({ debugName: 'libp2p:gossipsub', multicodecs,
	            libp2p }, opts));
	        this._options = opts;
	        /**
	         * Direct peers
	         * @type {Set<string>}
	         */
	        this.direct = new Set(opts.directPeers.map(p => p.id.toB58String()));
	        /**
	         * Map of peer id and AcceptRequestWhileListEntry
	         *
	         * @type {Map<string, AcceptFromWhitelistEntry}
	         */
	        this.acceptFromWhitelist = new Map();
	        // set direct peer addresses in the address book
	        opts.directPeers.forEach(p => {
	            libp2p.peerStore.addressBook.add(p.id, p.addrs);
	        });
	        /**
	         * Cache of seen messages
	         *
	         * @type {SimpleTimeCache}
	         */
	        this.seenCache = new time_cache_1.SimpleTimeCache({ validityMs: opts.seenTTL });
	        /**
	         * Map of topic meshes
	         * topic => peer id set
	         *
	         * @type {Map<string, Set<string>>}
	         */
	        this.mesh = new Map();
	        /**
	         * Map of topics to set of peers. These mesh peers are the ones to which we are publishing without a topic membership
	         * topic => peer id set
	         *
	         * @type {Map<string, Set<string>>}
	         */
	        this.fanout = new Map();
	        /**
	         * Map of last publish time for fanout topics
	         * topic => last publish time
	         *
	         * @type {Map<string, number>}
	         */
	        this.lastpub = new Map();
	        /**
	         * Map of pending messages to gossip
	         * peer id => control messages
	         *
	         * @type {Map<string, Array<RPC.IControlIHave object>> }
	         */
	        this.gossip = new Map();
	        /**
	         * Map of control messages
	         * peer id => control message
	         *
	         * @type {Map<string, RPC.IControlMessage object>}
	         */
	        this.control = new Map();
	        /**
	         * Number of IHAVEs received from peer in the last heartbeat
	         * @type {Map<string, number>}
	         */
	        this.peerhave = new Map();
	        /**
	         * Number of messages we have asked from peer in the last heartbeat
	         * @type {Map<string, number>}
	         */
	        this.iasked = new Map();
	        /**
	         * Prune backoff map
	         */
	        this.backoff = new Map();
	        /**
	         * Connection direction cache, marks peers with outbound connections
	         * peer id => direction
	         *
	         * @type {Map<string, boolean>}
	         */
	        this.outbound = new Map();
	        /**
	         * A message cache that contains the messages for last few hearbeat ticks
	         */
	        this.messageCache = options.messageCache || new message_cache_1.MessageCache(opts.mcacheGossip, opts.mcacheLength);
	        /**
	         * A fast message id function used for internal message de-duplication
	         */
	        this.getFastMsgIdStr = (_a = options.fastMsgIdFn) !== null && _a !== void 0 ? _a : undefined;
	        /**
	         * Maps fast message-id to canonical message-id
	         */
	        this.fastMsgIdCache = options.fastMsgIdFn ? new time_cache_1.SimpleTimeCache({ validityMs: opts.seenTTL }) : undefined;
	        /**
	         * A heartbeat timer that maintains the mesh
	         */
	        this.heartbeat = new heartbeat_1.Heartbeat(this);
	        /**
	         * Number of heartbeats since the beginning of time
	         * This allows us to amortize some resource cleanup -- eg: backoff cleanup
	         */
	        this.heartbeatTicks = 0;
	        /**
	         * Tracks IHAVE/IWANT promises broken by peers
	         */
	        this.gossipTracer = new tracer_1.IWantTracer();
	        /**
	         * libp2p
	         */
	        this._libp2p = libp2p;
	        /**
	         * Peer score tracking
	         */
	        this.score = new score_1.PeerScore(this._options.scoreParams, libp2p.connectionManager);
	    }
	    /**
	     * Decode a Uint8Array into an RPC object
	     * Overrided to use an extended protocol-specific protobuf decoder
	     * @override
	     * @param {Uint8Array} bytes
	     * @returns {RPC}
	     */
	    _decodeRpc(bytes) {
	        return rpc_1.RPC.decode(bytes);
	    }
	    /**
	     * Encode an RPC object into a Uint8Array
	     * Overrided to use an extended protocol-specific protobuf encoder
	     * @override
	     * @param {RPC} rpc
	     * @returns {Uint8Array}
	     */
	    _encodeRpc(rpc) {
	        return rpc_1.RPC.encode(rpc).finish();
	    }
	    /**
	     * Add a peer to the router
	     * @override
	     * @param {PeerId} peerId
	     * @param {string} protocol
	     * @returns {PeerStreams}
	     */
	    _addPeer(peerId, protocol) {
	        const p = super._addPeer(peerId, protocol);
	        // Add to peer scoring
	        this.score.addPeer(peerId.toB58String());
	        // track the connection direction
	        let outbound = false;
	        for (const c of this._libp2p.connectionManager.getAll(peerId)) {
	            if (c.stat.direction === 'outbound') {
	                if (Array.from(c.registry.values()).some(rvalue => protocol === rvalue.protocol)) {
	                    outbound = true;
	                    break;
	                }
	            }
	        }
	        this.outbound.set(p.id.toB58String(), outbound);
	        return p;
	    }
	    /**
	     * Removes a peer from the router
	     * @override
	     * @param {PeerId} peer
	     * @returns {PeerStreams | undefined}
	     */
	    _removePeer(peerId) {
	        const peerStreams = super._removePeer(peerId);
	        const id = peerId.toB58String();
	        // Remove this peer from the mesh
	        // eslint-disable-next-line no-unused-vars
	        for (const peers of this.mesh.values()) {
	            peers.delete(id);
	        }
	        // Remove this peer from the fanout
	        // eslint-disable-next-line no-unused-vars
	        for (const peers of this.fanout.values()) {
	            peers.delete(id);
	        }
	        // Remove from gossip mapping
	        this.gossip.delete(id);
	        // Remove from control mapping
	        this.control.delete(id);
	        // Remove from backoff mapping
	        this.outbound.delete(id);
	        // Remove from peer scoring
	        this.score.removePeer(id);
	        this.acceptFromWhitelist.delete(id);
	        return peerStreams;
	    }
	    /**
	     * Handles an rpc request from a peer
	     *
	     * @override
	     * @param {String} idB58Str
	     * @param {PeerStreams} peerStreams
	     * @param {RPC} rpc
	     * @returns {Promise<boolean>}
	     */
	    _processRpc(id, peerStreams, rpc) {
	        const _super = Object.create(null, {
	            _processRpc: { get: () => super._processRpc }
	        });
	        return __awaiter(this, void 0, void 0, function* () {
	            if (yield _super._processRpc.call(this, id, peerStreams, rpc)) {
	                if (rpc.control) {
	                    yield this._processRpcControlMessage(id, rpc.control);
	                }
	                return true;
	            }
	            return false;
	        });
	    }
	    /**
	     * Handles an rpc control message from a peer
	     * @param {string} id peer id
	     * @param {RPC.IControlMessage} controlMsg
	     * @returns {void}
	     */
	    _processRpcControlMessage(id, controlMsg) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (!controlMsg) {
	                return;
	            }
	            const iwant = controlMsg.ihave ? this._handleIHave(id, controlMsg.ihave) : [];
	            const ihave = controlMsg.iwant ? this._handleIWant(id, controlMsg.iwant) : [];
	            const prune = controlMsg.graft ? yield this._handleGraft(id, controlMsg.graft) : [];
	            controlMsg.prune && this._handlePrune(id, controlMsg.prune);
	            if (!iwant.length && !ihave.length && !prune.length) {
	                return;
	            }
	            const outRpc = utils_1$6.createGossipRpc(ihave, { iwant, prune });
	            this._sendRpc(id, outRpc);
	        });
	    }
	    /**
	     * Process incoming message,
	     * emitting locally and forwarding on to relevant floodsub and gossipsub peers
	     * @override
	     * @param {InMessage} msg
	     * @returns {Promise<void>}
	     */
	    _processRpcMessage(msg) {
	        const _super = Object.create(null, {
	            _processRpcMessage: { get: () => super._processRpcMessage }
	        });
	        return __awaiter(this, void 0, void 0, function* () {
	            let canonicalMsgIdStr;
	            if (this.getFastMsgIdStr && this.fastMsgIdCache) {
	                // check duplicate
	                const fastMsgIdStr = yield this.getFastMsgIdStr(msg);
	                canonicalMsgIdStr = this.fastMsgIdCache.get(fastMsgIdStr);
	                if (canonicalMsgIdStr !== undefined) {
	                    this.score.duplicateMessage(msg, canonicalMsgIdStr);
	                    return;
	                }
	                canonicalMsgIdStr = utils_1$6.messageIdToString(yield this.getMsgId(msg));
	                this.fastMsgIdCache.put(fastMsgIdStr, canonicalMsgIdStr);
	            }
	            else {
	                // check duplicate
	                canonicalMsgIdStr = utils_1$6.messageIdToString(yield this.getMsgId(msg));
	                if (this.seenCache.has(canonicalMsgIdStr)) {
	                    this.score.duplicateMessage(msg, canonicalMsgIdStr);
	                    return;
	                }
	            }
	            // put in cache
	            this.seenCache.put(canonicalMsgIdStr);
	            yield this.score.validateMessage(canonicalMsgIdStr);
	            yield _super._processRpcMessage.call(this, msg);
	        });
	    }
	    /**
	     * Whether to accept a message from a peer
	     * @override
	     * @param {string} id
	     * @returns {boolean}
	     */
	    _acceptFrom(id) {
	        if (this.direct.has(id)) {
	            return true;
	        }
	        const now = Date.now();
	        const entry = this.acceptFromWhitelist.get(id);
	        if (entry &&
	            entry.messagesAccepted < constants_1$2.ACCEPT_FROM_WHITELIST_MAX_MESSAGES &&
	            entry.acceptUntil >= now) {
	            entry.messagesAccepted += 1;
	            return true;
	        }
	        const score = this.score.score(id);
	        if (score >= constants_1$2.ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE) {
	            // peer is unlikely to be able to drop its score to `graylistThreshold`
	            // after 128 messages or 1s
	            this.acceptFromWhitelist.set(id, {
	                messagesAccepted: 0,
	                acceptUntil: now + constants_1$2.ACCEPT_FROM_WHITELIST_DURATION_MS
	            });
	        }
	        else {
	            this.acceptFromWhitelist.delete(id);
	        }
	        return score >= this._options.scoreThresholds.graylistThreshold;
	    }
	    /**
	     * Validate incoming message
	     * @override
	     * @param {InMessage} msg
	     * @returns {Promise<void>}
	     */
	    validate(msg) {
	        const _super = Object.create(null, {
	            validate: { get: () => super.validate }
	        });
	        return __awaiter(this, void 0, void 0, function* () {
	            try {
	                yield _super.validate.call(this, msg);
	            }
	            catch (e) {
	                const canonicalMsgIdStr = yield this.getCanonicalMsgIdStr(msg);
	                this.score.rejectMessage(msg, canonicalMsgIdStr, e.code);
	                this.gossipTracer.rejectMessage(canonicalMsgIdStr, e.code);
	                throw e;
	            }
	        });
	    }
	    /**
	     * Handles IHAVE messages
	     * @param {string} id peer id
	     * @param {Array<RPC.IControlIHave>} ihave
	     * @returns {RPC.IControlIWant}
	     */
	    _handleIHave(id, ihave) {
	        if (!ihave.length) {
	            return [];
	        }
	        // we ignore IHAVE gossip from any peer whose score is below the gossips threshold
	        const score = this.score.score(id);
	        if (score < this._options.scoreThresholds.gossipThreshold) {
	            this.log('IHAVE: ignoring peer %s with score below threshold [ score = %d ]', id, score);
	            return [];
	        }
	        // IHAVE flood protection
	        const peerhave = (this.peerhave.get(id) || 0) + 1;
	        this.peerhave.set(id, peerhave);
	        if (peerhave > constants$c.GossipsubMaxIHaveMessages) {
	            this.log('IHAVE: peer %s has advertised too many times (%d) within this heartbeat interval; ignoring', id, peerhave);
	            return [];
	        }
	        const iasked = this.iasked.get(id) || 0;
	        if (iasked >= constants$c.GossipsubMaxIHaveLength) {
	            this.log('IHAVE: peer %s has already advertised too many messages (%d); ignoring', id, iasked);
	            return [];
	        }
	        // string msgId => msgId
	        const iwant = new Map();
	        ihave.forEach(({ topicID, messageIDs }) => {
	            if (!topicID || !messageIDs || !this.mesh.has(topicID)) {
	                return;
	            }
	            messageIDs.forEach((msgId) => {
	                const msgIdStr = utils_1$6.messageIdToString(msgId);
	                if (this.seenCache.has(msgIdStr)) {
	                    return;
	                }
	                iwant.set(msgIdStr, msgId);
	            });
	        });
	        if (!iwant.size) {
	            return [];
	        }
	        let iask = iwant.size;
	        if (iask + iasked > constants$c.GossipsubMaxIHaveLength) {
	            iask = constants$c.GossipsubMaxIHaveLength - iasked;
	        }
	        this.log('IHAVE: Asking for %d out of %d messages from %s', iask, iwant.size, id);
	        let iwantList = Array.from(iwant.values());
	        // ask in random order
	        utils_1$6.shuffle(iwantList);
	        // truncate to the messages we are actually asking for and update the iasked counter
	        iwantList = iwantList.slice(0, iask);
	        this.iasked.set(id, iasked + iask);
	        this.gossipTracer.addPromise(id, iwantList);
	        return [{
	                messageIDs: iwantList
	            }];
	    }
	    /**
	     * Handles IWANT messages
	     * Returns messages to send back to peer
	     * @param {string} id peer id
	     * @param {Array<RPC.IControlIWant>} iwant
	     * @returns {Array<RPC.IMessage>}
	     */
	    _handleIWant(id, iwant) {
	        if (!iwant.length) {
	            return [];
	        }
	        // we don't respond to IWANT requests from any per whose score is below the gossip threshold
	        const score = this.score.score(id);
	        if (score < this._options.scoreThresholds.gossipThreshold) {
	            this.log('IWANT: ignoring peer %s with score below threshold [score = %d]', id, score);
	            return [];
	        }
	        // @type {Map<string, Message>}
	        const ihave = new Map();
	        iwant.forEach(({ messageIDs }) => {
	            messageIDs && messageIDs.forEach((msgId) => {
	                const msgIdStr = utils_1$6.messageIdToString(msgId);
	                const [msg, count] = this.messageCache.getForPeer(msgIdStr, id);
	                if (!msg) {
	                    return;
	                }
	                if (count > constants$c.GossipsubGossipRetransmission) {
	                    this.log('IWANT: Peer %s has asked for message %s too many times: ignoring request', id, msgId);
	                    return;
	                }
	                ihave.set(msgIdStr, msg);
	            });
	        });
	        if (!ihave.size) {
	            return [];
	        }
	        this.log('IWANT: Sending %d messages to %s', ihave.size, id);
	        return Array.from(ihave.values()).map(pubsub_1.utils.normalizeOutRpcMessage);
	    }
	    /**
	     * Handles Graft messages
	     * @param {string} id peer id
	     * @param {Array<RPC.IControlGraft>} graft
	     * @return {Promise<RPC.IControlPrune[]>}
	     */
	    _handleGraft(id, graft) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const prune = [];
	            const score = this.score.score(id);
	            const now = this._now();
	            let doPX = this._options.doPX;
	            graft.forEach(({ topicID }) => {
	                var _a;
	                if (!topicID) {
	                    return;
	                }
	                const peersInMesh = this.mesh.get(topicID);
	                if (!peersInMesh) {
	                    // don't do PX when there is an unknown topic to avoid leaking our peers
	                    doPX = false;
	                    // spam hardening: ignore GRAFTs for unknown topics
	                    return;
	                }
	                // check if peer is already in the mesh; if so do nothing
	                if (peersInMesh.has(id)) {
	                    return;
	                }
	                // we don't GRAFT to/from direct peers; complain loudly if this happens
	                if (this.direct.has(id)) {
	                    this.log('GRAFT: ignoring request from direct peer %s', id);
	                    // this is possibly a bug from a non-reciprical configuration; send a PRUNE
	                    prune.push(topicID);
	                    // but don't px
	                    doPX = false;
	                    return;
	                }
	                // make sure we are not backing off that peer
	                const expire = (_a = this.backoff.get(topicID)) === null || _a === void 0 ? void 0 : _a.get(id);
	                if (typeof expire === 'number' && now < expire) {
	                    this.log('GRAFT: ignoring backed off peer %s', id);
	                    // add behavioral penalty
	                    this.score.addPenalty(id, 1);
	                    // no PX
	                    doPX = false;
	                    // check the flood cutoff -- is the GRAFT coming too fast?
	                    const floodCutoff = expire + constants$c.GossipsubGraftFloodThreshold - constants$c.GossipsubPruneBackoff;
	                    if (now < floodCutoff) {
	                        // extra penalty
	                        this.score.addPenalty(id, 1);
	                    }
	                    // refresh the backoff
	                    this._addBackoff(id, topicID);
	                    prune.push(topicID);
	                    return;
	                }
	                // check the score
	                if (score < 0) {
	                    // we don't GRAFT peers with negative score
	                    this.log('GRAFT: ignoring peer %s with negative score: score=%d, topic=%s', id, score, topicID);
	                    // we do send them PRUNE however, because it's a matter of protocol correctness
	                    prune.push(topicID);
	                    // but we won't PX to them
	                    doPX = false;
	                    // add/refresh backoff so that we don't reGRAFT too early even if the score decays
	                    this._addBackoff(id, topicID);
	                    return;
	                }
	                // check the number of mesh peers; if it is at (or over) Dhi, we only accept grafts
	                // from peers with outbound connections; this is a defensive check to restrict potential
	                // mesh takeover attacks combined with love bombing
	                if (peersInMesh.size >= this._options.Dhi && !this.outbound.get(id)) {
	                    prune.push(topicID);
	                    this._addBackoff(id, topicID);
	                    return;
	                }
	                this.log('GRAFT: Add mesh link from %s in %s', id, topicID);
	                this.score.graft(id, topicID);
	                peersInMesh.add(id);
	            });
	            if (!prune.length) {
	                return [];
	            }
	            return Promise.all(prune.map(topic => this._makePrune(id, topic, doPX)));
	        });
	    }
	    /**
	     * Handles Prune messages
	     * @param {string} id peer id
	     * @param {Array<RPC.IControlPrune>} prune
	     * @returns {void}
	     */
	    _handlePrune(id, prune) {
	        const score = this.score.score(id);
	        prune.forEach(({ topicID, backoff, peers }) => {
	            if (!topicID) {
	                return;
	            }
	            const peersInMesh = this.mesh.get(topicID);
	            if (!peersInMesh) {
	                return;
	            }
	            this.log('PRUNE: Remove mesh link to %s in %s', id, topicID);
	            this.score.prune(id, topicID);
	            peersInMesh.delete(id);
	            // is there a backoff specified by the peer? if so obey it
	            if (typeof backoff === 'number' && backoff > 0) {
	                this._doAddBackoff(id, topicID, backoff * 1000);
	            }
	            else {
	                this._addBackoff(id, topicID);
	            }
	            // PX
	            if (peers && peers.length) {
	                // we ignore PX from peers with insufficient scores
	                if (score < this._options.scoreThresholds.acceptPXThreshold) {
	                    this.log('PRUNE: ignoring PX from peer %s with insufficient score [score = %d, topic = %s]', id, score, topicID);
	                    return;
	                }
	                this._pxConnect(peers);
	            }
	        });
	    }
	    /**
	     * Add standard backoff log for a peer in a topic
	     * @param {string} id
	     * @param {string} topic
	     * @returns {void}
	     */
	    _addBackoff(id, topic) {
	        this._doAddBackoff(id, topic, constants$c.GossipsubPruneBackoff);
	    }
	    /**
	     * Add backoff expiry interval for a peer in a topic
	     * @param {string} id
	     * @param {string} topic
	     * @param {number} interval backoff duration in milliseconds
	     * @returns {void}
	     */
	    _doAddBackoff(id, topic, interval) {
	        let backoff = this.backoff.get(topic);
	        if (!backoff) {
	            backoff = new Map();
	            this.backoff.set(topic, backoff);
	        }
	        const expire = this._now() + interval;
	        const existingExpire = backoff.get(id) || 0;
	        if (existingExpire < expire) {
	            backoff.set(id, expire);
	        }
	    }
	    /**
	     * Apply penalties from broken IHAVE/IWANT promises
	     * @returns {void}
	     */
	    _applyIwantPenalties() {
	        this.gossipTracer.getBrokenPromises().forEach((count, p) => {
	            this.log('peer %s didn\'t follow up in %d IWANT requests; adding penalty', p, count);
	            this.score.addPenalty(p, count);
	        });
	    }
	    /**
	     * Clear expired backoff expiries
	     * @returns {void}
	     */
	    _clearBackoff() {
	        // we only clear once every GossipsubPruneBackoffTicks ticks to avoid iterating over the maps too much
	        if (this.heartbeatTicks % constants$c.GossipsubPruneBackoffTicks !== 0) {
	            return;
	        }
	        const now = this._now();
	        this.backoff.forEach((backoff, topic) => {
	            backoff.forEach((expire, id) => {
	                if (expire < now) {
	                    backoff.delete(id);
	                }
	            });
	            if (backoff.size === 0) {
	                this.backoff.delete(topic);
	            }
	        });
	    }
	    /**
	     * Maybe reconnect to direct peers
	     * @returns {void}
	     */
	    _directConnect() {
	        // we only do this every few ticks to allow pending connections to complete and account for
	        // restarts/downtime
	        if (this.heartbeatTicks % constants$c.GossipsubDirectConnectTicks !== 0) {
	            return;
	        }
	        const toconnect = [];
	        this.direct.forEach(id => {
	            const peer = this.peers.get(id);
	            if (!peer || !peer.isWritable) {
	                toconnect.push(id);
	            }
	        });
	        if (toconnect.length) {
	            toconnect.forEach(id => {
	                this._connect(id);
	            });
	        }
	    }
	    /**
	     * Maybe attempt connection given signed peer records
	     * @param {RPC.IPeerInfo[]} peers
	     * @returns {Promise<void>}
	     */
	    _pxConnect(peers) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (peers.length > constants$c.GossipsubPrunePeers) {
	                utils_1$6.shuffle(peers);
	                peers = peers.slice(0, constants$c.GossipsubPrunePeers);
	            }
	            const toconnect = [];
	            yield Promise.all(peers.map((pi) => __awaiter(this, void 0, void 0, function* () {
	                if (!pi.peerID) {
	                    return;
	                }
	                const p = PeerId$p.createFromBytes(pi.peerID);
	                const id = p.toB58String();
	                if (this.peers.has(id)) {
	                    return;
	                }
	                if (!pi.signedPeerRecord) {
	                    toconnect.push(id);
	                    return;
	                }
	                // The peer sent us a signed record
	                // This is not a record from the peer who sent the record, but another peer who is connected with it
	                // Ensure that it is valid
	                try {
	                    const envelope = yield Envelope$3.openAndCertify(pi.signedPeerRecord, 'libp2p-peer-record');
	                    const eid = envelope.peerId.toB58String();
	                    if (id !== eid) {
	                        this.log('bogus peer record obtained through px: peer ID %s doesn\'t match expected peer %s', eid, id);
	                        return;
	                    }
	                    if (!this._libp2p.peerStore.addressBook.consumePeerRecord(envelope)) {
	                        this.log('bogus peer record obtained through px: could not add peer record to address book');
	                        return;
	                    }
	                    toconnect.push(id);
	                }
	                catch (e) {
	                    this.log('bogus peer record obtained through px: invalid signature or not a peer record');
	                }
	            })));
	            if (!toconnect.length) {
	                return;
	            }
	            toconnect.forEach(id => this._connect(id));
	        });
	    }
	    /**
	     * Mounts the gossipsub protocol onto the libp2p node and sends our
	     * our subscriptions to every peer connected
	     * @override
	     * @returns {Promise<void>}
	     */
	    start() {
	        const _super = Object.create(null, {
	            start: { get: () => super.start }
	        });
	        return __awaiter(this, void 0, void 0, function* () {
	            yield _super.start.call(this);
	            this.heartbeat.start();
	            this.score.start();
	            // connect to direct peers
	            this._directPeerInitial = setTimeout(() => {
	                this.direct.forEach(id => {
	                    this._connect(id);
	                });
	            }, constants$c.GossipsubDirectConnectInitialDelay);
	        });
	    }
	    /**
	     * Unmounts the gossipsub protocol and shuts down every connection
	     * @override
	     * @returns {Promise<void>}
	     */
	    stop() {
	        const _super = Object.create(null, {
	            stop: { get: () => super.stop }
	        });
	        return __awaiter(this, void 0, void 0, function* () {
	            yield _super.stop.call(this);
	            this.heartbeat.stop();
	            this.score.stop();
	            this.mesh = new Map();
	            this.fanout = new Map();
	            this.lastpub = new Map();
	            this.gossip = new Map();
	            this.control = new Map();
	            this.peerhave = new Map();
	            this.iasked = new Map();
	            this.backoff = new Map();
	            this.outbound = new Map();
	            this.gossipTracer.clear();
	            this.seenCache.clear();
	            if (this.fastMsgIdCache)
	                this.fastMsgIdCache.clear();
	            clearTimeout(this._directPeerInitial);
	        });
	    }
	    /**
	     * Connect to a peer using the gossipsub protocol
	     * @param {string} id
	     * @returns {void}
	     */
	    _connect(id) {
	        this.log('Initiating connection with %s', id);
	        this._libp2p.dialProtocol(PeerId$p.createFromB58String(id), this.multicodecs);
	    }
	    /**
	     * Subscribes to a topic
	     * @override
	     * @param {string} topic
	     * @returns {void}
	     */
	    subscribe(topic) {
	        super.subscribe(topic);
	        this.join(topic);
	    }
	    /**
	     * Unsubscribe to a topic
	     * @override
	     * @param {string} topic
	     * @returns {void}
	     */
	    unsubscribe(topic) {
	        super.unsubscribe(topic);
	        this.leave(topic);
	    }
	    /**
	     * Join topic
	     * @param {string} topic
	     * @returns {void}
	     */
	    join(topic) {
	        if (!this.started) {
	            throw new Error('Gossipsub has not started');
	        }
	        this.log('JOIN %s', topic);
	        const fanoutPeers = this.fanout.get(topic);
	        if (fanoutPeers) {
	            // these peers have a score above the publish threshold, which may be negative
	            // so drop the ones with a negative score
	            fanoutPeers.forEach(id => {
	                if (this.score.score(id) < 0) {
	                    fanoutPeers.delete(id);
	                }
	            });
	            if (fanoutPeers.size < this._options.D) {
	                // we need more peers; eager, as this would get fixed in the next heartbeat
	                get_gossip_peers_1.getGossipPeers(this, topic, this._options.D - fanoutPeers.size, (id) => {
	                    // filter our current peers, direct peers, and peers with negative scores
	                    return !fanoutPeers.has(id) && !this.direct.has(id) && this.score.score(id) >= 0;
	                }).forEach(id => fanoutPeers.add(id));
	            }
	            this.mesh.set(topic, fanoutPeers);
	            this.fanout.delete(topic);
	            this.lastpub.delete(topic);
	        }
	        else {
	            const peers = get_gossip_peers_1.getGossipPeers(this, topic, this._options.D, (id) => {
	                // filter direct peers and peers with negative score
	                return !this.direct.has(id) && this.score.score(id) >= 0;
	            });
	            this.mesh.set(topic, peers);
	        }
	        this.mesh.get(topic).forEach((id) => {
	            this.log('JOIN: Add mesh link to %s in %s', id, topic);
	            this._sendGraft(id, topic);
	        });
	    }
	    /**
	     * Leave topic
	     * @param {string} topic
	     * @returns {void}
	     */
	    leave(topic) {
	        if (!this.started) {
	            throw new Error('Gossipsub has not started');
	        }
	        this.log('LEAVE %s', topic);
	        // Send PRUNE to mesh peers
	        const meshPeers = this.mesh.get(topic);
	        if (meshPeers) {
	            meshPeers.forEach((id) => {
	                this.log('LEAVE: Remove mesh link to %s in %s', id, topic);
	                this._sendPrune(id, topic);
	            });
	            this.mesh.delete(topic);
	        }
	    }
	    /**
	     * Return the canonical message-id of a message as a string
	     *
	     * If a fast message-id is set: Try 1. the application cache 2. the fast cache 3. `getMsgId()`
	     * If a fast message-id is NOT set: Just `getMsgId()`
	     * @param {InMessage} msg
	     * @returns {Promise<string>}
	     */
	    getCanonicalMsgIdStr(msg) {
	        var _a, _b;
	        return __awaiter(this, void 0, void 0, function* () {
	            return (this.fastMsgIdCache && this.getFastMsgIdStr)
	                ? (_b = (_a = this.getCachedMsgIdStr(msg)) !== null && _a !== void 0 ? _a : this.fastMsgIdCache.get(this.getFastMsgIdStr(msg))) !== null && _b !== void 0 ? _b : utils_1$6.messageIdToString(yield this.getMsgId(msg)) : utils_1$6.messageIdToString(yield this.getMsgId(msg));
	        });
	    }
	    /**
	     * An application should override this function to return its cached message id string without computing it.
	     * Return undefined if message id is not found.
	     * If a fast message id function is not defined, this function is ignored.
	     * @param {InMessage} msg
	     * @returns {string | undefined}
	     */
	    getCachedMsgIdStr(msg) {
	        return undefined;
	    }
	    /**
	     * Publish messages
	     *
	     * @override
	     * @param {InMessage} msg
	     * @returns {void}
	     */
	    _publish(msg) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const msgIdStr = yield this.getCanonicalMsgIdStr(msg);
	            if (msg.receivedFrom !== this.peerId.toB58String()) {
	                this.score.deliverMessage(msg, msgIdStr);
	                this.gossipTracer.deliverMessage(msgIdStr);
	            }
	            // put in seen cache
	            this.seenCache.put(msgIdStr);
	            this.messageCache.put(msg, msgIdStr);
	            const tosend = new Set();
	            msg.topicIDs.forEach((topic) => {
	                const peersInTopic = this.topics.get(topic);
	                if (!peersInTopic) {
	                    return;
	                }
	                if (this._options.floodPublish && msg.from === this.peerId.toB58String()) {
	                    // flood-publish behavior
	                    // send to direct peers and _all_ peers meeting the publishThreshold
	                    peersInTopic.forEach(id => {
	                        if (this.direct.has(id) || this.score.score(id) >= this._options.scoreThresholds.publishThreshold) {
	                            tosend.add(id);
	                        }
	                    });
	                }
	                else {
	                    // non-flood-publish behavior
	                    // send to direct peers, subscribed floodsub peers
	                    // and some mesh peers above publishThreshold
	                    // direct peers
	                    this.direct.forEach(id => {
	                        tosend.add(id);
	                    });
	                    // floodsub peers
	                    peersInTopic.forEach((id) => {
	                        const score = this.score.score(id);
	                        const peerStreams = this.peers.get(id);
	                        if (!peerStreams) {
	                            return;
	                        }
	                        if (peerStreams.protocol === constants$c.FloodsubID && score >= this._options.scoreThresholds.publishThreshold) {
	                            tosend.add(id);
	                        }
	                    });
	                    // Gossipsub peers handling
	                    let meshPeers = this.mesh.get(topic);
	                    if (!meshPeers || !meshPeers.size) {
	                        // We are not in the mesh for topic, use fanout peers
	                        meshPeers = this.fanout.get(topic);
	                        if (!meshPeers) {
	                            // If we are not in the fanout, then pick peers in topic above the publishThreshold
	                            const peers = get_gossip_peers_1.getGossipPeers(this, topic, this._options.D, id => {
	                                return this.score.score(id) >= this._options.scoreThresholds.publishThreshold;
	                            });
	                            if (peers.size > 0) {
	                                meshPeers = peers;
	                                this.fanout.set(topic, peers);
	                            }
	                            else {
	                                meshPeers = new Set();
	                            }
	                        }
	                        // Store the latest publishing time
	                        this.lastpub.set(topic, this._now());
	                    }
	                    meshPeers.forEach((peer) => {
	                        tosend.add(peer);
	                    });
	                }
	            });
	            // Publish messages to peers
	            const rpc = utils_1$6.createGossipRpc([
	                pubsub_1.utils.normalizeOutRpcMessage(msg)
	            ]);
	            tosend.forEach((id) => {
	                if (id === msg.from) {
	                    return;
	                }
	                this._sendRpc(id, rpc);
	            });
	        });
	    }
	    /**
	     * Sends a GRAFT message to a peer
	     * @param {string} id peer id
	     * @param {string} topic
	     * @returns {void}
	     */
	    _sendGraft(id, topic) {
	        const graft = [{
	                topicID: topic
	            }];
	        const out = utils_1$6.createGossipRpc([], { graft });
	        this._sendRpc(id, out);
	    }
	    /**
	     * Sends a PRUNE message to a peer
	     * @param {string} id peer id
	     * @param {string} topic
	     * @returns {Promise<void>}
	     */
	    _sendPrune(id, topic) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const prune = [
	                yield this._makePrune(id, topic, this._options.doPX)
	            ];
	            const out = utils_1$6.createGossipRpc([], { prune });
	            this._sendRpc(id, out);
	        });
	    }
	    /**
	     * @override
	     */
	    _sendRpc(id, outRpc) {
	        const peerStreams = this.peers.get(id);
	        if (!peerStreams || !peerStreams.isWritable) {
	            return;
	        }
	        // piggyback control message retries
	        const ctrl = this.control.get(id);
	        if (ctrl) {
	            this._piggybackControl(id, outRpc, ctrl);
	            this.control.delete(id);
	        }
	        // piggyback gossip
	        const ihave = this.gossip.get(id);
	        if (ihave) {
	            this._piggybackGossip(id, outRpc, ihave);
	            this.gossip.delete(id);
	        }
	        peerStreams.write(rpc_1.RPC.encode(outRpc).finish());
	    }
	    _piggybackControl(id, outRpc, ctrl) {
	        const tograft = (ctrl.graft || [])
	            .filter(({ topicID }) => (topicID && this.mesh.get(topicID) || new Set()).has(id));
	        const toprune = (ctrl.prune || [])
	            .filter(({ topicID }) => !(topicID && this.mesh.get(topicID) || new Set()).has(id));
	        if (!tograft.length && !toprune.length) {
	            return;
	        }
	        if (outRpc.control) {
	            outRpc.control.graft = outRpc.control.graft && outRpc.control.graft.concat(tograft);
	            outRpc.control.prune = outRpc.control.prune && outRpc.control.prune.concat(toprune);
	        }
	        else {
	            outRpc.control = { ihave: [], iwant: [], graft: tograft, prune: toprune };
	        }
	    }
	    _piggybackGossip(id, outRpc, ihave) {
	        if (!outRpc.control) {
	            outRpc.control = { ihave: [], iwant: [], graft: [], prune: [] };
	        }
	        outRpc.control.ihave = ihave;
	    }
	    /**
	     * Send graft and prune messages
	     * @param {Map<string, Array<string>>} tograft peer id => topic[]
	     * @param {Map<string, Array<string>>} toprune peer id => topic[]
	     */
	    _sendGraftPrune(tograft, toprune, noPX) {
	        return __awaiter(this, void 0, void 0, function* () {
	            const doPX = this._options.doPX;
	            for (const [id, topics] of tograft) {
	                const graft = topics.map((topicID) => ({ topicID }));
	                let prune = [];
	                // If a peer also has prunes, process them now
	                const pruning = toprune.get(id);
	                if (pruning) {
	                    prune = yield Promise.all(pruning.map((topicID) => this._makePrune(id, topicID, doPX && !noPX.get(id))));
	                    toprune.delete(id);
	                }
	                const outRpc = utils_1$6.createGossipRpc([], { graft, prune });
	                this._sendRpc(id, outRpc);
	            }
	            for (const [id, topics] of toprune) {
	                const prune = yield Promise.all(topics.map((topicID) => this._makePrune(id, topicID, doPX && !noPX.get(id))));
	                const outRpc = utils_1$6.createGossipRpc([], { prune });
	                this._sendRpc(id, outRpc);
	            }
	        });
	    }
	    /**
	     * Emits gossip to peers in a particular topic
	     * @param {string} topic
	     * @param {Set<string>} exclude peers to exclude
	     * @returns {void}
	     */
	    _emitGossip(topic, exclude) {
	        const messageIDs = this.messageCache.getGossipIDs(topic);
	        if (!messageIDs.length) {
	            return;
	        }
	        // shuffle to emit in random order
	        utils_1$6.shuffle(messageIDs);
	        // if we are emitting more than GossipsubMaxIHaveLength ids, truncate the list
	        if (messageIDs.length > constants$c.GossipsubMaxIHaveLength) {
	            // we do the truncation (with shuffling) per peer below
	            this.log('too many messages for gossip; will truncate IHAVE list (%d messages)', messageIDs.length);
	        }
	        // Send gossip to GossipFactor peers above threshold with a minimum of D_lazy
	        // First we collect the peers above gossipThreshold that are not in the exclude set
	        // and then randomly select from that set
	        // We also exclude direct peers, as there is no reason to emit gossip to them
	        const peersToGossip = [];
	        const topicPeers = this.topics.get(topic);
	        if (!topicPeers) {
	            // no topic peers, no gossip
	            return;
	        }
	        topicPeers.forEach(id => {
	            const peerStreams = this.peers.get(id);
	            if (!peerStreams) {
	                return;
	            }
	            if (!exclude.has(id) &&
	                !this.direct.has(id) &&
	                utils_1$6.hasGossipProtocol(peerStreams.protocol) &&
	                this.score.score(id) >= this._options.scoreThresholds.gossipThreshold) {
	                peersToGossip.push(id);
	            }
	        });
	        let target = this._options.Dlazy;
	        const factor = constants$c.GossipsubGossipFactor * peersToGossip.length;
	        if (factor > target) {
	            target = factor;
	        }
	        if (target > peersToGossip.length) {
	            target = peersToGossip.length;
	        }
	        else {
	            utils_1$6.shuffle(peersToGossip);
	        }
	        // Emit the IHAVE gossip to the selected peers up to the target
	        peersToGossip.slice(0, target).forEach(id => {
	            let peerMessageIDs = messageIDs;
	            if (messageIDs.length > constants$c.GossipsubMaxIHaveLength) {
	                // shuffle and slice message IDs per peer so that we emit a different set for each peer
	                // we have enough reduncancy in the system that this will significantly increase the message
	                // coverage when we do truncate
	                peerMessageIDs = utils_1$6.shuffle(peerMessageIDs.slice()).slice(0, constants$c.GossipsubMaxIHaveLength);
	            }
	            this._pushGossip(id, {
	                topicID: topic,
	                messageIDs: peerMessageIDs
	            });
	        });
	    }
	    /**
	     * Flush gossip and control messages
	     */
	    _flush() {
	        // send gossip first, which will also piggyback control
	        for (const [peer, ihave] of this.gossip.entries()) {
	            this.gossip.delete(peer);
	            const out = utils_1$6.createGossipRpc([], { ihave });
	            this._sendRpc(peer, out);
	        }
	        // send the remaining control messages
	        for (const [peer, control] of this.control.entries()) {
	            this.control.delete(peer);
	            const out = utils_1$6.createGossipRpc([], { graft: control.graft, prune: control.prune });
	            this._sendRpc(peer, out);
	        }
	    }
	    /**
	     * Adds new IHAVE messages to pending gossip
	     * @param {PeerStreams} peerStreams
	     * @param {Array<RPC.IControlIHave>} controlIHaveMsgs
	     * @returns {void}
	     */
	    _pushGossip(id, controlIHaveMsgs) {
	        this.log('Add gossip to %s', id);
	        const gossip = this.gossip.get(id) || [];
	        this.gossip.set(id, gossip.concat(controlIHaveMsgs));
	    }
	    /**
	     * Returns the current time in milliseconds
	     * @returns {number}
	     */
	    _now() {
	        return Date.now();
	    }
	    /**
	     * Make a PRUNE control message for a peer in a topic
	     * @param {string} id
	     * @param {string} topic
	     * @param {boolean} doPX
	     * @returns {Promise<RPC.IControlPrune>}
	     */
	    _makePrune(id, topic, doPX) {
	        return __awaiter(this, void 0, void 0, function* () {
	            if (this.peers.get(id).protocol === constants$c.GossipsubIDv10) {
	                // Gossipsub v1.0 -- no backoff, the peer won't be able to parse it anyway
	                return {
	                    topicID: topic,
	                    peers: []
	                };
	            }
	            // backoff is measured in seconds
	            // GossipsubPruneBackoff is measured in milliseconds
	            const backoff = constants$c.GossipsubPruneBackoff / 1000;
	            if (!doPX) {
	                return {
	                    topicID: topic,
	                    peers: [],
	                    backoff: backoff
	                };
	            }
	            // select peers for Peer eXchange
	            const peers = get_gossip_peers_1.getGossipPeers(this, topic, constants$c.GossipsubPrunePeers, (xid) => {
	                return xid !== id && this.score.score(xid) >= 0;
	            });
	            const px = yield Promise.all(Array.from(peers).map((p) => __awaiter(this, void 0, void 0, function* () {
	                // see if we have a signed record to send back; if we don't, just send
	                // the peer ID and let the pruned peer find them in the DHT -- we can't trust
	                // unsigned address records through PX anyways
	                // Finding signed records in the DHT is not supported at the time of writing in js-libp2p
	                const peerId = PeerId$p.createFromB58String(p);
	                return {
	                    peerID: peerId.toBytes(),
	                    signedPeerRecord: yield this._libp2p.peerStore.addressBook.getRawEnvelope(peerId)
	                };
	            })));
	            return {
	                topicID: topic,
	                peers: px,
	                backoff: backoff
	            };
	        });
	    }
	}
	Gossipsub.multicodec = constants$c.GossipsubIDv11;
	var src$h = Gossipsub;

	const routers = { gossipsub: src$h };

	const PeerId$o = src$o.exports;
	const { base58btc: base58btc$1 } = require$$2$2;
	const { default: PQueue$1 } = dist$1;
	const defer$4 = pDefer_1;
	const debug$M = browser$a.exports;

	const log$P = debug$M('libp2p-delegated-peer-routing');
	log$P.error = debug$M('libp2p-delegated-peer-routing:error');

	const DEFAULT_TIMEOUT$1 = 30e3; // 30 second default
	const CONCURRENT_HTTP_REQUESTS$1 = 4;

	class DelegatedPeerRouting {
	  /**
	   * Create a new DelegatedPeerRouting instance.
	   *
	   * @param {object} client - an instance of the ipfs-http-client module
	   */
	  constructor (client) {
	    if (client == null) {
	      throw new Error('missing ipfs http client')
	    }

	    this._client = client;

	    // limit concurrency to avoid request flood in web browser
	    // https://github.com/libp2p/js-libp2p-delegated-content-routing/issues/12
	    this._httpQueue = new PQueue$1({
	      concurrency: CONCURRENT_HTTP_REQUESTS$1
	    });

	    const {
	      protocol,
	      host,
	      port
	    } = client.getEndpointConfig();

	    log$P(`enabled DelegatedPeerRouting via ${protocol}://${host}:${port}`);
	  }

	  /**
	   * Attempts to find the given peer
	   *
	   * @param {PeerID} id
	   * @param {object} options
	   * @param {number} options.timeout - How long the query can take. Defaults to 30 seconds
	   * @returns {Promise<{ id: PeerId, multiaddrs: Multiaddr[] }>}
	   */
	  async findPeer (id, options = {}) {
	    let idStr = id;
	    if (PeerId$o.isPeerId(idStr)) {
	      idStr = id.toB58String();
	    }

	    log$P('findPeer starts: ' + id);

	    options.timeout = options.timeout || DEFAULT_TIMEOUT$1;

	    try {
	      return await this._httpQueue.add(async () => {
	        const { addrs } = await this._client.dht.findPeer(idStr, {
	          timeout: options.timeout
	        });

	        return {
	          id,
	          multiaddrs: addrs
	        }
	      })
	    } catch (err) {
	      if (err.message.includes('not found')) {
	        return undefined
	      }

	      throw err
	    } finally {
	      log$P('findPeer finished: ' + id);
	    }
	  }

	  /**
	   * Attempt to find the closest peers on the network to the given key
	   *
	   * @param {Uint8Array} key - A CID like key
	   * @param {object} [options]
	   * @param {number} [options.timeout=30e3] - How long the query can take.
	   * @returns {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>}
	   */
	  async * getClosestPeers (key, options = {}) {
	    const keyStr = base58btc$1.encode(key).substring(1);

	    log$P('getClosestPeers starts:', keyStr);
	    options.timeout = options.timeout || DEFAULT_TIMEOUT$1;

	    const onStart = defer$4();
	    const onFinish = defer$4();

	    this._httpQueue.add(() => {
	      onStart.resolve();
	      return onFinish.promise
	    });

	    try {
	      await onStart.promise;

	      for await (const result of this._client.dht.query(keyStr, {
	        timeout: options.timeout
	      })) {
	        switch (result.type) {
	          case 1: // Found Closer
	            for (const response of result.responses) {
	              yield {
	                id: PeerId$o.parse(response.id),
	                multiaddrs: response.addrs
	              };
	            }
	            break
	          default:
	            log$P('getClosestPeers unhandled response', result);
	        }
	      }
	    } catch (err) {
	      log$P.error('getClosestPeers errored:', err);
	      throw err
	    } finally {
	      onFinish.resolve();
	      log$P('getClosestPeers finished:', keyStr);
	    }
	  }
	}

	var src$g = DelegatedPeerRouting;

	const debug$L = browser$a.exports;
	const PeerId$n = src$o.exports;
	const drain$4 = itDrain;

	const { default: PQueue } = dist$1;
	const defer$3 = pDefer_1;

	const log$O = debug$L('libp2p-delegated-content-routing');
	log$O.error = debug$L('libp2p-delegated-content-routing:error');

	const DEFAULT_TIMEOUT = 30e3; // 30 second default
	const CONCURRENT_HTTP_REQUESTS = 4;

	/**
	 * @typedef {import('peer-id').PeerID} PeerID
	 * @typedef {import('cids').CID} CID
	 * @typedef {import('multiaddr').Multiaddr} Multiaddr
	 */

	/**
	 * An implementation of content routing, using a delegated peer.
	 */
	class DelegatedContentRouting {
	  /**
	   * Create a new DelegatedContentRouting instance.
	   *
	   * @param {PeerID} peerId - the id of the node that is using this routing.
	   * @param {object} client - an instance of the ipfs-http-client module
	   */
	  constructor (peerId, client) {
	    if (peerId == null) {
	      throw new Error('missing self peerId')
	    }

	    if (client == null) {
	      throw new Error('missing ipfs http client')
	    }

	    this._client = client;
	    this.peerId = peerId;

	    // limit concurrency to avoid request flood in web browser
	    // https://github.com/libp2p/js-libp2p-delegated-content-routing/issues/12
	    const concurrency = { concurrency: CONCURRENT_HTTP_REQUESTS };
	    this._httpQueue = new PQueue(concurrency);
	    // sometimes refs requests take long time, they need separate queue
	    // to not suffocate regular business
	    this._httpQueueRefs = new PQueue(Object.assign({}, concurrency, {
	      concurrency: 2
	    }));

	    const {
	      protocol,
	      host,
	      port
	    } = client.getEndpointConfig();

	    log$O(`enabled DelegatedContentRouting via ${protocol}://${host}:${port}`);
	  }

	  /**
	   * Search the dht for providers of the given CID.
	   *
	   * - call `findProviders` on the delegated node.
	   *
	   * @param {CID} key - The CID to find providers for
	   * @param {object} options - Options
	   * @param {number} options.timeout - How long the query can take. Defaults to 30 seconds
	   * @param {number} options.numProviders - How many providers to find, defaults to 20
	   * @returns {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>} - An async iterable of PeerId/Multiaddrs
	   */
	  async * findProviders (key, options = {}) {
	    log$O(`findProviders starts: ${key}`);
	    options.timeout = options.timeout || DEFAULT_TIMEOUT;

	    let providers = 0;
	    const onStart = defer$3();
	    const onFinish = defer$3();

	    this._httpQueue.add(() => {
	      onStart.resolve();
	      return onFinish.promise
	    });

	    try {
	      await onStart.promise;

	      for await (const { id, addrs } of this._client.dht.findProvs(key, {
	        numProviders: options.numProviders,
	        timeout: options.timeout
	      })) {
	        yield {
	          id: PeerId$n.parse(id),
	          multiaddrs: addrs
	        };
	        providers++;
	      }
	    } catch (err) {
	      log$O.error('findProviders errored:', err);
	      throw err
	    } finally {
	      onFinish.resolve();
	      log$O(`findProviders finished: ${key} found ${providers} providers`);
	    }
	  }

	  /**
	   * Announce to the network that the delegated node can provide the given key.
	   *
	   * Currently this uses the following hack
	   * - delegate is one of bootstrap nodes, so we are always connected to it
	   * - call block stat on the delegated node, so it fetches the content
	   * - call dht provide with the passed cid
	   *
	   * N.B. this must be called for every block in the dag you want provided otherwise
	   * the delegate will only be able to supply the root block of the dag when asked
	   * for the data by an interested peer.
	   *
	   * @param {CID} key - The delegate will publish a provider record for this CID
	   * @returns {Promise<void>}
	   */
	  async provide (key) {
	    log$O(`provide starts: ${key}`);
	    await this._httpQueueRefs.add(async () => {
	      await this._client.block.stat(key);
	      await drain$4(this._client.dht.provide(key));
	    });
	    log$O(`provide finished: ${key}`);
	  }
	}

	var src$f = DelegatedContentRouting;

	const LOAD_BASE = name => Promise.reject(new Error(`No base found for "${ name }"`));
	class Multibases {
	  constructor(options) {
	    this._basesByName = {};
	    this._basesByPrefix = {};
	    this._loadBase = options.loadBase || LOAD_BASE;
	    for (const base of options.bases) {
	      this.addBase(base);
	    }
	  }
	  addBase(base) {
	    if (this._basesByName[base.name] || this._basesByPrefix[base.prefix]) {
	      throw new Error(`Codec already exists for codec "${ base.name }"`);
	    }
	    this._basesByName[base.name] = base;
	    this._basesByPrefix[base.prefix] = base;
	  }
	  removeBase(base) {
	    delete this._basesByName[base.name];
	    delete this._basesByPrefix[base.prefix];
	  }
	  async getBase(nameOrPrefix) {
	    if (this._basesByName[nameOrPrefix]) {
	      return this._basesByName[nameOrPrefix];
	    }
	    if (this._basesByPrefix[nameOrPrefix]) {
	      return this._basesByPrefix[nameOrPrefix];
	    }
	    const base = await this._loadBase(nameOrPrefix);
	    if (this._basesByName[base.name] == null && this._basesByPrefix[base.prefix] == null) {
	      this.addBase(base);
	    }
	    return base;
	  }
	  listBases() {
	    return Object.values(this._basesByName);
	  }
	}

	const LOAD_CODEC = codeOrName => Promise.reject(new Error(`No codec found for "${ codeOrName }"`));
	class Multicodecs {
	  constructor(options) {
	    this._codecsByName = {};
	    this._codecsByCode = {};
	    this._loadCodec = options.loadCodec || LOAD_CODEC;
	    for (const codec of options.codecs) {
	      this.addCodec(codec);
	    }
	  }
	  addCodec(codec) {
	    if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {
	      throw new Error(`Resolver already exists for codec "${ codec.name }"`);
	    }
	    this._codecsByName[codec.name] = codec;
	    this._codecsByCode[codec.code] = codec;
	  }
	  removeCodec(codec) {
	    delete this._codecsByName[codec.name];
	    delete this._codecsByCode[codec.code];
	  }
	  async getCodec(code) {
	    const table = typeof code === 'string' ? this._codecsByName : this._codecsByCode;
	    if (table[code]) {
	      return table[code];
	    }
	    const codec = await this._loadCodec(code);
	    if (table[code] == null) {
	      this.addCodec(codec);
	    }
	    return codec;
	  }
	  listCodecs() {
	    return Object.values(this._codecsByName);
	  }
	}

	const LOAD_HASHER = codeOrName => Promise.reject(new Error(`No hasher found for "${ codeOrName }"`));
	class Multihashes {
	  constructor(options) {
	    this._hashersByName = {};
	    this._hashersByCode = {};
	    this._loadHasher = options.loadHasher || LOAD_HASHER;
	    for (const hasher of options.hashers) {
	      this.addHasher(hasher);
	    }
	  }
	  addHasher(hasher) {
	    if (this._hashersByName[hasher.name] || this._hashersByCode[hasher.code]) {
	      throw new Error(`Resolver already exists for codec "${ hasher.name }"`);
	    }
	    this._hashersByName[hasher.name] = hasher;
	    this._hashersByCode[hasher.code] = hasher;
	  }
	  removeHasher(hasher) {
	    delete this._hashersByName[hasher.name];
	    delete this._hashersByCode[hasher.code];
	  }
	  async getHasher(code) {
	    const table = typeof code === 'string' ? this._hashersByName : this._hashersByCode;
	    if (table[code]) {
	      return table[code];
	    }
	    const hasher = await this._loadHasher(code);
	    if (table[code] == null) {
	      this.addHasher(hasher);
	    }
	    return hasher;
	  }
	  listHashers() {
	    return Object.values(this._hashersByName);
	  }
	}

	function toUrlString(url) {
	  try {
	    url = multiaddrToUri(new src$s.Multiaddr(url));
	  } catch (err) {
	  }
	  url = url.toString();
	  return url;
	}

	var getAgent = () => {
	};

	const log$N = debug$S('ipfs-http-client:lib:error-handler');
	const merge$4 = mergeOptions$k.bind({ ignoreUndefined: true });
	const DEFAULT_PROTOCOL = env$1.isBrowser || env$1.isWebWorker ? location.protocol : 'http';
	const DEFAULT_HOST = env$1.isBrowser || env$1.isWebWorker ? location.hostname : 'localhost';
	const DEFAULT_PORT = env$1.isBrowser || env$1.isWebWorker ? location.port : '5001';
	const normalizeOptions = (options = {}) => {
	  let url;
	  let opts = {};
	  let agent;
	  if (typeof options === 'string' || src$s.Multiaddr.isMultiaddr(options)) {
	    url = new URL(toUrlString(options));
	  } else if (options instanceof URL) {
	    url = options;
	  } else if (typeof options.url === 'string' || src$s.Multiaddr.isMultiaddr(options.url)) {
	    url = new URL(toUrlString(options.url));
	    opts = options;
	  } else if (options.url instanceof URL) {
	    url = options.url;
	    opts = options;
	  } else {
	    opts = options || {};
	    const protocol = (opts.protocol || DEFAULT_PROTOCOL).replace(':', '');
	    const host = (opts.host || DEFAULT_HOST).split(':')[0];
	    const port = opts.port || DEFAULT_PORT;
	    url = new URL(`${ protocol }://${ host }:${ port }`);
	  }
	  if (opts.apiPath) {
	    url.pathname = opts.apiPath;
	  } else if (url.pathname === '/' || url.pathname === undefined) {
	    url.pathname = 'api/v0';
	  }
	  if (env$1.isNode) {
	    const Agent = getAgent();
	    agent = opts.agent || new Agent({
	      keepAlive: true,
	      maxSockets: 6
	    });
	  }
	  return {
	    ...opts,
	    host: url.host,
	    protocol: url.protocol.replace(':', ''),
	    port: Number(url.port),
	    apiPath: url.pathname,
	    url,
	    agent
	  };
	};
	const errorHandler = async response => {
	  let msg;
	  try {
	    if ((response.headers.get('Content-Type') || '').startsWith('application/json')) {
	      const data = await response.json();
	      log$N(data);
	      msg = data.Message || data.message;
	    } else {
	      msg = await response.text();
	    }
	  } catch (err) {
	    log$N('Failed to parse error response', err);
	    msg = err.message;
	  }
	  let error = new http.HTTPError(response);
	  if (msg) {
	    if (msg.includes('deadline has elapsed')) {
	      error = new http.TimeoutError();
	    }
	    if (msg && msg.includes('context deadline exceeded')) {
	      error = new http.TimeoutError();
	    }
	  }
	  if (msg && msg.includes('request timed out')) {
	    error = new http.TimeoutError();
	  }
	  if (msg) {
	    error.message = msg;
	  }
	  throw error;
	};
	const KEBAB_REGEX = /[A-Z\u00C0-\u00D6\u00D8-\u00DE]/g;
	const kebabCase = str => {
	  return str.replace(KEBAB_REGEX, function (match) {
	    return '-' + match.toLowerCase();
	  });
	};
	const parseTimeout = value => {
	  return typeof value === 'string' ? parse$1(value) : value;
	};
	class Client extends http {
	  constructor(options = {}) {
	    const opts = normalizeOptions(options);
	    super({
	      timeout: parseTimeout(opts.timeout || 0) || undefined,
	      headers: opts.headers,
	      base: `${ opts.url }`,
	      handleError: errorHandler,
	      transformSearchParams: search => {
	        const out = new URLSearchParams();
	        for (const [key, value] of search) {
	          if (value !== 'undefined' && value !== 'null' && key !== 'signal') {
	            out.append(kebabCase(key), value);
	          }
	          if (key === 'timeout' && !isNaN(value)) {
	            out.append(kebabCase(key), value);
	          }
	        }
	        return out;
	      },
	      agent: opts.agent
	    });
	    delete this.get;
	    delete this.put;
	    delete this.delete;
	    delete this.options;
	    const fetch = this.fetch;
	    this.fetch = (resource, options = {}) => {
	      if (typeof resource === 'string' && !resource.startsWith('/')) {
	        resource = `${ opts.url }/${ resource }`;
	      }
	      return fetch.call(this, resource, merge$4(options, { method: 'POST' }));
	    };
	  }
	}
	http.HTTPError;

	const configure = fn => {
	  return options => {
	    return fn(new Client(options), options);
	  };
	};

	function modeToString$1(mode) {
	  if (mode == null) {
	    return undefined;
	  }
	  if (typeof mode === 'string') {
	    return mode;
	  }
	  return mode.toString(8).padStart(4, '0');
	}

	function parseMtime(input) {
	  if (input == null) {
	    return undefined;
	  }
	  let mtime;
	  if (input.secs != null) {
	    mtime = {
	      secs: input.secs,
	      nsecs: input.nsecs
	    };
	  }
	  if (input.Seconds != null) {
	    mtime = {
	      secs: input.Seconds,
	      nsecs: input.FractionalNanoseconds
	    };
	  }
	  if (Array.isArray(input)) {
	    mtime = {
	      secs: input[0],
	      nsecs: input[1]
	    };
	  }
	  if (input instanceof Date) {
	    const ms = input.getTime();
	    const secs = Math.floor(ms / 1000);
	    mtime = {
	      secs: secs,
	      nsecs: (ms - secs * 1000) * 1000
	    };
	  }
	  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {
	    return undefined;
	  }
	  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {
	    throw errCode$q(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS');
	  }
	  return mtime;
	}

	function toUrlSearchParams({arg, searchParams, hashAlg, mtime, mode, ...options} = {}) {
	  if (searchParams) {
	    options = {
	      ...options,
	      ...searchParams
	    };
	  }
	  if (hashAlg) {
	    options.hash = hashAlg;
	  }
	  if (mtime != null) {
	    mtime = parseMtime(mtime);
	    options.mtime = mtime.secs;
	    options.mtimeNsecs = mtime.nsecs;
	  }
	  if (mode != null) {
	    options.mode = modeToString$1(mode);
	  }
	  if (options.timeout && !isNaN(options.timeout)) {
	    options.timeout = `${ options.timeout }ms`;
	  }
	  if (arg === undefined || arg === null) {
	    arg = [];
	  } else if (!Array.isArray(arg)) {
	    arg = [arg];
	  }
	  const urlSearchParams = new URLSearchParams(options);
	  arg.forEach(arg => urlSearchParams.append('arg', arg));
	  return urlSearchParams;
	}

	const createWantlist = configure(api => {
	  async function wantlist(options = {}) {
	    const res = await (await api.post('bitswap/wantlist', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams(options),
	      headers: options.headers
	    })).json();
	    return (res.Keys || []).map(k => CID$6.parse(k['/']));
	  }
	  return wantlist;
	});

	const createWantlistForPeer = configure(api => {
	  async function wantlistForPeer(peerId, options = {}) {
	    const res = await (await api.post('bitswap/wantlist', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        ...options,
	        peer: peerId.toString()
	      }),
	      headers: options.headers
	    })).json();
	    return (res.Keys || []).map(k => CID$6.parse(k['/']));
	  }
	  return wantlistForPeer;
	});

	const createStat$4 = configure(api => {
	  async function stat(options = {}) {
	    const res = await api.post('bitswap/stat', {
	      searchParams: toUrlSearchParams(options),
	      signal: options.signal,
	      headers: options.headers
	    });
	    return toCoreInterface$4(await res.json());
	  }
	  return stat;
	});
	function toCoreInterface$4(res) {
	  return {
	    provideBufLen: res.ProvideBufLen,
	    wantlist: (res.Wantlist || []).map(k => CID$6.parse(k['/'])),
	    peers: res.Peers || [],
	    blocksReceived: BigInt(res.BlocksReceived),
	    dataReceived: BigInt(res.DataReceived),
	    blocksSent: BigInt(res.BlocksSent),
	    dataSent: BigInt(res.DataSent),
	    dupBlksReceived: BigInt(res.DupBlksReceived),
	    dupDataReceived: BigInt(res.DupDataReceived)
	  };
	}

	const createUnwant = configure(api => {
	  async function unwant(cid, options = {}) {
	    const res = await api.post('bitswap/unwant', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: cid.toString(),
	        ...options
	      }),
	      headers: options.headers
	    });
	    return res.json();
	  }
	  return unwant;
	});

	function createBitswap$1(config) {
	  return {
	    wantlist: createWantlist(config),
	    wantlistForPeer: createWantlistForPeer(config),
	    unwant: createUnwant(config),
	    stat: createStat$4(config)
	  };
	}

	const createGet$5 = configure(api => {
	  async function get(cid, options = {}) {
	    const res = await api.post('block/get', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: cid.toString(),
	        ...options
	      }),
	      headers: options.headers
	    });
	    return new Uint8Array(await res.arrayBuffer());
	  }
	  return get;
	});

	async function normaliseContent(input) {
	  if (isBytes(input)) {
	    return new Blob([input]);
	  }
	  if (typeof input === 'string' || input instanceof String) {
	    return new Blob([input.toString()]);
	  }
	  if (isBlob(input)) {
	    return input;
	  }
	  if (isReadableStream(input)) {
	    input = browserReadablestreamToIt(input);
	  }
	  if (Symbol.iterator in input || Symbol.asyncIterator in input) {
	    const peekable = itPeekable(input);
	    const {value, done} = await peekable.peek();
	    if (done) {
	      return itToBlob(peekable);
	    }
	    peekable.push(value);
	    if (Number.isInteger(value)) {
	      return new Blob([Uint8Array.from(await itAll(peekable))]);
	    }
	    if (isBytes(value) || typeof value === 'string' || value instanceof String) {
	      return itToBlob(peekable);
	    }
	  }
	  throw errCode$q(new Error(`Unexpected input: ${ input }`), 'ERR_UNEXPECTED_INPUT');
	}
	async function itToBlob(stream) {
	  const parts = [];
	  for await (const chunk of stream) {
	    parts.push(chunk);
	  }
	  return new Blob(parts);
	}

	function normaliseInput(input) {
	  return normaliseCandidateMultiple(input, normaliseContent);
	}

	function modeToString(mode) {
	  if (mode == null) {
	    return undefined;
	  }
	  if (typeof mode === 'string') {
	    return mode;
	  }
	  return mode.toString(8).padStart(4, '0');
	}

	async function multipartRequest(source, abortController, headers = {}) {
	  const parts = [];
	  const formData = new FormData();
	  let index = 0;
	  let total = 0;
	  for await (const {content, path, mode, mtime} of normaliseInput(source)) {
	    let fileSuffix = '';
	    const type = content ? 'file' : 'dir';
	    if (index > 0) {
	      fileSuffix = `-${ index }`;
	    }
	    let fieldName = type + fileSuffix;
	    const qs = [];
	    if (mode !== null && mode !== undefined) {
	      qs.push(`mode=${ modeToString(mode) }`);
	    }
	    if (mtime != null) {
	      const {secs, nsecs} = mtime;
	      qs.push(`mtime=${ secs }`);
	      if (nsecs != null) {
	        qs.push(`mtime-nsecs=${ nsecs }`);
	      }
	    }
	    if (qs.length) {
	      fieldName = `${ fieldName }?${ qs.join('&') }`;
	    }
	    if (content) {
	      formData.set(fieldName, content, path != null ? encodeURIComponent(path) : undefined);
	      const end = total + content.size;
	      parts.push({
	        name: path,
	        start: total,
	        end
	      });
	      total = end;
	    } else if (path != null) {
	      formData.set(fieldName, new File([''], encodeURIComponent(path), { type: 'application/x-directory' }));
	    } else {
	      throw new Error('path or content or both must be set');
	    }
	    index++;
	  }
	  return {
	    total,
	    parts,
	    headers,
	    body: formData
	  };
	}

	function filter$5(signals) {
	  return signals.filter(Boolean);
	}
	function abortSignal(...signals) {
	  return anySignal_2(filter$5(signals));
	}

	const createPut$3 = configure(api => {
	  async function put(data, options = {}) {
	    const controller = new AbortController();
	    const signal = abortSignal(controller.signal, options.signal);
	    let res;
	    try {
	      const response = await api.post('block/put', {
	        signal: signal,
	        searchParams: toUrlSearchParams(options),
	        ...await multipartRequest([data], controller, options.headers)
	      });
	      res = await response.json();
	    } catch (err) {
	      if (options.format === 'dag-pb') {
	        return put(data, {
	          ...options,
	          format: 'protobuf'
	        });
	      } else if (options.format === 'dag-cbor') {
	        return put(data, {
	          ...options,
	          format: 'cbor'
	        });
	      }
	      throw err;
	    }
	    return CID$6.parse(res.Key);
	  }
	  return put;
	});

	const createRm$6 = configure(api => {
	  async function* rm(cid, options = {}) {
	    if (!Array.isArray(cid)) {
	      cid = [cid];
	    }
	    const res = await api.post('block/rm', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: cid.map(cid => cid.toString()),
	        'stream-channels': true,
	        ...options
	      }),
	      headers: options.headers
	    });
	    for await (const removed of res.ndjson()) {
	      yield toCoreInterface$3(removed);
	    }
	  }
	  return rm;
	});
	function toCoreInterface$3(removed) {
	  const out = { cid: CID$6.parse(removed.Hash) };
	  if (removed.Error) {
	    out.error = new Error(removed.Error);
	  }
	  return out;
	}

	const createStat$3 = configure(api => {
	  async function stat(cid, options = {}) {
	    const res = await api.post('block/stat', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: cid.toString(),
	        ...options
	      }),
	      headers: options.headers
	    });
	    const data = await res.json();
	    return {
	      cid: CID$6.parse(data.Key),
	      size: data.Size
	    };
	  }
	  return stat;
	});

	function createBlock(config) {
	  return {
	    get: createGet$5(config),
	    put: createPut$3(config),
	    rm: createRm$6(config),
	    stat: createStat$3(config)
	  };
	}

	const createAdd$4 = configure(api => {
	  async function add(addr, options = {}) {
	    const res = await api.post('bootstrap/add', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: addr,
	        ...options
	      }),
	      headers: options.headers
	    });
	    const {Peers} = await res.json();
	    return { Peers: Peers.map(ma => new src$s.Multiaddr(ma)) };
	  }
	  return add;
	});

	const createClear = configure(api => {
	  async function clear(options = {}) {
	    const res = await api.post('bootstrap/rm', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        ...options,
	        all: true
	      }),
	      headers: options.headers
	    });
	    const {Peers} = await res.json();
	    return { Peers: Peers.map(ma => new src$s.Multiaddr(ma)) };
	  }
	  return clear;
	});

	const createList$2 = configure(api => {
	  async function list(options = {}) {
	    const res = await api.post('bootstrap/list', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams(options),
	      headers: options.headers
	    });
	    const {Peers} = await res.json();
	    return { Peers: Peers.map(ma => new src$s.Multiaddr(ma)) };
	  }
	  return list;
	});

	const createReset = configure(api => {
	  async function reset(options = {}) {
	    const res = await api.post('bootstrap/add', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        ...options,
	        default: true
	      }),
	      headers: options.headers
	    });
	    const {Peers} = await res.json();
	    return { Peers: Peers.map(ma => new src$s.Multiaddr(ma)) };
	  }
	  return reset;
	});

	const createRm$5 = configure(api => {
	  async function rm(addr, options = {}) {
	    const res = await api.post('bootstrap/rm', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: addr,
	        ...options
	      }),
	      headers: options.headers
	    });
	    const {Peers} = await res.json();
	    return { Peers: Peers.map(ma => new src$s.Multiaddr(ma)) };
	  }
	  return rm;
	});

	function createBootstrap(config) {
	  return {
	    add: createAdd$4(config),
	    clear: createClear(config),
	    list: createList$2(config),
	    reset: createReset(config),
	    rm: createRm$5(config)
	  };
	}

	const createApply = configure(api => {
	  async function apply(profile, options = {}) {
	    const res = await api.post('config/profile/apply', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: profile,
	        ...options
	      }),
	      headers: options.headers
	    });
	    const data = await res.json();
	    return {
	      original: data.OldCfg,
	      updated: data.NewCfg
	    };
	  }
	  return apply;
	});

	function objectToCamel(obj) {
	  if (obj == null) {
	    return obj;
	  }
	  const caps = /^[A-Z]+$/;
	  const output = {};
	  return Object.keys(obj).reduce((camelObj, k) => {
	    if (caps.test(k)) {
	      camelObj[k.toLowerCase()] = obj[k];
	    } else if (caps.test(k[0])) {
	      camelObj[k[0].toLowerCase() + k.slice(1)] = obj[k];
	    } else {
	      camelObj[k] = obj[k];
	    }
	    return camelObj;
	  }, output);
	}

	const createList$1 = configure(api => {
	  async function list(options = {}) {
	    const res = await api.post('config/profile/list', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams(options),
	      headers: options.headers
	    });
	    const data = await res.json();
	    return data.map(profile => objectToCamel(profile));
	  }
	  return list;
	});

	function createProfiles(config) {
	  return {
	    apply: createApply(config),
	    list: createList$1(config)
	  };
	}

	const createGet$4 = configure(api => {
	  const get = async (key, options = {}) => {
	    if (!key) {
	      throw new Error('key argument is required');
	    }
	    const res = await api.post('config', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: key,
	        ...options
	      }),
	      headers: options.headers
	    });
	    const data = await res.json();
	    return data.Value;
	  };
	  return get;
	});

	const createGetAll = configure(api => {
	  const getAll = async (options = {}) => {
	    const res = await api.post('config/show', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({ ...options }),
	      headers: options.headers
	    });
	    const data = await res.json();
	    return data;
	  };
	  return getAll;
	});

	const createReplace = configure(api => {
	  const replace = async (config, options = {}) => {
	    const controller = new AbortController();
	    const signal = abortSignal(controller.signal, options.signal);
	    const res = await api.post('config/replace', {
	      signal,
	      searchParams: toUrlSearchParams(options),
	      ...await multipartRequest([fromString$4(JSON.stringify(config))], controller, options.headers)
	    });
	    await res.text();
	  };
	  return replace;
	});

	const createSet = configure(api => {
	  const set = async (key, value, options = {}) => {
	    if (typeof key !== 'string') {
	      throw new Error('Invalid key type');
	    }
	    const params = {
	      ...options,
	      ...encodeParam(key, value)
	    };
	    const res = await api.post('config', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams(params),
	      headers: options.headers
	    });
	    await res.text();
	  };
	  return set;
	});
	const encodeParam = (key, value) => {
	  switch (typeof value) {
	  case 'boolean':
	    return {
	      arg: [
	        key,
	        value.toString()
	      ],
	      bool: true
	    };
	  case 'string':
	    return {
	      arg: [
	        key,
	        value
	      ]
	    };
	  default:
	    return {
	      arg: [
	        key,
	        JSON.stringify(value)
	      ],
	      json: true
	    };
	  }
	};

	function createConfig(config) {
	  return {
	    getAll: createGetAll(config),
	    get: createGet$4(config),
	    set: createSet(config),
	    replace: createReplace(config),
	    profiles: createProfiles(config)
	  };
	}

	const createExport$1 = configure(api => {
	  async function* dagExport(root, options = {}) {
	    const res = await api.post('dag/export', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({ arg: root.toString() }),
	      headers: options.headers
	    });
	    yield* res.iterator();
	  }
	  return dagExport;
	});

	async function* resolve(cid, path, codecs, getBlock, options) {
	  const load = async cid => {
	    const codec = await codecs.getCodec(cid.code);
	    const block = await getBlock(cid, options);
	    return codec.decode(block);
	  };
	  const parts = path.split('/').filter(Boolean);
	  let value = await load(cid);
	  let lastCid = cid;
	  while (parts.length) {
	    const key = parts.shift();
	    if (!key) {
	      throw errCode$q(new Error(`Could not resolve path "${ path }"`), 'ERR_INVALID_PATH');
	    }
	    if (Object.prototype.hasOwnProperty.call(value, key)) {
	      value = value[key];
	      yield {
	        value,
	        remainderPath: parts.join('/')
	      };
	    } else {
	      throw errCode$q(new Error(`no link named "${ key }" under ${ lastCid }`), 'ERR_NO_LINK');
	    }
	    const cid = CID$6.asCID(value);
	    if (cid) {
	      lastCid = cid;
	      value = await load(value);
	    }
	  }
	  yield {
	    value,
	    remainderPath: ''
	  };
	}

	const createGet$3 = (codecs, options) => {
	  const fn = configure((api, opts) => {
	    const getBlock = createGet$5(opts);
	    const get = async (cid, options = {}) => {
	      if (options.path) {
	        const entry = options.localResolve ? await itFirst(resolve(cid, options.path, codecs, getBlock, options)) : await itLast(resolve(cid, options.path, codecs, getBlock, options));
	        const result = entry;
	        if (!result) {
	          throw errCode$q(new Error('Not found'), 'ERR_NOT_FOUND');
	        }
	        return result;
	      }
	      const codec = await codecs.getCodec(cid.code);
	      const block = await getBlock(cid, options);
	      const node = codec.decode(block);
	      return {
	        value: node,
	        remainderPath: ''
	      };
	    };
	    return get;
	  });
	  return fn(options);
	};

	const createImport$1 = configure(api => {
	  async function* dagImport(source, options = {}) {
	    const controller = new AbortController();
	    const signal = abortSignal(controller.signal, options.signal);
	    const {headers, body} = await multipartRequest(source, controller, options.headers);
	    const res = await api.post('dag/import', {
	      signal,
	      headers,
	      body,
	      searchParams: toUrlSearchParams({ 'pin-roots': options.pinRoots })
	    });
	    for await (const {Root} of res.ndjson()) {
	      if (Root !== undefined) {
	        const {
	          Cid: {'/': Cid},
	          PinErrorMsg
	        } = Root;
	        yield {
	          root: {
	            cid: CID$6.parse(Cid),
	            pinErrorMsg: PinErrorMsg
	          }
	        };
	      }
	    }
	  }
	  return dagImport;
	});

	const createPut$2 = (codecs, options) => {
	  const fn = configure(api => {
	    const put = async (dagNode, options = {}) => {
	      const settings = {
	        storeCodec: 'dag-cbor',
	        hashAlg: 'sha2-256',
	        ...options
	      };
	      let serialized;
	      if (settings.inputCodec) {
	        if (!(dagNode instanceof Uint8Array)) {
	          throw new Error('Can only inputCodec on raw bytes that can be decoded');
	        }
	        serialized = dagNode;
	      } else {
	        const storeCodec = await codecs.getCodec(settings.storeCodec);
	        serialized = storeCodec.encode(dagNode);
	        settings.inputCodec = settings.storeCodec;
	      }
	      const controller = new AbortController();
	      const signal = abortSignal(controller.signal, settings.signal);
	      const res = await api.post('dag/put', {
	        timeout: settings.timeout,
	        signal,
	        searchParams: toUrlSearchParams(settings),
	        ...await multipartRequest([serialized], controller, settings.headers)
	      });
	      const data = await res.json();
	      return CID$6.parse(data.Cid['/']);
	    };
	    return put;
	  });
	  return fn(options);
	};

	const createResolve$2 = configure(api => {
	  const resolve = async (ipfsPath, options = {}) => {
	    const res = await api.post('dag/resolve', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: `${ ipfsPath }${ options.path ? `/${ options.path }`.replace(/\/[/]+/g, '/') : '' }`,
	        ...options
	      }),
	      headers: options.headers
	    });
	    const data = await res.json();
	    return {
	      cid: CID$6.parse(data.Cid['/']),
	      remainderPath: data.RemPath
	    };
	  };
	  return resolve;
	});

	function createDag(codecs, config) {
	  return {
	    export: createExport$1(config),
	    get: createGet$3(codecs, config),
	    import: createImport$1(config),
	    put: createPut$2(codecs, config),
	    resolve: createResolve$2(config)
	  };
	}

	const SendingQuery = 0;
	const PeerResponse = 1;
	const FinalPeer = 2;
	const QueryError = 3;
	const Provider = 4;
	const Value = 5;
	const AddingPeer = 6;
	const DialingPeer = 7;

	const mapEvent$1 = event => {
	  if (event.Type === SendingQuery) {
	    return {
	      to: event.ID,
	      name: 'SENDING_QUERY',
	      type: event.Type
	    };
	  }
	  if (event.Type === PeerResponse) {
	    return {
	      from: event.ID,
	      name: 'PEER_RESPONSE',
	      type: event.Type,
	      messageType: 0,
	      messageName: 'PUT_VALUE',
	      closer: (event.Responses || []).map(({ID, Addrs}) => ({
	        id: ID,
	        multiaddrs: Addrs.map(addr => new src$s.Multiaddr(addr))
	      })),
	      providers: (event.Responses || []).map(({ID, Addrs}) => ({
	        id: ID,
	        multiaddrs: Addrs.map(addr => new src$s.Multiaddr(addr))
	      }))
	    };
	  }
	  if (event.Type === FinalPeer) {
	    let peer = {
	      id: event.ID,
	      multiaddrs: []
	    };
	    if (event.Responses && event.Responses.length) {
	      peer = {
	        id: event.Responses[0].ID,
	        multiaddrs: event.Responses[0].Addrs.map(addr => new src$s.Multiaddr(addr))
	      };
	    }
	    return {
	      from: event.ID,
	      name: 'FINAL_PEER',
	      type: event.Type,
	      peer
	    };
	  }
	  if (event.Type === QueryError) {
	    return {
	      from: event.ID,
	      name: 'QUERY_ERROR',
	      type: event.Type,
	      error: new Error(event.Extra)
	    };
	  }
	  if (event.Type === Provider) {
	    return {
	      from: event.ID,
	      name: 'PROVIDER',
	      type: event.Type,
	      providers: event.Responses.map(({ID, Addrs}) => ({
	        id: ID,
	        multiaddrs: Addrs.map(addr => new src$s.Multiaddr(addr))
	      }))
	    };
	  }
	  if (event.Type === Value) {
	    return {
	      from: event.ID,
	      name: 'VALUE',
	      type: event.Type,
	      value: fromString$4(event.Extra, 'base64pad')
	    };
	  }
	  if (event.Type === AddingPeer) {
	    const peers = event.Responses.map(({ID}) => ID);
	    if (!peers.length) {
	      throw new Error('No peer found');
	    }
	    return {
	      name: 'ADDING_PEER',
	      type: event.Type,
	      peer: peers[0]
	    };
	  }
	  if (event.Type === DialingPeer) {
	    return {
	      name: 'DIALING_PEER',
	      type: event.Type,
	      peer: event.ID
	    };
	  }
	  throw new Error('Unknown DHT event type');
	};

	const createFindPeer = configure(api => {
	  async function* findPeer(peerId, options = {}) {
	    const res = await api.post('dht/findpeer', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: peerId,
	        ...options
	      }),
	      headers: options.headers
	    });
	    for await (const event of res.ndjson()) {
	      yield mapEvent$1(event);
	    }
	  }
	  return findPeer;
	});

	const createFindProvs = configure(api => {
	  async function* findProvs(cid, options = {}) {
	    const res = await api.post('dht/findprovs', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: cid.toString(),
	        ...options
	      }),
	      headers: options.headers
	    });
	    for await (const event of res.ndjson()) {
	      yield mapEvent$1(event);
	    }
	  }
	  return findProvs;
	});

	const createGet$2 = configure(api => {
	  async function* get(key, options = {}) {
	    const res = await api.post('dht/get', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: key instanceof Uint8Array ? toString$6(key) : key.toString(),
	        ...options
	      }),
	      headers: options.headers
	    });
	    for await (const event of res.ndjson()) {
	      yield mapEvent$1(event);
	    }
	  }
	  return get;
	});

	const createProvide = configure(api => {
	  async function* provide(cids, options = { recursive: false }) {
	    const cidArr = Array.isArray(cids) ? cids : [cids];
	    const res = await api.post('dht/provide', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: cidArr.map(cid => cid.toString()),
	        ...options
	      }),
	      headers: options.headers
	    });
	    for await (const event of res.ndjson()) {
	      yield mapEvent$1(event);
	    }
	  }
	  return provide;
	});

	const createPut$1 = configure(api => {
	  async function* put(key, value, options = {}) {
	    const controller = new AbortController();
	    const signal = abortSignal(controller.signal, options.signal);
	    const res = await api.post('dht/put', {
	      signal,
	      searchParams: toUrlSearchParams({
	        arg: key instanceof Uint8Array ? toString$6(key) : key.toString(),
	        ...options
	      }),
	      ...await multipartRequest([value], controller, options.headers)
	    });
	    for await (const event of res.ndjson()) {
	      yield mapEvent$1(event);
	    }
	  }
	  return put;
	});

	const createQuery = configure(api => {
	  async function* query(peerId, options = {}) {
	    const res = await api.post('dht/query', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: peerId.toString(),
	        ...options
	      }),
	      headers: options.headers
	    });
	    for await (const event of res.ndjson()) {
	      yield mapEvent$1(event);
	    }
	  }
	  return query;
	});

	function createDht$1(config) {
	  return {
	    findPeer: createFindPeer(config),
	    findProvs: createFindProvs(config),
	    get: createGet$2(config),
	    provide: createProvide(config),
	    put: createPut$1(config),
	    query: createQuery(config)
	  };
	}

	const createCmds = configure(api => {
	  async function cmds(options = {}) {
	    const res = await api.post('diag/cmds', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams(options),
	      headers: options.headers
	    });
	    return res.json();
	  }
	  return cmds;
	});

	const createNet = configure(api => {
	  async function net(options = {}) {
	    const res = await api.post('diag/net', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams(options),
	      headers: options.headers
	    });
	    return res.json();
	  }
	  return net;
	});

	const createSys = configure(api => {
	  async function sys(options = {}) {
	    const res = await api.post('diag/sys', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams(options),
	      headers: options.headers
	    });
	    return res.json();
	  }
	  return sys;
	});

	function createDiag(config) {
	  return {
	    cmds: createCmds(config),
	    net: createNet(config),
	    sys: createSys(config)
	  };
	}

	const createChmod = configure(api => {
	  async function chmod(path, mode, options = {}) {
	    const res = await api.post('files/chmod', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: path,
	        mode,
	        ...options
	      }),
	      headers: options.headers
	    });
	    await res.text();
	  }
	  return chmod;
	});

	const createCp = configure(api => {
	  async function cp(sources, destination, options = {}) {
	    const sourceArr = Array.isArray(sources) ? sources : [sources];
	    const res = await api.post('files/cp', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: sourceArr.concat(destination).map(src => CID$6.asCID(src) ? `/ipfs/${ src }` : src),
	        ...options
	      }),
	      headers: options.headers
	    });
	    await res.text();
	  }
	  return cp;
	});

	const createFlush = configure(api => {
	  async function flush(path, options = {}) {
	    if (!path || typeof path !== 'string') {
	      throw new Error('ipfs.files.flush requires a path');
	    }
	    const res = await api.post('files/flush', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: path,
	        ...options
	      }),
	      headers: options.headers
	    });
	    const data = await res.json();
	    return CID$6.parse(data.Cid);
	  }
	  return flush;
	});

	function objectToCamelWithMetadata(entry) {
	  const file = objectToCamel(entry);
	  if (Object.prototype.hasOwnProperty.call(file, 'mode')) {
	    file.mode = parseInt(file.mode, 8);
	  }
	  if (Object.prototype.hasOwnProperty.call(file, 'mtime')) {
	    file.mtime = {
	      secs: file.mtime,
	      nsecs: file.mtimeNsecs || 0
	    };
	    delete file.mtimeNsecs;
	  }
	  return file;
	}

	const createLs$6 = configure(api => {
	  async function* ls(path, options = {}) {
	    if (!path) {
	      throw new Error('ipfs.files.ls requires a path');
	    }
	    const res = await api.post('files/ls', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: CID$6.asCID(path) ? `/ipfs/${ path }` : path,
	        long: true,
	        ...options,
	        stream: true
	      }),
	      headers: options.headers
	    });
	    for await (const result of res.ndjson()) {
	      if ('Entries' in result) {
	        for (const entry of result.Entries || []) {
	          yield toCoreInterface$2(objectToCamelWithMetadata(entry));
	        }
	      } else {
	        yield toCoreInterface$2(objectToCamelWithMetadata(result));
	      }
	    }
	  }
	  return ls;
	});
	function toCoreInterface$2(entry) {
	  if (entry.hash) {
	    entry.cid = CID$6.parse(entry.hash);
	  }
	  delete entry.hash;
	  entry.type = entry.type === 1 ? 'directory' : 'file';
	  return entry;
	}

	const createMkdir = configure(api => {
	  async function mkdir(path, options = {}) {
	    const res = await api.post('files/mkdir', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: path,
	        ...options
	      }),
	      headers: options.headers
	    });
	    await res.text();
	  }
	  return mkdir;
	});

	const createMv = configure(api => {
	  async function mv(sources, destination, options = {}) {
	    if (!Array.isArray(sources)) {
	      sources = [sources];
	    }
	    const res = await api.post('files/mv', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: sources.concat(destination),
	        ...options
	      }),
	      headers: options.headers
	    });
	    await res.text();
	  }
	  return mv;
	});

	var source$3 = readable => {
	  // Node.js stream
	  if (readable[Symbol.asyncIterator]) return readable

	  // Browser ReadableStream
	  if (readable.getReader) {
	    return (async function * () {
	      const reader = readable.getReader();

	      try {
	        while (true) {
	          const { done, value } = await reader.read();
	          if (done) return
	          yield value;
	        }
	      } finally {
	        reader.releaseLock();
	      }
	    })()
	  }

	  throw new Error('unknown stream')
	};

	const createRead = configure(api => {
	  async function* read(path, options = {}) {
	    const res = await api.post('files/read', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: path,
	        count: options.length,
	        ...options
	      }),
	      headers: options.headers
	    });
	    yield* source$3(res.body);
	  }
	  return read;
	});

	const createRm$4 = configure(api => {
	  async function rm(path, options = {}) {
	    const res = await api.post('files/rm', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: path,
	        ...options
	      }),
	      headers: options.headers
	    });
	    const body = await res.text();
	    if (body !== '') {
	      const error = new http.HTTPError(res);
	      error.message = body;
	      throw error;
	    }
	  }
	  return rm;
	});

	const createStat$2 = configure(api => {
	  async function stat(path, options = {}) {
	    const res = await api.post('files/stat', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: path,
	        ...options
	      }),
	      headers: options.headers
	    });
	    const data = await res.json();
	    data.WithLocality = data.WithLocality || false;
	    return toCoreInterface$1(objectToCamelWithMetadata(data));
	  }
	  return stat;
	});
	function toCoreInterface$1(entry) {
	  entry.cid = CID$6.parse(entry.hash);
	  delete entry.hash;
	  return entry;
	}

	const createTouch = configure(api => {
	  async function touch(path, options = {}) {
	    const res = await api.post('files/touch', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: path,
	        ...options
	      }),
	      headers: options.headers
	    });
	    await res.text();
	  }
	  return touch;
	});

	const createWrite = configure(api => {
	  async function write(path, input, options = {}) {
	    const controller = new AbortController();
	    const signal = abortSignal(controller.signal, options.signal);
	    const res = await api.post('files/write', {
	      signal,
	      searchParams: toUrlSearchParams({
	        arg: path,
	        streamChannels: true,
	        count: options.length,
	        ...options
	      }),
	      ...await multipartRequest([{
	          content: input,
	          path: 'arg',
	          mode: modeToString$1(options.mode),
	          mtime: parseMtime(options.mtime)
	        }], controller, options.headers)
	    });
	    await res.text();
	  }
	  return write;
	});

	function createFiles(config) {
	  return {
	    chmod: createChmod(config),
	    cp: createCp(config),
	    flush: createFlush(config),
	    ls: createLs$6(config),
	    mkdir: createMkdir(config),
	    mv: createMv(config),
	    read: createRead(config),
	    rm: createRm$4(config),
	    stat: createStat$2(config),
	    touch: createTouch(config),
	    write: createWrite(config)
	  };
	}

	const createExport = configure(api => {
	  const exportKey = async (name, password, options = {}) => {
	    throw errCode$q(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED');
	  };
	  return exportKey;
	});

	const createGen = configure(api => {
	  async function gen(name, options = {
	    type: 'rsa',
	    size: 2048
	  }) {
	    const res = await api.post('key/gen', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: name,
	        ...options
	      }),
	      headers: options.headers
	    });
	    const data = await res.json();
	    return objectToCamel(data);
	  }
	  return gen;
	});

	const createImport = configure(api => {
	  async function importKey(name, pem, password, options = {}) {
	    const res = await api.post('key/import', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: name,
	        pem,
	        password,
	        ...options
	      }),
	      headers: options.headers
	    });
	    const data = await res.json();
	    return objectToCamel(data);
	  }
	  return importKey;
	});

	const createInfo = configure(api => {
	  const info = async (name, options = {}) => {
	    throw errCode$q(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED');
	  };
	  return info;
	});

	const createList = configure(api => {
	  async function list(options = {}) {
	    const res = await api.post('key/list', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams(options),
	      headers: options.headers
	    });
	    const data = await res.json();
	    return (data.Keys || []).map(k => objectToCamel(k));
	  }
	  return list;
	});

	const createRename = configure(api => {
	  async function rename(oldName, newName, options = {}) {
	    const res = await api.post('key/rename', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: [
	          oldName,
	          newName
	        ],
	        ...options
	      }),
	      headers: options.headers
	    });
	    return objectToCamel(await res.json());
	  }
	  return rename;
	});

	const createRm$3 = configure(api => {
	  async function rm(name, options = {}) {
	    const res = await api.post('key/rm', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: name,
	        ...options
	      }),
	      headers: options.headers
	    });
	    const data = await res.json();
	    return objectToCamel(data.Keys[0]);
	  }
	  return rm;
	});

	function createKey(config) {
	  return {
	    export: createExport(config),
	    gen: createGen(config),
	    import: createImport(config),
	    info: createInfo(config),
	    list: createList(config),
	    rename: createRename(config),
	    rm: createRm$3(config)
	  };
	}

	const createLevel = configure(api => {
	  async function level(subsystem, level, options = {}) {
	    const res = await api.post('log/level', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: [
	          subsystem,
	          level
	        ],
	        ...options
	      }),
	      headers: options.headers
	    });
	    return objectToCamel(await res.json());
	  }
	  return level;
	});

	const createLs$5 = configure(api => {
	  async function ls(options = {}) {
	    const res = await api.post('log/ls', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams(options),
	      headers: options.headers
	    });
	    const data = await res.json();
	    return data.Strings;
	  }
	  return ls;
	});

	const createTail = configure(api => {
	  async function* tail(options = {}) {
	    const res = await api.post('log/tail', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams(options),
	      headers: options.headers
	    });
	    yield* res.ndjson();
	  }
	  return tail;
	});

	function createLog(config) {
	  return {
	    level: createLevel(config),
	    ls: createLs$5(config),
	    tail: createTail(config)
	  };
	}

	const createPublish$1 = configure(api => {
	  async function publish(path, options = {}) {
	    const res = await api.post('name/publish', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: `${ path }`,
	        ...options
	      }),
	      headers: options.headers
	    });
	    return objectToCamel(await res.json());
	  }
	  return publish;
	});

	const createResolve$1 = configure(api => {
	  async function* resolve(path, options = {}) {
	    const res = await api.post('name/resolve', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: path,
	        stream: true,
	        ...options
	      }),
	      headers: options.headers
	    });
	    for await (const result of res.ndjson()) {
	      yield result.Path;
	    }
	  }
	  return resolve;
	});

	const createCancel = configure(api => {
	  async function cancel(name, options = {}) {
	    const res = await api.post('name/pubsub/cancel', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: name,
	        ...options
	      }),
	      headers: options.headers
	    });
	    return objectToCamel(await res.json());
	  }
	  return cancel;
	});

	const createState = configure(api => {
	  async function state(options = {}) {
	    const res = await api.post('name/pubsub/state', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams(options),
	      headers: options.headers
	    });
	    return objectToCamel(await res.json());
	  }
	  return state;
	});

	const createSubs = configure(api => {
	  async function subs(options = {}) {
	    const res = await api.post('name/pubsub/subs', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams(options),
	      headers: options.headers
	    });
	    const data = await res.json();
	    return data.Strings || [];
	  }
	  return subs;
	});

	function createPubsub$2(config) {
	  return {
	    cancel: createCancel(config),
	    state: createState(config),
	    subs: createSubs(config)
	  };
	}

	function createName(config) {
	  return {
	    publish: createPublish$1(config),
	    resolve: createResolve$1(config),
	    pubsub: createPubsub$2(config)
	  };
	}

	const createData = configure(api => {
	  async function data(cid, options = {}) {
	    const res = await api.post('object/data', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: `${ cid instanceof Uint8Array ? CID$6.decode(cid) : cid }`,
	        ...options
	      }),
	      headers: options.headers
	    });
	    const data = await res.arrayBuffer();
	    return new Uint8Array(data, 0, data.byteLength);
	  }
	  return data;
	});

	const createGet$1 = configure(api => {
	  async function get(cid, options = {}) {
	    const res = await api.post('object/get', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: `${ cid instanceof Uint8Array ? CID$6.decode(cid) : cid }`,
	        dataEncoding: 'base64',
	        ...options
	      }),
	      headers: options.headers
	    });
	    const data = await res.json();
	    return {
	      Data: fromString$4(data.Data, 'base64pad'),
	      Links: (data.Links || []).map(link => ({
	        Name: link.Name,
	        Hash: CID$6.parse(link.Hash),
	        Tsize: link.Size
	      }))
	    };
	  }
	  return get;
	});

	const createLinks = configure(api => {
	  async function links(cid, options = {}) {
	    const res = await api.post('object/links', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: `${ cid instanceof Uint8Array ? CID$6.decode(cid) : cid }`,
	        ...options
	      }),
	      headers: options.headers
	    });
	    const data = await res.json();
	    return (data.Links || []).map(l => ({
	      Name: l.Name,
	      Tsize: l.Size,
	      Hash: CID$6.parse(l.Hash)
	    }));
	  }
	  return links;
	});

	const createNew = configure(api => {
	  async function newObject(options = {}) {
	    const res = await api.post('object/new', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: options.template,
	        ...options
	      }),
	      headers: options.headers
	    });
	    const {Hash} = await res.json();
	    return CID$6.parse(Hash);
	  }
	  return newObject;
	});

	const createPut = (codecs, options) => {
	  const fn = configure(api => {
	    const dagPut = createPut$2(codecs, options);
	    async function put(obj, options = {}) {
	      return dagPut(obj, {
	        ...options,
	        storeCodec: 'dag-pb',
	        hashAlg: 'sha2-256',
	        version: 1
	      });
	    }
	    return put;
	  });
	  return fn(options);
	};

	const createStat$1 = configure(api => {
	  async function stat(cid, options = {}) {
	    const res = await api.post('object/stat', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: `${ cid }`,
	        ...options
	      }),
	      headers: options.headers
	    });
	    const output = await res.json();
	    return {
	      ...output,
	      Hash: CID$6.parse(output.Hash)
	    };
	  }
	  return stat;
	});

	const createAddLink = configure(api => {
	  async function addLink(cid, dLink, options = {}) {
	    const res = await api.post('object/patch/add-link', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: [
	          `${ cid }`,
	          dLink.Name || dLink.name || '',
	          (dLink.Hash || dLink.cid || '').toString() || null
	        ],
	        ...options
	      }),
	      headers: options.headers
	    });
	    const {Hash} = await res.json();
	    return CID$6.parse(Hash);
	  }
	  return addLink;
	});

	const createAppendData = configure(api => {
	  async function appendData(cid, data, options = {}) {
	    const controller = new AbortController();
	    const signal = abortSignal(controller.signal, options.signal);
	    const res = await api.post('object/patch/append-data', {
	      signal,
	      searchParams: toUrlSearchParams({
	        arg: `${ cid }`,
	        ...options
	      }),
	      ...await multipartRequest([data], controller, options.headers)
	    });
	    const {Hash} = await res.json();
	    return CID$6.parse(Hash);
	  }
	  return appendData;
	});

	const createRmLink = configure(api => {
	  async function rmLink(cid, dLink, options = {}) {
	    const res = await api.post('object/patch/rm-link', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: [
	          `${ cid }`,
	          dLink.Name || dLink.name || null
	        ],
	        ...options
	      }),
	      headers: options.headers
	    });
	    const {Hash} = await res.json();
	    return CID$6.parse(Hash);
	  }
	  return rmLink;
	});

	const createSetData = configure(api => {
	  async function setData(cid, data, options = {}) {
	    const controller = new AbortController();
	    const signal = abortSignal(controller.signal, options.signal);
	    const res = await api.post('object/patch/set-data', {
	      signal,
	      searchParams: toUrlSearchParams({
	        arg: [`${ cid }`],
	        ...options
	      }),
	      ...await multipartRequest([data], controller, options.headers)
	    });
	    const {Hash} = await res.json();
	    return CID$6.parse(Hash);
	  }
	  return setData;
	});

	function createPatch(config) {
	  return {
	    addLink: createAddLink(config),
	    appendData: createAppendData(config),
	    rmLink: createRmLink(config),
	    setData: createSetData(config)
	  };
	}

	function createObject(codecs, config) {
	  return {
	    data: createData(config),
	    get: createGet$1(config),
	    links: createLinks(config),
	    new: createNew(config),
	    put: createPut(codecs, config),
	    stat: createStat$1(config),
	    patch: createPatch(config)
	  };
	}

	const createAddAll$1 = configure(api => {
	  async function* addAll(source, options = {}) {
	    for await (const {path, recursive, metadata} of normaliseInput$3(source)) {
	      const res = await api.post('pin/add', {
	        signal: options.signal,
	        searchParams: toUrlSearchParams({
	          ...options,
	          arg: path,
	          recursive,
	          metadata: metadata ? JSON.stringify(metadata) : undefined,
	          stream: true
	        }),
	        headers: options.headers
	      });
	      for await (const pin of res.ndjson()) {
	        if (pin.Pins) {
	          for (const cid of pin.Pins) {
	            yield CID$6.parse(cid);
	          }
	          continue;
	        }
	        yield CID$6.parse(pin);
	      }
	    }
	  }
	  return addAll;
	});

	function createAdd$3(config) {
	  const all = createAddAll$1(config);
	  return configure(() => {
	    async function add(path, options = {}) {
	      return itLast(all([{
	          path,
	          ...options
	        }], options));
	    }
	    return add;
	  })(config);
	}

	function toPin(type, cid, metadata) {
	  const pin = {
	    type,
	    cid: CID$6.parse(cid)
	  };
	  if (metadata) {
	    pin.metadata = metadata;
	  }
	  return pin;
	}
	const createLs$4 = configure(api => {
	  async function* ls(options = {}) {
	    let paths = [];
	    if (options.paths) {
	      paths = Array.isArray(options.paths) ? options.paths : [options.paths];
	    }
	    const res = await api.post('pin/ls', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        ...options,
	        arg: paths.map(path => `${ path }`),
	        stream: true
	      }),
	      headers: options.headers
	    });
	    for await (const pin of res.ndjson()) {
	      if (pin.Keys) {
	        for (const cid of Object.keys(pin.Keys)) {
	          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata);
	        }
	        return;
	      }
	      yield toPin(pin.Type, pin.Cid, pin.Metadata);
	    }
	  }
	  return ls;
	});

	const createRmAll$1 = configure(api => {
	  async function* rmAll(source, options = {}) {
	    for await (const {path, recursive} of normaliseInput$3(source)) {
	      const searchParams = new URLSearchParams(options.searchParams);
	      searchParams.append('arg', `${ path }`);
	      if (recursive != null)
	        searchParams.set('recursive', String(recursive));
	      const res = await api.post('pin/rm', {
	        signal: options.signal,
	        headers: options.headers,
	        searchParams: toUrlSearchParams({
	          ...options,
	          arg: `${ path }`,
	          recursive
	        })
	      });
	      for await (const pin of res.ndjson()) {
	        if (pin.Pins) {
	          yield* pin.Pins.map(cid => CID$6.parse(cid));
	          continue;
	        }
	        yield CID$6.parse(pin);
	      }
	    }
	  }
	  return rmAll;
	});

	const createRm$2 = config => {
	  const all = createRmAll$1(config);
	  return configure(() => {
	    async function rm(path, options = {}) {
	      return itLast(all([{
	          path,
	          ...options
	        }], options));
	    }
	    return rm;
	  })(config);
	};

	const decodePin = ({
	  Name: name,
	  Status: status,
	  Cid: cid
	}) => {
	  return {
	    cid: CID$6.parse(cid),
	    name,
	    status
	  };
	};
	const encodeService = service => {
	  if (typeof service === 'string' && service !== '') {
	    return service;
	  } else {
	    throw new TypeError('service name must be passed');
	  }
	};
	const encodeCID = cid => {
	  if (CID$6.asCID(cid)) {
	    return cid.toString();
	  } else {
	    throw new TypeError(`CID instance expected instead of ${ typeof cid }`);
	  }
	};
	const encodeQuery = ({service, cid, name, status, all}) => {
	  const query = toUrlSearchParams({
	    service: encodeService(service),
	    name,
	    force: all ? true : undefined
	  });
	  if (cid) {
	    for (const value of cid) {
	      query.append('cid', encodeCID(value));
	    }
	  }
	  if (status) {
	    for (const value of status) {
	      query.append('status', value);
	    }
	  }
	  return query;
	};
	const encodeAddParams = ({cid, service, background, name, origins}) => {
	  const params = toUrlSearchParams({
	    arg: encodeCID(cid),
	    service: encodeService(service),
	    name,
	    background: background ? true : undefined
	  });
	  if (origins) {
	    for (const origin of origins) {
	      params.append('origin', origin.toString());
	    }
	  }
	  return params;
	};

	function createAdd$2(client) {
	  async function add(cid, {timeout, signal, headers, ...query}) {
	    const response = await client.post('pin/remote/add', {
	      timeout,
	      signal,
	      headers,
	      searchParams: encodeAddParams({
	        cid,
	        ...query
	      })
	    });
	    return decodePin(await response.json());
	  }
	  return add;
	}

	function createLs$3(client) {
	  async function* ls({timeout, signal, headers, ...query}) {
	    const response = await client.post('pin/remote/ls', {
	      timeout,
	      signal,
	      headers,
	      searchParams: encodeQuery(query)
	    });
	    for await (const pin of response.ndjson()) {
	      yield decodePin(pin);
	    }
	  }
	  return ls;
	}

	function createRm$1(client) {
	  async function rm({timeout, signal, headers, ...query}) {
	    await client.post('pin/remote/rm', {
	      timeout,
	      signal,
	      headers,
	      searchParams: encodeQuery({
	        ...query,
	        all: false
	      })
	    });
	  }
	  return rm;
	}

	function createRmAll(client) {
	  async function rmAll({timeout, signal, headers, ...query}) {
	    await client.post('pin/remote/rm', {
	      timeout,
	      signal,
	      headers,
	      searchParams: encodeQuery({
	        ...query,
	        all: true
	      })
	    });
	  }
	  return rmAll;
	}

	function encodeEndpoint(url) {
	  const href = String(url);
	  if (href === 'undefined') {
	    throw Error('endpoint is required');
	  }
	  return href[href.length - 1] === '/' ? href.slice(0, -1) : href;
	}
	function decodeRemoteService(json) {
	  return {
	    service: json.Service,
	    endpoint: new URL(json.ApiEndpoint),
	    ...json.Stat && { stat: decodeStat(json.Stat) }
	  };
	}
	function decodeStat(json) {
	  switch (json.Status) {
	  case 'valid': {
	      const {Pinning, Pinned, Queued, Failed} = json.PinCount;
	      return {
	        status: 'valid',
	        pinCount: {
	          queued: Queued,
	          pinning: Pinning,
	          pinned: Pinned,
	          failed: Failed
	        }
	      };
	    }
	  case 'invalid': {
	      return { status: 'invalid' };
	    }
	  default: {
	      return { status: json.Status };
	    }
	  }
	}

	function createAdd$1(client) {
	  async function add(name, options) {
	    const {endpoint, key, headers, timeout, signal} = options;
	    await client.post('pin/remote/service/add', {
	      timeout,
	      signal,
	      searchParams: toUrlSearchParams({
	        arg: [
	          name,
	          encodeEndpoint(endpoint),
	          key
	        ]
	      }),
	      headers
	    });
	  }
	  return add;
	}

	function createLs$2(client) {
	  async function ls(options = {}) {
	    const {stat, headers, timeout, signal} = options;
	    const response = await client.post('pin/remote/service/ls', {
	      timeout,
	      signal,
	      headers,
	      searchParams: stat === true ? toUrlSearchParams({ stat }) : undefined
	    });
	    const {RemoteServices} = await response.json();
	    return RemoteServices.map(decodeRemoteService);
	  }
	  return ls;
	}

	function createRm(client) {
	  async function rm(name, options = {}) {
	    await client.post('pin/remote/service/rm', {
	      signal: options.signal,
	      headers: options.headers,
	      searchParams: toUrlSearchParams({ arg: name })
	    });
	  }
	  return rm;
	}

	function createService(config) {
	  const client = new Client(config);
	  return {
	    add: createAdd$1(client),
	    ls: createLs$2(client),
	    rm: createRm(client)
	  };
	}

	function createRemote(config) {
	  const client = new Client(config);
	  return {
	    add: createAdd$2(client),
	    ls: createLs$3(client),
	    rm: createRm$1(client),
	    rmAll: createRmAll(client),
	    service: createService(config)
	  };
	}

	function createPin(config) {
	  return {
	    addAll: createAddAll$1(config),
	    add: createAdd$3(config),
	    ls: createLs$4(config),
	    rmAll: createRmAll$1(config),
	    rm: createRm$2(config),
	    remote: createRemote(config)
	  };
	}

	const rpcArrayToTextArray = strings => {
	  if (Array.isArray(strings)) {
	    return strings.map(rpcToText);
	  }
	  return strings;
	};
	const rpcToText = mb => toString$6(rpcToBytes(mb));
	const rpcToBytes = mb => base64url.decode(mb);
	const textToUrlSafeRpc = text => base64url.encode(fromString$4(text));

	const createLs$1 = configure(api => {
	  async function ls(options = {}) {
	    const {Strings} = await (await api.post('pubsub/ls', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams(options),
	      headers: options.headers
	    })).json();
	    return rpcArrayToTextArray(Strings) || [];
	  }
	  return ls;
	});

	const createPeers$2 = configure(api => {
	  async function peers(topic, options = {}) {
	    const res = await api.post('pubsub/peers', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: textToUrlSafeRpc(topic),
	        ...options
	      }),
	      headers: options.headers
	    });
	    const {Strings} = await res.json();
	    return Strings || [];
	  }
	  return peers;
	});

	const createPublish = configure(api => {
	  async function publish(topic, data, options = {}) {
	    const searchParams = toUrlSearchParams({
	      arg: textToUrlSafeRpc(topic),
	      ...options
	    });
	    const controller = new AbortController();
	    const signal = abortSignal(controller.signal, options.signal);
	    const res = await api.post('pubsub/pub', {
	      signal,
	      searchParams,
	      ...await multipartRequest([data], controller, options.headers)
	    });
	    await res.text();
	  }
	  return publish;
	});

	const log$M = debug$S('ipfs-http-client:pubsub:subscribe');
	const createSubscribe = (options, subsTracker) => {
	  return configure(api => {
	    async function subscribe(topic, handler, options = {}) {
	      options.signal = subsTracker.subscribe(topic, handler, options.signal);
	      let done;
	      let fail;
	      const result = new Promise((resolve, reject) => {
	        done = resolve;
	        fail = reject;
	      });
	      const ffWorkaround = setTimeout(() => done(), 1000);
	      api.post('pubsub/sub', {
	        signal: options.signal,
	        searchParams: toUrlSearchParams({
	          arg: textToUrlSafeRpc(topic),
	          ...options
	        }),
	        headers: options.headers
	      }).catch(err => {
	        subsTracker.unsubscribe(topic, handler);
	        fail(err);
	      }).then(response => {
	        clearTimeout(ffWorkaround);
	        if (!response) {
	          return;
	        }
	        readMessages(response, {
	          onMessage: handler,
	          onEnd: () => subsTracker.unsubscribe(topic, handler),
	          onError: options.onError
	        });
	        done();
	      });
	      return result;
	    }
	    return subscribe;
	  })(options);
	};
	async function readMessages(response, {onMessage, onEnd, onError}) {
	  onError = onError || log$M;
	  try {
	    for await (const msg of response.ndjson()) {
	      try {
	        if (!msg.from) {
	          continue;
	        }
	        onMessage({
	          from: msg.from,
	          data: rpcToBytes(msg.data),
	          seqno: rpcToBytes(msg.seqno),
	          topicIDs: rpcArrayToTextArray(msg.topicIDs)
	        });
	      } catch (err) {
	        err.message = `Failed to parse pubsub message: ${ err.message }`;
	        onError(err, false, msg);
	      }
	    }
	  } catch (err) {
	    if (!isAbortError(err)) {
	      onError(err, true);
	    }
	  } finally {
	    onEnd();
	  }
	}
	const isAbortError = error => {
	  switch (error.type) {
	  case 'aborted':
	    return true;
	  case 'abort':
	    return true;
	  default:
	    return error.name === 'AbortError';
	  }
	};

	const createUnsubscribe = (options, subsTracker) => {
	  async function unsubscribe(topic, handler) {
	    subsTracker.unsubscribe(topic, handler);
	  }
	  return unsubscribe;
	};

	class SubscriptionTracker {
	  constructor() {
	    this._subs = new Map();
	  }
	  subscribe(topic, handler, signal) {
	    const topicSubs = this._subs.get(topic) || [];
	    if (topicSubs.find(s => s.handler === handler)) {
	      throw new Error(`Already subscribed to ${ topic } with this handler`);
	    }
	    const controller = new AbortController();
	    this._subs.set(topic, [{
	        handler,
	        controller
	      }].concat(topicSubs));
	    if (signal) {
	      signal.addEventListener('abort', () => this.unsubscribe(topic, handler));
	    }
	    return controller.signal;
	  }
	  unsubscribe(topic, handler) {
	    const subs = this._subs.get(topic) || [];
	    let unsubs;
	    if (handler) {
	      this._subs.set(topic, subs.filter(s => s.handler !== handler));
	      unsubs = subs.filter(s => s.handler === handler);
	    } else {
	      this._subs.set(topic, []);
	      unsubs = subs;
	    }
	    if (!(this._subs.get(topic) || []).length) {
	      this._subs.delete(topic);
	    }
	    unsubs.forEach(s => s.controller.abort());
	  }
	}

	function createPubsub$1(config) {
	  const subscriptionTracker = new SubscriptionTracker();
	  return {
	    ls: createLs$1(config),
	    peers: createPeers$2(config),
	    publish: createPublish(config),
	    subscribe: createSubscribe(config, subscriptionTracker),
	    unsubscribe: createUnsubscribe(config, subscriptionTracker)
	  };
	}

	const createLocal = configure(api => {
	  async function* refsLocal(options = {}) {
	    const res = await api.post('refs/local', {
	      signal: options.signal,
	      transform: objectToCamel,
	      searchParams: toUrlSearchParams(options),
	      headers: options.headers
	    });
	    yield* res.ndjson();
	  }
	  return refsLocal;
	});

	const createRefs = configure((api, opts) => {
	  const refs = async function* (args, options = {}) {
	    const argsArr = Array.isArray(args) ? args : [args];
	    const res = await api.post('refs', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: argsArr.map(arg => `${ arg instanceof Uint8Array ? CID$6.decode(arg) : arg }`),
	        ...options
	      }),
	      headers: options.headers,
	      transform: objectToCamel
	    });
	    yield* res.ndjson();
	  };
	  return Object.assign(refs, { local: createLocal(opts) });
	});

	const createGc = configure(api => {
	  async function* gc(options = {}) {
	    const res = await api.post('repo/gc', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams(options),
	      headers: options.headers,
	      transform: res => {
	        return {
	          err: res.Error ? new Error(res.Error) : null,
	          cid: (res.Key || {})['/'] ? CID$6.parse(res.Key['/']) : null
	        };
	      }
	    });
	    yield* res.ndjson();
	  }
	  return gc;
	});

	const createStat = configure(api => {
	  async function stat(options = {}) {
	    const res = await api.post('repo/stat', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams(options),
	      headers: options.headers
	    });
	    const data = await res.json();
	    return {
	      numObjects: BigInt(data.NumObjects),
	      repoSize: BigInt(data.RepoSize),
	      repoPath: data.RepoPath,
	      version: data.Version,
	      storageMax: BigInt(data.StorageMax)
	    };
	  }
	  return stat;
	});

	const createVersion$1 = configure(api => {
	  async function version(options = {}) {
	    const res = await (await api.post('repo/version', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams(options),
	      headers: options.headers
	    })).json();
	    return res.Version;
	  }
	  return version;
	});

	function createRepo(config) {
	  return {
	    gc: createGc(config),
	    stat: createStat(config),
	    version: createVersion$1(config)
	  };
	}

	const createBw = configure(api => {
	  async function* bw(options = {}) {
	    const res = await api.post('stats/bw', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams(options),
	      headers: options.headers,
	      transform: stats => ({
	        totalIn: BigInt(stats.TotalIn),
	        totalOut: BigInt(stats.TotalOut),
	        rateIn: parseFloat(stats.RateIn),
	        rateOut: parseFloat(stats.RateOut)
	      })
	    });
	    yield* res.ndjson();
	  }
	  return bw;
	});

	function createStats(config) {
	  return {
	    bitswap: createStat$4(config),
	    repo: createStat(config),
	    bw: createBw(config)
	  };
	}

	const createAddrs$1 = configure(api => {
	  async function addrs(options = {}) {
	    const res = await api.post('swarm/addrs', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams(options),
	      headers: options.headers
	    });
	    const {Addrs} = await res.json();
	    return Object.keys(Addrs).map(id => ({
	      id,
	      addrs: (Addrs[id] || []).map(a => new src$s.Multiaddr(a))
	    }));
	  }
	  return addrs;
	});

	const createConnect$1 = configure(api => {
	  async function connect(addr, options = {}) {
	    const res = await api.post('swarm/connect', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: addr,
	        ...options
	      }),
	      headers: options.headers
	    });
	    const {Strings} = await res.json();
	    return Strings || [];
	  }
	  return connect;
	});

	const createDisconnect$1 = configure(api => {
	  async function disconnect(addr, options = {}) {
	    const res = await api.post('swarm/disconnect', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: addr,
	        ...options
	      }),
	      headers: options.headers
	    });
	    const {Strings} = await res.json();
	    return Strings || [];
	  }
	  return disconnect;
	});

	const createLocalAddrs$1 = configure(api => {
	  async function localAddrs(options = {}) {
	    const res = await api.post('swarm/addrs/local', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams(options),
	      headers: options.headers
	    });
	    const {Strings} = await res.json();
	    return (Strings || []).map(a => new src$s.Multiaddr(a));
	  }
	  return localAddrs;
	});

	const createPeers$1 = configure(api => {
	  async function peers(options = {}) {
	    const res = await api.post('swarm/peers', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams(options),
	      headers: options.headers
	    });
	    const {Peers} = await res.json();
	    return (Peers || []).map(peer => {
	      return {
	        addr: new src$s.Multiaddr(peer.Addr),
	        peer: peer.Peer,
	        muxer: peer.Muxer,
	        latency: peer.Latency,
	        streams: peer.Streams,
	        direction: peer.Direction == null ? undefined : peer.Direction === 0 ? 'inbound' : 'outbound'
	      };
	    });
	  }
	  return peers;
	});

	function createSwarm(config) {
	  return {
	    addrs: createAddrs$1(config),
	    connect: createConnect$1(config),
	    disconnect: createDisconnect$1(config),
	    localAddrs: createLocalAddrs$1(config),
	    peers: createPeers$1(config)
	  };
	}

	const createAddAll = configure(api => {
	  async function* addAll(source, options = {}) {
	    const controller = new AbortController();
	    const signal = abortSignal(controller.signal, options.signal);
	    const {headers, body, total, parts} = await multipartRequest(source, controller, options.headers);
	    const [progressFn, onUploadProgress] = typeof options.progress === 'function' ? createProgressHandler(total, parts, options.progress) : [
	      undefined,
	      undefined
	    ];
	    const res = await api.post('add', {
	      searchParams: toUrlSearchParams({
	        'stream-channels': true,
	        ...options,
	        progress: Boolean(progressFn)
	      }),
	      onUploadProgress,
	      signal,
	      headers,
	      body
	    });
	    for await (let file of res.ndjson()) {
	      file = objectToCamel(file);
	      if (file.hash !== undefined) {
	        yield toCoreInterface(file);
	      } else if (progressFn) {
	        progressFn(file.bytes || 0, file.name);
	      }
	    }
	  }
	  return addAll;
	});
	const createProgressHandler = (total, parts, progress) => parts ? [
	  undefined,
	  createOnUploadProgress(total, parts, progress)
	] : [
	  progress,
	  undefined
	];
	const createOnUploadProgress = (size, parts, progress) => {
	  let index = 0;
	  const count = parts.length;
	  return ({loaded, total}) => {
	    const position = Math.floor(loaded / total * size);
	    while (index < count) {
	      const {start, end, name} = parts[index];
	      if (position < end) {
	        progress(position - start, name);
	        break;
	      } else {
	        progress(end - start, name);
	        index += 1;
	      }
	    }
	  };
	};
	function toCoreInterface({name, hash, size, mode, mtime, mtimeNsecs}) {
	  const output = {
	    path: name,
	    cid: CID$6.parse(hash),
	    size: parseInt(size)
	  };
	  if (mode != null) {
	    output.mode = parseInt(mode, 8);
	  }
	  if (mtime != null) {
	    output.mtime = {
	      secs: mtime,
	      nsecs: mtimeNsecs || 0
	    };
	  }
	  return output;
	}

	function createAdd(options) {
	  const all = createAddAll(options);
	  return configure(() => {
	    async function add(input, options = {}) {
	      return await itLast(all(normaliseInput$2(input), options));
	    }
	    return add;
	  })(options);
	}

	const createCat = configure(api => {
	  async function* cat(path, options = {}) {
	    const res = await api.post('cat', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: path.toString(),
	        ...options
	      }),
	      headers: options.headers
	    });
	    yield* res.iterator();
	  }
	  return cat;
	});

	const createCommands = configure(api => {
	  const commands = async (options = {}) => {
	    const res = await api.post('commands', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams(options),
	      headers: options.headers
	    });
	    return res.json();
	  };
	  return commands;
	});

	const createDns = configure(api => {
	  const dns = async (domain, options = {}) => {
	    const res = await api.post('dns', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: domain,
	        ...options
	      }),
	      headers: options.headers
	    });
	    const data = await res.json();
	    return data.Path;
	  };
	  return dns;
	});

	const createGetEndpointConfig = configure(api => {
	  return () => {
	    const url = new URL(api.opts.base || '');
	    return {
	      host: url.hostname,
	      port: url.port,
	      protocol: url.protocol,
	      pathname: url.pathname,
	      'api-path': url.pathname
	    };
	  };
	});

	const createGet = configure(api => {
	  async function* get(path, options = {}) {
	    const opts = {
	      arg: `${ path instanceof Uint8Array ? CID$6.decode(path) : path }`,
	      ...options
	    };
	    if (opts.compressionLevel) {
	      opts['compression-level'] = opts.compressionLevel;
	      delete opts.compressionLevel;
	    }
	    const res = await api.post('get', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams(opts),
	      headers: options.headers
	    });
	    yield* res.iterator();
	  }
	  return get;
	});

	const createId = configure(api => {
	  async function id(options = {}) {
	    const res = await api.post('id', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: options.peerId ? options.peerId.toString() : undefined,
	        ...options
	      }),
	      headers: options.headers
	    });
	    const data = await res.json();
	    const output = { ...objectToCamel(data) };
	    if (output.addresses) {
	      output.addresses = output.addresses.map(ma => new src$s.Multiaddr(ma));
	    }
	    return output;
	  }
	  return id;
	});

	const createIsOnline = options => {
	  const id = createId(options);
	  async function isOnline(options = {}) {
	    const res = await id(options);
	    return Boolean(res && res.addresses && res.addresses.length);
	  }
	  return isOnline;
	};

	const createLs = configure((api, opts) => {
	  async function* ls(path, options = {}) {
	    const pathStr = `${ path instanceof Uint8Array ? CID$6.decode(path) : path }`;
	    async function mapLink(link) {
	      let hash = link.Hash;
	      if (hash.includes('/')) {
	        const ipfsPath = hash.startsWith('/ipfs/') ? hash : `/ipfs/${ hash }`;
	        const stats = await createStat$2(opts)(ipfsPath);
	        hash = stats.cid;
	      } else {
	        hash = CID$6.parse(hash);
	      }
	      const entry = {
	        name: link.Name,
	        path: pathStr + (link.Name ? `/${ link.Name }` : ''),
	        size: link.Size,
	        cid: hash,
	        type: typeOf(link)
	      };
	      if (link.Mode) {
	        entry.mode = parseInt(link.Mode, 8);
	      }
	      if (link.Mtime !== undefined && link.Mtime !== null) {
	        entry.mtime = { secs: link.Mtime };
	        if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {
	          entry.mtime.nsecs = link.MtimeNsecs;
	        }
	      }
	      return entry;
	    }
	    const res = await api.post('ls', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: pathStr,
	        ...options
	      }),
	      headers: options.headers
	    });
	    for await (let result of res.ndjson()) {
	      result = result.Objects;
	      if (!result) {
	        throw new Error('expected .Objects in results');
	      }
	      result = result[0];
	      if (!result) {
	        throw new Error('expected one array in results.Objects');
	      }
	      const links = result.Links;
	      if (!Array.isArray(links)) {
	        throw new Error('expected one array in results.Objects[0].Links');
	      }
	      if (!links.length) {
	        yield mapLink(result);
	        return;
	      }
	      yield* links.map(mapLink);
	    }
	  }
	  return ls;
	});
	function typeOf(link) {
	  switch (link.Type) {
	  case 1:
	  case 5:
	    return 'dir';
	  case 2:
	    return 'file';
	  default:
	    return 'file';
	  }
	}

	const createMount = configure(api => {
	  async function mount(options = {}) {
	    const res = await api.post('dns', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams(options),
	      headers: options.headers
	    });
	    return objectToCamel(await res.json());
	  }
	  return mount;
	});

	const createPing$1 = configure(api => {
	  async function* ping(peerId, options = {}) {
	    const res = await api.post('ping', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: `${ peerId }`,
	        ...options
	      }),
	      headers: options.headers,
	      transform: objectToCamel
	    });
	    yield* res.ndjson();
	  }
	  return ping;
	});

	const createResolve = configure(api => {
	  async function resolve(path, options = {}) {
	    const res = await api.post('resolve', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams({
	        arg: path,
	        ...options
	      }),
	      headers: options.headers
	    });
	    const {Path} = await res.json();
	    return Path;
	  }
	  return resolve;
	});

	const createStart = configure(api => {
	  const start = async (options = {}) => {
	    throw errCode$q(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED');
	  };
	  return start;
	});

	const createStop = configure(api => {
	  async function stop(options = {}) {
	    const res = await api.post('shutdown', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams(options),
	      headers: options.headers
	    });
	    await res.text();
	  }
	  return stop;
	});

	const createVersion = configure(api => {
	  async function version(options = {}) {
	    const res = await api.post('version', {
	      signal: options.signal,
	      searchParams: toUrlSearchParams(options),
	      headers: options.headers
	    });
	    return {
	      ...objectToCamel(await res.json()),
	      'ipfs-http-client': '1.0.0'
	    };
	  }
	  return version;
	});

	const HTTP = http;

	/**
	 *
	 * @param {string} url
	 * @param {import("../types").HTTPOptions} [options]
	 * @returns {{ path: string; content?: AsyncIterable<Uint8Array> }}
	 */
	const urlSource$1 = (url, options) => {
	  return {
	    path: decodeURIComponent(new URL(url).pathname.split('/').pop() || ''),
	    content: readURLContent(url, options)
	  }
	};

	/**
	 *
	 * @param {string} url
	 * @param {import("../types").HTTPOptions} [options]
	 * @returns {AsyncIterable<Uint8Array>}
	 */
	async function * readURLContent (url, options) {
	  const http = new HTTP();
	  const response = await http.get(url, options);

	  yield * response.iterator();
	}

	var urlSource_1 = urlSource$1;

	function create$2(options = {}) {
	  const id = {
	    name: identity$2.name,
	    code: identity$2.code,
	    encode: id => id,
	    decode: id => id
	  };
	  const multibaseCodecs = Object.values(bases);
	  (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base));
	  const multibases = new Multibases({
	    bases: multibaseCodecs,
	    loadBase: options.ipld && options.ipld.loadBase
	  });
	  const blockCodecs = Object.values(codecs);
	  [
	    dagPB,
	    dagCBOR,
	    dagJSON,
	    dagJOSE,
	    id
	  ].concat(options.ipld && options.ipld.codecs || []).forEach(codec => blockCodecs.push(codec));
	  const multicodecs = new Multicodecs({
	    codecs: blockCodecs,
	    loadCodec: options.ipld && options.ipld.loadCodec
	  });
	  const multihashHashers = Object.values(hashes);
	  (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher));
	  const multihashes = new Multihashes({
	    hashers: multihashHashers,
	    loadHasher: options.ipld && options.ipld.loadHasher
	  });
	  const client = {
	    add: createAdd(options),
	    addAll: createAddAll(options),
	    bitswap: createBitswap$1(options),
	    block: createBlock(options),
	    bootstrap: createBootstrap(options),
	    cat: createCat(options),
	    commands: createCommands(options),
	    config: createConfig(options),
	    dag: createDag(multicodecs, options),
	    dht: createDht$1(options),
	    diag: createDiag(options),
	    dns: createDns(options),
	    files: createFiles(options),
	    get: createGet(options),
	    getEndpointConfig: createGetEndpointConfig(options),
	    id: createId(options),
	    isOnline: createIsOnline(options),
	    key: createKey(options),
	    log: createLog(options),
	    ls: createLs(options),
	    mount: createMount(options),
	    name: createName(options),
	    object: createObject(multicodecs, options),
	    pin: createPin(options),
	    ping: createPing$1(options),
	    pubsub: createPubsub$1(options),
	    refs: createRefs(options),
	    repo: createRepo(options),
	    resolve: createResolve(options),
	    start: createStart(options),
	    stats: createStats(options),
	    stop: createStop(options),
	    swarm: createSwarm(options),
	    version: createVersion(options),
	    bases: multibases,
	    codecs: multicodecs,
	    hashers: multihashes
	  };
	  return client;
	}

	var client = {exports: {}};

	/* eslint-env browser */

	var webSocket = typeof WebSocket === 'undefined' ? require$$0$2 : WebSocket;

	var dom = {};

	var eventIterator = {};

	Object.defineProperty(eventIterator, "__esModule", { value: true });
	class EventQueue {
	    constructor() {
	        this.pullQueue = [];
	        this.pushQueue = [];
	        this.eventHandlers = {};
	        this.isPaused = false;
	        this.isStopped = false;
	    }
	    push(value) {
	        if (this.isStopped)
	            return;
	        const resolution = { value, done: false };
	        if (this.pullQueue.length) {
	            const placeholder = this.pullQueue.shift();
	            if (placeholder)
	                placeholder.resolve(resolution);
	        }
	        else {
	            this.pushQueue.push(Promise.resolve(resolution));
	            if (this.highWaterMark !== undefined &&
	                this.pushQueue.length >= this.highWaterMark &&
	                !this.isPaused) {
	                this.isPaused = true;
	                if (this.eventHandlers.highWater) {
	                    this.eventHandlers.highWater();
	                }
	            }
	        }
	    }
	    stop() {
	        if (this.isStopped)
	            return;
	        this.isStopped = true;
	        this.remove();
	        for (const placeholder of this.pullQueue) {
	            placeholder.resolve({ value: undefined, done: true });
	        }
	        this.pullQueue.length = 0;
	    }
	    fail(error) {
	        if (this.isStopped)
	            return;
	        this.isStopped = true;
	        this.remove();
	        if (this.pullQueue.length) {
	            for (const placeholder of this.pullQueue) {
	                placeholder.reject(error);
	            }
	            this.pullQueue.length = 0;
	        }
	        else {
	            const rejection = Promise.reject(error);
	            /* Attach error handler to avoid leaking an unhandled promise rejection. */
	            rejection.catch(() => { });
	            this.pushQueue.push(rejection);
	        }
	    }
	    remove() {
	        Promise.resolve().then(() => {
	            if (this.removeCallback)
	                this.removeCallback();
	        });
	    }
	    [Symbol.asyncIterator]() {
	        return {
	            next: (value) => {
	                const result = this.pushQueue.shift();
	                if (result) {
	                    if (this.lowWaterMark !== undefined &&
	                        this.pushQueue.length <= this.lowWaterMark &&
	                        this.isPaused) {
	                        this.isPaused = false;
	                        if (this.eventHandlers.lowWater) {
	                            this.eventHandlers.lowWater();
	                        }
	                    }
	                    return result;
	                }
	                else if (this.isStopped) {
	                    return Promise.resolve({ value: undefined, done: true });
	                }
	                else {
	                    return new Promise((resolve, reject) => {
	                        this.pullQueue.push({ resolve, reject });
	                    });
	                }
	            },
	            return: () => {
	                this.isStopped = true;
	                this.pushQueue.length = 0;
	                this.remove();
	                return Promise.resolve({ value: undefined, done: true });
	            },
	        };
	    }
	}
	class EventIterator$1 {
	    constructor(listen, { highWaterMark = 100, lowWaterMark = 1 } = {}) {
	        const queue = new EventQueue();
	        queue.highWaterMark = highWaterMark;
	        queue.lowWaterMark = lowWaterMark;
	        queue.removeCallback =
	            listen({
	                push: value => queue.push(value),
	                stop: () => queue.stop(),
	                fail: error => queue.fail(error),
	                on: (event, fn) => {
	                    queue.eventHandlers[event] = fn;
	                },
	            }) || (() => { });
	        this[Symbol.asyncIterator] = () => queue[Symbol.asyncIterator]();
	        Object.freeze(this);
	    }
	}
	eventIterator.EventIterator = EventIterator$1;
	eventIterator.default = EventIterator$1;

	Object.defineProperty(dom, "__esModule", { value: true });
	const event_iterator_1 = eventIterator;
	dom.EventIterator = event_iterator_1.EventIterator;
	function subscribe(event, options, evOptions) {
	    return new event_iterator_1.EventIterator(({ push }) => {
	        this.addEventListener(event, push, options);
	        return () => this.removeEventListener(event, push, options);
	    }, evOptions);
	}
	dom.subscribe = subscribe;
	dom.default = event_iterator_1.EventIterator;

	const { Buffer: Buffer$1 } = require$$0$1;
	const { EventIterator } = dom;

	// copied from github.com/feross/buffer
	// Some ArrayBuffers are not passing the instanceof check, so we need to do a bit more work :(
	function isArrayBuffer (obj) {
	  return obj instanceof ArrayBuffer ||
	    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
	      typeof obj.byteLength === 'number')
	}

	var source$2 = socket => {
	  const removeListener = socket.removeEventListener || socket.removeListener;

	  const source = (async function * () {
	    const messages = new EventIterator(
	      ({ push, stop, fail }) => {
	        socket.addEventListener('message', push);
	        socket.addEventListener('error', fail);
	        socket.addEventListener('close', stop);

	        return () => {
	          removeListener.call(socket, 'message', push);
	          removeListener.call(socket, 'error', fail);
	          removeListener.call(socket, 'close', stop);
	        }
	      },
	      { highWaterMark: Infinity }
	    );

	    for await (const { data } of messages) {
	      yield isArrayBuffer(data) ? Buffer$1.from(data) : data;
	    }
	  })();

	  let connected = socket.readyState === 1;
	  let connError;

	  socket.addEventListener('open', () => {
	    connected = true;
	    connError = null;
	  });

	  socket.addEventListener('close', () => {
	    connected = false;
	    connError = null;
	  });

	  socket.addEventListener('error', err => {
	    if (!connected) connError = err;
	  });

	  source.connected = () => new Promise((resolve, reject) => {
	    if (connected) return resolve()
	    if (connError) return reject(connError)

	    const cleanUp = cont => {
	      removeListener.call(socket, 'open', onOpen);
	      removeListener.call(socket, 'error', onError);
	      cont();
	    };

	    const onOpen = () => cleanUp(resolve);
	    const onError = err => cleanUp(() => reject(err));

	    socket.addEventListener('open', onOpen);
	    socket.addEventListener('error', onError);
	  });

	  return source
	};

	var ready$1 = async socket => {
	  // if the socket is closing or closed, return end
	  if (socket.readyState >= 2) {
	    throw new Error('socket closed')
	  }

	  // if open, return
	  if (socket.readyState === 1) {
	    return
	  }

	  return new Promise((resolve, reject) => {
	    const remove = socket && (socket.removeEventListener || socket.removeListener);

	    function cleanup () {
	      if (typeof remove === 'function') {
	        remove.call(socket, 'open', handleOpen);
	        remove.call(socket, 'error', handleErr);
	      }
	    }

	    function handleOpen () {
	      cleanup(); resolve();
	    }

	    function handleErr (evt) {
	      cleanup(); reject(evt);
	    }

	    socket.addEventListener('open', handleOpen);
	    socket.addEventListener('error', handleErr);
	  })
	};

	const ready = ready$1;

	var sink$2 = (socket, options) => {
	  options = options || {};
	  options.closeOnEnd = options.closeOnEnd !== false;

	  return async source => {
	    for await (const data of source) {
	      try {
	        await ready(socket);
	      } catch (err) {
	        if (err.message === 'socket closed') break
	        throw err
	      }

	      socket.send(data);
	    }

	    if (options.closeOnEnd && socket.readyState <= 1) {
	      return new Promise((resolve, reject) => {
	        socket.addEventListener('close', event => {
	          if (event.wasClean || event.code === 1006) {
	            resolve();
	          } else {
	            const err = Object.assign(new Error('ws error'), { event });
	            reject(err);
	          }
	        });

	        setTimeout(() => socket.close());
	      })
	    }
	  }
	};

	const source$1 = source$2;
	const sink$1 = sink$2;

	var duplex$2 = (socket, options) => {
	  options = options || {};

	  if (options.binaryType) {
	    socket.binaryType = options.binaryType;
	  } else if (options.binary) {
	    socket.binaryType = 'arraybuffer';
	  }

	  const duplex = {
	    sink: sink$1(socket, options),
	    source: source$1(socket),
	    connected: () => duplex.source.connected()
	  };

	  return duplex
	};

	const { relative } = isoUrl;
	const map$5 = { http: 'ws', https: 'wss' };
	const def = 'ws';

	var wsUrl = (url, location) => relative(url, location, map$5, def);

	(function (module) {

	// load websocket library if we are not in the browser
	var WebSocket = webSocket;
	var duplex = duplex$2;
	var wsurl = wsUrl;

	module.exports = function (addr, opts = {}) {
	  const location = typeof window === 'undefined' ? {} : window.location;

	  const url = wsurl(addr, location);
	  const socket = new WebSocket(url, opts.websocket);

	  const stream = duplex(socket, opts);
	  stream.remoteAddress = url;
	  stream.close = () => new Promise((resolve, reject) => {
	    socket.addEventListener('close', resolve);
	    socket.close();
	  });
	  stream.destroy = () => {
	    if (socket.terminate) {
	      socket.terminate();
	    } else {
	      socket.close();
	    }
	  };
	  stream.socket = socket;

	  return stream
	};

	module.exports.connect = module.exports;
	}(client));

	var listener_browser = function () {
	  throw new Error('WebSocket Servers can not be created in the browser!')
	};

	var constants$b = {};

	// p2p multi-address code
	constants$b.CODE_P2P = 421;
	constants$b.CODE_CIRCUIT = 290;

	constants$b.CODE_TCP = 6;
	constants$b.CODE_WS = 477;
	constants$b.CODE_WSS = 478;

	// Time to wait for a connection to close gracefully before destroying it manually
	constants$b.CLOSE_TIMEOUT = 2000;

	var ipPortToMultiaddr$1 = {exports: {}};

	var ipAddress = {};

	var ipv4 = {};

	var common$2 = {};

	Object.defineProperty(common$2, "__esModule", { value: true });
	common$2.isCorrect = common$2.isInSubnet = void 0;
	function isInSubnet(address) {
	    if (this.subnetMask < address.subnetMask) {
	        return false;
	    }
	    if (this.mask(address.subnetMask) === address.mask()) {
	        return true;
	    }
	    return false;
	}
	common$2.isInSubnet = isInSubnet;
	function isCorrect(defaultBits) {
	    return function () {
	        if (this.addressMinusSuffix !== this.correctForm()) {
	            return false;
	        }
	        if (this.subnetMask === defaultBits && !this.parsedSubnet) {
	            return true;
	        }
	        return this.parsedSubnet === String(this.subnetMask);
	    };
	}
	common$2.isCorrect = isCorrect;

	var constants$a = {};

	Object.defineProperty(constants$a, "__esModule", { value: true });
	constants$a.RE_SUBNET_STRING = constants$a.RE_ADDRESS = constants$a.GROUPS = constants$a.BITS = void 0;
	constants$a.BITS = 32;
	constants$a.GROUPS = 4;
	constants$a.RE_ADDRESS = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/g;
	constants$a.RE_SUBNET_STRING = /\/\d{1,2}$/;

	var addressError = {};

	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        if (typeof b !== "function" && b !== null)
	            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(addressError, "__esModule", { value: true });
	addressError.AddressError = void 0;
	var AddressError = /** @class */ (function (_super) {
	    __extends(AddressError, _super);
	    function AddressError(message, parseMessage) {
	        var _this = _super.call(this, message) || this;
	        _this.name = 'AddressError';
	        if (parseMessage !== null) {
	            _this.parseMessage = parseMessage;
	        }
	        return _this;
	    }
	    return AddressError;
	}(Error));
	addressError.AddressError = AddressError;

	var jsbn = {exports: {}};

	(function (module, exports) {
	(function(){

	    // Copyright (c) 2005  Tom Wu
	    // All Rights Reserved.
	    // See "LICENSE" for details.

	    // Basic JavaScript BN library - subset useful for RSA encryption.

	    // Bits per digit
	    var dbits;

	    // JavaScript engine analysis
	    var canary = 0xdeadbeefcafe;
	    var j_lm = ((canary&0xffffff)==0xefcafe);

	    // (public) Constructor
	    function BigInteger(a,b,c) {
	      if(a != null)
	        if("number" == typeof a) this.fromNumber(a,b,c);
	        else if(b == null && "string" != typeof a) this.fromString(a,256);
	        else this.fromString(a,b);
	    }

	    // return new, unset BigInteger
	    function nbi() { return new BigInteger(null); }

	    // am: Compute w_j += (x*this_i), propagate carries,
	    // c is initial carry, returns final carry.
	    // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
	    // We need to select the fastest one that works in this environment.

	    // am1: use a single mult and divide to get the high bits,
	    // max digit bits should be 26 because
	    // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
	    function am1(i,x,w,j,c,n) {
	      while(--n >= 0) {
	        var v = x*this[i++]+w[j]+c;
	        c = Math.floor(v/0x4000000);
	        w[j++] = v&0x3ffffff;
	      }
	      return c;
	    }
	    // am2 avoids a big mult-and-extract completely.
	    // Max digit bits should be <= 30 because we do bitwise ops
	    // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
	    function am2(i,x,w,j,c,n) {
	      var xl = x&0x7fff, xh = x>>15;
	      while(--n >= 0) {
	        var l = this[i]&0x7fff;
	        var h = this[i++]>>15;
	        var m = xh*l+h*xl;
	        l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
	        c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
	        w[j++] = l&0x3fffffff;
	      }
	      return c;
	    }
	    // Alternately, set max digit bits to 28 since some
	    // browsers slow down when dealing with 32-bit numbers.
	    function am3(i,x,w,j,c,n) {
	      var xl = x&0x3fff, xh = x>>14;
	      while(--n >= 0) {
	        var l = this[i]&0x3fff;
	        var h = this[i++]>>14;
	        var m = xh*l+h*xl;
	        l = xl*l+((m&0x3fff)<<14)+w[j]+c;
	        c = (l>>28)+(m>>14)+xh*h;
	        w[j++] = l&0xfffffff;
	      }
	      return c;
	    }
	    var inBrowser = typeof navigator !== "undefined";
	    if(inBrowser && j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
	      BigInteger.prototype.am = am2;
	      dbits = 30;
	    }
	    else if(inBrowser && j_lm && (navigator.appName != "Netscape")) {
	      BigInteger.prototype.am = am1;
	      dbits = 26;
	    }
	    else { // Mozilla/Netscape seems to prefer am3
	      BigInteger.prototype.am = am3;
	      dbits = 28;
	    }

	    BigInteger.prototype.DB = dbits;
	    BigInteger.prototype.DM = ((1<<dbits)-1);
	    BigInteger.prototype.DV = (1<<dbits);

	    var BI_FP = 52;
	    BigInteger.prototype.FV = Math.pow(2,BI_FP);
	    BigInteger.prototype.F1 = BI_FP-dbits;
	    BigInteger.prototype.F2 = 2*dbits-BI_FP;

	    // Digit conversions
	    var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
	    var BI_RC = new Array();
	    var rr,vv;
	    rr = "0".charCodeAt(0);
	    for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
	    rr = "a".charCodeAt(0);
	    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
	    rr = "A".charCodeAt(0);
	    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

	    function int2char(n) { return BI_RM.charAt(n); }
	    function intAt(s,i) {
	      var c = BI_RC[s.charCodeAt(i)];
	      return (c==null)?-1:c;
	    }

	    // (protected) copy this to r
	    function bnpCopyTo(r) {
	      for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
	      r.t = this.t;
	      r.s = this.s;
	    }

	    // (protected) set from integer value x, -DV <= x < DV
	    function bnpFromInt(x) {
	      this.t = 1;
	      this.s = (x<0)?-1:0;
	      if(x > 0) this[0] = x;
	      else if(x < -1) this[0] = x+this.DV;
	      else this.t = 0;
	    }

	    // return bigint initialized to value
	    function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

	    // (protected) set from string and radix
	    function bnpFromString(s,b) {
	      var k;
	      if(b == 16) k = 4;
	      else if(b == 8) k = 3;
	      else if(b == 256) k = 8; // byte array
	      else if(b == 2) k = 1;
	      else if(b == 32) k = 5;
	      else if(b == 4) k = 2;
	      else { this.fromRadix(s,b); return; }
	      this.t = 0;
	      this.s = 0;
	      var i = s.length, mi = false, sh = 0;
	      while(--i >= 0) {
	        var x = (k==8)?s[i]&0xff:intAt(s,i);
	        if(x < 0) {
	          if(s.charAt(i) == "-") mi = true;
	          continue;
	        }
	        mi = false;
	        if(sh == 0)
	          this[this.t++] = x;
	        else if(sh+k > this.DB) {
	          this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
	          this[this.t++] = (x>>(this.DB-sh));
	        }
	        else
	          this[this.t-1] |= x<<sh;
	        sh += k;
	        if(sh >= this.DB) sh -= this.DB;
	      }
	      if(k == 8 && (s[0]&0x80) != 0) {
	        this.s = -1;
	        if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
	      }
	      this.clamp();
	      if(mi) BigInteger.ZERO.subTo(this,this);
	    }

	    // (protected) clamp off excess high words
	    function bnpClamp() {
	      var c = this.s&this.DM;
	      while(this.t > 0 && this[this.t-1] == c) --this.t;
	    }

	    // (public) return string representation in given radix
	    function bnToString(b) {
	      if(this.s < 0) return "-"+this.negate().toString(b);
	      var k;
	      if(b == 16) k = 4;
	      else if(b == 8) k = 3;
	      else if(b == 2) k = 1;
	      else if(b == 32) k = 5;
	      else if(b == 4) k = 2;
	      else return this.toRadix(b);
	      var km = (1<<k)-1, d, m = false, r = "", i = this.t;
	      var p = this.DB-(i*this.DB)%k;
	      if(i-- > 0) {
	        if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
	        while(i >= 0) {
	          if(p < k) {
	            d = (this[i]&((1<<p)-1))<<(k-p);
	            d |= this[--i]>>(p+=this.DB-k);
	          }
	          else {
	            d = (this[i]>>(p-=k))&km;
	            if(p <= 0) { p += this.DB; --i; }
	          }
	          if(d > 0) m = true;
	          if(m) r += int2char(d);
	        }
	      }
	      return m?r:"0";
	    }

	    // (public) -this
	    function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

	    // (public) |this|
	    function bnAbs() { return (this.s<0)?this.negate():this; }

	    // (public) return + if this > a, - if this < a, 0 if equal
	    function bnCompareTo(a) {
	      var r = this.s-a.s;
	      if(r != 0) return r;
	      var i = this.t;
	      r = i-a.t;
	      if(r != 0) return (this.s<0)?-r:r;
	      while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
	      return 0;
	    }

	    // returns bit length of the integer x
	    function nbits(x) {
	      var r = 1, t;
	      if((t=x>>>16) != 0) { x = t; r += 16; }
	      if((t=x>>8) != 0) { x = t; r += 8; }
	      if((t=x>>4) != 0) { x = t; r += 4; }
	      if((t=x>>2) != 0) { x = t; r += 2; }
	      if((t=x>>1) != 0) { x = t; r += 1; }
	      return r;
	    }

	    // (public) return the number of bits in "this"
	    function bnBitLength() {
	      if(this.t <= 0) return 0;
	      return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
	    }

	    // (protected) r = this << n*DB
	    function bnpDLShiftTo(n,r) {
	      var i;
	      for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
	      for(i = n-1; i >= 0; --i) r[i] = 0;
	      r.t = this.t+n;
	      r.s = this.s;
	    }

	    // (protected) r = this >> n*DB
	    function bnpDRShiftTo(n,r) {
	      for(var i = n; i < this.t; ++i) r[i-n] = this[i];
	      r.t = Math.max(this.t-n,0);
	      r.s = this.s;
	    }

	    // (protected) r = this << n
	    function bnpLShiftTo(n,r) {
	      var bs = n%this.DB;
	      var cbs = this.DB-bs;
	      var bm = (1<<cbs)-1;
	      var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
	      for(i = this.t-1; i >= 0; --i) {
	        r[i+ds+1] = (this[i]>>cbs)|c;
	        c = (this[i]&bm)<<bs;
	      }
	      for(i = ds-1; i >= 0; --i) r[i] = 0;
	      r[ds] = c;
	      r.t = this.t+ds+1;
	      r.s = this.s;
	      r.clamp();
	    }

	    // (protected) r = this >> n
	    function bnpRShiftTo(n,r) {
	      r.s = this.s;
	      var ds = Math.floor(n/this.DB);
	      if(ds >= this.t) { r.t = 0; return; }
	      var bs = n%this.DB;
	      var cbs = this.DB-bs;
	      var bm = (1<<bs)-1;
	      r[0] = this[ds]>>bs;
	      for(var i = ds+1; i < this.t; ++i) {
	        r[i-ds-1] |= (this[i]&bm)<<cbs;
	        r[i-ds] = this[i]>>bs;
	      }
	      if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
	      r.t = this.t-ds;
	      r.clamp();
	    }

	    // (protected) r = this - a
	    function bnpSubTo(a,r) {
	      var i = 0, c = 0, m = Math.min(a.t,this.t);
	      while(i < m) {
	        c += this[i]-a[i];
	        r[i++] = c&this.DM;
	        c >>= this.DB;
	      }
	      if(a.t < this.t) {
	        c -= a.s;
	        while(i < this.t) {
	          c += this[i];
	          r[i++] = c&this.DM;
	          c >>= this.DB;
	        }
	        c += this.s;
	      }
	      else {
	        c += this.s;
	        while(i < a.t) {
	          c -= a[i];
	          r[i++] = c&this.DM;
	          c >>= this.DB;
	        }
	        c -= a.s;
	      }
	      r.s = (c<0)?-1:0;
	      if(c < -1) r[i++] = this.DV+c;
	      else if(c > 0) r[i++] = c;
	      r.t = i;
	      r.clamp();
	    }

	    // (protected) r = this * a, r != this,a (HAC 14.12)
	    // "this" should be the larger one if appropriate.
	    function bnpMultiplyTo(a,r) {
	      var x = this.abs(), y = a.abs();
	      var i = x.t;
	      r.t = i+y.t;
	      while(--i >= 0) r[i] = 0;
	      for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
	      r.s = 0;
	      r.clamp();
	      if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
	    }

	    // (protected) r = this^2, r != this (HAC 14.16)
	    function bnpSquareTo(r) {
	      var x = this.abs();
	      var i = r.t = 2*x.t;
	      while(--i >= 0) r[i] = 0;
	      for(i = 0; i < x.t-1; ++i) {
	        var c = x.am(i,x[i],r,2*i,0,1);
	        if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
	          r[i+x.t] -= x.DV;
	          r[i+x.t+1] = 1;
	        }
	      }
	      if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
	      r.s = 0;
	      r.clamp();
	    }

	    // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
	    // r != q, this != m.  q or r may be null.
	    function bnpDivRemTo(m,q,r) {
	      var pm = m.abs();
	      if(pm.t <= 0) return;
	      var pt = this.abs();
	      if(pt.t < pm.t) {
	        if(q != null) q.fromInt(0);
	        if(r != null) this.copyTo(r);
	        return;
	      }
	      if(r == null) r = nbi();
	      var y = nbi(), ts = this.s, ms = m.s;
	      var nsh = this.DB-nbits(pm[pm.t-1]);   // normalize modulus
	      if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
	      else { pm.copyTo(y); pt.copyTo(r); }
	      var ys = y.t;
	      var y0 = y[ys-1];
	      if(y0 == 0) return;
	      var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
	      var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
	      var i = r.t, j = i-ys, t = (q==null)?nbi():q;
	      y.dlShiftTo(j,t);
	      if(r.compareTo(t) >= 0) {
	        r[r.t++] = 1;
	        r.subTo(t,r);
	      }
	      BigInteger.ONE.dlShiftTo(ys,t);
	      t.subTo(y,y);  // "negative" y so we can replace sub with am later
	      while(y.t < ys) y[y.t++] = 0;
	      while(--j >= 0) {
	        // Estimate quotient digit
	        var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
	        if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {   // Try it out
	          y.dlShiftTo(j,t);
	          r.subTo(t,r);
	          while(r[i] < --qd) r.subTo(t,r);
	        }
	      }
	      if(q != null) {
	        r.drShiftTo(ys,q);
	        if(ts != ms) BigInteger.ZERO.subTo(q,q);
	      }
	      r.t = ys;
	      r.clamp();
	      if(nsh > 0) r.rShiftTo(nsh,r); // Denormalize remainder
	      if(ts < 0) BigInteger.ZERO.subTo(r,r);
	    }

	    // (public) this mod a
	    function bnMod(a) {
	      var r = nbi();
	      this.abs().divRemTo(a,null,r);
	      if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
	      return r;
	    }

	    // Modular reduction using "classic" algorithm
	    function Classic(m) { this.m = m; }
	    function cConvert(x) {
	      if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
	      else return x;
	    }
	    function cRevert(x) { return x; }
	    function cReduce(x) { x.divRemTo(this.m,null,x); }
	    function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
	    function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

	    Classic.prototype.convert = cConvert;
	    Classic.prototype.revert = cRevert;
	    Classic.prototype.reduce = cReduce;
	    Classic.prototype.mulTo = cMulTo;
	    Classic.prototype.sqrTo = cSqrTo;

	    // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
	    // justification:
	    //         xy == 1 (mod m)
	    //         xy =  1+km
	    //   xy(2-xy) = (1+km)(1-km)
	    // x[y(2-xy)] = 1-k^2m^2
	    // x[y(2-xy)] == 1 (mod m^2)
	    // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
	    // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
	    // JS multiply "overflows" differently from C/C++, so care is needed here.
	    function bnpInvDigit() {
	      if(this.t < 1) return 0;
	      var x = this[0];
	      if((x&1) == 0) return 0;
	      var y = x&3;       // y == 1/x mod 2^2
	      y = (y*(2-(x&0xf)*y))&0xf; // y == 1/x mod 2^4
	      y = (y*(2-(x&0xff)*y))&0xff;   // y == 1/x mod 2^8
	      y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;    // y == 1/x mod 2^16
	      // last step - calculate inverse mod DV directly;
	      // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
	      y = (y*(2-x*y%this.DV))%this.DV;       // y == 1/x mod 2^dbits
	      // we really want the negative inverse, and -DV < y < DV
	      return (y>0)?this.DV-y:-y;
	    }

	    // Montgomery reduction
	    function Montgomery(m) {
	      this.m = m;
	      this.mp = m.invDigit();
	      this.mpl = this.mp&0x7fff;
	      this.mph = this.mp>>15;
	      this.um = (1<<(m.DB-15))-1;
	      this.mt2 = 2*m.t;
	    }

	    // xR mod m
	    function montConvert(x) {
	      var r = nbi();
	      x.abs().dlShiftTo(this.m.t,r);
	      r.divRemTo(this.m,null,r);
	      if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
	      return r;
	    }

	    // x/R mod m
	    function montRevert(x) {
	      var r = nbi();
	      x.copyTo(r);
	      this.reduce(r);
	      return r;
	    }

	    // x = x/R mod m (HAC 14.32)
	    function montReduce(x) {
	      while(x.t <= this.mt2) // pad x so am has enough room later
	        x[x.t++] = 0;
	      for(var i = 0; i < this.m.t; ++i) {
	        // faster way of calculating u0 = x[i]*mp mod DV
	        var j = x[i]&0x7fff;
	        var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
	        // use am to combine the multiply-shift-add into one call
	        j = i+this.m.t;
	        x[j] += this.m.am(0,u0,x,i,0,this.m.t);
	        // propagate carry
	        while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
	      }
	      x.clamp();
	      x.drShiftTo(this.m.t,x);
	      if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
	    }

	    // r = "x^2/R mod m"; x != r
	    function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

	    // r = "xy/R mod m"; x,y != r
	    function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

	    Montgomery.prototype.convert = montConvert;
	    Montgomery.prototype.revert = montRevert;
	    Montgomery.prototype.reduce = montReduce;
	    Montgomery.prototype.mulTo = montMulTo;
	    Montgomery.prototype.sqrTo = montSqrTo;

	    // (protected) true iff this is even
	    function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

	    // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
	    function bnpExp(e,z) {
	      if(e > 0xffffffff || e < 1) return BigInteger.ONE;
	      var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
	      g.copyTo(r);
	      while(--i >= 0) {
	        z.sqrTo(r,r2);
	        if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
	        else { var t = r; r = r2; r2 = t; }
	      }
	      return z.revert(r);
	    }

	    // (public) this^e % m, 0 <= e < 2^32
	    function bnModPowInt(e,m) {
	      var z;
	      if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
	      return this.exp(e,z);
	    }

	    // protected
	    BigInteger.prototype.copyTo = bnpCopyTo;
	    BigInteger.prototype.fromInt = bnpFromInt;
	    BigInteger.prototype.fromString = bnpFromString;
	    BigInteger.prototype.clamp = bnpClamp;
	    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
	    BigInteger.prototype.drShiftTo = bnpDRShiftTo;
	    BigInteger.prototype.lShiftTo = bnpLShiftTo;
	    BigInteger.prototype.rShiftTo = bnpRShiftTo;
	    BigInteger.prototype.subTo = bnpSubTo;
	    BigInteger.prototype.multiplyTo = bnpMultiplyTo;
	    BigInteger.prototype.squareTo = bnpSquareTo;
	    BigInteger.prototype.divRemTo = bnpDivRemTo;
	    BigInteger.prototype.invDigit = bnpInvDigit;
	    BigInteger.prototype.isEven = bnpIsEven;
	    BigInteger.prototype.exp = bnpExp;

	    // public
	    BigInteger.prototype.toString = bnToString;
	    BigInteger.prototype.negate = bnNegate;
	    BigInteger.prototype.abs = bnAbs;
	    BigInteger.prototype.compareTo = bnCompareTo;
	    BigInteger.prototype.bitLength = bnBitLength;
	    BigInteger.prototype.mod = bnMod;
	    BigInteger.prototype.modPowInt = bnModPowInt;

	    // "constants"
	    BigInteger.ZERO = nbv(0);
	    BigInteger.ONE = nbv(1);

	    // Copyright (c) 2005-2009  Tom Wu
	    // All Rights Reserved.
	    // See "LICENSE" for details.

	    // Extended JavaScript BN functions, required for RSA private ops.

	    // Version 1.1: new BigInteger("0", 10) returns "proper" zero
	    // Version 1.2: square() API, isProbablePrime fix

	    // (public)
	    function bnClone() { var r = nbi(); this.copyTo(r); return r; }

	    // (public) return value as integer
	    function bnIntValue() {
	      if(this.s < 0) {
	        if(this.t == 1) return this[0]-this.DV;
	        else if(this.t == 0) return -1;
	      }
	      else if(this.t == 1) return this[0];
	      else if(this.t == 0) return 0;
	      // assumes 16 < DB < 32
	      return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
	    }

	    // (public) return value as byte
	    function bnByteValue() { return (this.t==0)?this.s:(this[0]<<24)>>24; }

	    // (public) return value as short (assumes DB>=16)
	    function bnShortValue() { return (this.t==0)?this.s:(this[0]<<16)>>16; }

	    // (protected) return x s.t. r^x < DV
	    function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

	    // (public) 0 if this == 0, 1 if this > 0
	    function bnSigNum() {
	      if(this.s < 0) return -1;
	      else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
	      else return 1;
	    }

	    // (protected) convert to radix string
	    function bnpToRadix(b) {
	      if(b == null) b = 10;
	      if(this.signum() == 0 || b < 2 || b > 36) return "0";
	      var cs = this.chunkSize(b);
	      var a = Math.pow(b,cs);
	      var d = nbv(a), y = nbi(), z = nbi(), r = "";
	      this.divRemTo(d,y,z);
	      while(y.signum() > 0) {
	        r = (a+z.intValue()).toString(b).substr(1) + r;
	        y.divRemTo(d,y,z);
	      }
	      return z.intValue().toString(b) + r;
	    }

	    // (protected) convert from radix string
	    function bnpFromRadix(s,b) {
	      this.fromInt(0);
	      if(b == null) b = 10;
	      var cs = this.chunkSize(b);
	      var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
	      for(var i = 0; i < s.length; ++i) {
	        var x = intAt(s,i);
	        if(x < 0) {
	          if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
	          continue;
	        }
	        w = b*w+x;
	        if(++j >= cs) {
	          this.dMultiply(d);
	          this.dAddOffset(w,0);
	          j = 0;
	          w = 0;
	        }
	      }
	      if(j > 0) {
	        this.dMultiply(Math.pow(b,j));
	        this.dAddOffset(w,0);
	      }
	      if(mi) BigInteger.ZERO.subTo(this,this);
	    }

	    // (protected) alternate constructor
	    function bnpFromNumber(a,b,c) {
	      if("number" == typeof b) {
	        // new BigInteger(int,int,RNG)
	        if(a < 2) this.fromInt(1);
	        else {
	          this.fromNumber(a,c);
	          if(!this.testBit(a-1))    // force MSB set
	            this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);
	          if(this.isEven()) this.dAddOffset(1,0); // force odd
	          while(!this.isProbablePrime(b)) {
	            this.dAddOffset(2,0);
	            if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);
	          }
	        }
	      }
	      else {
	        // new BigInteger(int,RNG)
	        var x = new Array(), t = a&7;
	        x.length = (a>>3)+1;
	        b.nextBytes(x);
	        if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;
	        this.fromString(x,256);
	      }
	    }

	    // (public) convert to bigendian byte array
	    function bnToByteArray() {
	      var i = this.t, r = new Array();
	      r[0] = this.s;
	      var p = this.DB-(i*this.DB)%8, d, k = 0;
	      if(i-- > 0) {
	        if(p < this.DB && (d = this[i]>>p) != (this.s&this.DM)>>p)
	          r[k++] = d|(this.s<<(this.DB-p));
	        while(i >= 0) {
	          if(p < 8) {
	            d = (this[i]&((1<<p)-1))<<(8-p);
	            d |= this[--i]>>(p+=this.DB-8);
	          }
	          else {
	            d = (this[i]>>(p-=8))&0xff;
	            if(p <= 0) { p += this.DB; --i; }
	          }
	          if((d&0x80) != 0) d |= -256;
	          if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;
	          if(k > 0 || d != this.s) r[k++] = d;
	        }
	      }
	      return r;
	    }

	    function bnEquals(a) { return(this.compareTo(a)==0); }
	    function bnMin(a) { return (this.compareTo(a)<0)?this:a; }
	    function bnMax(a) { return (this.compareTo(a)>0)?this:a; }

	    // (protected) r = this op a (bitwise)
	    function bnpBitwiseTo(a,op,r) {
	      var i, f, m = Math.min(a.t,this.t);
	      for(i = 0; i < m; ++i) r[i] = op(this[i],a[i]);
	      if(a.t < this.t) {
	        f = a.s&this.DM;
	        for(i = m; i < this.t; ++i) r[i] = op(this[i],f);
	        r.t = this.t;
	      }
	      else {
	        f = this.s&this.DM;
	        for(i = m; i < a.t; ++i) r[i] = op(f,a[i]);
	        r.t = a.t;
	      }
	      r.s = op(this.s,a.s);
	      r.clamp();
	    }

	    // (public) this & a
	    function op_and(x,y) { return x&y; }
	    function bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }

	    // (public) this | a
	    function op_or(x,y) { return x|y; }
	    function bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }

	    // (public) this ^ a
	    function op_xor(x,y) { return x^y; }
	    function bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }

	    // (public) this & ~a
	    function op_andnot(x,y) { return x&~y; }
	    function bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }

	    // (public) ~this
	    function bnNot() {
	      var r = nbi();
	      for(var i = 0; i < this.t; ++i) r[i] = this.DM&~this[i];
	      r.t = this.t;
	      r.s = ~this.s;
	      return r;
	    }

	    // (public) this << n
	    function bnShiftLeft(n) {
	      var r = nbi();
	      if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);
	      return r;
	    }

	    // (public) this >> n
	    function bnShiftRight(n) {
	      var r = nbi();
	      if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);
	      return r;
	    }

	    // return index of lowest 1-bit in x, x < 2^31
	    function lbit(x) {
	      if(x == 0) return -1;
	      var r = 0;
	      if((x&0xffff) == 0) { x >>= 16; r += 16; }
	      if((x&0xff) == 0) { x >>= 8; r += 8; }
	      if((x&0xf) == 0) { x >>= 4; r += 4; }
	      if((x&3) == 0) { x >>= 2; r += 2; }
	      if((x&1) == 0) ++r;
	      return r;
	    }

	    // (public) returns index of lowest 1-bit (or -1 if none)
	    function bnGetLowestSetBit() {
	      for(var i = 0; i < this.t; ++i)
	        if(this[i] != 0) return i*this.DB+lbit(this[i]);
	      if(this.s < 0) return this.t*this.DB;
	      return -1;
	    }

	    // return number of 1 bits in x
	    function cbit(x) {
	      var r = 0;
	      while(x != 0) { x &= x-1; ++r; }
	      return r;
	    }

	    // (public) return number of set bits
	    function bnBitCount() {
	      var r = 0, x = this.s&this.DM;
	      for(var i = 0; i < this.t; ++i) r += cbit(this[i]^x);
	      return r;
	    }

	    // (public) true iff nth bit is set
	    function bnTestBit(n) {
	      var j = Math.floor(n/this.DB);
	      if(j >= this.t) return(this.s!=0);
	      return((this[j]&(1<<(n%this.DB)))!=0);
	    }

	    // (protected) this op (1<<n)
	    function bnpChangeBit(n,op) {
	      var r = BigInteger.ONE.shiftLeft(n);
	      this.bitwiseTo(r,op,r);
	      return r;
	    }

	    // (public) this | (1<<n)
	    function bnSetBit(n) { return this.changeBit(n,op_or); }

	    // (public) this & ~(1<<n)
	    function bnClearBit(n) { return this.changeBit(n,op_andnot); }

	    // (public) this ^ (1<<n)
	    function bnFlipBit(n) { return this.changeBit(n,op_xor); }

	    // (protected) r = this + a
	    function bnpAddTo(a,r) {
	      var i = 0, c = 0, m = Math.min(a.t,this.t);
	      while(i < m) {
	        c += this[i]+a[i];
	        r[i++] = c&this.DM;
	        c >>= this.DB;
	      }
	      if(a.t < this.t) {
	        c += a.s;
	        while(i < this.t) {
	          c += this[i];
	          r[i++] = c&this.DM;
	          c >>= this.DB;
	        }
	        c += this.s;
	      }
	      else {
	        c += this.s;
	        while(i < a.t) {
	          c += a[i];
	          r[i++] = c&this.DM;
	          c >>= this.DB;
	        }
	        c += a.s;
	      }
	      r.s = (c<0)?-1:0;
	      if(c > 0) r[i++] = c;
	      else if(c < -1) r[i++] = this.DV+c;
	      r.t = i;
	      r.clamp();
	    }

	    // (public) this + a
	    function bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }

	    // (public) this - a
	    function bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }

	    // (public) this * a
	    function bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }

	    // (public) this^2
	    function bnSquare() { var r = nbi(); this.squareTo(r); return r; }

	    // (public) this / a
	    function bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }

	    // (public) this % a
	    function bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }

	    // (public) [this/a,this%a]
	    function bnDivideAndRemainder(a) {
	      var q = nbi(), r = nbi();
	      this.divRemTo(a,q,r);
	      return new Array(q,r);
	    }

	    // (protected) this *= n, this >= 0, 1 < n < DV
	    function bnpDMultiply(n) {
	      this[this.t] = this.am(0,n-1,this,0,0,this.t);
	      ++this.t;
	      this.clamp();
	    }

	    // (protected) this += n << w words, this >= 0
	    function bnpDAddOffset(n,w) {
	      if(n == 0) return;
	      while(this.t <= w) this[this.t++] = 0;
	      this[w] += n;
	      while(this[w] >= this.DV) {
	        this[w] -= this.DV;
	        if(++w >= this.t) this[this.t++] = 0;
	        ++this[w];
	      }
	    }

	    // A "null" reducer
	    function NullExp() {}
	    function nNop(x) { return x; }
	    function nMulTo(x,y,r) { x.multiplyTo(y,r); }
	    function nSqrTo(x,r) { x.squareTo(r); }

	    NullExp.prototype.convert = nNop;
	    NullExp.prototype.revert = nNop;
	    NullExp.prototype.mulTo = nMulTo;
	    NullExp.prototype.sqrTo = nSqrTo;

	    // (public) this^e
	    function bnPow(e) { return this.exp(e,new NullExp()); }

	    // (protected) r = lower n words of "this * a", a.t <= n
	    // "this" should be the larger one if appropriate.
	    function bnpMultiplyLowerTo(a,n,r) {
	      var i = Math.min(this.t+a.t,n);
	      r.s = 0; // assumes a,this >= 0
	      r.t = i;
	      while(i > 0) r[--i] = 0;
	      var j;
	      for(j = r.t-this.t; i < j; ++i) r[i+this.t] = this.am(0,a[i],r,i,0,this.t);
	      for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a[i],r,i,0,n-i);
	      r.clamp();
	    }

	    // (protected) r = "this * a" without lower n words, n > 0
	    // "this" should be the larger one if appropriate.
	    function bnpMultiplyUpperTo(a,n,r) {
	      --n;
	      var i = r.t = this.t+a.t-n;
	      r.s = 0; // assumes a,this >= 0
	      while(--i >= 0) r[i] = 0;
	      for(i = Math.max(n-this.t,0); i < a.t; ++i)
	        r[this.t+i-n] = this.am(n-i,a[i],r,0,0,this.t+i-n);
	      r.clamp();
	      r.drShiftTo(1,r);
	    }

	    // Barrett modular reduction
	    function Barrett(m) {
	      // setup Barrett
	      this.r2 = nbi();
	      this.q3 = nbi();
	      BigInteger.ONE.dlShiftTo(2*m.t,this.r2);
	      this.mu = this.r2.divide(m);
	      this.m = m;
	    }

	    function barrettConvert(x) {
	      if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);
	      else if(x.compareTo(this.m) < 0) return x;
	      else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }
	    }

	    function barrettRevert(x) { return x; }

	    // x = x mod m (HAC 14.42)
	    function barrettReduce(x) {
	      x.drShiftTo(this.m.t-1,this.r2);
	      if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }
	      this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);
	      this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);
	      while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);
	      x.subTo(this.r2,x);
	      while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
	    }

	    // r = x^2 mod m; x != r
	    function barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

	    // r = x*y mod m; x,y != r
	    function barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

	    Barrett.prototype.convert = barrettConvert;
	    Barrett.prototype.revert = barrettRevert;
	    Barrett.prototype.reduce = barrettReduce;
	    Barrett.prototype.mulTo = barrettMulTo;
	    Barrett.prototype.sqrTo = barrettSqrTo;

	    // (public) this^e % m (HAC 14.85)
	    function bnModPow(e,m) {
	      var i = e.bitLength(), k, r = nbv(1), z;
	      if(i <= 0) return r;
	      else if(i < 18) k = 1;
	      else if(i < 48) k = 3;
	      else if(i < 144) k = 4;
	      else if(i < 768) k = 5;
	      else k = 6;
	      if(i < 8)
	        z = new Classic(m);
	      else if(m.isEven())
	        z = new Barrett(m);
	      else
	        z = new Montgomery(m);

	      // precomputation
	      var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;
	      g[1] = z.convert(this);
	      if(k > 1) {
	        var g2 = nbi();
	        z.sqrTo(g[1],g2);
	        while(n <= km) {
	          g[n] = nbi();
	          z.mulTo(g2,g[n-2],g[n]);
	          n += 2;
	        }
	      }

	      var j = e.t-1, w, is1 = true, r2 = nbi(), t;
	      i = nbits(e[j])-1;
	      while(j >= 0) {
	        if(i >= k1) w = (e[j]>>(i-k1))&km;
	        else {
	          w = (e[j]&((1<<(i+1))-1))<<(k1-i);
	          if(j > 0) w |= e[j-1]>>(this.DB+i-k1);
	        }

	        n = k;
	        while((w&1) == 0) { w >>= 1; --n; }
	        if((i -= n) < 0) { i += this.DB; --j; }
	        if(is1) {    // ret == 1, don't bother squaring or multiplying it
	          g[w].copyTo(r);
	          is1 = false;
	        }
	        else {
	          while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }
	          if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }
	          z.mulTo(r2,g[w],r);
	        }

	        while(j >= 0 && (e[j]&(1<<i)) == 0) {
	          z.sqrTo(r,r2); t = r; r = r2; r2 = t;
	          if(--i < 0) { i = this.DB-1; --j; }
	        }
	      }
	      return z.revert(r);
	    }

	    // (public) gcd(this,a) (HAC 14.54)
	    function bnGCD(a) {
	      var x = (this.s<0)?this.negate():this.clone();
	      var y = (a.s<0)?a.negate():a.clone();
	      if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }
	      var i = x.getLowestSetBit(), g = y.getLowestSetBit();
	      if(g < 0) return x;
	      if(i < g) g = i;
	      if(g > 0) {
	        x.rShiftTo(g,x);
	        y.rShiftTo(g,y);
	      }
	      while(x.signum() > 0) {
	        if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);
	        if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);
	        if(x.compareTo(y) >= 0) {
	          x.subTo(y,x);
	          x.rShiftTo(1,x);
	        }
	        else {
	          y.subTo(x,y);
	          y.rShiftTo(1,y);
	        }
	      }
	      if(g > 0) y.lShiftTo(g,y);
	      return y;
	    }

	    // (protected) this % n, n < 2^26
	    function bnpModInt(n) {
	      if(n <= 0) return 0;
	      var d = this.DV%n, r = (this.s<0)?n-1:0;
	      if(this.t > 0)
	        if(d == 0) r = this[0]%n;
	        else for(var i = this.t-1; i >= 0; --i) r = (d*r+this[i])%n;
	      return r;
	    }

	    // (public) 1/this % m (HAC 14.61)
	    function bnModInverse(m) {
	      var ac = m.isEven();
	      if((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;
	      var u = m.clone(), v = this.clone();
	      var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);
	      while(u.signum() != 0) {
	        while(u.isEven()) {
	          u.rShiftTo(1,u);
	          if(ac) {
	            if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }
	            a.rShiftTo(1,a);
	          }
	          else if(!b.isEven()) b.subTo(m,b);
	          b.rShiftTo(1,b);
	        }
	        while(v.isEven()) {
	          v.rShiftTo(1,v);
	          if(ac) {
	            if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }
	            c.rShiftTo(1,c);
	          }
	          else if(!d.isEven()) d.subTo(m,d);
	          d.rShiftTo(1,d);
	        }
	        if(u.compareTo(v) >= 0) {
	          u.subTo(v,u);
	          if(ac) a.subTo(c,a);
	          b.subTo(d,b);
	        }
	        else {
	          v.subTo(u,v);
	          if(ac) c.subTo(a,c);
	          d.subTo(b,d);
	        }
	      }
	      if(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
	      if(d.compareTo(m) >= 0) return d.subtract(m);
	      if(d.signum() < 0) d.addTo(m,d); else return d;
	      if(d.signum() < 0) return d.add(m); else return d;
	    }

	    var lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];
	    var lplim = (1<<26)/lowprimes[lowprimes.length-1];

	    // (public) test primality with certainty >= 1-.5^t
	    function bnIsProbablePrime(t) {
	      var i, x = this.abs();
	      if(x.t == 1 && x[0] <= lowprimes[lowprimes.length-1]) {
	        for(i = 0; i < lowprimes.length; ++i)
	          if(x[0] == lowprimes[i]) return true;
	        return false;
	      }
	      if(x.isEven()) return false;
	      i = 1;
	      while(i < lowprimes.length) {
	        var m = lowprimes[i], j = i+1;
	        while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];
	        m = x.modInt(m);
	        while(i < j) if(m%lowprimes[i++] == 0) return false;
	      }
	      return x.millerRabin(t);
	    }

	    // (protected) true if probably prime (HAC 4.24, Miller-Rabin)
	    function bnpMillerRabin(t) {
	      var n1 = this.subtract(BigInteger.ONE);
	      var k = n1.getLowestSetBit();
	      if(k <= 0) return false;
	      var r = n1.shiftRight(k);
	      t = (t+1)>>1;
	      if(t > lowprimes.length) t = lowprimes.length;
	      var a = nbi();
	      for(var i = 0; i < t; ++i) {
	        //Pick bases at random, instead of starting at 2
	        a.fromInt(lowprimes[Math.floor(Math.random()*lowprimes.length)]);
	        var y = a.modPow(r,this);
	        if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
	          var j = 1;
	          while(j++ < k && y.compareTo(n1) != 0) {
	            y = y.modPowInt(2,this);
	            if(y.compareTo(BigInteger.ONE) == 0) return false;
	          }
	          if(y.compareTo(n1) != 0) return false;
	        }
	      }
	      return true;
	    }

	    // protected
	    BigInteger.prototype.chunkSize = bnpChunkSize;
	    BigInteger.prototype.toRadix = bnpToRadix;
	    BigInteger.prototype.fromRadix = bnpFromRadix;
	    BigInteger.prototype.fromNumber = bnpFromNumber;
	    BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
	    BigInteger.prototype.changeBit = bnpChangeBit;
	    BigInteger.prototype.addTo = bnpAddTo;
	    BigInteger.prototype.dMultiply = bnpDMultiply;
	    BigInteger.prototype.dAddOffset = bnpDAddOffset;
	    BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
	    BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
	    BigInteger.prototype.modInt = bnpModInt;
	    BigInteger.prototype.millerRabin = bnpMillerRabin;

	    // public
	    BigInteger.prototype.clone = bnClone;
	    BigInteger.prototype.intValue = bnIntValue;
	    BigInteger.prototype.byteValue = bnByteValue;
	    BigInteger.prototype.shortValue = bnShortValue;
	    BigInteger.prototype.signum = bnSigNum;
	    BigInteger.prototype.toByteArray = bnToByteArray;
	    BigInteger.prototype.equals = bnEquals;
	    BigInteger.prototype.min = bnMin;
	    BigInteger.prototype.max = bnMax;
	    BigInteger.prototype.and = bnAnd;
	    BigInteger.prototype.or = bnOr;
	    BigInteger.prototype.xor = bnXor;
	    BigInteger.prototype.andNot = bnAndNot;
	    BigInteger.prototype.not = bnNot;
	    BigInteger.prototype.shiftLeft = bnShiftLeft;
	    BigInteger.prototype.shiftRight = bnShiftRight;
	    BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
	    BigInteger.prototype.bitCount = bnBitCount;
	    BigInteger.prototype.testBit = bnTestBit;
	    BigInteger.prototype.setBit = bnSetBit;
	    BigInteger.prototype.clearBit = bnClearBit;
	    BigInteger.prototype.flipBit = bnFlipBit;
	    BigInteger.prototype.add = bnAdd;
	    BigInteger.prototype.subtract = bnSubtract;
	    BigInteger.prototype.multiply = bnMultiply;
	    BigInteger.prototype.divide = bnDivide;
	    BigInteger.prototype.remainder = bnRemainder;
	    BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
	    BigInteger.prototype.modPow = bnModPow;
	    BigInteger.prototype.modInverse = bnModInverse;
	    BigInteger.prototype.pow = bnPow;
	    BigInteger.prototype.gcd = bnGCD;
	    BigInteger.prototype.isProbablePrime = bnIsProbablePrime;

	    // JSBN-specific extension
	    BigInteger.prototype.square = bnSquare;

	    // Expose the Barrett function
	    BigInteger.prototype.Barrett = Barrett;

	    // BigInteger interfaces not implemented in jsbn:

	    // BigInteger(int signum, byte[] magnitude)
	    // double doubleValue()
	    // float floatValue()
	    // int hashCode()
	    // long longValue()
	    // static BigInteger valueOf(long val)

	    // Random number generator - requires a PRNG backend, e.g. prng4.js

	    // For best results, put code like
	    // <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>
	    // in your main HTML document.

	    var rng_state;
	    var rng_pool;
	    var rng_pptr;

	    // Mix in a 32-bit integer into the pool
	    function rng_seed_int(x) {
	      rng_pool[rng_pptr++] ^= x & 255;
	      rng_pool[rng_pptr++] ^= (x >> 8) & 255;
	      rng_pool[rng_pptr++] ^= (x >> 16) & 255;
	      rng_pool[rng_pptr++] ^= (x >> 24) & 255;
	      if(rng_pptr >= rng_psize) rng_pptr -= rng_psize;
	    }

	    // Mix in the current time (w/milliseconds) into the pool
	    function rng_seed_time() {
	      rng_seed_int(new Date().getTime());
	    }

	    // Initialize the pool with junk if needed.
	    if(rng_pool == null) {
	      rng_pool = new Array();
	      rng_pptr = 0;
	      var t;
	      if(typeof window !== "undefined" && window.crypto) {
	        if (window.crypto.getRandomValues) {
	          // Use webcrypto if available
	          var ua = new Uint8Array(32);
	          window.crypto.getRandomValues(ua);
	          for(t = 0; t < 32; ++t)
	            rng_pool[rng_pptr++] = ua[t];
	        }
	        else if(navigator.appName == "Netscape" && navigator.appVersion < "5") {
	          // Extract entropy (256 bits) from NS4 RNG if available
	          var z = window.crypto.random(32);
	          for(t = 0; t < z.length; ++t)
	            rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;
	        }
	      }
	      while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()
	        t = Math.floor(65536 * Math.random());
	        rng_pool[rng_pptr++] = t >>> 8;
	        rng_pool[rng_pptr++] = t & 255;
	      }
	      rng_pptr = 0;
	      rng_seed_time();
	      //rng_seed_int(window.screenX);
	      //rng_seed_int(window.screenY);
	    }

	    function rng_get_byte() {
	      if(rng_state == null) {
	        rng_seed_time();
	        rng_state = prng_newstate();
	        rng_state.init(rng_pool);
	        for(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)
	          rng_pool[rng_pptr] = 0;
	        rng_pptr = 0;
	        //rng_pool = null;
	      }
	      // TODO: allow reseeding after first request
	      return rng_state.next();
	    }

	    function rng_get_bytes(ba) {
	      var i;
	      for(i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();
	    }

	    function SecureRandom() {}

	    SecureRandom.prototype.nextBytes = rng_get_bytes;

	    // prng4.js - uses Arcfour as a PRNG

	    function Arcfour() {
	      this.i = 0;
	      this.j = 0;
	      this.S = new Array();
	    }

	    // Initialize arcfour context from key, an array of ints, each from [0..255]
	    function ARC4init(key) {
	      var i, j, t;
	      for(i = 0; i < 256; ++i)
	        this.S[i] = i;
	      j = 0;
	      for(i = 0; i < 256; ++i) {
	        j = (j + this.S[i] + key[i % key.length]) & 255;
	        t = this.S[i];
	        this.S[i] = this.S[j];
	        this.S[j] = t;
	      }
	      this.i = 0;
	      this.j = 0;
	    }

	    function ARC4next() {
	      var t;
	      this.i = (this.i + 1) & 255;
	      this.j = (this.j + this.S[this.i]) & 255;
	      t = this.S[this.i];
	      this.S[this.i] = this.S[this.j];
	      this.S[this.j] = t;
	      return this.S[(t + this.S[this.i]) & 255];
	    }

	    Arcfour.prototype.init = ARC4init;
	    Arcfour.prototype.next = ARC4next;

	    // Plug in your RNG constructor here
	    function prng_newstate() {
	      return new Arcfour();
	    }

	    // Pool size must be a multiple of 4 and greater than 32.
	    // An array of bytes the size of the pool will be passed to init()
	    var rng_psize = 256;

	    {
	        module.exports = {
	            default: BigInteger,
	            BigInteger: BigInteger,
	            SecureRandom: SecureRandom,
	        };
	    }

	}).call(commonjsGlobal);
	}(jsbn));

	var sprintf = {};

	/* global window, exports, define */

	(function (exports) {
	!function() {

	    var re = {
	        not_string: /[^s]/,
	        not_bool: /[^t]/,
	        not_type: /[^T]/,
	        not_primitive: /[^v]/,
	        number: /[diefg]/,
	        numeric_arg: /[bcdiefguxX]/,
	        json: /[j]/,
	        not_json: /[^j]/,
	        text: /^[^\x25]+/,
	        modulo: /^\x25{2}/,
	        placeholder: /^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,
	        key: /^([a-z_][a-z_\d]*)/i,
	        key_access: /^\.([a-z_][a-z_\d]*)/i,
	        index_access: /^\[(\d+)\]/,
	        sign: /^[+-]/
	    };

	    function sprintf(key) {
	        // `arguments` is not an array, but should be fine for this call
	        return sprintf_format(sprintf_parse(key), arguments)
	    }

	    function vsprintf(fmt, argv) {
	        return sprintf.apply(null, [fmt].concat(argv || []))
	    }

	    function sprintf_format(parse_tree, argv) {
	        var cursor = 1, tree_length = parse_tree.length, arg, output = '', i, k, ph, pad, pad_character, pad_length, is_positive, sign;
	        for (i = 0; i < tree_length; i++) {
	            if (typeof parse_tree[i] === 'string') {
	                output += parse_tree[i];
	            }
	            else if (typeof parse_tree[i] === 'object') {
	                ph = parse_tree[i]; // convenience purposes only
	                if (ph.keys) { // keyword argument
	                    arg = argv[cursor];
	                    for (k = 0; k < ph.keys.length; k++) {
	                        if (arg == undefined) {
	                            throw new Error(sprintf('[sprintf] Cannot access property "%s" of undefined value "%s"', ph.keys[k], ph.keys[k-1]))
	                        }
	                        arg = arg[ph.keys[k]];
	                    }
	                }
	                else if (ph.param_no) { // positional argument (explicit)
	                    arg = argv[ph.param_no];
	                }
	                else { // positional argument (implicit)
	                    arg = argv[cursor++];
	                }

	                if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {
	                    arg = arg();
	                }

	                if (re.numeric_arg.test(ph.type) && (typeof arg !== 'number' && isNaN(arg))) {
	                    throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg))
	                }

	                if (re.number.test(ph.type)) {
	                    is_positive = arg >= 0;
	                }

	                switch (ph.type) {
	                    case 'b':
	                        arg = parseInt(arg, 10).toString(2);
	                        break
	                    case 'c':
	                        arg = String.fromCharCode(parseInt(arg, 10));
	                        break
	                    case 'd':
	                    case 'i':
	                        arg = parseInt(arg, 10);
	                        break
	                    case 'j':
	                        arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0);
	                        break
	                    case 'e':
	                        arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential();
	                        break
	                    case 'f':
	                        arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg);
	                        break
	                    case 'g':
	                        arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg);
	                        break
	                    case 'o':
	                        arg = (parseInt(arg, 10) >>> 0).toString(8);
	                        break
	                    case 's':
	                        arg = String(arg);
	                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg);
	                        break
	                    case 't':
	                        arg = String(!!arg);
	                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg);
	                        break
	                    case 'T':
	                        arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase();
	                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg);
	                        break
	                    case 'u':
	                        arg = parseInt(arg, 10) >>> 0;
	                        break
	                    case 'v':
	                        arg = arg.valueOf();
	                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg);
	                        break
	                    case 'x':
	                        arg = (parseInt(arg, 10) >>> 0).toString(16);
	                        break
	                    case 'X':
	                        arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase();
	                        break
	                }
	                if (re.json.test(ph.type)) {
	                    output += arg;
	                }
	                else {
	                    if (re.number.test(ph.type) && (!is_positive || ph.sign)) {
	                        sign = is_positive ? '+' : '-';
	                        arg = arg.toString().replace(re.sign, '');
	                    }
	                    else {
	                        sign = '';
	                    }
	                    pad_character = ph.pad_char ? ph.pad_char === '0' ? '0' : ph.pad_char.charAt(1) : ' ';
	                    pad_length = ph.width - (sign + arg).length;
	                    pad = ph.width ? (pad_length > 0 ? pad_character.repeat(pad_length) : '') : '';
	                    output += ph.align ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg);
	                }
	            }
	        }
	        return output
	    }

	    var sprintf_cache = Object.create(null);

	    function sprintf_parse(fmt) {
	        if (sprintf_cache[fmt]) {
	            return sprintf_cache[fmt]
	        }

	        var _fmt = fmt, match, parse_tree = [], arg_names = 0;
	        while (_fmt) {
	            if ((match = re.text.exec(_fmt)) !== null) {
	                parse_tree.push(match[0]);
	            }
	            else if ((match = re.modulo.exec(_fmt)) !== null) {
	                parse_tree.push('%');
	            }
	            else if ((match = re.placeholder.exec(_fmt)) !== null) {
	                if (match[2]) {
	                    arg_names |= 1;
	                    var field_list = [], replacement_field = match[2], field_match = [];
	                    if ((field_match = re.key.exec(replacement_field)) !== null) {
	                        field_list.push(field_match[1]);
	                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {
	                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {
	                                field_list.push(field_match[1]);
	                            }
	                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {
	                                field_list.push(field_match[1]);
	                            }
	                            else {
	                                throw new SyntaxError('[sprintf] failed to parse named argument key')
	                            }
	                        }
	                    }
	                    else {
	                        throw new SyntaxError('[sprintf] failed to parse named argument key')
	                    }
	                    match[2] = field_list;
	                }
	                else {
	                    arg_names |= 2;
	                }
	                if (arg_names === 3) {
	                    throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported')
	                }

	                parse_tree.push(
	                    {
	                        placeholder: match[0],
	                        param_no:    match[1],
	                        keys:        match[2],
	                        sign:        match[3],
	                        pad_char:    match[4],
	                        align:       match[5],
	                        width:       match[6],
	                        precision:   match[7],
	                        type:        match[8]
	                    }
	                );
	            }
	            else {
	                throw new SyntaxError('[sprintf] unexpected placeholder')
	            }
	            _fmt = _fmt.substring(match[0].length);
	        }
	        return sprintf_cache[fmt] = parse_tree
	    }

	    /**
	     * export to either browser or node.js
	     */
	    /* eslint-disable quote-props */
	    {
	        exports['sprintf'] = sprintf;
	        exports['vsprintf'] = vsprintf;
	    }
	    if (typeof window !== 'undefined') {
	        window['sprintf'] = sprintf;
	        window['vsprintf'] = vsprintf;
	    }
	    /* eslint-enable quote-props */
	}(); // eslint-disable-line
	}(sprintf));

	/* eslint-disable no-param-reassign */
	var __createBinding$5 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$5 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$5 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$5(result, mod, k);
	    __setModuleDefault$5(result, mod);
	    return result;
	};
	Object.defineProperty(ipv4, "__esModule", { value: true });
	ipv4.Address4 = void 0;
	var common$1 = __importStar$5(common$2);
	var constants$9 = __importStar$5(constants$a);
	var address_error_1$1 = addressError;
	var jsbn_1$1 = jsbn.exports;
	var sprintf_js_1$3 = sprintf;
	/**
	 * Represents an IPv4 address
	 * @class Address4
	 * @param {string} address - An IPv4 address string
	 */
	var Address4$1 = /** @class */ (function () {
	    function Address4(address) {
	        this.groups = constants$9.GROUPS;
	        this.parsedAddress = [];
	        this.parsedSubnet = '';
	        this.subnet = '/32';
	        this.subnetMask = 32;
	        this.v4 = true;
	        /**
	         * Returns true if the address is correct, false otherwise
	         * @memberof Address4
	         * @instance
	         * @returns {Boolean}
	         */
	        this.isCorrect = common$1.isCorrect(constants$9.BITS);
	        /**
	         * Returns true if the given address is in the subnet of the current address
	         * @memberof Address4
	         * @instance
	         * @returns {boolean}
	         */
	        this.isInSubnet = common$1.isInSubnet;
	        this.address = address;
	        var subnet = constants$9.RE_SUBNET_STRING.exec(address);
	        if (subnet) {
	            this.parsedSubnet = subnet[0].replace('/', '');
	            this.subnetMask = parseInt(this.parsedSubnet, 10);
	            this.subnet = "/" + this.subnetMask;
	            if (this.subnetMask < 0 || this.subnetMask > constants$9.BITS) {
	                throw new address_error_1$1.AddressError('Invalid subnet mask.');
	            }
	            address = address.replace(constants$9.RE_SUBNET_STRING, '');
	        }
	        this.addressMinusSuffix = address;
	        this.parsedAddress = this.parse(address);
	    }
	    Address4.isValid = function (address) {
	        try {
	            // eslint-disable-next-line no-new
	            new Address4(address);
	            return true;
	        }
	        catch (e) {
	            return false;
	        }
	    };
	    /*
	     * Parses a v4 address
	     */
	    Address4.prototype.parse = function (address) {
	        var groups = address.split('.');
	        if (!address.match(constants$9.RE_ADDRESS)) {
	            throw new address_error_1$1.AddressError('Invalid IPv4 address.');
	        }
	        return groups;
	    };
	    /**
	     * Returns the correct form of an address
	     * @memberof Address4
	     * @instance
	     * @returns {String}
	     */
	    Address4.prototype.correctForm = function () {
	        return this.parsedAddress.map(function (part) { return parseInt(part, 10); }).join('.');
	    };
	    /**
	     * Converts a hex string to an IPv4 address object
	     * @memberof Address4
	     * @static
	     * @param {string} hex - a hex string to convert
	     * @returns {Address4}
	     */
	    Address4.fromHex = function (hex) {
	        var padded = hex.replace(/:/g, '').padStart(8, '0');
	        var groups = [];
	        var i;
	        for (i = 0; i < 8; i += 2) {
	            var h = padded.slice(i, i + 2);
	            groups.push(parseInt(h, 16));
	        }
	        return new Address4(groups.join('.'));
	    };
	    /**
	     * Converts an integer into a IPv4 address object
	     * @memberof Address4
	     * @static
	     * @param {integer} integer - a number to convert
	     * @returns {Address4}
	     */
	    Address4.fromInteger = function (integer) {
	        return Address4.fromHex(integer.toString(16));
	    };
	    /**
	     * Return an address from in-addr.arpa form
	     * @memberof Address4
	     * @static
	     * @param {string} arpaFormAddress - an 'in-addr.arpa' form ipv4 address
	     * @returns {Adress4}
	     * @example
	     * var address = Address4.fromArpa(42.2.0.192.in-addr.arpa.)
	     * address.correctForm(); // '192.0.2.42'
	     */
	    Address4.fromArpa = function (arpaFormAddress) {
	        // remove ending ".in-addr.arpa." or just "."
	        var leader = arpaFormAddress.replace(/(\.in-addr\.arpa)?\.$/, '');
	        var address = leader.split('.').reverse().join('.');
	        return new Address4(address);
	    };
	    /**
	     * Converts an IPv4 address object to a hex string
	     * @memberof Address4
	     * @instance
	     * @returns {String}
	     */
	    Address4.prototype.toHex = function () {
	        return this.parsedAddress.map(function (part) { return sprintf_js_1$3.sprintf('%02x', parseInt(part, 10)); }).join(':');
	    };
	    /**
	     * Converts an IPv4 address object to an array of bytes
	     * @memberof Address4
	     * @instance
	     * @returns {Array}
	     */
	    Address4.prototype.toArray = function () {
	        return this.parsedAddress.map(function (part) { return parseInt(part, 10); });
	    };
	    /**
	     * Converts an IPv4 address object to an IPv6 address group
	     * @memberof Address4
	     * @instance
	     * @returns {String}
	     */
	    Address4.prototype.toGroup6 = function () {
	        var output = [];
	        var i;
	        for (i = 0; i < constants$9.GROUPS; i += 2) {
	            var hex = sprintf_js_1$3.sprintf('%02x%02x', parseInt(this.parsedAddress[i], 10), parseInt(this.parsedAddress[i + 1], 10));
	            output.push(sprintf_js_1$3.sprintf('%x', parseInt(hex, 16)));
	        }
	        return output.join(':');
	    };
	    /**
	     * Returns the address as a BigInteger
	     * @memberof Address4
	     * @instance
	     * @returns {BigInteger}
	     */
	    Address4.prototype.bigInteger = function () {
	        return new jsbn_1$1.BigInteger(this.parsedAddress.map(function (n) { return sprintf_js_1$3.sprintf('%02x', parseInt(n, 10)); }).join(''), 16);
	    };
	    /**
	     * Helper function getting start address.
	     * @memberof Address4
	     * @instance
	     * @returns {BigInteger}
	     */
	    Address4.prototype._startAddress = function () {
	        return new jsbn_1$1.BigInteger(this.mask() + '0'.repeat(constants$9.BITS - this.subnetMask), 2);
	    };
	    /**
	     * The first address in the range given by this address' subnet.
	     * Often referred to as the Network Address.
	     * @memberof Address4
	     * @instance
	     * @returns {Address4}
	     */
	    Address4.prototype.startAddress = function () {
	        return Address4.fromBigInteger(this._startAddress());
	    };
	    /**
	     * The first host address in the range given by this address's subnet ie
	     * the first address after the Network Address
	     * @memberof Address4
	     * @instance
	     * @returns {Address4}
	     */
	    Address4.prototype.startAddressExclusive = function () {
	        var adjust = new jsbn_1$1.BigInteger('1');
	        return Address4.fromBigInteger(this._startAddress().add(adjust));
	    };
	    /**
	     * Helper function getting end address.
	     * @memberof Address4
	     * @instance
	     * @returns {BigInteger}
	     */
	    Address4.prototype._endAddress = function () {
	        return new jsbn_1$1.BigInteger(this.mask() + '1'.repeat(constants$9.BITS - this.subnetMask), 2);
	    };
	    /**
	     * The last address in the range given by this address' subnet
	     * Often referred to as the Broadcast
	     * @memberof Address4
	     * @instance
	     * @returns {Address4}
	     */
	    Address4.prototype.endAddress = function () {
	        return Address4.fromBigInteger(this._endAddress());
	    };
	    /**
	     * The last host address in the range given by this address's subnet ie
	     * the last address prior to the Broadcast Address
	     * @memberof Address4
	     * @instance
	     * @returns {Address4}
	     */
	    Address4.prototype.endAddressExclusive = function () {
	        var adjust = new jsbn_1$1.BigInteger('1');
	        return Address4.fromBigInteger(this._endAddress().subtract(adjust));
	    };
	    /**
	     * Converts a BigInteger to a v4 address object
	     * @memberof Address4
	     * @static
	     * @param {BigInteger} bigInteger - a BigInteger to convert
	     * @returns {Address4}
	     */
	    Address4.fromBigInteger = function (bigInteger) {
	        return Address4.fromInteger(parseInt(bigInteger.toString(), 10));
	    };
	    /**
	     * Returns the first n bits of the address, defaulting to the
	     * subnet mask
	     * @memberof Address4
	     * @instance
	     * @returns {String}
	     */
	    Address4.prototype.mask = function (mask) {
	        if (mask === undefined) {
	            mask = this.subnetMask;
	        }
	        return this.getBitsBase2(0, mask);
	    };
	    /**
	     * Returns the bits in the given range as a base-2 string
	     * @memberof Address4
	     * @instance
	     * @returns {string}
	     */
	    Address4.prototype.getBitsBase2 = function (start, end) {
	        return this.binaryZeroPad().slice(start, end);
	    };
	    /**
	     * Return the reversed ip6.arpa form of the address
	     * @memberof Address4
	     * @param {Object} options
	     * @param {boolean} options.omitSuffix - omit the "in-addr.arpa" suffix
	     * @instance
	     * @returns {String}
	     */
	    Address4.prototype.reverseForm = function (options) {
	        if (!options) {
	            options = {};
	        }
	        var reversed = this.correctForm().split('.').reverse().join('.');
	        if (options.omitSuffix) {
	            return reversed;
	        }
	        return sprintf_js_1$3.sprintf('%s.in-addr.arpa.', reversed);
	    };
	    /**
	     * Returns true if the given address is a multicast address
	     * @memberof Address4
	     * @instance
	     * @returns {boolean}
	     */
	    Address4.prototype.isMulticast = function () {
	        return this.isInSubnet(new Address4('224.0.0.0/4'));
	    };
	    /**
	     * Returns a zero-padded base-2 string representation of the address
	     * @memberof Address4
	     * @instance
	     * @returns {string}
	     */
	    Address4.prototype.binaryZeroPad = function () {
	        return this.bigInteger().toString(2).padStart(constants$9.BITS, '0');
	    };
	    /**
	     * Groups an IPv4 address for inclusion at the end of an IPv6 address
	     * @returns {String}
	     */
	    Address4.prototype.groupForV6 = function () {
	        var segments = this.parsedAddress;
	        return this.address.replace(constants$9.RE_ADDRESS, sprintf_js_1$3.sprintf('<span class="hover-group group-v4 group-6">%s</span>.<span class="hover-group group-v4 group-7">%s</span>', segments.slice(0, 2).join('.'), segments.slice(2, 4).join('.')));
	    };
	    return Address4;
	}());
	ipv4.Address4 = Address4$1;

	var ipv6 = {};

	var constants$8 = {};

	Object.defineProperty(constants$8, "__esModule", { value: true });
	constants$8.RE_URL_WITH_PORT = constants$8.RE_URL = constants$8.RE_ZONE_STRING = constants$8.RE_SUBNET_STRING = constants$8.RE_BAD_ADDRESS = constants$8.RE_BAD_CHARACTERS = constants$8.TYPES = constants$8.SCOPES = constants$8.GROUPS = constants$8.BITS = void 0;
	constants$8.BITS = 128;
	constants$8.GROUPS = 8;
	/**
	 * Represents IPv6 address scopes
	 * @memberof Address6
	 * @static
	 */
	constants$8.SCOPES = {
	    0: 'Reserved',
	    1: 'Interface local',
	    2: 'Link local',
	    4: 'Admin local',
	    5: 'Site local',
	    8: 'Organization local',
	    14: 'Global',
	    15: 'Reserved',
	};
	/**
	 * Represents IPv6 address types
	 * @memberof Address6
	 * @static
	 */
	constants$8.TYPES = {
	    'ff01::1/128': 'Multicast (All nodes on this interface)',
	    'ff01::2/128': 'Multicast (All routers on this interface)',
	    'ff02::1/128': 'Multicast (All nodes on this link)',
	    'ff02::2/128': 'Multicast (All routers on this link)',
	    'ff05::2/128': 'Multicast (All routers in this site)',
	    'ff02::5/128': 'Multicast (OSPFv3 AllSPF routers)',
	    'ff02::6/128': 'Multicast (OSPFv3 AllDR routers)',
	    'ff02::9/128': 'Multicast (RIP routers)',
	    'ff02::a/128': 'Multicast (EIGRP routers)',
	    'ff02::d/128': 'Multicast (PIM routers)',
	    'ff02::16/128': 'Multicast (MLDv2 reports)',
	    'ff01::fb/128': 'Multicast (mDNSv6)',
	    'ff02::fb/128': 'Multicast (mDNSv6)',
	    'ff05::fb/128': 'Multicast (mDNSv6)',
	    'ff02::1:2/128': 'Multicast (All DHCP servers and relay agents on this link)',
	    'ff05::1:2/128': 'Multicast (All DHCP servers and relay agents in this site)',
	    'ff02::1:3/128': 'Multicast (All DHCP servers on this link)',
	    'ff05::1:3/128': 'Multicast (All DHCP servers in this site)',
	    '::/128': 'Unspecified',
	    '::1/128': 'Loopback',
	    'ff00::/8': 'Multicast',
	    'fe80::/10': 'Link-local unicast',
	};
	/**
	 * A regular expression that matches bad characters in an IPv6 address
	 * @memberof Address6
	 * @static
	 */
	constants$8.RE_BAD_CHARACTERS = /([^0-9a-f:/%])/gi;
	/**
	 * A regular expression that matches an incorrect IPv6 address
	 * @memberof Address6
	 * @static
	 */
	constants$8.RE_BAD_ADDRESS = /([0-9a-f]{5,}|:{3,}|[^:]:$|^:[^:]|\/$)/gi;
	/**
	 * A regular expression that matches an IPv6 subnet
	 * @memberof Address6
	 * @static
	 */
	constants$8.RE_SUBNET_STRING = /\/\d{1,3}(?=%|$)/;
	/**
	 * A regular expression that matches an IPv6 zone
	 * @memberof Address6
	 * @static
	 */
	constants$8.RE_ZONE_STRING = /%.*$/;
	constants$8.RE_URL = new RegExp(/^\[{0,1}([0-9a-f:]+)\]{0,1}/);
	constants$8.RE_URL_WITH_PORT = new RegExp(/\[([0-9a-f:]+)\]:([0-9]{1,5})/);

	var helpers$1 = {};

	Object.defineProperty(helpers$1, "__esModule", { value: true });
	helpers$1.simpleGroup = helpers$1.spanLeadingZeroes = helpers$1.spanAll = helpers$1.spanAllZeroes = void 0;
	var sprintf_js_1$2 = sprintf;
	/**
	 * @returns {String} the string with all zeroes contained in a <span>
	 */
	function spanAllZeroes(s) {
	    return s.replace(/(0+)/g, '<span class="zero">$1</span>');
	}
	helpers$1.spanAllZeroes = spanAllZeroes;
	/**
	 * @returns {String} the string with each character contained in a <span>
	 */
	function spanAll(s, offset) {
	    if (offset === void 0) { offset = 0; }
	    var letters = s.split('');
	    return letters
	        .map(function (n, i) {
	        return sprintf_js_1$2.sprintf('<span class="digit value-%s position-%d">%s</span>', n, i + offset, spanAllZeroes(n));
	    } // XXX Use #base-2 .value-0 instead?
	    )
	        .join('');
	}
	helpers$1.spanAll = spanAll;
	function spanLeadingZeroesSimple(group) {
	    return group.replace(/^(0+)/, '<span class="zero">$1</span>');
	}
	/**
	 * @returns {String} the string with leading zeroes contained in a <span>
	 */
	function spanLeadingZeroes(address) {
	    var groups = address.split(':');
	    return groups.map(function (g) { return spanLeadingZeroesSimple(g); }).join(':');
	}
	helpers$1.spanLeadingZeroes = spanLeadingZeroes;
	/**
	 * Groups an address
	 * @returns {String} a grouped address
	 */
	function simpleGroup(addressString, offset) {
	    if (offset === void 0) { offset = 0; }
	    var groups = addressString.split(':');
	    return groups.map(function (g, i) {
	        if (/group-v4/.test(g)) {
	            return g;
	        }
	        return sprintf_js_1$2.sprintf('<span class="hover-group group-%d">%s</span>', i + offset, spanLeadingZeroesSimple(g));
	    });
	}
	helpers$1.simpleGroup = simpleGroup;

	var regularExpressions = {};

	var __createBinding$4 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$4 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$4 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$4(result, mod, k);
	    __setModuleDefault$4(result, mod);
	    return result;
	};
	Object.defineProperty(regularExpressions, "__esModule", { value: true });
	regularExpressions.possibleElisions = regularExpressions.simpleRegularExpression = regularExpressions.ADDRESS_BOUNDARY = regularExpressions.padGroup = regularExpressions.groupPossibilities = void 0;
	var v6 = __importStar$4(constants$8);
	var sprintf_js_1$1 = sprintf;
	function groupPossibilities(possibilities) {
	    return sprintf_js_1$1.sprintf('(%s)', possibilities.join('|'));
	}
	regularExpressions.groupPossibilities = groupPossibilities;
	function padGroup(group) {
	    if (group.length < 4) {
	        return sprintf_js_1$1.sprintf('0{0,%d}%s', 4 - group.length, group);
	    }
	    return group;
	}
	regularExpressions.padGroup = padGroup;
	regularExpressions.ADDRESS_BOUNDARY = '[^A-Fa-f0-9:]';
	function simpleRegularExpression(groups) {
	    var zeroIndexes = [];
	    groups.forEach(function (group, i) {
	        var groupInteger = parseInt(group, 16);
	        if (groupInteger === 0) {
	            zeroIndexes.push(i);
	        }
	    });
	    // You can technically elide a single 0, this creates the regular expressions
	    // to match that eventuality
	    var possibilities = zeroIndexes.map(function (zeroIndex) {
	        return groups
	            .map(function (group, i) {
	            if (i === zeroIndex) {
	                var elision = i === 0 || i === v6.GROUPS - 1 ? ':' : '';
	                return groupPossibilities([padGroup(group), elision]);
	            }
	            return padGroup(group);
	        })
	            .join(':');
	    });
	    // The simplest case
	    possibilities.push(groups.map(padGroup).join(':'));
	    return groupPossibilities(possibilities);
	}
	regularExpressions.simpleRegularExpression = simpleRegularExpression;
	function possibleElisions(elidedGroups, moreLeft, moreRight) {
	    var left = moreLeft ? '' : ':';
	    var right = moreRight ? '' : ':';
	    var possibilities = [];
	    // 1. elision of everything (::)
	    if (!moreLeft && !moreRight) {
	        possibilities.push('::');
	    }
	    // 2. complete elision of the middle
	    if (moreLeft && moreRight) {
	        possibilities.push('');
	    }
	    if ((moreRight && !moreLeft) || (!moreRight && moreLeft)) {
	        // 3. complete elision of one side
	        possibilities.push(':');
	    }
	    // 4. elision from the left side
	    possibilities.push(sprintf_js_1$1.sprintf('%s(:0{1,4}){1,%d}', left, elidedGroups - 1));
	    // 5. elision from the right side
	    possibilities.push(sprintf_js_1$1.sprintf('(0{1,4}:){1,%d}%s', elidedGroups - 1, right));
	    // 6. no elision
	    possibilities.push(sprintf_js_1$1.sprintf('(0{1,4}:){%d}0{1,4}', elidedGroups - 1));
	    // 7. elision (including sloppy elision) from the middle
	    for (var groups = 1; groups < elidedGroups - 1; groups++) {
	        for (var position = 1; position < elidedGroups - groups; position++) {
	            possibilities.push(sprintf_js_1$1.sprintf('(0{1,4}:){%d}:(0{1,4}:){%d}0{1,4}', position, elidedGroups - position - groups - 1));
	        }
	    }
	    return groupPossibilities(possibilities);
	}
	regularExpressions.possibleElisions = possibleElisions;

	/* eslint-disable prefer-destructuring */
	/* eslint-disable no-param-reassign */
	var __createBinding$3 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$3 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$3 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$3(result, mod, k);
	    __setModuleDefault$3(result, mod);
	    return result;
	};
	var __spreadArray = (commonjsGlobal && commonjsGlobal.__spreadArray) || function (to, from) {
	    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
	        to[j] = from[i];
	    return to;
	};
	Object.defineProperty(ipv6, "__esModule", { value: true });
	ipv6.Address6 = void 0;
	var common = __importStar$3(common$2);
	var constants4 = __importStar$3(constants$a);
	var constants6 = __importStar$3(constants$8);
	var helpers = __importStar$3(helpers$1);
	var ipv4_1 = ipv4;
	var regular_expressions_1 = regularExpressions;
	var address_error_1 = addressError;
	var jsbn_1 = jsbn.exports;
	var sprintf_js_1 = sprintf;
	function assert(condition) {
	    if (!condition) {
	        throw new Error('Assertion failed.');
	    }
	}
	function addCommas(number) {
	    var r = /(\d+)(\d{3})/;
	    while (r.test(number)) {
	        number = number.replace(r, '$1,$2');
	    }
	    return number;
	}
	function spanLeadingZeroes4(n) {
	    n = n.replace(/^(0{1,})([1-9]+)$/, '<span class="parse-error">$1</span>$2');
	    n = n.replace(/^(0{1,})(0)$/, '<span class="parse-error">$1</span>$2');
	    return n;
	}
	/*
	 * A helper function to compact an array
	 */
	function compact(address, slice) {
	    var s1 = [];
	    var s2 = [];
	    var i;
	    for (i = 0; i < address.length; i++) {
	        if (i < slice[0]) {
	            s1.push(address[i]);
	        }
	        else if (i > slice[1]) {
	            s2.push(address[i]);
	        }
	    }
	    return s1.concat(['compact']).concat(s2);
	}
	function paddedHex(octet) {
	    return sprintf_js_1.sprintf('%04x', parseInt(octet, 16));
	}
	function unsignByte(b) {
	    // eslint-disable-next-line no-bitwise
	    return b & 0xff;
	}
	/**
	 * Represents an IPv6 address
	 * @class Address6
	 * @param {string} address - An IPv6 address string
	 * @param {number} [groups=8] - How many octets to parse
	 * @example
	 * var address = new Address6('2001::/32');
	 */
	var Address6$1 = /** @class */ (function () {
	    function Address6(address, optionalGroups) {
	        this.addressMinusSuffix = '';
	        this.parsedSubnet = '';
	        this.subnet = '/128';
	        this.subnetMask = 128;
	        this.v4 = false;
	        this.zone = '';
	        // #region Attributes
	        /**
	         * Returns true if the given address is in the subnet of the current address
	         * @memberof Address6
	         * @instance
	         * @returns {boolean}
	         */
	        this.isInSubnet = common.isInSubnet;
	        /**
	         * Returns true if the address is correct, false otherwise
	         * @memberof Address6
	         * @instance
	         * @returns {boolean}
	         */
	        this.isCorrect = common.isCorrect(constants6.BITS);
	        if (optionalGroups === undefined) {
	            this.groups = constants6.GROUPS;
	        }
	        else {
	            this.groups = optionalGroups;
	        }
	        this.address = address;
	        var subnet = constants6.RE_SUBNET_STRING.exec(address);
	        if (subnet) {
	            this.parsedSubnet = subnet[0].replace('/', '');
	            this.subnetMask = parseInt(this.parsedSubnet, 10);
	            this.subnet = "/" + this.subnetMask;
	            if (Number.isNaN(this.subnetMask) ||
	                this.subnetMask < 0 ||
	                this.subnetMask > constants6.BITS) {
	                throw new address_error_1.AddressError('Invalid subnet mask.');
	            }
	            address = address.replace(constants6.RE_SUBNET_STRING, '');
	        }
	        else if (/\//.test(address)) {
	            throw new address_error_1.AddressError('Invalid subnet mask.');
	        }
	        var zone = constants6.RE_ZONE_STRING.exec(address);
	        if (zone) {
	            this.zone = zone[0];
	            address = address.replace(constants6.RE_ZONE_STRING, '');
	        }
	        this.addressMinusSuffix = address;
	        this.parsedAddress = this.parse(this.addressMinusSuffix);
	    }
	    Address6.isValid = function (address) {
	        try {
	            // eslint-disable-next-line no-new
	            new Address6(address);
	            return true;
	        }
	        catch (e) {
	            return false;
	        }
	    };
	    /**
	     * Convert a BigInteger to a v6 address object
	     * @memberof Address6
	     * @static
	     * @param {BigInteger} bigInteger - a BigInteger to convert
	     * @returns {Address6}
	     * @example
	     * var bigInteger = new BigInteger('1000000000000');
	     * var address = Address6.fromBigInteger(bigInteger);
	     * address.correctForm(); // '::e8:d4a5:1000'
	     */
	    Address6.fromBigInteger = function (bigInteger) {
	        var hex = bigInteger.toString(16).padStart(32, '0');
	        var groups = [];
	        var i;
	        for (i = 0; i < constants6.GROUPS; i++) {
	            groups.push(hex.slice(i * 4, (i + 1) * 4));
	        }
	        return new Address6(groups.join(':'));
	    };
	    /**
	     * Convert a URL (with optional port number) to an address object
	     * @memberof Address6
	     * @static
	     * @param {string} url - a URL with optional port number
	     * @example
	     * var addressAndPort = Address6.fromURL('http://[ffff::]:8080/foo/');
	     * addressAndPort.address.correctForm(); // 'ffff::'
	     * addressAndPort.port; // 8080
	     */
	    Address6.fromURL = function (url) {
	        var host;
	        var port = null;
	        var result;
	        // If we have brackets parse them and find a port
	        if (url.indexOf('[') !== -1 && url.indexOf(']:') !== -1) {
	            result = constants6.RE_URL_WITH_PORT.exec(url);
	            if (result === null) {
	                return {
	                    error: 'failed to parse address with port',
	                    address: null,
	                    port: null,
	                };
	            }
	            host = result[1];
	            port = result[2];
	            // If there's a URL extract the address
	        }
	        else if (url.indexOf('/') !== -1) {
	            // Remove the protocol prefix
	            url = url.replace(/^[a-z0-9]+:\/\//, '');
	            // Parse the address
	            result = constants6.RE_URL.exec(url);
	            if (result === null) {
	                return {
	                    error: 'failed to parse address from URL',
	                    address: null,
	                    port: null,
	                };
	            }
	            host = result[1];
	            // Otherwise just assign the URL to the host and let the library parse it
	        }
	        else {
	            host = url;
	        }
	        // If there's a port convert it to an integer
	        if (port) {
	            port = parseInt(port, 10);
	            // squelch out of range ports
	            if (port < 0 || port > 65536) {
	                port = null;
	            }
	        }
	        else {
	            // Standardize `undefined` to `null`
	            port = null;
	        }
	        return {
	            address: new Address6(host),
	            port: port,
	        };
	    };
	    /**
	     * Create an IPv6-mapped address given an IPv4 address
	     * @memberof Address6
	     * @static
	     * @param {string} address - An IPv4 address string
	     * @returns {Address6}
	     * @example
	     * var address = Address6.fromAddress4('192.168.0.1');
	     * address.correctForm(); // '::ffff:c0a8:1'
	     * address.to4in6(); // '::ffff:192.168.0.1'
	     */
	    Address6.fromAddress4 = function (address) {
	        var address4 = new ipv4_1.Address4(address);
	        var mask6 = constants6.BITS - (constants4.BITS - address4.subnetMask);
	        return new Address6("::ffff:" + address4.correctForm() + "/" + mask6);
	    };
	    /**
	     * Return an address from ip6.arpa form
	     * @memberof Address6
	     * @static
	     * @param {string} arpaFormAddress - an 'ip6.arpa' form address
	     * @returns {Adress6}
	     * @example
	     * var address = Address6.fromArpa(e.f.f.f.3.c.2.6.f.f.f.e.6.6.8.e.1.0.6.7.9.4.e.c.0.0.0.0.1.0.0.2.ip6.arpa.)
	     * address.correctForm(); // '2001:0:ce49:7601:e866:efff:62c3:fffe'
	     */
	    Address6.fromArpa = function (arpaFormAddress) {
	        // remove ending ".ip6.arpa." or just "."
	        var address = arpaFormAddress.replace(/(\.ip6\.arpa)?\.$/, '');
	        var semicolonAmount = 7;
	        // correct ip6.arpa form with ending removed will be 63 characters
	        if (address.length !== 63) {
	            throw new address_error_1.AddressError("Invalid 'ip6.arpa' form.");
	        }
	        var parts = address.split('.').reverse();
	        for (var i = semicolonAmount; i > 0; i--) {
	            var insertIndex = i * 4;
	            parts.splice(insertIndex, 0, ':');
	        }
	        address = parts.join('');
	        return new Address6(address);
	    };
	    /**
	     * Return the Microsoft UNC transcription of the address
	     * @memberof Address6
	     * @instance
	     * @returns {String} the Microsoft UNC transcription of the address
	     */
	    Address6.prototype.microsoftTranscription = function () {
	        return sprintf_js_1.sprintf('%s.ipv6-literal.net', this.correctForm().replace(/:/g, '-'));
	    };
	    /**
	     * Return the first n bits of the address, defaulting to the subnet mask
	     * @memberof Address6
	     * @instance
	     * @param {number} [mask=subnet] - the number of bits to mask
	     * @returns {String} the first n bits of the address as a string
	     */
	    Address6.prototype.mask = function (mask) {
	        if (mask === void 0) { mask = this.subnetMask; }
	        return this.getBitsBase2(0, mask);
	    };
	    /**
	     * Return the number of possible subnets of a given size in the address
	     * @memberof Address6
	     * @instance
	     * @param {number} [size=128] - the subnet size
	     * @returns {String}
	     */
	    // TODO: probably useful to have a numeric version of this too
	    Address6.prototype.possibleSubnets = function (subnetSize) {
	        if (subnetSize === void 0) { subnetSize = 128; }
	        var availableBits = constants6.BITS - this.subnetMask;
	        var subnetBits = Math.abs(subnetSize - constants6.BITS);
	        var subnetPowers = availableBits - subnetBits;
	        if (subnetPowers < 0) {
	            return '0';
	        }
	        return addCommas(new jsbn_1.BigInteger('2', 10).pow(subnetPowers).toString(10));
	    };
	    /**
	     * Helper function getting start address.
	     * @memberof Address6
	     * @instance
	     * @returns {BigInteger}
	     */
	    Address6.prototype._startAddress = function () {
	        return new jsbn_1.BigInteger(this.mask() + '0'.repeat(constants6.BITS - this.subnetMask), 2);
	    };
	    /**
	     * The first address in the range given by this address' subnet
	     * Often referred to as the Network Address.
	     * @memberof Address6
	     * @instance
	     * @returns {Address6}
	     */
	    Address6.prototype.startAddress = function () {
	        return Address6.fromBigInteger(this._startAddress());
	    };
	    /**
	     * The first host address in the range given by this address's subnet ie
	     * the first address after the Network Address
	     * @memberof Address6
	     * @instance
	     * @returns {Address6}
	     */
	    Address6.prototype.startAddressExclusive = function () {
	        var adjust = new jsbn_1.BigInteger('1');
	        return Address6.fromBigInteger(this._startAddress().add(adjust));
	    };
	    /**
	     * Helper function getting end address.
	     * @memberof Address6
	     * @instance
	     * @returns {BigInteger}
	     */
	    Address6.prototype._endAddress = function () {
	        return new jsbn_1.BigInteger(this.mask() + '1'.repeat(constants6.BITS - this.subnetMask), 2);
	    };
	    /**
	     * The last address in the range given by this address' subnet
	     * Often referred to as the Broadcast
	     * @memberof Address6
	     * @instance
	     * @returns {Address6}
	     */
	    Address6.prototype.endAddress = function () {
	        return Address6.fromBigInteger(this._endAddress());
	    };
	    /**
	     * The last host address in the range given by this address's subnet ie
	     * the last address prior to the Broadcast Address
	     * @memberof Address6
	     * @instance
	     * @returns {Address6}
	     */
	    Address6.prototype.endAddressExclusive = function () {
	        var adjust = new jsbn_1.BigInteger('1');
	        return Address6.fromBigInteger(this._endAddress().subtract(adjust));
	    };
	    /**
	     * Return the scope of the address
	     * @memberof Address6
	     * @instance
	     * @returns {String}
	     */
	    Address6.prototype.getScope = function () {
	        var scope = constants6.SCOPES[this.getBits(12, 16).intValue()];
	        if (this.getType() === 'Global unicast' && scope !== 'Link local') {
	            scope = 'Global';
	        }
	        return scope || 'Unknown';
	    };
	    /**
	     * Return the type of the address
	     * @memberof Address6
	     * @instance
	     * @returns {String}
	     */
	    Address6.prototype.getType = function () {
	        for (var _i = 0, _a = Object.keys(constants6.TYPES); _i < _a.length; _i++) {
	            var subnet = _a[_i];
	            if (this.isInSubnet(new Address6(subnet))) {
	                return constants6.TYPES[subnet];
	            }
	        }
	        return 'Global unicast';
	    };
	    /**
	     * Return the bits in the given range as a BigInteger
	     * @memberof Address6
	     * @instance
	     * @returns {BigInteger}
	     */
	    Address6.prototype.getBits = function (start, end) {
	        return new jsbn_1.BigInteger(this.getBitsBase2(start, end), 2);
	    };
	    /**
	     * Return the bits in the given range as a base-2 string
	     * @memberof Address6
	     * @instance
	     * @returns {String}
	     */
	    Address6.prototype.getBitsBase2 = function (start, end) {
	        return this.binaryZeroPad().slice(start, end);
	    };
	    /**
	     * Return the bits in the given range as a base-16 string
	     * @memberof Address6
	     * @instance
	     * @returns {String}
	     */
	    Address6.prototype.getBitsBase16 = function (start, end) {
	        var length = end - start;
	        if (length % 4 !== 0) {
	            throw new Error('Length of bits to retrieve must be divisible by four');
	        }
	        return this.getBits(start, end)
	            .toString(16)
	            .padStart(length / 4, '0');
	    };
	    /**
	     * Return the bits that are set past the subnet mask length
	     * @memberof Address6
	     * @instance
	     * @returns {String}
	     */
	    Address6.prototype.getBitsPastSubnet = function () {
	        return this.getBitsBase2(this.subnetMask, constants6.BITS);
	    };
	    /**
	     * Return the reversed ip6.arpa form of the address
	     * @memberof Address6
	     * @param {Object} options
	     * @param {boolean} options.omitSuffix - omit the "ip6.arpa" suffix
	     * @instance
	     * @returns {String}
	     */
	    Address6.prototype.reverseForm = function (options) {
	        if (!options) {
	            options = {};
	        }
	        var characters = Math.floor(this.subnetMask / 4);
	        var reversed = this.canonicalForm()
	            .replace(/:/g, '')
	            .split('')
	            .slice(0, characters)
	            .reverse()
	            .join('.');
	        if (characters > 0) {
	            if (options.omitSuffix) {
	                return reversed;
	            }
	            return sprintf_js_1.sprintf('%s.ip6.arpa.', reversed);
	        }
	        if (options.omitSuffix) {
	            return '';
	        }
	        return 'ip6.arpa.';
	    };
	    /**
	     * Return the correct form of the address
	     * @memberof Address6
	     * @instance
	     * @returns {String}
	     */
	    Address6.prototype.correctForm = function () {
	        var i;
	        var groups = [];
	        var zeroCounter = 0;
	        var zeroes = [];
	        for (i = 0; i < this.parsedAddress.length; i++) {
	            var value = parseInt(this.parsedAddress[i], 16);
	            if (value === 0) {
	                zeroCounter++;
	            }
	            if (value !== 0 && zeroCounter > 0) {
	                if (zeroCounter > 1) {
	                    zeroes.push([i - zeroCounter, i - 1]);
	                }
	                zeroCounter = 0;
	            }
	        }
	        // Do we end with a string of zeroes?
	        if (zeroCounter > 1) {
	            zeroes.push([this.parsedAddress.length - zeroCounter, this.parsedAddress.length - 1]);
	        }
	        var zeroLengths = zeroes.map(function (n) { return n[1] - n[0] + 1; });
	        if (zeroes.length > 0) {
	            var index = zeroLengths.indexOf(Math.max.apply(Math, zeroLengths));
	            groups = compact(this.parsedAddress, zeroes[index]);
	        }
	        else {
	            groups = this.parsedAddress;
	        }
	        for (i = 0; i < groups.length; i++) {
	            if (groups[i] !== 'compact') {
	                groups[i] = parseInt(groups[i], 16).toString(16);
	            }
	        }
	        var correct = groups.join(':');
	        correct = correct.replace(/^compact$/, '::');
	        correct = correct.replace(/^compact|compact$/, ':');
	        correct = correct.replace(/compact/, '');
	        return correct;
	    };
	    /**
	     * Return a zero-padded base-2 string representation of the address
	     * @memberof Address6
	     * @instance
	     * @returns {String}
	     * @example
	     * var address = new Address6('2001:4860:4001:803::1011');
	     * address.binaryZeroPad();
	     * // '0010000000000001010010000110000001000000000000010000100000000011
	     * //  0000000000000000000000000000000000000000000000000001000000010001'
	     */
	    Address6.prototype.binaryZeroPad = function () {
	        return this.bigInteger().toString(2).padStart(constants6.BITS, '0');
	    };
	    // TODO: Improve the semantics of this helper function
	    Address6.prototype.parse4in6 = function (address) {
	        var groups = address.split(':');
	        var lastGroup = groups.slice(-1)[0];
	        var address4 = lastGroup.match(constants4.RE_ADDRESS);
	        if (address4) {
	            this.parsedAddress4 = address4[0];
	            this.address4 = new ipv4_1.Address4(this.parsedAddress4);
	            for (var i = 0; i < this.address4.groups; i++) {
	                if (/^0[0-9]+/.test(this.address4.parsedAddress[i])) {
	                    throw new address_error_1.AddressError("IPv4 addresses can't have leading zeroes.", address.replace(constants4.RE_ADDRESS, this.address4.parsedAddress.map(spanLeadingZeroes4).join('.')));
	                }
	            }
	            this.v4 = true;
	            groups[groups.length - 1] = this.address4.toGroup6();
	            address = groups.join(':');
	        }
	        return address;
	    };
	    // TODO: Make private?
	    Address6.prototype.parse = function (address) {
	        address = this.parse4in6(address);
	        var badCharacters = address.match(constants6.RE_BAD_CHARACTERS);
	        if (badCharacters) {
	            throw new address_error_1.AddressError(sprintf_js_1.sprintf('Bad character%s detected in address: %s', badCharacters.length > 1 ? 's' : '', badCharacters.join('')), address.replace(constants6.RE_BAD_CHARACTERS, '<span class="parse-error">$1</span>'));
	        }
	        var badAddress = address.match(constants6.RE_BAD_ADDRESS);
	        if (badAddress) {
	            throw new address_error_1.AddressError(sprintf_js_1.sprintf('Address failed regex: %s', badAddress.join('')), address.replace(constants6.RE_BAD_ADDRESS, '<span class="parse-error">$1</span>'));
	        }
	        var groups = [];
	        var halves = address.split('::');
	        if (halves.length === 2) {
	            var first = halves[0].split(':');
	            var last = halves[1].split(':');
	            if (first.length === 1 && first[0] === '') {
	                first = [];
	            }
	            if (last.length === 1 && last[0] === '') {
	                last = [];
	            }
	            var remaining = this.groups - (first.length + last.length);
	            if (!remaining) {
	                throw new address_error_1.AddressError('Error parsing groups');
	            }
	            this.elidedGroups = remaining;
	            this.elisionBegin = first.length;
	            this.elisionEnd = first.length + this.elidedGroups;
	            groups = groups.concat(first);
	            for (var i = 0; i < remaining; i++) {
	                groups.push('0');
	            }
	            groups = groups.concat(last);
	        }
	        else if (halves.length === 1) {
	            groups = address.split(':');
	            this.elidedGroups = 0;
	        }
	        else {
	            throw new address_error_1.AddressError('Too many :: groups found');
	        }
	        groups = groups.map(function (group) { return sprintf_js_1.sprintf('%x', parseInt(group, 16)); });
	        if (groups.length !== this.groups) {
	            throw new address_error_1.AddressError('Incorrect number of groups found');
	        }
	        return groups;
	    };
	    /**
	     * Return the canonical form of the address
	     * @memberof Address6
	     * @instance
	     * @returns {String}
	     */
	    Address6.prototype.canonicalForm = function () {
	        return this.parsedAddress.map(paddedHex).join(':');
	    };
	    /**
	     * Return the decimal form of the address
	     * @memberof Address6
	     * @instance
	     * @returns {String}
	     */
	    Address6.prototype.decimal = function () {
	        return this.parsedAddress.map(function (n) { return sprintf_js_1.sprintf('%05d', parseInt(n, 16)); }).join(':');
	    };
	    /**
	     * Return the address as a BigInteger
	     * @memberof Address6
	     * @instance
	     * @returns {BigInteger}
	     */
	    Address6.prototype.bigInteger = function () {
	        return new jsbn_1.BigInteger(this.parsedAddress.map(paddedHex).join(''), 16);
	    };
	    /**
	     * Return the last two groups of this address as an IPv4 address string
	     * @memberof Address6
	     * @instance
	     * @returns {Address4}
	     * @example
	     * var address = new Address6('2001:4860:4001::1825:bf11');
	     * address.to4().correctForm(); // '24.37.191.17'
	     */
	    Address6.prototype.to4 = function () {
	        var binary = this.binaryZeroPad().split('');
	        return ipv4_1.Address4.fromHex(new jsbn_1.BigInteger(binary.slice(96, 128).join(''), 2).toString(16));
	    };
	    /**
	     * Return the v4-in-v6 form of the address
	     * @memberof Address6
	     * @instance
	     * @returns {String}
	     */
	    Address6.prototype.to4in6 = function () {
	        var address4 = this.to4();
	        var address6 = new Address6(this.parsedAddress.slice(0, 6).join(':'), 6);
	        var correct = address6.correctForm();
	        var infix = '';
	        if (!/:$/.test(correct)) {
	            infix = ':';
	        }
	        return correct + infix + address4.address;
	    };
	    /**
	     * Return an object containing the Teredo properties of the address
	     * @memberof Address6
	     * @instance
	     * @returns {Object}
	     */
	    Address6.prototype.inspectTeredo = function () {
	        /*
	        - Bits 0 to 31 are set to the Teredo prefix (normally 2001:0000::/32).
	        - Bits 32 to 63 embed the primary IPv4 address of the Teredo server that
	          is used.
	        - Bits 64 to 79 can be used to define some flags. Currently only the
	          higher order bit is used; it is set to 1 if the Teredo client is
	          located behind a cone NAT, 0 otherwise. For Microsoft's Windows Vista
	          and Windows Server 2008 implementations, more bits are used. In those
	          implementations, the format for these 16 bits is "CRAAAAUG AAAAAAAA",
	          where "C" remains the "Cone" flag. The "R" bit is reserved for future
	          use. The "U" bit is for the Universal/Local flag (set to 0). The "G" bit
	          is Individual/Group flag (set to 0). The A bits are set to a 12-bit
	          randomly generated number chosen by the Teredo client to introduce
	          additional protection for the Teredo node against IPv6-based scanning
	          attacks.
	        - Bits 80 to 95 contains the obfuscated UDP port number. This is the
	          port number that is mapped by the NAT to the Teredo client with all
	          bits inverted.
	        - Bits 96 to 127 contains the obfuscated IPv4 address. This is the
	          public IPv4 address of the NAT with all bits inverted.
	        */
	        var prefix = this.getBitsBase16(0, 32);
	        var udpPort = this.getBits(80, 96).xor(new jsbn_1.BigInteger('ffff', 16)).toString();
	        var server4 = ipv4_1.Address4.fromHex(this.getBitsBase16(32, 64));
	        var client4 = ipv4_1.Address4.fromHex(this.getBits(96, 128).xor(new jsbn_1.BigInteger('ffffffff', 16)).toString(16));
	        var flags = this.getBits(64, 80);
	        var flagsBase2 = this.getBitsBase2(64, 80);
	        var coneNat = flags.testBit(15);
	        var reserved = flags.testBit(14);
	        var groupIndividual = flags.testBit(8);
	        var universalLocal = flags.testBit(9);
	        var nonce = new jsbn_1.BigInteger(flagsBase2.slice(2, 6) + flagsBase2.slice(8, 16), 2).toString(10);
	        return {
	            prefix: sprintf_js_1.sprintf('%s:%s', prefix.slice(0, 4), prefix.slice(4, 8)),
	            server4: server4.address,
	            client4: client4.address,
	            flags: flagsBase2,
	            coneNat: coneNat,
	            microsoft: {
	                reserved: reserved,
	                universalLocal: universalLocal,
	                groupIndividual: groupIndividual,
	                nonce: nonce,
	            },
	            udpPort: udpPort,
	        };
	    };
	    /**
	     * Return an object containing the 6to4 properties of the address
	     * @memberof Address6
	     * @instance
	     * @returns {Object}
	     */
	    Address6.prototype.inspect6to4 = function () {
	        /*
	        - Bits 0 to 15 are set to the 6to4 prefix (2002::/16).
	        - Bits 16 to 48 embed the IPv4 address of the 6to4 gateway that is used.
	        */
	        var prefix = this.getBitsBase16(0, 16);
	        var gateway = ipv4_1.Address4.fromHex(this.getBitsBase16(16, 48));
	        return {
	            prefix: sprintf_js_1.sprintf('%s', prefix.slice(0, 4)),
	            gateway: gateway.address,
	        };
	    };
	    /**
	     * Return a v6 6to4 address from a v6 v4inv6 address
	     * @memberof Address6
	     * @instance
	     * @returns {Address6}
	     */
	    Address6.prototype.to6to4 = function () {
	        if (!this.is4()) {
	            return null;
	        }
	        var addr6to4 = [
	            '2002',
	            this.getBitsBase16(96, 112),
	            this.getBitsBase16(112, 128),
	            '',
	            '/16',
	        ].join(':');
	        return new Address6(addr6to4);
	    };
	    /**
	     * Return a byte array
	     * @memberof Address6
	     * @instance
	     * @returns {Array}
	     */
	    Address6.prototype.toByteArray = function () {
	        var byteArray = this.bigInteger().toByteArray();
	        // work around issue where `toByteArray` returns a leading 0 element
	        if (byteArray.length === 17 && byteArray[0] === 0) {
	            return byteArray.slice(1);
	        }
	        return byteArray;
	    };
	    /**
	     * Return an unsigned byte array
	     * @memberof Address6
	     * @instance
	     * @returns {Array}
	     */
	    Address6.prototype.toUnsignedByteArray = function () {
	        return this.toByteArray().map(unsignByte);
	    };
	    /**
	     * Convert a byte array to an Address6 object
	     * @memberof Address6
	     * @static
	     * @returns {Address6}
	     */
	    Address6.fromByteArray = function (bytes) {
	        return this.fromUnsignedByteArray(bytes.map(unsignByte));
	    };
	    /**
	     * Convert an unsigned byte array to an Address6 object
	     * @memberof Address6
	     * @static
	     * @returns {Address6}
	     */
	    Address6.fromUnsignedByteArray = function (bytes) {
	        var BYTE_MAX = new jsbn_1.BigInteger('256', 10);
	        var result = new jsbn_1.BigInteger('0', 10);
	        var multiplier = new jsbn_1.BigInteger('1', 10);
	        for (var i = bytes.length - 1; i >= 0; i--) {
	            result = result.add(multiplier.multiply(new jsbn_1.BigInteger(bytes[i].toString(10), 10)));
	            multiplier = multiplier.multiply(BYTE_MAX);
	        }
	        return Address6.fromBigInteger(result);
	    };
	    /**
	     * Returns true if the address is in the canonical form, false otherwise
	     * @memberof Address6
	     * @instance
	     * @returns {boolean}
	     */
	    Address6.prototype.isCanonical = function () {
	        return this.addressMinusSuffix === this.canonicalForm();
	    };
	    /**
	     * Returns true if the address is a link local address, false otherwise
	     * @memberof Address6
	     * @instance
	     * @returns {boolean}
	     */
	    Address6.prototype.isLinkLocal = function () {
	        // Zeroes are required, i.e. we can't check isInSubnet with 'fe80::/10'
	        if (this.getBitsBase2(0, 64) ===
	            '1111111010000000000000000000000000000000000000000000000000000000') {
	            return true;
	        }
	        return false;
	    };
	    /**
	     * Returns true if the address is a multicast address, false otherwise
	     * @memberof Address6
	     * @instance
	     * @returns {boolean}
	     */
	    Address6.prototype.isMulticast = function () {
	        return this.getType() === 'Multicast';
	    };
	    /**
	     * Returns true if the address is a v4-in-v6 address, false otherwise
	     * @memberof Address6
	     * @instance
	     * @returns {boolean}
	     */
	    Address6.prototype.is4 = function () {
	        return this.v4;
	    };
	    /**
	     * Returns true if the address is a Teredo address, false otherwise
	     * @memberof Address6
	     * @instance
	     * @returns {boolean}
	     */
	    Address6.prototype.isTeredo = function () {
	        return this.isInSubnet(new Address6('2001::/32'));
	    };
	    /**
	     * Returns true if the address is a 6to4 address, false otherwise
	     * @memberof Address6
	     * @instance
	     * @returns {boolean}
	     */
	    Address6.prototype.is6to4 = function () {
	        return this.isInSubnet(new Address6('2002::/16'));
	    };
	    /**
	     * Returns true if the address is a loopback address, false otherwise
	     * @memberof Address6
	     * @instance
	     * @returns {boolean}
	     */
	    Address6.prototype.isLoopback = function () {
	        return this.getType() === 'Loopback';
	    };
	    // #endregion
	    // #region HTML
	    /**
	     * @returns {String} the address in link form with a default port of 80
	     */
	    Address6.prototype.href = function (optionalPort) {
	        if (optionalPort === undefined) {
	            optionalPort = '';
	        }
	        else {
	            optionalPort = sprintf_js_1.sprintf(':%s', optionalPort);
	        }
	        return sprintf_js_1.sprintf('http://[%s]%s/', this.correctForm(), optionalPort);
	    };
	    /**
	     * @returns {String} a link suitable for conveying the address via a URL hash
	     */
	    Address6.prototype.link = function (options) {
	        if (!options) {
	            options = {};
	        }
	        if (options.className === undefined) {
	            options.className = '';
	        }
	        if (options.prefix === undefined) {
	            options.prefix = '/#address=';
	        }
	        if (options.v4 === undefined) {
	            options.v4 = false;
	        }
	        var formFunction = this.correctForm;
	        if (options.v4) {
	            formFunction = this.to4in6;
	        }
	        if (options.className) {
	            return sprintf_js_1.sprintf('<a href="%1$s%2$s" class="%3$s">%2$s</a>', options.prefix, formFunction.call(this), options.className);
	        }
	        return sprintf_js_1.sprintf('<a href="%1$s%2$s">%2$s</a>', options.prefix, formFunction.call(this));
	    };
	    /**
	     * Groups an address
	     * @returns {String}
	     */
	    Address6.prototype.group = function () {
	        if (this.elidedGroups === 0) {
	            // The simple case
	            return helpers.simpleGroup(this.address).join(':');
	        }
	        assert(typeof this.elidedGroups === 'number');
	        assert(typeof this.elisionBegin === 'number');
	        // The elided case
	        var output = [];
	        var _a = this.address.split('::'), left = _a[0], right = _a[1];
	        if (left.length) {
	            output.push.apply(output, helpers.simpleGroup(left));
	        }
	        else {
	            output.push('');
	        }
	        var classes = ['hover-group'];
	        for (var i = this.elisionBegin; i < this.elisionBegin + this.elidedGroups; i++) {
	            classes.push(sprintf_js_1.sprintf('group-%d', i));
	        }
	        output.push(sprintf_js_1.sprintf('<span class="%s"></span>', classes.join(' ')));
	        if (right.length) {
	            output.push.apply(output, helpers.simpleGroup(right, this.elisionEnd));
	        }
	        else {
	            output.push('');
	        }
	        if (this.is4()) {
	            assert(this.address4 instanceof ipv4_1.Address4);
	            output.pop();
	            output.push(this.address4.groupForV6());
	        }
	        return output.join(':');
	    };
	    // #endregion
	    // #region Regular expressions
	    /**
	     * Generate a regular expression string that can be used to find or validate
	     * all variations of this address
	     * @memberof Address6
	     * @instance
	     * @param {boolean} substringSearch
	     * @returns {string}
	     */
	    Address6.prototype.regularExpressionString = function (substringSearch) {
	        if (substringSearch === void 0) { substringSearch = false; }
	        var output = [];
	        // TODO: revisit why this is necessary
	        var address6 = new Address6(this.correctForm());
	        if (address6.elidedGroups === 0) {
	            // The simple case
	            output.push(regular_expressions_1.simpleRegularExpression(address6.parsedAddress));
	        }
	        else if (address6.elidedGroups === constants6.GROUPS) {
	            // A completely elided address
	            output.push(regular_expressions_1.possibleElisions(constants6.GROUPS));
	        }
	        else {
	            // A partially elided address
	            var halves = address6.address.split('::');
	            if (halves[0].length) {
	                output.push(regular_expressions_1.simpleRegularExpression(halves[0].split(':')));
	            }
	            assert(typeof address6.elidedGroups === 'number');
	            output.push(regular_expressions_1.possibleElisions(address6.elidedGroups, halves[0].length !== 0, halves[1].length !== 0));
	            if (halves[1].length) {
	                output.push(regular_expressions_1.simpleRegularExpression(halves[1].split(':')));
	            }
	            output = [output.join(':')];
	        }
	        if (!substringSearch) {
	            output = __spreadArray(__spreadArray([
	                '(?=^|',
	                regular_expressions_1.ADDRESS_BOUNDARY,
	                '|[^\\w\\:])('
	            ], output), [
	                ')(?=[^\\w\\:]|',
	                regular_expressions_1.ADDRESS_BOUNDARY,
	                '|$)',
	            ]);
	        }
	        return output.join('');
	    };
	    /**
	     * Generate a regular expression that can be used to find or validate all
	     * variations of this address.
	     * @memberof Address6
	     * @instance
	     * @param {boolean} substringSearch
	     * @returns {RegExp}
	     */
	    Address6.prototype.regularExpression = function (substringSearch) {
	        if (substringSearch === void 0) { substringSearch = false; }
	        return new RegExp(this.regularExpressionString(substringSearch), 'i');
	    };
	    return Address6;
	}());
	ipv6.Address6 = Address6$1;

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.v6 = exports.AddressError = exports.Address6 = exports.Address4 = void 0;
	var ipv4_1 = ipv4;
	Object.defineProperty(exports, "Address4", { enumerable: true, get: function () { return ipv4_1.Address4; } });
	var ipv6_1 = ipv6;
	Object.defineProperty(exports, "Address6", { enumerable: true, get: function () { return ipv6_1.Address6; } });
	var address_error_1 = addressError;
	Object.defineProperty(exports, "AddressError", { enumerable: true, get: function () { return address_error_1.AddressError; } });
	var helpers = __importStar(helpers$1);
	exports.v6 = { helpers: helpers };

	}(ipAddress));

	const debug$K = browser$a.exports;
	const log$L = Object.assign(debug$K('libp2p:ip-port-to-multiaddr'), {
	  error: debug$K('libp2p:ip-port-to-multiaddr:err')
	});
	const { Multiaddr: Multiaddr$h } = src$s;
	const errCode$n = errCode$q;
	const { Address4, Address6 } = ipAddress;

	const errors$2 = {
	  ERR_INVALID_IP_PARAMETER: 'ERR_INVALID_IP_PARAMETER',
	  ERR_INVALID_PORT_PARAMETER: 'ERR_INVALID_PORT_PARAMETER',
	  ERR_INVALID_IP: 'ERR_INVALID_IP'
	};

	/**
	 * Transform an IP, Port pair into a multiaddr
	 *
	 * @param {string} ip
	 * @param {number|string} port
	 */
	function ipPortToMultiaddr (ip, port) {
	  if (typeof ip !== 'string') {
	    throw errCode$n(new Error(`invalid ip provided: ${ip}`), errors$2.ERR_INVALID_IP_PARAMETER)
	  }

	  if (typeof port === 'string') {
	    port = parseInt(port);
	  }

	  if (isNaN(port)) {
	    throw errCode$n(new Error(`invalid port provided: ${port}`), errors$2.ERR_INVALID_PORT_PARAMETER)
	  }

	  try {
	    // Test valid IPv4
	    new Address4(ip); // eslint-disable-line no-new
	    return new Multiaddr$h(`/ip4/${ip}/tcp/${port}`)
	  } catch {}

	  try {
	    // Test valid IPv6
	    const ip6 = new Address6(ip);
	    return ip6.is4()
	      ? new Multiaddr$h(`/ip4/${ip6.to4().correctForm()}/tcp/${port}`)
	      : new Multiaddr$h(`/ip6/${ip}/tcp/${port}`)
	  } catch (err) {
	    const errMsg = `invalid ip:port for creating a multiaddr: ${ip}:${port}`;
	    log$L.error(errMsg);
	    throw errCode$n(new Error(errMsg), errors$2.ERR_INVALID_IP)
	  }
	}

	ipPortToMultiaddr$1.exports = ipPortToMultiaddr;

	ipPortToMultiaddr$1.exports.Errors = errors$2;

	var pTimeout$2 = {exports: {}};

	class TimeoutError extends Error {
		constructor(message) {
			super(message);
			this.name = 'TimeoutError';
		}
	}

	const pTimeout$1 = (promise, milliseconds, fallback, options) => {
		let timer;
		const cancelablePromise = new Promise((resolve, reject) => {
			if (typeof milliseconds !== 'number' || milliseconds < 0) {
				throw new TypeError('Expected `milliseconds` to be a positive number');
			}

			if (milliseconds === Infinity) {
				resolve(promise);
				return;
			}

			options = {
				customTimers: {setTimeout, clearTimeout},
				...options
			};

			timer = options.customTimers.setTimeout.call(undefined, () => {
				if (typeof fallback === 'function') {
					try {
						resolve(fallback());
					} catch (error) {
						reject(error);
					}

					return;
				}

				const message = typeof fallback === 'string' ? fallback : `Promise timed out after ${milliseconds} milliseconds`;
				const timeoutError = fallback instanceof Error ? fallback : new TimeoutError(message);

				if (typeof promise.cancel === 'function') {
					promise.cancel();
				}

				reject(timeoutError);
			}, milliseconds);

			(async () => {
				try {
					resolve(await promise);
				} catch (error) {
					reject(error);
				} finally {
					options.customTimers.clearTimeout.call(undefined, timer);
				}
			})();
		});

		cancelablePromise.clear = () => {
			clearTimeout(timer);
			timer = undefined;
		};

		return cancelablePromise;
	};

	pTimeout$2.exports = pTimeout$1;
	// TODO: Remove this for the next major release
	pTimeout$2.exports.default = pTimeout$1;

	pTimeout$2.exports.TimeoutError = TimeoutError;

	const abortable$4 = abortableIterator.exports;
	const { CLOSE_TIMEOUT: CLOSE_TIMEOUT$1 } = constants$b;
	const toMultiaddr$1 = ipPortToMultiaddr$1.exports;

	const pTimeout = pTimeout$2.exports;

	const debug$J = browser$a.exports;
	const log$K = debug$J('libp2p:websockets:socket');
	log$K.error = debug$J('libp2p:websockets:socket:error');

	// Convert a stream into a MultiaddrConnection
	// https://github.com/libp2p/interface-transport#multiaddrconnection
	var socketToConn$1 = (stream, options = {}) => {
	  const maConn = {
	    async sink (source) {
	      if (options.signal) {
	        source = abortable$4(source, options.signal);
	      }

	      try {
	        await stream.sink((async function * () {
	          for await (const chunk of source) {
	            // Convert BufferList to Buffer
	            yield chunk instanceof Uint8Array ? chunk : chunk.slice();
	          }
	        })());
	      } catch (err) {
	        if (err.type !== 'aborted') {
	          log$K.error(err);
	        }
	      }
	    },

	    source: options.signal ? abortable$4(stream.source, options.signal) : stream.source,

	    conn: stream,

	    localAddr: options.localAddr || (stream.localAddress && stream.localPort
	      ? toMultiaddr$1(stream.localAddress, stream.localPort)
	      : undefined),

	    // If the remote address was passed, use it - it may have the peer ID encapsulated
	    remoteAddr: options.remoteAddr || toMultiaddr$1(stream.remoteAddress, stream.remotePort),

	    timeline: { open: Date.now() },

	    async close () {
	      const start = Date.now();

	      try {
	        await pTimeout(stream.close(), CLOSE_TIMEOUT$1);
	      } catch (err) {
	        const { host, port } = maConn.remoteAddr.toOptions();
	        log$K('timeout closing stream to %s:%s after %dms, destroying it manually',
	          host, port, Date.now() - start);

	        stream.destroy();
	      } finally {
	        maConn.timeline.close = Date.now();
	      }
	    }
	  };

	  stream.socket.once && stream.socket.once('close', () => {
	    // In instances where `close` was not explicitly called,
	    // such as an iterable stream ending, ensure we have set the close
	    // timeline
	    if (!maConn.timeline.close) {
	      maConn.timeline.close = Date.now();
	    }
	  });

	  return maConn
	};

	const mafmt$2 = src$r;
	const {
	  CODE_CIRCUIT: CODE_CIRCUIT$1,
	  CODE_P2P: CODE_P2P$1,
	  CODE_TCP,
	  CODE_WS,
	  CODE_WSS
	} = constants$b;

	var filters$1 = {
	  all: (multiaddrs) => multiaddrs.filter((ma) => {
	    if (ma.protoCodes().includes(CODE_CIRCUIT$1)) {
	      return false
	    }

	    const testMa = ma.decapsulateCode(CODE_P2P$1);

	    return mafmt$2.WebSockets.matches(testMa) ||
	      mafmt$2.WebSocketsSecure.matches(testMa)
	  }),
	  dnsWss: (multiaddrs) => multiaddrs.filter((ma) => {
	    if (ma.protoCodes().includes(CODE_CIRCUIT$1)) {
	      return false
	    }

	    const testMa = ma.decapsulateCode(CODE_P2P$1);

	    return mafmt$2.WebSocketsSecure.matches(testMa) &&
	      mafmt$2.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WSS))
	  }),
	  dnsWsOrWss: (multiaddrs) => multiaddrs.filter((ma) => {
	    if (ma.protoCodes().includes(CODE_CIRCUIT$1)) {
	      return false
	    }

	    const testMa = ma.decapsulateCode(CODE_P2P$1);

	    // WS
	    if (mafmt$2.WebSockets.matches(testMa)) {
	      return mafmt$2.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WS))
	    }

	    // WSS
	    return mafmt$2.WebSocketsSecure.matches(testMa) &&
	      mafmt$2.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WSS))
	  })
	};

	const connect = client.exports;
	const withIs$1 = classIs.exports;
	const toUri = multiaddrToUri;
	const { AbortError: AbortError$3 } = abortableIterator.exports;
	const pDefer$1 = pDefer_1;

	const debug$I = browser$a.exports;
	const log$J = debug$I('libp2p:websockets');
	log$J.error = debug$I('libp2p:websockets:error');
	const env = env$1;

	const createListener$2 = listener_browser;
	const toConnection$3 = socketToConn$1;
	const filters = filters$1;

	/**
	 * @typedef {import('multiaddr').Multiaddr} Multiaddr
	 */

	/**
	 * @class WebSockets
	 */
	class WebSockets {
	  /**
	   * @class
	   * @param {object} options
	   * @param {Upgrader} options.upgrader
	   * @param {(multiaddrs: Array<Multiaddr>) => Array<Multiaddr>} options.filter - override transport addresses filter
	   */
	  constructor ({ upgrader, filter }) {
	    if (!upgrader) {
	      throw new Error('An upgrader must be provided. See https://github.com/libp2p/interface-transport#upgrader.')
	    }
	    this._upgrader = upgrader;
	    this._filter = filter;
	  }

	  /**
	   * @async
	   * @param {Multiaddr} ma
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal] - Used to abort dial requests
	   * @returns {Connection} An upgraded Connection
	   */
	  async dial (ma, options = {}) {
	    log$J('dialing %s', ma);

	    const socket = await this._connect(ma, options);
	    const maConn = toConnection$3(socket, { remoteAddr: ma, signal: options.signal });
	    log$J('new outbound connection %s', maConn.remoteAddr);

	    const conn = await this._upgrader.upgradeOutbound(maConn);
	    log$J('outbound connection %s upgraded', maConn.remoteAddr);
	    return conn
	  }

	  /**
	   * @private
	   * @param {Multiaddr} ma
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal] - Used to abort dial requests
	   * @returns {Promise<WebSocket>} Resolves a extended duplex iterable on top of a WebSocket
	   */
	  async _connect (ma, options = {}) {
	    if (options.signal && options.signal.aborted) {
	      throw new AbortError$3()
	    }
	    const cOpts = ma.toOptions();
	    log$J('dialing %s:%s', cOpts.host, cOpts.port);

	    const errorPromise = pDefer$1();
	    const errfn = (err) => {
	      const msg = `connection error: ${err.message}`;
	      log$J.error(msg);

	      errorPromise.reject(err);
	    };

	    const rawSocket = connect(toUri(ma), Object.assign({ binary: true }, options));

	    if (rawSocket.socket.on) {
	      rawSocket.socket.on('error', errfn);
	    } else {
	      rawSocket.socket.onerror = errfn;
	    }

	    if (!options.signal) {
	      await Promise.race([rawSocket.connected(), errorPromise.promise]);

	      log$J('connected %s', ma);
	      return rawSocket
	    }

	    // Allow abort via signal during connect
	    let onAbort;
	    const abort = new Promise((resolve, reject) => {
	      onAbort = () => {
	        reject(new AbortError$3());
	        // FIXME: https://github.com/libp2p/js-libp2p-websockets/issues/121
	        setTimeout(() => {
	          rawSocket.close();
	        });
	      };

	      // Already aborted?
	      if (options.signal.aborted) return onAbort()
	      options.signal.addEventListener('abort', onAbort);
	    });

	    try {
	      await Promise.race([abort, errorPromise.promise, rawSocket.connected()]);
	    } finally {
	      options.signal.removeEventListener('abort', onAbort);
	    }

	    log$J('connected %s', ma);
	    return rawSocket
	  }

	  /**
	   * Creates a Websockets listener. The provided `handler` function will be called
	   * anytime a new incoming Connection has been successfully upgraded via
	   * `upgrader.upgradeInbound`.
	   *
	   * @param {object} [options]
	   * @param {http.Server} [options.server] - A pre-created Node.js HTTP/S server.
	   * @param {function (Connection)} handler
	   * @returns {Listener} A Websockets listener
	   */
	  createListener (options = {}, handler) {
	    if (typeof options === 'function') {
	      handler = options;
	      options = {};
	    }

	    return createListener$2({ handler, upgrader: this._upgrader })
	  }

	  /**
	   * Takes a list of `Multiaddr`s and returns only valid Websockets addresses.
	   * By default, in a browser environment only DNS+WSS multiaddr is accepted,
	   * while in a Node.js environment DNS+{WS, WSS} multiaddrs are accepted.
	   *
	   * @param {Multiaddr[]} multiaddrs
	   * @returns {Multiaddr[]} Valid Websockets multiaddrs
	   */
	  filter (multiaddrs) {
	    multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs];

	    if (this._filter) {
	      return this._filter(multiaddrs)
	    }

	    // Browser
	    if (env.isBrowser || env.isWebWorker) {
	      return filters.dnsWss(multiaddrs)
	    }

	    return filters.all(multiaddrs)
	  }
	}

	var src$e = withIs$1(WebSockets, {
	  className: 'WebSockets',
	  symbolName: '@libp2p/js-libp2p-websockets/websockets'
	});

	// originally pulled out of simple-peer

	var getBrowserRtc = function getBrowserRTC () {
	  if (typeof globalThis === 'undefined') return null
	  var wrtc = {
	    RTCPeerConnection: globalThis.RTCPeerConnection || globalThis.mozRTCPeerConnection ||
	      globalThis.webkitRTCPeerConnection,
	    RTCSessionDescription: globalThis.RTCSessionDescription ||
	      globalThis.mozRTCSessionDescription || globalThis.webkitRTCSessionDescription,
	    RTCIceCandidate: globalThis.RTCIceCandidate || globalThis.mozRTCIceCandidate ||
	      globalThis.webkitRTCIceCandidate
	  };
	  if (!wrtc.RTCPeerConnection) return null
	  return wrtc
	};

	var browser$4 = {exports: {}};

	// limit of Crypto.getRandomValues()
	// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
	var MAX_BYTES = 65536;

	// Node supports requesting up to this number of bytes
	// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
	var MAX_UINT32 = 4294967295;

	function oldBrowser () {
	  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
	}

	var Buffer = safeBuffer.exports.Buffer;
	var crypto$7 = commonjsGlobal.crypto || commonjsGlobal.msCrypto;

	if (crypto$7 && crypto$7.getRandomValues) {
	  browser$4.exports = randomBytes$1;
	} else {
	  browser$4.exports = oldBrowser;
	}

	function randomBytes$1 (size, cb) {
	  // phantomjs needs to throw
	  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

	  var bytes = Buffer.allocUnsafe(size);

	  if (size > 0) {  // getRandomValues fails on IE if size == 0
	    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
	      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
	      for (var generated = 0; generated < size; generated += MAX_BYTES) {
	        // buffer.slice automatically checks if the end is past the end of
	        // the buffer so we don't have to here
	        crypto$7.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
	      }
	    } else {
	      crypto$7.getRandomValues(bytes);
	    }
	  }

	  if (typeof cb === 'function') {
	    return process$3.nextTick(function () {
	      cb(null, bytes);
	    })
	  }

	  return bytes
	}

	function assign(obj, props) {
	    for (const key in props) {
	        Object.defineProperty(obj, key, {
	            value: props[key],
	            enumerable: true,
	            configurable: true,
	        });
	    }

	    return obj;
	}

	function createError(err, code, props) {
	    if (!err || typeof err === 'string') {
	        throw new TypeError('Please pass an Error to err-code');
	    }

	    if (!props) {
	        props = {};
	    }

	    if (typeof code === 'object') {
	        props = code;
	        code = undefined;
	    }

	    if (code != null) {
	        props.code = code;
	    }

	    try {
	        return assign(err, props);
	    } catch (_) {
	        props.message = err.message;
	        props.stack = err.stack;

	        const ErrClass = function () {};

	        ErrClass.prototype = Object.create(Object.getPrototypeOf(err));

	        return assign(new ErrClass(), props);
	    }
	}

	var errCode$m = createError;

	/*! simple-peer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

	var debug$H = browser$a.exports('simple-peer');
	var getBrowserRTC = getBrowserRtc;
	var randombytes = browser$4.exports;
	var stream$2 = readableBrowser.exports;
	var queueMicrotask$1 = queueMicrotask_1; // TODO: remove when Node 10 is not supported
	var errCode$l = errCode$m;

	var MAX_BUFFERED_AMOUNT = 64 * 1024;
	var ICECOMPLETE_TIMEOUT = 5 * 1000;
	var CHANNEL_CLOSING_TIMEOUT = 5 * 1000;

	// HACK: Filter trickle lines when trickle is disabled #354
	function filterTrickle (sdp) {
	  return sdp.replace(/a=ice-options:trickle\s\n/g, '')
	}

	/**
	 * WebRTC peer connection. Same API as node core `net.Socket`, plus a few extra methods.
	 * Duplex stream.
	 * @param {Object} opts
	 */
	class Peer extends stream$2.Duplex {
	  constructor (opts) {
	    opts = Object.assign({
	      allowHalfOpen: false
	    }, opts);

	    super(opts);

	    this._id = randombytes(4).toString('hex').slice(0, 7);
	    this._debug('new peer %o', opts);

	    this.channelName = opts.initiator
	      ? opts.channelName || randombytes(20).toString('hex')
	      : null;

	    this.initiator = opts.initiator || false;
	    this.channelConfig = opts.channelConfig || Peer.channelConfig;
	    this.negotiated = this.channelConfig.negotiated;
	    this.config = Object.assign({}, Peer.config, opts.config);
	    this.offerOptions = opts.offerOptions || {};
	    this.answerOptions = opts.answerOptions || {};
	    this.sdpTransform = opts.sdpTransform || (sdp => sdp);
	    this.streams = opts.streams || (opts.stream ? [opts.stream] : []); // support old "stream" option
	    this.trickle = opts.trickle !== undefined ? opts.trickle : true;
	    this.allowHalfTrickle = opts.allowHalfTrickle !== undefined ? opts.allowHalfTrickle : false;
	    this.iceCompleteTimeout = opts.iceCompleteTimeout || ICECOMPLETE_TIMEOUT;

	    this._connected = false;

	    this.remoteAddress = undefined;
	    this.remoteFamily = undefined;
	    this.remotePort = undefined;
	    this.localAddress = undefined;
	    this.localFamily = undefined;
	    this.localPort = undefined;

	    this._wrtc = (opts.wrtc && typeof opts.wrtc === 'object')
	      ? opts.wrtc
	      : getBrowserRTC();

	    if (!this._wrtc) {
	      if (typeof window === 'undefined') {
	        throw errCode$l(new Error('No WebRTC support: Specify `opts.wrtc` option in this environment'), 'ERR_WEBRTC_SUPPORT')
	      } else {
	        throw errCode$l(new Error('No WebRTC support: Not a supported browser'), 'ERR_WEBRTC_SUPPORT')
	      }
	    }

	    this._pcReady = false;
	    this._channelReady = false;
	    this._iceComplete = false; // ice candidate trickle done (got null candidate)
	    this._iceCompleteTimer = null; // send an offer/answer anyway after some timeout
	    this._channel = null;
	    this._pendingCandidates = [];

	    this._isNegotiating = this.negotiated ? false : !this.initiator; // is this peer waiting for negotiation to complete?
	    this._batchedNegotiation = false; // batch synchronous negotiations
	    this._queuedNegotiation = false; // is there a queued negotiation request?
	    this._sendersAwaitingStable = [];
	    this._senderMap = new Map();
	    this._firstStable = true;
	    this._closingInterval = null;

	    this._remoteTracks = [];
	    this._remoteStreams = [];

	    this._chunk = null;
	    this._cb = null;
	    this._interval = null;

	    try {
	      this._pc = new (this._wrtc.RTCPeerConnection)(this.config);
	    } catch (err) {
	      queueMicrotask$1(() => this.destroy(errCode$l(err, 'ERR_PC_CONSTRUCTOR')));
	      return
	    }

	    // We prefer feature detection whenever possible, but sometimes that's not
	    // possible for certain implementations.
	    this._isReactNativeWebrtc = typeof this._pc._peerConnectionId === 'number';

	    this._pc.oniceconnectionstatechange = () => {
	      this._onIceStateChange();
	    };
	    this._pc.onicegatheringstatechange = () => {
	      this._onIceStateChange();
	    };
	    this._pc.onconnectionstatechange = () => {
	      this._onConnectionStateChange();
	    };
	    this._pc.onsignalingstatechange = () => {
	      this._onSignalingStateChange();
	    };
	    this._pc.onicecandidate = event => {
	      this._onIceCandidate(event);
	    };

	    // Other spec events, unused by this implementation:
	    // - onconnectionstatechange
	    // - onicecandidateerror
	    // - onfingerprintfailure
	    // - onnegotiationneeded

	    if (this.initiator || this.negotiated) {
	      this._setupData({
	        channel: this._pc.createDataChannel(this.channelName, this.channelConfig)
	      });
	    } else {
	      this._pc.ondatachannel = event => {
	        this._setupData(event);
	      };
	    }

	    if (this.streams) {
	      this.streams.forEach(stream => {
	        this.addStream(stream);
	      });
	    }
	    this._pc.ontrack = event => {
	      this._onTrack(event);
	    };

	    if (this.initiator) {
	      this._needsNegotiation();
	    }

	    this._onFinishBound = () => {
	      this._onFinish();
	    };
	    this.once('finish', this._onFinishBound);
	  }

	  get bufferSize () {
	    return (this._channel && this._channel.bufferedAmount) || 0
	  }

	  // HACK: it's possible channel.readyState is "closing" before peer.destroy() fires
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=882743
	  get connected () {
	    return (this._connected && this._channel.readyState === 'open')
	  }

	  address () {
	    return { port: this.localPort, family: this.localFamily, address: this.localAddress }
	  }

	  signal (data) {
	    if (this.destroyed) throw errCode$l(new Error('cannot signal after peer is destroyed'), 'ERR_SIGNALING')
	    if (typeof data === 'string') {
	      try {
	        data = JSON.parse(data);
	      } catch (err) {
	        data = {};
	      }
	    }
	    this._debug('signal()');

	    if (data.renegotiate && this.initiator) {
	      this._debug('got request to renegotiate');
	      this._needsNegotiation();
	    }
	    if (data.transceiverRequest && this.initiator) {
	      this._debug('got request for transceiver');
	      this.addTransceiver(data.transceiverRequest.kind, data.transceiverRequest.init);
	    }
	    if (data.candidate) {
	      if (this._pc.remoteDescription && this._pc.remoteDescription.type) {
	        this._addIceCandidate(data.candidate);
	      } else {
	        this._pendingCandidates.push(data.candidate);
	      }
	    }
	    if (data.sdp) {
	      this._pc.setRemoteDescription(new (this._wrtc.RTCSessionDescription)(data))
	        .then(() => {
	          if (this.destroyed) return

	          this._pendingCandidates.forEach(candidate => {
	            this._addIceCandidate(candidate);
	          });
	          this._pendingCandidates = [];

	          if (this._pc.remoteDescription.type === 'offer') this._createAnswer();
	        })
	        .catch(err => {
	          this.destroy(errCode$l(err, 'ERR_SET_REMOTE_DESCRIPTION'));
	        });
	    }
	    if (!data.sdp && !data.candidate && !data.renegotiate && !data.transceiverRequest) {
	      this.destroy(errCode$l(new Error('signal() called with invalid signal data'), 'ERR_SIGNALING'));
	    }
	  }

	  _addIceCandidate (candidate) {
	    var iceCandidateObj = new this._wrtc.RTCIceCandidate(candidate);
	    this._pc.addIceCandidate(iceCandidateObj)
	      .catch(err => {
	        if (!iceCandidateObj.address || iceCandidateObj.address.endsWith('.local')) ; else {
	          this.destroy(errCode$l(err, 'ERR_ADD_ICE_CANDIDATE'));
	        }
	      });
	  }

	  /**
	   * Send text/binary data to the remote peer.
	   * @param {ArrayBufferView|ArrayBuffer|Buffer|string|Blob} chunk
	   */
	  send (chunk) {
	    this._channel.send(chunk);
	  }

	  /**
	   * Add a Transceiver to the connection.
	   * @param {String} kind
	   * @param {Object} init
	   */
	  addTransceiver (kind, init) {
	    this._debug('addTransceiver()');

	    if (this.initiator) {
	      try {
	        this._pc.addTransceiver(kind, init);
	        this._needsNegotiation();
	      } catch (err) {
	        this.destroy(errCode$l(err, 'ERR_ADD_TRANSCEIVER'));
	      }
	    } else {
	      this.emit('signal', { // request initiator to renegotiate
	        transceiverRequest: { kind, init }
	      });
	    }
	  }

	  /**
	   * Add a MediaStream to the connection.
	   * @param {MediaStream} stream
	   */
	  addStream (stream) {
	    this._debug('addStream()');

	    stream.getTracks().forEach(track => {
	      this.addTrack(track, stream);
	    });
	  }

	  /**
	   * Add a MediaStreamTrack to the connection.
	   * @param {MediaStreamTrack} track
	   * @param {MediaStream} stream
	   */
	  addTrack (track, stream) {
	    this._debug('addTrack()');

	    var submap = this._senderMap.get(track) || new Map(); // nested Maps map [track, stream] to sender
	    var sender = submap.get(stream);
	    if (!sender) {
	      sender = this._pc.addTrack(track, stream);
	      submap.set(stream, sender);
	      this._senderMap.set(track, submap);
	      this._needsNegotiation();
	    } else if (sender.removed) {
	      throw errCode$l(new Error('Track has been removed. You should enable/disable tracks that you want to re-add.'), 'ERR_SENDER_REMOVED')
	    } else {
	      throw errCode$l(new Error('Track has already been added to that stream.'), 'ERR_SENDER_ALREADY_ADDED')
	    }
	  }

	  /**
	   * Replace a MediaStreamTrack by another in the connection.
	   * @param {MediaStreamTrack} oldTrack
	   * @param {MediaStreamTrack} newTrack
	   * @param {MediaStream} stream
	   */
	  replaceTrack (oldTrack, newTrack, stream) {
	    this._debug('replaceTrack()');

	    var submap = this._senderMap.get(oldTrack);
	    var sender = submap ? submap.get(stream) : null;
	    if (!sender) {
	      throw errCode$l(new Error('Cannot replace track that was never added.'), 'ERR_TRACK_NOT_ADDED')
	    }
	    if (newTrack) this._senderMap.set(newTrack, submap);

	    if (sender.replaceTrack != null) {
	      sender.replaceTrack(newTrack);
	    } else {
	      this.destroy(errCode$l(new Error('replaceTrack is not supported in this browser'), 'ERR_UNSUPPORTED_REPLACETRACK'));
	    }
	  }

	  /**
	   * Remove a MediaStreamTrack from the connection.
	   * @param {MediaStreamTrack} track
	   * @param {MediaStream} stream
	   */
	  removeTrack (track, stream) {
	    this._debug('removeSender()');

	    var submap = this._senderMap.get(track);
	    var sender = submap ? submap.get(stream) : null;
	    if (!sender) {
	      throw errCode$l(new Error('Cannot remove track that was never added.'), 'ERR_TRACK_NOT_ADDED')
	    }
	    try {
	      sender.removed = true;
	      this._pc.removeTrack(sender);
	    } catch (err) {
	      if (err.name === 'NS_ERROR_UNEXPECTED') {
	        this._sendersAwaitingStable.push(sender); // HACK: Firefox must wait until (signalingState === stable) https://bugzilla.mozilla.org/show_bug.cgi?id=1133874
	      } else {
	        this.destroy(errCode$l(err, 'ERR_REMOVE_TRACK'));
	      }
	    }
	    this._needsNegotiation();
	  }

	  /**
	   * Remove a MediaStream from the connection.
	   * @param {MediaStream} stream
	   */
	  removeStream (stream) {
	    this._debug('removeSenders()');

	    stream.getTracks().forEach(track => {
	      this.removeTrack(track, stream);
	    });
	  }

	  _needsNegotiation () {
	    this._debug('_needsNegotiation');
	    if (this._batchedNegotiation) return // batch synchronous renegotiations
	    this._batchedNegotiation = true;
	    queueMicrotask$1(() => {
	      this._batchedNegotiation = false;
	      this._debug('starting batched negotiation');
	      this.negotiate();
	    });
	  }

	  negotiate () {
	    if (this.initiator) {
	      if (this._isNegotiating) {
	        this._queuedNegotiation = true;
	        this._debug('already negotiating, queueing');
	      } else {
	        this._debug('start negotiation');
	        setTimeout(() => { // HACK: Chrome crashes if we immediately call createOffer
	          this._createOffer();
	        }, 0);
	      }
	    } else {
	      if (this._isNegotiating) {
	        this._queuedNegotiation = true;
	        this._debug('already negotiating, queueing');
	      } else {
	        this._debug('requesting negotiation from initiator');
	        this.emit('signal', { // request initiator to renegotiate
	          renegotiate: true
	        });
	      }
	    }
	    this._isNegotiating = true;
	  }

	  _destroy (err, cb) {
	    this._debug('destroy (error: %s)', err && (err.message || err));

	    this.readable = this.writable = false;

	    if (!this._readableState.ended) this.push(null);
	    if (!this._writableState.finished) this.end();

	    this._connected = false;
	    this._pcReady = false;
	    this._channelReady = false;
	    this._remoteTracks = null;
	    this._remoteStreams = null;
	    this._senderMap = null;

	    clearInterval(this._closingInterval);
	    this._closingInterval = null;

	    clearInterval(this._interval);
	    this._interval = null;
	    this._chunk = null;
	    this._cb = null;

	    if (this._onFinishBound) this.removeListener('finish', this._onFinishBound);
	    this._onFinishBound = null;

	    if (this._channel) {
	      try {
	        this._channel.close();
	      } catch (err) {}

	      this._channel.onmessage = null;
	      this._channel.onopen = null;
	      this._channel.onclose = null;
	      this._channel.onerror = null;
	    }
	    if (this._pc) {
	      try {
	        this._pc.close();
	      } catch (err) {}

	      this._pc.oniceconnectionstatechange = null;
	      this._pc.onicegatheringstatechange = null;
	      this._pc.onsignalingstatechange = null;
	      this._pc.onicecandidate = null;
	      this._pc.ontrack = null;
	      this._pc.ondatachannel = null;
	    }
	    this._pc = null;
	    this._channel = null;

	    cb(err);
	  }

	  _setupData (event) {
	    if (!event.channel) {
	      // In some situations `pc.createDataChannel()` returns `undefined` (in wrtc),
	      // which is invalid behavior. Handle it gracefully.
	      // See: https://github.com/feross/simple-peer/issues/163
	      return this.destroy(errCode$l(new Error('Data channel event is missing `channel` property'), 'ERR_DATA_CHANNEL'))
	    }

	    this._channel = event.channel;
	    this._channel.binaryType = 'arraybuffer';

	    if (typeof this._channel.bufferedAmountLowThreshold === 'number') {
	      this._channel.bufferedAmountLowThreshold = MAX_BUFFERED_AMOUNT;
	    }

	    this.channelName = this._channel.label;

	    this._channel.onmessage = event => {
	      this._onChannelMessage(event);
	    };
	    this._channel.onbufferedamountlow = () => {
	      this._onChannelBufferedAmountLow();
	    };
	    this._channel.onopen = () => {
	      this._onChannelOpen();
	    };
	    this._channel.onclose = () => {
	      this._onChannelClose();
	    };
	    this._channel.onerror = err => {
	      this.destroy(errCode$l(err, 'ERR_DATA_CHANNEL'));
	    };

	    // HACK: Chrome will sometimes get stuck in readyState "closing", let's check for this condition
	    // https://bugs.chromium.org/p/chromium/issues/detail?id=882743
	    var isClosing = false;
	    this._closingInterval = setInterval(() => { // No "onclosing" event
	      if (this._channel && this._channel.readyState === 'closing') {
	        if (isClosing) this._onChannelClose(); // closing timed out: equivalent to onclose firing
	        isClosing = true;
	      } else {
	        isClosing = false;
	      }
	    }, CHANNEL_CLOSING_TIMEOUT);
	  }

	  _read () {}

	  _write (chunk, encoding, cb) {
	    if (this.destroyed) return cb(errCode$l(new Error('cannot write after peer is destroyed'), 'ERR_DATA_CHANNEL'))

	    if (this._connected) {
	      try {
	        this.send(chunk);
	      } catch (err) {
	        return this.destroy(errCode$l(err, 'ERR_DATA_CHANNEL'))
	      }
	      if (this._channel.bufferedAmount > MAX_BUFFERED_AMOUNT) {
	        this._debug('start backpressure: bufferedAmount %d', this._channel.bufferedAmount);
	        this._cb = cb;
	      } else {
	        cb(null);
	      }
	    } else {
	      this._debug('write before connect');
	      this._chunk = chunk;
	      this._cb = cb;
	    }
	  }

	  // When stream finishes writing, close socket. Half open connections are not
	  // supported.
	  _onFinish () {
	    if (this.destroyed) return

	    // Wait a bit before destroying so the socket flushes.
	    // TODO: is there a more reliable way to accomplish this?
	    const destroySoon = () => {
	      setTimeout(() => this.destroy(), 1000);
	    };

	    if (this._connected) {
	      destroySoon();
	    } else {
	      this.once('connect', destroySoon);
	    }
	  }

	  _startIceCompleteTimeout () {
	    if (this.destroyed) return
	    if (this._iceCompleteTimer) return
	    this._debug('started iceComplete timeout');
	    this._iceCompleteTimer = setTimeout(() => {
	      if (!this._iceComplete) {
	        this._iceComplete = true;
	        this._debug('iceComplete timeout completed');
	        this.emit('iceTimeout');
	        this.emit('_iceComplete');
	      }
	    }, this.iceCompleteTimeout);
	  }

	  _createOffer () {
	    if (this.destroyed) return

	    this._pc.createOffer(this.offerOptions)
	      .then(offer => {
	        if (this.destroyed) return
	        if (!this.trickle && !this.allowHalfTrickle) offer.sdp = filterTrickle(offer.sdp);
	        offer.sdp = this.sdpTransform(offer.sdp);

	        const sendOffer = () => {
	          if (this.destroyed) return
	          var signal = this._pc.localDescription || offer;
	          this._debug('signal');
	          this.emit('signal', {
	            type: signal.type,
	            sdp: signal.sdp
	          });
	        };

	        const onSuccess = () => {
	          this._debug('createOffer success');
	          if (this.destroyed) return
	          if (this.trickle || this._iceComplete) sendOffer();
	          else this.once('_iceComplete', sendOffer); // wait for candidates
	        };

	        const onError = err => {
	          this.destroy(errCode$l(err, 'ERR_SET_LOCAL_DESCRIPTION'));
	        };

	        this._pc.setLocalDescription(offer)
	          .then(onSuccess)
	          .catch(onError);
	      })
	      .catch(err => {
	        this.destroy(errCode$l(err, 'ERR_CREATE_OFFER'));
	      });
	  }

	  _requestMissingTransceivers () {
	    if (this._pc.getTransceivers) {
	      this._pc.getTransceivers().forEach(transceiver => {
	        if (!transceiver.mid && transceiver.sender.track && !transceiver.requested) {
	          transceiver.requested = true; // HACK: Safari returns negotiated transceivers with a null mid
	          this.addTransceiver(transceiver.sender.track.kind);
	        }
	      });
	    }
	  }

	  _createAnswer () {
	    if (this.destroyed) return

	    this._pc.createAnswer(this.answerOptions)
	      .then(answer => {
	        if (this.destroyed) return
	        if (!this.trickle && !this.allowHalfTrickle) answer.sdp = filterTrickle(answer.sdp);
	        answer.sdp = this.sdpTransform(answer.sdp);

	        const sendAnswer = () => {
	          if (this.destroyed) return
	          var signal = this._pc.localDescription || answer;
	          this._debug('signal');
	          this.emit('signal', {
	            type: signal.type,
	            sdp: signal.sdp
	          });
	          if (!this.initiator) this._requestMissingTransceivers();
	        };

	        const onSuccess = () => {
	          if (this.destroyed) return
	          if (this.trickle || this._iceComplete) sendAnswer();
	          else this.once('_iceComplete', sendAnswer);
	        };

	        const onError = err => {
	          this.destroy(errCode$l(err, 'ERR_SET_LOCAL_DESCRIPTION'));
	        };

	        this._pc.setLocalDescription(answer)
	          .then(onSuccess)
	          .catch(onError);
	      })
	      .catch(err => {
	        this.destroy(errCode$l(err, 'ERR_CREATE_ANSWER'));
	      });
	  }

	  _onConnectionStateChange () {
	    if (this.destroyed) return
	    if (this._pc.connectionState === 'failed') {
	      this.destroy(errCode$l(new Error('Connection failed.'), 'ERR_CONNECTION_FAILURE'));
	    }
	  }

	  _onIceStateChange () {
	    if (this.destroyed) return
	    var iceConnectionState = this._pc.iceConnectionState;
	    var iceGatheringState = this._pc.iceGatheringState;

	    this._debug(
	      'iceStateChange (connection: %s) (gathering: %s)',
	      iceConnectionState,
	      iceGatheringState
	    );
	    this.emit('iceStateChange', iceConnectionState, iceGatheringState);

	    if (iceConnectionState === 'connected' || iceConnectionState === 'completed') {
	      this._pcReady = true;
	      this._maybeReady();
	    }
	    if (iceConnectionState === 'failed') {
	      this.destroy(errCode$l(new Error('Ice connection failed.'), 'ERR_ICE_CONNECTION_FAILURE'));
	    }
	    if (iceConnectionState === 'closed') {
	      this.destroy(errCode$l(new Error('Ice connection closed.'), 'ERR_ICE_CONNECTION_CLOSED'));
	    }
	  }

	  getStats (cb) {
	    // statreports can come with a value array instead of properties
	    const flattenValues = report => {
	      if (Object.prototype.toString.call(report.values) === '[object Array]') {
	        report.values.forEach(value => {
	          Object.assign(report, value);
	        });
	      }
	      return report
	    };

	    // Promise-based getStats() (standard)
	    if (this._pc.getStats.length === 0 || this._isReactNativeWebrtc) {
	      this._pc.getStats()
	        .then(res => {
	          var reports = [];
	          res.forEach(report => {
	            reports.push(flattenValues(report));
	          });
	          cb(null, reports);
	        }, err => cb(err));

	    // Single-parameter callback-based getStats() (non-standard)
	    } else if (this._pc.getStats.length > 0) {
	      this._pc.getStats(res => {
	        // If we destroy connection in `connect` callback this code might happen to run when actual connection is already closed
	        if (this.destroyed) return

	        var reports = [];
	        res.result().forEach(result => {
	          var report = {};
	          result.names().forEach(name => {
	            report[name] = result.stat(name);
	          });
	          report.id = result.id;
	          report.type = result.type;
	          report.timestamp = result.timestamp;
	          reports.push(flattenValues(report));
	        });
	        cb(null, reports);
	      }, err => cb(err));

	    // Unknown browser, skip getStats() since it's anyone's guess which style of
	    // getStats() they implement.
	    } else {
	      cb(null, []);
	    }
	  }

	  _maybeReady () {
	    this._debug('maybeReady pc %s channel %s', this._pcReady, this._channelReady);
	    if (this._connected || this._connecting || !this._pcReady || !this._channelReady) return

	    this._connecting = true;

	    // HACK: We can't rely on order here, for details see https://github.com/js-platform/node-webrtc/issues/339
	    const findCandidatePair = () => {
	      if (this.destroyed) return

	      this.getStats((err, items) => {
	        if (this.destroyed) return

	        // Treat getStats error as non-fatal. It's not essential.
	        if (err) items = [];

	        var remoteCandidates = {};
	        var localCandidates = {};
	        var candidatePairs = {};
	        var foundSelectedCandidatePair = false;

	        items.forEach(item => {
	          // TODO: Once all browsers support the hyphenated stats report types, remove
	          // the non-hypenated ones
	          if (item.type === 'remotecandidate' || item.type === 'remote-candidate') {
	            remoteCandidates[item.id] = item;
	          }
	          if (item.type === 'localcandidate' || item.type === 'local-candidate') {
	            localCandidates[item.id] = item;
	          }
	          if (item.type === 'candidatepair' || item.type === 'candidate-pair') {
	            candidatePairs[item.id] = item;
	          }
	        });

	        const setSelectedCandidatePair = selectedCandidatePair => {
	          foundSelectedCandidatePair = true;

	          var local = localCandidates[selectedCandidatePair.localCandidateId];

	          if (local && (local.ip || local.address)) {
	            // Spec
	            this.localAddress = local.ip || local.address;
	            this.localPort = Number(local.port);
	          } else if (local && local.ipAddress) {
	            // Firefox
	            this.localAddress = local.ipAddress;
	            this.localPort = Number(local.portNumber);
	          } else if (typeof selectedCandidatePair.googLocalAddress === 'string') {
	            // TODO: remove this once Chrome 58 is released
	            local = selectedCandidatePair.googLocalAddress.split(':');
	            this.localAddress = local[0];
	            this.localPort = Number(local[1]);
	          }
	          if (this.localAddress) {
	            this.localFamily = this.localAddress.includes(':') ? 'IPv6' : 'IPv4';
	          }

	          var remote = remoteCandidates[selectedCandidatePair.remoteCandidateId];

	          if (remote && (remote.ip || remote.address)) {
	            // Spec
	            this.remoteAddress = remote.ip || remote.address;
	            this.remotePort = Number(remote.port);
	          } else if (remote && remote.ipAddress) {
	            // Firefox
	            this.remoteAddress = remote.ipAddress;
	            this.remotePort = Number(remote.portNumber);
	          } else if (typeof selectedCandidatePair.googRemoteAddress === 'string') {
	            // TODO: remove this once Chrome 58 is released
	            remote = selectedCandidatePair.googRemoteAddress.split(':');
	            this.remoteAddress = remote[0];
	            this.remotePort = Number(remote[1]);
	          }
	          if (this.remoteAddress) {
	            this.remoteFamily = this.remoteAddress.includes(':') ? 'IPv6' : 'IPv4';
	          }

	          this._debug(
	            'connect local: %s:%s remote: %s:%s',
	            this.localAddress, this.localPort, this.remoteAddress, this.remotePort
	          );
	        };

	        items.forEach(item => {
	          // Spec-compliant
	          if (item.type === 'transport' && item.selectedCandidatePairId) {
	            setSelectedCandidatePair(candidatePairs[item.selectedCandidatePairId]);
	          }

	          // Old implementations
	          if (
	            (item.type === 'googCandidatePair' && item.googActiveConnection === 'true') ||
	            ((item.type === 'candidatepair' || item.type === 'candidate-pair') && item.selected)
	          ) {
	            setSelectedCandidatePair(item);
	          }
	        });

	        // Ignore candidate pair selection in browsers like Safari 11 that do not have any local or remote candidates
	        // But wait until at least 1 candidate pair is available
	        if (!foundSelectedCandidatePair && (!Object.keys(candidatePairs).length || Object.keys(localCandidates).length)) {
	          setTimeout(findCandidatePair, 100);
	          return
	        } else {
	          this._connecting = false;
	          this._connected = true;
	        }

	        if (this._chunk) {
	          try {
	            this.send(this._chunk);
	          } catch (err) {
	            return this.destroy(errCode$l(err, 'ERR_DATA_CHANNEL'))
	          }
	          this._chunk = null;
	          this._debug('sent chunk from "write before connect"');

	          var cb = this._cb;
	          this._cb = null;
	          cb(null);
	        }

	        // If `bufferedAmountLowThreshold` and 'onbufferedamountlow' are unsupported,
	        // fallback to using setInterval to implement backpressure.
	        if (typeof this._channel.bufferedAmountLowThreshold !== 'number') {
	          this._interval = setInterval(() => this._onInterval(), 150);
	          if (this._interval.unref) this._interval.unref();
	        }

	        this._debug('connect');
	        this.emit('connect');
	      });
	    };
	    findCandidatePair();
	  }

	  _onInterval () {
	    if (!this._cb || !this._channel || this._channel.bufferedAmount > MAX_BUFFERED_AMOUNT) {
	      return
	    }
	    this._onChannelBufferedAmountLow();
	  }

	  _onSignalingStateChange () {
	    if (this.destroyed) return

	    if (this._pc.signalingState === 'stable' && !this._firstStable) {
	      this._isNegotiating = false;

	      // HACK: Firefox doesn't yet support removing tracks when signalingState !== 'stable'
	      this._debug('flushing sender queue', this._sendersAwaitingStable);
	      this._sendersAwaitingStable.forEach(sender => {
	        this._pc.removeTrack(sender);
	        this._queuedNegotiation = true;
	      });
	      this._sendersAwaitingStable = [];

	      if (this._queuedNegotiation) {
	        this._debug('flushing negotiation queue');
	        this._queuedNegotiation = false;
	        this._needsNegotiation(); // negotiate again
	      }

	      this._debug('negotiate');
	      this.emit('negotiate');
	    }
	    this._firstStable = false;

	    this._debug('signalingStateChange %s', this._pc.signalingState);
	    this.emit('signalingStateChange', this._pc.signalingState);
	  }

	  _onIceCandidate (event) {
	    if (this.destroyed) return
	    if (event.candidate && this.trickle) {
	      this.emit('signal', {
	        candidate: {
	          candidate: event.candidate.candidate,
	          sdpMLineIndex: event.candidate.sdpMLineIndex,
	          sdpMid: event.candidate.sdpMid
	        }
	      });
	    } else if (!event.candidate && !this._iceComplete) {
	      this._iceComplete = true;
	      this.emit('_iceComplete');
	    }
	    // as soon as we've received one valid candidate start timeout
	    if (event.candidate) {
	      this._startIceCompleteTimeout();
	    }
	  }

	  _onChannelMessage (event) {
	    if (this.destroyed) return
	    var data = event.data;
	    if (data instanceof ArrayBuffer) data = new Uint8Array(data);
	    this.push(data);
	  }

	  _onChannelBufferedAmountLow () {
	    if (this.destroyed || !this._cb) return
	    this._debug('ending backpressure: bufferedAmount %d', this._channel.bufferedAmount);
	    var cb = this._cb;
	    this._cb = null;
	    cb(null);
	  }

	  _onChannelOpen () {
	    if (this._connected || this.destroyed) return
	    this._debug('on channel open');
	    this._channelReady = true;
	    this._maybeReady();
	  }

	  _onChannelClose () {
	    if (this.destroyed) return
	    this._debug('on channel close');
	    this.destroy();
	  }

	  _onTrack (event) {
	    if (this.destroyed) return

	    event.streams.forEach(eventStream => {
	      this._debug('on track');
	      this.emit('track', event.track, eventStream);

	      this._remoteTracks.push({
	        track: event.track,
	        stream: eventStream
	      });

	      if (this._remoteStreams.some(remoteStream => {
	        return remoteStream.id === eventStream.id
	      })) return // Only fire one 'stream' event, even though there may be multiple tracks per stream

	      this._remoteStreams.push(eventStream);
	      queueMicrotask$1(() => {
	        this.emit('stream', eventStream); // ensure all tracks have been added
	      });
	    });
	  }

	  _debug () {
	    var args = [].slice.call(arguments);
	    args[0] = '[' + this._id + '] ' + args[0];
	    debug$H.apply(null, args);
	  }
	}

	Peer.WEBRTC_SUPPORT = !!getBrowserRTC();

	/**
	 * Expose peer and data channel config for overriding all Peer
	 * instances. Otherwise, just set opts.config or opts.channelConfig
	 * when constructing a Peer.
	 */
	Peer.config = {
	  iceServers: [
	    {
	      urls: [
	        'stun:stun.l.google.com:19302',
	        'stun:global.stun.twilio.com:3478'
	      ]
	    }
	  ],
	  sdpSemantics: 'unified-plan'
	};

	Peer.channelConfig = {};

	var libp2pWebrtcPeer = Peer;

	var supports = {
	  // in React Native: global === window === self
	  supportsFileReader: typeof self !== 'undefined' && 'FileReader' in self,
	  supportsWebRTC: 'RTCPeerConnection' in globalThis &&
	  (typeof navigator !== 'undefined' && typeof navigator.mediaDevices !== 'undefined' && 'getUserMedia' in navigator.mediaDevices),
	  supportsWebRTCDataChannels: 'RTCPeerConnection' in globalThis
	};

	var constants$7 = {};

	// p2p multi-address code
	constants$7.CODE_P2P = 421;
	constants$7.CODE_CIRCUIT = 290;

	// Time to wait for a connection to close gracefully before destroying it manually
	constants$7.CLOSE_TIMEOUT = 2000;

	var cjs$3 = {exports: {}};

	var url$1 = {};

	/**
	 * Parses an URI
	 *
	 * @author Steven Levithan <stevenlevithan.com> (MIT license)
	 * @api private
	 */

	var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

	var parts = [
	    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
	];

	var parseuri = function parseuri(str) {
	    var src = str,
	        b = str.indexOf('['),
	        e = str.indexOf(']');

	    if (b != -1 && e != -1) {
	        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
	    }

	    var m = re.exec(str || ''),
	        uri = {},
	        i = 14;

	    while (i--) {
	        uri[parts[i]] = m[i] || '';
	    }

	    if (b != -1 && e != -1) {
	        uri.source = src;
	        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
	        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
	        uri.ipv6uri = true;
	    }

	    uri.pathNames = pathNames(uri, uri['path']);
	    uri.queryKey = queryKey(uri, uri['query']);

	    return uri;
	};

	function pathNames(obj, path) {
	    var regx = /\/{2,9}/g,
	        names = path.replace(regx, "/").split("/");

	    if (path.substr(0, 1) == '/' || path.length === 0) {
	        names.splice(0, 1);
	    }
	    if (path.substr(path.length - 1, 1) == '/') {
	        names.splice(names.length - 1, 1);
	    }

	    return names;
	}

	function queryKey(uri, query) {
	    var data = {};

	    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {
	        if ($1) {
	            data[$1] = $2;
	        }
	    });

	    return data;
	}

	var __importDefault$d = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(url$1, "__esModule", { value: true });
	url$1.url = void 0;
	const parseuri_1$1 = __importDefault$d(parseuri);
	const debug_1$7 = __importDefault$d(browser$a.exports); // debug()
	const debug$G = debug_1$7.default("socket.io-client:url"); // debug()
	/**
	 * URL parser.
	 *
	 * @param uri - url
	 * @param path - the request path of the connection
	 * @param loc - An object meant to mimic window.location.
	 *        Defaults to window.location.
	 * @public
	 */
	function url(uri, path = "", loc) {
	    let obj = uri;
	    // default to window.location
	    loc = loc || (typeof location !== "undefined" && location);
	    if (null == uri)
	        uri = loc.protocol + "//" + loc.host;
	    // relative path support
	    if (typeof uri === "string") {
	        if ("/" === uri.charAt(0)) {
	            if ("/" === uri.charAt(1)) {
	                uri = loc.protocol + uri;
	            }
	            else {
	                uri = loc.host + uri;
	            }
	        }
	        if (!/^(https?|wss?):\/\//.test(uri)) {
	            debug$G("protocol-less url %s", uri);
	            if ("undefined" !== typeof loc) {
	                uri = loc.protocol + "//" + uri;
	            }
	            else {
	                uri = "https://" + uri;
	            }
	        }
	        // parse
	        debug$G("parse %s", uri);
	        obj = parseuri_1$1.default(uri);
	    }
	    // make sure we treat `localhost:80` and `localhost` equally
	    if (!obj.port) {
	        if (/^(http|ws)$/.test(obj.protocol)) {
	            obj.port = "80";
	        }
	        else if (/^(http|ws)s$/.test(obj.protocol)) {
	            obj.port = "443";
	        }
	    }
	    obj.path = obj.path || "/";
	    const ipv6 = obj.host.indexOf(":") !== -1;
	    const host = ipv6 ? "[" + obj.host + "]" : obj.host;
	    // define unique id
	    obj.id = obj.protocol + "://" + host + ":" + obj.port + path;
	    // define href
	    obj.href =
	        obj.protocol +
	            "://" +
	            host +
	            (loc && loc.port === obj.port ? "" : ":" + obj.port);
	    return obj;
	}
	url$1.url = url;

	var manager$1 = {};

	var cjs$2 = {};

	var socket$1 = {};

	var transports = {};

	var pollingXhr = {};

	var xmlhttprequest_browser = {};

	var hasCors = {exports: {}};

	/**
	 * Module exports.
	 *
	 * Logic borrowed from Modernizr:
	 *
	 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
	 */

	try {
	  hasCors.exports = typeof XMLHttpRequest !== 'undefined' &&
	    'withCredentials' in new XMLHttpRequest();
	} catch (err) {
	  // if XMLHttp support is disabled in IE then it will throw
	  // when trying to create
	  hasCors.exports = false;
	}

	var globalThis_browser = {};

	Object.defineProperty(globalThis_browser, "__esModule", { value: true });
	globalThis_browser.default = (() => {
	    if (typeof self !== "undefined") {
	        return self;
	    }
	    else if (typeof window !== "undefined") {
	        return window;
	    }
	    else {
	        return Function("return this")();
	    }
	})();

	// browser shim for xmlhttprequest module
	var __importDefault$c = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(xmlhttprequest_browser, "__esModule", { value: true });
	const has_cors_1 = __importDefault$c(hasCors.exports);
	const globalThis_js_1$3 = __importDefault$c(globalThis_browser);
	function default_1(opts) {
	    const xdomain = opts.xdomain;
	    // XMLHttpRequest can be disabled on IE
	    try {
	        if ("undefined" !== typeof XMLHttpRequest && (!xdomain || has_cors_1.default)) {
	            return new XMLHttpRequest();
	        }
	    }
	    catch (e) { }
	    if (!xdomain) {
	        try {
	            return new globalThis_js_1$3.default[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP");
	        }
	        catch (e) { }
	    }
	}
	xmlhttprequest_browser.default = default_1;

	var util$1 = {};

	var __importDefault$b = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(util$1, "__esModule", { value: true });
	util$1.installTimerFunctions = util$1.pick = void 0;
	const globalThis_js_1$2 = __importDefault$b(globalThis_browser);
	function pick(obj, ...attr) {
	    return attr.reduce((acc, k) => {
	        if (obj.hasOwnProperty(k)) {
	            acc[k] = obj[k];
	        }
	        return acc;
	    }, {});
	}
	util$1.pick = pick;
	// Keep a reference to the real timeout functions so they can be used when overridden
	const NATIVE_SET_TIMEOUT = setTimeout;
	const NATIVE_CLEAR_TIMEOUT = clearTimeout;
	function installTimerFunctions(obj, opts) {
	    if (opts.useNativeTimers) {
	        obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globalThis_js_1$2.default);
	        obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globalThis_js_1$2.default);
	    }
	    else {
	        obj.setTimeoutFn = setTimeout.bind(globalThis_js_1$2.default);
	        obj.clearTimeoutFn = clearTimeout.bind(globalThis_js_1$2.default);
	    }
	}
	util$1.installTimerFunctions = installTimerFunctions;

	var componentEmitter = {};

	/**
	 * Expose `Emitter`.
	 */

	componentEmitter.Emitter = Emitter;

	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */

	function Emitter(obj) {
	  if (obj) return mixin(obj);
	}

	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */

	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}

	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.on =
	Emitter.prototype.addEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
	    .push(fn);
	  return this;
	};

	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.once = function(event, fn){
	  function on() {
	    this.off(event, on);
	    fn.apply(this, arguments);
	  }

	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};

	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners =
	Emitter.prototype.removeEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};

	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }

	  // specific event
	  var callbacks = this._callbacks['$' + event];
	  if (!callbacks) return this;

	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks['$' + event];
	    return this;
	  }

	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }

	  // Remove event specific arrays for event types that no
	  // one is subscribed for to avoid memory leak.
	  if (callbacks.length === 0) {
	    delete this._callbacks['$' + event];
	  }

	  return this;
	};

	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */

	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};

	  var args = new Array(arguments.length - 1)
	    , callbacks = this._callbacks['$' + event];

	  for (var i = 1; i < arguments.length; i++) {
	    args[i - 1] = arguments[i];
	  }

	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }

	  return this;
	};

	// alias used for reserved events (protected method)
	Emitter.prototype.emitReserved = Emitter.prototype.emit;

	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */

	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks['$' + event] || [];
	};

	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */

	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};

	var polling = {};

	var transport$1 = {};

	var cjs$1 = {};

	var encodePacket_browser = {};

	var commons = {};

	Object.defineProperty(commons, "__esModule", { value: true });
	commons.ERROR_PACKET = commons.PACKET_TYPES_REVERSE = commons.PACKET_TYPES = void 0;
	const PACKET_TYPES = Object.create(null); // no Map = no polyfill
	commons.PACKET_TYPES = PACKET_TYPES;
	PACKET_TYPES["open"] = "0";
	PACKET_TYPES["close"] = "1";
	PACKET_TYPES["ping"] = "2";
	PACKET_TYPES["pong"] = "3";
	PACKET_TYPES["message"] = "4";
	PACKET_TYPES["upgrade"] = "5";
	PACKET_TYPES["noop"] = "6";
	const PACKET_TYPES_REVERSE = Object.create(null);
	commons.PACKET_TYPES_REVERSE = PACKET_TYPES_REVERSE;
	Object.keys(PACKET_TYPES).forEach(key => {
	    PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;
	});
	const ERROR_PACKET = { type: "error", data: "parser error" };
	commons.ERROR_PACKET = ERROR_PACKET;

	Object.defineProperty(encodePacket_browser, "__esModule", { value: true });
	const commons_js_1$1 = commons;
	const withNativeBlob$1 = typeof Blob === "function" ||
	    (typeof Blob !== "undefined" &&
	        Object.prototype.toString.call(Blob) === "[object BlobConstructor]");
	const withNativeArrayBuffer$2 = typeof ArrayBuffer === "function";
	// ArrayBuffer.isView method is not defined in IE10
	const isView$1 = obj => {
	    return typeof ArrayBuffer.isView === "function"
	        ? ArrayBuffer.isView(obj)
	        : obj && obj.buffer instanceof ArrayBuffer;
	};
	const encodePacket = ({ type, data }, supportsBinary, callback) => {
	    if (withNativeBlob$1 && data instanceof Blob) {
	        if (supportsBinary) {
	            return callback(data);
	        }
	        else {
	            return encodeBlobAsBase64(data, callback);
	        }
	    }
	    else if (withNativeArrayBuffer$2 &&
	        (data instanceof ArrayBuffer || isView$1(data))) {
	        if (supportsBinary) {
	            return callback(data);
	        }
	        else {
	            return encodeBlobAsBase64(new Blob([data]), callback);
	        }
	    }
	    // plain string
	    return callback(commons_js_1$1.PACKET_TYPES[type] + (data || ""));
	};
	const encodeBlobAsBase64 = (data, callback) => {
	    const fileReader = new FileReader();
	    fileReader.onload = function () {
	        const content = fileReader.result.split(",")[1];
	        callback("b" + content);
	    };
	    return fileReader.readAsDataURL(data);
	};
	encodePacket_browser.default = encodePacket;

	var decodePacket_browser = {};

	/*
	 * base64-arraybuffer 1.0.1 <https://github.com/niklasvh/base64-arraybuffer>
	 * Copyright (c) 2022 Niklas von Hertzen <https://hertzen.com>
	 * Released under MIT License
	 */
	var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	// Use a lookup table to find the index.
	var lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);
	for (var i$1 = 0; i$1 < chars.length; i$1++) {
	    lookup[chars.charCodeAt(i$1)] = i$1;
	}
	var encode$3 = function (arraybuffer) {
	    var bytes = new Uint8Array(arraybuffer), i, len = bytes.length, base64 = '';
	    for (i = 0; i < len; i += 3) {
	        base64 += chars[bytes[i] >> 2];
	        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
	        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
	        base64 += chars[bytes[i + 2] & 63];
	    }
	    if (len % 3 === 2) {
	        base64 = base64.substring(0, base64.length - 1) + '=';
	    }
	    else if (len % 3 === 1) {
	        base64 = base64.substring(0, base64.length - 2) + '==';
	    }
	    return base64;
	};
	var decode$3 = function (base64) {
	    var bufferLength = base64.length * 0.75, len = base64.length, i, p = 0, encoded1, encoded2, encoded3, encoded4;
	    if (base64[base64.length - 1] === '=') {
	        bufferLength--;
	        if (base64[base64.length - 2] === '=') {
	            bufferLength--;
	        }
	    }
	    var arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);
	    for (i = 0; i < len; i += 4) {
	        encoded1 = lookup[base64.charCodeAt(i)];
	        encoded2 = lookup[base64.charCodeAt(i + 1)];
	        encoded3 = lookup[base64.charCodeAt(i + 2)];
	        encoded4 = lookup[base64.charCodeAt(i + 3)];
	        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
	        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
	        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
	    }
	    return arraybuffer;
	};

	var base64Arraybuffer_es5 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		decode: decode$3,
		encode: encode$3
	});

	var require$$1$2 = /*@__PURE__*/getAugmentedNamespace(base64Arraybuffer_es5);

	Object.defineProperty(decodePacket_browser, "__esModule", { value: true });
	const commons_js_1 = commons;
	const base64_arraybuffer_1 = require$$1$2;
	const withNativeArrayBuffer$1 = typeof ArrayBuffer === "function";
	const decodePacket = (encodedPacket, binaryType) => {
	    if (typeof encodedPacket !== "string") {
	        return {
	            type: "message",
	            data: mapBinary(encodedPacket, binaryType)
	        };
	    }
	    const type = encodedPacket.charAt(0);
	    if (type === "b") {
	        return {
	            type: "message",
	            data: decodeBase64Packet(encodedPacket.substring(1), binaryType)
	        };
	    }
	    const packetType = commons_js_1.PACKET_TYPES_REVERSE[type];
	    if (!packetType) {
	        return commons_js_1.ERROR_PACKET;
	    }
	    return encodedPacket.length > 1
	        ? {
	            type: commons_js_1.PACKET_TYPES_REVERSE[type],
	            data: encodedPacket.substring(1)
	        }
	        : {
	            type: commons_js_1.PACKET_TYPES_REVERSE[type]
	        };
	};
	const decodeBase64Packet = (data, binaryType) => {
	    if (withNativeArrayBuffer$1) {
	        const decoded = (0, base64_arraybuffer_1.decode)(data);
	        return mapBinary(decoded, binaryType);
	    }
	    else {
	        return { base64: true, data }; // fallback for old browsers
	    }
	};
	const mapBinary = (data, binaryType) => {
	    switch (binaryType) {
	        case "blob":
	            return data instanceof ArrayBuffer ? new Blob([data]) : data;
	        case "arraybuffer":
	        default:
	            return data; // assuming the data is already an ArrayBuffer
	    }
	};
	decodePacket_browser.default = decodePacket;

	Object.defineProperty(cjs$1, "__esModule", { value: true });
	cjs$1.decodePayload = cjs$1.decodePacket = cjs$1.encodePayload = cjs$1.encodePacket = cjs$1.protocol = void 0;
	const encodePacket_js_1 = encodePacket_browser;
	cjs$1.encodePacket = encodePacket_js_1.default;
	const decodePacket_js_1 = decodePacket_browser;
	cjs$1.decodePacket = decodePacket_js_1.default;
	const SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text
	const encodePayload = (packets, callback) => {
	    // some packets may be added to the array while encoding, so the initial length must be saved
	    const length = packets.length;
	    const encodedPackets = new Array(length);
	    let count = 0;
	    packets.forEach((packet, i) => {
	        // force base64 encoding for binary packets
	        (0, encodePacket_js_1.default)(packet, false, encodedPacket => {
	            encodedPackets[i] = encodedPacket;
	            if (++count === length) {
	                callback(encodedPackets.join(SEPARATOR));
	            }
	        });
	    });
	};
	cjs$1.encodePayload = encodePayload;
	const decodePayload$1 = (encodedPayload, binaryType) => {
	    const encodedPackets = encodedPayload.split(SEPARATOR);
	    const packets = [];
	    for (let i = 0; i < encodedPackets.length; i++) {
	        const decodedPacket = (0, decodePacket_js_1.default)(encodedPackets[i], binaryType);
	        packets.push(decodedPacket);
	        if (decodedPacket.type === "error") {
	            break;
	        }
	    }
	    return packets;
	};
	cjs$1.decodePayload = decodePayload$1;
	cjs$1.protocol = 4;

	var __importDefault$a = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(transport$1, "__esModule", { value: true });
	transport$1.Transport = void 0;
	const engine_io_parser_1$3 = cjs$1;
	const component_emitter_1$4 = componentEmitter;
	const util_js_1$3 = util$1;
	const debug_1$6 = __importDefault$a(browser$a.exports); // debug()
	const debug$F = (0, debug_1$6.default)("engine.io-client:transport"); // debug()
	class Transport extends component_emitter_1$4.Emitter {
	    /**
	     * Transport abstract constructor.
	     *
	     * @param {Object} options.
	     * @api private
	     */
	    constructor(opts) {
	        super();
	        this.writable = false;
	        (0, util_js_1$3.installTimerFunctions)(this, opts);
	        this.opts = opts;
	        this.query = opts.query;
	        this.readyState = "";
	        this.socket = opts.socket;
	    }
	    /**
	     * Emits an error.
	     *
	     * @param {String} str
	     * @return {Transport} for chaining
	     * @api protected
	     */
	    onError(msg, desc) {
	        const err = new Error(msg);
	        // @ts-ignore
	        err.type = "TransportError";
	        // @ts-ignore
	        err.description = desc;
	        super.emit("error", err);
	        return this;
	    }
	    /**
	     * Opens the transport.
	     *
	     * @api public
	     */
	    open() {
	        if ("closed" === this.readyState || "" === this.readyState) {
	            this.readyState = "opening";
	            this.doOpen();
	        }
	        return this;
	    }
	    /**
	     * Closes the transport.
	     *
	     * @api public
	     */
	    close() {
	        if ("opening" === this.readyState || "open" === this.readyState) {
	            this.doClose();
	            this.onClose();
	        }
	        return this;
	    }
	    /**
	     * Sends multiple packets.
	     *
	     * @param {Array} packets
	     * @api public
	     */
	    send(packets) {
	        if ("open" === this.readyState) {
	            this.write(packets);
	        }
	        else {
	            // this might happen if the transport was silently closed in the beforeunload event handler
	            debug$F("transport is not open, discarding packets");
	        }
	    }
	    /**
	     * Called upon open
	     *
	     * @api protected
	     */
	    onOpen() {
	        this.readyState = "open";
	        this.writable = true;
	        super.emit("open");
	    }
	    /**
	     * Called with data.
	     *
	     * @param {String} data
	     * @api protected
	     */
	    onData(data) {
	        const packet = (0, engine_io_parser_1$3.decodePacket)(data, this.socket.binaryType);
	        this.onPacket(packet);
	    }
	    /**
	     * Called with a decoded packet.
	     *
	     * @api protected
	     */
	    onPacket(packet) {
	        super.emit("packet", packet);
	    }
	    /**
	     * Called upon close.
	     *
	     * @api protected
	     */
	    onClose() {
	        this.readyState = "closed";
	        super.emit("close");
	    }
	}
	transport$1.Transport = Transport;

	var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')
	  , length$3 = 64
	  , map$4 = {}
	  , seed = 0
	  , i = 0
	  , prev;

	/**
	 * Return a string representing the specified number.
	 *
	 * @param {Number} num The number to convert.
	 * @returns {String} The string representation of the number.
	 * @api public
	 */
	function encode$2(num) {
	  var encoded = '';

	  do {
	    encoded = alphabet[num % length$3] + encoded;
	    num = Math.floor(num / length$3);
	  } while (num > 0);

	  return encoded;
	}

	/**
	 * Return the integer value specified by the given string.
	 *
	 * @param {String} str The string to convert.
	 * @returns {Number} The integer value represented by the string.
	 * @api public
	 */
	function decode$2(str) {
	  var decoded = 0;

	  for (i = 0; i < str.length; i++) {
	    decoded = decoded * length$3 + map$4[str.charAt(i)];
	  }

	  return decoded;
	}

	/**
	 * Yeast: A tiny growing id generator.
	 *
	 * @returns {String} A unique id.
	 * @api public
	 */
	function yeast() {
	  var now = encode$2(+new Date());

	  if (now !== prev) return seed = 0, prev = now;
	  return now +'.'+ encode$2(seed++);
	}

	//
	// Map each character to its index.
	//
	for (; i < length$3; i++) map$4[alphabet[i]] = i;

	//
	// Expose the `yeast`, `encode` and `decode` functions.
	//
	yeast.encode = encode$2;
	yeast.decode = decode$2;
	var yeast_1$2 = yeast;

	var parseqs = {};

	/**
	 * Compiles a querystring
	 * Returns string representation of the object
	 *
	 * @param {Object}
	 * @api private
	 */

	parseqs.encode = function (obj) {
	  var str = '';

	  for (var i in obj) {
	    if (obj.hasOwnProperty(i)) {
	      if (str.length) str += '&';
	      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
	    }
	  }

	  return str;
	};

	/**
	 * Parses a simple querystring into an object
	 *
	 * @param {String} qs
	 * @api private
	 */

	parseqs.decode = function(qs){
	  var qry = {};
	  var pairs = qs.split('&');
	  for (var i = 0, l = pairs.length; i < l; i++) {
	    var pair = pairs[i].split('=');
	    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
	  }
	  return qry;
	};

	var __importDefault$9 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(polling, "__esModule", { value: true });
	polling.Polling = void 0;
	const transport_js_1$1 = transport$1;
	const debug_1$5 = __importDefault$9(browser$a.exports); // debug()
	const yeast_1$1 = __importDefault$9(yeast_1$2);
	const parseqs_1$2 = __importDefault$9(parseqs);
	const engine_io_parser_1$2 = cjs$1;
	const debug$E = (0, debug_1$5.default)("engine.io-client:polling"); // debug()
	class Polling extends transport_js_1$1.Transport {
	    constructor() {
	        super(...arguments);
	        this.polling = false;
	    }
	    /**
	     * Transport name.
	     */
	    get name() {
	        return "polling";
	    }
	    /**
	     * Opens the socket (triggers polling). We write a PING message to determine
	     * when the transport is open.
	     *
	     * @api private
	     */
	    doOpen() {
	        this.poll();
	    }
	    /**
	     * Pauses polling.
	     *
	     * @param {Function} callback upon buffers are flushed and transport is paused
	     * @api private
	     */
	    pause(onPause) {
	        this.readyState = "pausing";
	        const pause = () => {
	            debug$E("paused");
	            this.readyState = "paused";
	            onPause();
	        };
	        if (this.polling || !this.writable) {
	            let total = 0;
	            if (this.polling) {
	                debug$E("we are currently polling - waiting to pause");
	                total++;
	                this.once("pollComplete", function () {
	                    debug$E("pre-pause polling complete");
	                    --total || pause();
	                });
	            }
	            if (!this.writable) {
	                debug$E("we are currently writing - waiting to pause");
	                total++;
	                this.once("drain", function () {
	                    debug$E("pre-pause writing complete");
	                    --total || pause();
	                });
	            }
	        }
	        else {
	            pause();
	        }
	    }
	    /**
	     * Starts polling cycle.
	     *
	     * @api public
	     */
	    poll() {
	        debug$E("polling");
	        this.polling = true;
	        this.doPoll();
	        this.emit("poll");
	    }
	    /**
	     * Overloads onData to detect payloads.
	     *
	     * @api private
	     */
	    onData(data) {
	        debug$E("polling got data %s", data);
	        const callback = packet => {
	            // if its the first message we consider the transport open
	            if ("opening" === this.readyState && packet.type === "open") {
	                this.onOpen();
	            }
	            // if its a close packet, we close the ongoing requests
	            if ("close" === packet.type) {
	                this.onClose();
	                return false;
	            }
	            // otherwise bypass onData and handle the message
	            this.onPacket(packet);
	        };
	        // decode payload
	        (0, engine_io_parser_1$2.decodePayload)(data, this.socket.binaryType).forEach(callback);
	        // if an event did not trigger closing
	        if ("closed" !== this.readyState) {
	            // if we got data we're not polling
	            this.polling = false;
	            this.emit("pollComplete");
	            if ("open" === this.readyState) {
	                this.poll();
	            }
	            else {
	                debug$E('ignoring poll - transport state "%s"', this.readyState);
	            }
	        }
	    }
	    /**
	     * For polling, send a close packet.
	     *
	     * @api private
	     */
	    doClose() {
	        const close = () => {
	            debug$E("writing close packet");
	            this.write([{ type: "close" }]);
	        };
	        if ("open" === this.readyState) {
	            debug$E("transport open - closing");
	            close();
	        }
	        else {
	            // in case we're trying to close while
	            // handshaking is in progress (GH-164)
	            debug$E("transport not open - deferring close");
	            this.once("open", close);
	        }
	    }
	    /**
	     * Writes a packets payload.
	     *
	     * @param {Array} data packets
	     * @param {Function} drain callback
	     * @api private
	     */
	    write(packets) {
	        this.writable = false;
	        (0, engine_io_parser_1$2.encodePayload)(packets, data => {
	            this.doWrite(data, () => {
	                this.writable = true;
	                this.emit("drain");
	            });
	        });
	    }
	    /**
	     * Generates uri for connection.
	     *
	     * @api private
	     */
	    uri() {
	        let query = this.query || {};
	        const schema = this.opts.secure ? "https" : "http";
	        let port = "";
	        // cache busting is forced
	        if (false !== this.opts.timestampRequests) {
	            query[this.opts.timestampParam] = (0, yeast_1$1.default)();
	        }
	        if (!this.supportsBinary && !query.sid) {
	            query.b64 = 1;
	        }
	        // avoid port if default for schema
	        if (this.opts.port &&
	            (("https" === schema && Number(this.opts.port) !== 443) ||
	                ("http" === schema && Number(this.opts.port) !== 80))) {
	            port = ":" + this.opts.port;
	        }
	        const encodedQuery = parseqs_1$2.default.encode(query);
	        const ipv6 = this.opts.hostname.indexOf(":") !== -1;
	        return (schema +
	            "://" +
	            (ipv6 ? "[" + this.opts.hostname + "]" : this.opts.hostname) +
	            port +
	            this.opts.path +
	            (encodedQuery.length ? "?" + encodedQuery : ""));
	    }
	}
	polling.Polling = Polling;

	/* global attachEvent */
	var __importDefault$8 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(pollingXhr, "__esModule", { value: true });
	pollingXhr.Request = pollingXhr.XHR = void 0;
	const xmlhttprequest_js_1 = __importDefault$8(xmlhttprequest_browser);
	const debug_1$4 = __importDefault$8(browser$a.exports); // debug()
	const globalThis_js_1$1 = __importDefault$8(globalThis_browser);
	const util_js_1$2 = util$1;
	const component_emitter_1$3 = componentEmitter;
	const polling_js_1 = polling;
	const debug$D = (0, debug_1$4.default)("engine.io-client:polling-xhr"); // debug()
	/**
	 * Empty function
	 */
	function empty() { }
	const hasXHR2 = (function () {
	    const xhr = new xmlhttprequest_js_1.default({
	        xdomain: false
	    });
	    return null != xhr.responseType;
	})();
	class XHR extends polling_js_1.Polling {
	    /**
	     * XHR Polling constructor.
	     *
	     * @param {Object} opts
	     * @api public
	     */
	    constructor(opts) {
	        super(opts);
	        if (typeof location !== "undefined") {
	            const isSSL = "https:" === location.protocol;
	            let port = location.port;
	            // some user agents have empty `location.port`
	            if (!port) {
	                port = isSSL ? "443" : "80";
	            }
	            this.xd =
	                (typeof location !== "undefined" &&
	                    opts.hostname !== location.hostname) ||
	                    port !== opts.port;
	            this.xs = opts.secure !== isSSL;
	        }
	        /**
	         * XHR supports binary
	         */
	        const forceBase64 = opts && opts.forceBase64;
	        this.supportsBinary = hasXHR2 && !forceBase64;
	    }
	    /**
	     * Creates a request.
	     *
	     * @param {String} method
	     * @api private
	     */
	    request(opts = {}) {
	        Object.assign(opts, { xd: this.xd, xs: this.xs }, this.opts);
	        return new Request(this.uri(), opts);
	    }
	    /**
	     * Sends data.
	     *
	     * @param {String} data to send.
	     * @param {Function} called upon flush.
	     * @api private
	     */
	    doWrite(data, fn) {
	        const req = this.request({
	            method: "POST",
	            data: data
	        });
	        req.on("success", fn);
	        req.on("error", err => {
	            this.onError("xhr post error", err);
	        });
	    }
	    /**
	     * Starts a poll cycle.
	     *
	     * @api private
	     */
	    doPoll() {
	        debug$D("xhr poll");
	        const req = this.request();
	        req.on("data", this.onData.bind(this));
	        req.on("error", err => {
	            this.onError("xhr poll error", err);
	        });
	        this.pollXhr = req;
	    }
	}
	pollingXhr.XHR = XHR;
	class Request extends component_emitter_1$3.Emitter {
	    /**
	     * Request constructor
	     *
	     * @param {Object} options
	     * @api public
	     */
	    constructor(uri, opts) {
	        super();
	        (0, util_js_1$2.installTimerFunctions)(this, opts);
	        this.opts = opts;
	        this.method = opts.method || "GET";
	        this.uri = uri;
	        this.async = false !== opts.async;
	        this.data = undefined !== opts.data ? opts.data : null;
	        this.create();
	    }
	    /**
	     * Creates the XHR object and sends the request.
	     *
	     * @api private
	     */
	    create() {
	        const opts = (0, util_js_1$2.pick)(this.opts, "agent", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "autoUnref");
	        opts.xdomain = !!this.opts.xd;
	        opts.xscheme = !!this.opts.xs;
	        const xhr = (this.xhr = new xmlhttprequest_js_1.default(opts));
	        try {
	            debug$D("xhr open %s: %s", this.method, this.uri);
	            xhr.open(this.method, this.uri, this.async);
	            try {
	                if (this.opts.extraHeaders) {
	                    xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
	                    for (let i in this.opts.extraHeaders) {
	                        if (this.opts.extraHeaders.hasOwnProperty(i)) {
	                            xhr.setRequestHeader(i, this.opts.extraHeaders[i]);
	                        }
	                    }
	                }
	            }
	            catch (e) { }
	            if ("POST" === this.method) {
	                try {
	                    xhr.setRequestHeader("Content-type", "text/plain;charset=UTF-8");
	                }
	                catch (e) { }
	            }
	            try {
	                xhr.setRequestHeader("Accept", "*/*");
	            }
	            catch (e) { }
	            // ie6 check
	            if ("withCredentials" in xhr) {
	                xhr.withCredentials = this.opts.withCredentials;
	            }
	            if (this.opts.requestTimeout) {
	                xhr.timeout = this.opts.requestTimeout;
	            }
	            xhr.onreadystatechange = () => {
	                if (4 !== xhr.readyState)
	                    return;
	                if (200 === xhr.status || 1223 === xhr.status) {
	                    this.onLoad();
	                }
	                else {
	                    // make sure the `error` event handler that's user-set
	                    // does not throw in the same tick and gets caught here
	                    this.setTimeoutFn(() => {
	                        this.onError(typeof xhr.status === "number" ? xhr.status : 0);
	                    }, 0);
	                }
	            };
	            debug$D("xhr data %s", this.data);
	            xhr.send(this.data);
	        }
	        catch (e) {
	            // Need to defer since .create() is called directly from the constructor
	            // and thus the 'error' event can only be only bound *after* this exception
	            // occurs.  Therefore, also, we cannot throw here at all.
	            this.setTimeoutFn(() => {
	                this.onError(e);
	            }, 0);
	            return;
	        }
	        if (typeof document !== "undefined") {
	            this.index = Request.requestsCount++;
	            Request.requests[this.index] = this;
	        }
	    }
	    /**
	     * Called upon successful response.
	     *
	     * @api private
	     */
	    onSuccess() {
	        this.emit("success");
	        this.cleanup();
	    }
	    /**
	     * Called if we have data.
	     *
	     * @api private
	     */
	    onData(data) {
	        this.emit("data", data);
	        this.onSuccess();
	    }
	    /**
	     * Called upon error.
	     *
	     * @api private
	     */
	    onError(err) {
	        this.emit("error", err);
	        this.cleanup(true);
	    }
	    /**
	     * Cleans up house.
	     *
	     * @api private
	     */
	    cleanup(fromError) {
	        if ("undefined" === typeof this.xhr || null === this.xhr) {
	            return;
	        }
	        this.xhr.onreadystatechange = empty;
	        if (fromError) {
	            try {
	                this.xhr.abort();
	            }
	            catch (e) { }
	        }
	        if (typeof document !== "undefined") {
	            delete Request.requests[this.index];
	        }
	        this.xhr = null;
	    }
	    /**
	     * Called upon load.
	     *
	     * @api private
	     */
	    onLoad() {
	        const data = this.xhr.responseText;
	        if (data !== null) {
	            this.onData(data);
	        }
	    }
	    /**
	     * Aborts the request.
	     *
	     * @api public
	     */
	    abort() {
	        this.cleanup();
	    }
	}
	pollingXhr.Request = Request;
	Request.requestsCount = 0;
	Request.requests = {};
	/**
	 * Aborts pending requests when unloading the window. This is needed to prevent
	 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
	 * emitted.
	 */
	if (typeof document !== "undefined") {
	    // @ts-ignore
	    if (typeof attachEvent === "function") {
	        // @ts-ignore
	        attachEvent("onunload", unloadHandler);
	    }
	    else if (typeof addEventListener === "function") {
	        const terminationEvent = "onpagehide" in globalThis_js_1$1.default ? "pagehide" : "unload";
	        addEventListener(terminationEvent, unloadHandler, false);
	    }
	}
	function unloadHandler() {
	    for (let i in Request.requests) {
	        if (Request.requests.hasOwnProperty(i)) {
	            Request.requests[i].abort();
	        }
	    }
	}

	var websocket = {};

	var websocketConstructor_browser = {};

	var __importDefault$7 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(websocketConstructor_browser, "__esModule", { value: true });
	websocketConstructor_browser.defaultBinaryType = websocketConstructor_browser.usingBrowserWebSocket = websocketConstructor_browser.WebSocket = websocketConstructor_browser.nextTick = void 0;
	const globalThis_js_1 = __importDefault$7(globalThis_browser);
	websocketConstructor_browser.nextTick = (() => {
	    const isPromiseAvailable = typeof Promise === "function" && typeof Promise.resolve === "function";
	    if (isPromiseAvailable) {
	        return cb => Promise.resolve().then(cb);
	    }
	    else {
	        return (cb, setTimeoutFn) => setTimeoutFn(cb, 0);
	    }
	})();
	websocketConstructor_browser.WebSocket = globalThis_js_1.default.WebSocket || globalThis_js_1.default.MozWebSocket;
	websocketConstructor_browser.usingBrowserWebSocket = true;
	websocketConstructor_browser.defaultBinaryType = "arraybuffer";

	var __importDefault$6 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(websocket, "__esModule", { value: true });
	websocket.WS = void 0;
	const transport_js_1 = transport$1;
	const parseqs_1$1 = __importDefault$6(parseqs);
	const yeast_1 = __importDefault$6(yeast_1$2);
	const util_js_1$1 = util$1;
	const websocket_constructor_js_1 = websocketConstructor_browser;
	const debug_1$3 = __importDefault$6(browser$a.exports); // debug()
	const engine_io_parser_1$1 = cjs$1;
	const debug$C = (0, debug_1$3.default)("engine.io-client:websocket"); // debug()
	// detect ReactNative environment
	const isReactNative = typeof navigator !== "undefined" &&
	    typeof navigator.product === "string" &&
	    navigator.product.toLowerCase() === "reactnative";
	class WS extends transport_js_1.Transport {
	    /**
	     * WebSocket transport constructor.
	     *
	     * @api {Object} connection options
	     * @api public
	     */
	    constructor(opts) {
	        super(opts);
	        this.supportsBinary = !opts.forceBase64;
	    }
	    /**
	     * Transport name.
	     *
	     * @api public
	     */
	    get name() {
	        return "websocket";
	    }
	    /**
	     * Opens socket.
	     *
	     * @api private
	     */
	    doOpen() {
	        if (!this.check()) {
	            // let probe timeout
	            return;
	        }
	        const uri = this.uri();
	        const protocols = this.opts.protocols;
	        // React Native only supports the 'headers' option, and will print a warning if anything else is passed
	        const opts = isReactNative
	            ? {}
	            : (0, util_js_1$1.pick)(this.opts, "agent", "perMessageDeflate", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "localAddress", "protocolVersion", "origin", "maxPayload", "family", "checkServerIdentity");
	        if (this.opts.extraHeaders) {
	            opts.headers = this.opts.extraHeaders;
	        }
	        try {
	            this.ws =
	                websocket_constructor_js_1.usingBrowserWebSocket && !isReactNative
	                    ? protocols
	                        ? new websocket_constructor_js_1.WebSocket(uri, protocols)
	                        : new websocket_constructor_js_1.WebSocket(uri)
	                    : new websocket_constructor_js_1.WebSocket(uri, protocols, opts);
	        }
	        catch (err) {
	            return this.emit("error", err);
	        }
	        this.ws.binaryType = this.socket.binaryType || websocket_constructor_js_1.defaultBinaryType;
	        this.addEventListeners();
	    }
	    /**
	     * Adds event listeners to the socket
	     *
	     * @api private
	     */
	    addEventListeners() {
	        this.ws.onopen = () => {
	            if (this.opts.autoUnref) {
	                this.ws._socket.unref();
	            }
	            this.onOpen();
	        };
	        this.ws.onclose = this.onClose.bind(this);
	        this.ws.onmessage = ev => this.onData(ev.data);
	        this.ws.onerror = e => this.onError("websocket error", e);
	    }
	    /**
	     * Writes data to socket.
	     *
	     * @param {Array} array of packets.
	     * @api private
	     */
	    write(packets) {
	        this.writable = false;
	        // encodePacket efficient as it uses WS framing
	        // no need for encodePayload
	        for (let i = 0; i < packets.length; i++) {
	            const packet = packets[i];
	            const lastPacket = i === packets.length - 1;
	            (0, engine_io_parser_1$1.encodePacket)(packet, this.supportsBinary, data => {
	                // always create a new object (GH-437)
	                const opts = {};
	                if (!websocket_constructor_js_1.usingBrowserWebSocket) {
	                    if (packet.options) {
	                        opts.compress = packet.options.compress;
	                    }
	                    if (this.opts.perMessageDeflate) {
	                        const len = "string" === typeof data ? Buffer$h.byteLength(data) : data.length;
	                        if (len < this.opts.perMessageDeflate.threshold) {
	                            opts.compress = false;
	                        }
	                    }
	                }
	                // Sometimes the websocket has already been closed but the browser didn't
	                // have a chance of informing us about it yet, in that case send will
	                // throw an error
	                try {
	                    if (websocket_constructor_js_1.usingBrowserWebSocket) {
	                        // TypeError is thrown when passing the second argument on Safari
	                        this.ws.send(data);
	                    }
	                    else {
	                        this.ws.send(data, opts);
	                    }
	                }
	                catch (e) {
	                    debug$C("websocket closed before onclose event");
	                }
	                if (lastPacket) {
	                    // fake drain
	                    // defer to next tick to allow Socket to clear writeBuffer
	                    (0, websocket_constructor_js_1.nextTick)(() => {
	                        this.writable = true;
	                        this.emit("drain");
	                    }, this.setTimeoutFn);
	                }
	            });
	        }
	    }
	    /**
	     * Closes socket.
	     *
	     * @api private
	     */
	    doClose() {
	        if (typeof this.ws !== "undefined") {
	            this.ws.close();
	            this.ws = null;
	        }
	    }
	    /**
	     * Generates uri for connection.
	     *
	     * @api private
	     */
	    uri() {
	        let query = this.query || {};
	        const schema = this.opts.secure ? "wss" : "ws";
	        let port = "";
	        // avoid port if default for schema
	        if (this.opts.port &&
	            (("wss" === schema && Number(this.opts.port) !== 443) ||
	                ("ws" === schema && Number(this.opts.port) !== 80))) {
	            port = ":" + this.opts.port;
	        }
	        // append timestamp to URI
	        if (this.opts.timestampRequests) {
	            query[this.opts.timestampParam] = (0, yeast_1.default)();
	        }
	        // communicate binary support capabilities
	        if (!this.supportsBinary) {
	            query.b64 = 1;
	        }
	        const encodedQuery = parseqs_1$1.default.encode(query);
	        const ipv6 = this.opts.hostname.indexOf(":") !== -1;
	        return (schema +
	            "://" +
	            (ipv6 ? "[" + this.opts.hostname + "]" : this.opts.hostname) +
	            port +
	            this.opts.path +
	            (encodedQuery.length ? "?" + encodedQuery : ""));
	    }
	    /**
	     * Feature detection for WebSocket.
	     *
	     * @return {Boolean} whether this transport is available.
	     * @api public
	     */
	    check() {
	        return (!!websocket_constructor_js_1.WebSocket &&
	            !("__initialize" in websocket_constructor_js_1.WebSocket && this.name === WS.prototype.name));
	    }
	}
	websocket.WS = WS;

	Object.defineProperty(transports, "__esModule", { value: true });
	transports.transports = void 0;
	const polling_xhr_js_1 = pollingXhr;
	const websocket_js_1 = websocket;
	transports.transports = {
	    websocket: websocket_js_1.WS,
	    polling: polling_xhr_js_1.XHR
	};

	var __importDefault$5 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(socket$1, "__esModule", { value: true });
	socket$1.Socket = void 0;
	const index_js_1 = transports;
	const util_js_1 = util$1;
	const parseqs_1 = __importDefault$5(parseqs);
	const parseuri_1 = __importDefault$5(parseuri);
	const debug_1$2 = __importDefault$5(browser$a.exports); // debug()
	const component_emitter_1$2 = componentEmitter;
	const engine_io_parser_1 = cjs$1;
	const debug$B = (0, debug_1$2.default)("engine.io-client:socket"); // debug()
	class Socket$1 extends component_emitter_1$2.Emitter {
	    /**
	     * Socket constructor.
	     *
	     * @param {String|Object} uri or options
	     * @param {Object} opts - options
	     * @api public
	     */
	    constructor(uri, opts = {}) {
	        super();
	        if (uri && "object" === typeof uri) {
	            opts = uri;
	            uri = null;
	        }
	        if (uri) {
	            uri = (0, parseuri_1.default)(uri);
	            opts.hostname = uri.host;
	            opts.secure = uri.protocol === "https" || uri.protocol === "wss";
	            opts.port = uri.port;
	            if (uri.query)
	                opts.query = uri.query;
	        }
	        else if (opts.host) {
	            opts.hostname = (0, parseuri_1.default)(opts.host).host;
	        }
	        (0, util_js_1.installTimerFunctions)(this, opts);
	        this.secure =
	            null != opts.secure
	                ? opts.secure
	                : typeof location !== "undefined" && "https:" === location.protocol;
	        if (opts.hostname && !opts.port) {
	            // if no port is specified manually, use the protocol default
	            opts.port = this.secure ? "443" : "80";
	        }
	        this.hostname =
	            opts.hostname ||
	                (typeof location !== "undefined" ? location.hostname : "localhost");
	        this.port =
	            opts.port ||
	                (typeof location !== "undefined" && location.port
	                    ? location.port
	                    : this.secure
	                        ? "443"
	                        : "80");
	        this.transports = opts.transports || ["polling", "websocket"];
	        this.readyState = "";
	        this.writeBuffer = [];
	        this.prevBufferLen = 0;
	        this.opts = Object.assign({
	            path: "/engine.io",
	            agent: false,
	            withCredentials: false,
	            upgrade: true,
	            timestampParam: "t",
	            rememberUpgrade: false,
	            rejectUnauthorized: true,
	            perMessageDeflate: {
	                threshold: 1024
	            },
	            transportOptions: {},
	            closeOnBeforeunload: true
	        }, opts);
	        this.opts.path = this.opts.path.replace(/\/$/, "") + "/";
	        if (typeof this.opts.query === "string") {
	            this.opts.query = parseqs_1.default.decode(this.opts.query);
	        }
	        // set on handshake
	        this.id = null;
	        this.upgrades = null;
	        this.pingInterval = null;
	        this.pingTimeout = null;
	        // set on heartbeat
	        this.pingTimeoutTimer = null;
	        if (typeof addEventListener === "function") {
	            if (this.opts.closeOnBeforeunload) {
	                // Firefox closes the connection when the "beforeunload" event is emitted but not Chrome. This event listener
	                // ensures every browser behaves the same (no "disconnect" event at the Socket.IO level when the page is
	                // closed/reloaded)
	                addEventListener("beforeunload", () => {
	                    if (this.transport) {
	                        // silently close the transport
	                        this.transport.removeAllListeners();
	                        this.transport.close();
	                    }
	                }, false);
	            }
	            if (this.hostname !== "localhost") {
	                this.offlineEventListener = () => {
	                    this.onClose("transport close");
	                };
	                addEventListener("offline", this.offlineEventListener, false);
	            }
	        }
	        this.open();
	    }
	    /**
	     * Creates transport of the given type.
	     *
	     * @param {String} transport name
	     * @return {Transport}
	     * @api private
	     */
	    createTransport(name) {
	        debug$B('creating transport "%s"', name);
	        const query = clone(this.opts.query);
	        // append engine.io protocol identifier
	        query.EIO = engine_io_parser_1.protocol;
	        // transport name
	        query.transport = name;
	        // session id if we already have one
	        if (this.id)
	            query.sid = this.id;
	        const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {
	            query,
	            socket: this,
	            hostname: this.hostname,
	            secure: this.secure,
	            port: this.port
	        });
	        debug$B("options: %j", opts);
	        return new index_js_1.transports[name](opts);
	    }
	    /**
	     * Initializes transport to use and starts probe.
	     *
	     * @api private
	     */
	    open() {
	        let transport;
	        if (this.opts.rememberUpgrade &&
	            Socket$1.priorWebsocketSuccess &&
	            this.transports.indexOf("websocket") !== -1) {
	            transport = "websocket";
	        }
	        else if (0 === this.transports.length) {
	            // Emit error on next tick so it can be listened to
	            this.setTimeoutFn(() => {
	                this.emitReserved("error", "No transports available");
	            }, 0);
	            return;
	        }
	        else {
	            transport = this.transports[0];
	        }
	        this.readyState = "opening";
	        // Retry with the next transport if the transport is disabled (jsonp: false)
	        try {
	            transport = this.createTransport(transport);
	        }
	        catch (e) {
	            debug$B("error while creating transport: %s", e);
	            this.transports.shift();
	            this.open();
	            return;
	        }
	        transport.open();
	        this.setTransport(transport);
	    }
	    /**
	     * Sets the current transport. Disables the existing one (if any).
	     *
	     * @api private
	     */
	    setTransport(transport) {
	        debug$B("setting transport %s", transport.name);
	        if (this.transport) {
	            debug$B("clearing existing transport %s", this.transport.name);
	            this.transport.removeAllListeners();
	        }
	        // set up transport
	        this.transport = transport;
	        // set up transport listeners
	        transport
	            .on("drain", this.onDrain.bind(this))
	            .on("packet", this.onPacket.bind(this))
	            .on("error", this.onError.bind(this))
	            .on("close", () => {
	            this.onClose("transport close");
	        });
	    }
	    /**
	     * Probes a transport.
	     *
	     * @param {String} transport name
	     * @api private
	     */
	    probe(name) {
	        debug$B('probing transport "%s"', name);
	        let transport = this.createTransport(name);
	        let failed = false;
	        Socket$1.priorWebsocketSuccess = false;
	        const onTransportOpen = () => {
	            if (failed)
	                return;
	            debug$B('probe transport "%s" opened', name);
	            transport.send([{ type: "ping", data: "probe" }]);
	            transport.once("packet", msg => {
	                if (failed)
	                    return;
	                if ("pong" === msg.type && "probe" === msg.data) {
	                    debug$B('probe transport "%s" pong', name);
	                    this.upgrading = true;
	                    this.emitReserved("upgrading", transport);
	                    if (!transport)
	                        return;
	                    Socket$1.priorWebsocketSuccess = "websocket" === transport.name;
	                    debug$B('pausing current transport "%s"', this.transport.name);
	                    this.transport.pause(() => {
	                        if (failed)
	                            return;
	                        if ("closed" === this.readyState)
	                            return;
	                        debug$B("changing transport and sending upgrade packet");
	                        cleanup();
	                        this.setTransport(transport);
	                        transport.send([{ type: "upgrade" }]);
	                        this.emitReserved("upgrade", transport);
	                        transport = null;
	                        this.upgrading = false;
	                        this.flush();
	                    });
	                }
	                else {
	                    debug$B('probe transport "%s" failed', name);
	                    const err = new Error("probe error");
	                    // @ts-ignore
	                    err.transport = transport.name;
	                    this.emitReserved("upgradeError", err);
	                }
	            });
	        };
	        function freezeTransport() {
	            if (failed)
	                return;
	            // Any callback called by transport should be ignored since now
	            failed = true;
	            cleanup();
	            transport.close();
	            transport = null;
	        }
	        // Handle any error that happens while probing
	        const onerror = err => {
	            const error = new Error("probe error: " + err);
	            // @ts-ignore
	            error.transport = transport.name;
	            freezeTransport();
	            debug$B('probe transport "%s" failed because of error: %s', name, err);
	            this.emitReserved("upgradeError", error);
	        };
	        function onTransportClose() {
	            onerror("transport closed");
	        }
	        // When the socket is closed while we're probing
	        function onclose() {
	            onerror("socket closed");
	        }
	        // When the socket is upgraded while we're probing
	        function onupgrade(to) {
	            if (transport && to.name !== transport.name) {
	                debug$B('"%s" works - aborting "%s"', to.name, transport.name);
	                freezeTransport();
	            }
	        }
	        // Remove all listeners on the transport and on self
	        const cleanup = () => {
	            transport.removeListener("open", onTransportOpen);
	            transport.removeListener("error", onerror);
	            transport.removeListener("close", onTransportClose);
	            this.off("close", onclose);
	            this.off("upgrading", onupgrade);
	        };
	        transport.once("open", onTransportOpen);
	        transport.once("error", onerror);
	        transport.once("close", onTransportClose);
	        this.once("close", onclose);
	        this.once("upgrading", onupgrade);
	        transport.open();
	    }
	    /**
	     * Called when connection is deemed open.
	     *
	     * @api private
	     */
	    onOpen() {
	        debug$B("socket open");
	        this.readyState = "open";
	        Socket$1.priorWebsocketSuccess = "websocket" === this.transport.name;
	        this.emitReserved("open");
	        this.flush();
	        // we check for `readyState` in case an `open`
	        // listener already closed the socket
	        if ("open" === this.readyState &&
	            this.opts.upgrade &&
	            this.transport.pause) {
	            debug$B("starting upgrade probes");
	            let i = 0;
	            const l = this.upgrades.length;
	            for (; i < l; i++) {
	                this.probe(this.upgrades[i]);
	            }
	        }
	    }
	    /**
	     * Handles a packet.
	     *
	     * @api private
	     */
	    onPacket(packet) {
	        if ("opening" === this.readyState ||
	            "open" === this.readyState ||
	            "closing" === this.readyState) {
	            debug$B('socket receive: type "%s", data "%s"', packet.type, packet.data);
	            this.emitReserved("packet", packet);
	            // Socket is live - any packet counts
	            this.emitReserved("heartbeat");
	            switch (packet.type) {
	                case "open":
	                    this.onHandshake(JSON.parse(packet.data));
	                    break;
	                case "ping":
	                    this.resetPingTimeout();
	                    this.sendPacket("pong");
	                    this.emitReserved("ping");
	                    this.emitReserved("pong");
	                    break;
	                case "error":
	                    const err = new Error("server error");
	                    // @ts-ignore
	                    err.code = packet.data;
	                    this.onError(err);
	                    break;
	                case "message":
	                    this.emitReserved("data", packet.data);
	                    this.emitReserved("message", packet.data);
	                    break;
	            }
	        }
	        else {
	            debug$B('packet received with socket readyState "%s"', this.readyState);
	        }
	    }
	    /**
	     * Called upon handshake completion.
	     *
	     * @param {Object} data - handshake obj
	     * @api private
	     */
	    onHandshake(data) {
	        this.emitReserved("handshake", data);
	        this.id = data.sid;
	        this.transport.query.sid = data.sid;
	        this.upgrades = this.filterUpgrades(data.upgrades);
	        this.pingInterval = data.pingInterval;
	        this.pingTimeout = data.pingTimeout;
	        this.onOpen();
	        // In case open handler closes socket
	        if ("closed" === this.readyState)
	            return;
	        this.resetPingTimeout();
	    }
	    /**
	     * Sets and resets ping timeout timer based on server pings.
	     *
	     * @api private
	     */
	    resetPingTimeout() {
	        this.clearTimeoutFn(this.pingTimeoutTimer);
	        this.pingTimeoutTimer = this.setTimeoutFn(() => {
	            this.onClose("ping timeout");
	        }, this.pingInterval + this.pingTimeout);
	        if (this.opts.autoUnref) {
	            this.pingTimeoutTimer.unref();
	        }
	    }
	    /**
	     * Called on `drain` event
	     *
	     * @api private
	     */
	    onDrain() {
	        this.writeBuffer.splice(0, this.prevBufferLen);
	        // setting prevBufferLen = 0 is very important
	        // for example, when upgrading, upgrade packet is sent over,
	        // and a nonzero prevBufferLen could cause problems on `drain`
	        this.prevBufferLen = 0;
	        if (0 === this.writeBuffer.length) {
	            this.emitReserved("drain");
	        }
	        else {
	            this.flush();
	        }
	    }
	    /**
	     * Flush write buffers.
	     *
	     * @api private
	     */
	    flush() {
	        if ("closed" !== this.readyState &&
	            this.transport.writable &&
	            !this.upgrading &&
	            this.writeBuffer.length) {
	            debug$B("flushing %d packets in socket", this.writeBuffer.length);
	            this.transport.send(this.writeBuffer);
	            // keep track of current length of writeBuffer
	            // splice writeBuffer and callbackBuffer on `drain`
	            this.prevBufferLen = this.writeBuffer.length;
	            this.emitReserved("flush");
	        }
	    }
	    /**
	     * Sends a message.
	     *
	     * @param {String} message.
	     * @param {Function} callback function.
	     * @param {Object} options.
	     * @return {Socket} for chaining.
	     * @api public
	     */
	    write(msg, options, fn) {
	        this.sendPacket("message", msg, options, fn);
	        return this;
	    }
	    send(msg, options, fn) {
	        this.sendPacket("message", msg, options, fn);
	        return this;
	    }
	    /**
	     * Sends a packet.
	     *
	     * @param {String} packet type.
	     * @param {String} data.
	     * @param {Object} options.
	     * @param {Function} callback function.
	     * @api private
	     */
	    sendPacket(type, data, options, fn) {
	        if ("function" === typeof data) {
	            fn = data;
	            data = undefined;
	        }
	        if ("function" === typeof options) {
	            fn = options;
	            options = null;
	        }
	        if ("closing" === this.readyState || "closed" === this.readyState) {
	            return;
	        }
	        options = options || {};
	        options.compress = false !== options.compress;
	        const packet = {
	            type: type,
	            data: data,
	            options: options
	        };
	        this.emitReserved("packetCreate", packet);
	        this.writeBuffer.push(packet);
	        if (fn)
	            this.once("flush", fn);
	        this.flush();
	    }
	    /**
	     * Closes the connection.
	     *
	     * @api public
	     */
	    close() {
	        const close = () => {
	            this.onClose("forced close");
	            debug$B("socket closing - telling transport to close");
	            this.transport.close();
	        };
	        const cleanupAndClose = () => {
	            this.off("upgrade", cleanupAndClose);
	            this.off("upgradeError", cleanupAndClose);
	            close();
	        };
	        const waitForUpgrade = () => {
	            // wait for upgrade to finish since we can't send packets while pausing a transport
	            this.once("upgrade", cleanupAndClose);
	            this.once("upgradeError", cleanupAndClose);
	        };
	        if ("opening" === this.readyState || "open" === this.readyState) {
	            this.readyState = "closing";
	            if (this.writeBuffer.length) {
	                this.once("drain", () => {
	                    if (this.upgrading) {
	                        waitForUpgrade();
	                    }
	                    else {
	                        close();
	                    }
	                });
	            }
	            else if (this.upgrading) {
	                waitForUpgrade();
	            }
	            else {
	                close();
	            }
	        }
	        return this;
	    }
	    /**
	     * Called upon transport error
	     *
	     * @api private
	     */
	    onError(err) {
	        debug$B("socket error %j", err);
	        Socket$1.priorWebsocketSuccess = false;
	        this.emitReserved("error", err);
	        this.onClose("transport error", err);
	    }
	    /**
	     * Called upon transport close.
	     *
	     * @api private
	     */
	    onClose(reason, desc) {
	        if ("opening" === this.readyState ||
	            "open" === this.readyState ||
	            "closing" === this.readyState) {
	            debug$B('socket close with reason: "%s"', reason);
	            // clear timers
	            this.clearTimeoutFn(this.pingTimeoutTimer);
	            // stop event from firing again for transport
	            this.transport.removeAllListeners("close");
	            // ensure transport won't stay open
	            this.transport.close();
	            // ignore further transport communication
	            this.transport.removeAllListeners();
	            if (typeof removeEventListener === "function") {
	                removeEventListener("offline", this.offlineEventListener, false);
	            }
	            // set ready state
	            this.readyState = "closed";
	            // clear session id
	            this.id = null;
	            // emit close event
	            this.emitReserved("close", reason, desc);
	            // clean buffers after, so users can still
	            // grab the buffers on `close` event
	            this.writeBuffer = [];
	            this.prevBufferLen = 0;
	        }
	    }
	    /**
	     * Filters upgrades, returning only those matching client transports.
	     *
	     * @param {Array} server upgrades
	     * @api private
	     *
	     */
	    filterUpgrades(upgrades) {
	        const filteredUpgrades = [];
	        let i = 0;
	        const j = upgrades.length;
	        for (; i < j; i++) {
	            if (~this.transports.indexOf(upgrades[i]))
	                filteredUpgrades.push(upgrades[i]);
	        }
	        return filteredUpgrades;
	    }
	}
	socket$1.Socket = Socket$1;
	Socket$1.protocol = engine_io_parser_1.protocol;
	function clone(obj) {
	    const o = {};
	    for (let i in obj) {
	        if (obj.hasOwnProperty(i)) {
	            o[i] = obj[i];
	        }
	    }
	    return o;
	}

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.installTimerFunctions = exports.transports = exports.Transport = exports.protocol = exports.Socket = void 0;
	const socket_js_1 = socket$1;
	Object.defineProperty(exports, "Socket", { enumerable: true, get: function () { return socket_js_1.Socket; } });
	exports.protocol = socket_js_1.Socket.protocol;
	var transport_js_1 = transport$1;
	Object.defineProperty(exports, "Transport", { enumerable: true, get: function () { return transport_js_1.Transport; } });
	var index_js_1 = transports;
	Object.defineProperty(exports, "transports", { enumerable: true, get: function () { return index_js_1.transports; } });
	var util_js_1 = util$1;
	Object.defineProperty(exports, "installTimerFunctions", { enumerable: true, get: function () { return util_js_1.installTimerFunctions; } });
	}(cjs$2));

	var socket = {};

	var cjs = {};

	var binary$1 = {};

	var isBinary$1 = {};

	Object.defineProperty(isBinary$1, "__esModule", { value: true });
	isBinary$1.hasBinary = isBinary$1.isBinary = void 0;
	const withNativeArrayBuffer = typeof ArrayBuffer === "function";
	const isView = (obj) => {
	    return typeof ArrayBuffer.isView === "function"
	        ? ArrayBuffer.isView(obj)
	        : obj.buffer instanceof ArrayBuffer;
	};
	const toString$1 = Object.prototype.toString;
	const withNativeBlob = typeof Blob === "function" ||
	    (typeof Blob !== "undefined" &&
	        toString$1.call(Blob) === "[object BlobConstructor]");
	const withNativeFile = typeof File === "function" ||
	    (typeof File !== "undefined" &&
	        toString$1.call(File) === "[object FileConstructor]");
	/**
	 * Returns true if obj is a Buffer, an ArrayBuffer, a Blob or a File.
	 *
	 * @private
	 */
	function isBinary(obj) {
	    return ((withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj))) ||
	        (withNativeBlob && obj instanceof Blob) ||
	        (withNativeFile && obj instanceof File));
	}
	isBinary$1.isBinary = isBinary;
	function hasBinary(obj, toJSON) {
	    if (!obj || typeof obj !== "object") {
	        return false;
	    }
	    if (Array.isArray(obj)) {
	        for (let i = 0, l = obj.length; i < l; i++) {
	            if (hasBinary(obj[i])) {
	                return true;
	            }
	        }
	        return false;
	    }
	    if (isBinary(obj)) {
	        return true;
	    }
	    if (obj.toJSON &&
	        typeof obj.toJSON === "function" &&
	        arguments.length === 1) {
	        return hasBinary(obj.toJSON(), true);
	    }
	    for (const key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
	            return true;
	        }
	    }
	    return false;
	}
	isBinary$1.hasBinary = hasBinary;

	Object.defineProperty(binary$1, "__esModule", { value: true });
	binary$1.reconstructPacket = binary$1.deconstructPacket = void 0;
	const is_binary_js_1 = isBinary$1;
	/**
	 * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.
	 *
	 * @param {Object} packet - socket.io event packet
	 * @return {Object} with deconstructed packet and list of buffers
	 * @public
	 */
	function deconstructPacket(packet) {
	    const buffers = [];
	    const packetData = packet.data;
	    const pack = packet;
	    pack.data = _deconstructPacket(packetData, buffers);
	    pack.attachments = buffers.length; // number of binary 'attachments'
	    return { packet: pack, buffers: buffers };
	}
	binary$1.deconstructPacket = deconstructPacket;
	function _deconstructPacket(data, buffers) {
	    if (!data)
	        return data;
	    if (is_binary_js_1.isBinary(data)) {
	        const placeholder = { _placeholder: true, num: buffers.length };
	        buffers.push(data);
	        return placeholder;
	    }
	    else if (Array.isArray(data)) {
	        const newData = new Array(data.length);
	        for (let i = 0; i < data.length; i++) {
	            newData[i] = _deconstructPacket(data[i], buffers);
	        }
	        return newData;
	    }
	    else if (typeof data === "object" && !(data instanceof Date)) {
	        const newData = {};
	        for (const key in data) {
	            if (Object.prototype.hasOwnProperty.call(data, key)) {
	                newData[key] = _deconstructPacket(data[key], buffers);
	            }
	        }
	        return newData;
	    }
	    return data;
	}
	/**
	 * Reconstructs a binary packet from its placeholder packet and buffers
	 *
	 * @param {Object} packet - event packet with placeholders
	 * @param {Array} buffers - binary buffers to put in placeholder positions
	 * @return {Object} reconstructed packet
	 * @public
	 */
	function reconstructPacket(packet, buffers) {
	    packet.data = _reconstructPacket(packet.data, buffers);
	    packet.attachments = undefined; // no longer useful
	    return packet;
	}
	binary$1.reconstructPacket = reconstructPacket;
	function _reconstructPacket(data, buffers) {
	    if (!data)
	        return data;
	    if (data && data._placeholder) {
	        return buffers[data.num]; // appropriate buffer (should be natural order anyway)
	    }
	    else if (Array.isArray(data)) {
	        for (let i = 0; i < data.length; i++) {
	            data[i] = _reconstructPacket(data[i], buffers);
	        }
	    }
	    else if (typeof data === "object") {
	        for (const key in data) {
	            if (Object.prototype.hasOwnProperty.call(data, key)) {
	                data[key] = _reconstructPacket(data[key], buffers);
	            }
	        }
	    }
	    return data;
	}

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Decoder = exports.Encoder = exports.PacketType = exports.protocol = void 0;
	const component_emitter_1 = componentEmitter;
	const binary_js_1 = binary$1;
	const is_binary_js_1 = isBinary$1;
	const debug_1 = browser$a.exports; // debug()
	const debug = debug_1.default("socket.io-parser"); // debug()
	/**
	 * Protocol version.
	 *
	 * @public
	 */
	exports.protocol = 5;
	var PacketType;
	(function (PacketType) {
	    PacketType[PacketType["CONNECT"] = 0] = "CONNECT";
	    PacketType[PacketType["DISCONNECT"] = 1] = "DISCONNECT";
	    PacketType[PacketType["EVENT"] = 2] = "EVENT";
	    PacketType[PacketType["ACK"] = 3] = "ACK";
	    PacketType[PacketType["CONNECT_ERROR"] = 4] = "CONNECT_ERROR";
	    PacketType[PacketType["BINARY_EVENT"] = 5] = "BINARY_EVENT";
	    PacketType[PacketType["BINARY_ACK"] = 6] = "BINARY_ACK";
	})(PacketType = exports.PacketType || (exports.PacketType = {}));
	/**
	 * A socket.io Encoder instance
	 */
	class Encoder {
	    /**
	     * Encode a packet as a single string if non-binary, or as a
	     * buffer sequence, depending on packet type.
	     *
	     * @param {Object} obj - packet object
	     */
	    encode(obj) {
	        debug("encoding packet %j", obj);
	        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {
	            if (is_binary_js_1.hasBinary(obj)) {
	                obj.type =
	                    obj.type === PacketType.EVENT
	                        ? PacketType.BINARY_EVENT
	                        : PacketType.BINARY_ACK;
	                return this.encodeAsBinary(obj);
	            }
	        }
	        return [this.encodeAsString(obj)];
	    }
	    /**
	     * Encode packet as string.
	     */
	    encodeAsString(obj) {
	        // first is type
	        let str = "" + obj.type;
	        // attachments if we have them
	        if (obj.type === PacketType.BINARY_EVENT ||
	            obj.type === PacketType.BINARY_ACK) {
	            str += obj.attachments + "-";
	        }
	        // if we have a namespace other than `/`
	        // we append it followed by a comma `,`
	        if (obj.nsp && "/" !== obj.nsp) {
	            str += obj.nsp + ",";
	        }
	        // immediately followed by the id
	        if (null != obj.id) {
	            str += obj.id;
	        }
	        // json data
	        if (null != obj.data) {
	            str += JSON.stringify(obj.data);
	        }
	        debug("encoded %j as %s", obj, str);
	        return str;
	    }
	    /**
	     * Encode packet as 'buffer sequence' by removing blobs, and
	     * deconstructing packet into object with placeholders and
	     * a list of buffers.
	     */
	    encodeAsBinary(obj) {
	        const deconstruction = binary_js_1.deconstructPacket(obj);
	        const pack = this.encodeAsString(deconstruction.packet);
	        const buffers = deconstruction.buffers;
	        buffers.unshift(pack); // add packet info to beginning of data list
	        return buffers; // write all the buffers
	    }
	}
	exports.Encoder = Encoder;
	/**
	 * A socket.io Decoder instance
	 *
	 * @return {Object} decoder
	 */
	class Decoder extends component_emitter_1.Emitter {
	    constructor() {
	        super();
	    }
	    /**
	     * Decodes an encoded packet string into packet JSON.
	     *
	     * @param {String} obj - encoded packet
	     */
	    add(obj) {
	        let packet;
	        if (typeof obj === "string") {
	            packet = this.decodeString(obj);
	            if (packet.type === PacketType.BINARY_EVENT ||
	                packet.type === PacketType.BINARY_ACK) {
	                // binary packet's json
	                this.reconstructor = new BinaryReconstructor(packet);
	                // no attachments, labeled binary but no binary data to follow
	                if (packet.attachments === 0) {
	                    super.emitReserved("decoded", packet);
	                }
	            }
	            else {
	                // non-binary full packet
	                super.emitReserved("decoded", packet);
	            }
	        }
	        else if (is_binary_js_1.isBinary(obj) || obj.base64) {
	            // raw binary data
	            if (!this.reconstructor) {
	                throw new Error("got binary data when not reconstructing a packet");
	            }
	            else {
	                packet = this.reconstructor.takeBinaryData(obj);
	                if (packet) {
	                    // received final buffer
	                    this.reconstructor = null;
	                    super.emitReserved("decoded", packet);
	                }
	            }
	        }
	        else {
	            throw new Error("Unknown type: " + obj);
	        }
	    }
	    /**
	     * Decode a packet String (JSON data)
	     *
	     * @param {String} str
	     * @return {Object} packet
	     */
	    decodeString(str) {
	        let i = 0;
	        // look up type
	        const p = {
	            type: Number(str.charAt(0)),
	        };
	        if (PacketType[p.type] === undefined) {
	            throw new Error("unknown packet type " + p.type);
	        }
	        // look up attachments if type binary
	        if (p.type === PacketType.BINARY_EVENT ||
	            p.type === PacketType.BINARY_ACK) {
	            const start = i + 1;
	            while (str.charAt(++i) !== "-" && i != str.length) { }
	            const buf = str.substring(start, i);
	            if (buf != Number(buf) || str.charAt(i) !== "-") {
	                throw new Error("Illegal attachments");
	            }
	            p.attachments = Number(buf);
	        }
	        // look up namespace (if any)
	        if ("/" === str.charAt(i + 1)) {
	            const start = i + 1;
	            while (++i) {
	                const c = str.charAt(i);
	                if ("," === c)
	                    break;
	                if (i === str.length)
	                    break;
	            }
	            p.nsp = str.substring(start, i);
	        }
	        else {
	            p.nsp = "/";
	        }
	        // look up id
	        const next = str.charAt(i + 1);
	        if ("" !== next && Number(next) == next) {
	            const start = i + 1;
	            while (++i) {
	                const c = str.charAt(i);
	                if (null == c || Number(c) != c) {
	                    --i;
	                    break;
	                }
	                if (i === str.length)
	                    break;
	            }
	            p.id = Number(str.substring(start, i + 1));
	        }
	        // look up json data
	        if (str.charAt(++i)) {
	            const payload = tryParse(str.substr(i));
	            if (Decoder.isPayloadValid(p.type, payload)) {
	                p.data = payload;
	            }
	            else {
	                throw new Error("invalid payload");
	            }
	        }
	        debug("decoded %s as %j", str, p);
	        return p;
	    }
	    static isPayloadValid(type, payload) {
	        switch (type) {
	            case PacketType.CONNECT:
	                return typeof payload === "object";
	            case PacketType.DISCONNECT:
	                return payload === undefined;
	            case PacketType.CONNECT_ERROR:
	                return typeof payload === "string" || typeof payload === "object";
	            case PacketType.EVENT:
	            case PacketType.BINARY_EVENT:
	                return Array.isArray(payload) && payload.length > 0;
	            case PacketType.ACK:
	            case PacketType.BINARY_ACK:
	                return Array.isArray(payload);
	        }
	    }
	    /**
	     * Deallocates a parser's resources
	     */
	    destroy() {
	        if (this.reconstructor) {
	            this.reconstructor.finishedReconstruction();
	        }
	    }
	}
	exports.Decoder = Decoder;
	function tryParse(str) {
	    try {
	        return JSON.parse(str);
	    }
	    catch (e) {
	        return false;
	    }
	}
	/**
	 * A manager of a binary event's 'buffer sequence'. Should
	 * be constructed whenever a packet of type BINARY_EVENT is
	 * decoded.
	 *
	 * @param {Object} packet
	 * @return {BinaryReconstructor} initialized reconstructor
	 */
	class BinaryReconstructor {
	    constructor(packet) {
	        this.packet = packet;
	        this.buffers = [];
	        this.reconPack = packet;
	    }
	    /**
	     * Method to be called when binary data received from connection
	     * after a BINARY_EVENT packet.
	     *
	     * @param {Buffer | ArrayBuffer} binData - the raw binary data received
	     * @return {null | Object} returns null if more binary data is expected or
	     *   a reconstructed packet object if all buffers have been received.
	     */
	    takeBinaryData(binData) {
	        this.buffers.push(binData);
	        if (this.buffers.length === this.reconPack.attachments) {
	            // done with buffer list
	            const packet = binary_js_1.reconstructPacket(this.reconPack, this.buffers);
	            this.finishedReconstruction();
	            return packet;
	        }
	        return null;
	    }
	    /**
	     * Cleans up binary packet reconstruction variables.
	     */
	    finishedReconstruction() {
	        this.reconPack = null;
	        this.buffers = [];
	    }
	}
	}(cjs));

	var on$1 = {};

	Object.defineProperty(on$1, "__esModule", { value: true });
	on$1.on = void 0;
	function on(obj, ev, fn) {
	    obj.on(ev, fn);
	    return function subDestroy() {
	        obj.off(ev, fn);
	    };
	}
	on$1.on = on;

	var __importDefault$4 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(socket, "__esModule", { value: true });
	socket.Socket = void 0;
	const socket_io_parser_1 = cjs;
	const on_js_1$1 = on$1;
	const component_emitter_1$1 = componentEmitter;
	const debug_1$1 = __importDefault$4(browser$a.exports); // debug()
	const debug$A = debug_1$1.default("socket.io-client:socket"); // debug()
	/**
	 * Internal events.
	 * These events can't be emitted by the user.
	 */
	const RESERVED_EVENTS = Object.freeze({
	    connect: 1,
	    connect_error: 1,
	    disconnect: 1,
	    disconnecting: 1,
	    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener
	    newListener: 1,
	    removeListener: 1,
	});
	class Socket extends component_emitter_1$1.Emitter {
	    /**
	     * `Socket` constructor.
	     *
	     * @public
	     */
	    constructor(io, nsp, opts) {
	        super();
	        this.connected = false;
	        this.disconnected = true;
	        this.receiveBuffer = [];
	        this.sendBuffer = [];
	        this.ids = 0;
	        this.acks = {};
	        this.flags = {};
	        this.io = io;
	        this.nsp = nsp;
	        if (opts && opts.auth) {
	            this.auth = opts.auth;
	        }
	        if (this.io._autoConnect)
	            this.open();
	    }
	    /**
	     * Subscribe to open, close and packet events
	     *
	     * @private
	     */
	    subEvents() {
	        if (this.subs)
	            return;
	        const io = this.io;
	        this.subs = [
	            on_js_1$1.on(io, "open", this.onopen.bind(this)),
	            on_js_1$1.on(io, "packet", this.onpacket.bind(this)),
	            on_js_1$1.on(io, "error", this.onerror.bind(this)),
	            on_js_1$1.on(io, "close", this.onclose.bind(this)),
	        ];
	    }
	    /**
	     * Whether the Socket will try to reconnect when its Manager connects or reconnects
	     */
	    get active() {
	        return !!this.subs;
	    }
	    /**
	     * "Opens" the socket.
	     *
	     * @public
	     */
	    connect() {
	        if (this.connected)
	            return this;
	        this.subEvents();
	        if (!this.io["_reconnecting"])
	            this.io.open(); // ensure open
	        if ("open" === this.io._readyState)
	            this.onopen();
	        return this;
	    }
	    /**
	     * Alias for connect()
	     */
	    open() {
	        return this.connect();
	    }
	    /**
	     * Sends a `message` event.
	     *
	     * @return self
	     * @public
	     */
	    send(...args) {
	        args.unshift("message");
	        this.emit.apply(this, args);
	        return this;
	    }
	    /**
	     * Override `emit`.
	     * If the event is in `events`, it's emitted normally.
	     *
	     * @return self
	     * @public
	     */
	    emit(ev, ...args) {
	        if (RESERVED_EVENTS.hasOwnProperty(ev)) {
	            throw new Error('"' + ev + '" is a reserved event name');
	        }
	        args.unshift(ev);
	        const packet = {
	            type: socket_io_parser_1.PacketType.EVENT,
	            data: args,
	        };
	        packet.options = {};
	        packet.options.compress = this.flags.compress !== false;
	        // event ack callback
	        if ("function" === typeof args[args.length - 1]) {
	            const id = this.ids++;
	            debug$A("emitting packet with ack id %d", id);
	            const ack = args.pop();
	            this._registerAckCallback(id, ack);
	            packet.id = id;
	        }
	        const isTransportWritable = this.io.engine &&
	            this.io.engine.transport &&
	            this.io.engine.transport.writable;
	        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);
	        if (discardPacket) {
	            debug$A("discard packet as the transport is not currently writable");
	        }
	        else if (this.connected) {
	            this.packet(packet);
	        }
	        else {
	            this.sendBuffer.push(packet);
	        }
	        this.flags = {};
	        return this;
	    }
	    /**
	     * @private
	     */
	    _registerAckCallback(id, ack) {
	        const timeout = this.flags.timeout;
	        if (timeout === undefined) {
	            this.acks[id] = ack;
	            return;
	        }
	        // @ts-ignore
	        const timer = this.io.setTimeoutFn(() => {
	            delete this.acks[id];
	            for (let i = 0; i < this.sendBuffer.length; i++) {
	                if (this.sendBuffer[i].id === id) {
	                    debug$A("removing packet with ack id %d from the buffer", id);
	                    this.sendBuffer.splice(i, 1);
	                }
	            }
	            debug$A("event with ack id %d has timed out after %d ms", id, timeout);
	            ack.call(this, new Error("operation has timed out"));
	        }, timeout);
	        this.acks[id] = (...args) => {
	            // @ts-ignore
	            this.io.clearTimeoutFn(timer);
	            ack.apply(this, [null, ...args]);
	        };
	    }
	    /**
	     * Sends a packet.
	     *
	     * @param packet
	     * @private
	     */
	    packet(packet) {
	        packet.nsp = this.nsp;
	        this.io._packet(packet);
	    }
	    /**
	     * Called upon engine `open`.
	     *
	     * @private
	     */
	    onopen() {
	        debug$A("transport is open - connecting");
	        if (typeof this.auth == "function") {
	            this.auth((data) => {
	                this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data });
	            });
	        }
	        else {
	            this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data: this.auth });
	        }
	    }
	    /**
	     * Called upon engine or manager `error`.
	     *
	     * @param err
	     * @private
	     */
	    onerror(err) {
	        if (!this.connected) {
	            this.emitReserved("connect_error", err);
	        }
	    }
	    /**
	     * Called upon engine `close`.
	     *
	     * @param reason
	     * @private
	     */
	    onclose(reason) {
	        debug$A("close (%s)", reason);
	        this.connected = false;
	        this.disconnected = true;
	        delete this.id;
	        this.emitReserved("disconnect", reason);
	    }
	    /**
	     * Called with socket packet.
	     *
	     * @param packet
	     * @private
	     */
	    onpacket(packet) {
	        const sameNamespace = packet.nsp === this.nsp;
	        if (!sameNamespace)
	            return;
	        switch (packet.type) {
	            case socket_io_parser_1.PacketType.CONNECT:
	                if (packet.data && packet.data.sid) {
	                    const id = packet.data.sid;
	                    this.onconnect(id);
	                }
	                else {
	                    this.emitReserved("connect_error", new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));
	                }
	                break;
	            case socket_io_parser_1.PacketType.EVENT:
	                this.onevent(packet);
	                break;
	            case socket_io_parser_1.PacketType.BINARY_EVENT:
	                this.onevent(packet);
	                break;
	            case socket_io_parser_1.PacketType.ACK:
	                this.onack(packet);
	                break;
	            case socket_io_parser_1.PacketType.BINARY_ACK:
	                this.onack(packet);
	                break;
	            case socket_io_parser_1.PacketType.DISCONNECT:
	                this.ondisconnect();
	                break;
	            case socket_io_parser_1.PacketType.CONNECT_ERROR:
	                this.destroy();
	                const err = new Error(packet.data.message);
	                // @ts-ignore
	                err.data = packet.data.data;
	                this.emitReserved("connect_error", err);
	                break;
	        }
	    }
	    /**
	     * Called upon a server event.
	     *
	     * @param packet
	     * @private
	     */
	    onevent(packet) {
	        const args = packet.data || [];
	        debug$A("emitting event %j", args);
	        if (null != packet.id) {
	            debug$A("attaching ack callback to event");
	            args.push(this.ack(packet.id));
	        }
	        if (this.connected) {
	            this.emitEvent(args);
	        }
	        else {
	            this.receiveBuffer.push(Object.freeze(args));
	        }
	    }
	    emitEvent(args) {
	        if (this._anyListeners && this._anyListeners.length) {
	            const listeners = this._anyListeners.slice();
	            for (const listener of listeners) {
	                listener.apply(this, args);
	            }
	        }
	        super.emit.apply(this, args);
	    }
	    /**
	     * Produces an ack callback to emit with an event.
	     *
	     * @private
	     */
	    ack(id) {
	        const self = this;
	        let sent = false;
	        return function (...args) {
	            // prevent double callbacks
	            if (sent)
	                return;
	            sent = true;
	            debug$A("sending ack %j", args);
	            self.packet({
	                type: socket_io_parser_1.PacketType.ACK,
	                id: id,
	                data: args,
	            });
	        };
	    }
	    /**
	     * Called upon a server acknowlegement.
	     *
	     * @param packet
	     * @private
	     */
	    onack(packet) {
	        const ack = this.acks[packet.id];
	        if ("function" === typeof ack) {
	            debug$A("calling ack %s with %j", packet.id, packet.data);
	            ack.apply(this, packet.data);
	            delete this.acks[packet.id];
	        }
	        else {
	            debug$A("bad ack %s", packet.id);
	        }
	    }
	    /**
	     * Called upon server connect.
	     *
	     * @private
	     */
	    onconnect(id) {
	        debug$A("socket connected with id %s", id);
	        this.id = id;
	        this.connected = true;
	        this.disconnected = false;
	        this.emitBuffered();
	        this.emitReserved("connect");
	    }
	    /**
	     * Emit buffered events (received and emitted).
	     *
	     * @private
	     */
	    emitBuffered() {
	        this.receiveBuffer.forEach((args) => this.emitEvent(args));
	        this.receiveBuffer = [];
	        this.sendBuffer.forEach((packet) => this.packet(packet));
	        this.sendBuffer = [];
	    }
	    /**
	     * Called upon server disconnect.
	     *
	     * @private
	     */
	    ondisconnect() {
	        debug$A("server disconnect (%s)", this.nsp);
	        this.destroy();
	        this.onclose("io server disconnect");
	    }
	    /**
	     * Called upon forced client/server side disconnections,
	     * this method ensures the manager stops tracking us and
	     * that reconnections don't get triggered for this.
	     *
	     * @private
	     */
	    destroy() {
	        if (this.subs) {
	            // clean subscriptions to avoid reconnections
	            this.subs.forEach((subDestroy) => subDestroy());
	            this.subs = undefined;
	        }
	        this.io["_destroy"](this);
	    }
	    /**
	     * Disconnects the socket manually.
	     *
	     * @return self
	     * @public
	     */
	    disconnect() {
	        if (this.connected) {
	            debug$A("performing disconnect (%s)", this.nsp);
	            this.packet({ type: socket_io_parser_1.PacketType.DISCONNECT });
	        }
	        // remove socket from pool
	        this.destroy();
	        if (this.connected) {
	            // fire events
	            this.onclose("io client disconnect");
	        }
	        return this;
	    }
	    /**
	     * Alias for disconnect()
	     *
	     * @return self
	     * @public
	     */
	    close() {
	        return this.disconnect();
	    }
	    /**
	     * Sets the compress flag.
	     *
	     * @param compress - if `true`, compresses the sending data
	     * @return self
	     * @public
	     */
	    compress(compress) {
	        this.flags.compress = compress;
	        return this;
	    }
	    /**
	     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not
	     * ready to send messages.
	     *
	     * @returns self
	     * @public
	     */
	    get volatile() {
	        this.flags.volatile = true;
	        return this;
	    }
	    /**
	     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the
	     * given number of milliseconds have elapsed without an acknowledgement from the server:
	     *
	     * ```
	     * socket.timeout(5000).emit("my-event", (err) => {
	     *   if (err) {
	     *     // the server did not acknowledge the event in the given delay
	     *   }
	     * });
	     * ```
	     *
	     * @returns self
	     * @public
	     */
	    timeout(timeout) {
	        this.flags.timeout = timeout;
	        return this;
	    }
	    /**
	     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
	     * callback.
	     *
	     * @param listener
	     * @public
	     */
	    onAny(listener) {
	        this._anyListeners = this._anyListeners || [];
	        this._anyListeners.push(listener);
	        return this;
	    }
	    /**
	     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
	     * callback. The listener is added to the beginning of the listeners array.
	     *
	     * @param listener
	     * @public
	     */
	    prependAny(listener) {
	        this._anyListeners = this._anyListeners || [];
	        this._anyListeners.unshift(listener);
	        return this;
	    }
	    /**
	     * Removes the listener that will be fired when any event is emitted.
	     *
	     * @param listener
	     * @public
	     */
	    offAny(listener) {
	        if (!this._anyListeners) {
	            return this;
	        }
	        if (listener) {
	            const listeners = this._anyListeners;
	            for (let i = 0; i < listeners.length; i++) {
	                if (listener === listeners[i]) {
	                    listeners.splice(i, 1);
	                    return this;
	                }
	            }
	        }
	        else {
	            this._anyListeners = [];
	        }
	        return this;
	    }
	    /**
	     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
	     * e.g. to remove listeners.
	     *
	     * @public
	     */
	    listenersAny() {
	        return this._anyListeners || [];
	    }
	}
	socket.Socket = Socket;

	/**
	 * Expose `Backoff`.
	 */

	var backo2 = Backoff;

	/**
	 * Initialize backoff timer with `opts`.
	 *
	 * - `min` initial timeout in milliseconds [100]
	 * - `max` max timeout [10000]
	 * - `jitter` [0]
	 * - `factor` [2]
	 *
	 * @param {Object} opts
	 * @api public
	 */

	function Backoff(opts) {
	  opts = opts || {};
	  this.ms = opts.min || 100;
	  this.max = opts.max || 10000;
	  this.factor = opts.factor || 2;
	  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
	  this.attempts = 0;
	}

	/**
	 * Return the backoff duration.
	 *
	 * @return {Number}
	 * @api public
	 */

	Backoff.prototype.duration = function(){
	  var ms = this.ms * Math.pow(this.factor, this.attempts++);
	  if (this.jitter) {
	    var rand =  Math.random();
	    var deviation = Math.floor(rand * this.jitter * ms);
	    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
	  }
	  return Math.min(ms, this.max) | 0;
	};

	/**
	 * Reset the number of attempts.
	 *
	 * @api public
	 */

	Backoff.prototype.reset = function(){
	  this.attempts = 0;
	};

	/**
	 * Set the minimum duration
	 *
	 * @api public
	 */

	Backoff.prototype.setMin = function(min){
	  this.ms = min;
	};

	/**
	 * Set the maximum duration
	 *
	 * @api public
	 */

	Backoff.prototype.setMax = function(max){
	  this.max = max;
	};

	/**
	 * Set the jitter
	 *
	 * @api public
	 */

	Backoff.prototype.setJitter = function(jitter){
	  this.jitter = jitter;
	};

	var __createBinding$2 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$2 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$2 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$2(result, mod, k);
	    __setModuleDefault$2(result, mod);
	    return result;
	};
	var __importDefault$3 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(manager$1, "__esModule", { value: true });
	manager$1.Manager = void 0;
	const engine_io_client_1 = cjs$2;
	const socket_js_1 = socket;
	const parser = __importStar$2(cjs);
	const on_js_1 = on$1;
	const backo2_1 = __importDefault$3(backo2);
	const component_emitter_1 = componentEmitter;
	const debug_1 = __importDefault$3(browser$a.exports); // debug()
	const debug$z = debug_1.default("socket.io-client:manager"); // debug()
	class Manager extends component_emitter_1.Emitter {
	    constructor(uri, opts) {
	        var _a;
	        super();
	        this.nsps = {};
	        this.subs = [];
	        if (uri && "object" === typeof uri) {
	            opts = uri;
	            uri = undefined;
	        }
	        opts = opts || {};
	        opts.path = opts.path || "/socket.io";
	        this.opts = opts;
	        engine_io_client_1.installTimerFunctions(this, opts);
	        this.reconnection(opts.reconnection !== false);
	        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
	        this.reconnectionDelay(opts.reconnectionDelay || 1000);
	        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
	        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);
	        this.backoff = new backo2_1.default({
	            min: this.reconnectionDelay(),
	            max: this.reconnectionDelayMax(),
	            jitter: this.randomizationFactor(),
	        });
	        this.timeout(null == opts.timeout ? 20000 : opts.timeout);
	        this._readyState = "closed";
	        this.uri = uri;
	        const _parser = opts.parser || parser;
	        this.encoder = new _parser.Encoder();
	        this.decoder = new _parser.Decoder();
	        this._autoConnect = opts.autoConnect !== false;
	        if (this._autoConnect)
	            this.open();
	    }
	    reconnection(v) {
	        if (!arguments.length)
	            return this._reconnection;
	        this._reconnection = !!v;
	        return this;
	    }
	    reconnectionAttempts(v) {
	        if (v === undefined)
	            return this._reconnectionAttempts;
	        this._reconnectionAttempts = v;
	        return this;
	    }
	    reconnectionDelay(v) {
	        var _a;
	        if (v === undefined)
	            return this._reconnectionDelay;
	        this._reconnectionDelay = v;
	        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);
	        return this;
	    }
	    randomizationFactor(v) {
	        var _a;
	        if (v === undefined)
	            return this._randomizationFactor;
	        this._randomizationFactor = v;
	        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);
	        return this;
	    }
	    reconnectionDelayMax(v) {
	        var _a;
	        if (v === undefined)
	            return this._reconnectionDelayMax;
	        this._reconnectionDelayMax = v;
	        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);
	        return this;
	    }
	    timeout(v) {
	        if (!arguments.length)
	            return this._timeout;
	        this._timeout = v;
	        return this;
	    }
	    /**
	     * Starts trying to reconnect if reconnection is enabled and we have not
	     * started reconnecting yet
	     *
	     * @private
	     */
	    maybeReconnectOnOpen() {
	        // Only try to reconnect if it's the first time we're connecting
	        if (!this._reconnecting &&
	            this._reconnection &&
	            this.backoff.attempts === 0) {
	            // keeps reconnection from firing twice for the same reconnection loop
	            this.reconnect();
	        }
	    }
	    /**
	     * Sets the current transport `socket`.
	     *
	     * @param {Function} fn - optional, callback
	     * @return self
	     * @public
	     */
	    open(fn) {
	        debug$z("readyState %s", this._readyState);
	        if (~this._readyState.indexOf("open"))
	            return this;
	        debug$z("opening %s", this.uri);
	        this.engine = new engine_io_client_1.Socket(this.uri, this.opts);
	        const socket = this.engine;
	        const self = this;
	        this._readyState = "opening";
	        this.skipReconnect = false;
	        // emit `open`
	        const openSubDestroy = on_js_1.on(socket, "open", function () {
	            self.onopen();
	            fn && fn();
	        });
	        // emit `error`
	        const errorSub = on_js_1.on(socket, "error", (err) => {
	            debug$z("error");
	            self.cleanup();
	            self._readyState = "closed";
	            this.emitReserved("error", err);
	            if (fn) {
	                fn(err);
	            }
	            else {
	                // Only do this if there is no fn to handle the error
	                self.maybeReconnectOnOpen();
	            }
	        });
	        if (false !== this._timeout) {
	            const timeout = this._timeout;
	            debug$z("connect attempt will timeout after %d", timeout);
	            if (timeout === 0) {
	                openSubDestroy(); // prevents a race condition with the 'open' event
	            }
	            // set timer
	            const timer = this.setTimeoutFn(() => {
	                debug$z("connect attempt timed out after %d", timeout);
	                openSubDestroy();
	                socket.close();
	                // @ts-ignore
	                socket.emit("error", new Error("timeout"));
	            }, timeout);
	            if (this.opts.autoUnref) {
	                timer.unref();
	            }
	            this.subs.push(function subDestroy() {
	                clearTimeout(timer);
	            });
	        }
	        this.subs.push(openSubDestroy);
	        this.subs.push(errorSub);
	        return this;
	    }
	    /**
	     * Alias for open()
	     *
	     * @return self
	     * @public
	     */
	    connect(fn) {
	        return this.open(fn);
	    }
	    /**
	     * Called upon transport open.
	     *
	     * @private
	     */
	    onopen() {
	        debug$z("open");
	        // clear old subs
	        this.cleanup();
	        // mark as open
	        this._readyState = "open";
	        this.emitReserved("open");
	        // add new subs
	        const socket = this.engine;
	        this.subs.push(on_js_1.on(socket, "ping", this.onping.bind(this)), on_js_1.on(socket, "data", this.ondata.bind(this)), on_js_1.on(socket, "error", this.onerror.bind(this)), on_js_1.on(socket, "close", this.onclose.bind(this)), on_js_1.on(this.decoder, "decoded", this.ondecoded.bind(this)));
	    }
	    /**
	     * Called upon a ping.
	     *
	     * @private
	     */
	    onping() {
	        this.emitReserved("ping");
	    }
	    /**
	     * Called with data.
	     *
	     * @private
	     */
	    ondata(data) {
	        this.decoder.add(data);
	    }
	    /**
	     * Called when parser fully decodes a packet.
	     *
	     * @private
	     */
	    ondecoded(packet) {
	        this.emitReserved("packet", packet);
	    }
	    /**
	     * Called upon socket error.
	     *
	     * @private
	     */
	    onerror(err) {
	        debug$z("error", err);
	        this.emitReserved("error", err);
	    }
	    /**
	     * Creates a new socket for the given `nsp`.
	     *
	     * @return {Socket}
	     * @public
	     */
	    socket(nsp, opts) {
	        let socket = this.nsps[nsp];
	        if (!socket) {
	            socket = new socket_js_1.Socket(this, nsp, opts);
	            this.nsps[nsp] = socket;
	        }
	        return socket;
	    }
	    /**
	     * Called upon a socket close.
	     *
	     * @param socket
	     * @private
	     */
	    _destroy(socket) {
	        const nsps = Object.keys(this.nsps);
	        for (const nsp of nsps) {
	            const socket = this.nsps[nsp];
	            if (socket.active) {
	                debug$z("socket %s is still active, skipping close", nsp);
	                return;
	            }
	        }
	        this._close();
	    }
	    /**
	     * Writes a packet.
	     *
	     * @param packet
	     * @private
	     */
	    _packet(packet) {
	        debug$z("writing packet %j", packet);
	        const encodedPackets = this.encoder.encode(packet);
	        for (let i = 0; i < encodedPackets.length; i++) {
	            this.engine.write(encodedPackets[i], packet.options);
	        }
	    }
	    /**
	     * Clean up transport subscriptions and packet buffer.
	     *
	     * @private
	     */
	    cleanup() {
	        debug$z("cleanup");
	        this.subs.forEach((subDestroy) => subDestroy());
	        this.subs.length = 0;
	        this.decoder.destroy();
	    }
	    /**
	     * Close the current socket.
	     *
	     * @private
	     */
	    _close() {
	        debug$z("disconnect");
	        this.skipReconnect = true;
	        this._reconnecting = false;
	        this.onclose("forced close");
	        if (this.engine)
	            this.engine.close();
	    }
	    /**
	     * Alias for close()
	     *
	     * @private
	     */
	    disconnect() {
	        return this._close();
	    }
	    /**
	     * Called upon engine close.
	     *
	     * @private
	     */
	    onclose(reason) {
	        debug$z("closed due to %s", reason);
	        this.cleanup();
	        this.backoff.reset();
	        this._readyState = "closed";
	        this.emitReserved("close", reason);
	        if (this._reconnection && !this.skipReconnect) {
	            this.reconnect();
	        }
	    }
	    /**
	     * Attempt a reconnection.
	     *
	     * @private
	     */
	    reconnect() {
	        if (this._reconnecting || this.skipReconnect)
	            return this;
	        const self = this;
	        if (this.backoff.attempts >= this._reconnectionAttempts) {
	            debug$z("reconnect failed");
	            this.backoff.reset();
	            this.emitReserved("reconnect_failed");
	            this._reconnecting = false;
	        }
	        else {
	            const delay = this.backoff.duration();
	            debug$z("will wait %dms before reconnect attempt", delay);
	            this._reconnecting = true;
	            const timer = this.setTimeoutFn(() => {
	                if (self.skipReconnect)
	                    return;
	                debug$z("attempting reconnect");
	                this.emitReserved("reconnect_attempt", self.backoff.attempts);
	                // check again for the case socket closed in above events
	                if (self.skipReconnect)
	                    return;
	                self.open((err) => {
	                    if (err) {
	                        debug$z("reconnect attempt error");
	                        self._reconnecting = false;
	                        self.reconnect();
	                        this.emitReserved("reconnect_error", err);
	                    }
	                    else {
	                        debug$z("reconnect success");
	                        self.onreconnect();
	                    }
	                });
	            }, delay);
	            if (this.opts.autoUnref) {
	                timer.unref();
	            }
	            this.subs.push(function subDestroy() {
	                clearTimeout(timer);
	            });
	        }
	    }
	    /**
	     * Called upon successful reconnect.
	     *
	     * @private
	     */
	    onreconnect() {
	        const attempt = this.backoff.attempts;
	        this._reconnecting = false;
	        this.backoff.reset();
	        this.emitReserved("reconnect", attempt);
	    }
	}
	manager$1.Manager = Manager;

	(function (module, exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = exports.connect = exports.io = exports.Socket = exports.Manager = exports.protocol = void 0;
	const url_js_1 = url$1;
	const manager_js_1 = manager$1;
	Object.defineProperty(exports, "Manager", { enumerable: true, get: function () { return manager_js_1.Manager; } });
	const socket_js_1 = socket;
	Object.defineProperty(exports, "Socket", { enumerable: true, get: function () { return socket_js_1.Socket; } });
	const debug_1 = __importDefault(browser$a.exports); // debug()
	const debug = debug_1.default("socket.io-client"); // debug()
	/**
	 * Managers cache.
	 */
	const cache = {};
	function lookup(uri, opts) {
	    if (typeof uri === "object") {
	        opts = uri;
	        uri = undefined;
	    }
	    opts = opts || {};
	    const parsed = url_js_1.url(uri, opts.path || "/socket.io");
	    const source = parsed.source;
	    const id = parsed.id;
	    const path = parsed.path;
	    const sameNamespace = cache[id] && path in cache[id]["nsps"];
	    const newConnection = opts.forceNew ||
	        opts["force new connection"] ||
	        false === opts.multiplex ||
	        sameNamespace;
	    let io;
	    if (newConnection) {
	        debug("ignoring socket cache for %s", source);
	        io = new manager_js_1.Manager(source, opts);
	    }
	    else {
	        if (!cache[id]) {
	            debug("new io instance for %s", source);
	            cache[id] = new manager_js_1.Manager(source, opts);
	        }
	        io = cache[id];
	    }
	    if (parsed.query && !opts.query) {
	        opts.query = parsed.queryKey;
	    }
	    return io.socket(parsed.path, opts);
	}
	exports.io = lookup;
	exports.connect = lookup;
	exports.default = lookup;
	// so that "lookup" can be used both as a function (e.g. `io(...)`) and as a
	// namespace (e.g. `io.connect(...)`), for backward compatibility
	Object.assign(lookup, {
	    Manager: manager_js_1.Manager,
	    Socket: socket_js_1.Socket,
	    io: lookup,
	    connect: lookup,
	});
	/**
	 * Protocol version.
	 *
	 * @public
	 */
	var socket_io_parser_1 = cjs;
	Object.defineProperty(exports, "protocol", { enumerable: true, get: function () { return socket_io_parser_1.protocol; } });

	module.exports = lookup;
	}(cjs$3, cjs$3.exports));

	var streamToIt = {exports: {}};

	const getIterator$1 = getIterator$3;

	var sink = writable => async source => {
	  source = getIterator$1(source);

	  const maybeEndSource = (source) => {
	    if (typeof source.return === 'function') source.return();
	  };

	  let error = null;
	  let errCb = null;
	  const errorHandler = (err) => {
	    error = err;
	    if (errCb) errCb(err);
	    // When the writable errors, try to end the source to exit iteration early
	    maybeEndSource(source);
	  };

	  let closeCb = null;
	  let closed = false;
	  const closeHandler = () => {
	    closed = true;
	    if (closeCb) closeCb();
	  };

	  let finishCb = null;
	  let finished = false;
	  const finishHandler = () => {
	    finished = true;
	    if (finishCb) finishCb();
	  };

	  let drainCb = null;
	  const drainHandler = () => {
	    if (drainCb) drainCb();
	  };

	  const waitForDrainOrClose = () => {
	    return new Promise((resolve, reject) => {
	      closeCb = drainCb = resolve;
	      errCb = reject;
	      writable.once('drain', drainHandler);
	    })
	  };

	  const waitForDone = () => {
	    // Immediately try to end the source
	    maybeEndSource(source);
	    return new Promise((resolve, reject) => {
	      if (closed || finished || error) return resolve()
	      finishCb = closeCb = resolve;
	      errCb = reject;
	    })
	  };

	  const cleanup = () => {
	    writable.removeListener('error', errorHandler);
	    writable.removeListener('close', closeHandler);
	    writable.removeListener('finish', finishHandler);
	    writable.removeListener('drain', drainHandler);
	  };

	  writable.once('error', errorHandler);
	  writable.once('close', closeHandler);
	  writable.once('finish', finishHandler);

	  try {
	    for await (const value of source) {
	      if (!writable.writable || writable.destroyed || error) break

	      if (writable.write(value) === false) {
	        await waitForDrainOrClose();
	      }
	    }
	  } catch (err) {
	    // error is set by stream error handler so only destroy stream if source threw
	    if (!error) {
	      writable.destroy();
	    }

	    // could we be obscuring an error here?
	    error = err;
	  }

	  try {
	    // We're done writing, end everything (n.b. stream may be destroyed at this point but then this is a no-op)
	    if (writable.writable) {
	      writable.end();
	    }

	    // Wait until we close or finish. This supports halfClosed streams
	    await waitForDone();

	    // Notify the user an error occurred
	    if (error) throw error
	  } finally {
	    // Clean up listeners
	    cleanup();
	  }
	};

	const toSink = sink;
	const toSource = source$3;

	var duplex$1 = duplex => ({ sink: toSink(duplex), source: toSource(duplex) });

	const toDuplex = duplex$1;

	var transform = transform => async function * (source) {
	  const duplex = toDuplex(transform);
	  // In a transform the sink and source are connected, an error in the sink
	  // will be thrown in the source also. Catch the sink error to avoid unhandled
	  // rejections and yield from the source.
	  let sinkError;
	  duplex.sink(source).catch(err => { sinkError = err; });

	  yield * duplex.source;
	  if (sinkError) throw sinkError
	};

	streamToIt.exports = source$3;
	streamToIt.exports.source = source$3;
	streamToIt.exports.sink = sink;
	streamToIt.exports.transform = transform;
	streamToIt.exports.duplex = duplex$1;

	const abortable$3 = abortableIterator.exports;
	const toIterable = streamToIt.exports;
	const { CLOSE_TIMEOUT } = constants$7;
	const toMultiaddr = ipPortToMultiaddr$1.exports;

	const debug$y = browser$a.exports;
	const log$I = debug$y('libp2p:webrtc-star:socket');
	log$I.error = debug$y('libp2p:webrtc-star:socket:error');

	const toWebrtcMultiaddr = (address, port) => {
	  if (!address || !port) return undefined

	  try {
	    return toMultiaddr(address, port)
	  } catch (err) {
	    log$I.error(err);
	    // Account for mdns hostnames, just make it a local ip for now
	    return toMultiaddr('0.0.0.0', port)
	  }
	};

	// Convert a socket into a MultiaddrConnection
	// https://github.com/libp2p/js-libp2p-interfaces/tree/master/src/transport#multiaddrconnection
	var socketToConn = (socket, options = {}) => {
	  const { sink, source } = toIterable.duplex(socket);

	  // If the remote address was passed, use it - it may have the peer ID encapsulated
	  const remoteAddr = options.remoteAddr || toWebrtcMultiaddr(socket.remoteAddress, socket.remotePort);
	  const localAddr = toWebrtcMultiaddr(socket.localAddress, socket.localPort);

	  const maConn = {
	    async sink (source) {
	      if (options.signal) {
	        source = abortable$3(source, options.signal);
	      }

	      try {
	        await sink((async function * () {
	          for await (const chunk of source) {
	            // Convert BufferList to Buffer
	            yield chunk instanceof Uint8Array ? chunk : chunk.slice();
	          }
	        })());
	      } catch (err) {
	        // If aborted we can safely ignore
	        if (err.type !== 'aborted') {
	          // If the source errored the socket will already have been destroyed by
	          // toIterable.duplex(). If the socket errored it will already be
	          // destroyed. There's nothing to do here except log the error & return.
	          log$I.error(err);
	        }
	      }
	    },

	    source: options.signal ? abortable$3(source, options.signal) : source,

	    conn: socket,

	    localAddr,
	    remoteAddr,

	    timeline: { open: Date.now() },

	    close () {
	      if (socket.destroyed) return

	      return new Promise((resolve, reject) => {
	        const start = Date.now();

	        // Attempt to end the socket. If it takes longer to close than the
	        // timeout, destroy it manually.
	        const timeout = setTimeout(() => {
	          if (maConn.remoteAddr) {
	            const { host, port } = maConn.remoteAddr.toOptions();
	            log$I('timeout closing socket to %s:%s after %dms, destroying it manually',
	              host, port, Date.now() - start);
	          }

	          if (!socket.destroyed) {
	            socket.destroy();
	          }
	        }, CLOSE_TIMEOUT);

	        socket.once('close', () => {
	          resolve();
	        });

	        socket.end(err => {
	          clearTimeout(timeout);

	          maConn.timeline.close = Date.now();
	          if (err) return reject(err)
	        });
	      })
	    }
	  };

	  socket.once('close', () => {
	    // In instances where `close` was not explicitly called,
	    // such as an iterable stream ending, ensure we have set the close
	    // timeline
	    if (!maConn.timeline.close) {
	      maConn.timeline.close = Date.now();
	    }
	  });

	  return maConn
	};

	const { Multiaddr: Multiaddr$g } = src$s;

	function cleanUrlSIO$2 (ma) {
	  const maStrSplit = ma.toString().split('/');
	  const tcpProto = ma.protos()[1].name;
	  const wsProto = ma.protos()[2].name;
	  const tcpPort = ma.stringTuples()[1][1];

	  if (tcpProto !== 'tcp' || (wsProto !== 'ws' && wsProto !== 'wss')) {
	    throw new Error('invalid multiaddr: ' + ma.toString())
	  }

	  if (!Multiaddr$g.isName(ma)) {
	    return 'http://' + maStrSplit[2] + ':' + maStrSplit[4]
	  }

	  if (wsProto === 'ws') {
	    return 'http://' + maStrSplit[2] + (tcpPort === '80' ? '' : ':' + tcpPort)
	  }

	  if (wsProto === 'wss') {
	    return 'https://' + maStrSplit[2] + (tcpPort === '443' ? '' : ':' + tcpPort)
	  }
	}

	function cleanMultiaddr$1 (maStr) {
	  const legacy = '/libp2p-webrtc-star';

	  if (maStr.indexOf(legacy) !== -1) {
	    maStr = maStr.substring(legacy.length, maStr.length);
	    let ma = new Multiaddr$g(maStr);
	    const tuppleIPFS = ma.stringTuples().filter((tupple) => {
	      return tupple[0] === 421 // ipfs code
	    })[0];

	    ma = ma.decapsulate('p2p');
	    ma = ma.encapsulate('/p2p-webrtc-star');
	    ma = ma.encapsulate(`/p2p/${tuppleIPFS[1]}`);
	    maStr = ma.toString();
	  }

	  return maStr
	}

	var utils$q = {
	  cleanUrlSIO: cleanUrlSIO$2,
	  cleanMultiaddr: cleanMultiaddr$1
	};

	const EventEmitter$g = require$$1$5;
	const debug$x = browser$a.exports;
	const log$H = debug$x('libp2p:webrtc-star:listener');
	log$H.error = debug$x('libp2p:webrtc-star:listener:error');

	const errCode$k = errCode$q;
	const io = cjs$3.exports;
	const SimplePeer$1 = libp2pWebrtcPeer;
	const pDefer = pDefer_1;

	const toConnection$2 = socketToConn;
	const { cleanUrlSIO: cleanUrlSIO$1 } = utils$q;
	const { CODE_P2P } = constants$7;

	const sioOptions = {
	  transports: ['websocket'],
	  'force new connection': true,
	  path: '/socket.io-next/' // This should be removed when socket.io@2 support is removed
	};

	var listener$1 = ({ handler, upgrader }, WebRTCStar, options = {}) => {
	  const listener = new EventEmitter$g();
	  let listeningAddr;
	  let signallingUrl;

	  listener.__connections = [];
	  listener.__spChannels = new Map();
	  listener.__pendingIntents = new Map();
	  listener.listen = (ma) => {
	    // Should only be used if not already listening
	    if (listeningAddr) {
	      throw errCode$k(new Error('listener already in use'), 'ERR_ALREADY_LISTENING')
	    }

	    const defer = pDefer();

	    // Should be kept unmodified
	    listeningAddr = ma;

	    let signallingAddr;
	    if (!ma.protoCodes().includes(CODE_P2P) && upgrader.localPeer) {
	      signallingAddr = ma.encapsulate(`/p2p/${upgrader.localPeer.toB58String()}`);
	    } else {
	      signallingAddr = ma;
	    }

	    listener.on('error', () => defer.reject());

	    signallingUrl = cleanUrlSIO$1(ma);

	    log$H('Dialing to Signalling Server on: ' + signallingUrl);
	    listener.io = io.connect(signallingUrl, sioOptions);

	    const incomingDial = (offer) => {
	      if (offer.answer || offer.err || !offer.intentId) {
	        return
	      }

	      const intentId = offer.intentId;
	      let pendings = listener.__pendingIntents.get(intentId);
	      if (!pendings) {
	        pendings = [];
	        listener.__pendingIntents.set(intentId, pendings);
	      }

	      let channel = listener.__spChannels.get(intentId);
	      if (channel) {
	        channel.signal(offer.signal);
	        return
	      } else if (offer.signal.type !== 'offer') {
	        pendings.push(offer);
	        return
	      }

	      const spOptions = {
	        trickle: false,
	        ...options
	      };

	      // Use custom WebRTC implementation
	      if (WebRTCStar.wrtc) { spOptions.wrtc = WebRTCStar.wrtc; }

	      channel = new SimplePeer$1(spOptions);

	      const onError = (err) => {
	        log$H.error('incoming connection errored', err);
	      };

	      channel.on('error', onError);
	      channel.once('close', (...args) => {
	        channel.removeListener('error', onError);
	      });

	      channel.on('signal', (signal) => {
	        offer.signal = signal;
	        offer.answer = true;
	        listener.io.emit('ss-handshake', offer);
	      });

	      channel.signal(offer.signal);
	      for (const pendingOffer of pendings) {
	        channel.signal(pendingOffer.signal);
	      }
	      listener.__pendingIntents.set(intentId, []);

	      channel.once('connect', async () => {
	        const maConn = toConnection$2(channel);
	        log$H('new inbound connection %s', maConn.remoteAddr);

	        let conn;
	        try {
	          conn = await upgrader.upgradeInbound(maConn);
	        } catch (err) {
	          log$H.error('inbound connection failed to upgrade', err);
	          return maConn.close()
	        }

	        if (!conn.remoteAddr) {
	          try {
	            conn.remoteAddr = ma.decapsulateCode(CODE_P2P).encapsulate(`/p2p/${conn.remotePeer.toB58String()}`);
	          } catch (err) {
	            log$H.error('could not determine remote address', err);
	          }
	        }

	        log$H('inbound connection %s upgraded', maConn.remoteAddr);

	        trackConn(listener, maConn, intentId);

	        listener.emit('connection', conn);
	        handler(conn);
	      });
	      listener.__spChannels.set(intentId, channel);
	    };

	    listener.io.once('connect_error', (err) => defer.reject(err));
	    listener.io.once('error', (err) => {
	      listener.emit('error', err);
	      listener.emit('close');
	    });

	    listener.io.on('ws-handshake', incomingDial);
	    listener.io.on('ws-peer', WebRTCStar._peerDiscovered);

	    listener.io.on('connect', () => {
	      listener.io.emit('ss-join', signallingAddr.toString());
	    });

	    listener.io.once('connect', () => {
	      listener.emit('listening');
	      defer.resolve();
	    });

	    // Store listen and signal reference addresses
	    WebRTCStar.sigReferences.set(signallingUrl, {
	      listener,
	      signallingAddr
	    });

	    return defer.promise
	  };

	  listener.close = async () => {
	    // Close listener
	    const ref = WebRTCStar.sigReferences.get(signallingUrl);
	    if (ref && ref.listener.io) {
	      ref.listener.io.emit('ss-leave');
	      ref.listener.io.close();
	    }

	    await Promise.all(listener.__connections.map(maConn => maConn.close()));
	    listener.emit('close');
	    listener.removeAllListeners();

	    // Reset state
	    listeningAddr = undefined;
	    WebRTCStar.sigReferences.delete(signallingUrl);
	  };

	  listener.getAddrs = () => {
	    return [listeningAddr]
	  };

	  return listener
	};

	function trackConn (listener, maConn, intentId) {
	  listener.__connections.push(maConn);

	  const untrackConn = () => {
	    listener.__connections = listener.__connections.filter(c => c !== maConn);
	    listener.__spChannels.delete(intentId);
	    listener.__pendingIntents.delete(intentId);
	  };

	  maConn.conn.once('close', untrackConn);
	}

	const debug$w = browser$a.exports;
	const log$G = debug$w('libp2p:webrtc-star');
	log$G.error = debug$w('libp2p:webrtc-star:error');

	const { EventEmitter: EventEmitter$f } = require$$1$5;
	const errcode$h = errCode$q;
	const withIs = classIs.exports;

	const { AbortError: AbortError$2 } = abortableIterator.exports;
	const SimplePeer = libp2pWebrtcPeer;
	const { supportsWebRTCDataChannels: webrtcSupport } = supports;

	const { Multiaddr: Multiaddr$f } = src$s;
	const mafmt$1 = src$r;
	const PeerId$m = src$o.exports;

	const { CODE_CIRCUIT } = constants$7;
	const createListener$1 = listener$1;
	const toConnection$1 = socketToConn;
	const { cleanMultiaddr, cleanUrlSIO } = utils$q;

	function noop () { }

	/**
	 * @class WebRTCStar
	 */
	class WebRTCStar {
	  /**
	   * @class
	   * @param {object} options
	   * @param {Upgrader} options.upgrader
	   */
	  constructor (options = {}) {
	    if (!options.upgrader) {
	      throw new Error('An upgrader must be provided. See https://github.com/libp2p/interface-transport#upgrader.')
	    }

	    this._upgrader = options.upgrader;

	    this.sioOptions = {
	      transports: ['websocket'],
	      'force new connection': true
	    };

	    if (options.wrtc) {
	      this.wrtc = options.wrtc;
	    }

	    // Keep Signalling references
	    this.sigReferences = new Map();

	    // Discovery
	    this.discovery = new EventEmitter$f();
	    this.discovery.tag = 'webRTCStar';
	    this.discovery._isStarted = false;
	    this.discovery.start = () => {
	      this.discovery._isStarted = true;
	    };
	    this.discovery.stop = () => {
	      this.discovery._isStarted = false;
	    };
	    this._peerDiscovered = this._peerDiscovered.bind(this);
	  }

	  /**
	   * @async
	   * @param {Multiaddr} ma
	   * @param {object} options
	   * @param {AbortSignal} options.signal - Used to abort dial requests
	   * @returns {Connection} An upgraded Connection
	   */
	  async dial (ma, options = {}) {
	    const rawConn = await this._connect(ma, options);
	    const maConn = toConnection$1(rawConn, { remoteAddr: ma, signal: options.signal });
	    log$G('new outbound connection %s', maConn.remoteAddr);
	    const conn = await this._upgrader.upgradeOutbound(maConn);
	    log$G('outbound connection %s upgraded', maConn.remoteAddr);
	    return conn
	  }

	  /**
	   * @private
	   * @param {Multiaddr} ma
	   * @param {object} options
	   * @param {AbortSignal} options.signal - Used to abort dial requests
	   * @returns {Promise<SimplePeer>} Resolves a SimplePeer Webrtc channel
	   */
	  _connect (ma, options = {}) {
	    if (options.signal && options.signal.aborted) {
	      throw new AbortError$2()
	    }

	    const spOptions = {
	      initiator: true,
	      trickle: false,
	      ...options.spOptions || {}
	    };

	    // Use custom WebRTC implementation
	    if (this.wrtc) { spOptions.wrtc = this.wrtc; }

	    const cOpts = ma.toOptions();
	    const intentId = (~~(Math.random() * 1e9)).toString(36) + Date.now();

	    return new Promise((resolve, reject) => {
	      const sio = this.sigReferences.get(cleanUrlSIO(ma));

	      if (!sio || !sio.listener) {
	        return reject(errcode$h(new Error('unknown signal server to use'), 'ERR_UNKNOWN_SIGNAL_SERVER'))
	      }

	      const sioClient = sio.listener.io;

	      const start = Date.now();
	      let connected;

	      log$G('dialing %s:%s', cOpts.host, cOpts.port);
	      const channel = new SimplePeer(spOptions);

	      const onError = (err) => {
	        if (!connected) {
	          const msg = `connection error ${cOpts.host}:${cOpts.port}: ${err.message}`;
	          log$G.error(msg);
	          done(err);
	        }
	      };

	      const onTimeout = () => {
	        log$G('connnection timeout %s:%s', cOpts.host, cOpts.port);
	        const err = errcode$h(new Error(`connection timeout after ${Date.now() - start}ms`), 'ERR_CONNECT_TIMEOUT');
	        // Note: this will result in onError() being called
	        channel.emit('error', err);
	      };

	      const onConnect = () => {
	        connected = true;

	        log$G('connection opened %s:%s', cOpts.host, cOpts.port);
	        done(null);
	      };

	      const onAbort = () => {
	        log$G.error('connection aborted %s:%s', cOpts.host, cOpts.port);
	        channel.destroy();
	        done(new AbortError$2());
	      };

	      const done = (err) => {
	        channel.removeListener('timeout', onTimeout);
	        channel.removeListener('connect', onConnect);
	        options.signal && options.signal.removeEventListener('abort', onAbort);

	        err ? reject(err) : resolve(channel);
	      };

	      channel.on('error', onError);
	      channel.once('timeout', onTimeout);
	      channel.once('connect', onConnect);
	      channel.on('close', () => {
	        channel.removeListener('error', onError);
	      });
	      options.signal && options.signal.addEventListener('abort', onAbort);

	      channel.on('signal', (signal) => {
	        sioClient.emit('ss-handshake', {
	          intentId: intentId,
	          srcMultiaddr: sio.signallingAddr.toString(),
	          dstMultiaddr: ma.toString(),
	          signal: signal
	        });
	      });

	      // NOTE: aegir segfaults if we do .once on the socket.io event emitter and we
	      // are clueless as to why.
	      sioClient.on('ws-handshake', (offer) => {
	        if (offer.intentId === intentId && offer.err) {
	          channel.destroy();
	          reject(errcode$h(offer.err instanceof Error ? offer.err : new Error(offer.err), 'ERR_SIGNALLING_FAILED'));
	        }

	        if (offer.intentId !== intentId || !offer.answer || channel.destroyed) {
	          return
	        }

	        channel.signal(offer.signal);
	      });
	    })
	  }

	  /**
	   * Creates a WebrtcStar listener. The provided `handler` function will be called
	   * anytime a new incoming Connection has been successfully upgraded via
	   * `upgrader.upgradeInbound`.
	   *
	   * @param {object} [options] - simple-peer options for listener
	   * @param {function (Connection)} handler
	   * @returns {Listener} A WebrtcStar listener
	   */
	  createListener (options = {}, handler) {
	    if (!webrtcSupport && !this.wrtc) {
	      throw errcode$h(new Error('no WebRTC support'), 'ERR_NO_WEBRTC_SUPPORT')
	    }

	    if (typeof options === 'function') {
	      handler = options;
	      options = {};
	    }

	    handler = handler || noop;

	    return createListener$1({ handler, upgrader: this._upgrader }, this, options)
	  }

	  /**
	   * Takes a list of `Multiaddr`s and returns only valid TCP addresses
	   *
	   * @param {Multiaddr[]} multiaddrs
	   * @returns {Multiaddr[]} Valid TCP multiaddrs
	   */
	  filter (multiaddrs) {
	    multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs];

	    return multiaddrs.filter((ma) => {
	      if (ma.protoCodes().includes(CODE_CIRCUIT)) {
	        return false
	      }

	      return mafmt$1.WebRTCStar.matches(ma)
	    })
	  }

	  _peerDiscovered (maStr) {
	    if (!this.discovery._isStarted) return

	    log$G('Peer Discovered:', maStr);
	    maStr = cleanMultiaddr(maStr);

	    const ma = new Multiaddr$f(maStr);
	    const peerId = PeerId$m.createFromB58String(ma.getPeerId());

	    this.discovery.emit('peer', {
	      id: peerId,
	      multiaddrs: [ma]
	    });
	  }
	}

	var src$d = withIs(WebRTCStar, { className: 'WebRTCStar', symbolName: '@libp2p/js-libp2p-webrtc-star/webrtcstar' });

	var coder = {};

	const varint$4 = varint$9;
	const BufferList$4 = BufferList_1;

	const POOL_SIZE = 10 * 1024;

	class Encoder {
	  constructor () {
	    this._pool = new Uint8Array(POOL_SIZE);
	    this._poolOffset = 0;
	  }

	  /**
	   * Encodes the given message and returns it and its header
	   *
	   * @param {*} msg - The message object to encode
	   * @returns {Uint8Array|Uint8Array[]}
	   */
	  write (msg) {
	    const pool = this._pool;
	    let offset = this._poolOffset;

	    varint$4.encode(msg.id << 3 | msg.type, pool, offset);
	    offset += varint$4.encode.bytes;
	    varint$4.encode(msg.data ? msg.data.length : 0, pool, offset);
	    offset += varint$4.encode.bytes;

	    const header = pool.subarray(this._poolOffset, offset);

	    if (POOL_SIZE - offset < 100) {
	      this._pool = new Uint8Array(POOL_SIZE);
	      this._poolOffset = 0;
	    } else {
	      this._poolOffset = offset;
	    }

	    if (!msg.data) return header

	    return [header, msg.data]
	  }
	}

	const encoder$1 = new Encoder();

	// Encode one or more messages and yield a BufferList of encoded messages
	var encode_browser = source => (async function * encode () {
	  for await (const msg of source) {
	    if (Array.isArray(msg)) {
	      yield new BufferList$4(msg.map(m => encoder$1.write(m)));
	    } else {
	      yield new BufferList$4(encoder$1.write(msg));
	    }
	  }
	})();

	const varint$3 = varint$9;
	const BufferList$3 = BufferList_1;

	// Decode a chunk and yield an _array_ of decoded messages
	var decode$1 = source => (async function * decode () {
	  const decoder = new Decoder();
	  for await (const chunk of source) {
	    const msgs = decoder.write(chunk);
	    if (msgs.length) yield msgs;
	  }
	})();

	class Decoder {
	  constructor () {
	    this._buffer = new BufferList$3();
	    // optimization to allow varint to take a BufferList (well a proxy to)
	    this._bufferProxy = new Proxy({}, {
	      get: (_, prop) => prop[0] === 'l' ? this._buffer[prop] : this._buffer.get(parseInt(prop))
	    });
	    this._headerInfo = null;
	  }

	  /**
	   * @param {Uint8Array|BufferList} chunk
	   * @returns {object[]} An array of message objects
	   */
	  write (chunk) {
	    if (!chunk || !chunk.length) return []

	    this._buffer.append(chunk);
	    const msgs = [];

	    while (this._buffer.length) {
	      if (!this._headerInfo) {
	        try {
	          this._headerInfo = this._decodeHeader(this._bufferProxy);
	        } catch (_) {
	          break // We haven't received enough data yet
	        }
	      }

	      const { id, type, length, offset } = this._headerInfo;
	      const bufferedDataLength = this._buffer.length - offset;

	      if (bufferedDataLength < length) break // not enough data yet

	      msgs.push({ id, type, data: this._buffer.shallowSlice(offset, offset + length) });

	      this._buffer.consume(offset + length);
	      this._headerInfo = null;
	    }

	    return msgs
	  }

	  /**
	   * Attempts to decode the message header from the buffer
	   *
	   * @private
	   * @param {Uint8Array} data
	   * @returns {*} message header (id, type, offset, length)
	   */
	  _decodeHeader (data) {
	    const h = varint$3.decode(data);
	    let offset = varint$3.decode.bytes;
	    const length = varint$3.decode(data, offset);
	    offset += varint$3.decode.bytes;
	    return { id: h >> 3, type: h & 7, offset, length }
	  }
	}

	coder.encode = encode_browser;
	coder.decode = decode$1;

	var restrictSize$1 = {exports: {}};

	const MAX_MSG_SIZE$1 = 1 << 20; // 1MB

	/**
	 * Creates an iterable transform that restricts message sizes to
	 * the given maximum size.
	 *
	 * @param {number} [max] - The maximum message size. Defaults to 1MB
	 * @returns {*} An iterable transform.
	 */
	restrictSize$1.exports = max => {
	  max = max || MAX_MSG_SIZE$1;

	  const checkSize = msg => {
	    if (msg.data && msg.data.length > max) {
	      throw Object.assign(new Error('message size too large!'), { code: 'ERR_MSG_TOO_BIG' })
	    }
	  };

	  return source => {
	    return (async function * restrictSize () {
	      for await (const msg of source) {
	        if (Array.isArray(msg)) {
	          msg.forEach(checkSize);
	        } else {
	          checkSize(msg);
	        }
	        yield msg;
	      }
	    })()
	  }
	};

	restrictSize$1.exports.MAX_MSG_SIZE = MAX_MSG_SIZE$1;

	var messageTypes = {};

	const MessageTypes$1 = Object.freeze({
	  NEW_STREAM: 0,
	  MESSAGE_RECEIVER: 1,
	  MESSAGE_INITIATOR: 2,
	  CLOSE_RECEIVER: 3,
	  CLOSE_INITIATOR: 4,
	  RESET_RECEIVER: 5,
	  RESET_INITIATOR: 6
	});

	messageTypes.MessageTypes = MessageTypes$1;

	messageTypes.InitiatorMessageTypes = Object.freeze({
	  NEW_STREAM: MessageTypes$1.NEW_STREAM,
	  MESSAGE: MessageTypes$1.MESSAGE_INITIATOR,
	  CLOSE: MessageTypes$1.CLOSE_INITIATOR,
	  RESET: MessageTypes$1.RESET_INITIATOR
	});

	messageTypes.ReceiverMessageTypes = Object.freeze({
	  MESSAGE: MessageTypes$1.MESSAGE_RECEIVER,
	  CLOSE: MessageTypes$1.CLOSE_RECEIVER,
	  RESET: MessageTypes$1.RESET_RECEIVER
	});

	messageTypes.MessageTypeNames = Object.freeze(
	  Object.entries(MessageTypes$1).reduce((obj, e) => {
	    obj[e[1]] = e[0];
	    return obj
	  }, {})
	);

	const abortable$2 = abortableIterator.exports;
	const log$F = browser$a.exports('libp2p:mplex:stream');
	const pushable$1 = itPushable;
	const BufferList$2 = BufferList_1;
	const errCode$j = errCode$q;
	const { MAX_MSG_SIZE } = restrictSize$1.exports;
	const { InitiatorMessageTypes, ReceiverMessageTypes } = messageTypes;

	const ERR_MPLEX_STREAM_RESET = 'ERR_MPLEX_STREAM_RESET';
	const ERR_MPLEX_STREAM_ABORT = 'ERR_MPLEX_STREAM_ABORT';

	/**
	 * @param {object} options
	 * @param {number} options.id
	 * @param {string} options.name
	 * @param {function(*)} options.send - Called to send data through the stream
	 * @param {function(Error)} [options.onEnd] - Called whenever the stream ends
	 * @param {string} [options.type] - One of ['initiator','receiver']. Defaults to 'initiator'
	 * @param {number} [options.maxMsgSize] - Max size of an mplex message in bytes. Writes > size are automatically split. Defaults to 1MB
	 * @returns {*} A muxed stream
	 */
	var stream$1 = ({ id, name, send, onEnd = () => {}, type = 'initiator', maxMsgSize = MAX_MSG_SIZE }) => {
	  const abortController = new AbortController();
	  const resetController = new AbortController();
	  const Types = type === 'initiator' ? InitiatorMessageTypes : ReceiverMessageTypes;
	  const externalId = type === 'initiator' ? (`i${id}`) : `r${id}`;

	  name = String(name == null ? id : name);

	  let sourceEnded = false;
	  let sinkEnded = false;
	  let endErr;

	  const onSourceEnd = err => {
	    if (sourceEnded) return
	    sourceEnded = true;
	    log$F('%s stream %s source end', type, name, err);
	    if (err && !endErr) endErr = err;
	    if (sinkEnded) {
	      stream.timeline.close = Date.now();
	      onEnd(endErr);
	    }
	  };

	  const onSinkEnd = err => {
	    if (sinkEnded) return
	    sinkEnded = true;
	    log$F('%s stream %s sink end', type, name, err);
	    if (err && !endErr) endErr = err;
	    if (sourceEnded) {
	      stream.timeline.close = Date.now();
	      onEnd(endErr);
	    }
	  };

	  const stream = {
	    // Close for reading
	    close: () => stream.source.end(),
	    // Close for reading and writing (local error)
	    abort: err => {
	      log$F('%s stream %s abort', type, name, err);
	      // End the source with the passed error
	      stream.source.end(err);
	      abortController.abort();
	      onSinkEnd(err);
	    },
	    // Close immediately for reading and writing (remote error)
	    reset: () => {
	      const err = errCode$j(new Error('stream reset'), ERR_MPLEX_STREAM_RESET);
	      resetController.abort();
	      stream.source.end(err);
	      onSinkEnd(err);
	    },
	    sink: async source => {
	      source = abortable$2(source, [
	        { signal: abortController.signal, options: { abortMessage: 'stream aborted', abortCode: ERR_MPLEX_STREAM_ABORT } },
	        { signal: resetController.signal, options: { abortMessage: 'stream reset', abortCode: ERR_MPLEX_STREAM_RESET } }
	      ]);

	      if (type === 'initiator') { // If initiator, open a new stream
	        send({ id, type: Types.NEW_STREAM, data: name });
	      }

	      try {
	        for await (let data of source) {
	          while (data.length) {
	            if (data.length <= maxMsgSize) {
	              send({ id, type: Types.MESSAGE, data });
	              break
	            }
	            data = BufferList$2.isBufferList(data) ? data : new BufferList$2(data);
	            send({ id, type: Types.MESSAGE, data: data.shallowSlice(0, maxMsgSize) });
	            data.consume(maxMsgSize);
	          }
	        }
	      } catch (err) {
	        // Send no more data if this stream was remotely reset
	        if (err.code === ERR_MPLEX_STREAM_RESET) {
	          log$F('%s stream %s reset', type, name);
	        } else {
	          log$F('%s stream %s error', type, name, err);
	          send({ id, type: Types.RESET });
	        }

	        stream.source.end(err);
	        return onSinkEnd(err)
	      }

	      send({ id, type: Types.CLOSE });
	      onSinkEnd();
	    },
	    source: pushable$1(onSourceEnd),
	    timeline: {
	      open: Date.now(),
	      close: null
	    },
	    id: externalId
	  };

	  return stream
	};

	const pipe$g = itPipe.exports;
	const pushable = itPushable;
	const log$E = browser$a.exports('libp2p:mplex');
	const abortable$1 = abortableIterator.exports;
	const Coder = coder;
	const restrictSize = restrictSize$1.exports;
	const { MessageTypes, MessageTypeNames } = messageTypes;
	const createStream = stream$1;

	class Mplex {
	  /**
	   * @class
	   * @param {object} options
	   * @param {function(*)} options.onStream - Called whenever an inbound stream is created
	   * @param {function(*)} options.onStreamEnd - Called whenever a stream ends
	   * @param {AbortSignal} options.signal - An AbortController signal
	   */
	  constructor (options) {
	    options = options || {};
	    options = typeof options === 'function' ? { onStream: options } : options;

	    this._streamId = 0;
	    this._streams = {
	      /**
	       * @type {Map<number, *>} Stream to ids map
	       */
	      initiators: new Map(),
	      /**
	       * @type {Map<number, *>} Stream to ids map
	       */
	      receivers: new Map()
	    };
	    this._options = options;

	    /**
	     * An iterable sink
	     */
	    this.sink = this._createSink();

	    /**
	     * An iterable source
	     */
	    this.source = this._createSource();

	    /**
	     * @property {Function} onStream
	     */
	    this.onStream = options.onStream;

	    /**
	     * @property {Function} onStreamEnd
	     */
	    this.onStreamEnd = options.onStreamEnd;
	  }

	  /**
	   * Returns a Map of streams and their ids
	   *
	   * @returns {Map<number,*>}
	   */
	  get streams () {
	    // Inbound and Outbound streams may have the same ids, so we need to make those unique
	    const streams = [];
	    this._streams.initiators.forEach(stream => {
	      streams.push(stream);
	    });
	    this._streams.receivers.forEach(stream => {
	      streams.push(stream);
	    });
	    return streams
	  }

	  /**
	   * Initiate a new stream with the given name. If no name is
	   * provided, the id of th stream will be used.
	   *
	   * @param {string} [name] - If name is not a string it will be cast to one
	   * @returns {Stream}
	   */
	  newStream (name) {
	    const id = this._streamId++;
	    name = name == null ? id.toString() : String(name);
	    const registry = this._streams.initiators;
	    return this._newStream({ id, name, type: 'initiator', registry })
	  }

	  /**
	   * Called whenever an inbound stream is created
	   *
	   * @private
	   * @param {*} options
	   * @param {number} options.id
	   * @param {string} options.name
	   * @returns {*} A muxed stream
	   */
	  _newReceiverStream ({ id, name }) {
	    const registry = this._streams.receivers;
	    return this._newStream({ id, name, type: 'receiver', registry })
	  }

	  /**
	   * Creates a new stream
	   *
	   * @private
	   * @param {object} options
	   * @param {number} options.id
	   * @param {string} options.name
	   * @param {string} options.type
	   * @param {Map<number, *>} options.registry - A map of streams to their ids
	   * @returns {*} A muxed stream
	   */
	  _newStream ({ id, name, type, registry }) {
	    if (registry.has(id)) {
	      throw new Error(`${type} stream ${id} already exists!`)
	    }
	    log$E('new %s stream %s %s', type, id, name);
	    const send = msg => {
	      if (log$E.enabled) {
	        log$E('%s stream %s %s send', type, id, name, { ...msg, type: MessageTypeNames[msg.type], data: msg.data && msg.data.slice() });
	      }
	      return this.source.push(msg)
	    };
	    const onEnd = () => {
	      log$E('%s stream %s %s ended', type, id, name);
	      registry.delete(id);
	      this.onStreamEnd && this.onStreamEnd(stream);
	    };
	    const stream = createStream({ id, name, send, type, onEnd, maxMsgSize: this._options.maxMsgSize });
	    registry.set(id, stream);
	    return stream
	  }

	  /**
	   * Creates a sink with an abortable source. Incoming messages will
	   * also have their size restricted. All messages will be varint decoded.
	   *
	   * @private
	   * @returns {*} Returns an iterable sink
	   */
	  _createSink () {
	    return async source => {
	      if (this._options.signal) {
	        source = abortable$1(source, this._options.signal);
	      }

	      try {
	        await pipe$g(
	          source,
	          Coder.decode,
	          restrictSize(this._options.maxMsgSize),
	          async source => {
	            for await (const msgs of source) {
	              for (const msg of msgs) {
	                this._handleIncoming(msg);
	              }
	            }
	          }
	        );
	      } catch (err) {
	        log$E('error in sink', err);
	        return this.source.end(err) // End the source with an error
	      }

	      this.source.end();
	    }
	  }

	  /**
	   * Creates a source that restricts outgoing message sizes
	   * and varint encodes them.
	   *
	   * @private
	   * @returns {*} An iterable source
	   */
	  _createSource () {
	    const onEnd = err => {
	      const { initiators, receivers } = this._streams;
	      // Abort all the things!
	      for (const s of initiators.values()) s.abort(err);
	      for (const s of receivers.values()) s.abort(err);
	    };
	    const source = pushable({ onEnd, writev: true });
	    return Object.assign(Coder.encode(source), {
	      push: source.push,
	      end: source.end,
	      return: source.return
	    })
	  }

	  /**
	   * @private
	   * @param {object} options
	   * @param {number} options.id
	   * @param {string} options.type
	   * @param {Uint8Array|BufferList} options.data
	   * @returns {void}
	   */
	  _handleIncoming ({ id, type, data }) {
	    if (log$E.enabled) {
	      log$E('incoming message', { id, type: MessageTypeNames[type], data: data.slice() });
	    }

	    // Create a new stream?
	    if (type === MessageTypes.NEW_STREAM && this.onStream) {
	      const stream = this._newReceiverStream({ id, name: data.toString() });
	      return this.onStream(stream)
	    }

	    const list = type & 1 ? this._streams.initiators : this._streams.receivers;
	    const stream = list.get(id);

	    if (!stream) return log$E('missing stream %s', id)

	    switch (type) {
	      case MessageTypes.MESSAGE_INITIATOR:
	      case MessageTypes.MESSAGE_RECEIVER:
	        stream.source.push(data);
	        break
	      case MessageTypes.CLOSE_INITIATOR:
	      case MessageTypes.CLOSE_RECEIVER:
	        stream.close();
	        break
	      case MessageTypes.RESET_INITIATOR:
	      case MessageTypes.RESET_RECEIVER:
	        stream.reset();
	        break
	      default:
	        log$E('unknown message type %s', type);
	    }
	  }
	}

	Mplex.multicodec = '/mplex/6.7.0';

	var mplex = Mplex;

	var src$c = mplex;

	var src$b = {};

	var noise = {};

	var x25519$2 = {};

	var random = {};

	var system = {};

	var browser$3 = {};

	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(browser$3, "__esModule", { value: true });
	var QUOTA = 65536;
	var BrowserRandomSource = /** @class */ (function () {
	    function BrowserRandomSource() {
	        this.isAvailable = false;
	        this.isInstantiated = false;
	        var browserCrypto = typeof self !== 'undefined'
	            ? (self.crypto || self.msCrypto) // IE11 has msCrypto
	            : null;
	        if (browserCrypto && browserCrypto.getRandomValues) {
	            this._crypto = browserCrypto;
	            this.isAvailable = true;
	            this.isInstantiated = true;
	        }
	    }
	    BrowserRandomSource.prototype.randomBytes = function (length) {
	        if (!this.isAvailable || !this._crypto) {
	            throw new Error("Browser random byte generator is not available.");
	        }
	        var out = new Uint8Array(length);
	        for (var i = 0; i < out.length; i += QUOTA) {
	            this._crypto.getRandomValues(out.subarray(i, i + Math.min(out.length - i, QUOTA)));
	        }
	        return out;
	    };
	    return BrowserRandomSource;
	}());
	browser$3.BrowserRandomSource = BrowserRandomSource;

	var node = {};

	var wipe$1 = {};

	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(wipe$1, "__esModule", { value: true });
	/**
	 * Sets all values in the given array to zero and returns it.
	 *
	 * The fact that it sets bytes to zero can be relied on.
	 *
	 * There is no guarantee that this function makes data disappear from memory,
	 * as runtime implementation can, for example, have copying garbage collector
	 * that will make copies of sensitive data before we wipe it. Or that an
	 * operating system will write our data to swap or sleep image. Another thing
	 * is that an optimizing compiler can remove calls to this function or make it
	 * no-op. There's nothing we can do with it, so we just do our best and hope
	 * that everything will be okay and good will triumph over evil.
	 */
	function wipe(array) {
	    // Right now it's similar to array.fill(0). If it turns
	    // out that runtimes optimize this call away, maybe
	    // we can try something else.
	    for (var i = 0; i < array.length; i++) {
	        array[i] = 0;
	    }
	    return array;
	}
	wipe$1.wipe = wipe;

	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(node, "__esModule", { value: true });
	var wipe_1$3 = wipe$1;
	var NodeRandomSource = /** @class */ (function () {
	    function NodeRandomSource() {
	        this.isAvailable = false;
	        this.isInstantiated = false;
	        if (typeof commonjsRequire !== "undefined") {
	            var nodeCrypto = require$$1$7;
	            if (nodeCrypto && nodeCrypto.randomBytes) {
	                this._crypto = nodeCrypto;
	                this.isAvailable = true;
	                this.isInstantiated = true;
	            }
	        }
	    }
	    NodeRandomSource.prototype.randomBytes = function (length) {
	        if (!this.isAvailable || !this._crypto) {
	            throw new Error("Node.js random byte generator is not available.");
	        }
	        // Get random bytes (result is Buffer).
	        var buffer = this._crypto.randomBytes(length);
	        // Make sure we got the length that we requested.
	        if (buffer.length !== length) {
	            throw new Error("NodeRandomSource: got fewer bytes than requested");
	        }
	        // Allocate output array.
	        var out = new Uint8Array(length);
	        // Copy bytes from buffer to output.
	        for (var i = 0; i < out.length; i++) {
	            out[i] = buffer[i];
	        }
	        // Cleanup.
	        wipe_1$3.wipe(buffer);
	        return out;
	    };
	    return NodeRandomSource;
	}());
	node.NodeRandomSource = NodeRandomSource;

	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(system, "__esModule", { value: true });
	var browser_1 = browser$3;
	var node_1 = node;
	var SystemRandomSource = /** @class */ (function () {
	    function SystemRandomSource() {
	        this.isAvailable = false;
	        this.name = "";
	        // Try browser.
	        this._source = new browser_1.BrowserRandomSource();
	        if (this._source.isAvailable) {
	            this.isAvailable = true;
	            this.name = "Browser";
	            return;
	        }
	        // If no browser source, try Node.
	        this._source = new node_1.NodeRandomSource();
	        if (this._source.isAvailable) {
	            this.isAvailable = true;
	            this.name = "Node";
	            return;
	        }
	        // No sources, we're out of options.
	    }
	    SystemRandomSource.prototype.randomBytes = function (length) {
	        if (!this.isAvailable) {
	            throw new Error("System random byte generator is not available.");
	        }
	        return this._source.randomBytes(length);
	    };
	    return SystemRandomSource;
	}());
	system.SystemRandomSource = SystemRandomSource;

	var binary = {};

	var int = {};

	(function (exports) {
	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Package int provides helper functions for integerss.
	 */
	// Shim using 16-bit pieces.
	function imulShim(a, b) {
	    var ah = (a >>> 16) & 0xffff, al = a & 0xffff;
	    var bh = (b >>> 16) & 0xffff, bl = b & 0xffff;
	    return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0);
	}
	/** 32-bit integer multiplication.  */
	// Use system Math.imul if available, otherwise use our shim.
	exports.mul = Math.imul || imulShim;
	/** 32-bit integer addition.  */
	function add(a, b) {
	    return (a + b) | 0;
	}
	exports.add = add;
	/**  32-bit integer subtraction.  */
	function sub(a, b) {
	    return (a - b) | 0;
	}
	exports.sub = sub;
	/** 32-bit integer left rotation */
	function rotl(x, n) {
	    return x << n | x >>> (32 - n);
	}
	exports.rotl = rotl;
	/** 32-bit integer left rotation */
	function rotr(x, n) {
	    return x << (32 - n) | x >>> n;
	}
	exports.rotr = rotr;
	function isIntegerShim(n) {
	    return typeof n === "number" && isFinite(n) && Math.floor(n) === n;
	}
	/**
	 * Returns true if the argument is an integer number.
	 *
	 * In ES2015, Number.isInteger.
	 */
	exports.isInteger = Number.isInteger || isIntegerShim;
	/**
	 *  Math.pow(2, 53) - 1
	 *
	 *  In ES2015 Number.MAX_SAFE_INTEGER.
	 */
	exports.MAX_SAFE_INTEGER = 9007199254740991;
	/**
	 * Returns true if the argument is a safe integer number
	 * (-MIN_SAFE_INTEGER < number <= MAX_SAFE_INTEGER)
	 *
	 * In ES2015, Number.isSafeInteger.
	 */
	exports.isSafeInteger = function (n) {
	    return exports.isInteger(n) && (n >= -exports.MAX_SAFE_INTEGER && n <= exports.MAX_SAFE_INTEGER);
	};

	}(int));

	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(binary, "__esModule", { value: true });
	/**
	 * Package binary provides functions for encoding and decoding numbers in byte arrays.
	 */
	var int_1 = int;
	// TODO(dchest): add asserts for correct value ranges and array offsets.
	/**
	 * Reads 2 bytes from array starting at offset as big-endian
	 * signed 16-bit integer and returns it.
	 */
	function readInt16BE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    return (((array[offset + 0] << 8) | array[offset + 1]) << 16) >> 16;
	}
	binary.readInt16BE = readInt16BE;
	/**
	 * Reads 2 bytes from array starting at offset as big-endian
	 * unsigned 16-bit integer and returns it.
	 */
	function readUint16BE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    return ((array[offset + 0] << 8) | array[offset + 1]) >>> 0;
	}
	binary.readUint16BE = readUint16BE;
	/**
	 * Reads 2 bytes from array starting at offset as little-endian
	 * signed 16-bit integer and returns it.
	 */
	function readInt16LE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    return (((array[offset + 1] << 8) | array[offset]) << 16) >> 16;
	}
	binary.readInt16LE = readInt16LE;
	/**
	 * Reads 2 bytes from array starting at offset as little-endian
	 * unsigned 16-bit integer and returns it.
	 */
	function readUint16LE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    return ((array[offset + 1] << 8) | array[offset]) >>> 0;
	}
	binary.readUint16LE = readUint16LE;
	/**
	 * Writes 2-byte big-endian representation of 16-bit unsigned
	 * value to byte array starting at offset.
	 *
	 * If byte array is not given, creates a new 2-byte one.
	 *
	 * Returns the output byte array.
	 */
	function writeUint16BE(value, out, offset) {
	    if (out === void 0) { out = new Uint8Array(2); }
	    if (offset === void 0) { offset = 0; }
	    out[offset + 0] = value >>> 8;
	    out[offset + 1] = value >>> 0;
	    return out;
	}
	binary.writeUint16BE = writeUint16BE;
	binary.writeInt16BE = writeUint16BE;
	/**
	 * Writes 2-byte little-endian representation of 16-bit unsigned
	 * value to array starting at offset.
	 *
	 * If byte array is not given, creates a new 2-byte one.
	 *
	 * Returns the output byte array.
	 */
	function writeUint16LE(value, out, offset) {
	    if (out === void 0) { out = new Uint8Array(2); }
	    if (offset === void 0) { offset = 0; }
	    out[offset + 0] = value >>> 0;
	    out[offset + 1] = value >>> 8;
	    return out;
	}
	binary.writeUint16LE = writeUint16LE;
	binary.writeInt16LE = writeUint16LE;
	/**
	 * Reads 4 bytes from array starting at offset as big-endian
	 * signed 32-bit integer and returns it.
	 */
	function readInt32BE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    return (array[offset] << 24) |
	        (array[offset + 1] << 16) |
	        (array[offset + 2] << 8) |
	        array[offset + 3];
	}
	binary.readInt32BE = readInt32BE;
	/**
	 * Reads 4 bytes from array starting at offset as big-endian
	 * unsigned 32-bit integer and returns it.
	 */
	function readUint32BE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    return ((array[offset] << 24) |
	        (array[offset + 1] << 16) |
	        (array[offset + 2] << 8) |
	        array[offset + 3]) >>> 0;
	}
	binary.readUint32BE = readUint32BE;
	/**
	 * Reads 4 bytes from array starting at offset as little-endian
	 * signed 32-bit integer and returns it.
	 */
	function readInt32LE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    return (array[offset + 3] << 24) |
	        (array[offset + 2] << 16) |
	        (array[offset + 1] << 8) |
	        array[offset];
	}
	binary.readInt32LE = readInt32LE;
	/**
	 * Reads 4 bytes from array starting at offset as little-endian
	 * unsigned 32-bit integer and returns it.
	 */
	function readUint32LE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    return ((array[offset + 3] << 24) |
	        (array[offset + 2] << 16) |
	        (array[offset + 1] << 8) |
	        array[offset]) >>> 0;
	}
	binary.readUint32LE = readUint32LE;
	/**
	 * Writes 4-byte big-endian representation of 32-bit unsigned
	 * value to byte array starting at offset.
	 *
	 * If byte array is not given, creates a new 4-byte one.
	 *
	 * Returns the output byte array.
	 */
	function writeUint32BE(value, out, offset) {
	    if (out === void 0) { out = new Uint8Array(4); }
	    if (offset === void 0) { offset = 0; }
	    out[offset + 0] = value >>> 24;
	    out[offset + 1] = value >>> 16;
	    out[offset + 2] = value >>> 8;
	    out[offset + 3] = value >>> 0;
	    return out;
	}
	binary.writeUint32BE = writeUint32BE;
	binary.writeInt32BE = writeUint32BE;
	/**
	 * Writes 4-byte little-endian representation of 32-bit unsigned
	 * value to array starting at offset.
	 *
	 * If byte array is not given, creates a new 4-byte one.
	 *
	 * Returns the output byte array.
	 */
	function writeUint32LE(value, out, offset) {
	    if (out === void 0) { out = new Uint8Array(4); }
	    if (offset === void 0) { offset = 0; }
	    out[offset + 0] = value >>> 0;
	    out[offset + 1] = value >>> 8;
	    out[offset + 2] = value >>> 16;
	    out[offset + 3] = value >>> 24;
	    return out;
	}
	binary.writeUint32LE = writeUint32LE;
	binary.writeInt32LE = writeUint32LE;
	/**
	 * Reads 8 bytes from array starting at offset as big-endian
	 * signed 64-bit integer and returns it.
	 *
	 * IMPORTANT: due to JavaScript limitation, supports exact
	 * numbers in range -9007199254740991 to 9007199254740991.
	 * If the number stored in the byte array is outside this range,
	 * the result is not exact.
	 */
	function readInt64BE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    var hi = readInt32BE(array, offset);
	    var lo = readInt32BE(array, offset + 4);
	    return hi * 0x100000000 + lo - ((lo >> 31) * 0x100000000);
	}
	binary.readInt64BE = readInt64BE;
	/**
	 * Reads 8 bytes from array starting at offset as big-endian
	 * unsigned 64-bit integer and returns it.
	 *
	 * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.
	 */
	function readUint64BE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    var hi = readUint32BE(array, offset);
	    var lo = readUint32BE(array, offset + 4);
	    return hi * 0x100000000 + lo;
	}
	binary.readUint64BE = readUint64BE;
	/**
	 * Reads 8 bytes from array starting at offset as little-endian
	 * signed 64-bit integer and returns it.
	 *
	 * IMPORTANT: due to JavaScript limitation, supports exact
	 * numbers in range -9007199254740991 to 9007199254740991.
	 * If the number stored in the byte array is outside this range,
	 * the result is not exact.
	 */
	function readInt64LE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    var lo = readInt32LE(array, offset);
	    var hi = readInt32LE(array, offset + 4);
	    return hi * 0x100000000 + lo - ((lo >> 31) * 0x100000000);
	}
	binary.readInt64LE = readInt64LE;
	/**
	 * Reads 8 bytes from array starting at offset as little-endian
	 * unsigned 64-bit integer and returns it.
	 *
	 * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.
	 */
	function readUint64LE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    var lo = readUint32LE(array, offset);
	    var hi = readUint32LE(array, offset + 4);
	    return hi * 0x100000000 + lo;
	}
	binary.readUint64LE = readUint64LE;
	/**
	 * Writes 8-byte big-endian representation of 64-bit unsigned
	 * value to byte array starting at offset.
	 *
	 * Due to JavaScript limitation, supports values up to 2^53-1.
	 *
	 * If byte array is not given, creates a new 8-byte one.
	 *
	 * Returns the output byte array.
	 */
	function writeUint64BE(value, out, offset) {
	    if (out === void 0) { out = new Uint8Array(8); }
	    if (offset === void 0) { offset = 0; }
	    writeUint32BE(value / 0x100000000 >>> 0, out, offset);
	    writeUint32BE(value >>> 0, out, offset + 4);
	    return out;
	}
	binary.writeUint64BE = writeUint64BE;
	binary.writeInt64BE = writeUint64BE;
	/**
	 * Writes 8-byte little-endian representation of 64-bit unsigned
	 * value to byte array starting at offset.
	 *
	 * Due to JavaScript limitation, supports values up to 2^53-1.
	 *
	 * If byte array is not given, creates a new 8-byte one.
	 *
	 * Returns the output byte array.
	 */
	function writeUint64LE(value, out, offset) {
	    if (out === void 0) { out = new Uint8Array(8); }
	    if (offset === void 0) { offset = 0; }
	    writeUint32LE(value >>> 0, out, offset);
	    writeUint32LE(value / 0x100000000 >>> 0, out, offset + 4);
	    return out;
	}
	binary.writeUint64LE = writeUint64LE;
	binary.writeInt64LE = writeUint64LE;
	/**
	 * Reads bytes from array starting at offset as big-endian
	 * unsigned bitLen-bit integer and returns it.
	 *
	 * Supports bit lengths divisible by 8, up to 48.
	 */
	function readUintBE(bitLength, array, offset) {
	    if (offset === void 0) { offset = 0; }
	    // TODO(dchest): implement support for bitLengths non-divisible by 8
	    if (bitLength % 8 !== 0) {
	        throw new Error("readUintBE supports only bitLengths divisible by 8");
	    }
	    if (bitLength / 8 > array.length - offset) {
	        throw new Error("readUintBE: array is too short for the given bitLength");
	    }
	    var result = 0;
	    var mul = 1;
	    for (var i = bitLength / 8 + offset - 1; i >= offset; i--) {
	        result += array[i] * mul;
	        mul *= 256;
	    }
	    return result;
	}
	binary.readUintBE = readUintBE;
	/**
	 * Reads bytes from array starting at offset as little-endian
	 * unsigned bitLen-bit integer and returns it.
	 *
	 * Supports bit lengths divisible by 8, up to 48.
	 */
	function readUintLE(bitLength, array, offset) {
	    if (offset === void 0) { offset = 0; }
	    // TODO(dchest): implement support for bitLengths non-divisible by 8
	    if (bitLength % 8 !== 0) {
	        throw new Error("readUintLE supports only bitLengths divisible by 8");
	    }
	    if (bitLength / 8 > array.length - offset) {
	        throw new Error("readUintLE: array is too short for the given bitLength");
	    }
	    var result = 0;
	    var mul = 1;
	    for (var i = offset; i < offset + bitLength / 8; i++) {
	        result += array[i] * mul;
	        mul *= 256;
	    }
	    return result;
	}
	binary.readUintLE = readUintLE;
	/**
	 * Writes a big-endian representation of bitLen-bit unsigned
	 * value to array starting at offset.
	 *
	 * Supports bit lengths divisible by 8, up to 48.
	 *
	 * If byte array is not given, creates a new one.
	 *
	 * Returns the output byte array.
	 */
	function writeUintBE(bitLength, value, out, offset) {
	    if (out === void 0) { out = new Uint8Array(bitLength / 8); }
	    if (offset === void 0) { offset = 0; }
	    // TODO(dchest): implement support for bitLengths non-divisible by 8
	    if (bitLength % 8 !== 0) {
	        throw new Error("writeUintBE supports only bitLengths divisible by 8");
	    }
	    if (!int_1.isSafeInteger(value)) {
	        throw new Error("writeUintBE value must be an integer");
	    }
	    var div = 1;
	    for (var i = bitLength / 8 + offset - 1; i >= offset; i--) {
	        out[i] = (value / div) & 0xff;
	        div *= 256;
	    }
	    return out;
	}
	binary.writeUintBE = writeUintBE;
	/**
	 * Writes a little-endian representation of bitLen-bit unsigned
	 * value to array starting at offset.
	 *
	 * Supports bit lengths divisible by 8, up to 48.
	 *
	 * If byte array is not given, creates a new one.
	 *
	 * Returns the output byte array.
	 */
	function writeUintLE(bitLength, value, out, offset) {
	    if (out === void 0) { out = new Uint8Array(bitLength / 8); }
	    if (offset === void 0) { offset = 0; }
	    // TODO(dchest): implement support for bitLengths non-divisible by 8
	    if (bitLength % 8 !== 0) {
	        throw new Error("writeUintLE supports only bitLengths divisible by 8");
	    }
	    if (!int_1.isSafeInteger(value)) {
	        throw new Error("writeUintLE value must be an integer");
	    }
	    var div = 1;
	    for (var i = offset; i < offset + bitLength / 8; i++) {
	        out[i] = (value / div) & 0xff;
	        div *= 256;
	    }
	    return out;
	}
	binary.writeUintLE = writeUintLE;
	/**
	 * Reads 4 bytes from array starting at offset as big-endian
	 * 32-bit floating-point number and returns it.
	 */
	function readFloat32BE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
	    return view.getFloat32(offset);
	}
	binary.readFloat32BE = readFloat32BE;
	/**
	 * Reads 4 bytes from array starting at offset as little-endian
	 * 32-bit floating-point number and returns it.
	 */
	function readFloat32LE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
	    return view.getFloat32(offset, true);
	}
	binary.readFloat32LE = readFloat32LE;
	/**
	 * Reads 8 bytes from array starting at offset as big-endian
	 * 64-bit floating-point number ("double") and returns it.
	 */
	function readFloat64BE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
	    return view.getFloat64(offset);
	}
	binary.readFloat64BE = readFloat64BE;
	/**
	 * Reads 8 bytes from array starting at offset as little-endian
	 * 64-bit floating-point number ("double") and returns it.
	 */
	function readFloat64LE(array, offset) {
	    if (offset === void 0) { offset = 0; }
	    var view = new DataView(array.buffer, array.byteOffset, array.byteLength);
	    return view.getFloat64(offset, true);
	}
	binary.readFloat64LE = readFloat64LE;
	/**
	 * Writes 4-byte big-endian floating-point representation of value
	 * to byte array starting at offset.
	 *
	 * If byte array is not given, creates a new 4-byte one.
	 *
	 * Returns the output byte array.
	 */
	function writeFloat32BE(value, out, offset) {
	    if (out === void 0) { out = new Uint8Array(4); }
	    if (offset === void 0) { offset = 0; }
	    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
	    view.setFloat32(offset, value);
	    return out;
	}
	binary.writeFloat32BE = writeFloat32BE;
	/**
	 * Writes 4-byte little-endian floating-point representation of value
	 * to byte array starting at offset.
	 *
	 * If byte array is not given, creates a new 4-byte one.
	 *
	 * Returns the output byte array.
	 */
	function writeFloat32LE(value, out, offset) {
	    if (out === void 0) { out = new Uint8Array(4); }
	    if (offset === void 0) { offset = 0; }
	    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
	    view.setFloat32(offset, value, true);
	    return out;
	}
	binary.writeFloat32LE = writeFloat32LE;
	/**
	 * Writes 8-byte big-endian floating-point representation of value
	 * to byte array starting at offset.
	 *
	 * If byte array is not given, creates a new 8-byte one.
	 *
	 * Returns the output byte array.
	 */
	function writeFloat64BE(value, out, offset) {
	    if (out === void 0) { out = new Uint8Array(8); }
	    if (offset === void 0) { offset = 0; }
	    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
	    view.setFloat64(offset, value);
	    return out;
	}
	binary.writeFloat64BE = writeFloat64BE;
	/**
	 * Writes 8-byte little-endian floating-point representation of value
	 * to byte array starting at offset.
	 *
	 * If byte array is not given, creates a new 8-byte one.
	 *
	 * Returns the output byte array.
	 */
	function writeFloat64LE(value, out, offset) {
	    if (out === void 0) { out = new Uint8Array(8); }
	    if (offset === void 0) { offset = 0; }
	    var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
	    view.setFloat64(offset, value, true);
	    return out;
	}
	binary.writeFloat64LE = writeFloat64LE;

	(function (exports) {
	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(exports, "__esModule", { value: true });
	var system_1 = system;
	var binary_1 = binary;
	var wipe_1 = wipe$1;
	exports.defaultRandomSource = new system_1.SystemRandomSource();
	function randomBytes(length, prng) {
	    if (prng === void 0) { prng = exports.defaultRandomSource; }
	    return prng.randomBytes(length);
	}
	exports.randomBytes = randomBytes;
	/**
	 * Returns a uniformly random unsigned 32-bit integer.
	 */
	function randomUint32(prng) {
	    if (prng === void 0) { prng = exports.defaultRandomSource; }
	    // Generate 4-byte random buffer.
	    var buf = randomBytes(4, prng);
	    // Convert bytes from buffer into a 32-bit integer.
	    // It's not important which byte order to use, since
	    // the result is random.
	    var result = binary_1.readUint32LE(buf);
	    // Clean the buffer.
	    wipe_1.wipe(buf);
	    return result;
	}
	exports.randomUint32 = randomUint32;
	/** 62 alphanumeric characters for default charset of randomString() */
	var ALPHANUMERIC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
	/**
	 * Returns a uniform random string of the given length
	 * with characters from the given charset.
	 *
	 * Charset must not have more than 256 characters.
	 *
	 * Default charset generates case-sensitive alphanumeric
	 * strings (0-9, A-Z, a-z).
	 */
	function randomString(length, charset, prng) {
	    if (charset === void 0) { charset = ALPHANUMERIC; }
	    if (prng === void 0) { prng = exports.defaultRandomSource; }
	    if (charset.length < 2) {
	        throw new Error("randomString charset is too short");
	    }
	    if (charset.length > 256) {
	        throw new Error("randomString charset is too long");
	    }
	    var out = '';
	    var charsLen = charset.length;
	    var maxByte = 256 - (256 % charsLen);
	    while (length > 0) {
	        var buf = randomBytes(Math.ceil(length * 256 / maxByte), prng);
	        for (var i = 0; i < buf.length && length > 0; i++) {
	            var randomByte = buf[i];
	            if (randomByte < maxByte) {
	                out += charset.charAt(randomByte % charsLen);
	                length--;
	            }
	        }
	        wipe_1.wipe(buf);
	    }
	    return out;
	}
	exports.randomString = randomString;
	/**
	 * Returns uniform random string containing at least the given
	 * number of bits of entropy.
	 *
	 * For example, randomStringForEntropy(128) will return a 22-character
	 * alphanumeric string, while randomStringForEntropy(128, "0123456789")
	 * will return a 39-character numeric string, both will contain at
	 * least 128 bits of entropy.
	 *
	 * Default charset generates case-sensitive alphanumeric
	 * strings (0-9, A-Z, a-z).
	 */
	function randomStringForEntropy(bits, charset, prng) {
	    if (charset === void 0) { charset = ALPHANUMERIC; }
	    if (prng === void 0) { prng = exports.defaultRandomSource; }
	    var length = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));
	    return randomString(length, charset, prng);
	}
	exports.randomStringForEntropy = randomStringForEntropy;

	}(random));

	(function (exports) {
	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Package x25519 implements X25519 key agreement.
	 */
	var random_1 = random;
	var wipe_1 = wipe$1;
	exports.PUBLIC_KEY_LENGTH = 32;
	exports.SECRET_KEY_LENGTH = 32;
	exports.SHARED_KEY_LENGTH = 32;
	// Returns new zero-filled 16-element GF (Float64Array).
	// If passed an array of numbers, prefills the returned
	// array with them.
	//
	// We use Float64Array, because we need 48-bit numbers
	// for this implementation.
	function gf(init) {
	    var r = new Float64Array(16);
	    if (init) {
	        for (var i = 0; i < init.length; i++) {
	            r[i] = init[i];
	        }
	    }
	    return r;
	}
	// Base point.
	var _9 = new Uint8Array(32);
	_9[0] = 9;
	var _121665 = gf([0xdb41, 1]);
	function car25519(o) {
	    var c = 1;
	    for (var i = 0; i < 16; i++) {
	        var v = o[i] + c + 65535;
	        c = Math.floor(v / 65536);
	        o[i] = v - c * 65536;
	    }
	    o[0] += c - 1 + 37 * (c - 1);
	}
	function sel25519(p, q, b) {
	    var c = ~(b - 1);
	    for (var i = 0; i < 16; i++) {
	        var t = c & (p[i] ^ q[i]);
	        p[i] ^= t;
	        q[i] ^= t;
	    }
	}
	function pack25519(o, n) {
	    var m = gf();
	    var t = gf();
	    for (var i = 0; i < 16; i++) {
	        t[i] = n[i];
	    }
	    car25519(t);
	    car25519(t);
	    car25519(t);
	    for (var j = 0; j < 2; j++) {
	        m[0] = t[0] - 0xffed;
	        for (var i = 1; i < 15; i++) {
	            m[i] = t[i] - 0xffff - ((m[i - 1] >> 16) & 1);
	            m[i - 1] &= 0xffff;
	        }
	        m[15] = t[15] - 0x7fff - ((m[14] >> 16) & 1);
	        var b = (m[15] >> 16) & 1;
	        m[14] &= 0xffff;
	        sel25519(t, m, 1 - b);
	    }
	    for (var i = 0; i < 16; i++) {
	        o[2 * i] = t[i] & 0xff;
	        o[2 * i + 1] = t[i] >> 8;
	    }
	}
	function unpack25519(o, n) {
	    for (var i = 0; i < 16; i++) {
	        o[i] = n[2 * i] + (n[2 * i + 1] << 8);
	    }
	    o[15] &= 0x7fff;
	}
	function add(o, a, b) {
	    for (var i = 0; i < 16; i++) {
	        o[i] = a[i] + b[i];
	    }
	}
	function sub(o, a, b) {
	    for (var i = 0; i < 16; i++) {
	        o[i] = a[i] - b[i];
	    }
	}
	function mul(o, a, b) {
	    var v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
	    v = a[0];
	    t0 += v * b0;
	    t1 += v * b1;
	    t2 += v * b2;
	    t3 += v * b3;
	    t4 += v * b4;
	    t5 += v * b5;
	    t6 += v * b6;
	    t7 += v * b7;
	    t8 += v * b8;
	    t9 += v * b9;
	    t10 += v * b10;
	    t11 += v * b11;
	    t12 += v * b12;
	    t13 += v * b13;
	    t14 += v * b14;
	    t15 += v * b15;
	    v = a[1];
	    t1 += v * b0;
	    t2 += v * b1;
	    t3 += v * b2;
	    t4 += v * b3;
	    t5 += v * b4;
	    t6 += v * b5;
	    t7 += v * b6;
	    t8 += v * b7;
	    t9 += v * b8;
	    t10 += v * b9;
	    t11 += v * b10;
	    t12 += v * b11;
	    t13 += v * b12;
	    t14 += v * b13;
	    t15 += v * b14;
	    t16 += v * b15;
	    v = a[2];
	    t2 += v * b0;
	    t3 += v * b1;
	    t4 += v * b2;
	    t5 += v * b3;
	    t6 += v * b4;
	    t7 += v * b5;
	    t8 += v * b6;
	    t9 += v * b7;
	    t10 += v * b8;
	    t11 += v * b9;
	    t12 += v * b10;
	    t13 += v * b11;
	    t14 += v * b12;
	    t15 += v * b13;
	    t16 += v * b14;
	    t17 += v * b15;
	    v = a[3];
	    t3 += v * b0;
	    t4 += v * b1;
	    t5 += v * b2;
	    t6 += v * b3;
	    t7 += v * b4;
	    t8 += v * b5;
	    t9 += v * b6;
	    t10 += v * b7;
	    t11 += v * b8;
	    t12 += v * b9;
	    t13 += v * b10;
	    t14 += v * b11;
	    t15 += v * b12;
	    t16 += v * b13;
	    t17 += v * b14;
	    t18 += v * b15;
	    v = a[4];
	    t4 += v * b0;
	    t5 += v * b1;
	    t6 += v * b2;
	    t7 += v * b3;
	    t8 += v * b4;
	    t9 += v * b5;
	    t10 += v * b6;
	    t11 += v * b7;
	    t12 += v * b8;
	    t13 += v * b9;
	    t14 += v * b10;
	    t15 += v * b11;
	    t16 += v * b12;
	    t17 += v * b13;
	    t18 += v * b14;
	    t19 += v * b15;
	    v = a[5];
	    t5 += v * b0;
	    t6 += v * b1;
	    t7 += v * b2;
	    t8 += v * b3;
	    t9 += v * b4;
	    t10 += v * b5;
	    t11 += v * b6;
	    t12 += v * b7;
	    t13 += v * b8;
	    t14 += v * b9;
	    t15 += v * b10;
	    t16 += v * b11;
	    t17 += v * b12;
	    t18 += v * b13;
	    t19 += v * b14;
	    t20 += v * b15;
	    v = a[6];
	    t6 += v * b0;
	    t7 += v * b1;
	    t8 += v * b2;
	    t9 += v * b3;
	    t10 += v * b4;
	    t11 += v * b5;
	    t12 += v * b6;
	    t13 += v * b7;
	    t14 += v * b8;
	    t15 += v * b9;
	    t16 += v * b10;
	    t17 += v * b11;
	    t18 += v * b12;
	    t19 += v * b13;
	    t20 += v * b14;
	    t21 += v * b15;
	    v = a[7];
	    t7 += v * b0;
	    t8 += v * b1;
	    t9 += v * b2;
	    t10 += v * b3;
	    t11 += v * b4;
	    t12 += v * b5;
	    t13 += v * b6;
	    t14 += v * b7;
	    t15 += v * b8;
	    t16 += v * b9;
	    t17 += v * b10;
	    t18 += v * b11;
	    t19 += v * b12;
	    t20 += v * b13;
	    t21 += v * b14;
	    t22 += v * b15;
	    v = a[8];
	    t8 += v * b0;
	    t9 += v * b1;
	    t10 += v * b2;
	    t11 += v * b3;
	    t12 += v * b4;
	    t13 += v * b5;
	    t14 += v * b6;
	    t15 += v * b7;
	    t16 += v * b8;
	    t17 += v * b9;
	    t18 += v * b10;
	    t19 += v * b11;
	    t20 += v * b12;
	    t21 += v * b13;
	    t22 += v * b14;
	    t23 += v * b15;
	    v = a[9];
	    t9 += v * b0;
	    t10 += v * b1;
	    t11 += v * b2;
	    t12 += v * b3;
	    t13 += v * b4;
	    t14 += v * b5;
	    t15 += v * b6;
	    t16 += v * b7;
	    t17 += v * b8;
	    t18 += v * b9;
	    t19 += v * b10;
	    t20 += v * b11;
	    t21 += v * b12;
	    t22 += v * b13;
	    t23 += v * b14;
	    t24 += v * b15;
	    v = a[10];
	    t10 += v * b0;
	    t11 += v * b1;
	    t12 += v * b2;
	    t13 += v * b3;
	    t14 += v * b4;
	    t15 += v * b5;
	    t16 += v * b6;
	    t17 += v * b7;
	    t18 += v * b8;
	    t19 += v * b9;
	    t20 += v * b10;
	    t21 += v * b11;
	    t22 += v * b12;
	    t23 += v * b13;
	    t24 += v * b14;
	    t25 += v * b15;
	    v = a[11];
	    t11 += v * b0;
	    t12 += v * b1;
	    t13 += v * b2;
	    t14 += v * b3;
	    t15 += v * b4;
	    t16 += v * b5;
	    t17 += v * b6;
	    t18 += v * b7;
	    t19 += v * b8;
	    t20 += v * b9;
	    t21 += v * b10;
	    t22 += v * b11;
	    t23 += v * b12;
	    t24 += v * b13;
	    t25 += v * b14;
	    t26 += v * b15;
	    v = a[12];
	    t12 += v * b0;
	    t13 += v * b1;
	    t14 += v * b2;
	    t15 += v * b3;
	    t16 += v * b4;
	    t17 += v * b5;
	    t18 += v * b6;
	    t19 += v * b7;
	    t20 += v * b8;
	    t21 += v * b9;
	    t22 += v * b10;
	    t23 += v * b11;
	    t24 += v * b12;
	    t25 += v * b13;
	    t26 += v * b14;
	    t27 += v * b15;
	    v = a[13];
	    t13 += v * b0;
	    t14 += v * b1;
	    t15 += v * b2;
	    t16 += v * b3;
	    t17 += v * b4;
	    t18 += v * b5;
	    t19 += v * b6;
	    t20 += v * b7;
	    t21 += v * b8;
	    t22 += v * b9;
	    t23 += v * b10;
	    t24 += v * b11;
	    t25 += v * b12;
	    t26 += v * b13;
	    t27 += v * b14;
	    t28 += v * b15;
	    v = a[14];
	    t14 += v * b0;
	    t15 += v * b1;
	    t16 += v * b2;
	    t17 += v * b3;
	    t18 += v * b4;
	    t19 += v * b5;
	    t20 += v * b6;
	    t21 += v * b7;
	    t22 += v * b8;
	    t23 += v * b9;
	    t24 += v * b10;
	    t25 += v * b11;
	    t26 += v * b12;
	    t27 += v * b13;
	    t28 += v * b14;
	    t29 += v * b15;
	    v = a[15];
	    t15 += v * b0;
	    t16 += v * b1;
	    t17 += v * b2;
	    t18 += v * b3;
	    t19 += v * b4;
	    t20 += v * b5;
	    t21 += v * b6;
	    t22 += v * b7;
	    t23 += v * b8;
	    t24 += v * b9;
	    t25 += v * b10;
	    t26 += v * b11;
	    t27 += v * b12;
	    t28 += v * b13;
	    t29 += v * b14;
	    t30 += v * b15;
	    t0 += 38 * t16;
	    t1 += 38 * t17;
	    t2 += 38 * t18;
	    t3 += 38 * t19;
	    t4 += 38 * t20;
	    t5 += 38 * t21;
	    t6 += 38 * t22;
	    t7 += 38 * t23;
	    t8 += 38 * t24;
	    t9 += 38 * t25;
	    t10 += 38 * t26;
	    t11 += 38 * t27;
	    t12 += 38 * t28;
	    t13 += 38 * t29;
	    t14 += 38 * t30;
	    // t15 left as is
	    // first car
	    c = 1;
	    v = t0 + c + 65535;
	    c = Math.floor(v / 65536);
	    t0 = v - c * 65536;
	    v = t1 + c + 65535;
	    c = Math.floor(v / 65536);
	    t1 = v - c * 65536;
	    v = t2 + c + 65535;
	    c = Math.floor(v / 65536);
	    t2 = v - c * 65536;
	    v = t3 + c + 65535;
	    c = Math.floor(v / 65536);
	    t3 = v - c * 65536;
	    v = t4 + c + 65535;
	    c = Math.floor(v / 65536);
	    t4 = v - c * 65536;
	    v = t5 + c + 65535;
	    c = Math.floor(v / 65536);
	    t5 = v - c * 65536;
	    v = t6 + c + 65535;
	    c = Math.floor(v / 65536);
	    t6 = v - c * 65536;
	    v = t7 + c + 65535;
	    c = Math.floor(v / 65536);
	    t7 = v - c * 65536;
	    v = t8 + c + 65535;
	    c = Math.floor(v / 65536);
	    t8 = v - c * 65536;
	    v = t9 + c + 65535;
	    c = Math.floor(v / 65536);
	    t9 = v - c * 65536;
	    v = t10 + c + 65535;
	    c = Math.floor(v / 65536);
	    t10 = v - c * 65536;
	    v = t11 + c + 65535;
	    c = Math.floor(v / 65536);
	    t11 = v - c * 65536;
	    v = t12 + c + 65535;
	    c = Math.floor(v / 65536);
	    t12 = v - c * 65536;
	    v = t13 + c + 65535;
	    c = Math.floor(v / 65536);
	    t13 = v - c * 65536;
	    v = t14 + c + 65535;
	    c = Math.floor(v / 65536);
	    t14 = v - c * 65536;
	    v = t15 + c + 65535;
	    c = Math.floor(v / 65536);
	    t15 = v - c * 65536;
	    t0 += c - 1 + 37 * (c - 1);
	    // second car
	    c = 1;
	    v = t0 + c + 65535;
	    c = Math.floor(v / 65536);
	    t0 = v - c * 65536;
	    v = t1 + c + 65535;
	    c = Math.floor(v / 65536);
	    t1 = v - c * 65536;
	    v = t2 + c + 65535;
	    c = Math.floor(v / 65536);
	    t2 = v - c * 65536;
	    v = t3 + c + 65535;
	    c = Math.floor(v / 65536);
	    t3 = v - c * 65536;
	    v = t4 + c + 65535;
	    c = Math.floor(v / 65536);
	    t4 = v - c * 65536;
	    v = t5 + c + 65535;
	    c = Math.floor(v / 65536);
	    t5 = v - c * 65536;
	    v = t6 + c + 65535;
	    c = Math.floor(v / 65536);
	    t6 = v - c * 65536;
	    v = t7 + c + 65535;
	    c = Math.floor(v / 65536);
	    t7 = v - c * 65536;
	    v = t8 + c + 65535;
	    c = Math.floor(v / 65536);
	    t8 = v - c * 65536;
	    v = t9 + c + 65535;
	    c = Math.floor(v / 65536);
	    t9 = v - c * 65536;
	    v = t10 + c + 65535;
	    c = Math.floor(v / 65536);
	    t10 = v - c * 65536;
	    v = t11 + c + 65535;
	    c = Math.floor(v / 65536);
	    t11 = v - c * 65536;
	    v = t12 + c + 65535;
	    c = Math.floor(v / 65536);
	    t12 = v - c * 65536;
	    v = t13 + c + 65535;
	    c = Math.floor(v / 65536);
	    t13 = v - c * 65536;
	    v = t14 + c + 65535;
	    c = Math.floor(v / 65536);
	    t14 = v - c * 65536;
	    v = t15 + c + 65535;
	    c = Math.floor(v / 65536);
	    t15 = v - c * 65536;
	    t0 += c - 1 + 37 * (c - 1);
	    o[0] = t0;
	    o[1] = t1;
	    o[2] = t2;
	    o[3] = t3;
	    o[4] = t4;
	    o[5] = t5;
	    o[6] = t6;
	    o[7] = t7;
	    o[8] = t8;
	    o[9] = t9;
	    o[10] = t10;
	    o[11] = t11;
	    o[12] = t12;
	    o[13] = t13;
	    o[14] = t14;
	    o[15] = t15;
	}
	function square(o, a) {
	    mul(o, a, a);
	}
	function inv25519(o, inp) {
	    var c = gf();
	    for (var i = 0; i < 16; i++) {
	        c[i] = inp[i];
	    }
	    for (var i = 253; i >= 0; i--) {
	        square(c, c);
	        if (i !== 2 && i !== 4) {
	            mul(c, c, inp);
	        }
	    }
	    for (var i = 0; i < 16; i++) {
	        o[i] = c[i];
	    }
	}
	function scalarMult(n, p) {
	    var z = new Uint8Array(32);
	    var x = new Float64Array(80);
	    var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf();
	    for (var i = 0; i < 31; i++) {
	        z[i] = n[i];
	    }
	    z[31] = (n[31] & 127) | 64;
	    z[0] &= 248;
	    unpack25519(x, p);
	    for (var i = 0; i < 16; i++) {
	        b[i] = x[i];
	    }
	    a[0] = d[0] = 1;
	    for (var i = 254; i >= 0; --i) {
	        var r = (z[i >>> 3] >>> (i & 7)) & 1;
	        sel25519(a, b, r);
	        sel25519(c, d, r);
	        add(e, a, c);
	        sub(a, a, c);
	        add(c, b, d);
	        sub(b, b, d);
	        square(d, e);
	        square(f, a);
	        mul(a, c, a);
	        mul(c, b, e);
	        add(e, a, c);
	        sub(a, a, c);
	        square(b, a);
	        sub(c, d, f);
	        mul(a, c, _121665);
	        add(a, a, d);
	        mul(c, c, a);
	        mul(a, d, f);
	        mul(d, b, x);
	        square(b, e);
	        sel25519(a, b, r);
	        sel25519(c, d, r);
	    }
	    for (var i = 0; i < 16; i++) {
	        x[i + 16] = a[i];
	        x[i + 32] = c[i];
	        x[i + 48] = b[i];
	        x[i + 64] = d[i];
	    }
	    var x32 = x.subarray(32);
	    var x16 = x.subarray(16);
	    inv25519(x32, x32);
	    mul(x16, x16, x32);
	    var q = new Uint8Array(32);
	    pack25519(q, x16);
	    return q;
	}
	exports.scalarMult = scalarMult;
	function scalarMultBase(n) {
	    return scalarMult(n, _9);
	}
	exports.scalarMultBase = scalarMultBase;
	function generateKeyPairFromSeed(seed) {
	    if (seed.length !== exports.SECRET_KEY_LENGTH) {
	        throw new Error("x25519: seed must be " + exports.SECRET_KEY_LENGTH + " bytes");
	    }
	    var secretKey = new Uint8Array(seed);
	    var publicKey = scalarMultBase(secretKey);
	    return {
	        publicKey: publicKey,
	        secretKey: secretKey
	    };
	}
	exports.generateKeyPairFromSeed = generateKeyPairFromSeed;
	function generateKeyPair(prng) {
	    var seed = random_1.randomBytes(32, prng);
	    var result = generateKeyPairFromSeed(seed);
	    wipe_1.wipe(seed);
	    return result;
	}
	exports.generateKeyPair = generateKeyPair;
	/**
	 * Returns a shared key between our secret key and a peer's public key.
	 *
	 * Throws an error if the given keys are of wrong length.
	 *
	 * If rejectZero is true throws if the calculated shared key is all-zero.
	 * From RFC 7748:
	 *
	 * > Protocol designers using Diffie-Hellman over the curves defined in
	 * > this document must not assume "contributory behavior".  Specially,
	 * > contributory behavior means that both parties' private keys
	 * > contribute to the resulting shared key.  Since curve25519 and
	 * > curve448 have cofactors of 8 and 4 (respectively), an input point of
	 * > small order will eliminate any contribution from the other party's
	 * > private key.  This situation can be detected by checking for the all-
	 * > zero output, which implementations MAY do, as specified in Section 6.
	 * > However, a large number of existing implementations do not do this.
	 *
	 * IMPORTANT: the returned key is a raw result of scalar multiplication.
	 * To use it as a key material, hash it with a cryptographic hash function.
	 */
	function sharedKey(mySecretKey, theirPublicKey, rejectZero) {
	    if (rejectZero === void 0) { rejectZero = false; }
	    if (mySecretKey.length !== exports.PUBLIC_KEY_LENGTH) {
	        throw new Error("X25519: incorrect secret key length");
	    }
	    if (theirPublicKey.length !== exports.PUBLIC_KEY_LENGTH) {
	        throw new Error("X25519: incorrect public key length");
	    }
	    var result = scalarMult(mySecretKey, theirPublicKey);
	    if (rejectZero) {
	        var zeros = 0;
	        for (var i = 0; i < result.length; i++) {
	            zeros |= result[i];
	        }
	        if (zeros === 0) {
	            throw new Error("X25519: invalid shared key");
	        }
	    }
	    return result;
	}
	exports.sharedKey = sharedKey;

	}(x25519$2));

	const Reader$1 = itReader;
	const Writer = itPushable;
	const defer$2 = pDefer_1;

	// Convert a duplex stream into a reader and writer and rest stream
	var src$a = stream => {
	  const writer = Writer(); // Write bytes on demand to the sink
	  const reader = Reader$1(stream.source); // Read bytes on demand from the source

	  // Waits for a source to be passed to the rest stream's sink
	  const sourcePromise = defer$2();
	  let sinkErr;

	  const sinkPromise = stream.sink((async function * () {
	    yield * writer;
	    const source = await sourcePromise.promise;
	    yield * source;
	  })());

	  sinkPromise.catch(err => {
	    sinkErr = err;
	  });

	  const rest = {
	    sink: source => {
	      if (sinkErr) {
	        return Promise.reject(sinkErr)
	      }

	      sourcePromise.resolve(source);
	      return sinkPromise
	    },
	    source: reader
	  };

	  return {
	    reader,
	    writer,
	    stream: rest,
	    rest: () => writer.end(),
	    write: writer.push,
	    read: async () => {
	      return (await reader.next()).value
	    }
	  }
	};

	const Shake = src$a;
	const lp$6 = src$i;

	var src$9 = (duplex, opts = {}) => {
	  const shake = Shake(duplex);
	  const lpReader = lp$6.decode.fromReader(
	      shake.reader,
	      opts
	  );

	  const W = {
	    read: async (bytes) => {
	      // just read

	      const { value, done } = await shake.reader.next(bytes);

	      if (done && value.length < bytes) {
	        throw new Error('Couldn\'t read enough bytes')
	      }

	      if (!value) { throw new Error('Value is null') }
	      return value
	    },
	    readLP: async () => {
	      // read, decode
	      const { value, done } = await lpReader.next();

	      if (!value) { throw new Error('Value is null') }
	      return value
	    },
	    readPB: async (proto) => {
	      // readLP, decode
	      const value = await W.readLP();

	      if (!value) { throw new Error('Value is null') }

	      // Is this a Uint8Array?
	      const buf = value instanceof Uint8Array ? value : value.slice();

	      return proto.decode(buf)
	    },
	    write: (data) => {
	      // just write
	      shake.writer.push(data);
	    },
	    writeLP: (data) => {
	      // encode, write
	      W.write(lp$6.encode.single(data, opts));
	    },
	    writePB: (data, proto) => {
	      // encode, writeLP
	      W.writeLP(proto.encode(data));
	    },

	    pb: (proto) => {
	      return {
	        read: () => W.readPB(proto),
	        write: (d) => W.writePB(d, proto)
	      }
	    },

	    unwrap: () => {
	      // returns vanilla duplex again, terminates all reads/writes from this object
	      shake.rest();
	      return shake.stream
	    }
	  };

	  return W
	};

	const getIterator = getIterator$3;

	// a pair of streams where one drains from the other
	var itPair = function pair () {
	  let _source, onSource;

	  const sink = async source => {
	    if (_source) throw new Error('already piped')
	    _source = getIterator(source);
	    if (onSource) onSource(_source);
	  };

	  const source = {
	    [Symbol.asyncIterator] () {
	      return this
	    },
	    next () {
	      if (_source) return _source.next()
	      return new Promise(resolve => {
	        onSource = source => {
	          onSource = null;
	          resolve(source.next());
	        };
	      })
	    }
	  };

	  return { sink, source }
	};

	var Pair = itPair;
	var duplex = function () {
	  var a = Pair();
	  var b = Pair();
	  return [
	    {
	      source: a.source,
	      sink: b.sink
	    },
	    {
	      source: b.source,
	      sink: a.sink
	    }
	  ]
	};

	var itBuffer = {exports: {}};

	(function (module) {

	const { Buffer } = require$$0$1;
	const BufferList = BufferList_1;

	module.exports = async function * (source) {
	  for await (const b of source) {
	    if (Buffer.isBuffer(b)) {
	      yield b;
	    } else if (BufferList.isBufferList(b)) {
	      yield b.slice();
	    } else {
	      yield Buffer.from(b);
	    }
	  }
	};

	module.exports.toBuffer = module.exports;

	module.exports.toList = async function * (source) {
	  for await (const b of source) {
	    if (Buffer.isBuffer(b)) {
	      yield new BufferList().append(b);
	    } else if (BufferList.isBufferList(b)) {
	      yield b;
	    } else {
	      yield new BufferList().append(Buffer.from(b));
	    }
	  }
	};
	}(itBuffer));

	var handshakeXx = {};

	var xx = {};

	var utils$p = {};

	var hkdf = {};

	var hmac$1 = {};

	var hash = {};

	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(hash, "__esModule", { value: true });
	function isSerializableHash(h) {
	    return (typeof h.saveState !== "undefined" &&
	        typeof h.restoreState !== "undefined" &&
	        typeof h.cleanSavedState !== "undefined");
	}
	hash.isSerializableHash = isSerializableHash;

	var constantTime = {};

	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(constantTime, "__esModule", { value: true });
	/**
	 * Package constant-time provides functions for performing algorithmically constant-time operations.
	 */
	/**
	 * NOTE! Due to the inability to guarantee real constant time evaluation of
	 * anything in JavaScript VM, this is module is the best effort.
	 */
	/**
	 * Returns resultIfOne if subject is 1, or resultIfZero if subject is 0.
	 *
	 * Supports only 32-bit integers, so resultIfOne or resultIfZero are not
	 * integers, they'll be converted to them with bitwise operations.
	 */
	function select$2(subject, resultIfOne, resultIfZero) {
	    return (~(subject - 1) & resultIfOne) | ((subject - 1) & resultIfZero);
	}
	constantTime.select = select$2;
	/**
	 * Returns 1 if a <= b, or 0 if not.
	 * Arguments must be positive 32-bit integers less than or equal to 2^31 - 1.
	 */
	function lessOrEqual(a, b) {
	    return (((a | 0) - (b | 0) - 1) >>> 31) & 1;
	}
	constantTime.lessOrEqual = lessOrEqual;
	/**
	 * Returns 1 if a and b are of equal length and their contents
	 * are equal, or 0 otherwise.
	 *
	 * Note that unlike in equal(), zero-length inputs are considered
	 * the same, so this function will return 1.
	 */
	function compare(a, b) {
	    if (a.length !== b.length) {
	        return 0;
	    }
	    var result = 0;
	    for (var i = 0; i < a.length; i++) {
	        result |= a[i] ^ b[i];
	    }
	    return (1 & ((result - 1) >>> 8));
	}
	constantTime.compare = compare;
	/**
	 * Returns true if a and b are of equal non-zero length,
	 * and their contents are equal, or false otherwise.
	 *
	 * Note that unlike in compare() zero-length inputs are considered
	 * _not_ equal, so this function will return false.
	 */
	function equal(a, b) {
	    if (a.length === 0 || b.length === 0) {
	        return false;
	    }
	    return compare(a, b) !== 0;
	}
	constantTime.equal = equal;

	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(hmac$1, "__esModule", { value: true });
	/**
	 * Package hmac implements HMAC algorithm.
	 */
	var hash_1 = hash;
	var constant_time_1 = constantTime;
	var wipe_1$2 = wipe$1;
	/**
	 *  HMAC implements hash-based message authentication algorithm.
	 */
	var HMAC = /** @class */ (function () {
	    /**
	     * Constructs a new HMAC with the given Hash and secret key.
	     */
	    function HMAC(hash, key) {
	        this._finished = false; // true if HMAC was finalized
	        // Initialize inner and outer hashes.
	        this._inner = new hash();
	        this._outer = new hash();
	        // Set block and digest sizes for this HMAC
	        // instance to values from the hash.
	        this.blockSize = this._outer.blockSize;
	        this.digestLength = this._outer.digestLength;
	        // Pad temporary stores a key (or its hash) padded with zeroes.
	        var pad = new Uint8Array(this.blockSize);
	        if (key.length > this.blockSize) {
	            // If key is bigger than hash block size, it must be
	            // hashed and this hash is used as a key instead.
	            this._inner.update(key).finish(pad).clean();
	        }
	        else {
	            // Otherwise, copy the key into pad.
	            pad.set(key);
	        }
	        // Now two different keys are derived from padded key
	        // by xoring a different byte value to each.
	        // To make inner hash key, xor byte 0x36 into pad.
	        for (var i = 0; i < pad.length; i++) {
	            pad[i] ^= 0x36;
	        }
	        // Update inner hash with the result.
	        this._inner.update(pad);
	        // To make outer hash key, xor byte 0x5c into pad.
	        // But since we already xored 0x36 there, we must
	        // first undo this by xoring it again.
	        for (var i = 0; i < pad.length; i++) {
	            pad[i] ^= 0x36 ^ 0x5c;
	        }
	        // Update outer hash with the result.
	        this._outer.update(pad);
	        // Save states of both hashes, so that we can quickly restore
	        // them later in reset() without the need to remember the actual
	        // key and perform this initialization again.
	        if (hash_1.isSerializableHash(this._inner) && hash_1.isSerializableHash(this._outer)) {
	            this._innerKeyedState = this._inner.saveState();
	            this._outerKeyedState = this._outer.saveState();
	        }
	        // Clean pad.
	        wipe_1$2.wipe(pad);
	    }
	    /**
	     * Returns HMAC state to the state initialized with key
	     * to make it possible to run HMAC over the other data with the same
	     * key without creating a new instance.
	     */
	    HMAC.prototype.reset = function () {
	        if (!hash_1.isSerializableHash(this._inner) || !hash_1.isSerializableHash(this._outer)) {
	            throw new Error("hmac: can't reset() because hash doesn't implement restoreState()");
	        }
	        // Restore keyed states of inner and outer hashes.
	        this._inner.restoreState(this._innerKeyedState);
	        this._outer.restoreState(this._outerKeyedState);
	        this._finished = false;
	        return this;
	    };
	    /**
	     * Cleans HMAC state.
	     */
	    HMAC.prototype.clean = function () {
	        if (hash_1.isSerializableHash(this._inner)) {
	            this._inner.cleanSavedState(this._innerKeyedState);
	        }
	        if (hash_1.isSerializableHash(this._outer)) {
	            this._outer.cleanSavedState(this._outerKeyedState);
	        }
	        this._inner.clean();
	        this._outer.clean();
	    };
	    /**
	     * Updates state with provided data.
	     */
	    HMAC.prototype.update = function (data) {
	        this._inner.update(data);
	        return this;
	    };
	    /**
	     * Finalizes HMAC and puts the result in out.
	     */
	    HMAC.prototype.finish = function (out) {
	        if (this._finished) {
	            // If HMAC was finalized, outer hash is also finalized,
	            // so it produces the same digest it produced when it
	            // was finalized.
	            this._outer.finish(out);
	            return this;
	        }
	        // Finalize inner hash and store the result temporarily.
	        this._inner.finish(out);
	        // Update outer hash with digest of inner hash and and finalize it.
	        this._outer.update(out.subarray(0, this.digestLength)).finish(out);
	        this._finished = true;
	        return this;
	    };
	    /**
	     * Returns the computed message authentication code.
	     */
	    HMAC.prototype.digest = function () {
	        var out = new Uint8Array(this.digestLength);
	        this.finish(out);
	        return out;
	    };
	    /**
	     * Saves HMAC state.
	     * This function is needed for PBKDF2 optimization.
	     */
	    HMAC.prototype.saveState = function () {
	        if (!hash_1.isSerializableHash(this._inner)) {
	            throw new Error("hmac: can't saveState() because hash doesn't implement it");
	        }
	        return this._inner.saveState();
	    };
	    HMAC.prototype.restoreState = function (savedState) {
	        if (!hash_1.isSerializableHash(this._inner) || !hash_1.isSerializableHash(this._outer)) {
	            throw new Error("hmac: can't restoreState() because hash doesn't implement it");
	        }
	        this._inner.restoreState(savedState);
	        this._outer.restoreState(this._outerKeyedState);
	        this._finished = false;
	        return this;
	    };
	    HMAC.prototype.cleanSavedState = function (savedState) {
	        if (!hash_1.isSerializableHash(this._inner)) {
	            throw new Error("hmac: can't cleanSavedState() because hash doesn't implement it");
	        }
	        this._inner.cleanSavedState(savedState);
	    };
	    return HMAC;
	}());
	hmac$1.HMAC = HMAC;
	/**
	 * Returns HMAC using the given hash constructor for the key over data.
	 */
	function hmac(hash, key, data) {
	    var h = new HMAC(hash, key);
	    h.update(data);
	    var digest = h.digest();
	    h.clean();
	    return digest;
	}
	hmac$1.hmac = hmac;
	/**
	 * Returns true if two HMAC digests are equal.
	 * Uses constant-time comparison to avoid leaking timing information.
	 *
	 * Example:
	 *
	 *    const receivedDigest = ...
	 *    const realDigest = hmac(SHA256, key, data);
	 *    if (!equal(receivedDigest, realDigest)) {
	 *        throw new Error("Authentication error");
	 *    }
	 */
	hmac$1.equal = constant_time_1.equal;

	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(hkdf, "__esModule", { value: true });
	var hmac_1 = hmac$1;
	var wipe_1$1 = wipe$1;
	/**
	 * HMAC-based Extract-and-Expand Key Derivation Function.
	 *
	 * Implements HKDF from RFC5869.
	 *
	 * Expands the given master key with salt and info into
	 * a limited stream of key material.
	 */
	var HKDF = /** @class */ (function () {
	    /**
	     * Create a new HKDF instance for the given hash function
	     * with the master key, optional salt, and info.
	     *
	     * - Master key is a high-entropy secret key (not a password).
	     * - Salt is a non-secret random value.
	     * - Info is application- and/or context-specific information.
	     */
	    function HKDF(hash, key, salt, info) {
	        if (salt === void 0) { salt = new Uint8Array(0); }
	        this._counter = new Uint8Array(1); // starts with zero
	        this._hash = hash;
	        this._info = info;
	        // HKDF-Extract uses salt as HMAC key, and key as data.
	        var okm = hmac_1.hmac(this._hash, salt, key);
	        // Initialize HMAC for expanding with extracted key.
	        this._hmac = new hmac_1.HMAC(hash, okm);
	        // Allocate buffer.
	        this._buffer = new Uint8Array(this._hmac.digestLength);
	        this._bufpos = this._buffer.length;
	    }
	    // Fill buffer with new block of HKDF-Extract output.
	    HKDF.prototype._fillBuffer = function () {
	        // Increment counter.
	        this._counter[0]++;
	        var ctr = this._counter[0];
	        // Check if counter overflowed.
	        if (ctr === 0) {
	            throw new Error("hkdf: cannot expand more");
	        }
	        // Prepare HMAC instance for new data with old key.
	        this._hmac.reset();
	        // Hash in previous output if it was generated
	        // (i.e. counter is greater than 1).
	        if (ctr > 1) {
	            this._hmac.update(this._buffer);
	        }
	        // Hash in info if it exists.
	        if (this._info) {
	            this._hmac.update(this._info);
	        }
	        // Hash in the counter.
	        this._hmac.update(this._counter);
	        // Output result to buffer and clean HMAC instance.
	        this._hmac.finish(this._buffer);
	        // Reset buffer position.
	        this._bufpos = 0;
	    };
	    /**
	     * Expand returns next key material of the given length.
	     *
	     * It throws if expansion limit is reached (which is
	     * 254 digests of the underlying HMAC function).
	     */
	    HKDF.prototype.expand = function (length) {
	        var out = new Uint8Array(length);
	        for (var i = 0; i < out.length; i++) {
	            if (this._bufpos === this._buffer.length) {
	                this._fillBuffer();
	            }
	            out[i] = this._buffer[this._bufpos++];
	        }
	        return out;
	    };
	    HKDF.prototype.clean = function () {
	        this._hmac.clean();
	        wipe_1$1.wipe(this._buffer);
	        wipe_1$1.wipe(this._counter);
	        this._bufpos = 0;
	    };
	    return HKDF;
	}());
	hkdf.HKDF = HKDF;

	var sha256$3 = {};

	(function (exports) {
	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(exports, "__esModule", { value: true });
	var binary_1 = binary;
	var wipe_1 = wipe$1;
	exports.DIGEST_LENGTH = 32;
	exports.BLOCK_SIZE = 64;
	/**
	 * SHA2-256 cryptographic hash algorithm.
	 */
	var SHA256 = /** @class */ (function () {
	    function SHA256() {
	        /** Length of hash output */
	        this.digestLength = exports.DIGEST_LENGTH;
	        /** Block size */
	        this.blockSize = exports.BLOCK_SIZE;
	        // Note: Int32Array is used instead of Uint32Array for performance reasons.
	        this._state = new Int32Array(8); // hash state
	        this._temp = new Int32Array(64); // temporary state
	        this._buffer = new Uint8Array(128); // buffer for data to hash
	        this._bufferLength = 0; // number of bytes in buffer
	        this._bytesHashed = 0; // number of total bytes hashed
	        this._finished = false; // indicates whether the hash was finalized
	        this.reset();
	    }
	    SHA256.prototype._initState = function () {
	        this._state[0] = 0x6a09e667;
	        this._state[1] = 0xbb67ae85;
	        this._state[2] = 0x3c6ef372;
	        this._state[3] = 0xa54ff53a;
	        this._state[4] = 0x510e527f;
	        this._state[5] = 0x9b05688c;
	        this._state[6] = 0x1f83d9ab;
	        this._state[7] = 0x5be0cd19;
	    };
	    /**
	     * Resets hash state making it possible
	     * to re-use this instance to hash other data.
	     */
	    SHA256.prototype.reset = function () {
	        this._initState();
	        this._bufferLength = 0;
	        this._bytesHashed = 0;
	        this._finished = false;
	        return this;
	    };
	    /**
	     * Cleans internal buffers and resets hash state.
	     */
	    SHA256.prototype.clean = function () {
	        wipe_1.wipe(this._buffer);
	        wipe_1.wipe(this._temp);
	        this.reset();
	    };
	    /**
	     * Updates hash state with the given data.
	     *
	     * Throws error when trying to update already finalized hash:
	     * instance must be reset to update it again.
	     */
	    SHA256.prototype.update = function (data, dataLength) {
	        if (dataLength === void 0) { dataLength = data.length; }
	        if (this._finished) {
	            throw new Error("SHA256: can't update because hash was finished.");
	        }
	        var dataPos = 0;
	        this._bytesHashed += dataLength;
	        if (this._bufferLength > 0) {
	            while (this._bufferLength < this.blockSize && dataLength > 0) {
	                this._buffer[this._bufferLength++] = data[dataPos++];
	                dataLength--;
	            }
	            if (this._bufferLength === this.blockSize) {
	                hashBlocks(this._temp, this._state, this._buffer, 0, this.blockSize);
	                this._bufferLength = 0;
	            }
	        }
	        if (dataLength >= this.blockSize) {
	            dataPos = hashBlocks(this._temp, this._state, data, dataPos, dataLength);
	            dataLength %= this.blockSize;
	        }
	        while (dataLength > 0) {
	            this._buffer[this._bufferLength++] = data[dataPos++];
	            dataLength--;
	        }
	        return this;
	    };
	    /**
	     * Finalizes hash state and puts hash into out.
	     * If hash was already finalized, puts the same value.
	     */
	    SHA256.prototype.finish = function (out) {
	        if (!this._finished) {
	            var bytesHashed = this._bytesHashed;
	            var left = this._bufferLength;
	            var bitLenHi = (bytesHashed / 0x20000000) | 0;
	            var bitLenLo = bytesHashed << 3;
	            var padLength = (bytesHashed % 64 < 56) ? 64 : 128;
	            this._buffer[left] = 0x80;
	            for (var i = left + 1; i < padLength - 8; i++) {
	                this._buffer[i] = 0;
	            }
	            binary_1.writeUint32BE(bitLenHi, this._buffer, padLength - 8);
	            binary_1.writeUint32BE(bitLenLo, this._buffer, padLength - 4);
	            hashBlocks(this._temp, this._state, this._buffer, 0, padLength);
	            this._finished = true;
	        }
	        for (var i = 0; i < this.digestLength / 4; i++) {
	            binary_1.writeUint32BE(this._state[i], out, i * 4);
	        }
	        return this;
	    };
	    /**
	     * Returns the final hash digest.
	     */
	    SHA256.prototype.digest = function () {
	        var out = new Uint8Array(this.digestLength);
	        this.finish(out);
	        return out;
	    };
	    /**
	     * Function useful for HMAC/PBKDF2 optimization.
	     * Returns hash state to be used with restoreState().
	     * Only chain value is saved, not buffers or other
	     * state variables.
	     */
	    SHA256.prototype.saveState = function () {
	        if (this._finished) {
	            throw new Error("SHA256: cannot save finished state");
	        }
	        return {
	            state: new Int32Array(this._state),
	            buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : undefined,
	            bufferLength: this._bufferLength,
	            bytesHashed: this._bytesHashed
	        };
	    };
	    /**
	     * Function useful for HMAC/PBKDF2 optimization.
	     * Restores state saved by saveState() and sets bytesHashed
	     * to the given value.
	     */
	    SHA256.prototype.restoreState = function (savedState) {
	        this._state.set(savedState.state);
	        this._bufferLength = savedState.bufferLength;
	        if (savedState.buffer) {
	            this._buffer.set(savedState.buffer);
	        }
	        this._bytesHashed = savedState.bytesHashed;
	        this._finished = false;
	        return this;
	    };
	    /**
	     * Cleans state returned by saveState().
	     */
	    SHA256.prototype.cleanSavedState = function (savedState) {
	        wipe_1.wipe(savedState.state);
	        if (savedState.buffer) {
	            wipe_1.wipe(savedState.buffer);
	        }
	        savedState.bufferLength = 0;
	        savedState.bytesHashed = 0;
	    };
	    return SHA256;
	}());
	exports.SHA256 = SHA256;
	// Constants
	var K = new Int32Array([
	    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
	    0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
	    0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
	    0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
	    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
	    0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
	    0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
	    0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
	    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
	    0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
	    0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
	    0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
	    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
	]);
	function hashBlocks(w, v, p, pos, len) {
	    while (len >= 64) {
	        var a = v[0];
	        var b = v[1];
	        var c = v[2];
	        var d = v[3];
	        var e = v[4];
	        var f = v[5];
	        var g = v[6];
	        var h = v[7];
	        for (var i = 0; i < 16; i++) {
	            var j = pos + i * 4;
	            w[i] = binary_1.readUint32BE(p, j);
	        }
	        for (var i = 16; i < 64; i++) {
	            var u = w[i - 2];
	            var t1 = (u >>> 17 | u << (32 - 17)) ^ (u >>> 19 | u << (32 - 19)) ^ (u >>> 10);
	            u = w[i - 15];
	            var t2 = (u >>> 7 | u << (32 - 7)) ^ (u >>> 18 | u << (32 - 18)) ^ (u >>> 3);
	            w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);
	        }
	        for (var i = 0; i < 64; i++) {
	            var t1 = (((((e >>> 6 | e << (32 - 6)) ^ (e >>> 11 | e << (32 - 11)) ^
	                (e >>> 25 | e << (32 - 25))) + ((e & f) ^ (~e & g))) | 0) +
	                ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;
	            var t2 = (((a >>> 2 | a << (32 - 2)) ^ (a >>> 13 | a << (32 - 13)) ^
	                (a >>> 22 | a << (32 - 22))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;
	            h = g;
	            g = f;
	            f = e;
	            e = (d + t1) | 0;
	            d = c;
	            c = b;
	            b = a;
	            a = (t1 + t2) | 0;
	        }
	        v[0] += a;
	        v[1] += b;
	        v[2] += c;
	        v[3] += d;
	        v[4] += e;
	        v[5] += f;
	        v[6] += g;
	        v[7] += h;
	        pos += 64;
	        len -= 64;
	    }
	    return pos;
	}
	function hash(data) {
	    var h = new SHA256();
	    h.update(data);
	    var digest = h.digest();
	    h.clean();
	    return digest;
	}
	exports.hash = hash;

	}(sha256$3));

	var payload = {exports: {}};

	(function (module) {
	/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
	(function (global, factory) {
	    /* AMD */ if (typeof commonjsRequire === 'function' && 'object' === 'object' && module && module.exports)
	        module.exports = factory(minimal);
	})(commonjsGlobal, function ($protobuf) {
	    // Common aliases
	    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
	    // Exported root namespace
	    var $root = $protobuf.roots["libp2p-noise"] || ($protobuf.roots["libp2p-noise"] = {});
	    $root.pb = (function () {
	        /**
	         * Namespace pb.
	         * @exports pb
	         * @namespace
	         */
	        var pb = {};
	        pb.NoiseHandshakePayload = (function () {
	            /**
	             * Properties of a NoiseHandshakePayload.
	             * @memberof pb
	             * @interface INoiseHandshakePayload
	             * @property {Uint8Array|null} [identityKey] NoiseHandshakePayload identityKey
	             * @property {Uint8Array|null} [identitySig] NoiseHandshakePayload identitySig
	             * @property {Uint8Array|null} [data] NoiseHandshakePayload data
	             */
	            /**
	             * Constructs a new NoiseHandshakePayload.
	             * @memberof pb
	             * @classdesc Represents a NoiseHandshakePayload.
	             * @implements INoiseHandshakePayload
	             * @constructor
	             * @param {pb.INoiseHandshakePayload=} [properties] Properties to set
	             */
	            function NoiseHandshakePayload(properties) {
	                if (properties)
	                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
	                        if (properties[keys[i]] != null)
	                            this[keys[i]] = properties[keys[i]];
	            }
	            /**
	             * NoiseHandshakePayload identityKey.
	             * @member {Uint8Array} identityKey
	             * @memberof pb.NoiseHandshakePayload
	             * @instance
	             */
	            NoiseHandshakePayload.prototype.identityKey = $util.newBuffer([]);
	            /**
	             * NoiseHandshakePayload identitySig.
	             * @member {Uint8Array} identitySig
	             * @memberof pb.NoiseHandshakePayload
	             * @instance
	             */
	            NoiseHandshakePayload.prototype.identitySig = $util.newBuffer([]);
	            /**
	             * NoiseHandshakePayload data.
	             * @member {Uint8Array} data
	             * @memberof pb.NoiseHandshakePayload
	             * @instance
	             */
	            NoiseHandshakePayload.prototype.data = $util.newBuffer([]);
	            /**
	             * Creates a new NoiseHandshakePayload instance using the specified properties.
	             * @function create
	             * @memberof pb.NoiseHandshakePayload
	             * @static
	             * @param {pb.INoiseHandshakePayload=} [properties] Properties to set
	             * @returns {pb.NoiseHandshakePayload} NoiseHandshakePayload instance
	             */
	            NoiseHandshakePayload.create = function create(properties) {
	                return new NoiseHandshakePayload(properties);
	            };
	            /**
	             * Encodes the specified NoiseHandshakePayload message. Does not implicitly {@link pb.NoiseHandshakePayload.verify|verify} messages.
	             * @function encode
	             * @memberof pb.NoiseHandshakePayload
	             * @static
	             * @param {pb.INoiseHandshakePayload} message NoiseHandshakePayload message or plain object to encode
	             * @param {$protobuf.Writer} [writer] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            NoiseHandshakePayload.encode = function encode(message, writer) {
	                if (!writer)
	                    writer = $Writer.create();
	                if (message.identityKey != null && Object.hasOwnProperty.call(message, "identityKey"))
	                    writer.uint32(/* id 1, wireType 2 =*/ 10).bytes(message.identityKey);
	                if (message.identitySig != null && Object.hasOwnProperty.call(message, "identitySig"))
	                    writer.uint32(/* id 2, wireType 2 =*/ 18).bytes(message.identitySig);
	                if (message.data != null && Object.hasOwnProperty.call(message, "data"))
	                    writer.uint32(/* id 3, wireType 2 =*/ 26).bytes(message.data);
	                return writer;
	            };
	            /**
	             * Encodes the specified NoiseHandshakePayload message, length delimited. Does not implicitly {@link pb.NoiseHandshakePayload.verify|verify} messages.
	             * @function encodeDelimited
	             * @memberof pb.NoiseHandshakePayload
	             * @static
	             * @param {pb.INoiseHandshakePayload} message NoiseHandshakePayload message or plain object to encode
	             * @param {$protobuf.Writer} [writer] Writer to encode to
	             * @returns {$protobuf.Writer} Writer
	             */
	            NoiseHandshakePayload.encodeDelimited = function encodeDelimited(message, writer) {
	                return this.encode(message, writer).ldelim();
	            };
	            /**
	             * Decodes a NoiseHandshakePayload message from the specified reader or buffer.
	             * @function decode
	             * @memberof pb.NoiseHandshakePayload
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
	             * @param {number} [length] Message length if known beforehand
	             * @returns {pb.NoiseHandshakePayload} NoiseHandshakePayload
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            NoiseHandshakePayload.decode = function decode(reader, length) {
	                if (!(reader instanceof $Reader))
	                    reader = $Reader.create(reader);
	                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.pb.NoiseHandshakePayload();
	                while (reader.pos < end) {
	                    var tag = reader.uint32();
	                    switch (tag >>> 3) {
	                        case 1:
	                            message.identityKey = reader.bytes();
	                            break;
	                        case 2:
	                            message.identitySig = reader.bytes();
	                            break;
	                        case 3:
	                            message.data = reader.bytes();
	                            break;
	                        default:
	                            reader.skipType(tag & 7);
	                            break;
	                    }
	                }
	                return message;
	            };
	            /**
	             * Decodes a NoiseHandshakePayload message from the specified reader or buffer, length delimited.
	             * @function decodeDelimited
	             * @memberof pb.NoiseHandshakePayload
	             * @static
	             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
	             * @returns {pb.NoiseHandshakePayload} NoiseHandshakePayload
	             * @throws {Error} If the payload is not a reader or valid buffer
	             * @throws {$protobuf.util.ProtocolError} If required fields are missing
	             */
	            NoiseHandshakePayload.decodeDelimited = function decodeDelimited(reader) {
	                if (!(reader instanceof $Reader))
	                    reader = new $Reader(reader);
	                return this.decode(reader, reader.uint32());
	            };
	            /**
	             * Verifies a NoiseHandshakePayload message.
	             * @function verify
	             * @memberof pb.NoiseHandshakePayload
	             * @static
	             * @param {Object.<string,*>} message Plain object to verify
	             * @returns {string|null} `null` if valid, otherwise the reason why it is not
	             */
	            NoiseHandshakePayload.verify = function verify(message) {
	                if (typeof message !== "object" || message === null)
	                    return "object expected";
	                if (message.identityKey != null && message.hasOwnProperty("identityKey"))
	                    if (!(message.identityKey && typeof message.identityKey.length === "number" || $util.isString(message.identityKey)))
	                        return "identityKey: buffer expected";
	                if (message.identitySig != null && message.hasOwnProperty("identitySig"))
	                    if (!(message.identitySig && typeof message.identitySig.length === "number" || $util.isString(message.identitySig)))
	                        return "identitySig: buffer expected";
	                if (message.data != null && message.hasOwnProperty("data"))
	                    if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
	                        return "data: buffer expected";
	                return null;
	            };
	            /**
	             * Creates a NoiseHandshakePayload message from a plain object. Also converts values to their respective internal types.
	             * @function fromObject
	             * @memberof pb.NoiseHandshakePayload
	             * @static
	             * @param {Object.<string,*>} object Plain object
	             * @returns {pb.NoiseHandshakePayload} NoiseHandshakePayload
	             */
	            NoiseHandshakePayload.fromObject = function fromObject(object) {
	                if (object instanceof $root.pb.NoiseHandshakePayload)
	                    return object;
	                var message = new $root.pb.NoiseHandshakePayload();
	                if (object.identityKey != null)
	                    if (typeof object.identityKey === "string")
	                        $util.base64.decode(object.identityKey, message.identityKey = $util.newBuffer($util.base64.length(object.identityKey)), 0);
	                    else if (object.identityKey.length)
	                        message.identityKey = object.identityKey;
	                if (object.identitySig != null)
	                    if (typeof object.identitySig === "string")
	                        $util.base64.decode(object.identitySig, message.identitySig = $util.newBuffer($util.base64.length(object.identitySig)), 0);
	                    else if (object.identitySig.length)
	                        message.identitySig = object.identitySig;
	                if (object.data != null)
	                    if (typeof object.data === "string")
	                        $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
	                    else if (object.data.length)
	                        message.data = object.data;
	                return message;
	            };
	            /**
	             * Creates a plain object from a NoiseHandshakePayload message. Also converts values to other types if specified.
	             * @function toObject
	             * @memberof pb.NoiseHandshakePayload
	             * @static
	             * @param {pb.NoiseHandshakePayload} message NoiseHandshakePayload
	             * @param {$protobuf.IConversionOptions} [options] Conversion options
	             * @returns {Object.<string,*>} Plain object
	             */
	            NoiseHandshakePayload.toObject = function toObject(message, options) {
	                if (!options)
	                    options = {};
	                var object = {};
	                if (options.defaults) {
	                    if (options.bytes === String)
	                        object.identityKey = "";
	                    else {
	                        object.identityKey = [];
	                        if (options.bytes !== Array)
	                            object.identityKey = $util.newBuffer(object.identityKey);
	                    }
	                    if (options.bytes === String)
	                        object.identitySig = "";
	                    else {
	                        object.identitySig = [];
	                        if (options.bytes !== Array)
	                            object.identitySig = $util.newBuffer(object.identitySig);
	                    }
	                    if (options.bytes === String)
	                        object.data = "";
	                    else {
	                        object.data = [];
	                        if (options.bytes !== Array)
	                            object.data = $util.newBuffer(object.data);
	                    }
	                }
	                if (message.identityKey != null && message.hasOwnProperty("identityKey"))
	                    object.identityKey = options.bytes === String ? $util.base64.encode(message.identityKey, 0, message.identityKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.identityKey) : message.identityKey;
	                if (message.identitySig != null && message.hasOwnProperty("identitySig"))
	                    object.identitySig = options.bytes === String ? $util.base64.encode(message.identitySig, 0, message.identitySig.length) : options.bytes === Array ? Array.prototype.slice.call(message.identitySig) : message.identitySig;
	                if (message.data != null && message.hasOwnProperty("data"))
	                    object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
	                return object;
	            };
	            /**
	             * Converts this NoiseHandshakePayload to JSON.
	             * @function toJSON
	             * @memberof pb.NoiseHandshakePayload
	             * @instance
	             * @returns {Object.<string,*>} JSON object
	             */
	            NoiseHandshakePayload.prototype.toJSON = function toJSON() {
	                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	            };
	            return NoiseHandshakePayload;
	        })();
	        return pb;
	    })();
	    return $root;
	});

	}(payload));

	var __createBinding$1 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault$1 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar$1 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$1(result, mod, k);
	    __setModuleDefault$1(result, mod);
	    return result;
	};
	var __importDefault$2 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(utils$p, "__esModule", { value: true });
	utils$p.isValidPublicKey = utils$p.getHkdf = utils$p.verifySignedPayload = utils$p.getHandshakePayload = utils$p.decodePayload = utils$p.getPeerIdFromPayload = utils$p.signPayload = utils$p.createHandshakePayload = utils$p.getPayload = utils$p.generateKeypair = void 0;
	const hkdf_1 = hkdf;
	const sha256_1 = sha256$3;
	const x25519$1 = __importStar$1(x25519$2);
	const peer_id_1 = __importDefault$2(src$o.exports);
	const payload_1 = payload.exports;
	const equals_1 = require$$7$1;
	const from_string_1 = require$$5$3;
	const concat_1 = require$$9;
	const NoiseHandshakePayloadProto = payload_1.pb.NoiseHandshakePayload;
	function generateKeypair() {
	    const keypair = x25519$1.generateKeyPair();
	    return {
	        publicKey: keypair.publicKey,
	        privateKey: keypair.secretKey
	    };
	}
	utils$p.generateKeypair = generateKeypair;
	async function getPayload(localPeer, staticPublicKey, earlyData) {
	    const signedPayload = await signPayload(localPeer, getHandshakePayload(staticPublicKey));
	    const earlyDataPayload = earlyData !== null && earlyData !== void 0 ? earlyData : new Uint8Array(0);
	    return createHandshakePayload(localPeer.marshalPubKey(), signedPayload, earlyDataPayload);
	}
	utils$p.getPayload = getPayload;
	function createHandshakePayload(libp2pPublicKey, signedPayload, earlyData) {
	    const payloadInit = NoiseHandshakePayloadProto.create({
	        identityKey: libp2pPublicKey,
	        identitySig: signedPayload,
	        data: earlyData !== null && earlyData !== void 0 ? earlyData : null
	    });
	    return NoiseHandshakePayloadProto.encode(payloadInit).finish();
	}
	utils$p.createHandshakePayload = createHandshakePayload;
	async function signPayload(peerId, payload) {
	    return await peerId.privKey.sign(payload);
	}
	utils$p.signPayload = signPayload;
	async function getPeerIdFromPayload(payload) {
	    return await peer_id_1.default.createFromPubKey(payload.identityKey);
	}
	utils$p.getPeerIdFromPayload = getPeerIdFromPayload;
	function decodePayload(payload) {
	    return NoiseHandshakePayloadProto.toObject(NoiseHandshakePayloadProto.decode(payload));
	}
	utils$p.decodePayload = decodePayload;
	function getHandshakePayload(publicKey) {
	    const prefix = (0, from_string_1.fromString)('noise-libp2p-static-key:');
	    return (0, concat_1.concat)([prefix, publicKey], prefix.length + publicKey.length);
	}
	utils$p.getHandshakePayload = getHandshakePayload;
	async function isValidPeerId(peerId, publicKeyProtobuf) {
	    const generatedPeerId = await peer_id_1.default.createFromPubKey(publicKeyProtobuf);
	    return (0, equals_1.equals)(generatedPeerId.id, peerId);
	}
	/**
	 * Verifies signed payload, throws on any irregularities.
	 *
	 * @param {bytes} noiseStaticKey - owner's noise static key
	 * @param {bytes} payload - decoded payload
	 * @param {PeerId} remotePeer - owner's libp2p peer ID
	 * @returns {Promise<PeerId>} - peer ID of payload owner
	 */
	async function verifySignedPayload(noiseStaticKey, payload, remotePeer) {
	    const identityKey = payload.identityKey;
	    if (!(await isValidPeerId(remotePeer.id, identityKey))) {
	        throw new Error("Peer ID doesn't match libp2p public key.");
	    }
	    const generatedPayload = getHandshakePayload(noiseStaticKey);
	    // Unmarshaling from PublicKey protobuf
	    const peerId = await peer_id_1.default.createFromPubKey(identityKey);
	    // TODO remove this after libp2p-crypto ships proper types
	    // eslint-disable-next-line @typescript-eslint/no-misused-promises
	    if (!payload.identitySig || !peerId.pubKey.verify(generatedPayload, payload.identitySig)) {
	        throw new Error("Static key doesn't match to peer that signed payload!");
	    }
	    return peerId;
	}
	utils$p.verifySignedPayload = verifySignedPayload;
	function getHkdf(ck, ikm) {
	    const hkdf = new hkdf_1.HKDF(sha256_1.SHA256, ikm, ck);
	    const okmU8Array = hkdf.expand(96);
	    const okm = okmU8Array;
	    const k1 = okm.slice(0, 32);
	    const k2 = okm.slice(32, 64);
	    const k3 = okm.slice(64, 96);
	    return [k1, k2, k3];
	}
	utils$p.getHkdf = getHkdf;
	function isValidPublicKey(pk) {
	    if (!(pk instanceof Uint8Array)) {
	        return false;
	    }
	    if (pk.length !== 32) {
	        return false;
	    }
	    return true;
	}
	utils$p.isValidPublicKey = isValidPublicKey;

	var abstractHandshake = {};

	var chacha20poly1305 = {};

	var chacha = {};

	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(chacha, "__esModule", { value: true });
	/**
	 * Package chacha implements ChaCha stream cipher.
	 */
	var binary_1 = binary;
	var wipe_1 = wipe$1;
	// Number of ChaCha rounds (ChaCha20).
	var ROUNDS = 20;
	// Applies the ChaCha core function to 16-byte input,
	// 32-byte key key, and puts the result into 64-byte array out.
	function core(out, input, key) {
	    var j0 = 0x61707865; // "expa"  -- ChaCha's "sigma" constant
	    var j1 = 0x3320646E; // "nd 3"     for 32-byte keys
	    var j2 = 0x79622D32; // "2-by"
	    var j3 = 0x6B206574; // "te k"
	    var j4 = (key[3] << 24) | (key[2] << 16) | (key[1] << 8) | key[0];
	    var j5 = (key[7] << 24) | (key[6] << 16) | (key[5] << 8) | key[4];
	    var j6 = (key[11] << 24) | (key[10] << 16) | (key[9] << 8) | key[8];
	    var j7 = (key[15] << 24) | (key[14] << 16) | (key[13] << 8) | key[12];
	    var j8 = (key[19] << 24) | (key[18] << 16) | (key[17] << 8) | key[16];
	    var j9 = (key[23] << 24) | (key[22] << 16) | (key[21] << 8) | key[20];
	    var j10 = (key[27] << 24) | (key[26] << 16) | (key[25] << 8) | key[24];
	    var j11 = (key[31] << 24) | (key[30] << 16) | (key[29] << 8) | key[28];
	    var j12 = (input[3] << 24) | (input[2] << 16) | (input[1] << 8) | input[0];
	    var j13 = (input[7] << 24) | (input[6] << 16) | (input[5] << 8) | input[4];
	    var j14 = (input[11] << 24) | (input[10] << 16) | (input[9] << 8) | input[8];
	    var j15 = (input[15] << 24) | (input[14] << 16) | (input[13] << 8) | input[12];
	    var x0 = j0;
	    var x1 = j1;
	    var x2 = j2;
	    var x3 = j3;
	    var x4 = j4;
	    var x5 = j5;
	    var x6 = j6;
	    var x7 = j7;
	    var x8 = j8;
	    var x9 = j9;
	    var x10 = j10;
	    var x11 = j11;
	    var x12 = j12;
	    var x13 = j13;
	    var x14 = j14;
	    var x15 = j15;
	    for (var i = 0; i < ROUNDS; i += 2) {
	        x0 = x0 + x4 | 0;
	        x12 ^= x0;
	        x12 = x12 >>> (32 - 16) | x12 << 16;
	        x8 = x8 + x12 | 0;
	        x4 ^= x8;
	        x4 = x4 >>> (32 - 12) | x4 << 12;
	        x1 = x1 + x5 | 0;
	        x13 ^= x1;
	        x13 = x13 >>> (32 - 16) | x13 << 16;
	        x9 = x9 + x13 | 0;
	        x5 ^= x9;
	        x5 = x5 >>> (32 - 12) | x5 << 12;
	        x2 = x2 + x6 | 0;
	        x14 ^= x2;
	        x14 = x14 >>> (32 - 16) | x14 << 16;
	        x10 = x10 + x14 | 0;
	        x6 ^= x10;
	        x6 = x6 >>> (32 - 12) | x6 << 12;
	        x3 = x3 + x7 | 0;
	        x15 ^= x3;
	        x15 = x15 >>> (32 - 16) | x15 << 16;
	        x11 = x11 + x15 | 0;
	        x7 ^= x11;
	        x7 = x7 >>> (32 - 12) | x7 << 12;
	        x2 = x2 + x6 | 0;
	        x14 ^= x2;
	        x14 = x14 >>> (32 - 8) | x14 << 8;
	        x10 = x10 + x14 | 0;
	        x6 ^= x10;
	        x6 = x6 >>> (32 - 7) | x6 << 7;
	        x3 = x3 + x7 | 0;
	        x15 ^= x3;
	        x15 = x15 >>> (32 - 8) | x15 << 8;
	        x11 = x11 + x15 | 0;
	        x7 ^= x11;
	        x7 = x7 >>> (32 - 7) | x7 << 7;
	        x1 = x1 + x5 | 0;
	        x13 ^= x1;
	        x13 = x13 >>> (32 - 8) | x13 << 8;
	        x9 = x9 + x13 | 0;
	        x5 ^= x9;
	        x5 = x5 >>> (32 - 7) | x5 << 7;
	        x0 = x0 + x4 | 0;
	        x12 ^= x0;
	        x12 = x12 >>> (32 - 8) | x12 << 8;
	        x8 = x8 + x12 | 0;
	        x4 ^= x8;
	        x4 = x4 >>> (32 - 7) | x4 << 7;
	        x0 = x0 + x5 | 0;
	        x15 ^= x0;
	        x15 = x15 >>> (32 - 16) | x15 << 16;
	        x10 = x10 + x15 | 0;
	        x5 ^= x10;
	        x5 = x5 >>> (32 - 12) | x5 << 12;
	        x1 = x1 + x6 | 0;
	        x12 ^= x1;
	        x12 = x12 >>> (32 - 16) | x12 << 16;
	        x11 = x11 + x12 | 0;
	        x6 ^= x11;
	        x6 = x6 >>> (32 - 12) | x6 << 12;
	        x2 = x2 + x7 | 0;
	        x13 ^= x2;
	        x13 = x13 >>> (32 - 16) | x13 << 16;
	        x8 = x8 + x13 | 0;
	        x7 ^= x8;
	        x7 = x7 >>> (32 - 12) | x7 << 12;
	        x3 = x3 + x4 | 0;
	        x14 ^= x3;
	        x14 = x14 >>> (32 - 16) | x14 << 16;
	        x9 = x9 + x14 | 0;
	        x4 ^= x9;
	        x4 = x4 >>> (32 - 12) | x4 << 12;
	        x2 = x2 + x7 | 0;
	        x13 ^= x2;
	        x13 = x13 >>> (32 - 8) | x13 << 8;
	        x8 = x8 + x13 | 0;
	        x7 ^= x8;
	        x7 = x7 >>> (32 - 7) | x7 << 7;
	        x3 = x3 + x4 | 0;
	        x14 ^= x3;
	        x14 = x14 >>> (32 - 8) | x14 << 8;
	        x9 = x9 + x14 | 0;
	        x4 ^= x9;
	        x4 = x4 >>> (32 - 7) | x4 << 7;
	        x1 = x1 + x6 | 0;
	        x12 ^= x1;
	        x12 = x12 >>> (32 - 8) | x12 << 8;
	        x11 = x11 + x12 | 0;
	        x6 ^= x11;
	        x6 = x6 >>> (32 - 7) | x6 << 7;
	        x0 = x0 + x5 | 0;
	        x15 ^= x0;
	        x15 = x15 >>> (32 - 8) | x15 << 8;
	        x10 = x10 + x15 | 0;
	        x5 ^= x10;
	        x5 = x5 >>> (32 - 7) | x5 << 7;
	    }
	    binary_1.writeUint32LE(x0 + j0 | 0, out, 0);
	    binary_1.writeUint32LE(x1 + j1 | 0, out, 4);
	    binary_1.writeUint32LE(x2 + j2 | 0, out, 8);
	    binary_1.writeUint32LE(x3 + j3 | 0, out, 12);
	    binary_1.writeUint32LE(x4 + j4 | 0, out, 16);
	    binary_1.writeUint32LE(x5 + j5 | 0, out, 20);
	    binary_1.writeUint32LE(x6 + j6 | 0, out, 24);
	    binary_1.writeUint32LE(x7 + j7 | 0, out, 28);
	    binary_1.writeUint32LE(x8 + j8 | 0, out, 32);
	    binary_1.writeUint32LE(x9 + j9 | 0, out, 36);
	    binary_1.writeUint32LE(x10 + j10 | 0, out, 40);
	    binary_1.writeUint32LE(x11 + j11 | 0, out, 44);
	    binary_1.writeUint32LE(x12 + j12 | 0, out, 48);
	    binary_1.writeUint32LE(x13 + j13 | 0, out, 52);
	    binary_1.writeUint32LE(x14 + j14 | 0, out, 56);
	    binary_1.writeUint32LE(x15 + j15 | 0, out, 60);
	}
	/**
	 * Encrypt src with ChaCha20 stream generated for the given 32-byte key and
	 * 8-byte (as in original implementation) or 12-byte (as in RFC7539) nonce and
	 * write the result into dst and return it.
	 *
	 * dst and src may be the same, but otherwise must not overlap.
	 *
	 * If nonce is 12 bytes, users should not encrypt more than 256 GiB with the
	 * same key and nonce, otherwise the stream will repeat. The function will
	 * throw error if counter overflows to prevent this.
	 *
	 * If nonce is 8 bytes, the output is practically unlimited (2^70 bytes, which
	 * is more than a million petabytes). However, it is not recommended to
	 * generate 8-byte nonces randomly, as the chance of collision is high.
	 *
	 * Never use the same key and nonce to encrypt more than one message.
	 *
	 * If nonceInplaceCounterLength is not 0, the nonce is assumed to be a 16-byte
	 * array with stream counter in first nonceInplaceCounterLength bytes and nonce
	 * in the last remaining bytes. The counter will be incremented inplace for
	 * each ChaCha block. This is useful if you need to encrypt one stream of data
	 * in chunks.
	 */
	function streamXOR(key, nonce, src, dst, nonceInplaceCounterLength) {
	    if (nonceInplaceCounterLength === void 0) { nonceInplaceCounterLength = 0; }
	    // We only support 256-bit keys.
	    if (key.length !== 32) {
	        throw new Error("ChaCha: key size must be 32 bytes");
	    }
	    if (dst.length < src.length) {
	        throw new Error("ChaCha: destination is shorter than source");
	    }
	    var nc;
	    var counterLength;
	    if (nonceInplaceCounterLength === 0) {
	        if (nonce.length !== 8 && nonce.length !== 12) {
	            throw new Error("ChaCha nonce must be 8 or 12 bytes");
	        }
	        nc = new Uint8Array(16);
	        // First counterLength bytes of nc are counter, starting with zero.
	        counterLength = nc.length - nonce.length;
	        // Last bytes of nc after counterLength are nonce, set them.
	        nc.set(nonce, counterLength);
	    }
	    else {
	        if (nonce.length !== 16) {
	            throw new Error("ChaCha nonce with counter must be 16 bytes");
	        }
	        // This will update passed nonce with counter inplace.
	        nc = nonce;
	        counterLength = nonceInplaceCounterLength;
	    }
	    // Allocate temporary space for ChaCha block.
	    var block = new Uint8Array(64);
	    for (var i = 0; i < src.length; i += 64) {
	        // Generate a block.
	        core(block, nc, key);
	        // XOR block bytes with src into dst.
	        for (var j = i; j < i + 64 && j < src.length; j++) {
	            dst[j] = src[j] ^ block[j - i];
	        }
	        // Increment counter.
	        incrementCounter(nc, 0, counterLength);
	    }
	    // Cleanup temporary space.
	    wipe_1.wipe(block);
	    if (nonceInplaceCounterLength === 0) {
	        // Cleanup counter.
	        wipe_1.wipe(nc);
	    }
	    return dst;
	}
	chacha.streamXOR = streamXOR;
	/**
	 * Generate ChaCha20 stream for the given 32-byte key and 8-byte or 12-byte
	 * nonce and write it into dst and return it.
	 *
	 * Never use the same key and nonce to generate more than one stream.
	 *
	 * If nonceInplaceCounterLength is not 0, it behaves the same with respect to
	 * the nonce as described in the streamXOR documentation.
	 *
	 * stream is like streamXOR with all-zero src.
	 */
	function stream(key, nonce, dst, nonceInplaceCounterLength) {
	    if (nonceInplaceCounterLength === void 0) { nonceInplaceCounterLength = 0; }
	    wipe_1.wipe(dst);
	    return streamXOR(key, nonce, dst, dst, nonceInplaceCounterLength);
	}
	chacha.stream = stream;
	function incrementCounter(counter, pos, len) {
	    var carry = 1;
	    while (len--) {
	        carry = carry + (counter[pos] & 0xff) | 0;
	        counter[pos] = carry & 0xff;
	        carry >>>= 8;
	        pos++;
	    }
	    if (carry > 0) {
	        throw new Error("ChaCha: counter overflow");
	    }
	}

	var poly1305 = {};

	(function (exports) {
	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	 * Package poly1305 implements Poly1305 one-time message authentication algorithm.
	 */
	var constant_time_1 = constantTime;
	var wipe_1 = wipe$1;
	exports.DIGEST_LENGTH = 16;
	// Port of Andrew Moon's Poly1305-donna-16. Public domain.
	// https://github.com/floodyberry/poly1305-donna
	/**
	 * Poly1305 computes 16-byte authenticator of message using
	 * a one-time 32-byte key.
	 *
	 * Important: key should be used for only one message,
	 * it should never repeat.
	 */
	var Poly1305 = /** @class */ (function () {
	    function Poly1305(key) {
	        this.digestLength = exports.DIGEST_LENGTH;
	        this._buffer = new Uint8Array(16);
	        this._r = new Uint16Array(10);
	        this._h = new Uint16Array(10);
	        this._pad = new Uint16Array(8);
	        this._leftover = 0;
	        this._fin = 0;
	        this._finished = false;
	        var t0 = key[0] | key[1] << 8;
	        this._r[0] = (t0) & 0x1fff;
	        var t1 = key[2] | key[3] << 8;
	        this._r[1] = ((t0 >>> 13) | (t1 << 3)) & 0x1fff;
	        var t2 = key[4] | key[5] << 8;
	        this._r[2] = ((t1 >>> 10) | (t2 << 6)) & 0x1f03;
	        var t3 = key[6] | key[7] << 8;
	        this._r[3] = ((t2 >>> 7) | (t3 << 9)) & 0x1fff;
	        var t4 = key[8] | key[9] << 8;
	        this._r[4] = ((t3 >>> 4) | (t4 << 12)) & 0x00ff;
	        this._r[5] = ((t4 >>> 1)) & 0x1ffe;
	        var t5 = key[10] | key[11] << 8;
	        this._r[6] = ((t4 >>> 14) | (t5 << 2)) & 0x1fff;
	        var t6 = key[12] | key[13] << 8;
	        this._r[7] = ((t5 >>> 11) | (t6 << 5)) & 0x1f81;
	        var t7 = key[14] | key[15] << 8;
	        this._r[8] = ((t6 >>> 8) | (t7 << 8)) & 0x1fff;
	        this._r[9] = ((t7 >>> 5)) & 0x007f;
	        this._pad[0] = key[16] | key[17] << 8;
	        this._pad[1] = key[18] | key[19] << 8;
	        this._pad[2] = key[20] | key[21] << 8;
	        this._pad[3] = key[22] | key[23] << 8;
	        this._pad[4] = key[24] | key[25] << 8;
	        this._pad[5] = key[26] | key[27] << 8;
	        this._pad[6] = key[28] | key[29] << 8;
	        this._pad[7] = key[30] | key[31] << 8;
	    }
	    Poly1305.prototype._blocks = function (m, mpos, bytes) {
	        var hibit = this._fin ? 0 : 1 << 11;
	        var h0 = this._h[0], h1 = this._h[1], h2 = this._h[2], h3 = this._h[3], h4 = this._h[4], h5 = this._h[5], h6 = this._h[6], h7 = this._h[7], h8 = this._h[8], h9 = this._h[9];
	        var r0 = this._r[0], r1 = this._r[1], r2 = this._r[2], r3 = this._r[3], r4 = this._r[4], r5 = this._r[5], r6 = this._r[6], r7 = this._r[7], r8 = this._r[8], r9 = this._r[9];
	        while (bytes >= 16) {
	            var t0 = m[mpos + 0] | m[mpos + 1] << 8;
	            h0 += (t0) & 0x1fff;
	            var t1 = m[mpos + 2] | m[mpos + 3] << 8;
	            h1 += ((t0 >>> 13) | (t1 << 3)) & 0x1fff;
	            var t2 = m[mpos + 4] | m[mpos + 5] << 8;
	            h2 += ((t1 >>> 10) | (t2 << 6)) & 0x1fff;
	            var t3 = m[mpos + 6] | m[mpos + 7] << 8;
	            h3 += ((t2 >>> 7) | (t3 << 9)) & 0x1fff;
	            var t4 = m[mpos + 8] | m[mpos + 9] << 8;
	            h4 += ((t3 >>> 4) | (t4 << 12)) & 0x1fff;
	            h5 += ((t4 >>> 1)) & 0x1fff;
	            var t5 = m[mpos + 10] | m[mpos + 11] << 8;
	            h6 += ((t4 >>> 14) | (t5 << 2)) & 0x1fff;
	            var t6 = m[mpos + 12] | m[mpos + 13] << 8;
	            h7 += ((t5 >>> 11) | (t6 << 5)) & 0x1fff;
	            var t7 = m[mpos + 14] | m[mpos + 15] << 8;
	            h8 += ((t6 >>> 8) | (t7 << 8)) & 0x1fff;
	            h9 += ((t7 >>> 5)) | hibit;
	            var c = 0;
	            var d0 = c;
	            d0 += h0 * r0;
	            d0 += h1 * (5 * r9);
	            d0 += h2 * (5 * r8);
	            d0 += h3 * (5 * r7);
	            d0 += h4 * (5 * r6);
	            c = (d0 >>> 13);
	            d0 &= 0x1fff;
	            d0 += h5 * (5 * r5);
	            d0 += h6 * (5 * r4);
	            d0 += h7 * (5 * r3);
	            d0 += h8 * (5 * r2);
	            d0 += h9 * (5 * r1);
	            c += (d0 >>> 13);
	            d0 &= 0x1fff;
	            var d1 = c;
	            d1 += h0 * r1;
	            d1 += h1 * r0;
	            d1 += h2 * (5 * r9);
	            d1 += h3 * (5 * r8);
	            d1 += h4 * (5 * r7);
	            c = (d1 >>> 13);
	            d1 &= 0x1fff;
	            d1 += h5 * (5 * r6);
	            d1 += h6 * (5 * r5);
	            d1 += h7 * (5 * r4);
	            d1 += h8 * (5 * r3);
	            d1 += h9 * (5 * r2);
	            c += (d1 >>> 13);
	            d1 &= 0x1fff;
	            var d2 = c;
	            d2 += h0 * r2;
	            d2 += h1 * r1;
	            d2 += h2 * r0;
	            d2 += h3 * (5 * r9);
	            d2 += h4 * (5 * r8);
	            c = (d2 >>> 13);
	            d2 &= 0x1fff;
	            d2 += h5 * (5 * r7);
	            d2 += h6 * (5 * r6);
	            d2 += h7 * (5 * r5);
	            d2 += h8 * (5 * r4);
	            d2 += h9 * (5 * r3);
	            c += (d2 >>> 13);
	            d2 &= 0x1fff;
	            var d3 = c;
	            d3 += h0 * r3;
	            d3 += h1 * r2;
	            d3 += h2 * r1;
	            d3 += h3 * r0;
	            d3 += h4 * (5 * r9);
	            c = (d3 >>> 13);
	            d3 &= 0x1fff;
	            d3 += h5 * (5 * r8);
	            d3 += h6 * (5 * r7);
	            d3 += h7 * (5 * r6);
	            d3 += h8 * (5 * r5);
	            d3 += h9 * (5 * r4);
	            c += (d3 >>> 13);
	            d3 &= 0x1fff;
	            var d4 = c;
	            d4 += h0 * r4;
	            d4 += h1 * r3;
	            d4 += h2 * r2;
	            d4 += h3 * r1;
	            d4 += h4 * r0;
	            c = (d4 >>> 13);
	            d4 &= 0x1fff;
	            d4 += h5 * (5 * r9);
	            d4 += h6 * (5 * r8);
	            d4 += h7 * (5 * r7);
	            d4 += h8 * (5 * r6);
	            d4 += h9 * (5 * r5);
	            c += (d4 >>> 13);
	            d4 &= 0x1fff;
	            var d5 = c;
	            d5 += h0 * r5;
	            d5 += h1 * r4;
	            d5 += h2 * r3;
	            d5 += h3 * r2;
	            d5 += h4 * r1;
	            c = (d5 >>> 13);
	            d5 &= 0x1fff;
	            d5 += h5 * r0;
	            d5 += h6 * (5 * r9);
	            d5 += h7 * (5 * r8);
	            d5 += h8 * (5 * r7);
	            d5 += h9 * (5 * r6);
	            c += (d5 >>> 13);
	            d5 &= 0x1fff;
	            var d6 = c;
	            d6 += h0 * r6;
	            d6 += h1 * r5;
	            d6 += h2 * r4;
	            d6 += h3 * r3;
	            d6 += h4 * r2;
	            c = (d6 >>> 13);
	            d6 &= 0x1fff;
	            d6 += h5 * r1;
	            d6 += h6 * r0;
	            d6 += h7 * (5 * r9);
	            d6 += h8 * (5 * r8);
	            d6 += h9 * (5 * r7);
	            c += (d6 >>> 13);
	            d6 &= 0x1fff;
	            var d7 = c;
	            d7 += h0 * r7;
	            d7 += h1 * r6;
	            d7 += h2 * r5;
	            d7 += h3 * r4;
	            d7 += h4 * r3;
	            c = (d7 >>> 13);
	            d7 &= 0x1fff;
	            d7 += h5 * r2;
	            d7 += h6 * r1;
	            d7 += h7 * r0;
	            d7 += h8 * (5 * r9);
	            d7 += h9 * (5 * r8);
	            c += (d7 >>> 13);
	            d7 &= 0x1fff;
	            var d8 = c;
	            d8 += h0 * r8;
	            d8 += h1 * r7;
	            d8 += h2 * r6;
	            d8 += h3 * r5;
	            d8 += h4 * r4;
	            c = (d8 >>> 13);
	            d8 &= 0x1fff;
	            d8 += h5 * r3;
	            d8 += h6 * r2;
	            d8 += h7 * r1;
	            d8 += h8 * r0;
	            d8 += h9 * (5 * r9);
	            c += (d8 >>> 13);
	            d8 &= 0x1fff;
	            var d9 = c;
	            d9 += h0 * r9;
	            d9 += h1 * r8;
	            d9 += h2 * r7;
	            d9 += h3 * r6;
	            d9 += h4 * r5;
	            c = (d9 >>> 13);
	            d9 &= 0x1fff;
	            d9 += h5 * r4;
	            d9 += h6 * r3;
	            d9 += h7 * r2;
	            d9 += h8 * r1;
	            d9 += h9 * r0;
	            c += (d9 >>> 13);
	            d9 &= 0x1fff;
	            c = (((c << 2) + c)) | 0;
	            c = (c + d0) | 0;
	            d0 = c & 0x1fff;
	            c = (c >>> 13);
	            d1 += c;
	            h0 = d0;
	            h1 = d1;
	            h2 = d2;
	            h3 = d3;
	            h4 = d4;
	            h5 = d5;
	            h6 = d6;
	            h7 = d7;
	            h8 = d8;
	            h9 = d9;
	            mpos += 16;
	            bytes -= 16;
	        }
	        this._h[0] = h0;
	        this._h[1] = h1;
	        this._h[2] = h2;
	        this._h[3] = h3;
	        this._h[4] = h4;
	        this._h[5] = h5;
	        this._h[6] = h6;
	        this._h[7] = h7;
	        this._h[8] = h8;
	        this._h[9] = h9;
	    };
	    Poly1305.prototype.finish = function (mac, macpos) {
	        if (macpos === void 0) { macpos = 0; }
	        var g = new Uint16Array(10);
	        var c;
	        var mask;
	        var f;
	        var i;
	        if (this._leftover) {
	            i = this._leftover;
	            this._buffer[i++] = 1;
	            for (; i < 16; i++) {
	                this._buffer[i] = 0;
	            }
	            this._fin = 1;
	            this._blocks(this._buffer, 0, 16);
	        }
	        c = this._h[1] >>> 13;
	        this._h[1] &= 0x1fff;
	        for (i = 2; i < 10; i++) {
	            this._h[i] += c;
	            c = this._h[i] >>> 13;
	            this._h[i] &= 0x1fff;
	        }
	        this._h[0] += (c * 5);
	        c = this._h[0] >>> 13;
	        this._h[0] &= 0x1fff;
	        this._h[1] += c;
	        c = this._h[1] >>> 13;
	        this._h[1] &= 0x1fff;
	        this._h[2] += c;
	        g[0] = this._h[0] + 5;
	        c = g[0] >>> 13;
	        g[0] &= 0x1fff;
	        for (i = 1; i < 10; i++) {
	            g[i] = this._h[i] + c;
	            c = g[i] >>> 13;
	            g[i] &= 0x1fff;
	        }
	        g[9] -= (1 << 13);
	        mask = (c ^ 1) - 1;
	        for (i = 0; i < 10; i++) {
	            g[i] &= mask;
	        }
	        mask = ~mask;
	        for (i = 0; i < 10; i++) {
	            this._h[i] = (this._h[i] & mask) | g[i];
	        }
	        this._h[0] = ((this._h[0]) | (this._h[1] << 13)) & 0xffff;
	        this._h[1] = ((this._h[1] >>> 3) | (this._h[2] << 10)) & 0xffff;
	        this._h[2] = ((this._h[2] >>> 6) | (this._h[3] << 7)) & 0xffff;
	        this._h[3] = ((this._h[3] >>> 9) | (this._h[4] << 4)) & 0xffff;
	        this._h[4] = ((this._h[4] >>> 12) | (this._h[5] << 1) | (this._h[6] << 14)) & 0xffff;
	        this._h[5] = ((this._h[6] >>> 2) | (this._h[7] << 11)) & 0xffff;
	        this._h[6] = ((this._h[7] >>> 5) | (this._h[8] << 8)) & 0xffff;
	        this._h[7] = ((this._h[8] >>> 8) | (this._h[9] << 5)) & 0xffff;
	        f = this._h[0] + this._pad[0];
	        this._h[0] = f & 0xffff;
	        for (i = 1; i < 8; i++) {
	            f = (((this._h[i] + this._pad[i]) | 0) + (f >>> 16)) | 0;
	            this._h[i] = f & 0xffff;
	        }
	        mac[macpos + 0] = this._h[0] >>> 0;
	        mac[macpos + 1] = this._h[0] >>> 8;
	        mac[macpos + 2] = this._h[1] >>> 0;
	        mac[macpos + 3] = this._h[1] >>> 8;
	        mac[macpos + 4] = this._h[2] >>> 0;
	        mac[macpos + 5] = this._h[2] >>> 8;
	        mac[macpos + 6] = this._h[3] >>> 0;
	        mac[macpos + 7] = this._h[3] >>> 8;
	        mac[macpos + 8] = this._h[4] >>> 0;
	        mac[macpos + 9] = this._h[4] >>> 8;
	        mac[macpos + 10] = this._h[5] >>> 0;
	        mac[macpos + 11] = this._h[5] >>> 8;
	        mac[macpos + 12] = this._h[6] >>> 0;
	        mac[macpos + 13] = this._h[6] >>> 8;
	        mac[macpos + 14] = this._h[7] >>> 0;
	        mac[macpos + 15] = this._h[7] >>> 8;
	        this._finished = true;
	        return this;
	    };
	    Poly1305.prototype.update = function (m) {
	        var mpos = 0;
	        var bytes = m.length;
	        var want;
	        if (this._leftover) {
	            want = (16 - this._leftover);
	            if (want > bytes) {
	                want = bytes;
	            }
	            for (var i = 0; i < want; i++) {
	                this._buffer[this._leftover + i] = m[mpos + i];
	            }
	            bytes -= want;
	            mpos += want;
	            this._leftover += want;
	            if (this._leftover < 16) {
	                return this;
	            }
	            this._blocks(this._buffer, 0, 16);
	            this._leftover = 0;
	        }
	        if (bytes >= 16) {
	            want = bytes - (bytes % 16);
	            this._blocks(m, mpos, want);
	            mpos += want;
	            bytes -= want;
	        }
	        if (bytes) {
	            for (var i = 0; i < bytes; i++) {
	                this._buffer[this._leftover + i] = m[mpos + i];
	            }
	            this._leftover += bytes;
	        }
	        return this;
	    };
	    Poly1305.prototype.digest = function () {
	        // TODO(dchest): it behaves differently than other hashes/HMAC,
	        // because it throws when finished — others just return saved result.
	        if (this._finished) {
	            throw new Error("Poly1305 was finished");
	        }
	        var mac = new Uint8Array(16);
	        this.finish(mac);
	        return mac;
	    };
	    Poly1305.prototype.clean = function () {
	        wipe_1.wipe(this._buffer);
	        wipe_1.wipe(this._r);
	        wipe_1.wipe(this._h);
	        wipe_1.wipe(this._pad);
	        this._leftover = 0;
	        this._fin = 0;
	        this._finished = true; // mark as finished even if not
	        return this;
	    };
	    return Poly1305;
	}());
	exports.Poly1305 = Poly1305;
	/**
	 * Returns 16-byte authenticator of data using a one-time 32-byte key.
	 *
	 * Important: key should be used for only one message, it should never repeat.
	 */
	function oneTimeAuth(key, data) {
	    var h = new Poly1305(key);
	    h.update(data);
	    var digest = h.digest();
	    h.clean();
	    return digest;
	}
	exports.oneTimeAuth = oneTimeAuth;
	/**
	 * Returns true if two authenticators are 16-byte long and equal.
	 * Uses contant-time comparison to avoid leaking timing information.
	 */
	function equal(a, b) {
	    if (a.length !== exports.DIGEST_LENGTH || b.length !== exports.DIGEST_LENGTH) {
	        return false;
	    }
	    return constant_time_1.equal(a, b);
	}
	exports.equal = equal;

	}(poly1305));

	(function (exports) {
	// Copyright (C) 2016 Dmitry Chestnykh
	// MIT License. See LICENSE file for details.
	Object.defineProperty(exports, "__esModule", { value: true });
	var chacha_1 = chacha;
	var poly1305_1 = poly1305;
	var wipe_1 = wipe$1;
	var binary_1 = binary;
	var constant_time_1 = constantTime;
	exports.KEY_LENGTH = 32;
	exports.NONCE_LENGTH = 12;
	exports.TAG_LENGTH = 16;
	var ZEROS = new Uint8Array(16);
	/**
	 * ChaCha20-Poly1305 Authenticated Encryption with Associated Data.
	 *
	 * Defined in RFC7539.
	 */
	var ChaCha20Poly1305 = /** @class */ (function () {
	    /**
	     * Creates a new instance with the given 32-byte key.
	     */
	    function ChaCha20Poly1305(key) {
	        this.nonceLength = exports.NONCE_LENGTH;
	        this.tagLength = exports.TAG_LENGTH;
	        if (key.length !== exports.KEY_LENGTH) {
	            throw new Error("ChaCha20Poly1305 needs 32-byte key");
	        }
	        // Copy key.
	        this._key = new Uint8Array(key);
	    }
	    /**
	     * Encrypts and authenticates plaintext, authenticates associated data,
	     * and returns sealed ciphertext, which includes authentication tag.
	     *
	     * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce
	     * ("IV"), or full 16-byte counter (called "32-bit fixed-common part")
	     * and nonce.
	     *
	     * If dst is given (it must be the size of plaintext + the size of tag
	     * length) the result will be put into it. Dst and plaintext must not
	     * overlap.
	     */
	    ChaCha20Poly1305.prototype.seal = function (nonce, plaintext, associatedData, dst) {
	        if (nonce.length > 16) {
	            throw new Error("ChaCha20Poly1305: incorrect nonce length");
	        }
	        // Allocate space for counter, and set nonce as last bytes of it.
	        var counter = new Uint8Array(16);
	        counter.set(nonce, counter.length - nonce.length);
	        // Generate authentication key by taking first 32-bytes of stream.
	        // We pass full counter, which has 12-byte nonce and 4-byte block counter,
	        // and it will get incremented after generating the block, which is
	        // exactly what we need: we only use the first 32 bytes of 64-byte
	        // ChaCha block and discard the next 32 bytes.
	        var authKey = new Uint8Array(32);
	        chacha_1.stream(this._key, counter, authKey, 4);
	        // Allocate space for sealed ciphertext.
	        var resultLength = plaintext.length + this.tagLength;
	        var result;
	        if (dst) {
	            if (dst.length !== resultLength) {
	                throw new Error("ChaCha20Poly1305: incorrect destination length");
	            }
	            result = dst;
	        }
	        else {
	            result = new Uint8Array(resultLength);
	        }
	        // Encrypt plaintext.
	        chacha_1.streamXOR(this._key, counter, plaintext, result, 4);
	        // Authenticate.
	        // XXX: can "simplify" here: pass full result (which is already padded
	        // due to zeroes prepared for tag), and ciphertext length instead of
	        // subarray of result.
	        this._authenticate(result.subarray(result.length - this.tagLength, result.length), authKey, result.subarray(0, result.length - this.tagLength), associatedData);
	        // Cleanup.
	        wipe_1.wipe(counter);
	        return result;
	    };
	    /**
	     * Authenticates sealed ciphertext (which includes authentication tag) and
	     * associated data, decrypts ciphertext and returns decrypted plaintext.
	     *
	     * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce
	     * ("IV"), or full 16-byte counter (called "32-bit fixed-common part")
	     * and nonce.
	     *
	     * If authentication fails, it returns null.
	     *
	     * If dst is given (it must be of ciphertext length minus tag length),
	     * the result will be put into it. Dst and plaintext must not overlap.
	     */
	    ChaCha20Poly1305.prototype.open = function (nonce, sealed, associatedData, dst) {
	        if (nonce.length > 16) {
	            throw new Error("ChaCha20Poly1305: incorrect nonce length");
	        }
	        // Sealed ciphertext should at least contain tag.
	        if (sealed.length < this.tagLength) {
	            // TODO(dchest): should we throw here instead?
	            return null;
	        }
	        // Allocate space for counter, and set nonce as last bytes of it.
	        var counter = new Uint8Array(16);
	        counter.set(nonce, counter.length - nonce.length);
	        // Generate authentication key by taking first 32-bytes of stream.
	        var authKey = new Uint8Array(32);
	        chacha_1.stream(this._key, counter, authKey, 4);
	        // Authenticate.
	        // XXX: can simplify and avoid allocation: since authenticate()
	        // already allocates tag (from Poly1305.digest(), it can return)
	        // it instead of copying to calculatedTag. But then in seal()
	        // we'll need to copy it.
	        var calculatedTag = new Uint8Array(this.tagLength);
	        this._authenticate(calculatedTag, authKey, sealed.subarray(0, sealed.length - this.tagLength), associatedData);
	        // Constant-time compare tags and return null if they differ.
	        if (!constant_time_1.equal(calculatedTag, sealed.subarray(sealed.length - this.tagLength, sealed.length))) {
	            return null;
	        }
	        // Allocate space for decrypted plaintext.
	        var resultLength = sealed.length - this.tagLength;
	        var result;
	        if (dst) {
	            if (dst.length !== resultLength) {
	                throw new Error("ChaCha20Poly1305: incorrect destination length");
	            }
	            result = dst;
	        }
	        else {
	            result = new Uint8Array(resultLength);
	        }
	        // Decrypt.
	        chacha_1.streamXOR(this._key, counter, sealed.subarray(0, sealed.length - this.tagLength), result, 4);
	        // Cleanup.
	        wipe_1.wipe(counter);
	        return result;
	    };
	    ChaCha20Poly1305.prototype.clean = function () {
	        wipe_1.wipe(this._key);
	        return this;
	    };
	    ChaCha20Poly1305.prototype._authenticate = function (tagOut, authKey, ciphertext, associatedData) {
	        // Initialize Poly1305 with authKey.
	        var h = new poly1305_1.Poly1305(authKey);
	        // Authenticate padded associated data.
	        if (associatedData) {
	            h.update(associatedData);
	            if (associatedData.length % 16 > 0) {
	                h.update(ZEROS.subarray(associatedData.length % 16));
	            }
	        }
	        // Authenticate padded ciphertext.
	        h.update(ciphertext);
	        if (ciphertext.length % 16 > 0) {
	            h.update(ZEROS.subarray(ciphertext.length % 16));
	        }
	        // Authenticate length of associated data.
	        // XXX: can avoid allocation here?
	        var length = new Uint8Array(8);
	        if (associatedData) {
	            binary_1.writeUint64LE(associatedData.length, length);
	        }
	        h.update(length);
	        // Authenticate length of ciphertext.
	        binary_1.writeUint64LE(ciphertext.length, length);
	        h.update(length);
	        // Get tag and copy it into tagOut.
	        var tag = h.digest();
	        for (var i = 0; i < tag.length; i++) {
	            tagOut[i] = tag[i];
	        }
	        // Cleanup.
	        h.clean();
	        wipe_1.wipe(tag);
	        wipe_1.wipe(length);
	    };
	    return ChaCha20Poly1305;
	}());
	exports.ChaCha20Poly1305 = ChaCha20Poly1305;

	}(chacha20poly1305));

	function xor$1(a, b) {
	  if (a.length !== b.length) {
	    throw new Error('Inputs should have the same length');
	  }
	  const result = new Uint8Array(a.length);
	  for (let i = 0; i < a.length; i++) {
	    result[i] = a[i] ^ b[i];
	  }
	  return result;
	}

	var xor$2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		xor: xor$1
	});

	var src$8 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		compare: compare$1,
		concat: concat$2,
		equals: equals$1,
		fromString: fromString$4,
		toString: toString$6,
		xor: xor$1
	});

	var require$$5$1 = /*@__PURE__*/getAugmentedNamespace(src$8);

	var logger$4 = {};

	var constants$6 = {};

	(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.DUMP_SESSION_KEYS = exports.NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG = exports.NOISE_MSG_MAX_LENGTH_BYTES = void 0;
	exports.NOISE_MSG_MAX_LENGTH_BYTES = 65535;
	exports.NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG = exports.NOISE_MSG_MAX_LENGTH_BYTES - 16;
	exports.DUMP_SESSION_KEYS = process$3.env.DUMP_SESSION_KEYS;

	}(constants$6));

	(function (exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.logCipherState = exports.logRemoteEphemeralKey = exports.logRemoteStaticKey = exports.logLocalEphemeralKeys = exports.logLocalStaticKeys = exports.logger = void 0;
	const debug_1 = __importDefault(browser$a.exports);
	const constants_1 = constants$6;
	const to_string_1 = require$$8;
	exports.logger = (0, debug_1.default)('libp2p:noise');
	let keyLogger;
	if (constants_1.DUMP_SESSION_KEYS) {
	    keyLogger = exports.logger;
	}
	else {
	    keyLogger = () => { };
	}
	function logLocalStaticKeys(s) {
	    keyLogger(`LOCAL_STATIC_PUBLIC_KEY ${(0, to_string_1.toString)(s.publicKey, 'hex')}`);
	    keyLogger(`LOCAL_STATIC_PRIVATE_KEY ${(0, to_string_1.toString)(s.privateKey, 'hex')}`);
	}
	exports.logLocalStaticKeys = logLocalStaticKeys;
	function logLocalEphemeralKeys(e) {
	    if (e) {
	        keyLogger(`LOCAL_PUBLIC_EPHEMERAL_KEY ${(0, to_string_1.toString)(e.publicKey, 'hex')}`);
	        keyLogger(`LOCAL_PRIVATE_EPHEMERAL_KEY ${(0, to_string_1.toString)(e.privateKey, 'hex')}`);
	    }
	    else {
	        keyLogger('Missing local ephemeral keys.');
	    }
	}
	exports.logLocalEphemeralKeys = logLocalEphemeralKeys;
	function logRemoteStaticKey(rs) {
	    keyLogger(`REMOTE_STATIC_PUBLIC_KEY ${(0, to_string_1.toString)(rs, 'hex')}`);
	}
	exports.logRemoteStaticKey = logRemoteStaticKey;
	function logRemoteEphemeralKey(re) {
	    keyLogger(`REMOTE_EPHEMERAL_PUBLIC_KEY ${(0, to_string_1.toString)(re, 'hex')}`);
	}
	exports.logRemoteEphemeralKey = logRemoteEphemeralKey;
	function logCipherState(session) {
	    if (session.cs1 && session.cs2) {
	        keyLogger(`CIPHER_STATE_1 ${session.cs1.n} ${(0, to_string_1.toString)(session.cs1.k, 'hex')}`);
	        keyLogger(`CIPHER_STATE_2 ${session.cs2.n} ${(0, to_string_1.toString)(session.cs2.k, 'hex')}`);
	    }
	    else {
	        keyLogger('Missing cipher state.');
	    }
	}
	exports.logCipherState = logCipherState;

	}(logger$4));

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.AbstractHandshake = exports.MAX_NONCE = exports.MIN_NONCE = void 0;
	const x25519 = __importStar(x25519$2);
	const SHA256 = __importStar(sha256$3);
	const chacha20poly1305_1 = chacha20poly1305;
	const equals_1 = require$$7$1;
	const concat_1 = require$$9;
	const uint8arrays_1 = require$$5$1;
	const utils_1 = utils$p;
	const logger_1 = logger$4;
	exports.MIN_NONCE = 0;
	// For performance reasons, the nonce is represented as a JS `number`
	// JS `number` can only safely represent integers up to 2 ** 53 - 1
	// This is a slight deviation from the noise spec, which describes the max nonce as 2 ** 64 - 2
	// The effect is that this implementation will need a new handshake to be performed after fewer messages are exchanged than other implementations with full uint64 nonces.
	// 2 ** 53 - 1 is still a large number of messages, so the practical effect of this is negligible.
	exports.MAX_NONCE = Number.MAX_SAFE_INTEGER;
	const ERR_MAX_NONCE = 'Cipherstate has reached maximum n, a new handshake must be performed';
	class AbstractHandshake {
	    encryptWithAd(cs, ad, plaintext) {
	        const e = this.encrypt(cs.k, cs.n, ad, plaintext);
	        this.setNonce(cs, this.incrementNonce(cs.n));
	        return e;
	    }
	    decryptWithAd(cs, ad, ciphertext) {
	        const { plaintext, valid } = this.decrypt(cs.k, cs.n, ad, ciphertext);
	        this.setNonce(cs, this.incrementNonce(cs.n));
	        return { plaintext, valid };
	    }
	    // Cipher state related
	    hasKey(cs) {
	        return !this.isEmptyKey(cs.k);
	    }
	    setNonce(cs, nonce) {
	        cs.n = nonce;
	    }
	    createEmptyKey() {
	        return new Uint8Array(32);
	    }
	    isEmptyKey(k) {
	        const emptyKey = this.createEmptyKey();
	        return (0, equals_1.equals)(emptyKey, k);
	    }
	    incrementNonce(n) {
	        return n + 1;
	    }
	    nonceToBytes(n) {
	        // Even though we're treating the nonce as 8 bytes, RFC7539 specifies 12 bytes for a nonce.
	        const nonce = new Uint8Array(12);
	        new DataView(nonce.buffer, nonce.byteOffset, nonce.byteLength).setUint32(4, n, true);
	        return nonce;
	    }
	    encrypt(k, n, ad, plaintext) {
	        if (n > exports.MAX_NONCE) {
	            throw new Error(ERR_MAX_NONCE);
	        }
	        const nonce = this.nonceToBytes(n);
	        const ctx = new chacha20poly1305_1.ChaCha20Poly1305(k);
	        return ctx.seal(nonce, plaintext, ad);
	    }
	    encryptAndHash(ss, plaintext) {
	        let ciphertext;
	        if (this.hasKey(ss.cs)) {
	            ciphertext = this.encryptWithAd(ss.cs, ss.h, plaintext);
	        }
	        else {
	            ciphertext = plaintext;
	        }
	        this.mixHash(ss, ciphertext);
	        return ciphertext;
	    }
	    decrypt(k, n, ad, ciphertext) {
	        if (n > exports.MAX_NONCE) {
	            throw new Error(ERR_MAX_NONCE);
	        }
	        const nonce = this.nonceToBytes(n);
	        const ctx = new chacha20poly1305_1.ChaCha20Poly1305(k);
	        const encryptedMessage = ctx.open(nonce, ciphertext, ad);
	        if (encryptedMessage) {
	            return {
	                plaintext: encryptedMessage,
	                valid: true
	            };
	        }
	        else {
	            return {
	                plaintext: new Uint8Array(0),
	                valid: false
	            };
	        }
	    }
	    decryptAndHash(ss, ciphertext) {
	        let plaintext;
	        let valid = true;
	        if (this.hasKey(ss.cs)) {
	            ({ plaintext, valid } = this.decryptWithAd(ss.cs, ss.h, ciphertext));
	        }
	        else {
	            plaintext = ciphertext;
	        }
	        this.mixHash(ss, ciphertext);
	        return { plaintext, valid };
	    }
	    dh(privateKey, publicKey) {
	        try {
	            const derivedU8 = x25519.sharedKey(privateKey, publicKey);
	            if (derivedU8.length === 32) {
	                return derivedU8;
	            }
	            return derivedU8.slice(0, 32);
	        }
	        catch (e) {
	            (0, logger_1.logger)(e.message);
	            return new Uint8Array(32);
	        }
	    }
	    mixHash(ss, data) {
	        ss.h = this.getHash(ss.h, data);
	    }
	    getHash(a, b) {
	        const u = SHA256.hash((0, concat_1.concat)([a, b], a.length + b.length));
	        return u;
	    }
	    mixKey(ss, ikm) {
	        const [ck, tempK] = (0, utils_1.getHkdf)(ss.ck, ikm);
	        ss.cs = this.initializeKey(tempK);
	        ss.ck = ck;
	    }
	    initializeKey(k) {
	        const n = exports.MIN_NONCE;
	        return { k, n };
	    }
	    // Symmetric state related
	    initializeSymmetric(protocolName) {
	        const protocolNameBytes = (0, uint8arrays_1.fromString)(protocolName, 'utf-8');
	        const h = this.hashProtocolName(protocolNameBytes);
	        const ck = h;
	        const key = this.createEmptyKey();
	        const cs = this.initializeKey(key);
	        return { cs, ck, h };
	    }
	    hashProtocolName(protocolName) {
	        if (protocolName.length <= 32) {
	            const h = new Uint8Array(32);
	            h.set(protocolName);
	            return h;
	        }
	        else {
	            return this.getHash(protocolName, new Uint8Array(0));
	        }
	    }
	    split(ss) {
	        const [tempk1, tempk2] = (0, utils_1.getHkdf)(ss.ck, new Uint8Array(0));
	        const cs1 = this.initializeKey(tempk1);
	        const cs2 = this.initializeKey(tempk2);
	        return { cs1, cs2 };
	    }
	    writeMessageRegular(cs, payload) {
	        const ciphertext = this.encryptWithAd(cs, new Uint8Array(0), payload);
	        const ne = this.createEmptyKey();
	        const ns = new Uint8Array(0);
	        return { ne, ns, ciphertext };
	    }
	    readMessageRegular(cs, message) {
	        return this.decryptWithAd(cs, new Uint8Array(0), message.ciphertext);
	    }
	}
	exports.AbstractHandshake = AbstractHandshake;

	}(abstractHandshake));

	Object.defineProperty(xx, "__esModule", { value: true });
	xx.XX = void 0;
	const utils_1$5 = utils$p;
	const abstract_handshake_1$1 = abstractHandshake;
	class XX extends abstract_handshake_1$1.AbstractHandshake {
	    initializeInitiator(prologue, s, rs, psk) {
	        const name = 'Noise_XX_25519_ChaChaPoly_SHA256';
	        const ss = this.initializeSymmetric(name);
	        this.mixHash(ss, prologue);
	        const re = new Uint8Array(32);
	        return { ss, s, rs, psk, re };
	    }
	    initializeResponder(prologue, s, rs, psk) {
	        const name = 'Noise_XX_25519_ChaChaPoly_SHA256';
	        const ss = this.initializeSymmetric(name);
	        this.mixHash(ss, prologue);
	        const re = new Uint8Array(32);
	        return { ss, s, rs, psk, re };
	    }
	    writeMessageA(hs, payload, e) {
	        const ns = new Uint8Array(0);
	        if (e !== undefined) {
	            hs.e = e;
	        }
	        else {
	            hs.e = (0, utils_1$5.generateKeypair)();
	        }
	        const ne = hs.e.publicKey;
	        this.mixHash(hs.ss, ne);
	        const ciphertext = this.encryptAndHash(hs.ss, payload);
	        return { ne, ns, ciphertext };
	    }
	    writeMessageB(hs, payload) {
	        hs.e = (0, utils_1$5.generateKeypair)();
	        const ne = hs.e.publicKey;
	        this.mixHash(hs.ss, ne);
	        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));
	        const spk = hs.s.publicKey;
	        const ns = this.encryptAndHash(hs.ss, spk);
	        this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));
	        const ciphertext = this.encryptAndHash(hs.ss, payload);
	        return { ne, ns, ciphertext };
	    }
	    writeMessageC(hs, payload) {
	        const spk = hs.s.publicKey;
	        const ns = this.encryptAndHash(hs.ss, spk);
	        this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));
	        const ciphertext = this.encryptAndHash(hs.ss, payload);
	        const ne = this.createEmptyKey();
	        const messageBuffer = { ne, ns, ciphertext };
	        const { cs1, cs2 } = this.split(hs.ss);
	        return { h: hs.ss.h, messageBuffer, cs1, cs2 };
	    }
	    readMessageA(hs, message) {
	        if ((0, utils_1$5.isValidPublicKey)(message.ne)) {
	            hs.re = message.ne;
	        }
	        this.mixHash(hs.ss, hs.re);
	        return this.decryptAndHash(hs.ss, message.ciphertext);
	    }
	    readMessageB(hs, message) {
	        if ((0, utils_1$5.isValidPublicKey)(message.ne)) {
	            hs.re = message.ne;
	        }
	        this.mixHash(hs.ss, hs.re);
	        if (!hs.e) {
	            throw new Error('Handshake state `e` param is missing.');
	        }
	        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));
	        const { plaintext: ns, valid: valid1 } = this.decryptAndHash(hs.ss, message.ns);
	        if (valid1 && ns.length === 32 && (0, utils_1$5.isValidPublicKey)(ns)) {
	            hs.rs = ns;
	        }
	        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));
	        const { plaintext, valid: valid2 } = this.decryptAndHash(hs.ss, message.ciphertext);
	        return { plaintext, valid: (valid1 && valid2) };
	    }
	    readMessageC(hs, message) {
	        const { plaintext: ns, valid: valid1 } = this.decryptAndHash(hs.ss, message.ns);
	        if (valid1 && ns.length === 32 && (0, utils_1$5.isValidPublicKey)(ns)) {
	            hs.rs = ns;
	        }
	        if (!hs.e) {
	            throw new Error('Handshake state `e` param is missing.');
	        }
	        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));
	        const { plaintext, valid: valid2 } = this.decryptAndHash(hs.ss, message.ciphertext);
	        const { cs1, cs2 } = this.split(hs.ss);
	        return { h: hs.ss.h, plaintext, valid: (valid1 && valid2), cs1, cs2 };
	    }
	    initSession(initiator, prologue, s) {
	        const psk = this.createEmptyKey();
	        const rs = new Uint8Array(32); // no static key yet
	        let hs;
	        if (initiator) {
	            hs = this.initializeInitiator(prologue, s, rs, psk);
	        }
	        else {
	            hs = this.initializeResponder(prologue, s, rs, psk);
	        }
	        return {
	            hs,
	            i: initiator,
	            mc: 0
	        };
	    }
	    sendMessage(session, message, ephemeral) {
	        let messageBuffer;
	        if (session.mc === 0) {
	            messageBuffer = this.writeMessageA(session.hs, message, ephemeral);
	        }
	        else if (session.mc === 1) {
	            messageBuffer = this.writeMessageB(session.hs, message);
	        }
	        else if (session.mc === 2) {
	            const { h, messageBuffer: resultingBuffer, cs1, cs2 } = this.writeMessageC(session.hs, message);
	            messageBuffer = resultingBuffer;
	            session.h = h;
	            session.cs1 = cs1;
	            session.cs2 = cs2;
	        }
	        else if (session.mc > 2) {
	            if (session.i) {
	                if (!session.cs1) {
	                    throw new Error('CS1 (cipher state) is not defined');
	                }
	                messageBuffer = this.writeMessageRegular(session.cs1, message);
	            }
	            else {
	                if (!session.cs2) {
	                    throw new Error('CS2 (cipher state) is not defined');
	                }
	                messageBuffer = this.writeMessageRegular(session.cs2, message);
	            }
	        }
	        else {
	            throw new Error('Session invalid.');
	        }
	        session.mc++;
	        return messageBuffer;
	    }
	    recvMessage(session, message) {
	        let plaintext = new Uint8Array(0);
	        let valid = false;
	        if (session.mc === 0) {
	            ({ plaintext, valid } = this.readMessageA(session.hs, message));
	        }
	        else if (session.mc === 1) {
	            ({ plaintext, valid } = this.readMessageB(session.hs, message));
	        }
	        else if (session.mc === 2) {
	            const { h, plaintext: resultingPlaintext, valid: resultingValid, cs1, cs2 } = this.readMessageC(session.hs, message);
	            plaintext = resultingPlaintext;
	            valid = resultingValid;
	            session.h = h;
	            session.cs1 = cs1;
	            session.cs2 = cs2;
	        }
	        session.mc++;
	        return { plaintext, valid };
	    }
	}
	xx.XX = XX;

	var encoder = {};

	(function (exports) {
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.decode2 = exports.decode1 = exports.decode0 = exports.encode2 = exports.encode1 = exports.encode0 = exports.uint16BEDecode = exports.uint16BEEncode = void 0;
	const BufferList_1$1 = __importDefault(BufferList_1);
	const concat_1 = require$$9;
	const allocUnsafe = (len) => {
	    if (globalThis.Buffer) {
	        return globalThis.Buffer.allocUnsafe(len);
	    }
	    return new Uint8Array(len);
	};
	const uint16BEEncode = (value, target, offset) => {
	    target = target || allocUnsafe(2);
	    new DataView(target.buffer, target.byteOffset, target.byteLength).setUint16(offset, value, false);
	    return target;
	};
	exports.uint16BEEncode = uint16BEEncode;
	exports.uint16BEEncode.bytes = 2;
	const uint16BEDecode = (data) => {
	    if (data.length < 2)
	        throw RangeError('Could not decode int16BE');
	    if (data instanceof BufferList_1$1.default) {
	        return data.readUInt16BE(0);
	    }
	    return new DataView(data.buffer, data.byteOffset, data.byteLength).getUint16(0, false);
	};
	exports.uint16BEDecode = uint16BEDecode;
	exports.uint16BEDecode.bytes = 2;
	// Note: IK and XX encoder usage is opposite (XX uses in stages encode0 where IK uses encode1)
	function encode0(message) {
	    return (0, concat_1.concat)([message.ne, message.ciphertext], message.ne.length + message.ciphertext.length);
	}
	exports.encode0 = encode0;
	function encode1(message) {
	    return (0, concat_1.concat)([message.ne, message.ns, message.ciphertext], message.ne.length + message.ns.length + message.ciphertext.length);
	}
	exports.encode1 = encode1;
	function encode2(message) {
	    return (0, concat_1.concat)([message.ns, message.ciphertext], message.ns.length + message.ciphertext.length);
	}
	exports.encode2 = encode2;
	function decode0(input) {
	    if (input.length < 32) {
	        throw new Error('Cannot decode stage 0 MessageBuffer: length less than 32 bytes.');
	    }
	    return {
	        ne: input.slice(0, 32),
	        ciphertext: input.slice(32, input.length),
	        ns: new Uint8Array(0)
	    };
	}
	exports.decode0 = decode0;
	function decode1(input) {
	    if (input.length < 80) {
	        throw new Error('Cannot decode stage 1 MessageBuffer: length less than 80 bytes.');
	    }
	    return {
	        ne: input.slice(0, 32),
	        ns: input.slice(32, 80),
	        ciphertext: input.slice(80, input.length)
	    };
	}
	exports.decode1 = decode1;
	function decode2(input) {
	    if (input.length < 48) {
	        throw new Error('Cannot decode stage 2 MessageBuffer: length less than 48 bytes.');
	    }
	    return {
	        ne: new Uint8Array(0),
	        ns: input.slice(0, 48),
	        ciphertext: input.slice(48, input.length)
	    };
	}
	exports.decode2 = decode2;

	}(encoder));

	Object.defineProperty(handshakeXx, "__esModule", { value: true });
	handshakeXx.XXHandshake = void 0;
	const xx_1 = xx;
	const utils_1$4 = utils$p;
	const logger_1$3 = logger$4;
	const encoder_1$3 = encoder;
	class XXHandshake {
	    constructor(isInitiator, payload, prologue, staticKeypair, connection, remotePeer, handshake) {
	        this.isInitiator = isInitiator;
	        this.payload = payload;
	        this.prologue = prologue;
	        this.staticKeypair = staticKeypair;
	        this.connection = connection;
	        if (remotePeer) {
	            this.remotePeer = remotePeer;
	        }
	        this.xx = handshake !== null && handshake !== void 0 ? handshake : new xx_1.XX();
	        this.session = this.xx.initSession(this.isInitiator, this.prologue, this.staticKeypair);
	        this.remoteEarlyData = new Uint8Array(0);
	    }
	    // stage 0
	    async propose() {
	        (0, logger_1$3.logLocalStaticKeys)(this.session.hs.s);
	        if (this.isInitiator) {
	            (0, logger_1$3.logger)('Stage 0 - Initiator starting to send first message.');
	            const messageBuffer = this.xx.sendMessage(this.session, new Uint8Array(0));
	            this.connection.writeLP((0, encoder_1$3.encode0)(messageBuffer));
	            (0, logger_1$3.logger)('Stage 0 - Initiator finished sending first message.');
	            (0, logger_1$3.logLocalEphemeralKeys)(this.session.hs.e);
	        }
	        else {
	            (0, logger_1$3.logger)('Stage 0 - Responder waiting to receive first message...');
	            const receivedMessageBuffer = (0, encoder_1$3.decode0)((await this.connection.readLP()).slice());
	            const { valid } = this.xx.recvMessage(this.session, receivedMessageBuffer);
	            if (!valid) {
	                throw new Error('xx handshake stage 0 validation fail');
	            }
	            (0, logger_1$3.logger)('Stage 0 - Responder received first message.');
	            (0, logger_1$3.logRemoteEphemeralKey)(this.session.hs.re);
	        }
	    }
	    // stage 1
	    async exchange() {
	        if (this.isInitiator) {
	            (0, logger_1$3.logger)('Stage 1 - Initiator waiting to receive first message from responder...');
	            const receivedMessageBuffer = (0, encoder_1$3.decode1)((await this.connection.readLP()).slice());
	            const { plaintext, valid } = this.xx.recvMessage(this.session, receivedMessageBuffer);
	            if (!valid) {
	                throw new Error('xx handshake stage 1 validation fail');
	            }
	            (0, logger_1$3.logger)('Stage 1 - Initiator received the message.');
	            (0, logger_1$3.logRemoteEphemeralKey)(this.session.hs.re);
	            (0, logger_1$3.logRemoteStaticKey)(this.session.hs.rs);
	            (0, logger_1$3.logger)("Initiator going to check remote's signature...");
	            try {
	                const decodedPayload = await (0, utils_1$4.decodePayload)(plaintext);
	                this.remotePeer = this.remotePeer || await (0, utils_1$4.getPeerIdFromPayload)(decodedPayload);
	                this.remotePeer = await (0, utils_1$4.verifySignedPayload)(receivedMessageBuffer.ns, decodedPayload, this.remotePeer);
	                this.setRemoteEarlyData(decodedPayload.data);
	            }
	            catch (e) {
	                const err = e;
	                throw new Error(`Error occurred while verifying signed payload: ${err.message}`);
	            }
	            (0, logger_1$3.logger)('All good with the signature!');
	        }
	        else {
	            (0, logger_1$3.logger)('Stage 1 - Responder sending out first message with signed payload and static key.');
	            const messageBuffer = this.xx.sendMessage(this.session, this.payload);
	            this.connection.writeLP((0, encoder_1$3.encode1)(messageBuffer));
	            (0, logger_1$3.logger)('Stage 1 - Responder sent the second handshake message with signed payload.');
	            (0, logger_1$3.logLocalEphemeralKeys)(this.session.hs.e);
	        }
	    }
	    // stage 2
	    async finish() {
	        if (this.isInitiator) {
	            (0, logger_1$3.logger)('Stage 2 - Initiator sending third handshake message.');
	            const messageBuffer = this.xx.sendMessage(this.session, this.payload);
	            this.connection.writeLP((0, encoder_1$3.encode2)(messageBuffer));
	            (0, logger_1$3.logger)('Stage 2 - Initiator sent message with signed payload.');
	        }
	        else {
	            (0, logger_1$3.logger)('Stage 2 - Responder waiting for third handshake message...');
	            const receivedMessageBuffer = (0, encoder_1$3.decode2)((await this.connection.readLP()).slice());
	            const { plaintext, valid } = this.xx.recvMessage(this.session, receivedMessageBuffer);
	            if (!valid) {
	                throw new Error('xx handshake stage 2 validation fail');
	            }
	            (0, logger_1$3.logger)('Stage 2 - Responder received the message, finished handshake.');
	            try {
	                const decodedPayload = await (0, utils_1$4.decodePayload)(plaintext);
	                this.remotePeer = this.remotePeer || await (0, utils_1$4.getPeerIdFromPayload)(decodedPayload);
	                await (0, utils_1$4.verifySignedPayload)(this.session.hs.rs, decodedPayload, this.remotePeer);
	                this.setRemoteEarlyData(decodedPayload.data);
	            }
	            catch (e) {
	                const err = e;
	                throw new Error(`Error occurred while verifying signed payload: ${err.message}`);
	            }
	        }
	        (0, logger_1$3.logCipherState)(this.session);
	    }
	    encrypt(plaintext, session) {
	        const cs = this.getCS(session);
	        return this.xx.encryptWithAd(cs, new Uint8Array(0), plaintext);
	    }
	    decrypt(ciphertext, session) {
	        const cs = this.getCS(session, false);
	        return this.xx.decryptWithAd(cs, new Uint8Array(0), ciphertext);
	    }
	    getRemoteStaticKey() {
	        return this.session.hs.rs;
	    }
	    getCS(session, encryption = true) {
	        if (!session.cs1 || !session.cs2) {
	            throw new Error('Handshake not completed properly, cipher state does not exist.');
	        }
	        if (this.isInitiator) {
	            return encryption ? session.cs1 : session.cs2;
	        }
	        else {
	            return encryption ? session.cs2 : session.cs1;
	        }
	    }
	    setRemoteEarlyData(data) {
	        if (data) {
	            this.remoteEarlyData = data;
	        }
	    }
	}
	handshakeXx.XXHandshake = XXHandshake;

	var handshakeIk = {};

	var ik = {};

	Object.defineProperty(ik, "__esModule", { value: true });
	ik.IK = void 0;
	const utils_1$3 = utils$p;
	const abstract_handshake_1 = abstractHandshake;
	class IK extends abstract_handshake_1.AbstractHandshake {
	    initSession(initiator, prologue, s, rs) {
	        const psk = this.createEmptyKey();
	        let hs;
	        if (initiator) {
	            hs = this.initializeInitiator(prologue, s, rs, psk);
	        }
	        else {
	            hs = this.initializeResponder(prologue, s, rs, psk);
	        }
	        return {
	            hs,
	            i: initiator,
	            mc: 0
	        };
	    }
	    sendMessage(session, message) {
	        let messageBuffer;
	        if (session.mc === 0) {
	            messageBuffer = this.writeMessageA(session.hs, message);
	        }
	        else if (session.mc === 1) {
	            const { messageBuffer: mb, h, cs1, cs2 } = this.writeMessageB(session.hs, message);
	            messageBuffer = mb;
	            session.h = h;
	            session.cs1 = cs1;
	            session.cs2 = cs2;
	        }
	        else if (session.mc > 1) {
	            if (session.i) {
	                if (!session.cs1) {
	                    throw new Error('CS1 (cipher state) is not defined');
	                }
	                messageBuffer = this.writeMessageRegular(session.cs1, message);
	            }
	            else {
	                if (!session.cs2) {
	                    throw new Error('CS2 (cipher state) is not defined');
	                }
	                messageBuffer = this.writeMessageRegular(session.cs2, message);
	            }
	        }
	        else {
	            throw new Error('Session invalid.');
	        }
	        session.mc++;
	        return messageBuffer;
	    }
	    recvMessage(session, message) {
	        let plaintext = new Uint8Array(0);
	        let valid = false;
	        if (session.mc === 0) {
	            ({ plaintext, valid } = this.readMessageA(session.hs, message));
	        }
	        if (session.mc === 1) {
	            const { plaintext: pt, valid: v, h, cs1, cs2 } = this.readMessageB(session.hs, message);
	            plaintext = pt;
	            valid = v;
	            session.h = h;
	            session.cs1 = cs1;
	            session.cs2 = cs2;
	        }
	        session.mc++;
	        return { plaintext, valid };
	    }
	    writeMessageA(hs, payload) {
	        hs.e = (0, utils_1$3.generateKeypair)();
	        const ne = hs.e.publicKey;
	        this.mixHash(hs.ss, ne);
	        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));
	        const spk = hs.s.publicKey;
	        const ns = this.encryptAndHash(hs.ss, spk);
	        this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.rs));
	        const ciphertext = this.encryptAndHash(hs.ss, payload);
	        return { ne, ns, ciphertext };
	    }
	    writeMessageB(hs, payload) {
	        hs.e = (0, utils_1$3.generateKeypair)();
	        const ne = hs.e.publicKey;
	        this.mixHash(hs.ss, ne);
	        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));
	        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));
	        const ciphertext = this.encryptAndHash(hs.ss, payload);
	        const ns = this.createEmptyKey();
	        const messageBuffer = { ne, ns, ciphertext };
	        const { cs1, cs2 } = this.split(hs.ss);
	        return { messageBuffer, cs1, cs2, h: hs.ss.h };
	    }
	    readMessageA(hs, message) {
	        if ((0, utils_1$3.isValidPublicKey)(message.ne)) {
	            hs.re = message.ne;
	        }
	        this.mixHash(hs.ss, hs.re);
	        this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));
	        const { plaintext: ns, valid: valid1 } = this.decryptAndHash(hs.ss, message.ns);
	        if (valid1 && ns.length === 32 && (0, utils_1$3.isValidPublicKey)(ns)) {
	            hs.rs = ns;
	        }
	        this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.rs));
	        const { plaintext, valid: valid2 } = this.decryptAndHash(hs.ss, message.ciphertext);
	        return { plaintext, valid: (valid1 && valid2) };
	    }
	    readMessageB(hs, message) {
	        if ((0, utils_1$3.isValidPublicKey)(message.ne)) {
	            hs.re = message.ne;
	        }
	        this.mixHash(hs.ss, hs.re);
	        if (!hs.e) {
	            throw new Error('Handshake state should contain ephemeral key by now.');
	        }
	        this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));
	        this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));
	        const { plaintext, valid } = this.decryptAndHash(hs.ss, message.ciphertext);
	        const { cs1, cs2 } = this.split(hs.ss);
	        return { h: hs.ss.h, valid, plaintext, cs1, cs2 };
	    }
	    initializeInitiator(prologue, s, rs, psk) {
	        const name = 'Noise_IK_25519_ChaChaPoly_SHA256';
	        const ss = this.initializeSymmetric(name);
	        this.mixHash(ss, prologue);
	        this.mixHash(ss, rs);
	        const re = new Uint8Array(32);
	        return { ss, s, rs, re, psk };
	    }
	    initializeResponder(prologue, s, rs, psk) {
	        const name = 'Noise_IK_25519_ChaChaPoly_SHA256';
	        const ss = this.initializeSymmetric(name);
	        this.mixHash(ss, prologue);
	        this.mixHash(ss, s.publicKey);
	        const re = new Uint8Array(32);
	        return { ss, s, rs, re, psk };
	    }
	}
	ik.IK = IK;

	var errors$1 = {};

	Object.defineProperty(errors$1, "__esModule", { value: true });
	errors$1.FailedIKError = void 0;
	class FailedIKError extends Error {
	    constructor(initialMsg, message) {
	        super(message);
	        this.initialMsg = initialMsg;
	        this.name = 'FailedIKhandshake';
	    }
	}
	errors$1.FailedIKError = FailedIKError;

	Object.defineProperty(handshakeIk, "__esModule", { value: true });
	handshakeIk.IKHandshake = void 0;
	const ik_1 = ik;
	const encoder_1$2 = encoder;
	const utils_1$2 = utils$p;
	const errors_1 = errors$1;
	const logger_1$2 = logger$4;
	class IKHandshake {
	    constructor(isInitiator, payload, prologue, staticKeypair, connection, remoteStaticKey, remotePeer, handshake) {
	        this.isInitiator = isInitiator;
	        this.payload = payload;
	        this.prologue = prologue;
	        this.staticKeypair = staticKeypair;
	        this.connection = connection;
	        if (remotePeer) {
	            this.remotePeer = remotePeer;
	        }
	        this.ik = handshake !== null && handshake !== void 0 ? handshake : new ik_1.IK();
	        this.session = this.ik.initSession(this.isInitiator, this.prologue, this.staticKeypair, remoteStaticKey);
	        this.remoteEarlyData = new Uint8Array();
	    }
	    async stage0() {
	        (0, logger_1$2.logLocalStaticKeys)(this.session.hs.s);
	        (0, logger_1$2.logRemoteStaticKey)(this.session.hs.rs);
	        if (this.isInitiator) {
	            (0, logger_1$2.logger)('IK Stage 0 - Initiator sending message...');
	            const messageBuffer = this.ik.sendMessage(this.session, this.payload);
	            this.connection.writeLP((0, encoder_1$2.encode1)(messageBuffer));
	            (0, logger_1$2.logger)('IK Stage 0 - Initiator sent message.');
	            (0, logger_1$2.logLocalEphemeralKeys)(this.session.hs.e);
	        }
	        else {
	            (0, logger_1$2.logger)('IK Stage 0 - Responder receiving message...');
	            const receivedMsg = await this.connection.readLP();
	            try {
	                const receivedMessageBuffer = (0, encoder_1$2.decode1)(receivedMsg.slice());
	                const { plaintext, valid } = this.ik.recvMessage(this.session, receivedMessageBuffer);
	                if (!valid) {
	                    throw new Error('ik handshake stage 0 decryption validation fail');
	                }
	                (0, logger_1$2.logger)('IK Stage 0 - Responder got message, going to verify payload.');
	                const decodedPayload = await (0, utils_1$2.decodePayload)(plaintext);
	                this.remotePeer = this.remotePeer || await (0, utils_1$2.getPeerIdFromPayload)(decodedPayload);
	                await (0, utils_1$2.verifySignedPayload)(this.session.hs.rs, decodedPayload, this.remotePeer);
	                this.setRemoteEarlyData(decodedPayload.data);
	                (0, logger_1$2.logger)('IK Stage 0 - Responder successfully verified payload!');
	                (0, logger_1$2.logRemoteEphemeralKey)(this.session.hs.re);
	            }
	            catch (e) {
	                const err = e;
	                (0, logger_1$2.logger)('Responder breaking up with IK handshake in stage 0.');
	                throw new errors_1.FailedIKError(receivedMsg, `Error occurred while verifying initiator's signed payload: ${err.message}`);
	            }
	        }
	    }
	    async stage1() {
	        if (this.isInitiator) {
	            (0, logger_1$2.logger)('IK Stage 1 - Initiator receiving message...');
	            const receivedMsg = (await this.connection.readLP()).slice();
	            const receivedMessageBuffer = (0, encoder_1$2.decode0)(receivedMsg);
	            const { plaintext, valid } = this.ik.recvMessage(this.session, receivedMessageBuffer);
	            (0, logger_1$2.logger)('IK Stage 1 - Initiator got message, going to verify payload.');
	            try {
	                if (!valid) {
	                    throw new Error('ik stage 1 decryption validation fail');
	                }
	                const decodedPayload = await (0, utils_1$2.decodePayload)(plaintext);
	                this.remotePeer = this.remotePeer || await (0, utils_1$2.getPeerIdFromPayload)(decodedPayload);
	                await (0, utils_1$2.verifySignedPayload)(receivedMessageBuffer.ns.slice(0, 32), decodedPayload, this.remotePeer);
	                this.setRemoteEarlyData(decodedPayload.data);
	                (0, logger_1$2.logger)('IK Stage 1 - Initiator successfully verified payload!');
	                (0, logger_1$2.logRemoteEphemeralKey)(this.session.hs.re);
	            }
	            catch (e) {
	                const err = e;
	                (0, logger_1$2.logger)('Initiator breaking up with IK handshake in stage 1.');
	                throw new errors_1.FailedIKError(receivedMsg, `Error occurred while verifying responder's signed payload: ${err.message}`);
	            }
	        }
	        else {
	            (0, logger_1$2.logger)('IK Stage 1 - Responder sending message...');
	            const messageBuffer = this.ik.sendMessage(this.session, this.payload);
	            this.connection.writeLP((0, encoder_1$2.encode0)(messageBuffer));
	            (0, logger_1$2.logger)('IK Stage 1 - Responder sent message...');
	            (0, logger_1$2.logLocalEphemeralKeys)(this.session.hs.e);
	        }
	        (0, logger_1$2.logCipherState)(this.session);
	    }
	    decrypt(ciphertext, session) {
	        const cs = this.getCS(session, false);
	        return this.ik.decryptWithAd(cs, new Uint8Array(0), ciphertext);
	    }
	    encrypt(plaintext, session) {
	        const cs = this.getCS(session);
	        return this.ik.encryptWithAd(cs, new Uint8Array(0), plaintext);
	    }
	    getLocalEphemeralKeys() {
	        if (!this.session.hs.e) {
	            throw new Error('Ephemeral keys do not exist.');
	        }
	        return this.session.hs.e;
	    }
	    getCS(session, encryption = true) {
	        if (!session.cs1 || !session.cs2) {
	            throw new Error('Handshake not completed properly, cipher state does not exist.');
	        }
	        if (this.isInitiator) {
	            return encryption ? session.cs1 : session.cs2;
	        }
	        else {
	            return encryption ? session.cs2 : session.cs1;
	        }
	    }
	    setRemoteEarlyData(data) {
	        if (data) {
	            this.remoteEarlyData = data;
	        }
	    }
	}
	handshakeIk.IKHandshake = IKHandshake;

	var handshakeXxFallback = {};

	Object.defineProperty(handshakeXxFallback, "__esModule", { value: true });
	handshakeXxFallback.XXFallbackHandshake = void 0;
	const handshake_xx_1$1 = handshakeXx;
	const utils_1$1 = utils$p;
	const logger_1$1 = logger$4;
	const encoder_1$1 = encoder;
	class XXFallbackHandshake extends handshake_xx_1$1.XXHandshake {
	    constructor(isInitiator, payload, prologue, staticKeypair, connection, initialMsg, remotePeer, ephemeralKeys, handshake) {
	        super(isInitiator, payload, prologue, staticKeypair, connection, remotePeer, handshake);
	        if (ephemeralKeys) {
	            this.ephemeralKeys = ephemeralKeys;
	        }
	        this.initialMsg = initialMsg;
	    }
	    // stage 0
	    // eslint-disable-next-line require-await
	    async propose() {
	        if (this.isInitiator) {
	            this.xx.sendMessage(this.session, new Uint8Array(0), this.ephemeralKeys);
	            (0, logger_1$1.logger)('XX Fallback Stage 0 - Initialized state as the first message was sent by initiator.');
	            (0, logger_1$1.logLocalEphemeralKeys)(this.session.hs.e);
	        }
	        else {
	            (0, logger_1$1.logger)('XX Fallback Stage 0 - Responder decoding initial msg from IK.');
	            const receivedMessageBuffer = (0, encoder_1$1.decode0)(this.initialMsg);
	            const { valid } = this.xx.recvMessage(this.session, {
	                ne: receivedMessageBuffer.ne,
	                ns: new Uint8Array(0),
	                ciphertext: new Uint8Array(0)
	            });
	            if (!valid) {
	                throw new Error('xx fallback stage 0 decryption validation fail');
	            }
	            (0, logger_1$1.logger)('XX Fallback Stage 0 - Responder used received message from IK.');
	            (0, logger_1$1.logRemoteEphemeralKey)(this.session.hs.re);
	        }
	    }
	    // stage 1
	    async exchange() {
	        if (this.isInitiator) {
	            const receivedMessageBuffer = (0, encoder_1$1.decode1)(this.initialMsg);
	            const { plaintext, valid } = this.xx.recvMessage(this.session, receivedMessageBuffer);
	            if (!valid) {
	                throw new Error('xx fallback stage 1 decryption validation fail');
	            }
	            (0, logger_1$1.logger)('XX Fallback Stage 1 - Initiator used received message from IK.');
	            (0, logger_1$1.logRemoteEphemeralKey)(this.session.hs.re);
	            (0, logger_1$1.logRemoteStaticKey)(this.session.hs.rs);
	            (0, logger_1$1.logger)("Initiator going to check remote's signature...");
	            try {
	                const decodedPayload = await (0, utils_1$1.decodePayload)(plaintext);
	                this.remotePeer = this.remotePeer || await (0, utils_1$1.getPeerIdFromPayload)(decodedPayload);
	                await (0, utils_1$1.verifySignedPayload)(this.session.hs.rs, decodedPayload, this.remotePeer);
	                this.setRemoteEarlyData(decodedPayload.data);
	            }
	            catch (e) {
	                const err = e;
	                throw new Error(`Error occurred while verifying signed payload from responder: ${err.message}`);
	            }
	            (0, logger_1$1.logger)('All good with the signature!');
	        }
	        else {
	            (0, logger_1$1.logger)('XX Fallback Stage 1 - Responder start');
	            await super.exchange();
	            (0, logger_1$1.logger)('XX Fallback Stage 1 - Responder end');
	        }
	    }
	}
	handshakeXxFallback.XXFallbackHandshake = XXFallbackHandshake;

	var crypto$6 = {};

	Object.defineProperty(crypto$6, "__esModule", { value: true });
	crypto$6.decryptStream = crypto$6.encryptStream = void 0;
	const constants_1$1 = constants$6;
	// Returns generator that encrypts payload from the user
	function encryptStream(handshake) {
	    return async function* (source) {
	        for await (const chunk of source) {
	            for (let i = 0; i < chunk.length; i += constants_1$1.NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG) {
	                let end = i + constants_1$1.NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG;
	                if (end > chunk.length) {
	                    end = chunk.length;
	                }
	                const data = handshake.encrypt(chunk.slice(i, end), handshake.session);
	                yield data;
	            }
	        }
	    };
	}
	crypto$6.encryptStream = encryptStream;
	// Decrypt received payload to the user
	function decryptStream(handshake) {
	    return async function* (source) {
	        for await (const chunk of source) {
	            for (let i = 0; i < chunk.length; i += constants_1$1.NOISE_MSG_MAX_LENGTH_BYTES) {
	                let end = i + constants_1$1.NOISE_MSG_MAX_LENGTH_BYTES;
	                if (end > chunk.length) {
	                    end = chunk.length;
	                }
	                const { plaintext: decrypted, valid } = await handshake.decrypt(chunk.slice(i, end), handshake.session);
	                if (!valid) {
	                    throw new Error('Failed to validate decrypted chunk');
	                }
	                yield decrypted;
	            }
	        }
	    };
	}
	crypto$6.decryptStream = decryptStream;

	var keycache = {};

	Object.defineProperty(keycache, "__esModule", { value: true });
	keycache.KeyCache = void 0;
	/**
	 * Storage for static keys of previously connected peers.
	 */
	class Keycache {
	    constructor() {
	        this.storage = new Map();
	    }
	    store(peerId, key) {
	        this.storage.set(peerId.id, key);
	    }
	    load(peerId) {
	        var _a;
	        if (!peerId) {
	            return null;
	        }
	        return (_a = this.storage.get(peerId.id)) !== null && _a !== void 0 ? _a : null;
	    }
	    resetStorage() {
	        this.storage.clear();
	    }
	}
	const KeyCache = new Keycache();
	keycache.KeyCache = KeyCache;

	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	var __importDefault$1 = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(noise, "__esModule", { value: true });
	noise.Noise = void 0;
	const x25519 = __importStar(x25519$2);
	const it_pb_rpc_1 = __importDefault$1(src$9);
	const duplex_1 = __importDefault$1(duplex);
	const it_buffer_1 = __importDefault$1(itBuffer.exports);
	const it_pipe_1 = __importDefault$1(itPipe.exports);
	const it_length_prefixed_1 = src$i;
	const handshake_xx_1 = handshakeXx;
	const handshake_ik_1 = handshakeIk;
	const handshake_xx_fallback_1 = handshakeXxFallback;
	const utils_1 = utils$p;
	const encoder_1 = encoder;
	const crypto_1 = crypto$6;
	const keycache_1 = keycache;
	const logger_1 = logger$4;
	const constants_1 = constants$6;
	class Noise {
	    /**
	     *
	     * @param {bytes} staticNoiseKey - x25519 private key, reuse for faster handshakes
	     * @param {bytes} earlyData
	     */
	    constructor(staticNoiseKey, earlyData) {
	        this.protocol = '/noise';
	        this.prologue = new Uint8Array(0);
	        this.earlyData = earlyData !== null && earlyData !== void 0 ? earlyData : new Uint8Array(0);
	        // disabled until properly specked
	        this.useNoisePipes = false;
	        if (staticNoiseKey) {
	            // accepts x25519 private key of length 32
	            const keyPair = x25519.generateKeyPairFromSeed(staticNoiseKey);
	            this.staticKeys = {
	                privateKey: keyPair.secretKey,
	                publicKey: keyPair.publicKey
	            };
	        }
	        else {
	            this.staticKeys = (0, utils_1.generateKeypair)();
	        }
	    }
	    /**
	     * Encrypt outgoing data to the remote party (handshake as initiator)
	     *
	     * @param {PeerId} localPeer - PeerId of the receiving peer
	     * @param {any} connection - streaming iterable duplex that will be encrypted
	     * @param {PeerId} remotePeer - PeerId of the remote peer. Used to validate the integrity of the remote peer.
	     * @returns {Promise<SecureOutbound>}
	     */
	    async secureOutbound(localPeer, connection, remotePeer) {
	        const wrappedConnection = (0, it_pb_rpc_1.default)(connection, {
	            lengthEncoder: encoder_1.uint16BEEncode,
	            lengthDecoder: encoder_1.uint16BEDecode,
	            maxDataLength: constants_1.NOISE_MSG_MAX_LENGTH_BYTES
	        });
	        const handshake = await this.performHandshake({
	            connection: wrappedConnection,
	            isInitiator: true,
	            localPeer,
	            remotePeer
	        });
	        const conn = await this.createSecureConnection(wrappedConnection, handshake);
	        return {
	            conn,
	            remoteEarlyData: handshake.remoteEarlyData,
	            remotePeer: handshake.remotePeer
	        };
	    }
	    /**
	     * Decrypt incoming data (handshake as responder).
	     *
	     * @param {PeerId} localPeer - PeerId of the receiving peer.
	     * @param {any} connection - streaming iterable duplex that will be encryption.
	     * @param {PeerId} remotePeer - optional PeerId of the initiating peer, if known. This may only exist during transport upgrades.
	     * @returns {Promise<SecureOutbound>}
	     */
	    async secureInbound(localPeer, connection, remotePeer) {
	        const wrappedConnection = (0, it_pb_rpc_1.default)(connection, {
	            lengthEncoder: encoder_1.uint16BEEncode,
	            lengthDecoder: encoder_1.uint16BEDecode,
	            maxDataLength: constants_1.NOISE_MSG_MAX_LENGTH_BYTES
	        });
	        const handshake = await this.performHandshake({
	            connection: wrappedConnection,
	            isInitiator: false,
	            localPeer,
	            remotePeer
	        });
	        const conn = await this.createSecureConnection(wrappedConnection, handshake);
	        return {
	            conn,
	            remoteEarlyData: handshake.remoteEarlyData,
	            remotePeer: handshake.remotePeer
	        };
	    }
	    /**
	     * If Noise pipes supported, tries IK handshake first with XX as fallback if it fails.
	     * If noise pipes disabled or remote peer static key is unknown, use XX.
	     *
	     * @param {HandshakeParams} params
	     */
	    async performHandshake(params) {
	        var _a;
	        const payload = await (0, utils_1.getPayload)(params.localPeer, this.staticKeys.publicKey, this.earlyData);
	        let tryIK = this.useNoisePipes;
	        if (params.isInitiator && keycache_1.KeyCache.load(params.remotePeer) === null) {
	            // if we are initiator and remote static key is unknown, don't try IK
	            tryIK = false;
	        }
	        // Try IK if acting as responder or initiator that has remote's static key.
	        if (tryIK) {
	            // Try IK first
	            const { remotePeer, connection, isInitiator } = params;
	            const ikHandshake = new handshake_ik_1.IKHandshake(isInitiator, payload, this.prologue, this.staticKeys, connection, 
	            // safe to cast as we did checks
	            (_a = keycache_1.KeyCache.load(params.remotePeer)) !== null && _a !== void 0 ? _a : new Uint8Array(32), remotePeer);
	            try {
	                return await this.performIKHandshake(ikHandshake);
	            }
	            catch (e) {
	                // IK failed, go to XX fallback
	                let ephemeralKeys;
	                if (params.isInitiator) {
	                    ephemeralKeys = ikHandshake.getLocalEphemeralKeys();
	                }
	                return await this.performXXFallbackHandshake(params, payload, e.initialMsg, ephemeralKeys);
	            }
	        }
	        else {
	            // run XX handshake
	            return await this.performXXHandshake(params, payload);
	        }
	    }
	    async performXXFallbackHandshake(params, payload, initialMsg, ephemeralKeys) {
	        const { isInitiator, remotePeer, connection } = params;
	        const handshake = new handshake_xx_fallback_1.XXFallbackHandshake(isInitiator, payload, this.prologue, this.staticKeys, connection, initialMsg, remotePeer, ephemeralKeys);
	        try {
	            await handshake.propose();
	            await handshake.exchange();
	            await handshake.finish();
	        }
	        catch (e) {
	            (0, logger_1.logger)(e);
	            const err = e;
	            throw new Error(`Error occurred during XX Fallback handshake: ${err.message}`);
	        }
	        return handshake;
	    }
	    async performXXHandshake(params, payload) {
	        const { isInitiator, remotePeer, connection } = params;
	        const handshake = new handshake_xx_1.XXHandshake(isInitiator, payload, this.prologue, this.staticKeys, connection, remotePeer);
	        try {
	            await handshake.propose();
	            await handshake.exchange();
	            await handshake.finish();
	            if (this.useNoisePipes && handshake.remotePeer) {
	                keycache_1.KeyCache.store(handshake.remotePeer, handshake.getRemoteStaticKey());
	            }
	        }
	        catch (e) {
	            const err = e;
	            throw new Error(`Error occurred during XX handshake: ${err.message}`);
	        }
	        return handshake;
	    }
	    async performIKHandshake(handshake) {
	        await handshake.stage0();
	        await handshake.stage1();
	        return handshake;
	    }
	    async createSecureConnection(connection, handshake) {
	        // Create encryption box/unbox wrapper
	        const [secure, user] = (0, duplex_1.default)();
	        const network = connection.unwrap();
	        await (0, it_pipe_1.default)(secure, // write to wrapper
	        it_buffer_1.default, // ensure any type of data is converted to buffer
	        (0, crypto_1.encryptStream)(handshake), // data is encrypted
	        (0, it_length_prefixed_1.encode)({ lengthEncoder: encoder_1.uint16BEEncode }), // prefix with message length
	        network, // send to the remote peer
	        (0, it_length_prefixed_1.decode)({ lengthDecoder: encoder_1.uint16BEDecode }), // read message length prefix
	        it_buffer_1.default, // ensure any type of data is converted to buffer
	        (0, crypto_1.decryptStream)(handshake), // decrypt the incoming data
	        secure // pipe to the wrapper
	        );
	        return user;
	    }
	}
	noise.Noise = Noise;

	(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.NOISE = void 0;
	const noise_1 = noise;
	__exportStar(noise, exports);
	/**
	 * Default configuration, it will generate new noise static key and enable noise pipes (IK handshake).
	 */
	exports.NOISE = new noise_1.Noise();

	}(src$b));

	var require$$5 = /*@__PURE__*/getAugmentedNamespace(memory);

	var routingTable = {};

	/*
	index.js - Kademlia DHT K-bucket implementation as a binary tree.

	The MIT License (MIT)

	Copyright (c) 2013-2021 Tristan Slominski

	Permission is hereby granted, free of charge, to any person
	obtaining a copy of this software and associated documentation
	files (the "Software"), to deal in the Software without
	restriction, including without limitation the rights to use,
	copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the
	Software is furnished to do so, subject to the following
	conditions:

	The above copyright notice and this permission notice shall be
	included in all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
	WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
	OTHER DEALINGS IN THE SOFTWARE.
	*/

	const randomBytes = browser$4.exports;
	const { EventEmitter: EventEmitter$e } = require$$1$5;

	/**
	 * @param  {Uint8Array} array1
	 * @param  {Uint8Array} array2
	 * @return {Boolean}
	 */
	function arrayEquals$2 (array1, array2) {
	  if (array1 === array2) {
	    return true
	  }
	  if (array1.length !== array2.length) {
	    return false
	  }
	  for (let i = 0, length = array1.length; i < length; ++i) {
	    if (array1[i] !== array2[i]) {
	      return false
	    }
	  }
	  return true
	}

	function createNode () {
	  return { contacts: [], dontSplit: false, left: null, right: null }
	}

	function ensureInt8 (name, val) {
	  if (!(val instanceof Uint8Array)) {
	    throw new TypeError(name + ' is not a Uint8Array')
	  }
	}

	/**
	 * Implementation of a Kademlia DHT k-bucket used for storing
	 * contact (peer node) information.
	 *
	 * @extends EventEmitter
	 */
	class KBucket extends EventEmitter$e {
	  /**
	   * `options`:
	   *   `distance`: _Function_
	   *     `function (firstId, secondId) { return distance }` An optional
	   *     `distance` function that gets two `id` Uint8Arrays
	   *     and return distance (as number) between them.
	   *   `arbiter`: _Function_ _(Default: vectorClock arbiter)_
	   *     `function (incumbent, candidate) { return contact; }` An optional
	   *     `arbiter` function that givent two `contact` objects with the same `id`
	   *     returns the desired object to be used for updating the k-bucket. For
	   *     more details, see [arbiter function](#arbiter-function).
	   *   `localNodeId`: _Uint8Array_ An optional Uint8Array representing the local node id.
	   *     If not provided, a local node id will be created via `randomBytes(20)`.
	   *     `metadata`: _Object_ _(Default: {})_ Optional satellite data to include
	   *     with the k-bucket. `metadata` property is guaranteed not be altered by,
	   *     it is provided as an explicit container for users of k-bucket to store
	   *     implementation-specific data.
	   *   `numberOfNodesPerKBucket`: _Integer_ _(Default: 20)_ The number of nodes
	   *     that a k-bucket can contain before being full or split.
	   *     `numberOfNodesToPing`: _Integer_ _(Default: 3)_ The number of nodes to
	   *     ping when a bucket that should not be split becomes full. KBucket will
	   *     emit a `ping` event that contains `numberOfNodesToPing` nodes that have
	   *     not been contacted the longest.
	   *
	   * @param {Object=} options optional
	   */
	  constructor (options = {}) {
	    super();

	    this.localNodeId = options.localNodeId || randomBytes(20);
	    this.numberOfNodesPerKBucket = options.numberOfNodesPerKBucket || 20;
	    this.numberOfNodesToPing = options.numberOfNodesToPing || 3;
	    this.distance = options.distance || KBucket.distance;
	    // use an arbiter from options or vectorClock arbiter by default
	    this.arbiter = options.arbiter || KBucket.arbiter;
	    this.metadata = Object.assign({}, options.metadata);

	    ensureInt8('option.localNodeId as parameter 1', this.localNodeId);

	    this.root = createNode();
	  }

	  /**
	   * Default arbiter function for contacts with the same id. Uses
	   * contact.vectorClock to select which contact to update the k-bucket with.
	   * Contact with larger vectorClock field will be selected. If vectorClock is
	   * the same, candidat will be selected.
	   *
	   * @param  {Object} incumbent Contact currently stored in the k-bucket.
	   * @param  {Object} candidate Contact being added to the k-bucket.
	   * @return {Object}           Contact to updated the k-bucket with.
	   */
	  static arbiter (incumbent, candidate) {
	    return incumbent.vectorClock > candidate.vectorClock ? incumbent : candidate
	  }

	  /**
	   * Default distance function. Finds the XOR
	   * distance between firstId and secondId.
	   *
	   * @param  {Uint8Array} firstId  Uint8Array containing first id.
	   * @param  {Uint8Array} secondId Uint8Array containing second id.
	   * @return {Number}              Integer The XOR distance between firstId
	   *                               and secondId.
	   */
	  static distance (firstId, secondId) {
	    let distance = 0;
	    let i = 0;
	    const min = Math.min(firstId.length, secondId.length);
	    const max = Math.max(firstId.length, secondId.length);
	    for (; i < min; ++i) {
	      distance = distance * 256 + (firstId[i] ^ secondId[i]);
	    }
	    for (; i < max; ++i) distance = distance * 256 + 255;
	    return distance
	  }

	  /**
	   * Adds a contact to the k-bucket.
	   *
	   * @param {Object} contact the contact object to add
	   */
	  add (contact) {
	    ensureInt8('contact.id', (contact || {}).id);

	    let bitIndex = 0;
	    let node = this.root;

	    while (node.contacts === null) {
	      // this is not a leaf node but an inner node with 'low' and 'high'
	      // branches; we will check the appropriate bit of the identifier and
	      // delegate to the appropriate node for further processing
	      node = this._determineNode(node, contact.id, bitIndex++);
	    }

	    // check if the contact already exists
	    const index = this._indexOf(node, contact.id);
	    if (index >= 0) {
	      this._update(node, index, contact);
	      return this
	    }

	    if (node.contacts.length < this.numberOfNodesPerKBucket) {
	      node.contacts.push(contact);
	      this.emit('added', contact);
	      return this
	    }

	    // the bucket is full
	    if (node.dontSplit) {
	      // we are not allowed to split the bucket
	      // we need to ping the first this.numberOfNodesToPing
	      // in order to determine if they are alive
	      // only if one of the pinged nodes does not respond, can the new contact
	      // be added (this prevents DoS flodding with new invalid contacts)
	      this.emit('ping', node.contacts.slice(0, this.numberOfNodesToPing), contact);
	      return this
	    }

	    this._split(node, bitIndex);
	    return this.add(contact)
	  }

	  /**
	   * Get the n closest contacts to the provided node id. "Closest" here means:
	   * closest according to the XOR metric of the contact node id.
	   *
	   * @param  {Uint8Array} id  Contact node id
	   * @param  {Number=} n      Integer (Default: Infinity) The maximum number of
	   *                          closest contacts to return
	   * @return {Array}          Array Maximum of n closest contacts to the node id
	   */
	  closest (id, n = Infinity) {
	    ensureInt8('id', id);

	    if ((!Number.isInteger(n) && n !== Infinity) || n <= 0) {
	      throw new TypeError('n is not positive number')
	    }

	    let contacts = [];

	    for (let nodes = [this.root], bitIndex = 0; nodes.length > 0 && contacts.length < n;) {
	      const node = nodes.pop();
	      if (node.contacts === null) {
	        const detNode = this._determineNode(node, id, bitIndex++);
	        nodes.push(node.left === detNode ? node.right : node.left);
	        nodes.push(detNode);
	      } else {
	        contacts = contacts.concat(node.contacts);
	      }
	    }

	    return contacts
	      .map(a => [this.distance(a.id, id), a])
	      .sort((a, b) => a[0] - b[0])
	      .slice(0, n)
	      .map(a => a[1])
	  }

	  /**
	   * Counts the total number of contacts in the tree.
	   *
	   * @return {Number} The number of contacts held in the tree
	   */
	  count () {
	    // return this.toArray().length
	    let count = 0;
	    for (const nodes = [this.root]; nodes.length > 0;) {
	      const node = nodes.pop();
	      if (node.contacts === null) nodes.push(node.right, node.left);
	      else count += node.contacts.length;
	    }
	    return count
	  }

	  /**
	   * Determines whether the id at the bitIndex is 0 or 1.
	   * Return left leaf if `id` at `bitIndex` is 0, right leaf otherwise
	   *
	   * @param  {Object} node     internal object that has 2 leafs: left and right
	   * @param  {Uint8Array} id   Id to compare localNodeId with.
	   * @param  {Number} bitIndex Integer (Default: 0) The bit index to which bit
	   *                           to check in the id Uint8Array.
	   * @return {Object}          left leaf if id at bitIndex is 0, right leaf otherwise.
	   */
	  _determineNode (node, id, bitIndex) {
	    // **NOTE** remember that id is a Uint8Array and has granularity of
	    // bytes (8 bits), whereas the bitIndex is the _bit_ index (not byte)

	    // id's that are too short are put in low bucket (1 byte = 8 bits)
	    // (bitIndex >> 3) finds how many bytes the bitIndex describes
	    // bitIndex % 8 checks if we have extra bits beyond byte multiples
	    // if number of bytes is <= no. of bytes described by bitIndex and there
	    // are extra bits to consider, this means id has less bits than what
	    // bitIndex describes, id therefore is too short, and will be put in low
	    // bucket
	    const bytesDescribedByBitIndex = bitIndex >> 3;
	    const bitIndexWithinByte = bitIndex % 8;
	    if ((id.length <= bytesDescribedByBitIndex) && (bitIndexWithinByte !== 0)) {
	      return node.left
	    }

	    const byteUnderConsideration = id[bytesDescribedByBitIndex];

	    // byteUnderConsideration is an integer from 0 to 255 represented by 8 bits
	    // where 255 is 11111111 and 0 is 00000000
	    // in order to find out whether the bit at bitIndexWithinByte is set
	    // we construct (1 << (7 - bitIndexWithinByte)) which will consist
	    // of all bits being 0, with only one bit set to 1
	    // for example, if bitIndexWithinByte is 3, we will construct 00010000 by
	    // (1 << (7 - 3)) -> (1 << 4) -> 16
	    if (byteUnderConsideration & (1 << (7 - bitIndexWithinByte))) {
	      return node.right
	    }

	    return node.left
	  }

	  /**
	   * Get a contact by its exact ID.
	   * If this is a leaf, loop through the bucket contents and return the correct
	   * contact if we have it or null if not. If this is an inner node, determine
	   * which branch of the tree to traverse and repeat.
	   *
	   * @param  {Uint8Array} id The ID of the contact to fetch.
	   * @return {Object|Null}   The contact if available, otherwise null
	   */
	  get (id) {
	    ensureInt8('id', id);

	    let bitIndex = 0;

	    let node = this.root;
	    while (node.contacts === null) {
	      node = this._determineNode(node, id, bitIndex++);
	    }

	    // index of uses contact id for matching
	    const index = this._indexOf(node, id);
	    return index >= 0 ? node.contacts[index] : null
	  }

	  /**
	   * Returns the index of the contact with provided
	   * id if it exists, returns -1 otherwise.
	   *
	   * @param  {Object} node    internal object that has 2 leafs: left and right
	   * @param  {Uint8Array} id  Contact node id.
	   * @return {Number}         Integer Index of contact with provided id if it
	   *                          exists, -1 otherwise.
	   */
	  _indexOf (node, id) {
	    for (let i = 0; i < node.contacts.length; ++i) {
	      if (arrayEquals$2(node.contacts[i].id, id)) return i
	    }

	    return -1
	  }

	  /**
	   * Removes contact with the provided id.
	   *
	   * @param  {Uint8Array} id The ID of the contact to remove.
	   * @return {Object}        The k-bucket itself.
	   */
	  remove (id) {
	    ensureInt8('the id as parameter 1', id);

	    let bitIndex = 0;
	    let node = this.root;

	    while (node.contacts === null) {
	      node = this._determineNode(node, id, bitIndex++);
	    }

	    const index = this._indexOf(node, id);
	    if (index >= 0) {
	      const contact = node.contacts.splice(index, 1)[0];
	      this.emit('removed', contact);
	    }

	    return this
	  }

	  /**
	   * Splits the node, redistributes contacts to the new nodes, and marks the
	   * node that was split as an inner node of the binary tree of nodes by
	   * setting this.root.contacts = null
	   *
	   * @param  {Object} node     node for splitting
	   * @param  {Number} bitIndex the bitIndex to which byte to check in the
	   *                           Uint8Array for navigating the binary tree
	   */
	  _split (node, bitIndex) {
	    node.left = createNode();
	    node.right = createNode();

	    // redistribute existing contacts amongst the two newly created nodes
	    for (const contact of node.contacts) {
	      this._determineNode(node, contact.id, bitIndex).contacts.push(contact);
	    }

	    node.contacts = null; // mark as inner tree node

	    // don't split the "far away" node
	    // we check where the local node would end up and mark the other one as
	    // "dontSplit" (i.e. "far away")
	    const detNode = this._determineNode(node, this.localNodeId, bitIndex);
	    const otherNode = node.left === detNode ? node.right : node.left;
	    otherNode.dontSplit = true;
	  }

	  /**
	   * Returns all the contacts contained in the tree as an array.
	   * If this is a leaf, return a copy of the bucket. If this is not a leaf,
	   * return the union of the low and high branches (themselves also as arrays).
	   *
	   * @return {Array} All of the contacts in the tree, as an array
	   */
	  toArray () {
	    let result = [];
	    for (const nodes = [this.root]; nodes.length > 0;) {
	      const node = nodes.pop();
	      if (node.contacts === null) nodes.push(node.right, node.left);
	      else result = result.concat(node.contacts);
	    }
	    return result
	  }

	  /**
	   * Similar to `toArray()` but instead of buffering everything up into an
	   * array before returning it, yields contacts as they are encountered while
	   * walking the tree.
	   *
	   * @return {Iterable} All of the contacts in the tree, as an iterable
	   */
	  * toIterable () {
	    for (const nodes = [this.root]; nodes.length > 0;) {
	      const node = nodes.pop();
	      if (node.contacts === null) {
	        nodes.push(node.right, node.left);
	      } else {
	        yield * node.contacts;
	      }
	    }
	  }

	  /**
	   * Updates the contact selected by the arbiter.
	   * If the selection is our old contact and the candidate is some new contact
	   * then the new contact is abandoned (not added).
	   * If the selection is our old contact and the candidate is our old contact
	   * then we are refreshing the contact and it is marked as most recently
	   * contacted (by being moved to the right/end of the bucket array).
	   * If the selection is our new contact, the old contact is removed and the new
	   * contact is marked as most recently contacted.
	   *
	   * @param  {Object} node    internal object that has 2 leafs: left and right
	   * @param  {Number} index   the index in the bucket where contact exists
	   *                          (index has already been computed in a previous
	   *                          calculation)
	   * @param  {Object} contact The contact object to update.
	   */
	  _update (node, index, contact) {
	    // sanity check
	    if (!arrayEquals$2(node.contacts[index].id, contact.id)) {
	      throw new Error('wrong index for _update')
	    }

	    const incumbent = node.contacts[index];
	    const selection = this.arbiter(incumbent, contact);
	    // if the selection is our old contact and the candidate is some new
	    // contact, then there is nothing to do
	    if (selection === incumbent && incumbent !== contact) return

	    node.contacts.splice(index, 1); // remove old contact
	    node.contacts.push(selection); // add more recent contact version
	    this.emit('updated', incumbent, selection);
	  }
	}

	var kBucket = KBucket;

	var require$$4 = /*@__PURE__*/getAugmentedNamespace(key);

	var lib = {};

	var netmask = {};

	// Generated by CoffeeScript 1.12.7
	(function() {
	  var Netmask, atob, chr, chr0, chrA, chra, ip2long, long2ip;

	  long2ip = function(long) {
	    var a, b, c, d;
	    a = (long & (0xff << 24)) >>> 24;
	    b = (long & (0xff << 16)) >>> 16;
	    c = (long & (0xff << 8)) >>> 8;
	    d = long & 0xff;
	    return [a, b, c, d].join('.');
	  };

	  ip2long = function(ip) {
	    var b, c, i, j, n, ref;
	    b = [];
	    for (i = j = 0; j <= 3; i = ++j) {
	      if (ip.length === 0) {
	        break;
	      }
	      if (i > 0) {
	        if (ip[0] !== '.') {
	          throw new Error('Invalid IP');
	        }
	        ip = ip.substring(1);
	      }
	      ref = atob(ip), n = ref[0], c = ref[1];
	      ip = ip.substring(c);
	      b.push(n);
	    }
	    if (ip.length !== 0) {
	      throw new Error('Invalid IP');
	    }
	    switch (b.length) {
	      case 1:
	        if (b[0] > 0xFFFFFFFF) {
	          throw new Error('Invalid IP');
	        }
	        return b[0] >>> 0;
	      case 2:
	        if (b[0] > 0xFF || b[1] > 0xFFFFFF) {
	          throw new Error('Invalid IP');
	        }
	        return (b[0] << 24 | b[1]) >>> 0;
	      case 3:
	        if (b[0] > 0xFF || b[1] > 0xFF || b[2] > 0xFFFF) {
	          throw new Error('Invalid IP');
	        }
	        return (b[0] << 24 | b[1] << 16 | b[2]) >>> 0;
	      case 4:
	        if (b[0] > 0xFF || b[1] > 0xFF || b[2] > 0xFF || b[3] > 0xFF) {
	          throw new Error('Invalid IP');
	        }
	        return (b[0] << 24 | b[1] << 16 | b[2] << 8 | b[3]) >>> 0;
	      default:
	        throw new Error('Invalid IP');
	    }
	  };

	  chr = function(b) {
	    return b.charCodeAt(0);
	  };

	  chr0 = chr('0');

	  chra = chr('a');

	  chrA = chr('A');

	  atob = function(s) {
	    var base, dmax, i, n, start;
	    n = 0;
	    base = 10;
	    dmax = '9';
	    i = 0;
	    if (s.length > 1 && s[i] === '0') {
	      if (s[i + 1] === 'x' || s[i + 1] === 'X') {
	        i += 2;
	        base = 16;
	      } else if ('0' <= s[i + 1] && s[i + 1] <= '9') {
	        i++;
	        base = 8;
	        dmax = '7';
	      }
	    }
	    start = i;
	    while (i < s.length) {
	      if ('0' <= s[i] && s[i] <= dmax) {
	        n = (n * base + (chr(s[i]) - chr0)) >>> 0;
	      } else if (base === 16) {
	        if ('a' <= s[i] && s[i] <= 'f') {
	          n = (n * base + (10 + chr(s[i]) - chra)) >>> 0;
	        } else if ('A' <= s[i] && s[i] <= 'F') {
	          n = (n * base + (10 + chr(s[i]) - chrA)) >>> 0;
	        } else {
	          break;
	        }
	      } else {
	        break;
	      }
	      if (n > 0xFFFFFFFF) {
	        throw new Error('too large');
	      }
	      i++;
	    }
	    if (i === start) {
	      throw new Error('empty octet');
	    }
	    return [n, i];
	  };

	  Netmask = (function() {
	    function Netmask(net, mask) {
	      var i, j, ref;
	      if (typeof net !== 'string') {
	        throw new Error("Missing `net' parameter");
	      }
	      if (!mask) {
	        ref = net.split('/', 2), net = ref[0], mask = ref[1];
	      }
	      if (!mask) {
	        mask = 32;
	      }
	      if (typeof mask === 'string' && mask.indexOf('.') > -1) {
	        try {
	          this.maskLong = ip2long(mask);
	        } catch (error1) {
	          throw new Error("Invalid mask: " + mask);
	        }
	        for (i = j = 32; j >= 0; i = --j) {
	          if (this.maskLong === (0xffffffff << (32 - i)) >>> 0) {
	            this.bitmask = i;
	            break;
	          }
	        }
	      } else if (mask || mask === 0) {
	        this.bitmask = parseInt(mask, 10);
	        this.maskLong = 0;
	        if (this.bitmask > 0) {
	          this.maskLong = (0xffffffff << (32 - this.bitmask)) >>> 0;
	        }
	      } else {
	        throw new Error("Invalid mask: empty");
	      }
	      try {
	        this.netLong = (ip2long(net) & this.maskLong) >>> 0;
	      } catch (error1) {
	        throw new Error("Invalid net address: " + net);
	      }
	      if (!(this.bitmask <= 32)) {
	        throw new Error("Invalid mask for ip4: " + mask);
	      }
	      this.size = Math.pow(2, 32 - this.bitmask);
	      this.base = long2ip(this.netLong);
	      this.mask = long2ip(this.maskLong);
	      this.hostmask = long2ip(~this.maskLong);
	      this.first = this.bitmask <= 30 ? long2ip(this.netLong + 1) : this.base;
	      this.last = this.bitmask <= 30 ? long2ip(this.netLong + this.size - 2) : long2ip(this.netLong + this.size - 1);
	      this.broadcast = this.bitmask <= 30 ? long2ip(this.netLong + this.size - 1) : void 0;
	    }

	    Netmask.prototype.contains = function(ip) {
	      if (typeof ip === 'string' && (ip.indexOf('/') > 0 || ip.split('.').length !== 4)) {
	        ip = new Netmask(ip);
	      }
	      if (ip instanceof Netmask) {
	        return this.contains(ip.base) && this.contains(ip.broadcast || ip.last);
	      } else {
	        return (ip2long(ip) & this.maskLong) >>> 0 === (this.netLong & this.maskLong) >>> 0;
	      }
	    };

	    Netmask.prototype.next = function(count) {
	      if (count == null) {
	        count = 1;
	      }
	      return new Netmask(long2ip(this.netLong + (this.size * count)), this.mask);
	    };

	    Netmask.prototype.forEach = function(fn) {
	      var index, lastLong, long;
	      long = ip2long(this.first);
	      lastLong = ip2long(this.last);
	      index = 0;
	      while (long <= lastLong) {
	        fn(long2ip(long), long, index);
	        index++;
	        long++;
	      }
	    };

	    Netmask.prototype.toString = function() {
	      return this.base + "/" + this.bitmask;
	    };

	    return Netmask;

	  })();

	  netmask.ip2long = ip2long;

	  netmask.long2ip = long2ip;

	  netmask.Netmask = Netmask;

	}).call(commonjsGlobal);

	var ipaddr = {exports: {}};

	(function (module) {
	(function (root) {
	    // A list of regular expressions that match arbitrary IPv4 addresses,
	    // for which a number of weird notations exist.
	    // Note that an address like 0010.0xa5.1.1 is considered legal.
	    const ipv4Part = '(0?\\d+|0x[a-f0-9]+)';
	    const ipv4Regexes = {
	        fourOctet: new RegExp(`^${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}$`, 'i'),
	        threeOctet: new RegExp(`^${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}$`, 'i'),
	        twoOctet: new RegExp(`^${ipv4Part}\\.${ipv4Part}$`, 'i'),
	        longValue: new RegExp(`^${ipv4Part}$`, 'i')
	    };

	    // Regular Expression for checking Octal numbers
	    const octalRegex = new RegExp(`^0[0-7]+$`, 'i');
	    const hexRegex = new RegExp(`^0x[a-f0-9]+$`, 'i');

	    const zoneIndex = '%[0-9a-z]{1,}';

	    // IPv6-matching regular expressions.
	    // For IPv6, the task is simpler: it is enough to match the colon-delimited
	    // hexadecimal IPv6 and a transitional variant with dotted-decimal IPv4 at
	    // the end.
	    const ipv6Part = '(?:[0-9a-f]+::?)+';
	    const ipv6Regexes = {
	        zoneIndex: new RegExp(zoneIndex, 'i'),
	        'native': new RegExp(`^(::)?(${ipv6Part})?([0-9a-f]+)?(::)?(${zoneIndex})?$`, 'i'),
	        deprecatedTransitional: new RegExp(`^(?:::)(${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}(${zoneIndex})?)$`, 'i'),
	        transitional: new RegExp(`^((?:${ipv6Part})|(?:::)(?:${ipv6Part})?)${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}\\.${ipv4Part}(${zoneIndex})?$`, 'i')
	    };

	    // Expand :: in an IPv6 address or address part consisting of `parts` groups.
	    function expandIPv6 (string, parts) {
	        // More than one '::' means invalid adddress
	        if (string.indexOf('::') !== string.lastIndexOf('::')) {
	            return null;
	        }

	        let colonCount = 0;
	        let lastColon = -1;
	        let zoneId = (string.match(ipv6Regexes.zoneIndex) || [])[0];
	        let replacement, replacementCount;

	        // Remove zone index and save it for later
	        if (zoneId) {
	            zoneId = zoneId.substring(1);
	            string = string.replace(/%.+$/, '');
	        }

	        // How many parts do we already have?
	        while ((lastColon = string.indexOf(':', lastColon + 1)) >= 0) {
	            colonCount++;
	        }

	        // 0::0 is two parts more than ::
	        if (string.substr(0, 2) === '::') {
	            colonCount--;
	        }

	        if (string.substr(-2, 2) === '::') {
	            colonCount--;
	        }

	        // The following loop would hang if colonCount > parts
	        if (colonCount > parts) {
	            return null;
	        }

	        // replacement = ':' + '0:' * (parts - colonCount)
	        replacementCount = parts - colonCount;
	        replacement = ':';
	        while (replacementCount--) {
	            replacement += '0:';
	        }

	        // Insert the missing zeroes
	        string = string.replace('::', replacement);

	        // Trim any garbage which may be hanging around if :: was at the edge in
	        // the source strin
	        if (string[0] === ':') {
	            string = string.slice(1);
	        }

	        if (string[string.length - 1] === ':') {
	            string = string.slice(0, -1);
	        }

	        parts = (function () {
	            const ref = string.split(':');
	            const results = [];

	            for (let i = 0; i < ref.length; i++) {
	                results.push(parseInt(ref[i], 16));
	            }

	            return results;
	        })();

	        return {
	            parts: parts,
	            zoneId: zoneId
	        };
	    }

	    // A generic CIDR (Classless Inter-Domain Routing) RFC1518 range matcher.
	    function matchCIDR (first, second, partSize, cidrBits) {
	        if (first.length !== second.length) {
	            throw new Error('ipaddr: cannot match CIDR for objects with different lengths');
	        }

	        let part = 0;
	        let shift;

	        while (cidrBits > 0) {
	            shift = partSize - cidrBits;
	            if (shift < 0) {
	                shift = 0;
	            }

	            if (first[part] >> shift !== second[part] >> shift) {
	                return false;
	            }

	            cidrBits -= partSize;
	            part += 1;
	        }

	        return true;
	    }

	    function parseIntAuto (string) {
	        // Hexadedimal base 16 (0x#)
	        if (hexRegex.test(string)) {
	            return parseInt(string, 16);
	        }
	        // While octal representation is discouraged by ECMAScript 3
	        // and forbidden by ECMAScript 5, we silently allow it to
	        // work only if the rest of the string has numbers less than 8.
	        if (string[0] === '0' && !isNaN(parseInt(string[1], 10))) {
	        if (octalRegex.test(string)) {
	            return parseInt(string, 8);
	        }
	            throw new Error(`ipaddr: cannot parse ${string} as octal`);
	        }
	        // Always include the base 10 radix!
	        return parseInt(string, 10);
	    }

	    function padPart (part, length) {
	        while (part.length < length) {
	            part = `0${part}`;
	        }

	        return part;
	    }

	    const ipaddr = {};

	    // An IPv4 address (RFC791).
	    ipaddr.IPv4 = (function () {
	        // Constructs a new IPv4 address from an array of four octets
	        // in network order (MSB first)
	        // Verifies the input.
	        function IPv4 (octets) {
	            if (octets.length !== 4) {
	                throw new Error('ipaddr: ipv4 octet count should be 4');
	            }

	            let i, octet;

	            for (i = 0; i < octets.length; i++) {
	                octet = octets[i];
	                if (!((0 <= octet && octet <= 255))) {
	                    throw new Error('ipaddr: ipv4 octet should fit in 8 bits');
	                }
	            }

	            this.octets = octets;
	        }

	        // Special IPv4 address ranges.
	        // See also https://en.wikipedia.org/wiki/Reserved_IP_addresses
	        IPv4.prototype.SpecialRanges = {
	            unspecified: [[new IPv4([0, 0, 0, 0]), 8]],
	            broadcast: [[new IPv4([255, 255, 255, 255]), 32]],
	            // RFC3171
	            multicast: [[new IPv4([224, 0, 0, 0]), 4]],
	            // RFC3927
	            linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],
	            // RFC5735
	            loopback: [[new IPv4([127, 0, 0, 0]), 8]],
	            // RFC6598
	            carrierGradeNat: [[new IPv4([100, 64, 0, 0]), 10]],
	            // RFC1918
	            'private': [
	                [new IPv4([10, 0, 0, 0]), 8],
	                [new IPv4([172, 16, 0, 0]), 12],
	                [new IPv4([192, 168, 0, 0]), 16]
	            ],
	            // Reserved and testing-only ranges; RFCs 5735, 5737, 2544, 1700
	            reserved: [
	                [new IPv4([192, 0, 0, 0]), 24],
	                [new IPv4([192, 0, 2, 0]), 24],
	                [new IPv4([192, 88, 99, 0]), 24],
	                [new IPv4([198, 51, 100, 0]), 24],
	                [new IPv4([203, 0, 113, 0]), 24],
	                [new IPv4([240, 0, 0, 0]), 4]
	            ]
	        };

	        // The 'kind' method exists on both IPv4 and IPv6 classes.
	        IPv4.prototype.kind = function () {
	            return 'ipv4';
	        };

	        // Checks if this address matches other one within given CIDR range.
	        IPv4.prototype.match = function (other, cidrRange) {
	            let ref;
	            if (cidrRange === undefined) {
	                ref = other;
	                other = ref[0];
	                cidrRange = ref[1];
	            }

	            if (other.kind() !== 'ipv4') {
	                throw new Error('ipaddr: cannot match ipv4 address with non-ipv4 one');
	            }

	            return matchCIDR(this.octets, other.octets, 8, cidrRange);
	        };

	        // returns a number of leading ones in IPv4 address, making sure that
	        // the rest is a solid sequence of 0's (valid netmask)
	        // returns either the CIDR length or null if mask is not valid
	        IPv4.prototype.prefixLengthFromSubnetMask = function () {
	            let cidr = 0;
	            // non-zero encountered stop scanning for zeroes
	            let stop = false;
	            // number of zeroes in octet
	            const zerotable = {
	                0: 8,
	                128: 7,
	                192: 6,
	                224: 5,
	                240: 4,
	                248: 3,
	                252: 2,
	                254: 1,
	                255: 0
	            };
	            let i, octet, zeros;

	            for (i = 3; i >= 0; i -= 1) {
	                octet = this.octets[i];
	                if (octet in zerotable) {
	                    zeros = zerotable[octet];
	                    if (stop && zeros !== 0) {
	                        return null;
	                    }

	                    if (zeros !== 8) {
	                        stop = true;
	                    }

	                    cidr += zeros;
	                } else {
	                    return null;
	                }
	            }

	            return 32 - cidr;
	        };

	        // Checks if the address corresponds to one of the special ranges.
	        IPv4.prototype.range = function () {
	            return ipaddr.subnetMatch(this, this.SpecialRanges);
	        };

	        // Returns an array of byte-sized values in network order (MSB first)
	        IPv4.prototype.toByteArray = function () {
	            return this.octets.slice(0);
	        };

	        // Converts this IPv4 address to an IPv4-mapped IPv6 address.
	        IPv4.prototype.toIPv4MappedAddress = function () {
	            return ipaddr.IPv6.parse(`::ffff:${this.toString()}`);
	        };

	        // Symmetrical method strictly for aligning with the IPv6 methods.
	        IPv4.prototype.toNormalizedString = function () {
	            return this.toString();
	        };

	        // Returns the address in convenient, decimal-dotted format.
	        IPv4.prototype.toString = function () {
	            return this.octets.join('.');
	        };

	        return IPv4;
	    })();

	    // A utility function to return broadcast address given the IPv4 interface and prefix length in CIDR notation
	    ipaddr.IPv4.broadcastAddressFromCIDR = function (string) {

	        try {
	            const cidr = this.parseCIDR(string);
	            const ipInterfaceOctets = cidr[0].toByteArray();
	            const subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
	            const octets = [];
	            let i = 0;
	            while (i < 4) {
	                // Broadcast address is bitwise OR between ip interface and inverted mask
	                octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);
	                i++;
	            }

	            return new this(octets);
	        } catch (e) {
	            throw new Error('ipaddr: the address does not have IPv4 CIDR format');
	        }
	    };

	    // Checks if a given string is formatted like IPv4 address.
	    ipaddr.IPv4.isIPv4 = function (string) {
	        return this.parser(string) !== null;
	    };

	    // Checks if a given string is a valid IPv4 address.
	    ipaddr.IPv4.isValid = function (string) {
	        try {
	            new this(this.parser(string));
	            return true;
	        } catch (e) {
	            return false;
	        }
	    };

	    // Checks if a given string is a full four-part IPv4 Address.
	    ipaddr.IPv4.isValidFourPartDecimal = function (string) {
	        if (ipaddr.IPv4.isValid(string) && string.match(/^(0|[1-9]\d*)(\.(0|[1-9]\d*)){3}$/)) {
	            return true;
	        } else {
	            return false;
	        }
	    };

	    // A utility function to return network address given the IPv4 interface and prefix length in CIDR notation
	    ipaddr.IPv4.networkAddressFromCIDR = function (string) {
	        let cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;

	        try {
	            cidr = this.parseCIDR(string);
	            ipInterfaceOctets = cidr[0].toByteArray();
	            subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
	            octets = [];
	            i = 0;
	            while (i < 4) {
	                // Network address is bitwise AND between ip interface and mask
	                octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));
	                i++;
	            }

	            return new this(octets);
	        } catch (e) {
	            throw new Error('ipaddr: the address does not have IPv4 CIDR format');
	        }
	    };

	    // Tries to parse and validate a string with IPv4 address.
	    // Throws an error if it fails.
	    ipaddr.IPv4.parse = function (string) {
	        const parts = this.parser(string);

	        if (parts === null) {
	            throw new Error('ipaddr: string is not formatted like an IPv4 Address');
	        }

	        return new this(parts);
	    };

	    // Parses the string as an IPv4 Address with CIDR Notation.
	    ipaddr.IPv4.parseCIDR = function (string) {
	        let match;

	        if ((match = string.match(/^(.+)\/(\d+)$/))) {
	            const maskLength = parseInt(match[2]);
	            if (maskLength >= 0 && maskLength <= 32) {
	                const parsed = [this.parse(match[1]), maskLength];
	                Object.defineProperty(parsed, 'toString', {
	                    value: function () {
	                        return this.join('/');
	                    }
	                });
	                return parsed;
	            }
	        }

	        throw new Error('ipaddr: string is not formatted like an IPv4 CIDR range');
	    };

	    // Classful variants (like a.b, where a is an octet, and b is a 24-bit
	    // value representing last three octets; this corresponds to a class C
	    // address) are omitted due to classless nature of modern Internet.
	    ipaddr.IPv4.parser = function (string) {
	        let match, part, value;

	        // parseInt recognizes all that octal & hexadecimal weirdness for us
	        if ((match = string.match(ipv4Regexes.fourOctet))) {
	            return (function () {
	                const ref = match.slice(1, 6);
	                const results = [];

	                for (let i = 0; i < ref.length; i++) {
	                    part = ref[i];
	                    results.push(parseIntAuto(part));
	                }

	                return results;
	            })();
	        } else if ((match = string.match(ipv4Regexes.longValue))) {
	            value = parseIntAuto(match[1]);
	            if (value > 0xffffffff || value < 0) {
	                throw new Error('ipaddr: address outside defined range');
	            }

	            return ((function () {
	                const results = [];
	                let shift;

	                for (shift = 0; shift <= 24; shift += 8) {
	                    results.push((value >> shift) & 0xff);
	                }

	                return results;
	            })()).reverse();
	        } else if ((match = string.match(ipv4Regexes.twoOctet))) {
	            return (function () {
	                const ref = match.slice(1, 4);
	                const results = [];

	                value = parseIntAuto(ref[1]);
	                if (value > 0xffffff || value < 0) {
	                    throw new Error('ipaddr: address outside defined range');
	                }

	                results.push(parseIntAuto(ref[0]));
	                results.push((value >> 16) & 0xff);
	                results.push((value >>  8) & 0xff);
	                results.push( value        & 0xff);

	                return results;
	            })();
	        } else if ((match = string.match(ipv4Regexes.threeOctet))) {
	            return (function () {
	                const ref = match.slice(1, 5);
	                const results = [];

	                value = parseIntAuto(ref[2]);
	                if (value > 0xffff || value < 0) {
	                    throw new Error('ipaddr: address outside defined range');
	                }

	                results.push(parseIntAuto(ref[0]));
	                results.push(parseIntAuto(ref[1]));
	                results.push((value >> 8) & 0xff);
	                results.push( value       & 0xff);

	                return results;
	            })();
	        } else {
	            return null;
	        }
	    };

	    // A utility function to return subnet mask in IPv4 format given the prefix length
	    ipaddr.IPv4.subnetMaskFromPrefixLength = function (prefix) {
	        prefix = parseInt(prefix);
	        if (prefix < 0 || prefix > 32) {
	            throw new Error('ipaddr: invalid IPv4 prefix length');
	        }

	        const octets = [0, 0, 0, 0];
	        let j = 0;
	        const filledOctetCount = Math.floor(prefix / 8);

	        while (j < filledOctetCount) {
	            octets[j] = 255;
	            j++;
	        }

	        if (filledOctetCount < 4) {
	            octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - (prefix % 8);
	        }

	        return new this(octets);
	    };

	    // An IPv6 address (RFC2460)
	    ipaddr.IPv6 = (function () {
	        // Constructs an IPv6 address from an array of eight 16 - bit parts
	        // or sixteen 8 - bit parts in network order(MSB first).
	        // Throws an error if the input is invalid.
	        function IPv6 (parts, zoneId) {
	            let i, part;

	            if (parts.length === 16) {
	                this.parts = [];
	                for (i = 0; i <= 14; i += 2) {
	                    this.parts.push((parts[i] << 8) | parts[i + 1]);
	                }
	            } else if (parts.length === 8) {
	                this.parts = parts;
	            } else {
	                throw new Error('ipaddr: ipv6 part count should be 8 or 16');
	            }

	            for (i = 0; i < this.parts.length; i++) {
	                part = this.parts[i];
	                if (!((0 <= part && part <= 0xffff))) {
	                    throw new Error('ipaddr: ipv6 part should fit in 16 bits');
	                }
	            }

	            if (zoneId) {
	                this.zoneId = zoneId;
	            }
	        }

	        // Special IPv6 ranges
	        IPv6.prototype.SpecialRanges = {
	            // RFC4291, here and after
	            unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],
	            linkLocal: [new IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 0]), 10],
	            multicast: [new IPv6([0xff00, 0, 0, 0, 0, 0, 0, 0]), 8],
	            loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],
	            uniqueLocal: [new IPv6([0xfc00, 0, 0, 0, 0, 0, 0, 0]), 7],
	            ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 0xffff, 0, 0]), 96],
	            // RFC6145
	            rfc6145: [new IPv6([0, 0, 0, 0, 0xffff, 0, 0, 0]), 96],
	            // RFC6052
	            rfc6052: [new IPv6([0x64, 0xff9b, 0, 0, 0, 0, 0, 0]), 96],
	            // RFC3056
	            '6to4': [new IPv6([0x2002, 0, 0, 0, 0, 0, 0, 0]), 16],
	            // RFC6052, RFC6146
	            teredo: [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 32],
	            // RFC4291
	            reserved: [[new IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32]]
	        };

	        // Checks if this address is an IPv4-mapped IPv6 address.
	        IPv6.prototype.isIPv4MappedAddress = function () {
	            return this.range() === 'ipv4Mapped';
	        };

	        // The 'kind' method exists on both IPv4 and IPv6 classes.
	        IPv6.prototype.kind = function () {
	            return 'ipv6';
	        };

	        // Checks if this address matches other one within given CIDR range.
	        IPv6.prototype.match = function (other, cidrRange) {
	            let ref;

	            if (cidrRange === undefined) {
	                ref = other;
	                other = ref[0];
	                cidrRange = ref[1];
	            }

	            if (other.kind() !== 'ipv6') {
	                throw new Error('ipaddr: cannot match ipv6 address with non-ipv6 one');
	            }

	            return matchCIDR(this.parts, other.parts, 16, cidrRange);
	        };

	        // returns a number of leading ones in IPv6 address, making sure that
	        // the rest is a solid sequence of 0's (valid netmask)
	        // returns either the CIDR length or null if mask is not valid
	        IPv6.prototype.prefixLengthFromSubnetMask = function () {
	            let cidr = 0;
	            // non-zero encountered stop scanning for zeroes
	            let stop = false;
	            // number of zeroes in octet
	            const zerotable = {
	                0: 16,
	                32768: 15,
	                49152: 14,
	                57344: 13,
	                61440: 12,
	                63488: 11,
	                64512: 10,
	                65024: 9,
	                65280: 8,
	                65408: 7,
	                65472: 6,
	                65504: 5,
	                65520: 4,
	                65528: 3,
	                65532: 2,
	                65534: 1,
	                65535: 0
	            };
	            let part, zeros;

	            for (let i = 7; i >= 0; i -= 1) {
	                part = this.parts[i];
	                if (part in zerotable) {
	                    zeros = zerotable[part];
	                    if (stop && zeros !== 0) {
	                        return null;
	                    }

	                    if (zeros !== 16) {
	                        stop = true;
	                    }

	                    cidr += zeros;
	                } else {
	                    return null;
	                }
	            }

	            return 128 - cidr;
	        };


	        // Checks if the address corresponds to one of the special ranges.
	        IPv6.prototype.range = function () {
	            return ipaddr.subnetMatch(this, this.SpecialRanges);
	        };

	        // Returns an array of byte-sized values in network order (MSB first)
	        IPv6.prototype.toByteArray = function () {
	            let part;
	            const bytes = [];
	            const ref = this.parts;
	            for (let i = 0; i < ref.length; i++) {
	                part = ref[i];
	                bytes.push(part >> 8);
	                bytes.push(part & 0xff);
	            }

	            return bytes;
	        };

	        // Returns the address in expanded format with all zeroes included, like
	        // 2001:0db8:0008:0066:0000:0000:0000:0001
	        IPv6.prototype.toFixedLengthString = function () {
	            const addr = ((function () {
	                const results = [];
	                for (let i = 0; i < this.parts.length; i++) {
	                    results.push(padPart(this.parts[i].toString(16), 4));
	                }

	                return results;
	            }).call(this)).join(':');

	            let suffix = '';

	            if (this.zoneId) {
	                suffix = `%${this.zoneId}`;
	            }

	            return addr + suffix;
	        };

	        // Converts this address to IPv4 address if it is an IPv4-mapped IPv6 address.
	        // Throws an error otherwise.
	        IPv6.prototype.toIPv4Address = function () {
	            if (!this.isIPv4MappedAddress()) {
	                throw new Error('ipaddr: trying to convert a generic ipv6 address to ipv4');
	            }

	            const ref = this.parts.slice(-2);
	            const high = ref[0];
	            const low = ref[1];

	            return new ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff]);
	        };

	        // Returns the address in expanded format with all zeroes included, like
	        // 2001:db8:8:66:0:0:0:1
	        //
	        // Deprecated: use toFixedLengthString() instead.
	        IPv6.prototype.toNormalizedString = function () {
	            const addr = ((function () {
	                const results = [];

	                for (let i = 0; i < this.parts.length; i++) {
	                    results.push(this.parts[i].toString(16));
	                }

	                return results;
	            }).call(this)).join(':');

	            let suffix = '';

	            if (this.zoneId) {
	                suffix = `%${this.zoneId}`;
	            }

	            return addr + suffix;
	        };

	        // Returns the address in compact, human-readable format like
	        // 2001:db8:8:66::1
	        // in line with RFC 5952 (see https://tools.ietf.org/html/rfc5952#section-4)
	        IPv6.prototype.toRFC5952String = function () {
	            const regex = /((^|:)(0(:|$)){2,})/g;
	            const string = this.toNormalizedString();
	            let bestMatchIndex = 0;
	            let bestMatchLength = -1;
	            let match;

	            while ((match = regex.exec(string))) {
	                if (match[0].length > bestMatchLength) {
	                    bestMatchIndex = match.index;
	                    bestMatchLength = match[0].length;
	                }
	            }

	            if (bestMatchLength < 0) {
	                return string;
	            }

	            return `${string.substring(0, bestMatchIndex)}::${string.substring(bestMatchIndex + bestMatchLength)}`;
	        };

	        // Returns the address in compact, human-readable format like
	        // 2001:db8:8:66::1
	        //
	        // Deprecated: use toRFC5952String() instead.
	        IPv6.prototype.toString = function () {
	            // Replace the first sequence of 1 or more '0' parts with '::'
	            return this.toNormalizedString().replace(/((^|:)(0(:|$))+)/, '::');
	        };

	        return IPv6;

	    })();

	    // A utility function to return broadcast address given the IPv6 interface and prefix length in CIDR notation
	    ipaddr.IPv6.broadcastAddressFromCIDR = function (string) {
	        try {
	            const cidr = this.parseCIDR(string);
	            const ipInterfaceOctets = cidr[0].toByteArray();
	            const subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
	            const octets = [];
	            let i = 0;
	            while (i < 16) {
	                // Broadcast address is bitwise OR between ip interface and inverted mask
	                octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);
	                i++;
	            }

	            return new this(octets);
	        } catch (e) {
	            throw new Error(`ipaddr: the address does not have IPv6 CIDR format (${e})`);
	        }
	    };

	    // Checks if a given string is formatted like IPv6 address.
	    ipaddr.IPv6.isIPv6 = function (string) {
	        return this.parser(string) !== null;
	    };

	    // Checks to see if string is a valid IPv6 Address
	    ipaddr.IPv6.isValid = function (string) {

	        // Since IPv6.isValid is always called first, this shortcut
	        // provides a substantial performance gain.
	        if (typeof string === 'string' && string.indexOf(':') === -1) {
	            return false;
	        }

	        try {
	            const addr = this.parser(string);
	            new this(addr.parts, addr.zoneId);
	            return true;
	        } catch (e) {
	            return false;
	        }
	    };

	    // A utility function to return network address given the IPv6 interface and prefix length in CIDR notation
	    ipaddr.IPv6.networkAddressFromCIDR = function (string) {
	        let cidr, i, ipInterfaceOctets, octets, subnetMaskOctets;

	        try {
	            cidr = this.parseCIDR(string);
	            ipInterfaceOctets = cidr[0].toByteArray();
	            subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
	            octets = [];
	            i = 0;
	            while (i < 16) {
	                // Network address is bitwise AND between ip interface and mask
	                octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));
	                i++;
	            }

	            return new this(octets);
	        } catch (e) {
	            throw new Error(`ipaddr: the address does not have IPv6 CIDR format (${e})`);
	        }
	    };

	    // Tries to parse and validate a string with IPv6 address.
	    // Throws an error if it fails.
	    ipaddr.IPv6.parse = function (string) {
	        const addr = this.parser(string);

	        if (addr.parts === null) {
	            throw new Error('ipaddr: string is not formatted like an IPv6 Address');
	        }

	        return new this(addr.parts, addr.zoneId);
	    };

	    ipaddr.IPv6.parseCIDR = function (string) {
	        let maskLength, match, parsed;

	        if ((match = string.match(/^(.+)\/(\d+)$/))) {
	            maskLength = parseInt(match[2]);
	            if (maskLength >= 0 && maskLength <= 128) {
	                parsed = [this.parse(match[1]), maskLength];
	                Object.defineProperty(parsed, 'toString', {
	                    value: function () {
	                        return this.join('/');
	                    }
	                });
	                return parsed;
	            }
	        }

	        throw new Error('ipaddr: string is not formatted like an IPv6 CIDR range');
	    };

	    // Parse an IPv6 address.
	    ipaddr.IPv6.parser = function (string) {
	        let addr, i, match, octet, octets, zoneId;

	        if ((match = string.match(ipv6Regexes.deprecatedTransitional))) {
	            return this.parser(`::ffff:${match[1]}`);
	        }
	        if (ipv6Regexes.native.test(string)) {
	            return expandIPv6(string, 8);
	        }
	        if ((match = string.match(ipv6Regexes.transitional))) {
	            zoneId = match[6] || '';
	            addr = expandIPv6(match[1].slice(0, -1) + zoneId, 6);
	            if (addr.parts) {
	                octets = [
	                    parseInt(match[2]),
	                    parseInt(match[3]),
	                    parseInt(match[4]),
	                    parseInt(match[5])
	                ];
	                for (i = 0; i < octets.length; i++) {
	                    octet = octets[i];
	                    if (!((0 <= octet && octet <= 255))) {
	                        return null;
	                    }
	                }

	                addr.parts.push(octets[0] << 8 | octets[1]);
	                addr.parts.push(octets[2] << 8 | octets[3]);
	                return {
	                    parts: addr.parts,
	                    zoneId: addr.zoneId
	                };
	            }
	        }

	        return null;
	    };

	    // A utility function to return subnet mask in IPv6 format given the prefix length
	    ipaddr.IPv6.subnetMaskFromPrefixLength = function (prefix) {
	        prefix = parseInt(prefix);
	        if (prefix < 0 || prefix > 128) {
	            throw new Error('ipaddr: invalid IPv6 prefix length');
	        }

	        const octets = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
	        let j = 0;
	        const filledOctetCount = Math.floor(prefix / 8);

	        while (j < filledOctetCount) {
	            octets[j] = 255;
	            j++;
	        }

	        if (filledOctetCount < 16) {
	            octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - (prefix % 8);
	        }

	        return new this(octets);
	    };

	    // Try to parse an array in network order (MSB first) for IPv4 and IPv6
	    ipaddr.fromByteArray = function (bytes) {
	        const length = bytes.length;

	        if (length === 4) {
	            return new ipaddr.IPv4(bytes);
	        } else if (length === 16) {
	            return new ipaddr.IPv6(bytes);
	        } else {
	            throw new Error('ipaddr: the binary input is neither an IPv6 nor IPv4 address');
	        }
	    };

	    // Checks if the address is valid IP address
	    ipaddr.isValid = function (string) {
	        return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);
	    };


	    // Attempts to parse an IP Address, first through IPv6 then IPv4.
	    // Throws an error if it could not be parsed.
	    ipaddr.parse = function (string) {
	        if (ipaddr.IPv6.isValid(string)) {
	            return ipaddr.IPv6.parse(string);
	        } else if (ipaddr.IPv4.isValid(string)) {
	            return ipaddr.IPv4.parse(string);
	        } else {
	            throw new Error('ipaddr: the address has neither IPv6 nor IPv4 format');
	        }
	    };

	    // Attempt to parse CIDR notation, first through IPv6 then IPv4.
	    // Throws an error if it could not be parsed.
	    ipaddr.parseCIDR = function (string) {
	        try {
	            return ipaddr.IPv6.parseCIDR(string);
	        } catch (e) {
	            try {
	                return ipaddr.IPv4.parseCIDR(string);
	            } catch (e2) {
	                throw new Error('ipaddr: the address has neither IPv6 nor IPv4 CIDR format');
	            }
	        }
	    };

	    // Parse an address and return plain IPv4 address if it is an IPv4-mapped address
	    ipaddr.process = function (string) {
	        const addr = this.parse(string);

	        if (addr.kind() === 'ipv6' && addr.isIPv4MappedAddress()) {
	            return addr.toIPv4Address();
	        } else {
	            return addr;
	        }
	    };

	    // An utility function to ease named range matching. See examples below.
	    // rangeList can contain both IPv4 and IPv6 subnet entries and will not throw errors
	    // on matching IPv4 addresses to IPv6 ranges or vice versa.
	    ipaddr.subnetMatch = function (address, rangeList, defaultName) {
	        let i, rangeName, rangeSubnets, subnet;

	        if (defaultName === undefined || defaultName === null) {
	            defaultName = 'unicast';
	        }

	        for (rangeName in rangeList) {
	            if (Object.prototype.hasOwnProperty.call(rangeList, rangeName)) {
	                rangeSubnets = rangeList[rangeName];
	                // ECMA5 Array.isArray isn't available everywhere
	                if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {
	                    rangeSubnets = [rangeSubnets];
	                }

	                for (i = 0; i < rangeSubnets.length; i++) {
	                    subnet = rangeSubnets[i];
	                    if (address.kind() === subnet[0].kind() && address.match.apply(address, subnet)) {
	                        return rangeName;
	                    }
	                }
	            }
	        }

	        return defaultName;
	    };

	    // Export for both the CommonJS and browser-like environment
	    if (module.exports) {
	        module.exports = ipaddr;

	    } else {
	        root.ipaddr = ipaddr;
	    }

	}(commonjsGlobal));
	}(ipaddr));

	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(lib, "__esModule", { value: true });
	const netmask_1 = netmask;
	const ip_regex_1 = __importDefault(ipRegex$1);
	const is_ip_1 = __importDefault(isIp_1);
	const ipaddr_js_1 = ipaddr.exports;
	const PRIVATE_IP_RANGES = [
	    '0.0.0.0/8',
	    '10.0.0.0/8',
	    '100.64.0.0/10',
	    '127.0.0.0/8',
	    '169.254.0.0/16',
	    '172.16.0.0/12',
	    '192.0.0.0/24',
	    '192.0.0.0/29',
	    '192.0.0.8/32',
	    '192.0.0.9/32',
	    '192.0.0.10/32',
	    '192.0.0.170/32',
	    '192.0.0.171/32',
	    '192.0.2.0/24',
	    '192.31.196.0/24',
	    '192.52.193.0/24',
	    '192.88.99.0/24',
	    '192.168.0.0/16',
	    '192.175.48.0/24',
	    '198.18.0.0/15',
	    '198.51.100.0/24',
	    '203.0.113.0/24',
	    '240.0.0.0/4',
	    '255.255.255.255/32'
	];
	const NETMASK_RANGES = PRIVATE_IP_RANGES.map(ip_range => new netmask_1.Netmask(ip_range));
	function ipv4_check(ip_addr) {
	    for (let r of NETMASK_RANGES) {
	        if (r.contains(ip_addr))
	            return true;
	    }
	    return false;
	}
	function ipv6_check(ip_addr) {
	    return /^::$/.test(ip_addr) ||
	        /^::1$/.test(ip_addr) ||
	        /^::f{4}:([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/.test(ip_addr) ||
	        /^::f{4}:0.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/.test(ip_addr) ||
	        /^64:ff9b::([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/.test(ip_addr) ||
	        /^100::([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) ||
	        /^2001::([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) ||
	        /^2001:2[0-9a-fA-F]:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) ||
	        /^2001:db8:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) ||
	        /^2002:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) ||
	        /^f[c-d]([0-9a-fA-F]{2,2}):/i.test(ip_addr) ||
	        /^fe[8-9a-bA-B][0-9a-fA-F]:/i.test(ip_addr) ||
	        /^ff([0-9a-fA-F]{2,2}):/i.test(ip_addr);
	}
	lib.default = (ip) => {
	    if (ipaddr_js_1.isValid(ip)) {
	        const parsed = ipaddr_js_1.parse(ip);
	        if (parsed.kind() === 'ipv4')
	            return ipv4_check(parsed.toNormalizedString());
	        else if (parsed.kind() === 'ipv6')
	            return ipv6_check(ip);
	    }
	    else if (is_ip_1.default(ip) && ip_regex_1.default.v6().test(ip))
	        return ipv6_check(ip);
	    return undefined;
	};

	var privateIp = lib.default;

	const debug$v = browser$a.exports;
	const { sha256: sha256$2 } = require$$1$6;
	const { base58btc } = require$$2$2;
	const { base32: base32$1 } = require$$5$4;
	const { Key: Key$4 } = require$$4;
	const { Record: Record$4 } = src$l;
	const PeerId$l = src$o.exports;
	const { fromString: uint8ArrayFromString$5 } = require$$5$3;
	const { toString: uint8ArrayToString$7 } = require$$8;
	const { concat: uint8ArrayConcat } = require$$9;
	const isPrivateIp$1 = privateIp;

	// const IPNS_PREFIX = uint8ArrayFromString('/ipns/')
	const PK_PREFIX = uint8ArrayFromString$5('/pk/');

	/**
	 * @param {import('./types').PeerData} peer
	 */
	function removePrivateAddresses$3 ({ id, multiaddrs }) {
	  return {
	    id,
	    multiaddrs: multiaddrs.filter(multiaddr => {
	      const [[type, addr]] = multiaddr.stringTuples();

	      if (type !== 4 && type !== 6) {
	        return false
	      }

	      // @ts-expect-error types are wrong https://github.com/frenchbread/private-ip/issues/18
	      return !isPrivateIp$1(addr)
	    })
	  }
	}

	/**
	 * @param {import('./types').PeerData} peer
	 */
	function removePublicAddresses$3 ({ id, multiaddrs }) {
	  return {
	    id,
	    multiaddrs: multiaddrs.filter(multiaddr => {
	      const [[type, addr]] = multiaddr.stringTuples();

	      if (type !== 4 && type !== 6) {
	        return false
	      }

	      // @ts-expect-error types are wrong https://github.com/frenchbread/private-ip/issues/18
	      return isPrivateIp$1(addr)
	    })
	  }
	}

	/**
	 * Creates a DHT ID by hashing a given Uint8Array.
	 *
	 * @param {Uint8Array} buf
	 * @returns {Promise<Uint8Array>}
	 */
	const convertBuffer$2 = async (buf) => {
	  return (await sha256$2.digest(buf)).digest
	};

	/**
	 * Creates a DHT ID by hashing a Peer ID
	 *
	 * @param {PeerId} peer
	 * @returns {Promise<Uint8Array>}
	 */
	const convertPeerId$1 = async (peer) => {
	  return (await sha256$2.digest(peer.id)).digest
	};

	/**
	 * Convert a Uint8Array to their SHA2-256 hash.
	 *
	 * @param {Uint8Array} buf
	 * @returns {Key}
	 */
	const bufferToKey = (buf) => {
	  return new Key$4('/' + uint8ArrayToString$7(buf, 'base32'), false)
	};

	/**
	 * Generate the key for a public key.
	 *
	 * @param {PeerId} peer
	 * @returns {Uint8Array}
	 */
	const keyForPublicKey = (peer) => {
	  return uint8ArrayConcat([
	    PK_PREFIX,
	    peer.id
	  ])
	};

	/**
	 * @param {Uint8Array} key
	 */
	const isPublicKeyKey = (key) => {
	  return uint8ArrayToString$7(key.slice(0, 4)) === '/pk/'
	};

	/**
	 * @param {Uint8Array} key
	 */
	const isIPNSKey = (key) => {
	  return uint8ArrayToString$7(key.slice(0, 4)) === '/ipns/'
	};

	/**
	 * @param {Uint8Array} key
	 */
	const fromPublicKeyKey = (key) => {
	  return new PeerId$l(key.slice(4))
	};

	/**
	 * Create a new put record, encodes and signs it if enabled.
	 *
	 * @param {Uint8Array} key
	 * @param {Uint8Array} value
	 * @returns {Uint8Array}
	 */
	const createPutRecord = (key, value) => {
	  const timeReceived = new Date();
	  const rec = new Record$4(key, value, timeReceived);

	  return rec.serialize()
	};

	/**
	 * Creates a logger for the given subsystem
	 *
	 * @param {string} name
	 */
	const logger$3 = (name) => {
	  // Add a formatter for converting to a base58 string
	  debug$v.formatters.b = (v) => {
	    return base58btc.baseEncode(v)
	  };

	  // Add a formatter for converting to a base58 string
	  debug$v.formatters.t = (v) => {
	    return base32$1.baseEncode(v)
	  };

	  // Add a formatter for stringifying peer ids
	  debug$v.formatters.p = (p) => {
	    return p.toB58String()
	  };

	  const logger = Object.assign(debug$v(name), {
	    error: debug$v(`${name}:error`)
	  });

	  return logger
	};

	var utils$o = {
	  removePrivateAddresses: removePrivateAddresses$3,
	  removePublicAddresses: removePublicAddresses$3,
	  convertBuffer: convertBuffer$2,
	  convertPeerId: convertPeerId$1,
	  bufferToKey,
	  keyForPublicKey,
	  isPublicKeyKey,
	  isIPNSKey,
	  fromPublicKeyKey,
	  createPutRecord,
	  logger: logger$3
	};

	var constants$5 = {};

	// MaxRecordAge specifies the maximum time that any node will hold onto a record
	// from the time its received. This does not apply to any other forms of validity that
	// the record may contain.
	// For example, a record may contain an ipns entry with an EOL saying its valid
	// until the year 2020 (a great time in the future). For that record to stick around
	// it must be rebroadcasted more frequently than once every 'MaxRecordAge'

	const second = constants$5.second = 1000;
	const minute$1 = constants$5.minute = 60 * second;
	const hour = constants$5.hour = 60 * minute$1;

	constants$5.MAX_RECORD_AGE = 36 * hour;

	constants$5.PROTOCOL_DHT = '/kad/1.0.0';

	constants$5.RECORD_KEY_PREFIX = '/dht/record';

	constants$5.PROVIDER_KEY_PREFIX = '/dht/provider';

	constants$5.PROVIDERS_LRU_CACHE_SIZE = 256;

	constants$5.PROVIDERS_VALIDITY = 24 * hour;

	constants$5.PROVIDERS_CLEANUP_INTERVAL = hour;

	constants$5.READ_MESSAGE_TIMEOUT = 10 * second;

	// The number of records that will be retrieved on a call to getMany()
	constants$5.GET_MANY_RECORD_COUNT = 16;

	// K is the maximum number of requests to perform before returning failure
	constants$5.K = 20;

	// Alpha is the concurrency for asynchronous requests
	constants$5.ALPHA = 3;

	// How often we look for our closest DHT neighbours
	constants$5.QUERY_SELF_INTERVAL = Number(5 * minute$1);

	// How long to look for our closest DHT neighbours for
	constants$5.QUERY_SELF_TIMEOUT = Number(30 * second);

	// How often we try to find new peers
	constants$5.TABLE_REFRESH_INTERVAL = Number(5 * minute$1);

	// How how long to look for new peers for
	constants$5.TABLE_REFRESH_QUERY_TIMEOUT = Number(30 * second);

	// When a timeout is not specified, run a query for this long
	constants$5.DEFAULT_QUERY_TIMEOUT = Number(30 * second);

	// @ts-expect-error no types
	const KBuck = kBucket;
	const utils$n = utils$o;
	const { default: Queue$2 } = dist$1;
	const { PROTOCOL_DHT } = constants$5;
	const { TimeoutController: TimeoutController$6 } = timeoutAbortController;

	/**
	 * @typedef {import('./types').KBucketPeer} KBucketPeer
	 * @typedef {import('./types').KBucket} KBucket
	 * @typedef {import('./types').KBucketTree} KBucketTree
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('../types').Metrics} Metrics
	 */

	const METRIC_ROUTING_TABLE_SIZE = 'routing-table-size';

	/**
	 * A wrapper around `k-bucket`, to provide easy store and
	 * retrieval for peers.
	 */
	class RoutingTable$1 {
	  /**
	   * @param {object} params
	   * @param {import('peer-id')} params.peerId
	   * @param {import('../types').Dialer} params.dialer
	   * @param {boolean} params.lan
	   * @param {Metrics} [params.metrics]
	   * @param {number} [params.kBucketSize=20]
	   * @param {number} [params.pingTimeout=10000]
	   */
	  constructor ({ peerId, dialer, kBucketSize, pingTimeout, lan, metrics }) {
	    this._log = utils$n.logger(`libp2p:kad-dht:${lan ? 'lan' : 'wan'}:routing-table`);
	    this._peerId = peerId;
	    this._dialer = dialer;
	    this._kBucketSize = kBucketSize || 20;
	    this._pingTimeout = pingTimeout || 10000;
	    this._lan = lan;
	    this._metrics = metrics;

	    /** @type {KBucketTree} */
	    this.kb; // eslint-disable-line no-unused-expressions

	    /** @type {Date[]} */
	    this.commonPrefixLengthRefreshedAt = [];

	    this._onPing = this._onPing.bind(this);
	    this._pingQueue = new Queue$2({ concurrency: 1 });
	    this._running = false;
	  }

	  async start () {
	    this._running = true;

	    this.kb = new KBuck({
	      localNodeId: await utils$n.convertPeerId(this._peerId),
	      numberOfNodesPerKBucket: this._kBucketSize,
	      numberOfNodesToPing: 1
	    });
	    this.kb.on('ping', this._onPing);
	  }

	  async stop () {
	    this._running = false;
	    this._pingQueue.clear();
	  }

	  /**
	   * Called on the `ping` event from `k-bucket` when a bucket is full
	   * and cannot split.
	   *
	   * `oldContacts.length` is defined by the `numberOfNodesToPing` param
	   * passed to the `k-bucket` constructor.
	   *
	   * `oldContacts` will not be empty and is the list of contacts that
	   * have not been contacted for the longest.
	   *
	   * @param {KBucketPeer[]} oldContacts
	   * @param {KBucketPeer} newContact
	   */
	  _onPing (oldContacts, newContact) {
	    // add to a queue so multiple ping requests do not overlap and we don't
	    // flood the network with ping requests if lots of newContact requests
	    // are received
	    this._pingQueue.add(async () => {
	      if (!this._running) {
	        return
	      }

	      let responded = 0;

	      try {
	        await Promise.all(
	          oldContacts.map(async oldContact => {
	            let timeoutController;

	            try {
	              timeoutController = new TimeoutController$6(this._pingTimeout);

	              this._log(`pinging old contact ${oldContact.peer}`);
	              const { stream } = await this._dialer.dialProtocol(oldContact.peer, PROTOCOL_DHT, {
	                signal: timeoutController.signal
	              });
	              await stream.close();
	              responded++;
	            } catch (/** @type {any} */ err) {
	              if (this._running) {
	                // only evict peers if we are still running, otherwise we evict when dialing is
	                // cancelled due to shutdown in progress
	                this._log.error('could not ping peer %p', oldContact.peer, err);
	                this._log(`evicting old contact after ping failed ${oldContact.peer}`);
	                this.kb.remove(oldContact.id);
	              }
	            } finally {
	              if (timeoutController) {
	                timeoutController.clear();
	              }

	              this._metrics && this._metrics.updateComponentMetric({ component: `kad-dht-${this._lan ? 'lan' : 'wan'}`, metric: METRIC_ROUTING_TABLE_SIZE, value: this.size });
	            }
	          })
	        );

	        if (this._running && responded < oldContacts.length) {
	          this._log(`adding new contact ${newContact.peer}`);
	          this.kb.add(newContact);
	        }
	      } catch (/** @type {any} */ err) {
	        this._log.error('could not process k-bucket ping event', err);
	      }
	    });
	  }

	  // -- Public Interface

	  /**
	   * Amount of currently stored peers.
	   */
	  get size () {
	    return this.kb.count()
	  }

	  /**
	   * Find a specific peer by id.
	   *
	   * @param {PeerId} peer
	   */
	  async find (peer) {
	    const key = await utils$n.convertPeerId(peer);
	    const closest = this.closestPeer(key);

	    if (closest && peer.equals(closest)) {
	      return closest
	    }
	  }

	  /**
	   * Retrieve the closest peers to the given key.
	   *
	   * @param {Uint8Array} key
	   */
	  closestPeer (key) {
	    const res = this.closestPeers(key, 1);

	    if (res.length > 0) {
	      return res[0]
	    }
	  }

	  /**
	   * Retrieve the `count`-closest peers to the given key.
	   *
	   * @param {Uint8Array} key
	   * @param {number} [count] - defaults to kBucketSize
	   */
	  closestPeers (key, count = this._kBucketSize) {
	    const closest = this.kb.closest(key, count);

	    return closest.map(p => p.peer)
	  }

	  /**
	   * Add or update the routing table with the given peer.
	   *
	   * @param {PeerId} peer
	   */
	  async add (peer) {
	    const id = await utils$n.convertPeerId(peer);

	    this.kb.add({ id: id, peer: peer });

	    this._log('added %p with kad id %b', peer, id);

	    this._metrics && this._metrics.updateComponentMetric({ component: `kad-dht-${this._lan ? 'lan' : 'wan'}`, metric: METRIC_ROUTING_TABLE_SIZE, value: this.size });
	  }

	  /**
	   * Remove a given peer from the table.
	   *
	   * @param {PeerId} peer
	   */
	  async remove (peer) {
	    const id = await utils$n.convertPeerId(peer);

	    this.kb.remove(id);

	    this._metrics && this._metrics.updateComponentMetric({ component: `kad-dht-${this._lan ? 'lan' : 'wan'}`, metric: METRIC_ROUTING_TABLE_SIZE, value: this.size });
	  }
	}

	routingTable.RoutingTable = RoutingTable$1;

	var refresh = {};

	var require$$1$1 = /*@__PURE__*/getAugmentedNamespace(xor$2);

	var require$$1 = [
		77591,
		22417,
		43971,
		28421,
		740,
		29829,
		71467,
		228973,
		196661,
		78537,
		27689,
		36431,
		44415,
		14362,
		19456,
		106025,
		96308,
		2882,
		49509,
		21149,
		87173,
		131409,
		75844,
		23676,
		121838,
		30291,
		17492,
		2953,
		7564,
		110620,
		129477,
		127283,
		53113,
		72417,
		165166,
		109690,
		21200,
		102125,
		24049,
		71504,
		90342,
		25307,
		72039,
		26812,
		26715,
		32264,
		133800,
		71161,
		88956,
		171987,
		51779,
		24425,
		16671,
		30251,
		186294,
		247761,
		14202,
		2121,
		8465,
		35024,
		4876,
		85917,
		169730,
		3638,
		256836,
		96184,
		943,
		18678,
		6583,
		52907,
		35807,
		112254,
		214097,
		18796,
		11595,
		9243,
		23554,
		887,
		268203,
		382004,
		24590,
		111335,
		11625,
		16619,
		29039,
		102425,
		69006,
		97976,
		92362,
		32552,
		63717,
		41433,
		128974,
		137630,
		59943,
		10019,
		13986,
		35430,
		33665,
		108037,
		43799,
		43280,
		38195,
		29078,
		58629,
		18265,
		14425,
		46832,
		235538,
		40830,
		77881,
		110717,
		58937,
		3463,
		325358,
		51300,
		47623,
		117252,
		19007,
		10170,
		20540,
		91237,
		294813,
		4951,
		79841,
		56232,
		36270,
		128547,
		69209,
		66275,
		100156,
		32063,
		73531,
		34439,
		80937,
		28892,
		44466,
		88595,
		216307,
		32583,
		49620,
		16605,
		82127,
		45807,
		21630,
		78726,
		20235,
		40163,
		111007,
		96926,
		5567,
		72083,
		21665,
		58844,
		39419,
		179767,
		48328,
		42662,
		51550,
		5251,
		37811,
		49608,
		81056,
		50854,
		55513,
		20922,
		18891,
		197409,
		164656,
		32593,
		71449,
		220474,
		58919,
		85682,
		67854,
		13758,
		35066,
		3565,
		61905,
		214793,
		119572,
		141419,
		21504,
		10302,
		27354,
		67003,
		46131,
		32668,
		15165,
		64871,
		34450,
		17821,
		2757,
		11452,
		34189,
		5160,
		12257,
		85523,
		560,
		53385,
		65887,
		119549,
		135620,
		312353,
		115979,
		122356,
		10867,
		193231,
		124537,
		54783,
		90675,
		120791,
		4715,
		142253,
		50943,
		17271,
		43358,
		25331,
		4917,
		120566,
		34580,
		12878,
		33786,
		160528,
		32523,
		4869,
		301307,
		104817,
		81491,
		23276,
		8832,
		97911,
		31265,
		52065,
		7998,
		49622,
		9715,
		43998,
		34091,
		84587,
		20664,
		69041,
		29419,
		53205,
		10838,
		58288,
		116145,
		6185,
		5154,
		141795,
		35924,
		21307,
		144738,
		43730,
		12085,
		8279,
		10002,
		119,
		133779,
		199668,
		72938,
		31768,
		39176,
		67875,
		38453,
		9700,
		44144,
		4121,
		116048,
		41733,
		12868,
		82669,
		92308,
		128,
		34262,
		11332,
		7712,
		90764,
		36141,
		13553,
		71312,
		77470,
		117314,
		96549,
		49135,
		23602,
		54468,
		28605,
		6327,
		62308,
		17171,
		67531,
		21319,
		14105,
		894,
		107722,
		46157,
		8503,
		51069,
		100472,
		45138,
		15246,
		14577,
		35609,
		191464,
		1757,
		13364,
		161349,
		32067,
		91705,
		81144,
		52339,
		5408,
		91066,
		21983,
		14157,
		100545,
		4372,
		26630,
		129112,
		1423,
		29676,
		213626,
		4397,
		88436,
		99190,
		6877,
		49958,
		26122,
		114348,
		60661,
		29818,
		293118,
		50042,
		179738,
		16400,
		163423,
		89627,
		31040,
		43973,
		36638,
		45952,
		5153,
		1894,
		109322,
		1898,
		134021,
		12402,
		112077,
		68309,
		190269,
		69866,
		31938,
		107383,
		11522,
		105232,
		11248,
		14868,
		39852,
		71707,
		186525,
		16530,
		38162,
		106212,
		11700,
		5130,
		16608,
		26998,
		59586,
		108399,
		230033,
		43683,
		48135,
		82179,
		2073,
		5015,
		196684,
		189293,
		16378,
		23452,
		8301,
		35640,
		11632,
		214551,
		29240,
		57644,
		33137,
		91949,
		55157,
		52384,
		117313,
		5090,
		17717,
		89668,
		49363,
		82238,
		241035,
		66216,
		29066,
		184088,
		97206,
		62820,
		26595,
		4241,
		135635,
		173672,
		8202,
		459,
		71355,
		146294,
		29587,
		3008,
		135385,
		141203,
		14803,
		6634,
		45094,
		69362,
		50925,
		546,
		51884,
		62011,
		83296,
		234584,
		44515,
		56050,
		89476,
		87751,
		19373,
		12691,
		149923,
		19794,
		13833,
		35846,
		87557,
		58339,
		2884,
		19145,
		25647,
		12224,
		11024,
		77338,
		64608,
		122297,
		53025,
		7205,
		36189,
		36294,
		170779,
		21750,
		7739,
		173883,
		75192,
		35664,
		224240,
		113121,
		30181,
		26267,
		27036,
		117827,
		92015,
		106516,
		55628,
		203549,
		67949,
		60462,
		60844,
		35911,
		20457,
		1820,
		920,
		19773,
		8738,
		73173,
		181993,
		38521,
		98254,
		76257,
		46008,
		92796,
		5384,
		26868,
		151566,
		22124,
		2411,
		15919,
		186872,
		180021,
		28099,
		152961,
		78811,
		80237,
		62352,
		102653,
		74259,
		184890,
		16792,
		123702,
		224945,
		29940,
		19512,
		75283,
		14059,
		112691,
		92811,
		233329,
		20411,
		138569,
		53341,
		109802,
		50600,
		134528,
		66747,
		5529,
		166531,
		31578,
		64732,
		67189,
		1596,
		126357,
		967,
		167999,
		206598,
		109752,
		119431,
		207825,
		78791,
		91938,
		10301,
		27311,
		24233,
		252343,
		28831,
		32812,
		66002,
		112267,
		90895,
		8786,
		8095,
		16824,
		22866,
		21813,
		60507,
		174833,
		19549,
		130985,
		117051,
		52110,
		6938,
		81923,
		123864,
		38061,
		919,
		18680,
		53534,
		46739,
		112893,
		161529,
		85429,
		26761,
		11900,
		81121,
		91968,
		15390,
		217947,
		56524,
		1713,
		6654,
		37089,
		85630,
		138866,
		61850,
		16491,
		75577,
		16884,
		98296,
		73523,
		6140,
		44645,
		6062,
		36366,
		29844,
		57946,
		37932,
		42472,
		5266,
		20834,
		19309,
		33753,
		127182,
		134259,
		35810,
		41805,
		45878,
		312001,
		14881,
		47757,
		49251,
		120050,
		44252,
		3708,
		25856,
		107864,
		120347,
		1228,
		36550,
		41682,
		34496,
		47025,
		8393,
		173365,
		246526,
		12894,
		161607,
		35670,
		90785,
		126572,
		2095,
		124731,
		157033,
		58694,
		554,
		12786,
		9642,
		4817,
		16136,
		47864,
		174698,
		66992,
		4639,
		69284,
		10625,
		40710,
		27763,
		51738,
		30404,
		264105,
		137904,
		109882,
		52487,
		42824,
		57514,
		2740,
		10479,
		146799,
		107390,
		16586,
		88038,
		174951,
		9410,
		16185,
		44158,
		5568,
		40658,
		46108,
		12763,
		97385,
		26175,
		108859,
		664,
		230732,
		67470,
		46663,
		14395,
		50750,
		141320,
		93140,
		15361,
		47997,
		55784,
		6791,
		307840,
		118569,
		107326,
		18056,
		58281,
		260415,
		54691,
		8790,
		73332,
		45633,
		7511,
		45674,
		143373,
		14031,
		11799,
		94491,
		35646,
		96544,
		14560,
		26049,
		32983,
		25791,
		83814,
		42094,
		231370,
		63955,
		139212,
		2359,
		169908,
		3108,
		183486,
		105867,
		28197,
		32941,
		124968,
		26402,
		88267,
		149768,
		23053,
		3078,
		19091,
		52924,
		25383,
		19209,
		111548,
		97361,
		3959,
		24880,
		235061,
		9099,
		24921,
		161254,
		151405,
		20508,
		7159,
		34381,
		20133,
		11434,
		74036,
		19974,
		34769,
		36585,
		1076,
		22454,
		17354,
		38727,
		235160,
		111547,
		96454,
		117448,
		156940,
		91330,
		37299,
		7310,
		26915,
		117060,
		51369,
		22620,
		61861,
		322264,
		106850,
		111694,
		15091,
		2624,
		40345,
		300446,
		177064,
		1707,
		27389,
		54792,
		327783,
		132669,
		183543,
		59003,
		17744,
		20603,
		151134,
		106923,
		53084,
		71803,
		279424,
		319816,
		11579,
		21946,
		16728,
		38274,
		72711,
		5085,
		83391,
		88646,
		40159,
		25027,
		34680,
		10752,
		12988,
		54126,
		30365,
		18338,
		100445,
		230674,
		44874,
		84974,
		143877,
		123253,
		139372,
		28082,
		91477,
		144002,
		13096,
		219729,
		46016,
		50029,
		42377,
		14601,
		6660,
		58244,
		58978,
		23918,
		88206,
		113611,
		64452,
		17541,
		41032,
		10942,
		12021,
		49189,
		10978,
		40175,
		37156,
		10947,
		71709,
		106894,
		112538,
		57007,
		137486,
		150608,
		152719,
		40615,
		7746,
		279716,
		13101,
		19524,
		28708,
		40578,
		72320,
		1096,
		182051,
		94527,
		51275,
		22833,
		45164,
		81917,
		77519,
		48508,
		5421,
		140302,
		37845,
		149830,
		5587,
		27579,
		5357,
		428725,
		248187,
		6326,
		206760,
		39814,
		32585,
		89923,
		44341,
		288753,
		284443,
		96368,
		31201,
		94189,
		119504,
		20359,
		52073,
		103216,
		179,
		27934,
		32801,
		96035,
		34111,
		34309,
		101326,
		18198,
		20704,
		210266,
		37643,
		27880,
		141873,
		106000,
		19414,
		56614,
		167714,
		66483,
		107885,
		86602,
		4379,
		20796,
		75467,
		4987,
		5017,
		118857,
		26003,
		34308,
		114428,
		29198,
		6686,
		29697,
		73632,
		3739,
		69795,
		16798,
		41504,
		7207,
		30722,
		21436,
		36735,
		28067,
		28545,
		3239,
		11221,
		36031,
		41889,
		100010,
		19247,
		317673,
		29495,
		174554,
		6424,
		129725,
		53845,
		94986,
		7955,
		59676,
		2604,
		191497,
		19735,
		102214,
		62954,
		23844,
		11872,
		179525,
		261436,
		34492,
		428,
		78404,
		142035,
		16747,
		17246,
		27578,
		37021,
		33672,
		57944,
		26056,
		135760,
		2369,
		61674,
		122066,
		31327,
		19374,
		157065,
		40553,
		130982,
		69619,
		71290,
		38855,
		72100,
		92903,
		95940,
		51422,
		165999,
		65713,
		57873,
		50726,
		7288,
		20272,
		2081,
		42326,
		22624,
		81120,
		57914,
		79352,
		19447,
		1684,
		72302,
		11774,
		302559,
		161481,
		96396,
		13692,
		414988,
		3721,
		79066,
		56627,
		46883,
		21150,
		11747,
		12184,
		5856,
		113458,
		176117,
		84416,
		52079,
		27933,
		3354,
		59765,
		141359,
		2212,
		216309,
		2555,
		23458,
		196722,
		142463,
		45701,
		44548,
		28798,
		19418,
		215,
		29916,
		9396,
		10574,
		114226,
		84475,
		13520,
		18694,
		34056,
		4524,
		90302,
		62930,
		13539,
		19407,
		77209,
		7728,
		38088,
		9535,
		2263,
		23875,
		183945,
		17750,
		26274,
		67172,
		10585,
		28042,
		22199,
		7478,
		51331,
		66030,
		26774,
		192929,
		31434,
		25850,
		50197,
		52926,
		178158,
		4679,
		181256,
		70184,
		229600,
		9959,
		105594,
		72158,
		73974,
		2726,
		35085,
		78087,
		23284,
		35568,
		51713,
		155676,
		5401,
		27254,
		11966,
		17569,
		223253,
		71993,
		103357,
		111477,
		55722,
		30504,
		26034,
		46774,
		35392,
		36285,
		214814,
		41143,
		163465,
		1051,
		16094,
		81044,
		6636,
		76489,
		179102,
		20712,
		39178,
		35683,
		125177,
		54219,
		30617,
		52994,
		25324,
		50123,
		2543,
		87529,
		58995,
		10688,
		125199,
		12388,
		60158,
		125481,
		131646,
		7642,
		133350,
		65874,
		3438,
		97277,
		101450,
		10075,
		56344,
		116821,
		50778,
		60547,
		98016,
		106135,
		13859,
		14255,
		16300,
		77373,
		173521,
		8285,
		45932,
		37426,
		4054,
		114295,
		55947,
		7703,
		39114,
		52,
		51119,
		128135,
		19714,
		60715,
		9554,
		50492,
		88180,
		2823,
		118271,
		52993,
		122625,
		97919,
		23859,
		37895,
		25040,
		33614,
		32102,
		20431,
		3577,
		9275,
		15686,
		43031,
		157741,
		110358,
		1884,
		40291,
		125391,
		13736,
		5008,
		64881,
		87336,
		77381,
		70711,
		43032,
		49155,
		118587,
		70494,
		4318,
		10168,
		30126,
		12580,
		10524,
		280104,
		104001,
		145413,
		2862,
		84140,
		6603,
		106005,
		13566,
		12780,
		11251,
		42830,
		571,
		179910,
		82443,
		13146,
		469,
		42714,
		32591,
		265217,
		424024,
		92553,
		54721,
		134100,
		6007,
		15242,
		114681,
		59030,
		16718,
		85465,
		200214,
		85982,
		55174,
		165013,
		23493,
		56964,
		82529,
		109150,
		32706,
		27568,
		82442,
		5350,
		14976,
		13165,
		44890,
		60021,
		21343,
		33978,
		17264,
		4655,
		22328,
		27819,
		75730,
		16567,
		55483,
		14510,
		17926,
		45827,
		150609,
		3704,
		7385,
		272531,
		161543,
		76904,
		122163,
		52405,
		2039,
		19165,
		41623,
		14423,
		228354,
		3369,
		176360,
		85491,
		7122,
		35789,
		303724,
		4465,
		13628,
		2233,
		55311,
		118771,
		20713,
		10006,
		221519,
		45115,
		71021,
		35650,
		29775,
		7337,
		10864,
		20665,
		21142,
		1746,
		15080,
		1624,
		32449,
		10905,
		105743,
		229797,
		7701,
		3940,
		22997,
		178467,
		57208,
		389057,
		39683,
		59403,
		63344,
		63125,
		54847,
		69691,
		18336,
		56448,
		3362,
		37202,
		18282,
		29648,
		138224,
		35867,
		10495,
		5911,
		28814,
		26653,
		31514,
		176702,
		26550,
		45621,
		11734,
		4525,
		40543,
		73944,
		121080,
		27858,
		155561,
		14887,
		44670,
		30742,
		8796,
		107455,
		113472,
		56369,
		75581,
		183777,
		240095,
		133699,
		153299,
		8768,
		160464,
		26058,
		49078,
		103971,
		21875,
		71486,
		44888,
		17156,
		9678,
		89541,
		123019,
		102337,
		3972,
		83930,
		21245,
		87852,
		109660,
		287918,
		183019,
		686,
		10100,
		39177,
		283941,
		11274,
		24736,
		26793,
		26214,
		25995,
		77011,
		141580,
		4070,
		23742,
		46285,
		46632,
		30700,
		26669,
		19056,
		35951,
		115575,
		174034,
		56097,
		35463,
		87425,
		24575,
		44245,
		38701,
		82317,
		85922,
		281616,
		100333,
		147697,
		61503,
		7730,
		84330,
		8530,
		59917,
		61597,
		17173,
		9092,
		32658,
		90288,
		193136,
		39023,
		20381,
		56654,
		31132,
		7779,
		1919,
		1375,
		117128,
		30819,
		11169,
		40938,
		23935,
		115201,
		101155,
		151034,
		4835,
		11231,
		74550,
		89388,
		59951,
		91704,
		107312,
		167882,
		115062,
		12732,
		72738,
		88703,
		464019,
		158267,
		57995,
		60496,
		737,
		14371,
		123867,
		4174,
		243339,
		159946,
		7568,
		16025,
		134556,
		110916,
		38103,
		191,
		80226,
		88794,
		29688,
		27230,
		10454,
		76308,
		57647,
		77409,
		113483,
		66864,
		14745,
		19808,
		12023,
		46583,
		84805,
		16015,
		17102,
		2231,
		20611,
		3547,
		95740,
		250131,
		34559,
		108894,
		8498,
		15853,
		159169,
		148920,
		20942,
		2813,
		93160,
		45188,
		210613,
		45531,
		52587,
		149062,
		39782,
		28194,
		57849,
		60965,
		84954,
		89766,
		84453,
		100927,
		16501,
		27658,
		165311,
		103841,
		54192,
		207341,
		19558,
		20084,
		319622,
		5672,
		205467,
		98462,
		61849,
		36279,
		13609,
		147177,
		24726,
		165015,
		209489,
		59591,
		31157,
		6551,
		117580,
		75060,
		141146,
		277310,
		21072,
		22023,
		106474,
		63041,
		137443,
		122965,
		68371,
		5383,
		42146,
		98961,
		113467,
		30863,
		23794,
		4843,
		99630,
		30392,
		82679,
		13699,
		241612,
		33601,
		93146,
		24319,
		18643,
		32155,
		95669,
		40440,
		15333,
		34089,
		67799,
		142144,
		58245,
		38633,
		114531,
		117400,
		77861,
		188726,
		5507,
		2568,
		8853,
		10987,
		107222,
		2663,
		2421,
		11530,
		13345,
		30075,
		41785,
		118661,
		104786,
		17459,
		12490,
		16281,
		71936,
		193555,
		17431,
		5944,
		71758,
		26485,
		77317,
		20803,
		367167,
		158,
		7362,
		93430,
		11735,
		172445,
		46002,
		11532,
		54482,
		930,
		62911,
		2235,
		23004,
		179236,
		4764,
		101859,
		208113,
		22477,
		55163,
		95579,
		14098,
		67320,
		162556,
		90709,
		156949,
		3826,
		57492,
		4025,
		34092,
		87442,
		104565,
		6718,
		186015,
		28214,
		14209,
		10039,
		107186,
		233912,
		58877,
		81637,
		55265,
		39828,
		6194,
		145813,
		50831,
		105849,
		4974,
		88319,
		122296,
		10272,
		197216,
		95714,
		51540,
		72418,
		23324,
		91555,
		8743,
		140452,
		250249,
		51666,
		34124,
		7229,
		38592,
		129641,
		78169,
		174242,
		22464,
		149964,
		51450,
		14034,
		10026,
		95376,
		26190,
		120062,
		14401,
		8700,
		265,
		31386,
		143573,
		7203,
		229889,
		61567,
		4227,
		140981,
		2466,
		72052,
		10787,
		10062,
		30958,
		6099,
		38471,
		30103,
		23202,
		208101,
		70847,
		467,
		58934,
		32271,
		32984,
		36637,
		24107,
		30771,
		17109,
		73353,
		13650,
		2098,
		157040,
		67366,
		66904,
		106018,
		265380,
		107238,
		18535,
		44025,
		32681,
		144983,
		62505,
		91295,
		56120,
		3082,
		77508,
		10322,
		63023,
		36700,
		81885,
		224127,
		16721,
		45023,
		239261,
		111272,
		13852,
		7866,
		149243,
		204199,
		32309,
		22084,
		42029,
		38316,
		126644,
		104973,
		14406,
		43454,
		67322,
		61310,
		15789,
		40285,
		24026,
		181047,
		6301,
		70927,
		23319,
		115823,
		27248,
		66693,
		115875,
		278566,
		63007,
		146844,
		56841,
		59007,
		87368,
		180001,
		22370,
		42114,
		80605,
		12022,
		10374,
		308,
		25079,
		14689,
		12618,
		63368,
		7936,
		264973,
		212291,
		136713,
		95999,
		105801,
		18965,
		32075,
		48700,
		52230,
		35119,
		96912,
		32992,
		8586,
		16606,
		101333,
		101812,
		14969,
		39930,
		759,
		193090,
		27387,
		42914,
		12937,
		5058,
		62646,
		64528,
		38624,
		25743,
		37502,
		3716,
		4435,
		30352,
		178687,
		26461,
		132611,
		42002,
		138442,
		35833,
		59582,
		16345,
		8048,
		60319,
		49349,
		309,
		47800,
		49739,
		90482,
		26405,
		34470,
		63786,
		32479,
		85028,
		39866,
		47846,
		11649,
		23934,
		29466,
		2816,
		42864,
		31828,
		7410,
		74885,
		49632,
		47629,
		111801,
		90749,
		19536,
		18767,
		105764,
		59606,
		21223,
		10746,
		76298,
		22220,
		39408,
		7190,
		79654,
		64856,
		11602,
		82156,
		272765,
		17079,
		70089,
		245473,
		51813,
		184407,
		384678,
		1576,
		122249,
		5064,
		27481,
		6188,
		25790,
		74361,
		27541,
		318284,
		45430,
		31488,
		620,
		93579,
		45723,
		192118,
		22670,
		51913,
		4162,
		70244,
		35966,
		26397,
		16199,
		50899,
		209613,
		121702,
		287507,
		2993,
		36101,
		132229,
		67345,
		33062,
		76295,
		118628,
		78705,
		52316,
		34375,
		107083,
		107454,
		44863,
		127561,
		33964,
		3073,
		154010,
		190914,
		55967,
		39074,
		6272,
		31047,
		5550,
		41123,
		26154,
		98638,
		47110,
		19998,
		148091,
		50229,
		31329,
		59900,
		195442,
		19106,
		61347,
		73497,
		70015,
		682,
		45850,
		25776,
		38022,
		148951,
		6288,
		37411,
		232526,
		109277,
		27286,
		32342,
		9262,
		5220,
		16651,
		23175,
		46740,
		129438,
		78614,
		121925,
		66914,
		88710,
		127952,
		5563,
		21500,
		34521,
		10739,
		14863,
		191006,
		62956,
		17359,
		16749,
		67027,
		56284,
		69134,
		43301,
		35039,
		58883,
		54466,
		60823,
		404451,
		75743,
		59856,
		86979,
		7923,
		34273,
		83785,
		32142,
		7693,
		268986,
		197428,
		282681,
		17049,
		22346,
		22990,
		92245,
		107180,
		3357,
		37104,
		96724,
		49153,
		7683,
		31197,
		43267,
		82231,
		164276,
		23696,
		20848,
		188364,
		22309,
		24821,
		158707,
		1018,
		22514,
		70922,
		27792,
		45589,
		59709,
		10765,
		736,
		35218,
		63479,
		51987,
		24275,
		63588,
		55361,
		92929,
		81964,
		4658,
		20122,
		12330,
		44058,
		13065,
		311456,
		72224,
		8337,
		211229,
		38979,
		22590,
		138478,
		52757,
		32595,
		133600,
		8838,
		31549,
		94412,
		43391,
		90056,
		1585,
		94802,
		127271,
		6223,
		31889,
		137038,
		132910,
		2165,
		57616,
		230152,
		6080,
		10748,
		36737,
		74579,
		134062,
		50525,
		180532,
		119270,
		34556,
		76155,
		82394,
		52595,
		29258,
		31435,
		87820,
		67996,
		26943,
		183878,
		38007,
		2410,
		13526,
		180297,
		69856,
		3503,
		187396,
		167700,
		7838,
		16701,
		9199,
		56267,
		3661,
		37407,
		65994,
		23767,
		5708,
		62508,
		221700,
		67088,
		86978,
		46776,
		84434,
		32088,
		5612,
		9149,
		88244,
		21685,
		95151,
		46750,
		189612,
		2979,
		506311,
		2594,
		3628,
		40074,
		105039,
		78243,
		28523,
		6651,
		38058,
		71999,
		30992,
		12764,
		68261,
		108991,
		6165,
		26450,
		61961,
		13400,
		22426,
		7490,
		60890,
		109623,
		2070,
		12958,
		50355,
		67979,
		257096,
		7213,
		42578,
		52121,
		35716,
		65461,
		7516,
		124758,
		39268,
		302,
		64712,
		14977,
		1467,
		219452,
		2840,
		34229,
		11121,
		21602,
		19270,
		63574,
		8024,
		1532,
		17331,
		79839,
		78885,
		52029,
		180767,
		57957,
		6069,
		91265,
		61380,
		55767,
		8927,
		32881,
		287603,
		22149,
		35029,
		68876,
		6428,
		199567,
		46926,
		13412,
		104132,
		21434,
		366616,
		45060,
		110046,
		81924,
		128910,
		45886,
		52821,
		130416,
		29416,
		77342,
		21762,
		67329,
		121432,
		79924,
		11724,
		38625,
		81006,
		102033,
		28338,
		13326,
		3250,
		82056,
		82526,
		38212,
		21112,
		12382,
		111495,
		3263,
		7414,
		86274,
		93490,
		40844,
		30224,
		45212,
		24019,
		48411,
		71367,
		24941,
		76729,
		57776,
		3769,
		38114,
		202019,
		197745,
		31953,
		237533,
		33270,
		201580,
		255648,
		100798,
		44741,
		32241,
		98468,
		106931,
		10085,
		15090,
		170358,
		33154,
		66787,
		18819,
		69760,
		25061,
		234005,
		82660,
		6295,
		131975,
		16874,
		9076,
		4094,
		25005,
		17740,
		40908,
		19533,
		220019,
		44330,
		99792,
		50040,
		19619,
		13950,
		55228,
		24423,
		31253,
		95308,
		103177,
		184795,
		28590,
		82285,
		5059,
		3210,
		75525,
		49894,
		70007,
		56178,
		10580,
		36051,
		139681,
		21617,
		98736,
		3555,
		106306,
		164189,
		37352,
		63915,
		47824,
		24883,
		145530,
		61904,
		28444,
		11483,
		19837,
		145446,
		30420,
		112972,
		85939,
		11835,
		191233,
		2262,
		20705,
		58630,
		1753,
		148334,
		1197,
		144714,
		6887,
		11223,
		107667,
		60879,
		77914,
		4151,
		57417,
		81594,
		96681,
		169430,
		1784,
		20444,
		95138,
		254041,
		27038,
		596,
		7117,
		72808,
		13759,
		3353,
		126776,
		21074,
		55322,
		27081,
		36942,
		39547,
		139830,
		179275,
		4453,
		713,
		8722,
		71399,
		19204,
		25785,
		22794,
		23923,
		104114,
		11291,
		25458,
		102309,
		88396,
		75288,
		230440,
		206396,
		104551,
		58447,
		130857,
		37247,
		94734,
		31548,
		176529,
		226077,
		65159,
		20104,
		10096,
		66881,
		94191,
		237909,
		27109,
		37404,
		1520,
		27421,
		25220,
		113003,
		23423,
		24884,
		50585,
		6286,
		231877,
		150800,
		11789,
		3226,
		90004,
		60642,
		5053,
		202400,
		61442,
		132531,
		175329,
		57138,
		30116,
		103847,
		9973,
		75367,
		16452,
		32360,
		59119,
		21246,
		10191,
		164804,
		23305,
		61051,
		37348,
		154530,
		13214,
		5468,
		50403,
		66754,
		130976,
		50559,
		80515,
		14436,
		155492,
		84017,
		5472,
		43107,
		41240,
		2890,
		90431,
		70188,
		382,
		76234,
		48040,
		50211,
		281038,
		237007,
		32115,
		142178,
		1536,
		22761,
		96429,
		1811,
		31243,
		1679,
		49143,
		55209,
		17402,
		235054,
		61494,
		7462,
		77030,
		34925,
		87609,
		78002,
		9499,
		9027,
		73289,
		201078,
		101379,
		63544,
		27666,
		5469,
		10642,
		30029,
		49816,
		132979,
		95620,
		58086,
		351930,
		116300,
		2110,
		2043,
		30845,
		6154,
		11279,
		16727,
		4122,
		2277,
		27281,
		4971,
		3650,
		39060,
		61970,
		65951,
		39674,
		75686,
		38151,
		11370,
		130809,
		177895,
		32665,
		63725,
		122267,
		7857,
		39618,
		118483,
		44792,
		157755,
		178624,
		136994,
		24260,
		41308,
		22471,
		12404,
		21707,
		12486,
		30473,
		52781,
		50246,
		20247,
		39065,
		909,
		56825,
		103158,
		128603,
		31542,
		1089,
		41935,
		32744,
		12428,
		37963,
		84420,
		33134,
		72921,
		208449,
		42622,
		168151,
		127335,
		147107,
		46699,
		38216,
		12591,
		94342,
		85814,
		31423,
		24944,
		2605,
		87542,
		67473,
		192551,
		4496,
		56321,
		91819,
		17630,
		6300,
		256183,
		114569,
		202090,
		33209,
		35289,
		34897,
		24967,
		40520,
		43470,
		5344,
		10199,
		34810,
		14283,
		10381,
		10017,
		62923,
		49924,
		23233,
		64539,
		13051,
		35686,
		19698,
		11570,
		135555,
		120868,
		44924,
		87065,
		52318,
		52335,
		47586,
		140906,
		245885,
		109834,
		78668,
		9065,
		46990,
		25258,
		72022,
		61243,
		40838,
		4545,
		146387,
		10537,
		11557,
		17470,
		36930,
		68104,
		46711,
		24264,
		79401,
		81043,
		18225,
		120488,
		24746,
		84338,
		81652,
		28266,
		13776,
		21878,
		46973,
		1047,
		230465,
		73357,
		95777,
		24973,
		210160,
		62210,
		58404,
		110633,
		169651,
		6937,
		41870,
		9909,
		26822,
		191062,
		76553,
		27519,
		96256,
		239070,
		2478,
		205678,
		67955,
		58532,
		20601,
		50120,
		19148,
		78501,
		195724,
		110740,
		8249,
		109665,
		27446,
		30568,
		57631,
		31425,
		49752,
		32820,
		65504,
		50079,
		3663,
		102256,
		219898,
		23849,
		211315,
		14645,
		4359,
		91767,
		9528,
		12449,
		49366,
		7941,
		49763,
		107848,
		8930,
		27086,
		50686,
		9744,
		10447,
		81935,
		39513,
		46514,
		1670,
		29229,
		6172,
		22312,
		137280,
		97759,
		9806,
		14445,
		22976,
		56458,
		73391,
		34983,
		93760,
		174219,
		52573,
		33149,
		59747,
		2429,
		136277,
		75123,
		165263,
		91040,
		7446,
		57632,
		48633,
		97140,
		246081,
		84766,
		151684,
		79918,
		93268,
		120346,
		54059,
		54875,
		77858,
		32996,
		103590,
		45276,
		11968,
		19600,
		25849,
		17159,
		132907,
		42828,
		16817,
		4913,
		99462,
		103303,
		27395,
		5737,
		74184,
		20749,
		21160,
		14377,
		77062,
		131403,
		158735,
		10999,
		27799,
		77785,
		9320,
		34366,
		51593,
		61070,
		33746,
		47048,
		29268,
		36675,
		30262,
		53297,
		9832,
		82000,
		20188,
		122292,
		39917,
		7331,
		18160,
		68301,
		185935,
		134830,
		15031,
		4935,
		10004,
		165845,
		185534,
		46923,
		30109,
		44134,
		122631,
		18874,
		22903,
		112790,
		26561,
		18549,
		348902,
		82871,
		140345,
		255565,
		135390,
		63556,
		103747,
		145055,
		179600,
		145662,
		296111,
		61661,
		211987,
		23952,
		52342,
		126343,
		48450,
		32919,
		44277,
		82185,
		9591,
		62139,
		205363,
		376969,
		394874,
		108461,
		18040,
		120885,
		14798,
		39863,
		16571,
		16794,
		58271,
		81025,
		55206,
		14640,
		118656,
		6361,
		44092,
		85970,
		6262,
		153863,
		108244,
		180200,
		72264,
		79947,
		38044,
		10050,
		5735,
		61221,
		80712,
		5471,
		115689,
		11391,
		11661,
		184257,
		20010,
		60116,
		30320,
		19327,
		134598,
		45455,
		27542,
		18004,
		125092,
		452272,
		1549,
		91523,
		46567,
		180063,
		156026,
		2608,
		11174,
		58848,
		37788,
		65907,
		80194,
		30490,
		5786,
		40775,
		119519,
		106241,
		11323,
		156297,
		8425,
		61495,
		2617,
		29675,
		2425,
		59886,
		112582,
		49142,
		59618,
		4863,
		50597,
		86710,
		50650,
		168632,
		27693,
		85641,
		83643,
		18993,
		25768,
		84284,
		28090,
		93592,
		36627,
		312804,
		43381,
		9887,
		9402,
		100931,
		97165,
		3311,
		173330,
		66805,
		28935,
		4963,
		184460,
		3201,
		78102,
		19126,
		21607,
		37496,
		24938,
		22615,
		16153,
		32862,
		134792,
		153318,
		61120,
		6067,
		2812,
		12826,
		12792,
		23825,
		37559,
		64662,
		202250,
		102694,
		155488,
		85881,
		149193,
		46233,
		65383,
		15521,
		106982,
		11358,
		176786,
		25752,
		39717,
		34208,
		24510,
		32464,
		77742,
		39371,
		72028,
		138229,
		60688,
		71386,
		102834,
		132477,
		2208,
		11548,
		63670,
		271279,
		28351,
		30338,
		38620,
		32491,
		99845,
		143885,
		152266,
		13252,
		2825,
		178663,
		108097,
		1775,
		78201,
		14897,
		113573,
		163346,
		62292,
		171129,
		22183,
		96598,
		38733,
		64971,
		166776,
		117445,
		9968,
		146393,
		44677,
		74867,
		20908,
		97328,
		12761,
		25656,
		26785,
		9148,
		112344,
		26115,
		99176,
		110121,
		22437,
		49547,
		6180,
		79320,
		5835,
		31392,
		43328,
		33377,
		75870,
		119860,
		69497,
		80273,
		7325,
		155219,
		43167,
		111173,
		28347,
		20222,
		3763,
		71752,
		55041,
		47252,
		14618,
		28088,
		15012,
		97805,
		194698,
		54636,
		2036,
		41349,
		6173,
		96604,
		61530,
		51859,
		43782,
		13361,
		24334,
		22668,
		24792,
		7070,
		23441,
		16789,
		3209,
		36211,
		208475,
		26242,
		32880,
		122181,
		182407,
		21444,
		31060,
		88459,
		29929,
		77907,
		12716,
		10934,
		97005,
		20599,
		31690,
		8403,
		58445,
		30303,
		22700,
		10336,
		86731,
		103115,
		337709,
		72556,
		46788,
		112566,
		47684,
		67089,
		53548,
		36874,
		56487,
		41387,
		125985,
		26893,
		40071,
		106683,
		73712,
		18787,
		40105,
		72992,
		67246,
		137276,
		50802,
		36790,
		70328,
		138827,
		22466,
		39263,
		183295,
		29858,
		50975,
		9322,
		57397,
		10654,
		24364,
		30383,
		55799,
		41600,
		23584,
		127295,
		296610,
		129078,
		143558,
		244131,
		86397,
		36049,
		1085,
		80677,
		3820,
		108139,
		5476,
		34767,
		24683,
		7758,
		13060,
		7239,
		131671,
		250593,
		59556,
		103392,
		29810,
		4188,
		252323,
		39404,
		116877,
		7651,
		43600,
		40338,
		13554,
		157253,
		39196,
		25978,
		144387,
		61211,
		234,
		50104,
		6129,
		10449,
		93777,
		9240,
		356378,
		274148,
		4439,
		72970,
		3724,
		147770,
		78680,
		62570,
		115877,
		40027,
		40547,
		36817,
		224392,
		64609,
		34795,
		165027,
		67440,
		2477,
		37206,
		23431,
		50754,
		164797,
		46018,
		94995,
		170982,
		27051,
		7957,
		22767,
		3674,
		27900,
		56419,
		18930,
		60701,
		41302,
		2692,
		84749,
		339721,
		61996,
		111094,
		80221,
		50129,
		1045,
		8153,
		62945,
		19202,
		8250,
		37208,
		37418,
		32560,
		79477,
		41106,
		88569,
		33963,
		36693,
		5892,
		30570,
		1581,
		66471,
		49647,
		11922,
		160717,
		29442,
		5643,
		114865,
		82962,
		95982,
		132098,
		22633,
		22838,
		94726,
		54556,
		28566,
		205039,
		162340,
		33216,
		16849,
		35847,
		221339,
		94851,
		26533,
		71469,
		1805,
		3804,
		12935,
		45483,
		71020,
		36310,
		65381,
		192960,
		34240,
		35165,
		59773,
		1248,
		46954,
		155332,
		96864,
		4246,
		388800,
		16129,
		57133,
		74592,
		44807,
		442014,
		38203,
		42574,
		80818,
		91592,
		26377,
		36424,
		65760,
		977,
		77387,
		22628,
		147610,
		28018,
		30561,
		98454,
		6969,
		119628,
		63648,
		18170,
		36854,
		26601,
		64018,
		22027,
		37279,
		51395,
		152934,
		21153,
		9430,
		58760,
		194742,
		5330,
		55115,
		34158,
		28917,
		174111,
		13171,
		122326,
		1526,
		43896,
		66094,
		25325,
		4234,
		148354,
		11450,
		275,
		18999,
		112191,
		44365,
		22723,
		68409,
		8733,
		57746,
		96565,
		75007,
		14196,
		108844,
		29475,
		88599,
		177563,
		100792,
		106156,
		86323,
		93726,
		14248,
		135341,
		194131,
		40126,
		47099,
		14779,
		8272,
		39597,
		95983,
		171398,
		65882,
		28052,
		10393,
		47213,
		40689,
		22120,
		72212,
		106829,
		34964,
		109146,
		753,
		648,
		21660,
		30047,
		17527,
		181025,
		5619,
		145357,
		4085,
		216883,
		9359,
		186951,
		24779,
		53931,
		24545,
		36197,
		223296,
		62628,
		168101,
		4243,
		107313,
		30321,
		26642,
		13049,
		51059,
		31027,
		107912,
		807,
		73550,
		26551,
		84369,
		122422,
		165872,
		49754,
		74213,
		234264,
		33151,
		52014,
		33100,
		87183,
		22365,
		52500,
		40013,
		23302,
		5652,
		72723,
		21404,
		26107,
		48434,
		587,
		94049,
		168493,
		96418,
		32871,
		70860,
		31709,
		25128,
		443,
		71597,
		166253,
		15670,
		70994,
		26341,
		133675,
		28280,
		75491,
		54756,
		47955,
		56028,
		26182,
		11952,
		113272,
		472197,
		64640,
		110753,
		17919,
		337,
		50642,
		22576,
		142,
		87371,
		53391,
		93210,
		126694,
		15285,
		19642,
		85667,
		14148,
		1506,
		42092,
		52962,
		33243,
		11970,
		20734,
		135843,
		57044,
		58880,
		13002,
		219134,
		22876,
		64754,
		232519,
		4257,
		43120,
		321573,
		24799,
		64526,
		124728,
		52579,
		81472,
		70831,
		276848,
		17403,
		74359,
		23021,
		182101,
		74597,
		23744,
		148267,
		12055,
		7976,
		5349,
		11772,
		67540,
		167347,
		65318,
		18720,
		127832,
		108238,
		22828,
		90233,
		9987,
		259080,
		118185,
		73209,
		79270,
		13775,
		90100,
		137742,
		90799,
		70569,
		15699,
		19961,
		9087,
		67475,
		57872,
		39731,
		8810,
		134897,
		131868,
		146849,
		19898,
		3334,
		2281,
		167061,
		91073,
		60356,
		467742,
		74712,
		188,
		53179,
		137679,
		92769,
		29241,
		9537,
		132595,
		80119,
		1041,
		88962,
		5976,
		40171,
		44911,
		102859,
		139059,
		104558,
		98987,
		47761,
		19272,
		71472,
		113864,
		175377,
		73338,
		10857,
		23402,
		23758,
		1591,
		139864,
		5644,
		4076,
		118760,
		16427,
		134198,
		18853,
		20291,
		100849,
		37423,
		22038,
		36677,
		19071,
		195521,
		57445,
		11069,
		31869,
		55718,
		66882,
		148490,
		44,
		41296,
		75242,
		49704,
		166810,
		9906,
		20943,
		122258,
		49112,
		105667,
		15969,
		10344,
		6408,
		187694,
		21399,
		72742,
		58970,
		14867,
		14376,
		81889,
		41856,
		23225,
		15042,
		56993,
		16074,
		131389,
		74276,
		72407,
		53875,
		383108,
		53597,
		37363,
		68993,
		44854,
		122548,
		430927,
		198279,
		38430,
		80409,
		12245,
		2981,
		628,
		2818,
		17760,
		37437,
		238229,
		7968,
		46892,
		2200,
		3730,
		34190,
		65983,
		37959,
		112291,
		87850,
		70827,
		6522,
		20750,
		73913,
		111621,
		41652,
		19587,
		2780,
		58668,
		25916,
		85259,
		18200,
		168962,
		95781,
		42445,
		102050,
		7776,
		57662,
		103313,
		47742,
		96358,
		41964,
		66174,
		100396,
		29069,
		204735,
		19679,
		27978,
		7479,
		40264,
		22534,
		61183,
		36081,
		107436,
		58223,
		14680,
		23002,
		101311,
		24716,
		124108,
		12908,
		5646,
		31750,
		40380,
		14215,
		232799,
		102772,
		14122,
		96775,
		61398,
		50917,
		12096,
		149880,
		67833,
		598749,
		124194,
		155871,
		49216,
		790,
		14677,
		65319,
		56917,
		7440,
		145744,
		95701,
		12206,
		49405,
		129269,
		76199,
		45732,
		9767,
		11058,
		9047,
		210885,
		11051,
		7392,
		26307,
		2130,
		8132,
		147526,
		20802,
		232698,
		115660,
		50060,
		59789,
		57344,
		107623,
		80343,
		112676,
		23291,
		9866,
		160971,
		34032,
		118291,
		15719,
		59730,
		164911,
		28975,
		2659,
		58046,
		78480,
		21854,
		66209,
		53863,
		109085,
		116045,
		29021,
		46481,
		107552,
		22130,
		18764,
		70254,
		31272,
		11300,
		52460,
		43933,
		84738,
		20721,
		53869,
		190840,
		79673,
		105300,
		7561,
		321817,
		66924,
		13940,
		33281,
		101046,
		183181,
		32176,
		71878,
		5678,
		62924,
		79535,
		56646,
		40303,
		19559,
		27703,
		93042,
		73368,
		42187,
		3670,
		37376,
		46440,
		7023,
		36816,
		109628,
		20680,
		5940,
		276440,
		275233,
		170848,
		112093,
		136996,
		14984,
		20226,
		111441,
		77693,
		112960,
		48577,
		39370,
		55707,
		50314,
		123404,
		26570,
		54281,
		61372,
		123391,
		4857,
		35928,
		246740,
		132507,
		106646,
		44241,
		7196,
		92258,
		9825,
		37688,
		51197,
		303141,
		5590,
		15476,
		132986,
		10955,
		85782,
		34486,
		26696,
		7991,
		28813,
		18858,
		39546,
		11703,
		11365,
		38185,
		5716,
		93555,
		11925,
		40121,
		60002,
		6985,
		10976,
		171384,
		3887,
		43394,
		13337,
		56346,
		6381,
		252336,
		39573,
		75042,
		53711,
		1028,
		31781,
		44295,
		95925,
		131713,
		7214,
		68125,
		43571,
		70954,
		213234,
		1628,
		8760,
		13391,
		65485,
		17320,
		56038,
		1710,
		25248,
		60803,
		57399,
		19839,
		3870,
		326,
		281556,
		50945,
		72400,
		21460,
		316244,
		75619,
		56246,
		98775,
		481,
		13513,
		55765,
		50427,
		7388,
		123519,
		32929,
		57908,
		27124,
		61316,
		101097,
		57467,
		30228,
		48792,
		10788,
		20402,
		37318,
		50526,
		155730,
		34456,
		158065,
		145305,
		17832,
		43733,
		64052,
		4506,
		35072,
		205355,
		177028,
		184004,
		187081,
		68616,
		35938,
		83703,
		10367,
		36892,
		93186,
		260137,
		51934,
		89970,
		4985,
		23445,
		26755,
		21558,
		7948,
		78741,
		23376,
		124405,
		85594,
		68596,
		57536,
		49351,
		12619,
		56593,
		132668,
		99924,
		109728,
		71844,
		71935,
		196018,
		65464,
		17617,
		14987,
		89701,
		143773,
		33997,
		8687,
		22701,
		33258,
		2914,
		4436,
		72108,
		85610,
		9671,
		49067,
		2327,
		82988,
		1361,
		1672,
		44033,
		35777,
		30269,
		24057,
		10605,
		82236,
		616,
		15793,
		13919,
		47249,
		112086,
		116698,
		9484,
		80207,
		90574,
		33304,
		68624,
		93127,
		56101,
		42210,
		160929,
		4827,
		38995,
		38095,
		4701,
		125119,
		5027,
		33680,
		9236,
		231236,
		14135,
		87837,
		23318,
		70261,
		78893,
		30151,
		81482,
		14332,
		1084,
		74256,
		27532,
		46644,
		79185,
		3148,
		62615,
		6981,
		55672,
		31668,
		36825,
		1849,
		14536,
		37446,
		14738,
		23779,
		43058,
		162749,
		72199,
		1168,
		21346,
		5592,
		85932,
		85302,
		9668,
		18351,
		57135,
		150360,
		2080,
		228015,
		77953,
		34670,
		119302,
		151751,
		31009,
		106725,
		84265,
		45214,
		59289,
		74178,
		113071,
		263206,
		111009,
		4021,
		44449,
		188119,
		192629,
		123592,
		392506,
		292847,
		114487,
		12831,
		205858,
		9852,
		20780,
		79648,
		75767,
		357014,
		97721,
		18166,
		21005,
		67950,
		33226,
		204009,
		16536,
		2987,
		11335,
		66717,
		144910,
		47950,
		17262,
		55060,
		15063,
		2934,
		51038,
		26775,
		178497,
		66008,
		3427,
		49433,
		128592,
		20036,
		157553,
		63861,
		3089,
		23015,
		51210,
		28696,
		35933,
		49942,
		71135,
		231518,
		99620,
		17248,
		21835,
		176536,
		20676,
		16944,
		38700,
		165831,
		233253,
		295625,
		36723,
		13023,
		52745,
		10907,
		19423,
		67972,
		125868,
		95473,
		82875,
		1183,
		108455,
		52685,
		33417,
		64095,
		21433,
		52438,
		33191,
		127809,
		44505,
		211823,
		7810,
		2752,
		95548,
		162031,
		7185,
		91196,
		47563,
		61721,
		33359,
		17897,
		23682,
		42806,
		178101,
		22874,
		49707,
		199897,
		75419,
		82456,
		8618,
		11171,
		79712,
		116847,
		18783,
		44190,
		46564,
		5346,
		59046,
		95032,
		7893,
		14916,
		3214,
		26800,
		24172,
		121453,
		34362,
		10250,
		17408,
		18888,
		4840,
		68696,
		22831,
		13162,
		36005,
		32512,
		14800,
		62357,
		41723,
		45046,
		27247,
		37486,
		5372,
		2564,
		34261,
		298500,
		66509,
		133920,
		89138,
		31305,
		117697,
		19097,
		108304,
		81386,
		84106,
		23802,
		46411,
		63304,
		946,
		51417,
		41777,
		41041,
		19501,
		115864,
		60743,
		294354,
		37955,
		94165,
		18116,
		1156,
		17937,
		20645,
		57114,
		90804,
		58042,
		48643,
		92288,
		9861,
		2557,
		88546,
		61333,
		101008,
		12853,
		5148,
		87856,
		4152,
		144503,
		73841,
		18718,
		9789,
		147565,
		10846,
		42085,
		12789,
		30223,
		8993,
		56352,
		67203,
		2448,
		28215,
		6052,
		23540,
		126319,
		75933,
		36689,
		80235,
		23231,
		23561,
		21383,
		38800,
		77548,
		102798,
		21234,
		31468,
		158608,
		46188,
		63960,
		191679,
		8051,
		67014,
		11185,
		170078,
		42186,
		28827,
		34777,
		41930,
		212079,
		12421,
		34750,
		24111,
		110344,
		73918,
		45171,
		70826,
		141949,
		40063,
		23979,
		24254,
		37309,
		26724,
		27179,
		24718,
		83648,
		54938,
		14591,
		17425,
		29525,
		102675,
		48975,
		48654,
		12316,
		8929,
		60640,
		41709,
		50168,
		63264,
		89812,
		50716,
		48632,
		38755,
		138583,
		160123,
		55579,
		71829,
		24230,
		233277,
		46322,
		39650,
		166388,
		34718,
		24108,
		98252,
		7031,
		106695,
		62498,
		18258,
		35062,
		217827,
		78731,
		34824,
		33354,
		19520,
		60852,
		2432,
		60224,
		8587,
		2836,
		62955,
		702,
		20227,
		42285,
		40560,
		95592,
		62486,
		11094,
		53035,
		143291,
		18842,
		46177,
		77994,
		1770,
		9657,
		107422,
		172915,
		32655,
		128716,
		25886,
		25164,
		156740,
		119928,
		165875,
		85817,
		11007,
		89110,
		33956,
		12652,
		65156,
		180266,
		8494,
		36889,
		19958,
		20955,
		96,
		1264,
		118288,
		135769,
		44754,
		86671,
		5632,
		19026,
		168220,
		289120,
		33569,
		93821,
		66144,
		70635,
		7687,
		5642,
		2714,
		55445,
		56636,
		71545,
		184182,
		93133,
		7332,
		37389,
		12643,
		52315,
		22729,
		11014,
		158742,
		17050,
		152889,
		50178,
		34601,
		41945,
		52136,
		9948,
		26914,
		63548,
		95721,
		115951,
		40759,
		8960,
		158258,
		38938,
		49232,
		48325,
		42234,
		81523,
		253019,
		66128,
		40978,
		20048,
		238048,
		38760,
		62928,
		122560,
		118532,
		43687,
		137472,
		163689,
		26680,
		9878,
		17448,
		51035,
		16211,
		60834,
		36749,
		29178,
		14241,
		59868,
		150086,
		2305,
		26477,
		42422,
		34342,
		165341,
		83279,
		33894,
		14257,
		29928,
		12743,
		13957,
		125571,
		89134,
		66712,
		10952,
		16507,
		147839,
		30146,
		7249,
		16565,
		45399,
		39874,
		114565,
		215780,
		31990,
		230881,
		171477,
		102,
		196546,
		44538,
		10880,
		84948,
		281705,
		86651,
		10617,
		31395,
		2342,
		453658,
		43569,
		60561,
		132901,
		21845,
		17727,
		58556,
		258242,
		22262,
		58728,
		4008,
		77997,
		11806,
		37431,
		30599,
		81375,
		109137,
		185787,
		114085,
		217292,
		97453,
		169085,
		30593,
		60212,
		11544,
		102056,
		65580,
		2384,
		91655,
		4855,
		95725,
		7295,
		157994,
		16228,
		20669,
		53276,
		141590,
		105246,
		17334,
		25440,
		76067,
		17967,
		39321,
		38911,
		11362,
		28559,
		63807,
		21627,
		26468,
		85816,
		40120,
		1025,
		15234,
		58319,
		69516,
		66512,
		124548,
		75845,
		78873,
		22137,
		46681,
		51242,
		85683,
		32909,
		76747,
		35555,
		43396,
		101465,
		1765,
		73094,
		1077,
		2962,
		39028,
		66777,
		57831,
		42048,
		15828,
		13962,
		36041,
		63657,
		52412,
		5242,
		58846,
		2141,
		5506,
		219012,
		134451,
		3936,
		182230,
		17558,
		17153,
		152237,
		22621,
		49377,
		170216,
		35257,
		68233,
		65374,
		6510,
		11126,
		212151,
		7184,
		2480,
		22517,
		3437,
		33073,
		30156,
		16557,
		3768,
		55067,
		86829,
		91000,
		12350,
		148650,
		66017,
		79424,
		70885,
		49066,
		28250,
		21369,
		51213,
		34533,
		11510,
		3258,
		18176,
		18465,
		84413,
		6315,
		36411,
		163765,
		4346,
		356,
		107618,
		598,
		13727,
		285026,
		162695,
		8749,
		14583,
		7132,
		63521,
		184253,
		32378,
		25991,
		5604,
		30961,
		53675,
		4874,
		84693,
		5086,
		34811,
		26978,
		56564,
		7904,
		33519,
		51221,
		113942,
		69253,
		6664,
		125563,
		22055,
		220680,
		102008,
		742,
		51930,
		19494,
		176108,
		44424,
		35123,
		13025,
		75685,
		11759,
		74335,
		22250,
		181453,
		131147,
		16984,
		132115,
		154311,
		11991,
		76452,
		52609,
		85351,
		196,
		30969,
		9198,
		74919,
		2529,
		56838,
		71779,
		29187,
		116304,
		3504,
		62330,
		41190,
		86153,
		28393,
		254926,
		104228,
		105189,
		13264,
		84359,
		3574,
		12415,
		8534,
		57147,
		10175,
		188174,
		59504,
		60932,
		66318,
		16407,
		107921,
		17638,
		99103,
		49278,
		28403,
		39786,
		145865,
		8462,
		3558,
		43406,
		142271,
		29139,
		21989,
		36552,
		93955,
		72365,
		7176,
		13556,
		106185,
		37957,
		321774,
		17782,
		129017,
		51154,
		27938,
		24952,
		1935,
		39366,
		2791,
		33489,
		41582,
		56078,
		24558,
		9311,
		5449,
		218786,
		27808,
		190429,
		68013,
		36020,
		86003,
		29735,
		3404,
		87348,
		119357,
		115714,
		2324,
		86796,
		81973,
		40992,
		43376,
		93621,
		28784,
		16808,
		36367,
		2517,
		2909,
		191926,
		24978,
		55303,
		53308,
		205724,
		60068,
		3098,
		21375,
		64784,
		23949,
		26579,
		63121,
		12319,
		80145,
		39967,
		97861,
		6757,
		70143,
		67642,
		37082,
		34698,
		69140,
		122883,
		46151,
		62187,
		80934,
		429,
		19437,
		135071,
		137885,
		222647,
		13331,
		154065,
		327,
		61778,
		74257,
		40116,
		37493,
		14855,
		85079,
		237641,
		42342,
		102164,
		199965,
		71204,
		4662,
		29368,
		5042,
		113914,
		122214,
		8955,
		13149,
		102503,
		43173,
		5659,
		163787,
		69003,
		307084,
		63392,
		171080,
		21390,
		81918,
		86666,
		36622,
		24126,
		28887,
		5736,
		28054,
		207170,
		163428,
		79891,
		346467,
		95363,
		38980,
		111806,
		80828,
		9200,
		19288,
		294896,
		114468,
		87405,
		111715,
		141705,
		7015,
		72754,
		68463,
		48738,
		243147,
		33397,
		101210,
		37051,
		98801,
		82847,
		20397,
		4940,
		185559,
		18716,
		54718,
		83491,
		11725,
		40803,
		1128,
		12128,
		23060,
		5174,
		7745,
		67007,
		46701,
		1571,
		27807,
		180186,
		256996,
		18975,
		16837,
		7877,
		212758,
		250379,
		15440,
		87954,
		57755,
		24719,
		124057,
		83461,
		258,
		50864,
		8874,
		29038,
		71289,
		31627,
		15429,
		9005,
		4061,
		113851,
		107716,
		82819,
		13651,
		79656,
		117851,
		17539,
		111446,
		12938,
		39724,
		190787,
		4352,
		15402,
		21070,
		62708,
		8539,
		23777,
		73853,
		13552,
		38810,
		86117,
		16285,
		56400,
		1718,
		75342,
		142863,
		29033,
		378,
		110113,
		180321,
		32586,
		23606,
		26393,
		160984,
		207987,
		23783,
		8406,
		16904,
		24596,
		47274,
		11693,
		46539,
		60524,
		78595,
		48423,
		31718,
		20170,
		9009,
		146268,
		15183,
		191060,
		172765,
		1349,
		138436,
		37365,
		10970,
		40509,
		225817,
		20021,
		70394,
		152138,
		21541,
		66559,
		66544,
		89352,
		2725,
		17258,
		91345,
		7313,
		3815,
		115868,
		8660,
		40362,
		4071,
		103524,
		39388,
		118275,
		21950,
		6549,
		38226,
		32754,
		209574,
		29201,
		43495,
		18028,
		20296,
		40597,
		18370,
		47520,
		202450,
		24134,
		2219,
		8195,
		69545,
		38041,
		136934,
		46374,
		19041,
		159811,
		84865,
		58620,
		846,
		98749,
		13569,
		30714,
		97246,
		32186,
		4479,
		27355,
		92973,
		35214,
		151491,
		75963,
		37631,
		1561,
		27200,
		238083,
		23182,
		60756,
		12291,
		25766,
		39355,
		102333,
		87362,
		65741,
		59906,
		19538,
		201575,
		48772,
		102938,
		24438,
		292580,
		39964,
		66366,
		9004,
		61379,
		50548,
		37622,
		38732,
		28379,
		68180,
		76622,
		17488,
		69849,
		5963,
		7219,
		48143,
		43413,
		55358,
		540,
		58691,
		29506,
		19245,
		52193,
		48621,
		5518,
		13048,
		118625,
		44755,
		191081,
		42061,
		89197,
		2259,
		60665,
		66994,
		71210,
		51232,
		3585,
		142096,
		55024,
		7892,
		8345,
		58653,
		463307,
		65658,
		64319,
		137941,
		136323,
		53499,
		12746,
		43492,
		6978,
		95163,
		29925,
		60175,
		5128,
		7352,
		41463,
		184756,
		121146,
		20473,
		18426,
		4598,
		5309,
		54580,
		14277,
		121151,
		10691,
		56711,
		43880,
		63409,
		76682,
		11830,
		172218,
		264898,
		32632,
		66536,
		81062,
		31649,
		25788,
		92774,
		60222,
		11100,
		63159,
		9432,
		224657,
		25240,
		53613,
		152,
		138620,
		163829,
		2397,
		85345,
		12501,
		37507,
		64932,
		38575,
		43522,
		65789,
		80198,
		78796,
		35226,
		3851,
		108891,
		73311,
		3060,
		28391,
		93671,
		39663,
		46142,
		30982,
		66041,
		37281,
		68157,
		26553,
		71872,
		81142,
		211527,
		39747,
		118119,
		22695,
		2859,
		11066,
		20232,
		168911,
		7933,
		197005,
		17066,
		111071,
		44434,
		133994,
		120798,
		12766,
		227798,
		45756,
		132852,
		29917,
		36076,
		55352,
		65281,
		129800,
		41958,
		18944,
		84678,
		18580,
		168093,
		132621,
		39997,
		54092,
		27740,
		32354,
		3770,
		114118,
		103242,
		43918,
		15899,
		18574,
		145944,
		3190,
		123469,
		219903,
		24169,
		100571,
		62403,
		16776,
		92779,
		14535,
		17168,
		16475,
		14304,
		37231,
		1712,
		28218,
		242754,
		61688,
		28980,
		1318,
		51359,
		222657,
		99200,
		67989,
		31772,
		23932,
		35351,
		201251,
		49041,
		27306,
		19128,
		40135,
		3986,
		77333,
		19649,
		120683,
		151927,
		21081,
		7076,
		78375,
		77501,
		101599,
		8011,
		89585,
		96715,
		58179,
		5378,
		102138,
		106793,
		26051,
		217276,
		4197,
		16297,
		27014,
		46721,
		13322,
		22806,
		5278,
		29629,
		70632,
		9647,
		71519,
		58818,
		40603,
		128530,
		8903,
		36770,
		56900,
		31483,
		26935,
		43845,
		34265,
		34920,
		87658,
		6114,
		84767,
		64250,
		47318,
		50720,
		19264,
		162514,
		33357,
		13117,
		6705,
		46696,
		75032,
		71054,
		87004,
		42035,
		69138,
		11903,
		99854,
		102328,
		19611,
		34525,
		69312,
		6431,
		49842,
		101600,
		133178,
		108751,
		41829,
		89939,
		225664,
		48916,
		99556,
		9195,
		130387,
		5960,
		36857,
		116724,
		53518,
		94002,
		39077,
		53996,
		6945,
		22261,
		64291,
		8314,
		152785,
		57588,
		16522,
		9091,
		5048,
		87671,
		35441,
		39509,
		1945,
		12423,
		158923,
		178413,
		37549,
		14095,
		1475,
		73188,
		62878,
		4819,
		24012,
		68534,
		42606,
		4010,
		120809,
		57497,
		59564,
		101758,
		103718,
		32701,
		80116,
		12345,
		95834,
		46918,
		21468,
		53213,
		15665,
		31200,
		3867,
		5140,
		96013,
		250744,
		21016,
		10069,
		13968,
		35449,
		180829,
		27683,
		39704,
		59956,
		22893,
		3115,
		26293,
		32785,
		75934,
		62445,
		141162,
		62720,
		2018,
		83638,
		19949,
		114012,
		95006,
		3330,
		99829,
		130935,
		309272,
		9565,
		55874,
		121727,
		37017,
		23586,
		319858,
		40970,
		27602,
		8625,
		112329,
		61060,
		100088,
		118525,
		25922,
		16232,
		1907,
		60671,
		51583,
		44553,
		80993,
		5262,
		94679,
		8676,
		940,
		20736,
		11823,
		3020,
		16476,
		12340,
		152600,
		97416,
		3703,
		25744,
		66826,
		16245,
		16876,
		46446,
		84798,
		74227,
		176020,
		45192,
		61955,
		75496,
		23946,
		23626,
		40372,
		26036,
		6149,
		11822,
		30582,
		16541,
		41914,
		82385,
		232823,
		40921,
		80773,
		14930,
		3631,
		7517,
		39619,
		4348,
		36180,
		126106,
		138939,
		62611,
		1477,
		113512,
		47321,
		25052,
		14546,
		118881,
		29060,
		23589,
		128322,
		36795,
		18401,
		137921,
		104699,
		267929,
		36194,
		172791,
		18113,
		4766,
		188215,
		30083,
		332586,
		94089,
		5805,
		77909,
		22194,
		68234,
		154976,
		43220,
		40660,
		70001,
		184893,
		138095,
		11128,
		103010,
		22663,
		5108,
		212615,
		8485,
		5565,
		49222,
		54614,
		26530,
		42639,
		16319,
		55062,
		152662,
		105595,
		21114,
		22216,
		10294,
		68158,
		10436,
		86950,
		7206,
		62115,
		3977,
		3657,
		59874,
		456,
		118617,
		18156,
		106663,
		112229,
		80992,
		17442,
		8217,
		55551,
		5133,
		34344,
		251927,
		51153,
		39364,
		201321,
		7816,
		66803,
		23057,
		156724,
		145664,
		14276,
		95705,
		979,
		2796,
		6875,
		13429,
		212525,
		50602,
		26276,
		28284,
		3424,
		19465,
		52397,
		46963,
		31420,
		51399,
		206476,
		92317,
		48851,
		637,
		100820,
		83349,
		10317,
		60227,
		21972,
		6908,
		282439,
		32857,
		224767,
		95629,
		83882,
		42106,
		87338,
		69757,
		29840,
		68709,
		37665,
		45244,
		114577,
		49188,
		175943,
		54009,
		186746,
		106158,
		70168,
		3358,
		234002,
		50555,
		9221,
		129338,
		9562,
		20118,
		32923,
		78479,
		118280,
		65752,
		4977,
		10474,
		102174,
		60947,
		129006,
		10570,
		83451,
		8598,
		8078,
		159367,
		123785,
		80438,
		16742,
		5905,
		5281,
		181513,
		42402,
		6977,
		163136,
		93179,
		42191,
		14968,
		50421,
		112401,
		105440,
		33456,
		57347,
		121611,
		4221,
		94954,
		36517,
		24046,
		27796,
		6255,
		33394,
		72990,
		135408,
		116627,
		1233,
		57874,
		25654,
		95419,
		68156,
		401399,
		313338,
		55208,
		45573,
		93124,
		119251,
		47200,
		38196,
		11909,
		130667,
		45391,
		73904,
		64964,
		167846,
		4137,
		115606,
		52036,
		62214,
		7969,
		160925,
		7187,
		1132,
		134835,
		40309,
		73195,
		64494,
		80472,
		444841,
		61111,
		26500,
		45323,
		40743,
		53625,
		52797,
		22659,
		15631,
		29739,
		36706,
		28841,
		39147,
		102836,
		26794,
		10536,
		14845,
		87305,
		45874,
		12241,
		127587,
		83833,
		57183,
		79722,
		30844,
		41304,
		84655,
		20825,
		92500,
		3722,
		25655,
		27811,
		10157,
		81634,
		31362,
		34088,
		92487,
		70123,
		22190,
		185100,
		72658,
		139035,
		192523,
		88241,
		2078,
		230490,
		44528,
		85638,
		100198,
		22088,
		29982,
		291233,
		241062,
		13865,
		4445,
		137791,
		37835,
		107218,
		31726,
		19718,
		38234,
		72528,
		23046,
		19177,
		66695,
		5109,
		17251,
		28077,
		5617,
		21554,
		47839,
		72425,
		133825,
		1486,
		73065,
		181275,
		141508,
		21768,
		62971,
		63082,
		2512,
		34200,
		9904,
		120309,
		6392,
		91243,
		68416,
		268253,
		41199,
		116757,
		138551,
		185526,
		41246,
		28986,
		4093,
		19057,
		17295,
		4148,
		245766,
		122360,
		35356,
		112075,
		20301,
		75441,
		10998,
		7977,
		19769,
		62922,
		937,
		63547,
		100196,
		26427,
		157820,
		20983,
		236696,
		22935,
		8140,
		90315,
		156004,
		47204,
		140973,
		7726,
		45097,
		52725,
		22636,
		23436,
		257282,
		105247,
		522,
		88389,
		216031,
		202204,
		46812,
		211666,
		19693,
		68828,
		81691,
		45925,
		11256,
		30292,
		372,
		5236,
		167826,
		88328,
		232776,
		151611,
		5360,
		82104,
		18841,
		80393,
		25465,
		18285,
		20320,
		72377,
		31730,
		33160,
		45803,
		38715,
		27705,
		37379,
		24163,
		18360,
		103586,
		4015,
		32305,
		269494,
		91252,
		20080,
		36567,
		54650,
		7797,
		57073,
		12650,
		31164,
		42209,
		6375,
		261663,
		105528,
		81661,
		106002,
		2800,
		5375,
		17247,
		43151,
		4442,
		15727,
		194619,
		100855,
		144898,
		62320,
		78465,
		39929,
		16454,
		1967,
		28311,
		61363,
		17219,
		9395,
		8745,
		121445,
		76939,
		80385,
		162380,
		22009,
		54191,
		44248,
		16299,
		122830,
		48151,
		74429,
		78291,
		64755,
		14238,
		44966,
		2511,
		17712,
		67954,
		93583,
		829,
		105899,
		49935,
		84750,
		11591,
		33185,
		85447,
		42717,
		27409,
		208542,
		28965,
		62052,
		52525,
		5597,
		25694,
		65594,
		16343,
		63224,
		276188,
		12475,
		9331,
		127507,
		38522,
		57287,
		24128,
		133161,
		79723,
		105548,
		133695,
		48917,
		27558,
		43278,
		46520,
		13778,
		141954,
		110785,
		83366,
		17715,
		46317,
		105763,
		66298,
		147013,
		41086,
		94180,
		16478,
		220447,
		44611,
		730,
		19722,
		78975,
		117889,
		125643,
		26254,
		16574,
		18480,
		65006,
		15806,
		38549,
		246418,
		46052,
		36056,
		8440,
		34984,
		30170,
		3163,
		59800,
		4458,
		115442,
		4283,
		41970,
		33507,
		104078,
		1653,
		22,
		121158,
		276486,
		3655,
		6338,
		24048,
		133421,
		23641,
		2161,
		24422,
		36006,
		8086,
		10675,
		181474,
		12307,
		29514,
		59143,
		14729,
		52509,
		87128,
		122470,
		19446,
		80852,
		33314,
		24573,
		119864,
		14237,
		9652,
		57779,
		6612,
		51851,
		15284,
		98871,
		90581,
		124466,
		156831,
		21190,
		22015,
		71380,
		161906,
		87247,
		69201,
		18392,
		17908,
		108470,
		72962,
		40719,
		14338,
		17911,
		95260,
		43339,
		20610,
		78916,
		20710,
		72451,
		11315,
		31448,
		17263,
		58853,
		178878,
		48111,
		116002,
		45497,
		80506,
		82605,
		85880,
		36300,
		121755,
		25215,
		36118,
		301929,
		88728,
		405223,
		276136,
		553,
		34704,
		212438,
		49970,
		78329,
		922,
		20711,
		25036,
		257130,
		38295,
		145369,
		18128,
		15385,
		30829,
		55656,
		48345,
		8012,
		3561,
		28004,
		122041,
		192900,
		58338,
		112508,
		41085,
		29976,
		87040,
		47117,
		23905,
		4336,
		92061,
		138880,
		97407,
		42083,
		172121,
		6256,
		25192,
		172671,
		5,
		93568,
		1420,
		12677,
		31605,
		56743,
		40620,
		6015,
		78415,
		231077,
		31298,
		80026,
		13902,
		19048,
		24924,
		170586,
		32955,
		176119,
		87859,
		36731,
		6773,
		27711,
		24658,
		26475,
		115216,
		133207,
		93250,
		95820,
		88522,
		8317,
		5714,
		124047,
		55219,
		86860,
		19677,
		23961,
		22928,
		162209,
		8904,
		225992,
		359835,
		56084,
		96201,
		29392,
		96558,
		86071,
		93643,
		55114,
		13347,
		8183,
		95129,
		82012,
		2017,
		123336,
		34219,
		115554,
		157159,
		47747,
		101684,
		41008,
		18735,
		193781,
		104151,
		226906,
		7552,
		179874,
		124113,
		31159,
		21162,
		44010,
		14771,
		51268,
		166128,
		31382,
		73124,
		77438,
		92830,
		205709,
		12113,
		1292,
		38937,
		13114,
		1334,
		2118,
		15597,
		69581,
		14449,
		21934,
		76618,
		48728,
		67038,
		14967,
		51495,
		24243,
		87736,
		147249,
		26720,
		11119,
		46063,
		43749,
		5843,
		44147,
		152629,
		133428,
		65703,
		14269,
		45604,
		57982,
		28672,
		55616,
		45957,
		8438,
		95433,
		37698,
		220862,
		132034,
		39456,
		61870,
		4161,
		26501,
		73560,
		56418,
		9845,
		4654,
		20916,
		10456,
		88920,
		119358,
		9015,
		65931,
		96507,
		48029,
		38534,
		21676,
		109081,
		43078,
		34943,
		25089,
		6131,
		28766,
		23665,
		5477,
		10255,
		16695,
		67,
		45778,
		42443,
		42770,
		29534,
		23733,
		100513,
		62617,
		42630,
		48746,
		14191,
		43753,
		50295,
		26007,
		8792,
		57243,
		43119,
		54725,
		164253,
		58250,
		112304,
		131796,
		25165,
		4651,
		3188,
		24831,
		47748,
		3705,
		19540,
		13211,
		102095,
		5593,
		18699,
		23666,
		32005,
		117571,
		33541,
		60584,
		74573,
		86311,
		99443,
		25172,
		27222,
		168938,
		7143,
		11853,
		53560,
		18834,
		19960,
		86522,
		28217,
		53266,
		117700,
		72989,
		34323,
		18721,
		66450,
		34346,
		74056,
		47217,
		202002,
		46269,
		9429,
		68582,
		75458,
		37823,
		82843,
		96652,
		32549,
		145144,
		27958,
		19820,
		158086,
		31955,
		201406,
		135379,
		31207,
		192545,
		12950,
		51704,
		9094,
		248263,
		76147,
		64028,
		110009,
		79407,
		89345,
		99284,
		223492,
		47966,
		26848,
		15359,
		201137,
		2861,
		110507,
		71231,
		72297,
		31851,
		118777,
		71039,
		151051,
		240855,
		16333,
		50766,
		14727,
		7939,
		4149,
		80908,
		418780,
		88378,
		59276,
		1327,
		7284,
		38576,
		79814,
		65820,
		42199,
		84860,
		49574,
		62596,
		12396,
		70598,
		40117,
		8648,
		7994,
		16836,
		7630,
		14047,
		359699,
		106878,
		525,
		29037,
		28064,
		13380,
		11675,
		50669,
		74216,
		103539,
		180314,
		27449,
		56299,
		172344,
		19274,
		7301,
		246099,
		32043,
		19422,
		36506,
		129317,
		6806,
		30140,
		4614,
		46639,
		66926,
		932,
		86600,
		6322,
		27847,
		233103,
		10541,
		39025,
		34887,
		3517,
		12972,
		26220,
		2031,
		66561,
		115015,
		48658,
		47596,
		12714,
		33845,
		3893,
		16165,
		35237,
		89983,
		14769,
		11962,
		147224,
		47018,
		29977,
		27979,
		5552,
		82338,
		86023,
		131368,
		1218,
		24853,
		237840,
		132193,
		15455,
		40873,
		3668,
		65351,
		53388,
		15229,
		59889,
		272245,
		47934,
		11858,
		34347,
		18038,
		90853,
		86981,
		300602,
		19343,
		114181,
		29362,
		84921,
		6095,
		106059,
		79472,
		38015,
		1206,
		48741,
		6208,
		80000,
		21916,
		17423,
		6002,
		108083,
		24479,
		34931,
		56661,
		9511,
		26995,
		100694,
		163853,
		35997,
		81254,
		58321,
		18919,
		171890,
		86877,
		91341,
		74503,
		70477,
		53412,
		7027,
		59281,
		39892,
		131302,
		5864,
		15947,
		61301,
		67466,
		162369,
		47956,
		27874,
		35624,
		282324,
		21270,
		111847,
		102548,
		41482,
		30955,
		116737,
		28264,
		8592,
		55458,
		22301,
		75090,
		29821,
		30697,
		51709,
		3041,
		19208,
		8038,
		24634,
		30467,
		87509,
		126428,
		19389,
		18814,
		152686,
		20701,
		83474,
		45832,
		80891,
		105808,
		11378,
		153223,
		120770,
		98186,
		150633,
		49838,
		9141,
		12755,
		30962,
		5260,
		74490,
		21256,
		31678,
		65062,
		33326,
		289838,
		187831,
		20595,
		89768,
		2805,
		58535,
		10844,
		70085,
		12090,
		2451,
		138068,
		98544,
		24461,
		4511,
		6754,
		41684,
		28203,
		3383,
		65355,
		82833,
		30161,
		83924,
		234361,
		128424,
		28921,
		222594,
		33975,
		125491,
		34069,
		11508,
		67464,
		144226,
		41850,
		98703,
		34371,
		7901,
		21254,
		38398,
		65651,
		23549,
		53883,
		213340,
		123269,
		12028,
		71764,
		177701,
		28758,
		2623,
		68395,
		11549,
		15232,
		68603,
		9660,
		63116,
		36079,
		57093,
		31198,
		20475,
		48467,
		89984,
		35619,
		186847,
		107469,
		31389,
		43631,
		73867,
		41949,
		68841,
		114250,
		1605,
		30564,
		63403,
		17588,
		27680,
		99533,
		12641,
		70325,
		50428,
		73426,
		78379,
		11855,
		91651,
		72081,
		91720,
		60198,
		15743,
		12065,
		83398,
		140046,
		6761,
		46598,
		45900,
		5068,
		886,
		62448,
		148968,
		37347,
		19405,
		9680,
		15819,
		43496,
		63370,
		75667,
		163700,
		37639,
		3633,
		22774,
		34341,
		183131,
		134335,
		37200,
		23915,
		7054,
		14194,
		12970,
		26438,
		13350,
		285521,
		25594,
		8219,
		104410,
		91039,
		168804,
		138480,
		149734,
		15907,
		33818,
		61132,
		60082,
		4622,
		110187,
		56736,
		13551,
		73571,
		3945,
		73463,
		65498,
		17758,
		263266,
		17593,
		2710,
		27585,
		54469,
		38200,
		45367,
		63754,
		28881,
		3473,
		12791,
		98287,
		31895,
		65787,
		4463,
		94536,
		24951,
		36332,
		59901,
		28803,
		52130,
		86403,
		7668,
		181822,
		74831,
		18977,
		9850,
		177206,
		145485,
		109798,
		7292,
		31421,
		26280,
		77211,
		58511,
		12507,
		127004,
		11113,
		147,
		8729,
		56208,
		43066,
		79926,
		129937,
		31345,
		83947,
		39915,
		46146,
		98763,
		42566,
		1337,
		13192,
		18323,
		105163,
		80570,
		117753,
		16555,
		72883,
		11077,
		159438,
		40764,
		70933,
		83329,
		26066,
		12276,
		72059,
		21655,
		173836,
		126713,
		69454,
		153482,
		91585,
		70644,
		102558,
		110483,
		6764,
		127864,
		190133,
		3961,
		101798,
		20945,
		71138,
		82402,
		90884,
		69669,
		44753,
		923,
		16939,
		59700,
		164258,
		25969,
		27082,
		31399,
		43846,
		6306,
		246093,
		51342,
		6153,
		151581,
		202801,
		182731,
		56475,
		162188,
		89426,
		141356,
		14355,
		121815,
		27536,
		28023,
		65257,
		77523,
		106668,
		127314,
		24947,
		12790,
		38796,
		169698,
		23555,
		10725,
		44573,
		183083,
		42088,
		62716,
		43265,
		105958,
		32050,
		44067,
		50118,
		1668,
		3874,
		6243,
		318411,
		16599,
		1691,
		94999,
		52378,
		28671,
		216728,
		123258,
		2059,
		34969,
		69225,
		5913,
		136280,
		171443,
		141515,
		91662,
		22175,
		135282,
		80020,
		92270,
		1663,
		4808,
		4482,
		3495,
		34691,
		5226,
		109830,
		108512,
		17342,
		107488,
		11606,
		123190,
		100247,
		29666,
		146527,
		113014,
		15794,
		30894,
		13224,
		39585,
		243192,
		22351,
		9903,
		7836,
		47699,
		11078,
		25468,
		122291,
		48821,
		26780,
		122679,
		75521,
		81450,
		630,
		4895,
		92900,
		55074,
		74293,
		17441,
		3563,
		111657,
		103102,
		51613,
		12318,
		52370,
		36191,
		68245,
		34269,
		40445,
		41354,
		122901,
		168604,
		182500,
		62012,
		42557,
		11259,
		24428,
		115113,
		86345,
		12362,
		3909,
		78430,
		86852,
		134602,
		20459,
		47853,
		93879,
		22577,
		7659,
		3688,
		38555,
		13349,
		17381,
		56715,
		91639,
		12493,
		10895,
		92438,
		3142,
		37057,
		28928,
		2004,
		36427,
		32268,
		34222,
		209974,
		10432,
		67436,
		41989,
		173518,
		107930,
		27079,
		62729,
		30908,
		55558,
		5828,
		45031,
		14902,
		53546,
		8204,
		144263,
		60255,
		14520,
		88212,
		86582,
		109589,
		69356,
		8064,
		47449,
		8505,
		66558,
		16886,
		4844,
		52817,
		111260,
		215129,
		12941,
		91118,
		650,
		20770,
		6273,
		73089,
		40618,
		62790,
		2873,
		35002,
		14023,
		97208,
		19386,
		102646,
		36993,
		143736,
		135457,
		35385,
		113601,
		17893,
		32627,
		84439,
		100619,
		56016,
		6581,
		57264,
		172160,
		45452,
		111710,
		203627,
		70131,
		24100,
		322787,
		1996,
		35665,
		70078,
		22358,
		90922,
		83658,
		4097,
		63200,
		58499,
		14542,
		99153,
		52159,
		6615,
		12414,
		63415,
		31986,
		16823,
		1579,
		65405,
		137809,
		8841,
		16898,
		48082,
		259,
		33014,
		42375,
		12260,
		179850,
		73667,
		91389,
		98882,
		29532,
		17311,
		326251,
		41092,
		5928,
		20742,
		44964,
		48019,
		43505,
		9317,
		49265,
		6643,
		192712,
		48424,
		163487,
		19861,
		20113,
		70848,
		31928,
		105333,
		23685,
		78563,
		14638,
		54755,
		7158,
		24142,
		44018,
		20774,
		125255,
		20331,
		24280,
		10163,
		1285,
		2336,
		39851,
		4299,
		117269,
		46714,
		63816,
		87779,
		159624,
		11731,
		9971,
		990,
		137317,
		108831,
		50994,
		74554,
		162680,
		23640,
		131597,
		146962,
		170620,
		34829,
		91205,
		21184,
		1913,
		63616,
		18427,
		93136,
		156592,
		17519,
		67565,
		115882,
		138220,
		78622,
		88535,
		18115,
		2711,
		33554,
		109492,
		54298,
		971,
		24914,
		25863,
		36363,
		45715,
		27099,
		194995,
		14299,
		178181,
		111488,
		72395,
		322385,
		157719,
		130787,
		11897,
		81843,
		83999,
		11369,
		49280,
		118604,
		40922,
		61332,
		110343,
		53407,
		75639,
		40582,
		300440,
		54722,
		25637,
		13694,
		48248,
		48278,
		194521,
		56203,
		52779,
		48783,
		72627,
		10953,
		376,
		16733,
		280238,
		26351,
		230789,
		15132,
		25168,
		137270,
		3588,
		63704,
		73376,
		94031,
		74284,
		19443,
		159557,
		9697,
		39901,
		13351,
		119050,
		15406,
		146455,
		3460,
		29556,
		75195,
		37673,
		102524,
		92329,
		47289,
		98413,
		15311,
		100684,
		56345,
		7116,
		95480,
		11590,
		7200,
		167,
		23610,
		58426,
		17730,
		136656,
		27944,
		53151,
		2701,
		8824,
		103124,
		3017,
		90744,
		113588,
		53216,
		79736,
		65940,
		26931,
		498,
		29568,
		80540,
		143543,
		21292,
		1740,
		59268,
		16561,
		180816,
		42323,
		50174,
		40890,
		52866,
		10703,
		57169,
		4700,
		17191,
		4424,
		93511,
		49698,
		166650,
		26972,
		48631,
		165169,
		82879,
		69326,
		202970,
		4007,
		2376,
		231325,
		139592,
		22119,
		62851,
		37504,
		68816,
		58345,
		67398,
		186643,
		43331,
		277416,
		53749,
		15746,
		23102,
		17432,
		4793,
		151138,
		48822,
		54265,
		48203,
		198688,
		14305,
		54287,
		2291,
		18018,
		113378,
		123260,
		7180,
		97549,
		87027,
		120085,
		2920,
		76080,
		8190,
		102005,
		5641,
		64580,
		14955,
		59802,
		54028,
		58884,
		19367,
		81779,
		412567,
		85957,
		97053,
		103637,
		78871,
		29364,
		27637,
		141728,
		4767,
		30686,
		112738,
		130146,
		42745,
		12730,
		105040,
		14844,
		232,
		210944,
		36581,
		152317,
		135543,
		29744,
		3129,
		55647,
		58149,
		46319,
		27265,
		17499,
		28005,
		59948,
		7170,
		34138,
		5702,
		293047,
		110892,
		408,
		91760,
		218674,
		18469,
		46095,
		81403,
		14389,
		4610,
		35672,
		73060,
		11006,
		74848,
		104820,
		118143,
		190357,
		20043,
		105358,
		141735,
		5115,
		27093,
		45924,
		123073,
		52599,
		29433,
		9616,
		238350,
		78610,
		24851,
		58858,
		26769,
		31969,
		24613,
		18294,
		4982,
		32735,
		39639,
		143563,
		112073,
		202205,
		12567,
		4873,
		88601,
		44897,
		81503,
		101648,
		81362,
		34662,
		85277,
		17574,
		48173,
		21435,
		221188,
		40215,
		39576,
		80786,
		26544,
		64668,
		81841,
		10731,
		37733,
		247986,
		149188,
		127703,
		495,
		18382,
		54388,
		72446,
		43071,
		30974,
		198723,
		89608,
		41360,
		190,
		33045,
		8386,
		31658,
		19992,
		237838,
		119015,
		137622,
		50890,
		100913,
		6460,
		116233,
		267230,
		26621,
		104129,
		65114,
		14190,
		41542,
		14888,
		85962,
		23342,
		23041,
		26453,
		43725,
		71809,
		45186,
		4770,
		46452,
		53894,
		56616,
		221286,
		18973,
		9038,
		109299,
		55365,
		19366,
		26863,
		18808,
		60909,
		69353,
		41738,
		83463,
		12100,
		68561,
		72860,
		3980,
		13796,
		49340,
		12332,
		31311,
		27418,
		4255,
		53430,
		18976,
		45523,
		510,
		14224,
		30477,
		26581,
		4530,
		3651,
		101663,
		139840,
		22709,
		150861,
		31996,
		63923,
		120623,
		262522,
		3076,
		10528,
		2929,
		14672,
		130238,
		18087,
		9816,
		121894,
		100308,
		25085,
		55111,
		14565,
		18952,
		53293,
		2042,
		369988,
		23674,
		61789,
		133529,
		28783,
		108293,
		35477,
		47119,
		36448,
		71049,
		40015,
		33055,
		78598,
		198442,
		1833,
		159937,
		40654,
		77444,
		189245,
		113153,
		8621,
		18599,
		38553,
		35223,
		166072,
		2375,
		11659,
		21786,
		89523,
		6032,
		12116,
		63046,
		159398,
		18454,
		3678,
		32521,
		47626,
		11411,
		103527,
		38896,
		42946,
		15696,
		26370,
		10185,
		8413,
		37080,
		165583,
		4331,
		63555,
		14907,
		72220,
		50056,
		6623,
		62236,
		36565,
		49783,
		10049,
		17503,
		100581,
		55951,
		146244,
		24724,
		9626,
		17969,
		25524,
		109300,
		173965,
		99994,
		101056,
		46459,
		43647,
		53737,
		277968,
		8347,
		123521,
		74858,
		33829,
		44762,
		77574,
		877,
		81377,
		222525,
		123532,
		30602,
		43881,
		53145,
		2973,
		16284,
		81940,
		61281,
		127044,
		63620,
		9875,
		14756,
		114829,
		19032,
		9202,
		52759,
		119141,
		23928,
		120551,
		19607,
		3599,
		33401,
		76821,
		73233,
		117430,
		39968,
		36539,
		7071,
		5446,
		121735,
		194059,
		15206,
		45283,
		6706,
		15603,
		65615,
		1207,
		165723,
		92275,
		34773,
		104447,
		8396,
		32353,
		205240,
		164323,
		13600,
		60555,
		79205,
		25532,
		22907,
		33410,
		57480,
		107111,
		69630,
		32137,
		47832,
		70913,
		33161,
		20321,
		2371,
		117348,
		10714,
		86246,
		1625,
		11763,
		17900,
		268,
		78457,
		99175,
		97940,
		101092,
		86660,
		32221,
		14041,
		128504,
		125080,
		53744,
		124263,
		31017,
		13897,
		403,
		31859,
		21964,
		5633,
		111630,
		5547,
		77329,
		17961,
		18241,
		84995,
		25984,
		12983,
		67491,
		62168,
		47262,
		5241,
		297,
		51191,
		7351,
		8967,
		147212,
		82060,
		16821,
		782,
		11033,
		82431,
		62957,
		5026,
		43459,
		77963,
		203477,
		53528,
		6247,
		191852,
		87774,
		74164,
		215654,
		13467,
		1522,
		219964,
		28589,
		244104,
		16242,
		117821,
		67725,
		72570,
		156792,
		17186,
		15979,
		26990,
		44128,
		193014,
		35276,
		57125,
		16212,
		166451,
		68017,
		6905,
		77608,
		16364,
		53777,
		75921,
		76426,
		37975,
		26203,
		269296,
		64099,
		84122,
		12077,
		38533,
		830,
		4407,
		20139,
		963,
		43028,
		38902,
		42911,
		37503,
		83343,
		85045,
		16979,
		1165,
		60835,
		137387,
		58380,
		86990,
		110066,
		134540,
		56331,
		193845,
		81238,
		17922,
		163093,
		38744,
		110641,
		12502,
		56404,
		34862,
		26865,
		125964,
		12965,
		111648,
		25547,
		7771,
		27196,
		136980,
		9555,
		29551,
		107158,
		57885,
		18831,
		37705,
		35505,
		101742,
		13970,
		102109,
		62548,
		124657,
		23328,
		11124,
		89592,
		146376,
		248050,
		6241,
		22033,
		18337,
		80685,
		29898,
		11908,
		216623,
		67721,
		106162,
		146610,
		21377,
		15085,
		91552,
		42041,
		62560,
		122532,
		125336,
		102365,
		121537,
		142559,
		29693,
		223919,
		11515,
		110495,
		18776,
		22494,
		5895,
		185059,
		103592,
		229351,
		51220,
		100102,
		37027,
		257855,
		29359,
		54123,
		36066,
		106493,
		12244,
		79258,
		32002,
		432,
		56205,
		94836,
		90182,
		6726,
		14762,
		29391,
		48938,
		26864,
		38083,
		60364,
		3310,
		60192,
		14766,
		205567,
		57504,
		110760,
		22649,
		24666,
		46333,
		21517,
		3430,
		13135,
		28873,
		27052,
		158809,
		11597,
		20529,
		6695,
		23138,
		22960,
		37137,
		45574,
		6545,
		305877,
		43423,
		26153,
		24769,
		59844,
		14501,
		10430,
		134352,
		56169,
		13213,
		103432,
		49523,
		35181,
		13435,
		12408,
		129475,
		64620,
		230854,
		77390,
		51990,
		15653,
		83248,
		33466,
		44571,
		117828,
		51481,
		2187,
		10559,
		68019,
		18021,
		54895,
		48247,
		18354,
		33737,
		4554,
		108595,
		37288,
		39767,
		116707,
		9175,
		3726,
		108877,
		21616,
		83684,
		49862,
		1938,
		8543,
		276466,
		20134,
		108498,
		48770,
		102254,
		31914,
		131520,
		185291,
		100559,
		51890,
		209,
		19526,
		76471,
		50544,
		71814,
		99351,
		8172,
		198526,
		28816,
		20419,
		9109,
		98389,
		136777,
		76479,
		75596,
		30635,
		165417,
		48216,
		120220,
		25955,
		211071,
		39314,
		24308,
		32164,
		2559,
		146280,
		43403,
		9233,
		17947,
		90585,
		1786,
		86920,
		125662,
		2457,
		64741,
		32152,
		32918,
		122882,
		78538,
		44001,
		31723,
		56426,
		23375,
		103172,
		88177,
		145697,
		52506,
		49319,
		68016,
		31664,
		41488,
		18486,
		110400,
		7030,
		28241,
		986,
		109199,
		19900,
		42147,
		56864,
		65287,
		49183,
		7858,
		24000,
		30453,
		840,
		16673,
		25907,
		68916,
		89927,
		6309,
		158335,
		36407,
		199737,
		130464,
		13137,
		59603,
		201778,
		195292,
		21015,
		42466,
		179062,
		172561,
		89492,
		11075,
		180407,
		31868,
		72493,
		20998,
		60217,
		9865,
		19530,
		39274,
		130266,
		54539,
		21623,
		12535,
		13505,
		40641,
		73375,
		4087,
		85633,
		2153,
		3117,
		70680,
		55788,
		92096,
		47509,
		98493,
		37490,
		271936,
		151475,
		3032,
		16171,
		96642,
		34106,
		78425,
		125761,
		19591,
		3366,
		19316,
		54508,
		24183,
		50786,
		194248,
		91528,
		33253,
		34622,
		108355,
		41741,
		705,
		3814,
		3883,
		108929,
		13203,
		67831,
		10142,
		59754,
		68208,
		29128,
		84820,
		56880,
		38794,
		24972,
		48571,
		40821,
		40476,
		18137,
		164254,
		24064,
		236309,
		79181,
		11282,
		395,
		39169,
		2013,
		51587,
		28551,
		9645,
		701,
		109513,
		115899,
		113566,
		12762,
		62045,
		58322,
		103726,
		41343,
		40866,
		244102,
		143816,
		2490,
		70346,
		40973,
		52618,
		15412,
		30720,
		104315,
		38917,
		42027,
		93676,
		17513,
		107418,
		20706,
		123890,
		13399,
		97727,
		24044,
		87962,
		65606,
		44250,
		98044,
		65276,
		74790,
		101473,
		19350,
		91570,
		1326,
		87790,
		172042,
		7577,
		100813,
		86896,
		85891,
		41512,
		108130,
		27794,
		14875,
		71431,
		12835,
		156250,
		58135,
		3759,
		22476,
		42176,
		115873,
		34686,
		56523,
		73643,
		108505,
		51491,
		20838,
		12721,
		32863,
		45700,
		29496,
		13700,
		34294,
		55360,
		29206,
		155942,
		123812,
		7706,
		163234,
		203,
		132720,
		49358,
		144431,
		8130,
		175788,
		35818,
		3270,
		76832,
		25710,
		54095,
		97274,
		28779,
		94621,
		74396,
		19092,
		128242,
		58067,
		20885,
		14670,
		93255,
		15107,
		63291,
		23654,
		126900,
		129421,
		59294,
		262659,
		9798,
		3251,
		67344,
		28600,
		44629,
		50672,
		29072,
		26999,
		31526,
		23183,
		49175,
		165843,
		175455,
		17282,
		175411,
		32022,
		45989,
		30298,
		90690,
		78118,
		83156,
		23749,
		35636,
		31317,
		7069,
		80381,
		94561,
		133756,
		14960,
		97404,
		6138,
		41065,
		78041,
		32843,
		16601,
		34123,
		9559,
		146529,
		123377,
		96395,
		54441,
		42012,
		84257,
		123541,
		10745,
		22139,
		106459,
		11720,
		150883,
		172651,
		154996,
		110538,
		4728,
		53447,
		25704,
		2009,
		71152,
		119354,
		21166,
		66604,
		1429,
		216162,
		8637,
		122250,
		63520,
		27180,
		29172,
		36124,
		276428,
		107787,
		77184,
		4680,
		14952,
		104903,
		24418,
		14793,
		51561,
		52931,
		8371,
		26342,
		48526,
		7118,
		92066,
		67280,
		40653,
		8847,
		34597,
		105438,
		14198,
		50163,
		61188,
		146286,
		50315,
		41205,
		170829,
		161496,
		585,
		197359,
		95056,
		1687,
		365794,
		91349,
		48507,
		5804,
		49263,
		5146,
		104902,
		96365,
		117343,
		132222,
		46084,
		96919,
		16875,
		8073,
		262381,
		79982,
		52663,
		13928,
		16056,
		153908,
		15145,
		109256,
		132308,
		18763,
		24904,
		167644,
		13618,
		40750,
		18686,
		147124,
		114709,
		150038,
		52849,
		2938,
		12568,
		48617,
		8778,
		5459,
		44202,
		44591,
		74914,
		17183,
		248689,
		13878,
		7822,
		80060,
		23116,
		194037,
		18487,
		2067,
		7798,
		43077,
		33678,
		244028,
		31320,
		74273,
		2794,
		19466,
		8218,
		36280,
		183997,
		48124,
		19416,
		29656,
		19280,
		98734,
		7715,
		18311,
		30701,
		133602,
		150307,
		126956,
		7378,
		2933,
		79903,
		13178,
		12593,
		86571,
		26604,
		92446,
		13574,
		44205,
		65699,
		427599,
		21118,
		8245,
		14407,
		27877,
		47936,
		33542,
		7916,
		26460,
		117762,
		21596,
		37818,
		2249,
		127359,
		209394,
		60044,
		47677,
		308089,
		36791,
		154971,
		31417,
		6998,
		150042,
		174360,
		12255,
		43009,
		29335,
		48739,
		3912,
		101398,
		53340,
		2580,
		146939,
		151295,
		45360,
		125275,
		15273,
		45383,
		27456,
		48761,
		23314,
		8750,
		60801,
		85823,
		104759,
		27894,
		123685,
		66968,
		39480,
		26917,
		55290,
		83305,
		2696,
		98390,
		57569,
		145853,
		340733,
		4919,
		20024,
		52268,
		30884,
		7413,
		203685,
		70989,
		112855,
		4129,
		50536,
		349518,
		68205,
		332641,
		159581,
		135361,
		236026,
		37563,
		176404,
		64899,
		6578,
		122033,
		63871,
		1850,
		85234,
		82089,
		66124,
		74145,
		121098,
		107351,
		12687,
		36881,
		117334,
		13136,
		14698,
		85933,
		93866,
		18047,
		32620,
		310,
		15094,
		46000,
		88451,
		23632,
		36645,
		27940,
		87618,
		80520,
		58892,
		20976,
		27702,
		140090,
		96075,
		67841,
		103292,
		238964,
		87778,
		107338,
		17019,
		83427,
		67522,
		7302,
		8261,
		47570,
		116787,
		8730,
		80484,
		61772,
		174422,
		56005,
		131193,
		52875,
		14588,
		28471,
		59817,
		9586,
		15720,
		158155,
		51307,
		109734,
		15196,
		11025,
		59331,
		3884,
		52626,
		102602,
		84797,
		25158,
		27314,
		4437,
		20488,
		76214,
		189248,
		35023,
		114952,
		157376,
		2827,
		62439,
		102878,
		129749,
		36405,
		10329,
		109339,
		108633,
		36662,
		1254,
		13267,
		5470,
		87105,
		58004,
		15397,
		10434,
		159667,
		21864,
		52022,
		179464,
		3013,
		32147,
		31496,
		116832,
		18494,
		105502,
		129227,
		107267,
		50033,
		13481,
		9954,
		24267,
		22141,
		16257,
		116154,
		36185,
		950,
		115685,
		11305,
		176708,
		2048,
		178671,
		112573,
		287867,
		162328,
		497663,
		95170,
		50979,
		193861,
		50987,
		30368,
		136257,
		31830,
		46549,
		15119,
		169876,
		23788,
		17462,
		249887,
		57377,
		1949,
		35448,
		14791,
		43769,
		210091,
		3783,
		34612,
		282103,
		88380,
		245190,
		5457,
		20491,
		98908,
		11402,
		86899,
		117916,
		16028,
		162584,
		60644,
		320177,
		156096,
		31065,
		55876,
		22000,
		77655,
		9992,
		23397,
		13757,
		317623,
		63978,
		215255,
		2443,
		17648,
		93231,
		27388,
		104529,
		93807,
		55505,
		140477,
		12046,
		112040,
		70887,
		40152,
		94365,
		112353,
		25063,
		114679,
		266061,
		71248,
		119555,
		15589,
		2244,
		617,
		14129,
		211431,
		70110,
		100652,
		7777,
		4383,
		85911,
		89221,
		21010,
		120615,
		58357,
		86405,
		37554,
		41647,
		18,
		15143,
		69662,
		60491,
		14714,
		186134,
		148344,
		42347,
		5410,
		168175,
		44535,
		42449,
		343894,
		129417,
		99682,
		20659,
		27272,
		140483,
		63455,
		222159,
		17536,
		13722,
		42637,
		62324,
		11976,
		114691,
		148109,
		2283,
		32057,
		182393,
		4295,
		147364,
		33705,
		2075,
		44303,
		30274,
		28331,
		63740,
		69740,
		29148,
		10346,
		44862,
		33716,
		73937,
		153333,
		12930,
		38784,
		247159,
		2515,
		41053,
		20256,
		83368,
		256189,
		54639,
		115240,
		5096,
		24661,
		175419,
		153552,
		26516,
		141,
		138176,
		63885,
		34115,
		47222,
		55709,
		2765,
		28479,
		38875,
		236608,
		12229,
		22921,
		77291,
		54426,
		45388,
		2860,
		57787,
		114579,
		295139,
		105782,
		17826,
		71066,
		19119,
		54364,
		69385,
		16568,
		12323,
		28057,
		33346,
		34919,
		124763,
		155533,
		101386,
		31644,
		8627,
		49001,
		303600,
		29868,
		63213,
		9103,
		77280,
		71333,
		9696,
		138789,
		37059,
		24823,
		5057,
		21352,
		32368,
		114208,
		56803,
		19424,
		10445,
		58514,
		8661,
		209508,
		26187,
		171838,
		10460,
		63454,
		14016,
		122504,
		41328,
		21329,
		46618,
		32493,
		38225,
		7855,
		31763,
		7945,
		29876,
		8734,
		6438,
		24205,
		97490,
		139977,
		130740,
		47323,
		33195,
		85390,
		57194,
		13813,
		60600,
		21313,
		96251,
		7699,
		27584,
		170521,
		139271,
		1363,
		4402,
		336738,
		129223,
		84983,
		69150,
		13147,
		3590,
		163929,
		207225,
		155260,
		55916,
		20288,
		4503,
		8398,
		98490,
		11773,
		27512,
		37113,
		84976,
		86558,
		28365,
		11756,
		116005,
		182148,
		13733,
		115313,
		47644,
		67208,
		85069,
		9347,
		14995,
		226141,
		14704,
		101835,
		41159,
		35314,
		13113,
		63526,
		214039,
		29978,
		50446,
		83339,
		17440,
		129441,
		72522,
		118641,
		97816,
		24907,
		73844,
		15717,
		118884,
		167255,
		96509,
		162793,
		30847,
		36849,
		51297,
		78974,
		77793,
		10427,
		1873,
		2972,
		9999,
		35074,
		28190,
		64297,
		146836,
		46298,
		60038,
		163007,
		108919,
		61219,
		2403,
		75022,
		127339,
		4233,
		110389,
		69022,
		9833,
		128097,
		88016,
		79390,
		222936,
		22570,
		94657,
		28462,
		56956,
		38803,
		81536,
		30474,
		152794,
		19566,
		16481,
		147408,
		74574,
		81895,
		20731,
		1918,
		1366,
		76367,
		187321,
		54494,
		24366,
		21690,
		61696,
		33283,
		107477,
		77499,
		31112,
		414383,
		74362,
		18463,
		218441,
		120929,
		59848,
		258629,
		201924,
		69269,
		454,
		19989,
		13054,
		59894,
		3623,
		58908,
		20681,
		35723,
		78523,
		102680,
		38988,
		184112,
		108087,
		50944,
		132704,
		52966,
		21699,
		18860,
		96349,
		201411,
		82697,
		85395,
		95658,
		5093,
		6427,
		177894,
		44191,
		32755,
		26961,
		155739,
		6249,
		31310,
		81030,
		26574,
		84311,
		120155,
		86730,
		113535,
		7424,
		48888,
		13516,
		45747,
		98098,
		20077,
		183995,
		81945,
		43210,
		26704,
		40420,
		75831,
		45648,
		11180,
		6855,
		57927,
		65528,
		124096,
		34851,
		2598,
		156633,
		107572,
		127352,
		38169,
		123845,
		60142,
		62722,
		105584,
		232364,
		23211,
		68120,
		1601,
		22169,
		89299,
		747,
		258039,
		80572,
		7258,
		152249,
		11862,
		101204,
		8834,
		121434,
		33761,
		19175,
		133142,
		46343,
		40178,
		48723,
		3589,
		41977,
		30210,
		38868,
		62257,
		10087,
		82658,
		87827,
		90646,
		16415,
		47552,
		351723,
		28298,
		72225,
		91146,
		272760,
		1701,
		11295,
		1652,
		109651,
		300747,
		51863,
		198800,
		29446,
		11794,
		32345,
		37538,
		22356,
		33102,
		37590,
		113544,
		37970,
		11478,
		179743,
		25454,
		103417,
		59905,
		221970,
		105196,
		145604,
		7817,
		164809,
		102360,
		16974,
		75840,
		255333,
		56902,
		6659,
		1954,
		645,
		59400,
		67769,
		7689,
		18675,
		5215,
		13793,
		20536,
		27852,
		3387,
		29523,
		259718,
		16860,
		94625,
		43143,
		29245,
		15848,
		233581,
		22685,
		63631,
		78557,
		22836,
		133302,
		84513,
		1348,
		51826,
		47129,
		98836,
		58284,
		1830,
		1749,
		94642,
		10933,
		6145,
		12506,
		10975,
		13879,
		103781,
		144434,
		10268,
		28409,
		32346,
		52968,
		121567,
		107374,
		77268,
		23686,
		35097,
		10501,
		155275,
		15303,
		47136,
		21102,
		168741,
		55332,
		90385,
		15996,
		84817,
		681,
		137803,
		25054,
		142275,
		6163,
		38175,
		8056,
		124296,
		240642,
		65621,
		4934,
		178205,
		16101,
		62803,
		60964,
		18230,
		100622,
		76465,
		44689,
		14545,
		9543,
		47514,
		16852,
		93380,
		28048,
		12047,
		107106,
		37575,
		101485,
		77047,
		57326,
		34819,
		96137,
		76916,
		6469,
		46264,
		115983,
		75768,
		87668,
		69942,
		13027,
		165,
		8373,
		114231,
		26434,
		52844,
		42799,
		182044,
		23580,
		146254,
		38081,
		43236,
		33883,
		146220,
		382894,
		14606,
		46035,
		36481,
		166621,
		35417,
		95382,
		2957,
		59384,
		60428,
		36358,
		66343,
		75378,
		22267,
		22950,
		83528,
		17577,
		56474,
		25285,
		4619,
		179691,
		75355,
		95836,
		53295,
		34588,
		171410,
		4487,
		14679,
		84208,
		44015,
		18562,
		109133,
		54101,
		11531,
		86052,
		174479,
		303157,
		28095,
		9953,
		35642,
		14564,
		39802,
		16145,
		77606,
		117406,
		53038,
		121117,
		53624,
		22062,
		1212,
		7632,
		127157,
		237292,
		189087,
		10478,
		127345,
		102515,
		181997,
		86752,
		87623,
		10966,
		121602,
		68783,
		68681,
		83042,
		114380,
		138349,
		191305,
		67176,
		50085,
		39016,
		1427,
		42384,
		1412,
		67118,
		122616,
		72389,
		25260,
		2237,
		13576,
		137346,
		19938,
		20304,
		2191,
		68759,
		5373,
		61364,
		238507,
		75814,
		23931,
		69565,
		38993,
		131741,
		38364,
		12528,
		87762,
		5679,
		129853,
		5310,
		186831,
		32653,
		90338,
		260176,
		389531,
		108118,
		26843,
		43985,
		50175,
		30563,
		25106,
		56965,
		18130,
		140428,
		4542,
		165503,
		117991,
		24219,
		229605,
		1819,
		129663,
		1240,
		3797,
		76093,
		18398,
		71339,
		51919,
		93043,
		27175,
		47060,
		216257,
		6483,
		35051,
		1217,
		16512,
		80798,
		129064,
		13225,
		69339,
		8548,
		237079,
		72298,
		2575,
		34280,
		51379,
		117910,
		55671,
		53345,
		247552,
		29486,
		39328,
		140821,
		34681,
		57045,
		60177,
		5004,
		90269,
		78522,
		2479,
		322607,
		48474,
		61296,
		13057,
		31558,
		4678,
		59271,
		6699,
		27044,
		31988,
		35944,
		12503,
		83480,
		4389,
		136508,
		3781,
		114121,
		70279,
		4488,
		155829,
		42214,
		2898,
		68191,
		75695,
		305850,
		45041,
		74344,
		106509,
		30087,
		17429,
		93292,
		12477,
		290,
		23080,
		114802,
		35714,
		18751,
		26554,
		105424,
		17775,
		2144,
		2412,
		100610,
		65192,
		113975,
		52975,
		180272,
		135050,
		129815,
		76238,
		106483,
		21440,
		63186,
		4260,
		46189,
		9711,
		28249,
		4169,
		23429,
		23390,
		8324,
		141585,
		63809,
		67668,
		38457,
		38063,
		39226,
		59972,
		1189,
		203916,
		62368,
		14403,
		16949,
		61767,
		85801,
		1739,
		40147,
		35049,
		76757,
		33124,
		62102,
		15780,
		103593,
		103009,
		53484,
		22952,
		67973,
		114645,
		6566,
		5245,
		50462,
		7601,
		8288,
		3513,
		194571,
		80276,
		1908,
		54592,
		5124,
		58571,
		2513,
		6800,
		273997,
		193904,
		1119,
		17991,
		117245,
		2508,
		129156,
		82366,
		26278,
		71465,
		63341,
		56943,
		39662,
		106116,
		94966,
		156875,
		9736,
		2204,
		122308,
		94418,
		27134,
		1280,
		24539,
		49022,
		45314,
		3764,
		50904,
		46424,
		30699,
		28087,
		293839,
		9400,
		33646,
		40165,
		822,
		147499,
		50263,
		116179,
		29085,
		11863,
		31314,
		5578,
		17797,
		5104,
		12454,
		1604,
		15342,
		219206,
		10232,
		67800,
		94261,
		25872,
		13565,
		90339,
		78971,
		75377,
		26649,
		41184,
		47695,
		11514,
		35369,
		20767,
		14227,
		41953,
		309396,
		148270,
		147938,
		33074,
		14453,
		27499,
		109019,
		39018,
		25738,
		240196,
		158931,
		52820,
		8612,
		95853,
		21524,
		137010,
		84901,
		70869,
		70021,
		116794,
		48404,
		38771,
		6732,
		1070,
		70990,
		187297,
		49140,
		5238,
		576,
		3564,
		253975,
		16027,
		16483,
		2811,
		37775,
		19034,
		25259,
		4053,
		2000,
		70083,
		95774,
		19713,
		33431,
		92703,
		91314,
		42381,
		288770,
		48194,
		95985,
		3991,
		77418,
		13406,
		241328,
		245086,
		56533,
		35275,
		62725,
		9246,
		51924,
		70181,
		95331,
		16163,
		31410,
		79016,
		39312,
		120878,
		119371,
		275987,
		80124,
		27712,
		9186,
		220,
		23598,
		146167,
		85209,
		68238,
		282190,
		57048,
		31273,
		30555,
		80913,
		17594,
		75779,
		59160,
		135002,
		101219,
		189377,
		29225,
		96735,
		60126,
		62522,
		104000,
		27620,
		86814,
		17240,
		147533,
		11001,
		5425,
		43682,
		410,
		49460,
		87270,
		69480,
		46315,
		59448,
		1816,
		76201,
		9431,
		11788,
		87960,
		29063,
		65539,
		47347,
		11678,
		33846,
		7008,
		196704,
		9895,
		6753,
		8633,
		120892,
		59970,
		572824,
		115934,
		6646,
		202559,
		892,
		48351,
		37611,
		251282,
		57823,
		67263,
		57750,
		26527,
		34485,
		90747,
		7685,
		88370,
		6144,
		64182,
		1709,
		41969,
		21458,
		62327,
		181657,
		49247,
		225330,
		122600,
		114574,
		107124,
		85361,
		111833,
		63243,
		71420,
		15655,
		191178,
		72430,
		18063,
		51425,
		54002,
		12364,
		53225,
		86557,
		18193,
		97580,
		41232,
		138398,
		67821,
		128724,
		8944,
		233212,
		101353,
		52099,
		42127,
		14006,
		120107,
		32789,
		32132,
		3498,
		18123,
		33758,
		56058,
		5779,
		128760,
		59888,
		98869,
		18445,
		84702,
		51911,
		13234,
		218379,
		20093,
		39031,
		8074,
		70195,
		20708,
		23462,
		24355,
		131384,
		60189,
		26390,
		10403,
		41060,
		7140,
		10781,
		49410,
		42261,
		87202,
		82566,
		41663,
		43105,
		60276,
		2768,
		5733,
		74176,
		28329,
		2297,
		145430,
		131632,
		83615,
		122915,
		105441,
		655,
		224102,
		5284,
		136426,
		67763,
		16294,
		188511,
		32538,
		61049,
		27893,
		3394,
		13951,
		159099,
		28542,
		17930,
		145360,
		9492,
		190122,
		32285,
		78855,
		26440,
		13570,
		58648,
		73908,
		4239,
		124561,
		2444,
		74172,
		53131,
		11468,
		10794,
		73566,
		11623,
		35343,
		64710,
		30481,
		4163,
		10328,
		38309,
		29901,
		10538,
		154377,
		76132,
		92405,
		24839,
		11679,
		3465,
		13449,
		11637,
		7824,
		2337,
		57754,
		1260,
		14458,
		41118,
		19878,
		38661,
		13416,
		159180,
		37074,
		163164,
		54137,
		28627,
		52134,
		184900,
		8520,
		40385,
		29546,
		30502,
		22386,
		66527,
		107458,
		6850,
		24022,
		47983,
		30603,
		35083,
		8934,
		304066,
		39500,
		9,
		28261,
		33026,
		77251,
		9374,
		44833,
		116312,
		34990,
		29236,
		63563,
		125639,
		135405,
		165398,
		159055,
		55690,
		88141,
		69643,
		236964,
		31983,
		25572,
		20436,
		36746,
		60896,
		31850,
		16179,
		11828,
		5888,
		3043,
		66368,
		9750,
		31167,
		7915,
		53111,
		36430,
		1333,
		64344,
		93659,
		20061,
		60596,
		180191,
		51630,
		6792,
		30244,
		43509,
		101058,
		22409,
		420,
		44210,
		109783,
		43223,
		27030,
		72477,
		72831,
		32679,
		29235,
		7675,
		47556,
		12258,
		39907,
		149412,
		84926,
		118247,
		24692,
		71717,
		105038,
		86009,
		45941,
		41189,
		89453,
		29856,
		52543,
		30627,
		226798,
		67303,
		59230,
		67415,
		34408,
		1367,
		99685,
		16867,
		128419,
		52147,
		4111,
		125381,
		117881,
		16173,
		44093,
		102224,
		31575,
		23234,
		24870,
		83790,
		127407,
		239098,
		3200,
		994,
		1255,
		100903,
		242275,
		117266,
		55116,
		38205,
		16140,
		29662,
		11307,
		40414,
		208793,
		123355,
		56470,
		4862,
		75600,
		30119,
		58218,
		70828,
		24075,
		26974,
		7802,
		192353,
		4851,
		5475,
		78720,
		66596,
		3409,
		28573,
		64396,
		30381,
		30690,
		59859,
		88256,
		5406,
		99945,
		103064,
		34463,
		37727,
		24238,
		86643,
		60088,
		4057,
		23741,
		5967,
		162904,
		38240,
		28356,
		93858,
		25510,
		122879,
		6897,
		3278,
		7057,
		11971,
		4400,
		35461,
		211413,
		21395,
		59615,
		39471,
		87233,
		55795,
		128426,
		3051,
		22470,
		41950,
		14705,
		3974,
		180108,
		80476,
		78442,
		204996,
		91987,
		15634,
		67610,
		139015,
		142373,
		35611,
		51134,
		10387,
		4353,
		153456,
		57749,
		181039,
		14183,
		68447,
		151532,
		21107,
		36452,
		20551,
		3186,
		46247,
		46383,
		129666,
		88736,
		140662,
		146243,
		2066,
		8360,
		7978,
		64818,
		106963,
		17896,
		47801,
		10723,
		114821,
		223295,
		74192,
		3293,
		3393,
		16987,
		74064,
		11277,
		91622,
		4270,
		29828,
		27951,
		387869,
		103235,
		1374,
		61988,
		120083,
		477,
		145892,
		128378,
		11779,
		211263,
		61354,
		18221,
		17869,
		46530,
		83061,
		108538,
		157981,
		90608,
		67199,
		95080,
		49064,
		195814,
		12302,
		66307,
		10348,
		231346,
		160732,
		112859,
		63633,
		146558,
		21271,
		31037,
		198802,
		47622,
		12862,
		95710,
		3910,
		77850,
		73961,
		85585,
		34752,
		61000,
		4082,
		24595,
		103679,
		71107,
		8208,
		79568,
		150019,
		16615,
		24961,
		139857,
		32664,
		197366,
		4559,
		54735,
		32696,
		4126,
		162019,
		75698,
		13916,
		70108,
		159638,
		19834,
		9349,
		24675,
		175560,
		49643,
		18206,
		52459,
		27992,
		10809,
		88865,
		401975,
		133172,
		29000,
		34558,
		30915,
		3658,
		25834,
		42430,
		36562,
		125265,
		18182,
		10155,
		40149,
		97082,
		208980,
		19575,
		60853,
		90529,
		66545,
		9600,
		789,
		46420,
		2317,
		88593,
		55595,
		98980,
		115302,
		5742,
		169155,
		1073,
		177901,
		3472,
		11189,
		63711,
		78643,
		65472,
		50459,
		127979,
		93,
		42202,
		67053,
		21720,
		157650,
		11145,
		141378,
		42033,
		22824,
		85705,
		79114,
		35584,
		15974,
		1510,
		54172,
		28562,
		12451,
		104226,
		19190,
		97151,
		73024,
		20948,
		5151,
		81741,
		21499,
		29006,
		84183,
		198074,
		54003,
		45120,
		170125,
		26240,
		35177,
		28389,
		64863,
		79974,
		60778,
		176915,
		232183,
		45342,
		2038,
		80253,
		41564,
		40703,
		32689,
		5430,
		100689,
		5366,
		23007,
		134279,
		14266,
		26712,
		73993,
		24934,
		64242,
		52113,
		102887,
		61801,
		46415,
		201049,
		54251,
		62133,
		122757,
		164883,
		30815,
		139966,
		2319,
		30842,
		766,
		13362,
		10287,
		134518,
		86111,
		81665,
		82440,
		28333,
		43019,
		18963,
		8804,
		161944,
		23439,
		102144,
		101145,
		80029,
		39052,
		248708,
		30350,
		117340,
		11878,
		128467,
		974,
		138625,
		63961,
		5237,
		74778,
		61834,
		67040,
		43814,
		13690,
		65947,
		33809,
		232476,
		115258,
		181745,
		28824,
		94013,
		9510,
		10246,
		93722,
		81976,
		7217,
		114383,
		3493,
		16014,
		69045,
		72692,
		12145,
		80981,
		9507,
		6692,
		1620,
		60820,
		330444,
		35474,
		33962,
		4797,
		7053,
		295463,
		46445,
		27026,
		12491,
		77988,
		49524,
		35675,
		90947,
		29114,
		166705,
		101385,
		133782,
		32704,
		6186,
		84595,
		176031,
		185623,
		45966,
		151302,
		63069,
		1699,
		107491,
		947,
		15458,
		74452,
		196212,
		6046,
		10498,
		12163,
		10239,
		35191,
		243951,
		9277,
		9090,
		29539,
		54460,
		22820,
		26514,
		112549,
		60372,
		51753,
		48756,
		21812,
		70861,
		260326,
		41,
		44222,
		10441,
		16961,
		48148,
		138771,
		216194,
		5914,
		52153,
		53400,
		212036,
		56519,
		26245,
		10117,
		45888,
		15294,
		138019,
		90913,
		26368,
		43842,
		42111,
		23348,
		6082,
		194845,
		161089,
		156206,
		51546,
		11647,
		30759,
		302912,
		262094,
		8635,
		78876,
		26535,
		35283,
		54183,
		31183,
		85484,
		147873,
		12989,
		5197,
		6356,
		72894,
		65347,
		20150,
		27370,
		73787,
		1493,
		45918,
		12366,
		190217,
		20724,
		13858,
		10981,
		67449,
		81213,
		7553,
		14115,
		72242,
		271517,
		11842,
		48310,
		88743,
		143726,
		22177,
		3290,
		243231,
		58452,
		62937,
		12592,
		1654,
		40066,
		33477,
		13751,
		9921,
		128442,
		15868,
		7106,
		75236,
		83773,
		10775,
		36938,
		10482,
		170465,
		17368,
		17469,
		161508,
		32752,
		98340,
		800,
		19824,
		264456,
		3901,
		87319,
		2867,
		26782,
		9630,
		113102,
		185815,
		24197,
		44584,
		86366,
		40224,
		3636,
		140916,
		31731,
		267731,
		9567,
		53678,
		72984,
		29389,
		27963,
		17106,
		50282,
		284911,
		60170,
		8322,
		12608,
		23374,
		89652,
		5268,
		39044,
		229766,
		8869,
		151350,
		31436,
		177342,
		12269,
		183212,
		120418,
		116270,
		2843,
		78888,
		69192,
		7865,
		184099,
		1086,
		129897,
		18383,
		70508,
		20242,
		18508,
		229924,
		124569,
		35749,
		50589,
		55626,
		9884,
		83115,
		40971,
		30671,
		18135,
		14452,
		38861,
		17844,
		201826,
		5549,
		26413,
		17189,
		13561,
		38539,
		10679,
		143331,
		3314,
		36785,
		171194,
		49685,
		187713,
		67506,
		4618,
		104039,
		17060,
		195080,
		50648,
		33159,
		19238,
		67559,
		134840,
		28599,
		157523,
		17130,
		38064,
		117398,
		94355,
		31918,
		13575,
		34538,
		40326,
		13997,
		3494,
		348283,
		62481,
		26862,
		3603,
		104426,
		244363,
		153709,
		112487,
		304612,
		199674,
		41239,
		35545,
		54869,
		293005,
		28223,
		26277,
		26899,
		4533,
		18518,
		15492,
		38587,
		80488,
		70485,
		160395,
		263,
		60162,
		11382,
		222152,
		4696,
		250751,
		51921,
		182609,
		10707,
		48463,
		46243,
		1227,
		49111,
		111564,
		46502,
		33342,
		56846,
		68541,
		63559,
		858,
		139927,
		16654,
		229375,
		76759,
		26478,
		33205,
		95828,
		23399,
		92945,
		2637,
		35630,
		28470,
		143992,
		50214,
		14174,
		21456,
		166191,
		65665,
		1711,
		21594,
		78019,
		97599,
		111701,
		36,
		147151,
		110246,
		189022,
		43021,
		30397,
		40757,
		131935,
		42065,
		73335,
		48039,
		26596,
		28984,
		15102,
		2361,
		7421,
		202167,
		69744,
		43766,
		52826,
		3642,
		83304,
		33873,
		75140,
		63169,
		192389,
		36551,
		92748,
		13039,
		123959,
		233220,
		21738,
		84447,
		77230,
		20228,
		187852,
		19095,
		25799,
		92136,
		108774,
		29237,
		53947,
		2299,
		118106,
		2687,
		8830,
		42331,
		202924,
		33667,
		2023,
		73763,
		30704,
		19363,
		19779,
		16737,
		35629,
		48081,
		24068,
		101013,
		162338,
		291912,
		13749,
		24745,
		328289,
		167679,
		70086,
		48299,
		23306,
		16732,
		17801,
		43322,
		54589,
		3586,
		63653,
		43624,
		53474,
		925,
		109177,
		251316,
		43805,
		13082,
		19511,
		86565,
		142182,
		92461,
		17117,
		101033,
		103319,
		64589,
		4022,
		4351,
		235897,
		5352,
		82705,
		107142,
		46391,
		156084,
		5860,
		61365,
		10558,
		13045,
		7717,
		18357,
		33922,
		12590,
		33065,
		6928,
		46993,
		783,
		46937,
		67846,
		8952,
		26295,
		6107,
		119656,
		18799,
		17458,
		50747,
		4229,
		179559,
		112727,
		118080,
		20683,
		41464,
		125468,
		51560,
		49749,
		44231,
		7359,
		35339,
		62988,
		136487,
		67015,
		5208,
		29150,
		24956,
		105186,
		48858,
		6143,
		18097,
		6972,
		16404,
		73489,
		58742,
		97196,
		36357,
		164616,
		5834,
		32267,
		13746,
		147733,
		15113,
		132091,
		34127,
		106298,
		39729,
		106426,
		22294,
		9780,
		15602,
		36213,
		71502,
		42808,
		66802,
		599,
		60755,
		5851,
		39120,
		67363,
		108623,
		126368,
		72770,
		91263,
		32486,
		30596,
		151717,
		7951,
		52002,
		43103,
		11768,
		68942,
		40901,
		39344,
		24037,
		127500,
		116890,
		48403,
		16926,
		86750,
		17745,
		48648,
		159545,
		34460,
		58419,
		5634,
		114317,
		67865,
		31462,
		23352,
		24010,
		98185,
		125708,
		69686,
		68337,
		13610,
		26271,
		70691,
		2980,
		4768,
		27225,
		102402,
		75453,
		28106,
		8104,
		6931,
		1176,
		6274,
		6475,
		112635,
		22498,
		6176,
		238686,
		26832,
		28893,
		90319,
		14441,
		15682,
		15087,
		39517,
		45270,
		109134,
		104440,
		45965,
		47645,
		81772,
		7876,
		52683,
		87720,
		12898,
		4505,
		185665,
		2769,
		113401,
		15664,
		57592,
		105229,
		137381,
		97059,
		119268,
		6876,
		43309,
		33886,
		128363,
		35476,
		144249,
		67013,
		143587,
		83367,
		25703,
		91436,
		59347,
		53236,
		2289,
		16519,
		19844,
		46309,
		58558,
		99834,
		23313,
		218816,
		231303,
		36388,
		51333,
		183535,
		109792,
		139277,
		54306,
		90139,
		18235,
		8275,
		32710,
		37677,
		82464,
		86025,
		92204,
		88842,
		117723,
		37570,
		128723,
		234242,
		76350,
		73795,
		34896,
		148247,
		58424,
		11105,
		11744,
		45746,
		63372,
		17118,
		49772,
		199520,
		81902,
		38004,
		22911,
		33752,
		3125,
		1995,
		53792,
		4689,
		26909,
		108150,
		146062,
		69674,
		41811,
		161444,
		84855,
		8999,
		28561,
		16731,
		93937,
		3189,
		21967,
		24890,
		22943,
		1356,
		145300,
		51569,
		28802,
		517,
		118679,
		31703,
		40607,
		48098,
		108854,
		25003,
		10233,
		73969,
		177495,
		5248,
		24516,
		215347,
		146192,
		48712,
		60626,
		69188,
		40735,
		5866,
		586,
		101541,
		6509,
		47590,
		52129,
		5969,
		222045,
		110933,
		25733,
		24223,
		65339,
		62812,
		2414,
		155418,
		35819,
		16022,
		78423,
		43138,
		20995,
		128255,
		240673,
		46745,
		236093,
		72176,
		57085,
		97841,
		61248,
		107,
		36068,
		193177,
		105427,
		55726,
		215229,
		20446,
		47228,
		100420,
		87091,
		14429,
		121708,
		23605,
		21157,
		187721,
		21880,
		2997,
		203976,
		99166,
		95068,
		25877,
		7724,
		98925,
		83401,
		4829,
		13182,
		18229,
		13718,
		239662,
		38653,
		116505,
		153497,
		30589,
		89029,
		38962,
		181302,
		43853,
		78872,
		180301,
		4786,
		248240,
		7401,
		106136,
		112590,
		77745,
		19731,
		60880,
		77789,
		125748,
		135487,
		5975,
		48627,
		34084,
		12419,
		215770,
		47557,
		254582,
		10364,
		106495,
		21856,
		67539,
		88981,
		38805,
		21428,
		48732,
		42316,
		12149,
		16078,
		52808,
		25327,
		51322,
		33850,
		51147,
		12253,
		122354,
		46077,
		56483,
		254553,
		115417,
		81834,
		150991,
		94662,
		86668,
		7381,
		12841,
		100650,
		18218,
		15741,
		22372,
		68294,
		50705,
		15535,
		84660,
		61887,
		22553,
		72299,
		31361,
		24824,
		17743,
		46820,
		64288,
		31582,
		77006,
		111674,
		116384,
		30760,
		80920,
		86149,
		77192,
		51979,
		79691,
		60342,
		122805,
		103800,
		240873,
		160744,
		233114,
		78962,
		54920,
		8608,
		3484,
		316104,
		72548,
		24337,
		5088,
		230040,
		21926,
		10172,
		36838,
		26,
		86221,
		83458,
		102176,
		12062,
		17571,
		41929,
		41170,
		28428,
		68239,
		41750,
		103930,
		2634,
		18313,
		53019,
		34825,
		97837,
		63115,
		24606,
		73157,
		152474,
		14715,
		91439,
		37033,
		109806,
		140259,
		30668,
		174760,
		380,
		135597,
		95673,
		136073,
		65073,
		134249,
		13829,
		17279,
		122305,
		4420,
		46444,
		10237,
		64848,
		203623,
		70728,
		10349,
		182885,
		65075,
		24519,
		25783,
		40318,
		34139,
		22222,
		63394,
		55266,
		102764,
		41422,
		20126,
		65100,
		90408,
		53640,
		35128,
		48932,
		11192,
		38935,
		96839,
		34782,
		39492,
		19396,
		41332,
		6250,
		5511,
		19492,
		51304,
		25936,
		104466,
		54099,
		73771,
		86115,
		5080,
		7669,
		30891,
		111700,
		13931,
		25276,
		72289,
		135447,
		14820,
		258641,
		25265,
		31005,
		281179,
		75286,
		393,
		95359,
		14623,
		13584,
		6680,
		101227,
		80173,
		44933,
		76666,
		54542,
		13244,
		39348,
		458,
		25379,
		109451,
		134348,
		81143,
		6959,
		65554,
		12027,
		51311,
		8716,
		57589,
		140731,
		28467,
		23316,
		17272,
		30458,
		25980,
		55229,
		77197,
		83798,
		28302,
		114784,
		7428,
		34548,
		26241,
		14712,
		39336,
		103304,
		18928,
		54080,
		12870,
		334,
		87722,
		15208,
		16895,
		142098,
		114262,
		39820,
		83913,
		57817,
		28682,
		7721,
		14900,
		108672,
		11250,
		62246,
		42849,
		415188,
		1724,
		26555,
		24549,
		25505,
		26443,
		107450,
		145899,
		61035,
		43528,
		6901,
		60726,
		65906,
		267741,
		21338,
		147590,
		42079,
		18924,
		73017,
		135236,
		15393,
		5206,
		4026,
		84185,
		1531,
		5988,
		113890,
		82647,
		303391,
		7386,
		69844,
		71611,
		189865,
		76523,
		31877,
		13315,
		19314,
		198575,
		32821,
		1928,
		67641,
		25913,
		104475,
		103489,
		3297,
		70391,
		18406,
		15446,
		113347,
		19295,
		93790,
		27856,
		1792,
		167471,
		116449,
		8541,
		4408,
		41757,
		63233,
		25765,
		86680,
		64501,
		27034,
		24816,
		34975,
		6079,
		4486,
		49693,
		36229,
		16917,
		21581,
		62426,
		27862,
		11612,
		54284,
		35702,
		194034,
		355,
		24277,
		48262,
		87411,
		70504,
		310164,
		118018,
		12516,
		47559,
		43502,
		57433,
		107139,
		9290,
		66533,
		80863,
		14634,
		34312,
		91725,
		28606,
		21342,
		67241,
		72355,
		43244,
		375789,
		37402,
		174015,
		105070,
		8342,
		44167,
		67494,
		1890,
		16365,
		11723,
		271002,
		1865,
		47918,
		8350,
		45564,
		27742,
		25110,
		125803,
		8553,
		49504,
		81925,
		62211,
		4534,
		15491,
		19011,
		80373,
		206920,
		667,
		102405,
		128623,
		245524,
		5553,
		113309,
		192739,
		65766,
		19567,
		22832,
		261958,
		29679,
		21293,
		71134,
		20962,
		105123,
		24721,
		860,
		21752,
		33448,
		18372,
		157167,
		94822,
		35770,
		173224,
		232737,
		75729,
		28937,
		46828,
		28062,
		25453,
		5207,
		140366,
		36665,
		30652,
		6169,
		67920,
		150458,
		92040,
		23186,
		184604,
		92330,
		20891,
		176492,
		49427,
		27828,
		38305,
		42495,
		143982,
		49560,
		25503,
		90043,
		29747,
		65328,
		47830,
		12932,
		11068,
		77721,
		9003,
		25213,
		94205,
		140426,
		46090,
		89945,
		138173,
		192691,
		33329,
		112232,
		129905,
		35709,
		27514,
		1841,
		19957,
		31411,
		127476,
		53572,
		17497,
		173549,
		55063,
		175135,
		19841,
		69314,
		5192,
		237921,
		117660,
		150697,
		4060,
		273045,
		50414,
		98940,
		65348,
		153665,
		164423,
		58804,
		156695,
		48994,
		213928,
		86036,
		28608,
		8355,
		39574,
		34540,
		16927,
		135680,
		18374,
		151587,
		10830,
		53805,
		16878,
		16623,
		4282,
		48030,
		8537,
		14986,
		46102,
		13062,
		72897,
		72,
		33050,
		108227,
		39451,
		45935,
		651,
		113320,
		40535,
		95176,
		57450,
		48843,
		5003,
		19019,
		10407,
		211163,
		3848,
		1068,
		4988,
		32091,
		30095,
		41692,
		15099,
		43602,
		107434,
		50744,
		7627,
		171349,
		16313,
		150832,
		352665,
		207750,
		33937,
		38256,
		51091,
		156000,
		87889,
		90663,
		84175,
		24908,
		114900,
		50365,
		31494,
		83829,
		5398,
		169342,
		47521,
		54818,
		18935,
		8356,
		43094,
		41212,
		174536,
		10082,
		92550,
		6678,
		60614,
		23355,
		69721,
		14796,
		34149,
		128830,
		58187,
		3179,
		208,
		40325,
		28399,
		225029,
		401412,
		51150,
		31580,
		207268,
		6657,
		10993,
		69818,
		64282,
		289845,
		23308,
		12961,
		38447,
		6681,
		52944,
		31855,
		2572,
		47646,
		120728,
		179148,
		37240,
		45196,
		218274,
		4816,
		3695,
		21961,
		50084,
		35209,
		18073,
		51452,
		27004,
		6100,
		33941,
		1377,
		84831,
		171214,
		85,
		141510,
		9078,
		99227,
		32610,
		6417,
		11718,
		49868,
		65579,
		87902,
		73018,
		49062,
		46280,
		61742,
		21512,
		40862,
		107733,
		15941,
		29168,
		157765,
		144919,
		14487,
		5767,
		158014,
		140070,
		7241,
		573,
		71584,
		16921,
		223566,
		40331,
		179473,
		35081,
		47926,
		140885,
		41508,
		52104,
		59180,
		42310,
		32811,
		29048,
		123517,
		102413,
		80208,
		10104,
		14746,
		12649,
		153641,
		126022,
		37965,
		113017,
		4171,
		83,
		142592,
		2809,
		6362,
		50416,
		71323,
		116894,
		260776,
		16204,
		1524,
		5760,
		30351,
		12658,
		20703,
		54403,
		36083,
		45408,
		74772,
		4946,
		14485,
		50759,
		111222,
		10890,
		2195,
		167147,
		92962,
		130534,
		16283,
		177256,
		35016,
		15472,
		210156,
		151187,
		73922,
		117691,
		43250,
		52051,
		37392,
		24811,
		24358,
		30830,
		5775,
		818,
		21969,
		1476,
		127322,
		151783,
		58392,
		31021,
		106913,
		65215,
		89407,
		90802,
		28531,
		11690,
		20234,
		95249,
		44602,
		37256,
		18707,
		11928,
		5161,
		4410,
		26571,
		51903,
		49768,
		22008,
		25252,
		65780,
		209499,
		68769,
		203726,
		13249,
		137363,
		48845,
		86823,
		6658,
		5674,
		31881,
		1083,
		1823,
		108676,
		34518,
		166752,
		13791,
		14287,
		91576,
		91429,
		8665,
		11529,
		26401,
		16191,
		91972,
		30964,
		5254,
		28486,
		54697,
		79613,
		66520,
		18447,
		22870,
		45203,
		194466,
		22822,
		51703,
		12278,
		76716,
		44595,
		73455,
		33546,
		12235,
		144843,
		36154,
		51247,
		11116,
		33040,
		3180,
		225753,
		60864,
		1972,
		28469,
		12891,
		28879,
		10338,
		144157,
		56294,
		353058,
		38302,
		41447,
		87532,
		110616,
		27065,
		168438,
		6557,
		1213,
		50804,
		144643,
		24817,
		2390,
		136531,
		38174,
		247513,
		16190,
		4059,
		122791,
		131994,
		137430,
		39506,
		57650,
		16305,
		5188,
		54309,
		106128,
		20628,
		88071,
		67394,
		395446,
		250285,
		66176,
		91254,
		1399,
		114196,
		43915,
		60230,
		44853,
		27206,
		106353,
		43013,
		18733,
		345105,
		226453,
		51202,
		16607,
		57106,
		117175,
		35492,
		10476,
		89598,
		127439,
		15187,
		39624,
		13688,
		61570,
		10615,
		31111,
		59370,
		6238,
		175252,
		32143,
		224492,
		41388,
		95408,
		34384,
		148238,
		78307,
		38959,
		9340,
		160091,
		61443,
		15737,
		11216,
		41244,
		170,
		38299,
		102443,
		113097,
		26382,
		14027,
		33707,
		3957,
		76300,
		66160,
		19431,
		18900,
		6952,
		1717,
		108656,
		82206,
		188021,
		257335,
		27295,
		43999,
		41210,
		31777,
		46956,
		57457,
		12657,
		11489,
		15697,
		48060,
		204748,
		53583,
		82422,
		284790,
		30503,
		137341,
		8120,
		19615,
		220311,
		15991,
		10217,
		63424,
		9808,
		67431,
		70976,
		98221,
		4491,
		15177,
		28535,
		144789,
		751,
		13230,
		2394,
		1504,
		33977,
		132104,
		30316,
		22230,
		931,
		97193,
		185240,
		24826,
		22687,
		174322,
		15307,
		22988,
		1390,
		188745,
		180325,
		29580,
		59068,
		74903,
		18994,
		29195,
		79,
		15436,
		7622,
		38462,
		11566,
		138710,
		44828,
		45774,
		37768,
		99236,
		68137,
		84083,
		19282,
		22698,
		17134,
		74807,
		126662,
		173497,
		46248,
		16938,
		119735,
		3212,
		28292,
		213652,
		49013,
		9975,
		32180,
		45660,
		86250,
		4801,
		68788,
		95490,
		77482,
		113751,
		11994,
		44624,
		94452,
		46839,
		128497,
		100316,
		5798,
		58588,
		73184,
		202987,
		65417,
		37790,
		88524,
		1606,
		43156,
		97964,
		105717,
		34947,
		11203,
		100060,
		37742,
		130074,
		93653,
		107799,
		94311,
		196106,
		41347,
		8035,
		10780,
		16390,
		27883,
		118236,
		167395,
		1979,
		25006,
		19375,
		31628,
		18916,
		144723,
		78502,
		114047,
		103107,
		86492,
		107686,
		5844,
		20934,
		206963,
		23556,
		22591,
		16562,
		146333,
		20167,
		10471,
		117434,
		33085,
		2863,
		9740,
		36669,
		41849,
		37271,
		22790,
		18209,
		28979,
		8231,
		12952,
		54408,
		21731,
		25130,
		45208,
		55748,
		138120,
		75826,
		414,
		29593,
		9925,
		292865,
		25999,
		683,
		123149,
		7036,
		92159,
		86055,
		61827,
		103680,
		23176,
		54918,
		58466,
		57578,
		13305,
		5709,
		86479,
		16697,
		31064,
		17660,
		200919,
		10770,
		49793,
		33423,
		32370,
		52047,
		16488,
		62555,
		6459,
		8426,
		83493,
		7763,
		59725,
		82812,
		18628,
		67760,
		79405,
		68557,
		9612,
		7673,
		28102,
		56517,
		69620,
		171797,
		32458,
		29541,
		15870,
		81109,
		32080,
		207644,
		71495,
		21202,
		11039,
		91036,
		61230,
		2810,
		130800,
		32260,
		4613,
		60590,
		37112,
		75214,
		33979,
		126402,
		155062,
		30642,
		63875,
		12810,
		194463,
		82799,
		47664,
		16725,
		36685,
		43367,
		61099,
		449,
		172150,
		102867,
		21691,
		301838,
		36745,
		7130,
		18671,
		57316,
		34852,
		38034,
		54182,
		35578,
		65900,
		99486,
		19771,
		3456,
		2658,
		16914,
		99866,
		28390,
		28109,
		8262,
		21147,
		34353,
		20006,
		4228,
		137085,
		1675,
		203023,
		283196,
		198286,
		214375,
		163329,
		290603,
		152574,
		40471,
		83506,
		30068,
		14730,
		23177,
		131539,
		34759,
		27668,
		32178,
		71896,
		104799,
		116305,
		85430,
		119262,
		42860,
		25160,
		8911,
		23428,
		49437,
		105322,
		6519,
		16203,
		6349,
		74711,
		1230,
		38045,
		8540,
		75165,
		44736,
		25909,
		51026,
		317034,
		4984,
		32281,
		91312,
		27060,
		44431,
		17817,
		45363,
		155937,
		239085,
		35697,
		59784,
		91993,
		29531,
		126740,
		213757,
		76560,
		167776,
		285273,
		24262,
		8237,
		65030,
		41160,
		74437,
		48804,
		118916,
		13159,
		37842,
		1031,
		75349,
		1478,
		11655,
		108777,
		23435,
		277425,
		101734,
		67469,
		70231,
		124711,
		43532,
		28514,
		65526,
		54956,
		1000,
		21882,
		17728,
		25302,
		40952,
		52214,
		149632,
		1999,
		2111,
		3259,
		63362,
		89961,
		220561,
		39777,
		26335,
		9063,
		10572,
		12416,
		34551,
		34623,
		38604,
		24723,
		5947,
		15588,
		69927,
		66252,
		119177,
		69173,
		46629,
		28714,
		70715,
		212408,
		20521,
		406913,
		74380,
		11716,
		50659,
		50862,
		37009,
		88460,
		130101,
		7210,
		53853,
		538,
		65120,
		151950,
		55806,
		163748,
		52837,
		13153,
		21100,
		16674,
		64536,
		6091,
		138201,
		44837,
		58547,
		3723,
		163,
		2177,
		32288,
		85454,
		34033,
		8497,
		14282,
		25742,
		10535,
		10741,
		79559,
		117493,
		243787,
		49337,
		100718,
		79495,
		40139,
		42956,
		7551,
		55433,
		15421,
		31509,
		23034,
		45081,
		547,
		61176,
		53434,
		328001,
		8470,
		36263,
		30145,
		4519,
		74173,
		53935,
		11845,
		73774,
		60211,
		78025,
		3,
		4102,
		73782,
		109293,
		315332,
		48412,
		26683,
		13714,
		6865,
		20128,
		18490,
		104141,
		325,
		39470,
		171970,
		115860,
		15707,
		7268,
		73301,
		74336,
		31370,
		2368,
		111827,
		107757,
		136231,
		142844,
		97138,
		96638,
		84053,
		38691,
		23801,
		1588,
		10573,
		122098,
		77039,
		240,
		186135,
		146101,
		11996,
		18143,
		112963,
		46171,
		155836,
		348769,
		47795,
		121213,
		116266,
		132515,
		3344,
		144804,
		31286,
		99187,
		255838,
		129694,
		35894,
		48779,
		55235,
		148582,
		71967,
		65282,
		15174,
		13920,
		47080,
		6147,
		108242,
		157593,
		125025,
		7136,
		1286,
		28957,
		127956,
		28402,
		98813,
		20805,
		7532,
		109417,
		40610,
		5041,
		32958,
		15142,
		18408,
		108596,
		33543,
		50517,
		27748,
		80114,
		233434,
		91447,
		487,
		37094,
		100048,
		30541,
		43477,
		10639,
		89862,
		155868,
		37667,
		8726,
		60684,
		237903,
		73408,
		99589,
		12190,
		38739,
		97348,
		3914,
		13594,
		2680,
		149016,
		13907,
		30171,
		28343,
		23530,
		115225,
		61104,
		35821,
		147679,
		14337,
		4297,
		244282,
		24085,
		326976,
		56428,
		7851,
		21303,
		131620,
		71446,
		83253,
		68692,
		111870,
		5224,
		15813,
		38197,
		49026,
		45057,
		13660,
		3306,
		76345,
		40671,
		27905,
		91072,
		996,
		68527,
		62085,
		91351,
		122634,
		55109,
		168209,
		2024,
		27560,
		112707,
		17352,
		8306,
		167115,
		169921,
		166958,
		5031,
		46020,
		11844,
		67284,
		19130,
		76185,
		6920,
		32849,
		5450,
		14610,
		22451,
		21002,
		17392,
		31872,
		66682,
		84796,
		13709,
		40210,
		59898,
		12029,
		8719,
		53564,
		21462,
		91884,
		21647,
		88379,
		194428,
		12754,
		37797,
		132826,
		160016,
		22567,
		54383,
		53186,
		77611,
		31107,
		8339,
		4694,
		19185,
		90355,
		23597,
		17222,
		140675,
		28442,
		23668,
		55977,
		9128,
		61555,
		28774,
		155229,
		17658,
		9390,
		24379,
		69357,
		15752,
		127381,
		239631,
		62460,
		93181,
		55913,
		45133,
		140155,
		18676,
		25249,
		33164,
		29581,
		82837,
		67223,
		22362,
		29975,
		7317,
		52813,
		1943,
		29613,
		20012,
		207130,
		49617,
		49651,
		5636,
		15334,
		36313,
		29226,
		28084,
		95247,
		72072,
		19000,
		224932,
		15811,
		114,
		32127,
		38097,
		37508,
		88507,
		37225,
		27359,
		91626,
		12193,
		69279,
		20608,
		11055,
		88156,
		92808,
		2152,
		57259,
		55275,
		72789,
		24475,
		104414,
		1708,
		9882,
		3818,
		48661,
		66897,
		1631,
		34806,
		227930,
		85815,
		87753,
		18321,
		250664,
		72733,
		25107,
		206797,
		50891,
		8082,
		196411,
		92596,
		96764,
		152823,
		65514,
		22819,
		387277,
		62176,
		51225,
		40329,
		15563,
		189,
		3659,
		73670,
		64357,
		51793,
		275136,
		33482,
		86653,
		74615,
		67058,
		11318,
		125720,
		15388,
		22388,
		8267,
		1730,
		102663,
		170910,
		40784,
		7144,
		85373,
		13040,
		7088,
		94309,
		583,
		44224,
		140424,
		77439,
		18496,
		164026,
		36578,
		4722,
		9151,
		5824,
		63365,
		26510,
		35199,
		40500,
		79277,
		32495,
		44614,
		35233,
		9566,
		203293,
		152144,
		7097,
		2330,
		183480,
		98629,
		13423,
		330887,
		44130,
		68600,
		30939,
		97829,
		31012,
		345465,
		56747,
		94879,
		4939,
		160027,
		149761,
		99423,
		46099,
		32251,
		15332,
		8761,
		96094,
		128555,
		5763,
		235318,
		222223,
		55729,
		30241,
		55420,
		201746,
		3987,
		81382,
		8259,
		49325,
		23287,
		7719,
		24633,
		251100,
		92311,
		18591,
		110533,
		64759,
		170260,
		393860,
		7175,
		21144,
		132887,
		3593,
		75346,
		101277,
		91109,
		16387,
		259187,
		11627,
		57459,
		173829,
		44694,
		55780,
		49797,
		89192,
		120443,
		62622,
		3904,
		14814,
		23887,
		1027,
		112258,
		64955,
		99800,
		11132,
		66353,
		36202,
		48624,
		18158,
		88481,
		96882,
		43059,
		11040,
		2455,
		7077,
		21651,
		181159,
		99126,
		100434,
		61388,
		68186,
		19161,
		110468,
		120052,
		8819,
		55324,
		41494,
		7014,
		37689,
		3618,
		87729,
		92615,
		207943,
		9823,
		128657,
		12587,
		15857,
		6379,
		67628,
		51216,
		71775,
		157617,
		63244,
		1503,
		3864,
		218754,
		110864,
		5769,
		21492,
		7243,
		1192,
		87921,
		85529,
		31512,
		18537,
		42698,
		35350,
		73510,
		84474,
		34301,
		8991,
		21013,
		35034,
		566,
		38832,
		19838,
		35586,
		37216,
		39413,
		55006,
		12178,
		59742,
		856,
		84563,
		6900,
		25632,
		17437,
		49786,
		30723,
		13847,
		70845,
		4044,
		7843,
		23944,
		235976,
		55530,
		48942,
		6518,
		20939,
		73769,
		192653,
		52936,
		95207,
		23895,
		132542,
		142982,
		22632,
		87452,
		48042,
		54018,
		178468,
		10728,
		26230,
		23559,
		363,
		81269,
		142012,
		5718,
		346258,
		31456,
		84333,
		246476,
		51018,
		66692,
		101804,
		120570,
		39962,
		30373,
		70593,
		2864,
		60541,
		19425,
		54209,
		104092,
		7201,
		31545,
		48018,
		25865,
		15442,
		46257,
		40443,
		8328,
		6451,
		111782,
		47527,
		97754,
		33046,
		470,
		245116,
		31095,
		39,
		91934,
		87208,
		73470,
		36708,
		36521,
		12801,
		70624,
		36272,
		8892,
		79768,
		12427,
		55454,
		103756,
		5908,
		52390,
		62962,
		22720,
		141138,
		94634,
		41689,
		128402,
		126390,
		6628,
		106394,
		35527,
		134394,
		82727,
		254651,
		194502,
		148064,
		89549,
		3202,
		28359,
		957,
		21954,
		27906,
		49840,
		142747,
		8307,
		24206,
		48978,
		1186,
		71728,
		133038,
		71474,
		91306,
		6333,
		110959,
		74600,
		70387,
		18983,
		62609,
		56057,
		22970,
		1147,
		135850,
		1321,
		28834,
		3578,
		59715,
		102227,
		32827,
		81415,
		99952,
		55636,
		257598,
		390,
		22702,
		35701,
		85872,
		402916,
		39216,
		189795,
		14929,
		19467,
		10112,
		144422,
		61514,
		5279,
		63421,
		134686,
		41436,
		8424,
		51925,
		10598,
		132295,
		124416,
		4604,
		194739,
		210929,
		57866,
		31829,
		51626,
		50007,
		9976,
		91878,
		61906,
		56168,
		81906,
		60918,
		61859,
		40017,
		23059,
		16887,
		40927,
		62064,
		12785,
		32893,
		32913,
		21782,
		93965,
		20169,
		44387,
		79084,
		38463,
		11457,
		93950,
		27127,
		157050,
		2697,
		337088,
		5116,
		54128,
		48255,
		33279,
		8821,
		27352,
		25515,
		124022,
		65710,
		28906,
		38557,
		33390,
		1722,
		104435,
		72215,
		38551,
		12094,
		30978,
		25113,
		6671,
		37355,
		175109,
		42862,
		98024,
		65406,
		221276,
		59624,
		118012,
		64637,
		78760,
		86697,
		21426,
		1639,
		40350,
		12584,
		67193,
		84144,
		31396,
		7863,
		143011,
		69629,
		63112,
		9454,
		28666,
		65798,
		46372,
		134721,
		6314,
		51402,
		30837,
		151922,
		2847,
		38676,
		38008,
		92823,
		136245,
		17540,
		5504,
		109295,
		205242,
		37606,
		5211,
		214892,
		1586,
		20670,
		208711,
		137743,
		19328,
		40652,
		16995,
		20023,
		14657,
		154919,
		34422,
		12996,
		13918,
		38221,
		47690,
		16398,
		2959,
		37680,
		89122,
		6721,
		198469,
		91876,
		172043,
		83898,
		101992,
		26084,
		94570,
		3635,
		76958,
		22853,
		76497,
		38266,
		176590,
		168403,
		44464,
		142840,
		79180,
		184594,
		1984,
		41806,
		83147,
		11985,
		6546,
		366068,
		59732,
		24533,
		271505,
		8736,
		39084,
		222992,
		93429,
		28962,
		58985,
		86665,
		8432,
		30028,
		14548,
		32439,
		54424,
		165029,
		55175,
		27458,
		69046,
		121277,
		46168,
		33732,
		20661,
		24581,
		135574,
		123110,
		37556,
		79260,
		72611,
		16957,
		12939,
		46162,
		58238,
		44907,
		72936,
		253758,
		41324,
		32518,
		96480,
		11949,
		124438,
		65280,
		43256,
		34107,
		53533,
		43531,
		37037,
		28366,
		45970,
		32741,
		173438,
		6121,
		194202,
		62969,
		26355,
		30314,
		58370,
		28455,
		1848,
		50519,
		82830,
		90393,
		21761,
		295490,
		10936,
		256940,
		133568,
		44050,
		20269,
		4089,
		27457,
		21610,
		219460,
		36743,
		14821,
		101388,
		52005,
		13124,
		30979,
		140816,
		167362,
		26054,
		18458,
		60789,
		34917,
		40447,
		26606,
		33422,
		9066,
		3452,
		83614,
		5761,
		20263,
		137238,
		25038,
		91310,
		101,
		52322,
		74548,
		42572,
		38084,
		214054,
		186568,
		31802,
		17665,
		30620,
		141936,
		37730,
		14420,
		4265,
		187218,
		49640,
		188208,
		51441,
		55388,
		96452,
		66659,
		40869,
		42039,
		60967,
		221027,
		19234,
		178581,
		29105,
		96050,
		9165,
		196118,
		157335,
		3738,
		40354,
		117436,
		2965,
		34136,
		59659,
		15570,
		50843,
		230035,
		31444,
		71260,
		43886,
		18316,
		5387,
		38500,
		168508,
		17406,
		32174,
		8828,
		103373,
		143806,
		90367,
		3560,
		18719,
		122310,
		16508,
		26719,
		2541,
		105429,
		6645,
		37998,
		73190,
		10591,
		235916,
		49737,
		87112,
		233941,
		53188,
		32193,
		79154,
		4544,
		52905,
		126477,
		7580,
		63501,
		57314,
		3216,
		31337,
		6541,
		103083,
		60846,
		49,
		9756,
		15481,
		1355,
		43840,
		14319,
		13743,
		27486,
		10222,
		73114,
		230718,
		418644,
		16706,
		6674,
		279748,
		23058,
		45273,
		295831,
		86306,
		2743,
		5535,
		88773,
		21829,
		35253,
		120938,
		31153,
		3169,
		16839,
		42847,
		8751,
		80974,
		33942,
		36867,
		35514,
		16485,
		26474,
		77775,
		56877,
		5391,
		48346,
		3882,
		108713,
		31403,
		27804,
		55248,
		26235,
		43821,
		136104,
		40118,
		175507,
		28034,
		203908,
		18732,
		1788,
		34030,
		106427,
		36958,
		54359,
		7251,
		44936,
		15356,
		69139,
		455,
		157915,
		22173,
		140291,
		50348,
		43275,
		82066,
		49621,
		54952,
		15216,
		36226,
		96695,
		66855,
		6936,
		1987,
		8227,
		196087,
		4631,
		68827,
		99004,
		47541,
		110265,
		17953,
		147605,
		110242,
		58520,
		31312,
		38724,
		329975,
		642,
		3155,
		34497,
		75937,
		6207,
		73843,
		6120,
		17249,
		51429,
		117746,
		3218,
		910,
		68961,
		319671,
		14938,
		29555,
		34700,
		1649,
		66673,
		72268,
		9655,
		76800,
		153087,
		6941,
		210168,
		27130,
		35398,
		1780,
		73242,
		3135,
		56689,
		19556,
		165307,
		8765,
		35967,
		121458,
		13333,
		70453,
		17350,
		117253,
		22265,
		13340,
		44265,
		39869,
		441,
		3742,
		135025,
		23581,
		33309,
		16543,
		17731,
		13291,
		157637,
		283005,
		21408,
		101360,
		63887,
		52312,
		83873,
		5338,
		233779,
		23759,
		186949,
		34531,
		177320,
		38069,
		156465,
		91004,
		19353,
		59852,
		68160,
		14891,
		1338,
		1072,
		29823,
		1950,
		28901,
		81407,
		313445,
		73038,
		84807,
		162348,
		240257,
		37162,
		138934,
		16111,
		58013,
		41253,
		102951,
		16457,
		96056,
		19541,
		56402,
		67217,
		41638,
		94381,
		89674,
		29481,
		37456,
		80815,
		151579,
		13937,
		13683,
		132537,
		19699,
		134545,
		67020,
		29816,
		222341,
		141235,
		427578,
		48868,
		129557,
		233342,
		23077,
		87871,
		16213,
		18728,
		16184,
		9469,
		37913,
		19680,
		2798,
		171356,
		178328,
		13216,
		50049,
		72690,
		71904,
		124644,
		55455,
		7504,
		29052,
		41036,
		266546,
		19899,
		30391,
		188755,
		8659,
		59469,
		16,
		104298,
		112943,
		53865,
		76203,
		138226,
		68857,
		139953,
		14125,
		107625,
		119795,
		173133,
		4398,
		50273,
		48808,
		54390,
		16466,
		122086,
		31835,
		67035,
		50971,
		48859,
		7508,
		46427,
		66477,
		73021,
		84615,
		39985,
		83076,
		46779,
		201569,
		53336,
		36443,
		60865,
		168164,
		143810,
		51393,
		25548,
		169307,
		32896,
		24485,
		38424,
		21837,
		29087,
		275813,
		51674,
		6714,
		64883,
		46169,
		187369,
		55186,
		76192,
		12852,
		12018,
		62134,
		31067,
		118303,
		16542,
		12125,
		10579,
		4928,
		26291,
		43854,
		7091,
		10946,
		253716,
		109062,
		39283,
		17261,
		113012,
		258512,
		47764,
		125126,
		32646,
		55892,
		80279,
		201623,
		149872,
		3192,
		385,
		1208,
		48750,
		5376,
		58738,
		22335,
		5427,
		82416,
		47811,
		32435,
		143086,
		38930,
		94128,
		59975,
		156037,
		37977,
		38224,
		62485,
		7698,
		50405,
		71027,
		16462,
		21559,
		136153,
		34131,
		107506,
		162069,
		63703,
		3101,
		215029,
		40407,
		4178,
		3774,
		9187,
		80019,
		17880,
		97926,
		67579,
		2600,
		18405,
		8351,
		47924,
		86638,
		70820,
		92206,
		86453,
		29610,
		42241,
		119200,
		3198,
		15466,
		67813,
		57863,
		35454,
		4779,
		99518,
		4649,
		104641,
		144269,
		33730,
		38073,
		65864,
		6838,
		109456,
		193298,
		154007,
		5623,
		45741,
		30846,
		182578,
		25573,
		157224,
		1543,
		58575,
		138703,
		146140,
		44971,
		49356,
		18275,
		59064,
		20300,
		13122,
		11848,
		24453,
		11973,
		9797,
		86843,
		2919,
		25530,
		49210,
		1130,
		161220,
		76788,
		75373,
		85604,
		34926,
		36014,
		17777,
		17255,
		51533,
		11676,
		92226,
		51845,
		119859,
		21525,
		5936,
		18507,
		28050,
		1140,
		31418,
		14857,
		34207,
		47859,
		10750,
		36382,
		32079,
		106909,
		59426,
		87757,
		38393,
		110042,
		15965,
		97104,
		33757,
		35344,
		97993,
		53979,
		33651,
		45407,
		41884,
		82515,
		173089,
		7177,
		58371,
		35365,
		47543,
		51927,
		35587,
		10670,
		23544,
		29306,
		84233,
		39976,
		76076,
		62097,
		9007,
		8668,
		28119,
		78281,
		120790,
		19835,
		143020,
		54968,
		18670,
		64959,
		20649,
		34469,
		42570,
		33001,
		136570,
		87796,
		120044,
		1106,
		58700,
		63951,
		127623,
		12805,
		83057,
		40212,
		31773,
		49850,
		7361,
		54336,
		347524,
		101314,
		23751,
		19569,
		48791,
		29174,
		49369,
		20467,
		7465,
		75842,
		38281,
		623,
		112457,
		60210,
		28849,
		51003,
		94720,
		6426,
		90047,
		85560,
		43761,
		3579,
		85105,
		34607,
		90410,
		118528,
		7224,
		42907,
		111163,
		18168,
		6960,
		161135,
		191298,
		5247,
		100584,
		127552,
		171568,
		20121,
		91173,
		12636,
		54615,
		20199,
		63730,
		98105,
		2396,
		40387,
		14438,
		125012,
		4765,
		33235,
		12865,
		45299,
		37728,
		82098,
		77872,
		114037,
		59253,
		19675,
		24838,
		398016,
		102561,
		11446,
		17069,
		57508,
		178277,
		65836,
		99941,
		26114,
		2585,
		271882,
		136866,
		50126,
		11027,
		155648,
		118367,
		14585,
		8910,
		123015,
		335383,
		40434,
		41016,
		53021,
		14439,
		87098,
		176860,
		201543,
		121888,
		2358,
		9286,
		5739,
		22666,
		54270,
		37884,
		169381,
		33984,
		93859,
		16124,
		89364,
		72207,
		51639,
		76366,
		99029,
		65812,
		2198,
		12147,
		174891,
		194289,
		6986,
		30252,
		88822,
		21284,
		11445,
		288337,
		160821,
		33034,
		100869,
		43852,
		25761,
		52882,
		1144,
		103809,
		1924,
		84458,
		86079,
		43411,
		13542,
		139276,
		18141,
		34978,
		41298,
		7276,
		26481,
		173800,
		33210,
		17951,
		142652,
		33616,
		33677,
		2210,
		19941,
		98568,
		2486,
		192414,
		80136,
		12058,
		235883,
		50963,
		249638,
		29572,
		27221,
		47034,
		6124,
		72107,
		63346,
		97620,
		158513,
		299699,
		40388,
		23235,
		37176,
		224244,
		198386,
		121323,
		67992,
		23827,
		63170,
		17838,
		106622,
		158590,
		26807,
		5345,
		23489,
		91891,
		55474,
		74834,
		37981,
		13058,
		5977,
		72552,
		34706,
		26828,
		145172,
		19904,
		21367,
		34043,
		960,
		77092,
		91381,
		4733,
		47446,
		7680,
		41697,
		5170,
		16960,
		14741,
		46101,
		13656,
		473,
		51842,
		37433,
		11103,
		11551,
		121951,
		13191,
		97536,
		165932,
		50397,
		51628,
		129028,
		9069,
		44885,
		6590,
		59195,
		47045,
		32940,
		225472,
		90345,
		21833,
		13303,
		29407,
		96615,
		141951,
		5198,
		6028,
		18395,
		7181,
		3861,
		14966,
		156358,
		167182,
		36529,
		55253,
		25942,
		173153,
		30959,
		27261,
		50691,
		150176,
		162201,
		38467,
		48462,
		80602,
		42163,
		118482,
		168,
		108756,
		26011,
		17166,
		54149,
		456538,
		22512,
		91374,
		13816,
		90358,
		131615,
		18132,
		226707,
		1824,
		28139,
		26860,
		42253,
		93877,
		77351,
		65575,
		8980,
		80574,
		22020,
		27948,
		40422,
		91324,
		76376,
		13528,
		39281,
		91685,
		82215,
		122541,
		144066,
		1983,
		193851,
		17283,
		26320,
		2739,
		194978,
		4790,
		26845,
		42627,
		61300,
		65815,
		174612,
		55133,
		4200,
		191130,
		79771,
		158321,
		52280,
		166796,
		221620,
		62461,
		11278,
		4067,
		88152,
		83409,
		31717,
		121367,
		13522,
		47325,
		37945,
		10406,
		174348,
		249321,
		154101,
		64912,
		29938,
		51775,
		17220,
		15776,
		166138,
		78890,
		84425,
		54121,
		42861,
		16368,
		24572,
		291647,
		10197,
		32073,
		22651,
		11677,
		97509,
		26952,
		35787,
		18424,
		41910,
		71614,
		94977,
		72318,
		41594,
		70024,
		275419,
		37702,
		60199,
		7335,
		39107,
		61315,
		18271,
		18394,
		33768,
		87884,
		104277,
		123724,
		7277,
		56288,
		71981,
		189803,
		49320,
		3352,
		6798,
		14240,
		8954,
		69220,
		94433,
		57372,
		28620,
		68863,
		193727,
		85575,
		42309,
		41667,
		67689,
		42081,
		22543,
		44824,
		12719,
		28540,
		114236,
		101553,
		27638,
		27296,
		4300,
		5353,
		4663,
		19379,
		94098,
		3758,
		95888,
		95144,
		80344,
		87320,
		28447,
		259518,
		12718,
		71391,
		152731,
		37063,
		24132,
		31911,
		104896,
		15672,
		103782,
		1521,
		4945,
		72541,
		23717,
		122632,
		15619,
		87175,
		206120,
		29428,
		189780,
		61416,
		28350,
		44457,
		972,
		1175,
		47233,
		198738,
		95789,
		41907,
		21953,
		97034,
		59341,
		22864,
		53713,
		16873,
		32971,
		20693,
		20954,
		31336,
		21477,
		16169,
		38370,
		16412,
		9019,
		3841,
		24599,
		21938,
		17085,
		6484,
		81198,
		76413,
		5849,
		72514,
		12320,
		65247,
		276175,
		37234,
		59796,
		52642,
		16312,
		57349,
		198507,
		94148,
		46134,
		18958,
		125552,
		1747,
		18725,
		151873,
		14901,
		5490,
		68287,
		29470,
		3689,
		64794,
		40814,
		26018,
		25692,
		54450,
		2703,
		88278,
		124886,
		173087,
		174000,
		24159,
		179477,
		24276,
		46004,
		201876,
		209202,
		445,
		52876,
		31948,
		30206,
		157610,
		39180,
		18439,
		44124,
		50469,
		5774,
		96278,
		222758,
		200216,
		50290,
		45486,
		20435,
		46986,
		46276,
		140133,
		142326,
		15569,
		13363,
		47522,
		92583,
		2182,
		7135,
		16853,
		22998,
		30272,
		4952,
		63263,
		35623,
		39096,
		53789,
		44864,
		20053,
		110392,
		124213,
		4630,
		16087,
		28221,
		127787,
		25839,
		77481,
		44693,
		13464,
		113146,
		6983,
		27069,
		55717,
		50102,
		4760,
		7107,
		26186,
		66507,
		59145,
		36032,
		104182,
		71328,
		29425,
		64317,
		50781,
		47465,
		94298,
		69706,
		74899,
		22754,
		120756,
		25108,
		93077,
		56834,
		73286,
		39928,
		16218,
		41699,
		176763,
		7555,
		70819,
		50083,
		26895,
		23315,
		26014,
		16773,
		123079,
		41712,
		5719,
		31516,
		90427,
		158540,
		85051,
		183128,
		40864,
		27505,
		55392,
		9058,
		45224,
		96857,
		30901,
		136622,
		96557,
		56304,
		120061,
		11501,
		151448,
		5773,
		89743,
		7769,
		86069,
		2935,
		18471,
		41628,
		10114,
		33660,
		110170,
		49479,
		26745,
		92846,
		33221,
		26731,
		18795,
		87076,
		8550,
		2100,
		29972,
		120289,
		3077,
		72490,
		33784,
		2630,
		208722,
		50861,
		63483,
		79029,
		6419,
		39467,
		14302,
		45286,
		64207,
		9686,
		67513,
		44170,
		1050,
		77246,
		59266,
		17055,
		53801,
		7150,
		11111,
		42432,
		4278,
		94579,
		362117,
		36175,
		42902,
		41933,
		39002,
		98489,
		22913,
		74161,
		84773,
		57036,
		17556,
		162288,
		74485,
		178760,
		93867,
		73635,
		128860,
		50362,
		261,
		67455,
		80001,
		46080,
		35662,
		4368,
		25247,
		19230,
		74393,
		22588,
		1822,
		27682,
		235324,
		13798,
		85998,
		13194,
		235067,
		23514,
		71669,
		147632,
		23191,
		134748,
		214683,
		105101,
		1518,
		25489,
		247114,
		7380,
		54842,
		26922,
		3971,
		26361,
		20844,
		68642,
		170517,
		77339,
		123255,
		8963,
		77818,
		150998,
		48466,
		36806,
		2732,
		23261,
		11741,
		236162,
		18243,
		126216,
		28690,
		50546,
		16385,
		92760,
		197383,
		246558,
		201295,
		88255,
		67588,
		71687,
		176076,
		172653,
		169058,
		33906,
		63747,
		24835,
		157621,
		43338,
		30050,
		46152,
		132741,
		2770,
		51371,
		94835,
		6614,
		15112,
		11749,
		56936,
		1250,
		19027,
		399017,
		58036,
		100215,
		23388,
		55815,
		308768,
		124152,
		94803,
		9521,
		64186,
		8971,
		28,
		30427,
		62163,
		7616,
		103838,
		35079,
		29203,
		131235,
		7743,
		17389,
		10882,
		37420,
		61460,
		228512,
		85363,
		41581,
		131077,
		62822,
		119647,
		10130,
		54445,
		26925,
		19968,
		29016,
		24446,
		74028,
		24176,
		61448,
		67185,
		9254,
		8563,
		119129,
		9771,
		99184,
		37716,
		39514,
		10532,
		221512,
		258753,
		218630,
		55980,
		23394,
		32141,
		61924,
		66749,
		32411,
		3741,
		36475,
		26678,
		77010,
		44946,
		91203,
		128749,
		116953,
		20476,
		49625,
		53116,
		13735,
		102335,
		29376,
		51946,
		83407,
		67892,
		59212,
		34685,
		21083,
		1546,
		112982,
		32972,
		74397,
		1078,
		190545,
		16082,
		86140,
		58591,
		89611,
		101531,
		10061,
		105104,
		76319,
		20035,
		17551,
		52611,
		169061,
		190842,
		100780,
		23907,
		90413,
		115619,
		9675,
		34710,
		193435,
		49443,
		129734,
		11183,
		258877,
		16318,
		136182,
		126808,
		44635,
		27304,
		192375,
		2599,
		125648,
		47051,
		12091,
		23814,
		721,
		58800,
		40137,
		66726,
		97930,
		60877,
		74487,
		7942,
		54326,
		9841,
		41428,
		13762,
		8211,
		85383,
		6950,
		99177,
		79806,
		201786,
		296464,
		124087,
		13144,
		29741,
		41721,
		47634,
		55088,
		254286,
		106408,
		17041,
		99064,
		12942,
		64086,
		45233,
		14005,
		2612,
		55827,
		255,
		7984,
		13980,
		38574,
		12776,
		46654,
		73499,
		249951,
		2101,
		26676,
		25996,
		132326,
		116415,
		119062,
		50449,
		31033,
		23038,
		11589,
		179252,
		20007,
		14860,
		129270,
		21143,
		17796,
		144715,
		60106,
		70758,
		69842,
		34674,
		282133,
		44014,
		16774,
		57268,
		38528,
		24053,
		46373,
		201667,
		28327,
		471023,
		51889,
		102667,
		21193,
		114909,
		84132,
		69317,
		96723,
		67969,
		16134,
		68145,
		15058,
		28765,
		32035,
		2524,
		101089,
		98664,
		25045,
		76571,
		14957,
		86040,
		118506,
		262428,
		154764,
		81573,
		39681,
		283900,
		73287,
		127825,
		544,
		80448,
		52347,
		38512,
		175971,
		15180,
		45467,
		33086,
		46552,
		48894,
		81107,
		43213,
		36672,
		54025,
		76703,
		8053,
		7608,
		13299,
		56619,
		20752,
		238099,
		54164,
		105133,
		1444,
		32942,
		953,
		37564,
		8000,
		66316,
		119463,
		106817,
		404,
		13667,
		149108,
		128597,
		31267,
		10269,
		49836,
		106150,
		1484,
		52330,
		76965,
		160486,
		171648,
		38456,
		31263,
		22424,
		37738,
		66245,
		67467,
		143369,
		60471,
		75610,
		20895,
		115528,
		86070,
		60854,
		40796,
		49347,
		18989,
		15030,
		11371,
		37578,
		15779,
		79867,
		10187,
		86462,
		46402,
		155626,
		93200,
		40229,
		7090,
		57547,
		108053,
		99598,
		11088,
		47505,
		41218,
		206017,
		2173,
		20988,
		30219,
		22919,
		80563,
		57566,
		42369,
		93141,
		41675,
		2407,
		182519,
		120495,
		27154,
		16702,
		29456,
		14349,
		7958,
		16688,
		117177,
		140375,
		42467,
		261919,
		74916,
		153569,
		10836,
		34742,
		49526,
		7621,
		105997,
		12212,
		2270,
		392377,
		7755,
		17959,
		25086,
		232152,
		138791,
		33847,
		13860,
		35316,
		5811,
		1344,
		71259,
		50452,
		207539,
		92635,
		50359,
		5821,
		33674,
		30255,
		2086,
		2587,
		96264,
		17543,
		42,
		6029,
		9580,
		43007,
		139248,
		82831,
		12917,
		29607,
		25786,
		51467,
		42137,
		85161,
		100698,
		31561,
		88989,
		121990,
		278500,
		3602,
		109344,
		37982,
		15279,
		116442,
		28936,
		30880,
		87894,
		58079,
		128661,
		126731,
		67392,
		28051,
		146885,
		4861,
		16216,
		97344,
		42827,
		147561,
		153948,
		22684,
		21335,
		47685,
		1853,
		43349,
		15185,
		59642,
		10229,
		25520,
		187921,
		108972,
		5579,
		98037,
		24945,
		6697,
		19193,
		63734,
		137934,
		75056,
		89740,
		19767,
		224268,
		56138,
		63643,
		151661,
		39313,
		70618,
		84031,
		89723,
		84074,
		13703,
		85626,
		35460,
		8867,
		64845,
		3439,
		57906,
		99776,
		63968,
		49270,
		81130,
		34356,
		16210,
		23547,
		36446,
		34090,
		140028,
		72439,
		2221,
		22163,
		57058,
		363492,
		113754,
		18913,
		95451,
		48663,
		54464,
		54037,
		176097,
		68425,
		3023,
		34906,
		29482,
		117389,
		341780,
		80431,
		58330,
		16753,
		92616,
		60907,
		94846,
		147486,
		4498,
		48646,
		7773,
		46801,
		7778,
		18946,
		464978,
		47558,
		33223,
		177444,
		7328,
		15626,
		63337,
		94700,
		11743,
		9351,
		255024,
		39098,
		16447,
		42647,
		96230,
		39769,
		58840,
		10068,
		63439,
		35800,
		65843,
		58823,
		413844,
		9156,
		51258,
		7434,
		61791,
		85018,
		6872,
		3692,
		28096,
		7121,
		33024,
		6009,
		75532,
		31997,
		192535,
		9661,
		3304,
		9547,
		14753,
		31987,
		25314,
		55689,
		15896,
		20430,
		39472,
		31340,
		99744,
		25398,
		115569,
		54883,
		28719,
		205423,
		23071,
		57855,
		64638,
		149867,
		25671,
		82403,
		37616,
		20668,
		39989,
		77996,
		74948,
		140555,
		175248,
		64810,
		36515,
		46595,
		4958,
		248773,
		24045,
		28728,
		136673,
		168704,
		20804,
		114833,
		100325,
		27135,
		21205,
		96151,
		153134,
		45992,
		7093,
		13992,
		76047,
		1980,
		19432,
		145001,
		75159,
		87462,
		17710,
		1013,
		45556,
		34297,
		144882,
		20648,
		26061,
		11319,
		129567,
		108555,
		18872,
		464580,
		33386,
		22717,
		65948,
		167189,
		5603,
		135042,
		79542,
		8801,
		202632,
		18114,
		91882,
		5973,
		5239,
		67315,
		4431,
		60916,
		47819,
		71693,
		32597,
		32606,
		18183,
		45072,
		80329,
		76385,
		24749,
		51305,
		40314,
		156514,
		14693,
		130345,
		13168,
		66214,
		18029,
		12858,
		34801,
		27628,
		14544,
		10823,
		40522,
		40185,
		33739,
		148694,
		23548,
		9923,
		61012,
		28859,
		17933,
		19442,
		34364,
		99849,
		164107,
		141167,
		30629,
		21054,
		6744,
		36491,
		8096,
		42474,
		41706,
		155060,
		30650,
		10600,
		163442,
		1143,
		96655,
		61390,
		52359,
		7559,
		51568,
		64256,
		203854,
		4467,
		22453,
		14504,
		436398,
		7878,
		6980,
		8293,
		63610,
		293747,
		16167,
		35763,
		19627,
		147603,
		15419,
		18032,
		110744,
		51346,
		33681,
		54571,
		40472,
		48615,
		39073,
		21604,
		13754,
		173027,
		92560,
		11083,
		47299,
		63062,
		11813,
		52007,
		29883,
		9734,
		139722,
		15953,
		1550,
		20651,
		13616,
		49306,
		16113,
		90089,
		92326,
		7584,
		30712,
		72424,
		164858,
		6831,
		152871,
		55746,
		197721,
		34167,
		196442,
		6022,
		112107,
		55215,
		7538,
		123381,
		4920,
		43539,
		77165,
		8939,
		50392,
		34192,
		20225,
		79762,
		22505,
		58667,
		40770,
		29788,
		97180,
		82835,
		4568,
		8579,
		13273,
		363569,
		35898,
		49983,
		436,
		36598,
		3237,
		131691,
		62418,
		35591,
		8101,
		4073,
		379438,
		65218,
		76072,
		33887,
		2968,
		27573,
		212619,
		288680,
		68278,
		72851,
		150504,
		217896,
		6913,
		121339,
		22017,
		35340,
		51072,
		43616,
		75043,
		31437,
		10833,
		81487,
		4364,
		22968,
		41454,
		106687,
		85446,
		19863,
		109625,
		149241,
		524,
		141850,
		214404,
		54376,
		657,
		237023,
		9401,
		108137,
		53800,
		32474,
		49712,
		53334,
		126876,
		27337,
		45552,
		177696,
		8269,
		15036,
		12097,
		42240,
		2328,
		125374,
		119295,
		99715,
		2500,
		19624,
		39441,
		27220,
		102691,
		60957,
		94543,
		39101,
		18566,
		67362,
		13975,
		78230,
		25017,
		34017,
		239007,
		90027,
		39351,
		41681,
		35354,
		43822,
		1043,
		916,
		58587,
		141983,
		94818,
		38799,
		75459,
		41114,
		67432,
		16195,
		36606,
		59568,
		22272,
		126769,
		31424,
		68659,
		12287,
		134302,
		257977,
		5756,
		207285,
		95637,
		47248,
		117689,
		19583,
		77451,
		22373,
		12200,
		54993,
		117118,
		34244,
		29386,
		34562,
		53819,
		71267,
		64172,
		77665,
		49368,
		7716,
		59301,
		25749,
		45426,
		194789,
		17297,
		2650,
		1766,
		32501,
		45198,
		20403,
		20984,
		6600,
		14171,
		94604,
		19037,
		5402,
		29896,
		9938,
		59935,
		109708,
		88081,
		145182,
		44844,
		39167,
		352626,
		164173,
		35374,
		45982,
		6122,
		154,
		73419,
		220487,
		53834,
		53601,
		17992,
		8609,
		229321,
		5610,
		68098,
		66815,
		71012,
		95069,
		140968,
		27396,
		8957,
		134489,
		24656,
		86659,
		56598,
		134852,
		17316,
		123838,
		255436,
		6613,
		41610,
		138033,
		81452,
		32023,
		32396,
		123687,
		63398,
		8693,
		29712,
		30407,
		19296,
		121188,
		3551,
		36099,
		20032,
		111948,
		56624,
		16547,
		27453,
		35916,
		15378,
		52039,
		56849,
		13489,
		22214,
		73177,
		53097,
		277349,
		2157,
		14029,
		187886,
		10260,
		141743,
		246460,
		91880,
		50869,
		3788,
		49486,
		133566,
		54950,
		33120,
		129337,
		53768,
		18333,
		9525,
		26902,
		312251,
		10297,
		9020,
		70759,
		16647,
		112432,
		59260,
		84609,
		9818,
		82766,
		73569,
		468,
		46001,
		75780,
		55028,
		52106,
		11498,
		43645,
		108069,
		17150,
		17753,
		29417,
		16705,
		31799,
		9606,
		289,
		122254,
		115975,
		8620,
		6133,
		255357,
		56908,
		14456,
		133464,
		43554,
		79224,
		11247,
		29630,
		160,
		12756,
		25464,
		65960,
		350428,
		62521,
		321796,
		100359,
		67358,
		35169,
		46172,
		113128,
		48988,
		88868,
		31094,
		33266,
		6847,
		60887,
		98188,
		49659,
		69117,
		92977,
		220228,
		13947,
		80181,
		35103,
		62170,
		97351,
		13475,
		2440,
		199768,
		19498,
		36597,
		46971,
		25234,
		67806,
		62881,
		84717,
		73648,
		181966,
		10488,
		94149,
		21550,
		26655,
		63436,
		48375,
		14405,
		165650,
		9621,
		24439,
		28043,
		42735,
		4490,
		29963,
		56674,
		45373,
		1934,
		262446,
		50855,
		67098,
		26898,
		5261,
		52696,
		40644,
		33900,
		9440,
		180286,
		87162,
		22940,
		19704,
		26936,
		69769,
		10254,
		101759,
		27406,
		12243,
		48000,
		73926,
		113215,
		54935,
		5726,
		192787,
		4312,
		106216,
		9366,
		11550,
		52949,
		23457,
		212271,
		277152,
		133895,
		108374,
		6191,
		96477,
		29980,
		218916,
		58024,
		54696,
		40853,
		91124,
		65894,
		91170,
		65908,
		252552,
		6793,
		29212,
		15389,
		44516,
		122515,
		52617,
		35058,
		9017,
		103536,
		39510,
		49136,
		19242,
		130652,
		662077,
		74699,
		47024,
		31422,
		8517,
		73351,
		24399,
		13867,
		128360,
		4810,
		4434,
		61779,
		111983,
		61036,
		17798,
		110240,
		59722,
		102960,
		39688,
		10001,
		23803,
		23039,
		176498,
		56659,
		44814,
		134295,
		17188,
		77577,
		74466,
		226175,
		102472,
		154333,
		63900,
		111747,
		18062,
		41171,
		79669,
		32773,
		408933,
		42562,
		28931,
		30907,
		107388,
		43487,
		2946,
		240310,
		23938,
		24354,
		319,
		184983,
		7927,
		6488,
		1422,
		10790,
		68809,
		68209,
		64775,
		4361,
		202,
		17123,
		59634,
		51200,
		44391,
		18188,
		17843,
		2619,
		74278,
		3230,
		9540,
		47187,
		21702,
		36274,
		56894,
		43907,
		16310,
		34790,
		16866,
		6150,
		5561,
		13587,
		107545,
		108873,
		126867,
		86986,
		28640,
		33427,
		19017,
		5762,
		80637,
		17430,
		46903,
		2047,
		131055,
		25958,
		13558,
		5444,
		47152,
		13900,
		44563,
		122857,
		45348,
		70863,
		39593,
		54332,
		38068,
		33637,
		318,
		40310,
		143467,
		18502,
		24520,
		11377,
		62013,
		28942,
		27246,
		28269,
		83545,
		17999,
		59015,
		90707,
		30065,
		15161,
		34720,
		1263,
		37008,
		2012,
		6060,
		98575,
		92933,
		5721,
		299,
		199555,
		24578,
		29223,
		2985,
		743,
		115825,
		109523,
		136657,
		47454,
		26378,
		53586,
		3733,
		174945,
		93340,
		244456,
		5693,
		37386,
		28782,
		89767,
		27545,
		23573,
		18798,
		136425,
		34320,
		84778,
		20041,
		48453,
		38215,
		7477,
		71958,
		40621,
		8773,
		5874,
		187927,
		105965,
		51100,
		43533,
		18083,
		8443,
		10180,
		43597,
		2003,
		183999,
		69689,
		12216,
		129696,
		146188,
		62389,
		34044,
		68410,
		12765,
		43273,
		26949,
		266807,
		3345,
		34477,
		79197,
		5688,
		47539,
		213110,
		21634,
		22257,
		50092,
		32222,
		42346,
		39530,
		63668,
		98,
		134978,
		74022,
		5152,
		59088,
		174145,
		37220,
		9934,
		9545,
		118937,
		5724,
		87240,
		19875,
		15784,
		40143,
		23263,
		87513,
		181654,
		285152,
		37881,
		263241,
		4966,
		43934,
		10433,
		186657,
		6470,
		74416,
		225854,
		25908,
		142677,
		246262,
		32280,
		6192,
		75890,
		45546,
		143264,
		135305,
		29742,
		47013,
		77787,
		11732,
		126658,
		8763,
		37950,
		21806,
		57557,
		113464,
		89465,
		108995,
		164574,
		23894,
		22996,
		23169,
		15369,
		23117,
		17642,
		130607,
		40503,
		36239,
		280990,
		44666,
		9981,
		40427,
		147487,
		26869,
		168452,
		32886,
		32991,
		46798,
		240839,
		15111,
		70502,
		65697,
		88548,
		44145,
		28701,
		48767,
		31139,
		206777,
		35659,
		181164,
		166262,
		14554,
		171445,
		31786,
		66523,
		76607,
		17956,
		6507,
		31279,
		90476,
		116611,
		167918,
		6560,
		1243,
		115324,
		80128,
		41867,
		55897,
		187323,
		37069,
		32596,
		189444,
		145931,
		13390,
		105530,
		65709,
		26805,
		6999,
		55714,
		41300,
		22915,
		68951,
		22138,
		21120,
		22264,
		10058,
		19945,
		33635,
		56123,
		99085,
		10032,
		5818,
		6016,
		46649,
		57476,
		35264,
		94413,
		112522,
		262288,
		93686,
		83038,
		14341,
		23204,
		28807,
		66084,
		77987,
		6101,
		126673,
		7133,
		38126,
		5923,
		122091,
		170240,
		97772,
		46874,
		215746,
		43948,
		41622,
		3272,
		55596,
		8332,
		146411,
		251315,
		13533,
		8561,
		81521,
		115449,
		48616,
		175175,
		2063,
		186556,
		3036,
		134537,
		75772,
		29728,
		82360,
		22973,
		186559,
		86348,
		89100,
		38388,
		82297,
		45610,
		2613,
		87082,
		9986,
		177812,
		57884,
		23591,
		47485,
		42543,
		33582,
		44713,
		74439,
		257444,
		252451,
		31825,
		35631,
		38540,
		33066,
		5147,
		13973,
		4343,
		51830,
		70378,
		22827,
		26448,
		95560,
		36896,
		241741,
		48067,
		203953,
		298860,
		61620,
		20450,
		3220,
		67272,
		6586,
		107662,
		100160,
		108684,
		6929,
		57226,
		4762,
		7457,
		1320,
		40404,
		77204,
		99309,
		62750,
		208653,
		59977,
		44000,
		74315,
		34332,
		5819,
		172217,
		64904,
		114077,
		18147,
		84012,
		1791,
		98456,
		90930,
		21446,
		116669,
		103938,
		7422,
		85140,
		59713,
		5768,
		326211,
		16239,
		75411,
		13229,
		29398,
		10758,
		236107,
		1539,
		112472,
		95979,
		152154,
		151294,
		306,
		21196,
		38146,
		10700,
		6891,
		84282,
		109646,
		56492,
		40539,
		6589,
		119491,
		51354,
		30685,
		140209,
		136906,
		29622,
		73617,
		49553,
		70525,
		51671,
		166869,
		139616,
		74395,
		37439,
		49595,
		45678,
		11959,
		33211,
		86560,
		52434,
		9282,
		62690,
		112155,
		130810,
		5243,
		108261,
		99970,
		265613,
		72551,
		80049,
		6391,
		33365,
		90721,
		66737,
		69872,
		87011,
		1860,
		9032,
		112544,
		60905,
		37371,
		89015,
		140351,
		19076,
		850,
		373531,
		2802,
		36725,
		218795,
		72062,
		28990,
		16550,
		24614,
		7815,
		6187,
		26336,
		33373,
		32162,
		42791,
		73555,
		32062,
		23386,
		10244,
		56392,
		49442,
		27076,
		136262,
		12412,
		14883,
		1134,
		33675,
		97153,
		199281,
		15608,
		100152,
		74072,
		47942,
		254301,
		36451,
		16026,
		10687,
		65067,
		56708,
		254030,
		30290,
		50490,
		13864,
		57941,
		259331,
		35588,
		23485,
		43486,
		24869,
		21620,
		92971,
		22072,
		88645,
		1048,
		182050,
		13343,
		32452,
		14825,
		19509,
		3325,
		216938,
		45740,
		99716,
		189082,
		53740,
		78245,
		25609,
		24311,
		176777,
		47340,
		308354,
		40669,
		66085,
		14102,
		125339,
		9225,
		128709,
		97207,
		1271,
		200933,
		78439,
		113451,
		88975,
		18324,
		46521,
		11819,
		18570,
		141756,
		72512,
		170020,
		52754,
		63550,
		118515,
		103073,
		93330,
		32736,
		50499,
		14722,
		31600,
		68452,
		398867,
		29316,
		172786,
		18417,
		104924,
		2606,
		5670,
		84818,
		16288,
		67106,
		59580,
		82929,
		607401,
		291,
		85829,
		359,
		15897,
		35830,
		50696,
		65630,
		52672,
		22115,
		356968,
		29895,
		40837,
		231192,
		34024,
		38957,
		26722,
		406,
		23335,
		124952,
		72068,
		68804,
		13268,
		147101,
		164740,
		276569,
		162596,
		66943,
		11569,
		26654,
		66358,
		4777,
		23229,
		102127,
		5848,
		978,
		2921,
		59666,
		5371,
		28212,
		90108,
		42938,
		39320,
		2499,
		4271,
		108792,
		33510,
		125072,
		71653,
		65239,
		38250,
		66357,
		38577,
		13964,
		86251,
		35708,
		50755,
		36010,
		29448,
		12209,
		3844,
		38222,
		206337,
		100876,
		67827,
		137088,
		14167,
		252225,
		84163,
		195270,
		1306,
		5703,
		54198,
		779,
		46802,
		22028,
		51124,
		86759,
		70560,
		113164,
		35685,
		162145,
		45471,
		34561,
		422,
		2611,
		6464,
		47486,
		19223,
		38246,
		9191,
		18331,
		89942,
		243642,
		212364,
		15893,
		17518,
		22617,
		6409,
		30046,
		126182,
		59716,
		36560,
		104428,
		18846,
		26592,
		19458,
		50793,
		147333,
		30826,
		1388,
		27647,
		10922,
		14495,
		33545,
		19269,
		135828,
		39727,
		41601,
		46931,
		233379,
		49169,
		131130,
		182112,
		16276,
		82381,
		118209,
		142445,
		128310,
		19672,
		28740,
		82907,
		33436,
		3118,
		102206,
		28723,
		24819,
		41937,
		38854,
		5157,
		3881,
		111491,
		1142,
		9776,
		421673,
		152241,
		29309,
		14961,
		87854,
		6054,
		15424,
		3796,
		82656,
		54996,
		2108,
		55367,
		239450,
		154525,
		9643,
		118103,
		106041,
		64601,
		68549,
		48707,
		30266,
		25772,
		18740,
		9462,
		229669,
		91798,
		112152,
		191327,
		14493,
		72828,
		8175,
		66636,
		236474,
		25817,
		87351,
		129027,
		76653,
		20422,
		22983,
		71240,
		27846,
		44661,
		12399,
		46158,
		77704,
		53101,
		35032,
		11072,
		17300,
		109294,
		33638,
		24408,
		1895,
		11241,
		760,
		17584,
		82479,
		125877,
		63150,
		141075,
		34259,
		23274,
		81698,
		15732,
		43577,
		48340,
		91584,
		14688,
		16379,
		24481,
		150280,
		96420,
		262050,
		48635,
		43727,
		61819,
		56268,
		72003,
		88178,
		17281,
		79912,
		13218,
		122519,
		125295,
		166396,
		11811,
		2171,
		118930,
		67746,
		17636,
		178278,
		174656,
		95661,
		173039,
		83845,
		79689,
		17473,
		98555,
		127696,
		203415,
		54730,
		22925,
		232239,
		9309,
		12136,
		175026,
		20740,
		180188,
		10747,
		39816,
		314017,
		266131,
		10040,
		175732,
		112550,
		220651,
		31974,
		37393,
		888,
		23008,
		86799,
		4303,
		64905,
		148467,
		75337,
		251,
		3284,
		370102,
		50264,
		9835,
		5438,
		23655,
		4481,
		29851,
		329,
		12855,
		7162,
		64931,
		78141,
		12804,
		42372,
		296771,
		83547,
		18624,
		34874,
		86271,
		3360,
		48665,
		77735,
		88767,
		11463,
		63527,
		28889,
		22258,
		29140,
		194315,
		113924,
		25499,
		6406,
		31334,
		1845,
		4802,
		49184,
		43455,
		35469,
		127594,
		92970,
		61038,
		115005,
		38840,
		87761,
		106838,
		8811,
		20572,
		55637,
		11162,
		96721,
		132425,
		108925,
		2948,
		125457,
		36356,
		3502,
		75270,
		27622,
		127192,
		2561,
		123095,
		49394,
		61155,
		16897,
		110064,
		9699,
		89448,
		53356,
		19628,
		220310,
		21622,
		83036,
		9885,
		112214,
		6087,
		26713,
		17901,
		161912,
		91492,
		3440,
		68594,
		9266,
		92238,
		8087,
		6866,
		150194,
		72175,
		80701,
		13459,
		31836,
		43243,
		239700,
		95846,
		44749,
		50647,
		21945,
		230538,
		120612,
		132371,
		244604,
		5193,
		105637,
		34661,
		41341,
		68775,
		85393,
		1874,
		8771,
		33718,
		49672,
		77403,
		595452,
		99507,
		6490,
		58895,
		128742,
		7704,
		39239,
		73217,
		43816,
		62824,
		37804,
		199976,
		22361,
		80005,
		87514,
		94832,
		14089,
		4574,
		139975,
		59142,
		75523,
		100268,
		43906,
		53442,
		15152,
		2547,
		186002,
		17011,
		19513,
		204282,
		3343,
		60568,
		128318,
		119250,
		4298,
		51871,
		41336,
		71759,
		21921,
		45074,
		98169,
		145889,
		99427,
		11350,
		1237,
		5520,
		28799,
		7803,
		53702,
		21026,
		136352,
		38293,
		128690,
		12158,
		90132,
		44600,
		10184,
		26957,
		39459,
		126025,
		78904,
		82999,
		59373,
		39301,
		150198,
		120529,
		153042,
		20177,
		50089,
		14764,
		271571,
		30530,
		123161,
		38975,
		101562,
		22941,
		5648,
		124654,
		109243,
		69817,
		71675,
		49162,
		106884,
		21241,
		107795,
		30258,
		16572,
		188262,
		141456,
		7688,
		60718,
		8271,
		11044,
		32440,
		104608,
		103419,
		236109,
		93156,
		43293,
		128929,
		42107,
		67180,
		25201,
		115254,
		185488,
		130954,
		72813,
		167547,
		20537,
		39969,
		38432,
		22582,
		184022,
		1139,
		27199,
		5655,
		17767,
		97412,
		122606,
		209377,
		27070,
		35871,
		326617,
		188954,
		42680,
		73512,
		80911,
		22629,
		3011,
		95021,
		315242,
		157737,
		383,
		41821,
		41808,
		19335,
		27950,
		15674,
		25677,
		110950,
		35375,
		76835,
		59108,
		57370,
		35262,
		16569,
		160415,
		37706,
		78086,
		32041,
		49691,
		137143,
		9782,
		172080,
		50148,
		77917,
		6323,
		10110,
		69172,
		17711,
		21795,
		59511,
		76184,
		135114,
		31046,
		132319,
		59105,
		157578,
		20549,
		80778,
		57649,
		158421,
		65143,
		4575,
		72235,
		21899,
		10797,
		92745,
		34035,
		106079,
		80159,
		4508,
		78304,
		25350,
		75457,
		46458,
		32937,
		25623,
		47,
		8531,
		104751,
		84953,
		8138,
		36508,
		187199,
		66310,
		115274,
		13253,
		32461,
		38536,
		1916,
		42007,
		187160,
		35055,
		26325,
		84394,
		35963,
		94216,
		45590,
		97782
	];

	const { xor: uint8ArrayXor$1 } = require$$1$1;
	const GENERATED_PREFIXES = require$$1;
	const { sha256: sha256$1 } = require$$1$6;
	const crypto$5 = src$n;
	const PeerId$k = src$o.exports;
	const utils$m = utils$o;
	const length$2 = itLength;
	const { TimeoutController: TimeoutController$5 } = timeoutAbortController;
	const { TABLE_REFRESH_INTERVAL, TABLE_REFRESH_QUERY_TIMEOUT } = constants$5;

	/**
	 * @typedef {import('./types').KBucketPeer} KBucketPeer
	 * @typedef {import('./types').KBucket} KBucket
	 * @typedef {import('./types').KBucketTree} KBucketTree
	 */

	/**
	 * Cannot generate random KadIds longer than this + 1
	 */
	const MAX_COMMON_PREFIX_LENGTH = 15;

	/**
	 * A wrapper around `k-bucket`, to provide easy store and
	 * retrieval for peers.
	 */
	class RoutingTableRefresh$1 {
	  /**
	   * @param {object} params
	   * @param {import('../peer-routing').PeerRouting} params.peerRouting
	   * @param {import('./').RoutingTable} params.routingTable
	   * @param {boolean} params.lan
	   * @param {number} [params.refreshInterval]
	   * @param {number} [params.refreshQueryTimeout]
	   */
	  constructor ({ peerRouting, routingTable, refreshInterval, refreshQueryTimeout, lan }) {
	    this._log = utils$m.logger(`libp2p:kad-dht:${lan ? 'lan' : 'wan'}:routing-table:refresh`);
	    this._peerRouting = peerRouting;
	    this._routingTable = routingTable;
	    this._refreshInterval = refreshInterval || TABLE_REFRESH_INTERVAL;
	    this._refreshQueryTimeout = refreshQueryTimeout || TABLE_REFRESH_QUERY_TIMEOUT;

	    /** @type {Date[]} */
	    this.commonPrefixLengthRefreshedAt = [];

	    this.refreshTable = this.refreshTable.bind(this);
	  }

	  async start () {
	    this._log(`refreshing routing table every ${this._refreshInterval}ms`);
	    await this.refreshTable(true);
	  }

	  async stop () {
	    if (this._refreshTimeoutId) {
	      clearTimeout(this._refreshTimeoutId);
	    }
	  }

	  /**
	   * To speed lookups, we seed the table with random PeerIds. This means
	   * when we are asked to locate a peer on the network, we can find a KadId
	   * that is close to the requested peer ID and query that, then network
	   * peers will tell us who they know who is close to the fake ID
	   *
	   * @param {boolean} [force=false]
	   */
	  async refreshTable (force) {
	    this._log('refreshing routing table');

	    const prefixLength = this._maxCommonPrefix();
	    const refreshCpls = this._getTrackedCommonPrefixLengthsForRefresh(prefixLength);

	    this._log(`max common prefix length ${prefixLength}`);
	    this._log(`tracked CPLs [ ${refreshCpls.map(date => date.toISOString()).join(', ')} ]`);

	    /**
	     * If we see a gap at a common prefix length in the Routing table, we ONLY refresh up until
	     * the maximum cpl we have in the Routing Table OR (2 * (Cpl+ 1) with the gap), whichever
	     * is smaller.
	     *
	     * This is to prevent refreshes for Cpls that have no peers in the network but happen to be
	     * before a very high max Cpl for which we do have peers in the network.
	     *
	     * The number of 2 * (Cpl + 1) can be proved and a proof would have been written here if
	     * the programmer had paid more attention in the Math classes at university.
	     *
	     * So, please be patient and a doc explaining it will be published soon.
	     *
	     * https://github.com/libp2p/go-libp2p-kad-dht/commit/2851c88acb0a3f86bcfe3cfd0f4604a03db801d8#diff-ad45f4ba97ffbc4083c2eb87a4420c1157057b233f048030d67c6b551855ccf6R219
	     */
	    await Promise.all(
	      refreshCpls.map(async (lastRefresh, index) => {
	        try {
	          await this._refreshCommonPrefixLength(index, lastRefresh, force === true);

	          if (this._numPeersForCpl(prefixLength) === 0) {
	            const lastCpl = Math.min(2 * (index + 1), refreshCpls.length - 1);

	            for (let n = index + 1; n < lastCpl + 1; n++) {
	              try {
	                await this._refreshCommonPrefixLength(n, lastRefresh, force === true);
	              } catch (/** @type {any} */ err) {
	                this._log.error(err);
	              }
	            }
	          }
	        } catch (/** @type {any} */ err) {
	          this._log.error(err);
	        }
	      })
	    );

	    this._refreshTimeoutId = setTimeout(this.refreshTable, this._refreshInterval);

	    // @ts-ignore
	    if (this._refreshTimeoutId.unref) {
	      // @ts-ignore
	      this._refreshTimeoutId.unref();
	    }
	  }

	  /**
	   * @param {number} cpl
	   * @param {Date} lastRefresh
	   * @param {boolean} force
	   */
	  async _refreshCommonPrefixLength (cpl, lastRefresh, force) {
	    if (!force && lastRefresh.getTime() > (Date.now() - this._refreshInterval)) {
	      this._log('not running refresh for cpl %s as time since last refresh not above interval', cpl);
	      return
	    }

	    // gen a key for the query to refresh the cpl
	    const peerId = await this._generateRandomPeerId(cpl);

	    this._log('starting refreshing cpl %s with key %p (routing table size was %s)', cpl, peerId, this._routingTable.kb.count());

	    const controller = new TimeoutController$5(this._refreshQueryTimeout);

	    try {
	      const peers = await length$2(this._peerRouting.getClosestPeers(peerId.toBytes(), { signal: controller.signal }));

	      this._log(`found ${peers} peers that were close to imaginary peer %p`, peerId);
	      this._log('finished refreshing cpl %s with key %p (routing table size is now %s)', cpl, peerId, this._routingTable.kb.count());
	    } finally {
	      controller.clear();
	    }
	  }

	  /**
	   * @param {number} maxCommonPrefix
	   */
	  _getTrackedCommonPrefixLengthsForRefresh (maxCommonPrefix) {
	    if (maxCommonPrefix > MAX_COMMON_PREFIX_LENGTH) {
	      maxCommonPrefix = MAX_COMMON_PREFIX_LENGTH;
	    }

	    const dates = [];

	    for (let i = 0; i <= maxCommonPrefix; i++) {
	      // defaults to the zero value if we haven't refreshed it yet.
	      dates[i] = this.commonPrefixLengthRefreshedAt[i] || new Date();
	    }

	    return dates
	  }

	  /**
	   *
	   * @param {number} targetCommonPrefixLength
	   */
	  async _generateRandomPeerId (targetCommonPrefixLength) {
	    const randomBytes = crypto$5.randomBytes(2);
	    const randomUint16 = (randomBytes[1] << 8) + randomBytes[0];

	    const key = await this._makePeerId(this._routingTable.kb.localNodeId, randomUint16, targetCommonPrefixLength);

	    return PeerId$k.createFromBytes(key)
	  }

	  /**
	   * @param {Uint8Array} localKadId
	   * @param {number} randomPrefix
	   * @param {number} targetCommonPrefixLength
	   */
	  async _makePeerId (localKadId, randomPrefix, targetCommonPrefixLength) {
	    if (targetCommonPrefixLength > MAX_COMMON_PREFIX_LENGTH) {
	      throw new Error(`Cannot generate peer ID for common prefix length greater than ${MAX_COMMON_PREFIX_LENGTH}`)
	    }

	    const view = new DataView(localKadId.buffer, localKadId.byteOffset, localKadId.byteLength);
	    const localPrefix = view.getUint16(0, false);

	    // For host with ID `L`, an ID `K` belongs to a bucket with ID `B` ONLY IF CommonPrefixLen(L,K) is EXACTLY B.
	    // Hence, to achieve a targetPrefix `T`, we must toggle the (T+1)th bit in L & then copy (T+1) bits from L
	    // to our randomly generated prefix.
	    const toggledLocalPrefix = localPrefix ^ (0x8000 >> targetCommonPrefixLength);

	    // Combine the toggled local prefix and the random bits at the correct offset
	    // such that ONLY the first `targetCommonPrefixLength` bits match the local ID.
	    const mask = 65535 << (16 - (targetCommonPrefixLength + 1));
	    const targetPrefix = (toggledLocalPrefix & mask) | (randomPrefix & ~mask);

	    // Convert to a known peer ID.
	    const keyPrefix = GENERATED_PREFIXES[targetPrefix];

	    const keyBuffer = new ArrayBuffer(34);
	    const keyView = new DataView(keyBuffer, 0, keyBuffer.byteLength);
	    keyView.setUint8(0, sha256$1.code);
	    keyView.setUint8(1, 32);
	    keyView.setUint32(2, keyPrefix, false);

	    return new Uint8Array(keyView.buffer, keyView.byteOffset, keyView.byteLength)
	  }

	  /**
	   * returns the maximum common prefix length between any peer in the table
	   * and the current peer
	   */
	  _maxCommonPrefix () {
	    // xor our KadId with every KadId in the k-bucket tree,
	    // return the longest id prefix that is the same
	    let prefixLength = 0;

	    for (const length of this._prefixLengths()) {
	      if (length > prefixLength) {
	        prefixLength = length;
	      }
	    }

	    return prefixLength
	  }

	  /**
	   * Returns the number of peers in the table with a given prefix length
	   *
	   * @param {number} prefixLength
	   */
	  _numPeersForCpl (prefixLength) {
	    let count = 0;

	    for (const length of this._prefixLengths()) {
	      if (length === prefixLength) {
	        count++;
	      }
	    }

	    return count
	  }

	  /**
	   * Yields the common prefix length of every peer in the table
	   */
	  * _prefixLengths () {
	    if (!this._routingTable.kb) {
	      return
	    }

	    for (const { id } of this._routingTable.kb.toIterable()) {
	      const distance = uint8ArrayXor$1(this._routingTable.kb.localNodeId, id);
	      let leadingZeros = 0;

	      for (const byte of distance) {
	        if (byte === 0) {
	          leadingZeros++;
	        } else {
	          break
	        }
	      }

	      yield leadingZeros;
	    }
	  }
	}

	refresh.RoutingTableRefresh = RoutingTableRefresh$1;

	var network = {};

	var message$1 = {};

	/*eslint-disable*/

	var $protobuf$5 = minimal;

	// Common aliases
	var $Reader$6 = $protobuf$5.Reader, $Writer$6 = $protobuf$5.Writer, $util$6 = $protobuf$5.util;

	// Exported root namespace
	var $root$6 = $protobuf$5.roots["libp2p-dht-message"] || ($protobuf$5.roots["libp2p-dht-message"] = {});

	$root$6.Record = (function() {

	    /**
	     * Properties of a Record.
	     * @exports IRecord
	     * @interface IRecord
	     * @property {Uint8Array|null} [key] Record key
	     * @property {Uint8Array|null} [value] Record value
	     * @property {Uint8Array|null} [author] Record author
	     * @property {Uint8Array|null} [signature] Record signature
	     * @property {string|null} [timeReceived] Record timeReceived
	     */

	    /**
	     * Constructs a new Record.
	     * @exports Record
	     * @classdesc Represents a Record.
	     * @implements IRecord
	     * @constructor
	     * @param {IRecord=} [p] Properties to set
	     */
	    function Record(p) {
	        if (p)
	            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                if (p[ks[i]] != null)
	                    this[ks[i]] = p[ks[i]];
	    }

	    /**
	     * Record key.
	     * @member {Uint8Array|null|undefined} key
	     * @memberof Record
	     * @instance
	     */
	    Record.prototype.key = null;

	    /**
	     * Record value.
	     * @member {Uint8Array|null|undefined} value
	     * @memberof Record
	     * @instance
	     */
	    Record.prototype.value = null;

	    /**
	     * Record author.
	     * @member {Uint8Array|null|undefined} author
	     * @memberof Record
	     * @instance
	     */
	    Record.prototype.author = null;

	    /**
	     * Record signature.
	     * @member {Uint8Array|null|undefined} signature
	     * @memberof Record
	     * @instance
	     */
	    Record.prototype.signature = null;

	    /**
	     * Record timeReceived.
	     * @member {string|null|undefined} timeReceived
	     * @memberof Record
	     * @instance
	     */
	    Record.prototype.timeReceived = null;

	    // OneOf field names bound to virtual getters and setters
	    var $oneOfFields;

	    /**
	     * Record _key.
	     * @member {"key"|undefined} _key
	     * @memberof Record
	     * @instance
	     */
	    Object.defineProperty(Record.prototype, "_key", {
	        get: $util$6.oneOfGetter($oneOfFields = ["key"]),
	        set: $util$6.oneOfSetter($oneOfFields)
	    });

	    /**
	     * Record _value.
	     * @member {"value"|undefined} _value
	     * @memberof Record
	     * @instance
	     */
	    Object.defineProperty(Record.prototype, "_value", {
	        get: $util$6.oneOfGetter($oneOfFields = ["value"]),
	        set: $util$6.oneOfSetter($oneOfFields)
	    });

	    /**
	     * Record _author.
	     * @member {"author"|undefined} _author
	     * @memberof Record
	     * @instance
	     */
	    Object.defineProperty(Record.prototype, "_author", {
	        get: $util$6.oneOfGetter($oneOfFields = ["author"]),
	        set: $util$6.oneOfSetter($oneOfFields)
	    });

	    /**
	     * Record _signature.
	     * @member {"signature"|undefined} _signature
	     * @memberof Record
	     * @instance
	     */
	    Object.defineProperty(Record.prototype, "_signature", {
	        get: $util$6.oneOfGetter($oneOfFields = ["signature"]),
	        set: $util$6.oneOfSetter($oneOfFields)
	    });

	    /**
	     * Record _timeReceived.
	     * @member {"timeReceived"|undefined} _timeReceived
	     * @memberof Record
	     * @instance
	     */
	    Object.defineProperty(Record.prototype, "_timeReceived", {
	        get: $util$6.oneOfGetter($oneOfFields = ["timeReceived"]),
	        set: $util$6.oneOfSetter($oneOfFields)
	    });

	    /**
	     * Encodes the specified Record message. Does not implicitly {@link Record.verify|verify} messages.
	     * @function encode
	     * @memberof Record
	     * @static
	     * @param {IRecord} m Record message or plain object to encode
	     * @param {$protobuf.Writer} [w] Writer to encode to
	     * @returns {$protobuf.Writer} Writer
	     */
	    Record.encode = function encode(m, w) {
	        if (!w)
	            w = $Writer$6.create();
	        if (m.key != null && Object.hasOwnProperty.call(m, "key"))
	            w.uint32(10).bytes(m.key);
	        if (m.value != null && Object.hasOwnProperty.call(m, "value"))
	            w.uint32(18).bytes(m.value);
	        if (m.author != null && Object.hasOwnProperty.call(m, "author"))
	            w.uint32(26).bytes(m.author);
	        if (m.signature != null && Object.hasOwnProperty.call(m, "signature"))
	            w.uint32(34).bytes(m.signature);
	        if (m.timeReceived != null && Object.hasOwnProperty.call(m, "timeReceived"))
	            w.uint32(42).string(m.timeReceived);
	        return w;
	    };

	    /**
	     * Decodes a Record message from the specified reader or buffer.
	     * @function decode
	     * @memberof Record
	     * @static
	     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	     * @param {number} [l] Message length if known beforehand
	     * @returns {Record} Record
	     * @throws {Error} If the payload is not a reader or valid buffer
	     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	     */
	    Record.decode = function decode(r, l) {
	        if (!(r instanceof $Reader$6))
	            r = $Reader$6.create(r);
	        var c = l === undefined ? r.len : r.pos + l, m = new $root$6.Record();
	        while (r.pos < c) {
	            var t = r.uint32();
	            switch (t >>> 3) {
	            case 1:
	                m.key = r.bytes();
	                break;
	            case 2:
	                m.value = r.bytes();
	                break;
	            case 3:
	                m.author = r.bytes();
	                break;
	            case 4:
	                m.signature = r.bytes();
	                break;
	            case 5:
	                m.timeReceived = r.string();
	                break;
	            default:
	                r.skipType(t & 7);
	                break;
	            }
	        }
	        return m;
	    };

	    /**
	     * Creates a Record message from a plain object. Also converts values to their respective internal types.
	     * @function fromObject
	     * @memberof Record
	     * @static
	     * @param {Object.<string,*>} d Plain object
	     * @returns {Record} Record
	     */
	    Record.fromObject = function fromObject(d) {
	        if (d instanceof $root$6.Record)
	            return d;
	        var m = new $root$6.Record();
	        if (d.key != null) {
	            if (typeof d.key === "string")
	                $util$6.base64.decode(d.key, m.key = $util$6.newBuffer($util$6.base64.length(d.key)), 0);
	            else if (d.key.length)
	                m.key = d.key;
	        }
	        if (d.value != null) {
	            if (typeof d.value === "string")
	                $util$6.base64.decode(d.value, m.value = $util$6.newBuffer($util$6.base64.length(d.value)), 0);
	            else if (d.value.length)
	                m.value = d.value;
	        }
	        if (d.author != null) {
	            if (typeof d.author === "string")
	                $util$6.base64.decode(d.author, m.author = $util$6.newBuffer($util$6.base64.length(d.author)), 0);
	            else if (d.author.length)
	                m.author = d.author;
	        }
	        if (d.signature != null) {
	            if (typeof d.signature === "string")
	                $util$6.base64.decode(d.signature, m.signature = $util$6.newBuffer($util$6.base64.length(d.signature)), 0);
	            else if (d.signature.length)
	                m.signature = d.signature;
	        }
	        if (d.timeReceived != null) {
	            m.timeReceived = String(d.timeReceived);
	        }
	        return m;
	    };

	    /**
	     * Creates a plain object from a Record message. Also converts values to other types if specified.
	     * @function toObject
	     * @memberof Record
	     * @static
	     * @param {Record} m Record
	     * @param {$protobuf.IConversionOptions} [o] Conversion options
	     * @returns {Object.<string,*>} Plain object
	     */
	    Record.toObject = function toObject(m, o) {
	        if (!o)
	            o = {};
	        var d = {};
	        if (m.key != null && m.hasOwnProperty("key")) {
	            d.key = o.bytes === String ? $util$6.base64.encode(m.key, 0, m.key.length) : o.bytes === Array ? Array.prototype.slice.call(m.key) : m.key;
	            if (o.oneofs)
	                d._key = "key";
	        }
	        if (m.value != null && m.hasOwnProperty("value")) {
	            d.value = o.bytes === String ? $util$6.base64.encode(m.value, 0, m.value.length) : o.bytes === Array ? Array.prototype.slice.call(m.value) : m.value;
	            if (o.oneofs)
	                d._value = "value";
	        }
	        if (m.author != null && m.hasOwnProperty("author")) {
	            d.author = o.bytes === String ? $util$6.base64.encode(m.author, 0, m.author.length) : o.bytes === Array ? Array.prototype.slice.call(m.author) : m.author;
	            if (o.oneofs)
	                d._author = "author";
	        }
	        if (m.signature != null && m.hasOwnProperty("signature")) {
	            d.signature = o.bytes === String ? $util$6.base64.encode(m.signature, 0, m.signature.length) : o.bytes === Array ? Array.prototype.slice.call(m.signature) : m.signature;
	            if (o.oneofs)
	                d._signature = "signature";
	        }
	        if (m.timeReceived != null && m.hasOwnProperty("timeReceived")) {
	            d.timeReceived = m.timeReceived;
	            if (o.oneofs)
	                d._timeReceived = "timeReceived";
	        }
	        return d;
	    };

	    /**
	     * Converts this Record to JSON.
	     * @function toJSON
	     * @memberof Record
	     * @instance
	     * @returns {Object.<string,*>} JSON object
	     */
	    Record.prototype.toJSON = function toJSON() {
	        return this.constructor.toObject(this, $protobuf$5.util.toJSONOptions);
	    };

	    return Record;
	})();

	$root$6.Message = (function() {

	    /**
	     * Properties of a Message.
	     * @exports IMessage
	     * @interface IMessage
	     * @property {Message.MessageType|null} [type] Message type
	     * @property {number|null} [clusterLevelRaw] Message clusterLevelRaw
	     * @property {Uint8Array|null} [key] Message key
	     * @property {Uint8Array|null} [record] Message record
	     * @property {Array.<Message.IPeer>|null} [closerPeers] Message closerPeers
	     * @property {Array.<Message.IPeer>|null} [providerPeers] Message providerPeers
	     */

	    /**
	     * Constructs a new Message.
	     * @exports Message
	     * @classdesc Represents a Message.
	     * @implements IMessage
	     * @constructor
	     * @param {IMessage=} [p] Properties to set
	     */
	    function Message(p) {
	        this.closerPeers = [];
	        this.providerPeers = [];
	        if (p)
	            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                if (p[ks[i]] != null)
	                    this[ks[i]] = p[ks[i]];
	    }

	    /**
	     * Message type.
	     * @member {Message.MessageType|null|undefined} type
	     * @memberof Message
	     * @instance
	     */
	    Message.prototype.type = null;

	    /**
	     * Message clusterLevelRaw.
	     * @member {number|null|undefined} clusterLevelRaw
	     * @memberof Message
	     * @instance
	     */
	    Message.prototype.clusterLevelRaw = null;

	    /**
	     * Message key.
	     * @member {Uint8Array|null|undefined} key
	     * @memberof Message
	     * @instance
	     */
	    Message.prototype.key = null;

	    /**
	     * Message record.
	     * @member {Uint8Array|null|undefined} record
	     * @memberof Message
	     * @instance
	     */
	    Message.prototype.record = null;

	    /**
	     * Message closerPeers.
	     * @member {Array.<Message.IPeer>} closerPeers
	     * @memberof Message
	     * @instance
	     */
	    Message.prototype.closerPeers = $util$6.emptyArray;

	    /**
	     * Message providerPeers.
	     * @member {Array.<Message.IPeer>} providerPeers
	     * @memberof Message
	     * @instance
	     */
	    Message.prototype.providerPeers = $util$6.emptyArray;

	    // OneOf field names bound to virtual getters and setters
	    var $oneOfFields;

	    /**
	     * Message _type.
	     * @member {"type"|undefined} _type
	     * @memberof Message
	     * @instance
	     */
	    Object.defineProperty(Message.prototype, "_type", {
	        get: $util$6.oneOfGetter($oneOfFields = ["type"]),
	        set: $util$6.oneOfSetter($oneOfFields)
	    });

	    /**
	     * Message _clusterLevelRaw.
	     * @member {"clusterLevelRaw"|undefined} _clusterLevelRaw
	     * @memberof Message
	     * @instance
	     */
	    Object.defineProperty(Message.prototype, "_clusterLevelRaw", {
	        get: $util$6.oneOfGetter($oneOfFields = ["clusterLevelRaw"]),
	        set: $util$6.oneOfSetter($oneOfFields)
	    });

	    /**
	     * Message _key.
	     * @member {"key"|undefined} _key
	     * @memberof Message
	     * @instance
	     */
	    Object.defineProperty(Message.prototype, "_key", {
	        get: $util$6.oneOfGetter($oneOfFields = ["key"]),
	        set: $util$6.oneOfSetter($oneOfFields)
	    });

	    /**
	     * Message _record.
	     * @member {"record"|undefined} _record
	     * @memberof Message
	     * @instance
	     */
	    Object.defineProperty(Message.prototype, "_record", {
	        get: $util$6.oneOfGetter($oneOfFields = ["record"]),
	        set: $util$6.oneOfSetter($oneOfFields)
	    });

	    /**
	     * Encodes the specified Message message. Does not implicitly {@link Message.verify|verify} messages.
	     * @function encode
	     * @memberof Message
	     * @static
	     * @param {IMessage} m Message message or plain object to encode
	     * @param {$protobuf.Writer} [w] Writer to encode to
	     * @returns {$protobuf.Writer} Writer
	     */
	    Message.encode = function encode(m, w) {
	        if (!w)
	            w = $Writer$6.create();
	        if (m.type != null && Object.hasOwnProperty.call(m, "type"))
	            w.uint32(8).int32(m.type);
	        if (m.key != null && Object.hasOwnProperty.call(m, "key"))
	            w.uint32(18).bytes(m.key);
	        if (m.record != null && Object.hasOwnProperty.call(m, "record"))
	            w.uint32(26).bytes(m.record);
	        if (m.closerPeers != null && m.closerPeers.length) {
	            for (var i = 0; i < m.closerPeers.length; ++i)
	                $root$6.Message.Peer.encode(m.closerPeers[i], w.uint32(66).fork()).ldelim();
	        }
	        if (m.providerPeers != null && m.providerPeers.length) {
	            for (var i = 0; i < m.providerPeers.length; ++i)
	                $root$6.Message.Peer.encode(m.providerPeers[i], w.uint32(74).fork()).ldelim();
	        }
	        if (m.clusterLevelRaw != null && Object.hasOwnProperty.call(m, "clusterLevelRaw"))
	            w.uint32(80).int32(m.clusterLevelRaw);
	        return w;
	    };

	    /**
	     * Decodes a Message message from the specified reader or buffer.
	     * @function decode
	     * @memberof Message
	     * @static
	     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	     * @param {number} [l] Message length if known beforehand
	     * @returns {Message} Message
	     * @throws {Error} If the payload is not a reader or valid buffer
	     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	     */
	    Message.decode = function decode(r, l) {
	        if (!(r instanceof $Reader$6))
	            r = $Reader$6.create(r);
	        var c = l === undefined ? r.len : r.pos + l, m = new $root$6.Message();
	        while (r.pos < c) {
	            var t = r.uint32();
	            switch (t >>> 3) {
	            case 1:
	                m.type = r.int32();
	                break;
	            case 10:
	                m.clusterLevelRaw = r.int32();
	                break;
	            case 2:
	                m.key = r.bytes();
	                break;
	            case 3:
	                m.record = r.bytes();
	                break;
	            case 8:
	                if (!(m.closerPeers && m.closerPeers.length))
	                    m.closerPeers = [];
	                m.closerPeers.push($root$6.Message.Peer.decode(r, r.uint32()));
	                break;
	            case 9:
	                if (!(m.providerPeers && m.providerPeers.length))
	                    m.providerPeers = [];
	                m.providerPeers.push($root$6.Message.Peer.decode(r, r.uint32()));
	                break;
	            default:
	                r.skipType(t & 7);
	                break;
	            }
	        }
	        return m;
	    };

	    /**
	     * Creates a Message message from a plain object. Also converts values to their respective internal types.
	     * @function fromObject
	     * @memberof Message
	     * @static
	     * @param {Object.<string,*>} d Plain object
	     * @returns {Message} Message
	     */
	    Message.fromObject = function fromObject(d) {
	        if (d instanceof $root$6.Message)
	            return d;
	        var m = new $root$6.Message();
	        switch (d.type) {
	        case "PUT_VALUE":
	        case 0:
	            m.type = 0;
	            break;
	        case "GET_VALUE":
	        case 1:
	            m.type = 1;
	            break;
	        case "ADD_PROVIDER":
	        case 2:
	            m.type = 2;
	            break;
	        case "GET_PROVIDERS":
	        case 3:
	            m.type = 3;
	            break;
	        case "FIND_NODE":
	        case 4:
	            m.type = 4;
	            break;
	        case "PING":
	        case 5:
	            m.type = 5;
	            break;
	        }
	        if (d.clusterLevelRaw != null) {
	            m.clusterLevelRaw = d.clusterLevelRaw | 0;
	        }
	        if (d.key != null) {
	            if (typeof d.key === "string")
	                $util$6.base64.decode(d.key, m.key = $util$6.newBuffer($util$6.base64.length(d.key)), 0);
	            else if (d.key.length)
	                m.key = d.key;
	        }
	        if (d.record != null) {
	            if (typeof d.record === "string")
	                $util$6.base64.decode(d.record, m.record = $util$6.newBuffer($util$6.base64.length(d.record)), 0);
	            else if (d.record.length)
	                m.record = d.record;
	        }
	        if (d.closerPeers) {
	            if (!Array.isArray(d.closerPeers))
	                throw TypeError(".Message.closerPeers: array expected");
	            m.closerPeers = [];
	            for (var i = 0; i < d.closerPeers.length; ++i) {
	                if (typeof d.closerPeers[i] !== "object")
	                    throw TypeError(".Message.closerPeers: object expected");
	                m.closerPeers[i] = $root$6.Message.Peer.fromObject(d.closerPeers[i]);
	            }
	        }
	        if (d.providerPeers) {
	            if (!Array.isArray(d.providerPeers))
	                throw TypeError(".Message.providerPeers: array expected");
	            m.providerPeers = [];
	            for (var i = 0; i < d.providerPeers.length; ++i) {
	                if (typeof d.providerPeers[i] !== "object")
	                    throw TypeError(".Message.providerPeers: object expected");
	                m.providerPeers[i] = $root$6.Message.Peer.fromObject(d.providerPeers[i]);
	            }
	        }
	        return m;
	    };

	    /**
	     * Creates a plain object from a Message message. Also converts values to other types if specified.
	     * @function toObject
	     * @memberof Message
	     * @static
	     * @param {Message} m Message
	     * @param {$protobuf.IConversionOptions} [o] Conversion options
	     * @returns {Object.<string,*>} Plain object
	     */
	    Message.toObject = function toObject(m, o) {
	        if (!o)
	            o = {};
	        var d = {};
	        if (o.arrays || o.defaults) {
	            d.closerPeers = [];
	            d.providerPeers = [];
	        }
	        if (m.type != null && m.hasOwnProperty("type")) {
	            d.type = o.enums === String ? $root$6.Message.MessageType[m.type] : m.type;
	            if (o.oneofs)
	                d._type = "type";
	        }
	        if (m.key != null && m.hasOwnProperty("key")) {
	            d.key = o.bytes === String ? $util$6.base64.encode(m.key, 0, m.key.length) : o.bytes === Array ? Array.prototype.slice.call(m.key) : m.key;
	            if (o.oneofs)
	                d._key = "key";
	        }
	        if (m.record != null && m.hasOwnProperty("record")) {
	            d.record = o.bytes === String ? $util$6.base64.encode(m.record, 0, m.record.length) : o.bytes === Array ? Array.prototype.slice.call(m.record) : m.record;
	            if (o.oneofs)
	                d._record = "record";
	        }
	        if (m.closerPeers && m.closerPeers.length) {
	            d.closerPeers = [];
	            for (var j = 0; j < m.closerPeers.length; ++j) {
	                d.closerPeers[j] = $root$6.Message.Peer.toObject(m.closerPeers[j], o);
	            }
	        }
	        if (m.providerPeers && m.providerPeers.length) {
	            d.providerPeers = [];
	            for (var j = 0; j < m.providerPeers.length; ++j) {
	                d.providerPeers[j] = $root$6.Message.Peer.toObject(m.providerPeers[j], o);
	            }
	        }
	        if (m.clusterLevelRaw != null && m.hasOwnProperty("clusterLevelRaw")) {
	            d.clusterLevelRaw = m.clusterLevelRaw;
	            if (o.oneofs)
	                d._clusterLevelRaw = "clusterLevelRaw";
	        }
	        return d;
	    };

	    /**
	     * Converts this Message to JSON.
	     * @function toJSON
	     * @memberof Message
	     * @instance
	     * @returns {Object.<string,*>} JSON object
	     */
	    Message.prototype.toJSON = function toJSON() {
	        return this.constructor.toObject(this, $protobuf$5.util.toJSONOptions);
	    };

	    /**
	     * MessageType enum.
	     * @name Message.MessageType
	     * @enum {number}
	     * @property {number} PUT_VALUE=0 PUT_VALUE value
	     * @property {number} GET_VALUE=1 GET_VALUE value
	     * @property {number} ADD_PROVIDER=2 ADD_PROVIDER value
	     * @property {number} GET_PROVIDERS=3 GET_PROVIDERS value
	     * @property {number} FIND_NODE=4 FIND_NODE value
	     * @property {number} PING=5 PING value
	     */
	    Message.MessageType = (function() {
	        var valuesById = {}, values = Object.create(valuesById);
	        values[valuesById[0] = "PUT_VALUE"] = 0;
	        values[valuesById[1] = "GET_VALUE"] = 1;
	        values[valuesById[2] = "ADD_PROVIDER"] = 2;
	        values[valuesById[3] = "GET_PROVIDERS"] = 3;
	        values[valuesById[4] = "FIND_NODE"] = 4;
	        values[valuesById[5] = "PING"] = 5;
	        return values;
	    })();

	    /**
	     * ConnectionType enum.
	     * @name Message.ConnectionType
	     * @enum {number}
	     * @property {number} NOT_CONNECTED=0 NOT_CONNECTED value
	     * @property {number} CONNECTED=1 CONNECTED value
	     * @property {number} CAN_CONNECT=2 CAN_CONNECT value
	     * @property {number} CANNOT_CONNECT=3 CANNOT_CONNECT value
	     */
	    Message.ConnectionType = (function() {
	        var valuesById = {}, values = Object.create(valuesById);
	        values[valuesById[0] = "NOT_CONNECTED"] = 0;
	        values[valuesById[1] = "CONNECTED"] = 1;
	        values[valuesById[2] = "CAN_CONNECT"] = 2;
	        values[valuesById[3] = "CANNOT_CONNECT"] = 3;
	        return values;
	    })();

	    Message.Peer = (function() {

	        /**
	         * Properties of a Peer.
	         * @memberof Message
	         * @interface IPeer
	         * @property {Uint8Array|null} [id] Peer id
	         * @property {Array.<Uint8Array>|null} [addrs] Peer addrs
	         * @property {Message.ConnectionType|null} [connection] Peer connection
	         */

	        /**
	         * Constructs a new Peer.
	         * @memberof Message
	         * @classdesc Represents a Peer.
	         * @implements IPeer
	         * @constructor
	         * @param {Message.IPeer=} [p] Properties to set
	         */
	        function Peer(p) {
	            this.addrs = [];
	            if (p)
	                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                    if (p[ks[i]] != null)
	                        this[ks[i]] = p[ks[i]];
	        }

	        /**
	         * Peer id.
	         * @member {Uint8Array|null|undefined} id
	         * @memberof Message.Peer
	         * @instance
	         */
	        Peer.prototype.id = null;

	        /**
	         * Peer addrs.
	         * @member {Array.<Uint8Array>} addrs
	         * @memberof Message.Peer
	         * @instance
	         */
	        Peer.prototype.addrs = $util$6.emptyArray;

	        /**
	         * Peer connection.
	         * @member {Message.ConnectionType|null|undefined} connection
	         * @memberof Message.Peer
	         * @instance
	         */
	        Peer.prototype.connection = null;

	        // OneOf field names bound to virtual getters and setters
	        var $oneOfFields;

	        /**
	         * Peer _id.
	         * @member {"id"|undefined} _id
	         * @memberof Message.Peer
	         * @instance
	         */
	        Object.defineProperty(Peer.prototype, "_id", {
	            get: $util$6.oneOfGetter($oneOfFields = ["id"]),
	            set: $util$6.oneOfSetter($oneOfFields)
	        });

	        /**
	         * Peer _connection.
	         * @member {"connection"|undefined} _connection
	         * @memberof Message.Peer
	         * @instance
	         */
	        Object.defineProperty(Peer.prototype, "_connection", {
	            get: $util$6.oneOfGetter($oneOfFields = ["connection"]),
	            set: $util$6.oneOfSetter($oneOfFields)
	        });

	        /**
	         * Encodes the specified Peer message. Does not implicitly {@link Message.Peer.verify|verify} messages.
	         * @function encode
	         * @memberof Message.Peer
	         * @static
	         * @param {Message.IPeer} m Peer message or plain object to encode
	         * @param {$protobuf.Writer} [w] Writer to encode to
	         * @returns {$protobuf.Writer} Writer
	         */
	        Peer.encode = function encode(m, w) {
	            if (!w)
	                w = $Writer$6.create();
	            if (m.id != null && Object.hasOwnProperty.call(m, "id"))
	                w.uint32(10).bytes(m.id);
	            if (m.addrs != null && m.addrs.length) {
	                for (var i = 0; i < m.addrs.length; ++i)
	                    w.uint32(18).bytes(m.addrs[i]);
	            }
	            if (m.connection != null && Object.hasOwnProperty.call(m, "connection"))
	                w.uint32(24).int32(m.connection);
	            return w;
	        };

	        /**
	         * Decodes a Peer message from the specified reader or buffer.
	         * @function decode
	         * @memberof Message.Peer
	         * @static
	         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	         * @param {number} [l] Message length if known beforehand
	         * @returns {Message.Peer} Peer
	         * @throws {Error} If the payload is not a reader or valid buffer
	         * @throws {$protobuf.util.ProtocolError} If required fields are missing
	         */
	        Peer.decode = function decode(r, l) {
	            if (!(r instanceof $Reader$6))
	                r = $Reader$6.create(r);
	            var c = l === undefined ? r.len : r.pos + l, m = new $root$6.Message.Peer();
	            while (r.pos < c) {
	                var t = r.uint32();
	                switch (t >>> 3) {
	                case 1:
	                    m.id = r.bytes();
	                    break;
	                case 2:
	                    if (!(m.addrs && m.addrs.length))
	                        m.addrs = [];
	                    m.addrs.push(r.bytes());
	                    break;
	                case 3:
	                    m.connection = r.int32();
	                    break;
	                default:
	                    r.skipType(t & 7);
	                    break;
	                }
	            }
	            return m;
	        };

	        /**
	         * Creates a Peer message from a plain object. Also converts values to their respective internal types.
	         * @function fromObject
	         * @memberof Message.Peer
	         * @static
	         * @param {Object.<string,*>} d Plain object
	         * @returns {Message.Peer} Peer
	         */
	        Peer.fromObject = function fromObject(d) {
	            if (d instanceof $root$6.Message.Peer)
	                return d;
	            var m = new $root$6.Message.Peer();
	            if (d.id != null) {
	                if (typeof d.id === "string")
	                    $util$6.base64.decode(d.id, m.id = $util$6.newBuffer($util$6.base64.length(d.id)), 0);
	                else if (d.id.length)
	                    m.id = d.id;
	            }
	            if (d.addrs) {
	                if (!Array.isArray(d.addrs))
	                    throw TypeError(".Message.Peer.addrs: array expected");
	                m.addrs = [];
	                for (var i = 0; i < d.addrs.length; ++i) {
	                    if (typeof d.addrs[i] === "string")
	                        $util$6.base64.decode(d.addrs[i], m.addrs[i] = $util$6.newBuffer($util$6.base64.length(d.addrs[i])), 0);
	                    else if (d.addrs[i].length)
	                        m.addrs[i] = d.addrs[i];
	                }
	            }
	            switch (d.connection) {
	            case "NOT_CONNECTED":
	            case 0:
	                m.connection = 0;
	                break;
	            case "CONNECTED":
	            case 1:
	                m.connection = 1;
	                break;
	            case "CAN_CONNECT":
	            case 2:
	                m.connection = 2;
	                break;
	            case "CANNOT_CONNECT":
	            case 3:
	                m.connection = 3;
	                break;
	            }
	            return m;
	        };

	        /**
	         * Creates a plain object from a Peer message. Also converts values to other types if specified.
	         * @function toObject
	         * @memberof Message.Peer
	         * @static
	         * @param {Message.Peer} m Peer
	         * @param {$protobuf.IConversionOptions} [o] Conversion options
	         * @returns {Object.<string,*>} Plain object
	         */
	        Peer.toObject = function toObject(m, o) {
	            if (!o)
	                o = {};
	            var d = {};
	            if (o.arrays || o.defaults) {
	                d.addrs = [];
	            }
	            if (m.id != null && m.hasOwnProperty("id")) {
	                d.id = o.bytes === String ? $util$6.base64.encode(m.id, 0, m.id.length) : o.bytes === Array ? Array.prototype.slice.call(m.id) : m.id;
	                if (o.oneofs)
	                    d._id = "id";
	            }
	            if (m.addrs && m.addrs.length) {
	                d.addrs = [];
	                for (var j = 0; j < m.addrs.length; ++j) {
	                    d.addrs[j] = o.bytes === String ? $util$6.base64.encode(m.addrs[j], 0, m.addrs[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.addrs[j]) : m.addrs[j];
	                }
	            }
	            if (m.connection != null && m.hasOwnProperty("connection")) {
	                d.connection = o.enums === String ? $root$6.Message.ConnectionType[m.connection] : m.connection;
	                if (o.oneofs)
	                    d._connection = "connection";
	            }
	            return d;
	        };

	        /**
	         * Converts this Peer to JSON.
	         * @function toJSON
	         * @memberof Message.Peer
	         * @instance
	         * @returns {Object.<string,*>} JSON object
	         */
	        Peer.prototype.toJSON = function toJSON() {
	            return this.constructor.toObject(this, $protobuf$5.util.toJSONOptions);
	        };

	        return Peer;
	    })();

	    return Message;
	})();

	var dht = $root$6;

	const PeerId$j = src$o.exports;
	const { Multiaddr: Multiaddr$e } = src$s;
	const { Record: Record$3 } = src$l;
	const Proto = dht;

	const MESSAGE_TYPE = Proto.Message.MessageType;
	const CONNECTION_TYPE = Proto.Message.ConnectionType;
	const MESSAGE_TYPE_LOOKUP$3 = Object.keys(MESSAGE_TYPE);

	/**
	 * @typedef {0|1|2|3|4} ConnectionType
	 *
	 * @typedef {object} PBPeer
	 * @property {Uint8Array} id
	 * @property {Uint8Array[]} addrs
	 * @property {ConnectionType} connection
	 *
	 * @typedef {import('../types').PeerData} PeerData
	 */

	/**
	 * Represents a single DHT control message.
	 */
	class Message$b {
	  /**
	   * @param {import('./dht').Message.MessageType} type
	   * @param {Uint8Array} key
	   * @param {number} level
	   */
	  constructor (type, key, level) {
	    if (key && !(key instanceof Uint8Array)) {
	      throw new Error('Key must be a Uint8Array')
	    }

	    this.type = type;
	    this.key = key;
	    this._clusterLevelRaw = level;

	    /** @type {PeerData[]} */
	    this.closerPeers = [];
	    /** @type {PeerData[]} */
	    this.providerPeers = [];
	    /** @type {import('libp2p-record').Record | undefined} */
	    this.record = undefined;
	  }

	  /**
	   * @type {number}
	   */
	  get clusterLevel () {
	    const level = this._clusterLevelRaw - 1;
	    if (level < 0) {
	      return 0
	    }

	    return level
	  }

	  set clusterLevel (level) {
	    this._clusterLevelRaw = level;
	  }

	  /**
	   * Encode into protobuf
	   */
	  serialize () {
	    const obj = {
	      key: this.key,
	      type: this.type,
	      clusterLevelRaw: this._clusterLevelRaw,
	      closerPeers: this.closerPeers.map(toPbPeer),
	      providerPeers: this.providerPeers.map(toPbPeer),

	      /** @type {Uint8Array | undefined} */
	      record: undefined
	    };

	    if (this.record) {
	      if (this.record instanceof Uint8Array) {
	        obj.record = this.record;
	      } else {
	        obj.record = this.record.serialize();
	      }
	    }

	    return Proto.Message.encode(obj).finish()
	  }

	  /**
	   * Decode from protobuf
	   *
	   * @param {Uint8Array} raw
	   */
	  static deserialize (raw) {
	    const dec = Proto.Message.decode(raw);

	    const msg = new Message$b(dec.type || 0, dec.key || Uint8Array.from([]), dec.clusterLevelRaw || 0);

	    msg.closerPeers = dec.closerPeers.map(fromPbPeer);
	    msg.providerPeers = dec.providerPeers.map(fromPbPeer);

	    if (dec.record && dec.record.length) {
	      msg.record = Record$3.deserialize(dec.record);
	    }

	    return msg
	  }
	}

	Message$b.TYPES = MESSAGE_TYPE;
	Message$b.CONNECTION_TYPES = CONNECTION_TYPE;

	/**
	 * @param {PeerData} peer
	 */
	function toPbPeer (peer) {
	  /** @type {PBPeer} */
	  const output = {
	    id: peer.id.id,
	    addrs: (peer.multiaddrs || []).map((m) => m.bytes),
	    connection: CONNECTION_TYPE.CONNECTED
	  };

	  return output
	}

	/**
	 * @param {import('./dht').Message.IPeer} peer
	 */
	function fromPbPeer (peer) {
	  return {
	    // @ts-ignore id is optional on protobuf, but it will exist?
	    id: new PeerId$j(peer.id),
	    multiaddrs: (peer.addrs || []).map((a) => new Multiaddr$e(a))
	  }
	}

	message$1.Message = Message$b;
	message$1.MESSAGE_TYPE = MESSAGE_TYPE;
	message$1.MESSAGE_TYPE_LOOKUP = MESSAGE_TYPE_LOOKUP$3;

	const { MESSAGE_TYPE_LOOKUP: MESSAGE_TYPE_LOOKUP$2 } = message$1;

	/** @type {import('../types').MessageName[]} */
	const MESSAGE_NAMES = [
	  'PUT_VALUE',
	  'GET_VALUE',
	  'ADD_PROVIDER',
	  'GET_PROVIDERS',
	  'FIND_NODE',
	  'PING'
	];

	/**
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('../types').QueryEvent} QueryEvent
	 * @typedef {import('../types').PeerData} PeerData
	 * @typedef {import('../message').Message} Message
	 * @typedef {import('../message/dht').Message.MessageType} MessageType
	 * @typedef {import('../types').DHTRecord} Record
	 */

	/**
	 * @param {object} fields
	 * @param {PeerId} fields.to
	 * @param {number} fields.type
	 * @returns {import('../types').SendingQueryEvent}
	 */
	function sendingQueryEvent$1 (fields) {
	  return {
	    ...fields,
	    name: 'SENDING_QUERY',
	    type: 0,
	    // @ts-expect-error MESSAGE_TYPE_LOOKUP is string[]
	    messageName: MESSAGE_TYPE_LOOKUP$2[fields.type],
	    messageType: fields.type
	  }
	}

	/**
	 * @param {object} fields
	 * @param {PeerId} fields.from
	 * @param {MessageType} fields.messageType
	 * @param {PeerData[]} [fields.closer]
	 * @param {PeerData[]} [fields.providers]
	 * @param {Record} [fields.record]
	 * @returns {import('../types').PeerResponseEvent}
	 */
	function peerResponseEvent$2 (fields) {
	  return {
	    ...fields,
	    name: 'PEER_RESPONSE',
	    type: 1,
	    messageName: MESSAGE_NAMES[fields.messageType],
	    closer: fields.closer ? fields.closer : [],
	    providers: fields.providers ? fields.providers : []
	  }
	}

	/**
	 * @param {object} fields
	 * @param {PeerId} fields.from
	 * @param {PeerData} fields.peer
	 * @returns {import('../types').FinalPeerEvent}
	 */
	function finalPeerEvent$1 (fields) {
	  return {
	    ...fields,
	    name: 'FINAL_PEER',
	    type: 2
	  }
	}

	/**
	 * @param {object} fields
	 * @param {PeerId} fields.from
	 * @param {Error} fields.error
	 * @returns {import('../types').QueryErrorEvent}
	 */
	function queryErrorEvent$6 (fields) {
	  return {
	    ...fields,
	    name: 'QUERY_ERROR',
	    type: 3
	  }
	}

	/**
	 * @param {object} fields
	 * @param {PeerId} fields.from
	 * @param {PeerData[]} fields.providers
	 * @returns {import('../types').ProviderEvent}
	 */
	function providerEvent$1 (fields) {
	  return {
	    ...fields,
	    name: 'PROVIDER',
	    type: 4
	  }
	}

	/**
	 * @param {object} fields
	 * @param {PeerId} fields.from
	 * @param {Uint8Array} fields.value
	 * @returns {import('../types').ValueEvent}
	 */
	function valueEvent$2 (fields) {
	  return {
	    ...fields,
	    name: 'VALUE',
	    type: 5
	  }
	}

	/**
	 * @param {object} fields
	 * @param {PeerId} fields.peer
	 * @returns {import('../types').AddingPeerEvent}
	 */
	function addingPeerEvent (fields) {
	  return {
	    ...fields,
	    name: 'ADDING_PEER',
	    type: 6
	  }
	}

	/**
	 * @param {object} fields
	 * @param {PeerId} fields.peer
	 * @returns {import('../types').DialingPeerEvent}
	 */
	function dialingPeerEvent$1 (fields) {
	  return {
	    ...fields,
	    name: 'DIALING_PEER',
	    type: 7
	  }
	}

	var events = {
	  sendingQueryEvent: sendingQueryEvent$1,
	  peerResponseEvent: peerResponseEvent$2,
	  finalPeerEvent: finalPeerEvent$1,
	  queryErrorEvent: queryErrorEvent$6,
	  providerEvent: providerEvent$1,
	  valueEvent: valueEvent$2,
	  addingPeerEvent,
	  dialingPeerEvent: dialingPeerEvent$1
	};

	const errcode$g = errCode$q;
	const { pipe: pipe$f } = itPipe.exports;
	const lp$5 = src$i;
	const drain$3 = itDrain;
	const first$2 = itFirst;
	const { Message: Message$a, MESSAGE_TYPE_LOOKUP: MESSAGE_TYPE_LOOKUP$1 } = message$1;
	const utils$l = utils$o;
	const { EventEmitter: EventEmitter$d } = require$$1$5;
	const {
	  dialingPeerEvent,
	  sendingQueryEvent,
	  peerResponseEvent: peerResponseEvent$1,
	  queryErrorEvent: queryErrorEvent$5
	} = events;

	/**
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream
	 * @typedef {import('./types').QueryEvent} QueryEvent
	 * @typedef {import('./types').PeerData} PeerData
	 */

	/**
	 * Handle network operations for the dht
	 */
	class Network$3 extends EventEmitter$d {
	  /**
	   * Create a new network
	   *
	   * @param {object} params
	   * @param {import('./types').Dialer} params.dialer
	   * @param {string} params.protocol
	   * @param {boolean} params.lan
	   */
	  constructor ({ dialer, protocol, lan }) {
	    super();

	    this._log = utils$l.logger(`libp2p:kad-dht:${lan ? 'lan' : 'wan'}:network`);
	    this._running = false;
	    this._dialer = dialer;
	    this._protocol = protocol;
	  }

	  /**
	   * Start the network
	   */
	  start () {
	    if (this._running) {
	      return
	    }

	    this._running = true;
	  }

	  /**
	   * Stop all network activity
	   */
	  stop () {
	    this._running = false;
	  }

	  /**
	   * Is the network online?
	   *
	   * @type {boolean}
	   */
	  get isStarted () {
	    return this._running
	  }

	  /**
	   * Send a request and record RTT for latency measurements
	   *
	   * @param {PeerId} to - The peer that should receive a message
	   * @param {Message} msg - The message to send
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal]
	   */
	  async * sendRequest (to, msg, options = {}) {
	    if (!this._running) {
	      return
	    }

	    this._log('sending %s to %p', MESSAGE_TYPE_LOOKUP$1[msg.type], to);

	    try {
	      yield dialingPeerEvent({ peer: to });

	      const { stream } = await this._dialer.dialProtocol(to, this._protocol, options);

	      yield sendingQueryEvent({ to, type: msg.type });

	      const response = await this._writeReadMessage(stream, msg.serialize(), options);

	      yield peerResponseEvent$1({
	        from: to,
	        messageType: response.type,
	        closer: response.closerPeers,
	        providers: response.providerPeers,
	        record: response.record
	      });
	    } catch (/** @type {any} */ err) {
	      yield queryErrorEvent$5({ from: to, error: err });
	    }
	  }

	  /**
	   * Sends a message without expecting an answer.
	   *
	   * @param {PeerId} to
	   * @param {Message} msg
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal]
	   */
	  async * sendMessage (to, msg, options = {}) {
	    if (!this._running) {
	      return
	    }

	    this._log('sending %s to %p', MESSAGE_TYPE_LOOKUP$1[msg.type], to);

	    yield dialingPeerEvent({ peer: to });

	    const { stream } = await this._dialer.dialProtocol(to, this._protocol, options);

	    yield sendingQueryEvent({ to, type: msg.type });

	    try {
	      await this._writeMessage(stream, msg.serialize(), options);

	      yield peerResponseEvent$1({ from: to, messageType: msg.type });
	    } catch (/** @type {any} */ err) {
	      yield queryErrorEvent$5({ from: to, error: err });
	    }
	  }

	  /**
	   * Write a message to the given stream
	   *
	   * @param {MuxedStream} stream - the stream to use
	   * @param {Uint8Array} msg - the message to send
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal]
	   */
	  async _writeMessage (stream, msg, options = {}) {
	    await pipe$f(
	      [msg],
	      lp$5.encode(),
	      stream,
	      drain$3
	    );
	  }

	  /**
	   * Write a message and read its response.
	   * If no response is received after the specified timeout
	   * this will error out.
	   *
	   * @param {MuxedStream} stream - the stream to use
	   * @param {Uint8Array} msg - the message to send
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal]
	   */
	  async _writeReadMessage (stream, msg, options = {}) {
	    const res = await pipe$f(
	      [msg],
	      lp$5.encode(),
	      stream,
	      lp$5.decode(),
	      /**
	       * @param {AsyncIterable<Uint8Array>} source
	       */
	      async source => {
	        const buf = await first$2(source);

	        if (buf) {
	          return buf.slice()
	        }
	      }
	    );

	    if (res.length === 0) {
	      throw errcode$g(new Error('No message received'), 'ERR_NO_MESSAGE_RECEIVED')
	    }

	    const message = Message$a.deserialize(res);

	    // tell any listeners about new peers we've seen
	    message.closerPeers.forEach(peerData => {
	      this.emit('peer', peerData);
	    });
	    message.providerPeers.forEach(peerData => {
	      this.emit('peer', peerData);
	    });

	    return message
	  }
	}

	network.Network = Network$3;

	var contentFetching = {};

	const errcode$f = errCode$q;
	const { equals: uint8ArrayEquals$1 } = require$$7$1;
	const { toString: uint8ArrayToString$6 } = require$$8;
	const Libp2pRecord$1 = src$l;
	const {
	  ALPHA: ALPHA$2
	} = constants$5;
	const utils$k = utils$o;
	const Record$2 = Libp2pRecord$1.Record;
	const parallel$1 = itParallel;
	const map$3 = itMap;
	const {
	  valueEvent: valueEvent$1,
	  queryErrorEvent: queryErrorEvent$4
	} = events;
	const { Message: Message$9 } = message$1;
	const { pipe: pipe$e } = itPipe.exports;

	/**
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('../types').ValueEvent} ValueEvent
	 */

	class ContentFetching$1 {
	  /**
	   * @param {object} params
	   * @param {import('peer-id')} params.peerId
	   * @param {import('interface-datastore').Datastore} params.records
	   * @param {import('libp2p-interfaces/src/types').DhtValidators} params.validators
	   * @param {import('libp2p-interfaces/src/types').DhtSelectors} params.selectors
	   * @param {import('../peer-routing').PeerRouting} params.peerRouting
	   * @param {import('../query/manager').QueryManager} params.queryManager
	   * @param {import('../routing-table').RoutingTable} params.routingTable
	   * @param {import('../network').Network} params.network
	   * @param {boolean} params.lan
	   */
	  constructor ({ peerId, records, validators, selectors, peerRouting, queryManager, routingTable, network, lan }) {
	    this._log = utils$k.logger(`libp2p:kad-dht:${lan ? 'lan' : 'wan'}:content-fetching`);
	    this._peerId = peerId;
	    this._records = records;
	    this._validators = validators;
	    this._selectors = selectors;
	    this._peerRouting = peerRouting;
	    this._queryManager = queryManager;
	    this._routingTable = routingTable;
	    this._network = network;
	  }

	  /**
	   * @param {Uint8Array} key
	   * @param {Uint8Array} rec
	   */
	  async putLocal (key, rec) { // eslint-disable-line require-await
	    return this._records.put(utils$k.bufferToKey(key), rec)
	  }

	  /**
	   * Attempt to retrieve the value for the given key from
	   * the local datastore.
	   *
	   * @param {Uint8Array} key
	   */
	  async getLocal (key) {
	    this._log(`getLocal ${uint8ArrayToString$6(key, 'base32')}`);

	    const dsKey = utils$k.bufferToKey(key);

	    this._log(`fetching record for key ${dsKey}`);
	    const raw = await this._records.get(dsKey);
	    this._log(`found ${dsKey} in local datastore`);

	    const rec = Record$2.deserialize(raw);

	    await Libp2pRecord$1.validator.verifyRecord(this._validators, rec);

	    return rec
	  }

	  /**
	   * Send the best record found to any peers that have an out of date record.
	   *
	   * @param {Uint8Array} key
	   * @param {ValueEvent[]} vals - values retrieved from the DHT
	   * @param {Uint8Array} best - the best record that was found
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal]
	   */
	  async * sendCorrectionRecord (key, vals, best, options = {}) {
	    this._log('sendCorrection for %b', key);
	    const fixupRec = await utils$k.createPutRecord(key, best);

	    for (const { value, from } of vals) {
	      // no need to do anything
	      if (uint8ArrayEquals$1(value, best)) {
	        this._log('record was ok');
	        continue
	      }

	      // correct ourself
	      if (this._peerId.equals(from)) {
	        try {
	          const dsKey = utils$k.bufferToKey(key);
	          this._log(`Storing corrected record for key ${dsKey}`);
	          await this._records.put(dsKey, fixupRec);
	        } catch (/** @type {any} */ err) {
	          this._log.error('Failed error correcting self', err);
	        }

	        continue
	      }

	      // send correction
	      let sentCorrection = false;
	      const request = new Message$9(Message$9.TYPES.PUT_VALUE, key, 0);
	      request.record = Record$2.deserialize(fixupRec);

	      for await (const event of this._network.sendRequest(from, request, options)) {
	        if (event.name === 'PEER_RESPONSE' && event.record && uint8ArrayEquals$1(event.record.value, Record$2.deserialize(fixupRec).value)) {
	          sentCorrection = true;
	        }

	        yield event;
	      }

	      if (!sentCorrection) {
	        yield queryErrorEvent$4({ from, error: errcode$f(new Error('value not put correctly'), 'ERR_PUT_VALUE_INVALID') });
	      }

	      this._log.error('Failed error correcting entry');
	    }
	  }

	  /**
	   * Store the given key/value pair in the DHT
	   *
	   * @param {Uint8Array} key
	   * @param {Uint8Array} value
	   * @param {object} [options] - put options
	   * @param {AbortSignal} [options.signal]
	   */
	  async * put (key, value, options = {}) {
	    this._log('put key %b value %b', key, value);

	    // create record in the dht format
	    const record = await utils$k.createPutRecord(key, value);

	    // store the record locally
	    const dsKey = utils$k.bufferToKey(key);
	    this._log(`storing record for key ${dsKey}`);
	    await this._records.put(dsKey, record);

	    // put record to the closest peers
	    yield * pipe$e(
	      this._peerRouting.getClosestPeers(key, { signal: options.signal }),
	      (source) => map$3(source, (event) => {
	        return async () => {
	          if (event.name !== 'FINAL_PEER') {
	            return [event]
	          }

	          const events = [];

	          const msg = new Message$9(Message$9.TYPES.PUT_VALUE, key, 0);
	          msg.record = Record$2.deserialize(record);

	          for await (const putEvent of this._network.sendRequest(event.peer.id, msg, options)) {
	            events.push(putEvent);

	            if (putEvent.name !== 'PEER_RESPONSE') {
	              continue
	            }

	            if (putEvent.record && uint8ArrayEquals$1(putEvent.record.value, Record$2.deserialize(record).value)) ; else {
	              events.push(queryErrorEvent$4({ from: event.peer.id, error: errcode$f(new Error('value not put correctly'), 'ERR_PUT_VALUE_INVALID') }));
	            }
	          }

	          return events
	        }
	      }),
	      (source) => parallel$1(source, {
	        ordered: false,
	        concurrency: ALPHA$2
	      }),
	      async function * (source) {
	        for await (const events of source) {
	          yield * events;
	        }
	      }
	    );
	  }

	  /**
	   * Get the value to the given key
	   *
	   * @param {Uint8Array} key
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal]
	   * @param {number} [options.queryFuncTimeout]
	   */
	  async * get (key, options = {}) {
	    this._log('get %b', key);

	    /** @type {ValueEvent[]} */
	    const vals = [];

	    for await (const event of this.getMany(key, options)) {
	      if (event.name === 'VALUE') {
	        vals.push(event);
	      }

	      yield event;
	    }

	    if (!vals.length) {
	      return
	    }

	    const records = vals.map((v) => v.value);
	    let i = 0;

	    try {
	      i = Libp2pRecord$1.selection.bestRecord(this._selectors, key, records);
	    } catch (/** @type {any} */ err) {
	      // Assume the first record if no selector available
	      if (err.code !== 'ERR_NO_SELECTOR_FUNCTION_FOR_RECORD_KEY') {
	        throw err
	      }
	    }

	    const best = records[i];
	    this._log('GetValue %b %b', key, best);

	    if (!best) {
	      throw errcode$f(new Error('best value was not found'), 'ERR_NOT_FOUND')
	    }

	    yield * this.sendCorrectionRecord(key, vals, best, options);

	    yield vals[i];
	  }

	  /**
	   * Get the `n` values to the given key without sorting.
	   *
	   * @param {Uint8Array} key
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal]
	   * @param {number} [options.queryFuncTimeout]
	   */
	  async * getMany (key, options = {}) {
	    this._log('getMany values for %t', key);

	    try {
	      const localRec = await this.getLocal(key);

	      yield valueEvent$1({
	        value: localRec.value,
	        from: this._peerId
	      });
	    } catch (/** @type {any} */ err) {
	      this._log('error getting local value for %b', key, err);
	    }

	    const id = await utils$k.convertBuffer(key);
	    const rtp = this._routingTable.closestPeers(id);

	    this._log('found %d peers in routing table', rtp.length);

	    const self = this;

	    /**
	     * @type {import('../query/types').QueryFunc}
	     */
	    const getValueQuery = async function * ({ peer, signal }) {
	      for await (const event of self._peerRouting.getValueOrPeers(peer, key, { signal })) {
	        yield event;

	        if (event.name === 'PEER_RESPONSE' && event.record) {
	          yield valueEvent$1({ from: peer, value: event.record.value });
	        }
	      }
	    };

	    // we have peers, lets send the actual query to them
	    yield * this._queryManager.run(key, rtp, getValueQuery, options);
	  }
	}

	contentFetching.ContentFetching = ContentFetching$1;

	var contentRouting$1 = {};

	const { Message: Message$8 } = message$1;
	const parallel = itParallel;
	const map$2 = itMap;
	const { convertBuffer: convertBuffer$1, logger: logger$2 } = utils$o;
	const { ALPHA: ALPHA$1 } = constants$5;
	const { pipe: pipe$d } = itPipe.exports;
	const {
	  queryErrorEvent: queryErrorEvent$3,
	  peerResponseEvent,
	  providerEvent
	} = events;
	const { Message: { MessageType } } = dht;

	/**
	 * @typedef {import('multiformats/cid').CID} CID
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('multiaddr').Multiaddr} Multiaddr
	 */

	class ContentRouting$3 {
	  /**
	   * @param {object} params
	   * @param {import('peer-id')} params.peerId
	   * @param {import('../network').Network} params.network
	   * @param {import('../peer-routing').PeerRouting} params.peerRouting
	   * @param {import('../query/manager').QueryManager} params.queryManager
	   * @param {import('../routing-table').RoutingTable} params.routingTable
	   * @param {import('../providers').Providers} params.providers
	   * @param {import('libp2p/src/peer-store/types').PeerStore} params.peerStore
	   * @param {boolean} params.lan
	   */
	  constructor ({ peerId, network, peerRouting, queryManager, routingTable, providers, peerStore, lan }) {
	    this._log = logger$2(`libp2p:kad-dht:${lan ? 'lan' : 'wan'}:content-routing`);
	    this._peerId = peerId;
	    this._network = network;
	    this._peerRouting = peerRouting;
	    this._queryManager = queryManager;
	    this._routingTable = routingTable;
	    this._providers = providers;
	    this._peerStore = peerStore;
	  }

	  /**
	   * Announce to the network that we can provide the value for a given key and
	   * are contactable on the given multiaddrs
	   *
	   * @param {CID} key
	   * @param {Multiaddr[]} multiaddrs
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal]
	   */
	  async * provide (key, multiaddrs, options = {}) {
	    this._log('provide %s', key);

	    // Add peer as provider
	    await this._providers.addProvider(key, this._peerId);

	    const msg = new Message$8(Message$8.TYPES.ADD_PROVIDER, key.bytes, 0);
	    msg.providerPeers = [{
	      id: this._peerId,
	      multiaddrs
	    }];

	    let sent = 0;

	    /**
	     * @param {import('../types').QueryEvent} event
	     */
	    const maybeNotifyPeer = (event) => {
	      return async () => {
	        if (event.name !== 'FINAL_PEER') {
	          return [event]
	        }

	        const events = [];

	        this._log('putProvider %s to %p', key, event.peer.id);

	        try {
	          this._log('sending provider record for %s to %p', key, event.peer.id);

	          for await (const sendEvent of this._network.sendMessage(event.peer.id, msg, options)) {
	            if (sendEvent.name === 'PEER_RESPONSE') {
	              this._log('sent provider record for %s to %p', key, event.peer.id);
	              sent++;
	            }

	            events.push(sendEvent);
	          }
	        } catch (/** @type {any} */ err) {
	          this._log.error('error sending provide record to peer %p', event.peer.id, err);
	          events.push(queryErrorEvent$3({ from: event.peer.id, error: err }));
	        }

	        return events
	      }
	    };

	    // Notify closest peers
	    yield * pipe$d(
	      this._peerRouting.getClosestPeers(key.multihash.bytes, options),
	      (source) => map$2(source, (event) => maybeNotifyPeer(event)),
	      (source) => parallel(source, {
	        ordered: false,
	        concurrency: ALPHA$1
	      }),
	      async function * (source) {
	        for await (const events of source) {
	          yield * events;
	        }
	      }
	    );

	    this._log('sent provider records to %d peers', sent);
	  }

	  /**
	   * Search the dht for up to `K` providers of the given CID.
	   *
	   * @param {CID} key
	   * @param {object} [options] - findProviders options
	   * @param {number} [options.maxNumProviders=5] - maximum number of providers to find
	   * @param {AbortSignal} [options.signal]
	   * @param {number} [options.queryFuncTimeout]
	   */
	  async * findProviders (key, options = { maxNumProviders: 5 }) {
	    const toFind = options.maxNumProviders || this._routingTable._kBucketSize;
	    const target = key.multihash.bytes;
	    const id = await convertBuffer$1(target);
	    const self = this;

	    this._log(`findProviders ${key}`);

	    const provs = await this._providers.getProviders(key);

	    // yield values if we have some, also slice because maybe we got lucky and already have too many?
	    if (provs.length) {
	      /** @type {{ id: PeerId, multiaddrs: Multiaddr[] }[]} */
	      const providers = [];

	      for (const peerId of provs.slice(0, toFind)) {
	        providers.push({
	          id: peerId,
	          multiaddrs: ((await this._peerStore.addressBook.get(peerId)) || []).map(address => address.multiaddr)
	        });
	      }

	      yield peerResponseEvent({ from: this._peerId, messageType: MessageType.GET_PROVIDERS, providers });
	      yield providerEvent({ from: this._peerId, providers: providers });
	    }

	    // All done
	    if (provs.length >= toFind) {
	      return
	    }

	    /**
	     * The query function to use on this particular disjoint path
	     *
	     * @type {import('../query/types').QueryFunc}
	     */
	    const findProvidersQuery = async function * ({ peer, signal }) {
	      const request = new Message$8(Message$8.TYPES.GET_PROVIDERS, target, 0);

	      yield * self._network.sendRequest(peer, request, { signal });
	    };

	    const providers = new Set(provs.map(p => p.toB58String()));

	    for await (const event of this._queryManager.run(target, this._routingTable.closestPeers(id), findProvidersQuery, options)) {
	      yield event;

	      if (event.name === 'PEER_RESPONSE') {
	        this._log(`Found ${event.providers.length} provider entries for ${key} and ${event.closer.length} closer peers`);

	        const newProviders = [];

	        for (const peer of event.providers) {
	          if (providers.has(peer.id.toB58String())) {
	            continue
	          }

	          providers.add(peer.id.toB58String());
	          newProviders.push(peer);
	        }

	        if (newProviders.length) {
	          yield providerEvent({ from: event.from, providers: newProviders });
	        }

	        if (providers.size === toFind) {
	          return
	        }
	      }
	    }
	  }
	}

	contentRouting$1.ContentRouting = ContentRouting$3;

	var peerRouting$1 = {};

	var indentString$1 = (string, count = 1, options) => {
		options = {
			indent: ' ',
			includeEmptyLines: false,
			...options
		};

		if (typeof string !== 'string') {
			throw new TypeError(
				`Expected \`input\` to be a \`string\`, got \`${typeof string}\``
			);
		}

		if (typeof count !== 'number') {
			throw new TypeError(
				`Expected \`count\` to be a \`number\`, got \`${typeof count}\``
			);
		}

		if (typeof options.indent !== 'string') {
			throw new TypeError(
				`Expected \`options.indent\` to be a \`string\`, got \`${typeof options.indent}\``
			);
		}

		if (count === 0) {
			return string;
		}

		const regex = options.includeEmptyLines ? /^/gm : /^(?!\s*$)/gm;

		return string.replace(regex, options.indent.repeat(count));
	};

	/*
	The MIT License (MIT)

	Copyright (c) 2016 CoderPuppy

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.

	*/
	var _endianness;
	function endianness() {
	  if (typeof _endianness === 'undefined') {
	    var a = new ArrayBuffer(2);
	    var b = new Uint8Array(a);
	    var c = new Uint16Array(a);
	    b[0] = 1;
	    b[1] = 2;
	    if (c[0] === 258) {
	      _endianness = 'BE';
	    } else if (c[0] === 513){
	      _endianness = 'LE';
	    } else {
	      throw new Error('unable to figure out endianess');
	    }
	  }
	  return _endianness;
	}

	function hostname() {
	  if (typeof global$1.location !== 'undefined') {
	    return global$1.location.hostname
	  } else return '';
	}

	function loadavg() {
	  return [];
	}

	function uptime() {
	  return 0;
	}

	function freemem() {
	  return Number.MAX_VALUE;
	}

	function totalmem() {
	  return Number.MAX_VALUE;
	}

	function cpus() {
	  return [];
	}

	function type() {
	  return 'Browser';
	}

	function release () {
	  if (typeof global$1.navigator !== 'undefined') {
	    return global$1.navigator.appVersion;
	  }
	  return '';
	}

	function networkInterfaces(){}
	function getNetworkInterfaces(){}

	function arch() {
	  return 'javascript';
	}

	function platform() {
	  return 'browser';
	}

	function tmpDir() {
	  return '/tmp';
	}
	var tmpdir = tmpDir;

	var EOL = '\n';
	var os$1 = {
	  EOL: EOL,
	  tmpdir: tmpdir,
	  tmpDir: tmpDir,
	  networkInterfaces:networkInterfaces,
	  getNetworkInterfaces: getNetworkInterfaces,
	  release: release,
	  type: type,
	  cpus: cpus,
	  totalmem: totalmem,
	  freemem: freemem,
	  uptime: uptime,
	  loadavg: loadavg,
	  hostname: hostname,
	  endianness: endianness,
	};

	var os$2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		endianness: endianness,
		hostname: hostname,
		loadavg: loadavg,
		uptime: uptime,
		freemem: freemem,
		totalmem: totalmem,
		cpus: cpus,
		type: type,
		release: release,
		networkInterfaces: networkInterfaces,
		getNetworkInterfaces: getNetworkInterfaces,
		arch: arch,
		platform: platform,
		tmpDir: tmpDir,
		tmpdir: tmpdir,
		EOL: EOL,
		'default': os$1
	});

	var require$$0 = /*@__PURE__*/getAugmentedNamespace(os$2);

	const os = require$$0;

	const extractPathRegex = /\s+at.*(?:\(|\s)(.*)\)?/;
	const pathRegex = /^(?:(?:(?:node|(?:internal\/[\w/]*|.*node_modules\/(?:babel-polyfill|pirates)\/.*)?\w+)\.js:\d+:\d+)|native)/;
	const homeDir = typeof os.homedir === 'undefined' ? '' : os.homedir();

	var cleanStack$1 = (stack, options) => {
		options = Object.assign({pretty: false}, options);

		return stack.replace(/\\/g, '/')
			.split('\n')
			.filter(line => {
				const pathMatches = line.match(extractPathRegex);
				if (pathMatches === null || !pathMatches[1]) {
					return true;
				}

				const match = pathMatches[1];

				// Electron
				if (
					match.includes('.app/Contents/Resources/electron.asar') ||
					match.includes('.app/Contents/Resources/default_app.asar')
				) {
					return false;
				}

				return !pathRegex.test(match);
			})
			.filter(line => line.trim() !== '')
			.map(line => {
				if (options.pretty) {
					return line.replace(extractPathRegex, (m, p1) => m.replace(p1, p1.replace(homeDir, '~')));
				}

				return line;
			})
			.join('\n');
	};

	const indentString = indentString$1;
	const cleanStack = cleanStack$1;

	const cleanInternalStack = stack => stack.replace(/\s+at .*aggregate-error\/index.js:\d+:\d+\)?/g, '');

	class AggregateError$2 extends Error {
		constructor(errors) {
			if (!Array.isArray(errors)) {
				throw new TypeError(`Expected input to be an Array, got ${typeof errors}`);
			}

			errors = [...errors].map(error => {
				if (error instanceof Error) {
					return error;
				}

				if (error !== null && typeof error === 'object') {
					// Handle plain error objects with message property and/or possibly other metadata
					return Object.assign(new Error(error.message), error);
				}

				return new Error(error);
			});

			let message = errors
				.map(error => {
					// The `stack` property is not standardized, so we can't assume it exists
					return typeof error.stack === 'string' ? cleanInternalStack(cleanStack(error.stack)) : String(error);
				})
				.join('\n');
			message = '\n' + indentString(message, 4);
			super(message);

			this.name = 'AggregateError';

			Object.defineProperty(this, '_errors', {value: errors});
		}

		* [Symbol.iterator]() {
			for (const error of this._errors) {
				yield error;
			}
		}
	}

	var aggregateError = AggregateError$2;

	const AggregateError$1 = aggregateError;

	var pMap$1 = async (
		iterable,
		mapper,
		{
			concurrency = Infinity,
			stopOnError = true
		} = {}
	) => {
		return new Promise((resolve, reject) => {
			if (typeof mapper !== 'function') {
				throw new TypeError('Mapper function is required');
			}

			if (!((Number.isSafeInteger(concurrency) || concurrency === Infinity) && concurrency >= 1)) {
				throw new TypeError(`Expected \`concurrency\` to be an integer from 1 and up or \`Infinity\`, got \`${concurrency}\` (${typeof concurrency})`);
			}

			const result = [];
			const errors = [];
			const iterator = iterable[Symbol.iterator]();
			let isRejected = false;
			let isIterableDone = false;
			let resolvingCount = 0;
			let currentIndex = 0;

			const next = () => {
				if (isRejected) {
					return;
				}

				const nextItem = iterator.next();
				const index = currentIndex;
				currentIndex++;

				if (nextItem.done) {
					isIterableDone = true;

					if (resolvingCount === 0) {
						if (!stopOnError && errors.length !== 0) {
							reject(new AggregateError$1(errors));
						} else {
							resolve(result);
						}
					}

					return;
				}

				resolvingCount++;

				(async () => {
					try {
						const element = await nextItem.value;
						result[index] = await mapper(element, index);
						resolvingCount--;
						next();
					} catch (error) {
						if (stopOnError) {
							isRejected = true;
							reject(error);
						} else {
							errors.push(error);
							resolvingCount--;
							next();
						}
					}
				})();
			};

			for (let i = 0; i < concurrency; i++) {
				next();

				if (isIterableDone) {
					break;
				}
			}
		});
	};

	var require$$2 = /*@__PURE__*/getAugmentedNamespace(compare$2);

	const utils$j = utils$o;
	const pMap = pMap$1;
	const { compare: uint8ArrayCompare } = require$$2;
	const { xor: uint8ArrayXor } = require$$1$1;

	/**
	 * @typedef {import('peer-id')} PeerId
	 */

	/**
	 * Maintains a list of peerIds sorted by distance from a DHT key.
	 */
	class PeerDistanceList$1 {
	  /**
	   * Creates a new PeerDistanceList.
	   *
	   * @param {Uint8Array} originDhtKey - the DHT key from which distance is calculated
	   * @param {number} capacity - the maximum size of the list
	   */
	  constructor (originDhtKey, capacity) {
	    this.originDhtKey = originDhtKey;
	    this.capacity = capacity;

	    /** @type {{ peerId: PeerId, distance: Uint8Array }[]} */
	    this.peerDistances = [];
	  }

	  /**
	   * The length of the list
	   */
	  get length () {
	    return this.peerDistances.length
	  }

	  /**
	   * The peerIds in the list, in order of distance from the origin key
	   */
	  get peers () {
	    return this.peerDistances.map(pd => pd.peerId)
	  }

	  /**
	   * Add a peerId to the list.
	   *
	   * @param {PeerId} peerId
	   */
	  async add (peerId) {
	    if (this.peerDistances.find(pd => pd.peerId.equals(peerId))) {
	      return
	    }

	    const dhtKey = await utils$j.convertPeerId(peerId);
	    const el = {
	      peerId,
	      distance: uint8ArrayXor(this.originDhtKey, dhtKey)
	    };

	    this.peerDistances.push(el);
	    this.peerDistances.sort((a, b) => uint8ArrayCompare(a.distance, b.distance));
	    this.peerDistances = this.peerDistances.slice(0, this.capacity);
	  }

	  /**
	   * Indicates whether any of the peerIds passed as a parameter are closer
	   * to the origin key than the furthest peerId in the PeerDistanceList.
	   *
	   * @param {PeerId[]} peerIds
	   */
	  async anyCloser (peerIds) {
	    if (!peerIds.length) {
	      return false
	    }

	    if (!this.length) {
	      return true
	    }

	    const dhtKeys = await pMap(peerIds, (peerId) => utils$j.convertPeerId(peerId));
	    const furthestDistance = this.peerDistances[this.peerDistances.length - 1].distance;

	    for (const dhtKey of dhtKeys) {
	      const keyDistance = uint8ArrayXor(this.originDhtKey, dhtKey);

	      if (uint8ArrayCompare(keyDistance, furthestDistance) < 0) {
	        return true
	      }
	    }

	    return false
	  }
	}

	var peerDistanceList = PeerDistanceList$1;

	const errcode$e = errCode$q;
	const { validator: validator$1 } = src$l;
	const PeerId$i = src$o.exports;
	const { toString: uint8ArrayToString$5 } = require$$8;
	const { Message: Message$7 } = message$1;
	const utils$i = utils$o;
	const {
	  queryErrorEvent: queryErrorEvent$2,
	  finalPeerEvent,
	  valueEvent
	} = events;
	const PeerDistanceList = peerDistanceList;
	const { Record: Record$1 } = src$l;

	/**
	 * @typedef {import('multiaddr').Multiaddr} Multiaddr
	 * @typedef {import('../types').PeerData} PeerData
	 */

	class PeerRouting$3 {
	  /**
	   * @param {object} params
	   * @param {import('peer-id')} params.peerId
	   * @param {import('../routing-table').RoutingTable} params.routingTable
	   * @param {import('libp2p/src/peer-store/types').PeerStore} params.peerStore
	   * @param {import('../network').Network} params.network
	   * @param {import('libp2p-interfaces/src/types').DhtValidators} params.validators
	   * @param {import('../query/manager').QueryManager} params.queryManager
	   * @param {boolean} params.lan
	   */
	  constructor ({ peerId, routingTable, peerStore, network, validators, queryManager, lan }) {
	    this._peerId = peerId;
	    this._routingTable = routingTable;
	    this._peerStore = peerStore;
	    this._network = network;
	    this._validators = validators;
	    this._queryManager = queryManager;
	    this._log = utils$i.logger(`libp2p:kad-dht:${lan ? 'lan' : 'wan'}:peer-routing`);
	  }

	  /**
	   * Look if we are connected to a peer with the given id.
	   * Returns its id and addresses, if found, otherwise `undefined`.
	   *
	   * @param {PeerId} peer
	   */
	  async findPeerLocal (peer) {
	    let peerData;
	    const p = await this._routingTable.find(peer);

	    if (p) {
	      this._log('findPeerLocal found %p in routing table', peer);

	      try {
	        peerData = await this._peerStore.get(p);
	      } catch (/** @type {any} */ err) {
	        if (err.code !== 'ERR_NOT_FOUND') {
	          throw err
	        }
	      }
	    }

	    if (!peerData) {
	      try {
	        peerData = await this._peerStore.get(peer);
	      } catch (/** @type {any} */ err) {
	        if (err.code !== 'ERR_NOT_FOUND') {
	          throw err
	        }
	      }
	    }

	    if (peerData) {
	      this._log('findPeerLocal found %p in peer store', peer);

	      return {
	        id: peerData.id,
	        multiaddrs: peerData.addresses.map((address) => address.multiaddr)
	      }
	    }
	  }

	  /**
	   * Get a value via rpc call for the given parameters.
	   *
	   * @param {PeerId} peer
	   * @param {Uint8Array} key
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal]
	   */
	  async * _getValueSingle (peer, key, options = {}) { // eslint-disable-line require-await
	    const msg = new Message$7(Message$7.TYPES.GET_VALUE, key, 0);
	    yield * this._network.sendRequest(peer, msg, options);
	  }

	  /**
	   * Get the public key directly from a node.
	   *
	   * @param {PeerId} peer
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal]
	   */
	  async * getPublicKeyFromNode (peer, options) {
	    const pkKey = utils$i.keyForPublicKey(peer);

	    for await (const event of this._getValueSingle(peer, pkKey, options)) {
	      yield event;

	      if (event.name === 'PEER_RESPONSE' && event.record) {
	        const recPeer = await PeerId$i.createFromPubKey(event.record.value);

	        // compare hashes of the pub key
	        if (!recPeer.equals(peer)) {
	          throw errcode$e(new Error('public key does not match id'), 'ERR_PUBLIC_KEY_DOES_NOT_MATCH_ID')
	        }

	        yield valueEvent({ from: peer, value: recPeer.pubKey.bytes });
	      }
	    }

	    throw errcode$e(new Error(`Node not responding with its public key: ${peer.toB58String()}`), 'ERR_INVALID_RECORD')
	  }

	  /**
	   * Search for a peer with the given ID.
	   *
	   * @param {PeerId} id
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal]
	   * @param {number} [options.queryFuncTimeout]
	   */
	  async * findPeer (id, options = {}) {
	    this._log('findPeer %p', id);

	    // Try to find locally
	    const pi = await this.findPeerLocal(id);

	    // already got it
	    if (pi != null) {
	      this._log('found local');
	      yield finalPeerEvent({
	        from: this._peerId,
	        peer: pi
	      });
	      return
	    }

	    const key = await utils$i.convertPeerId(id);
	    const peers = this._routingTable.closestPeers(key);

	    // sanity check
	    const match = peers.find((p) => p.equals(id));

	    if (match) {
	      try {
	        const peer = await this._peerStore.get(id);

	        this._log('found in peerStore');
	        yield finalPeerEvent({
	          from: this._peerId,
	          peer: {
	            id: peer.id,
	            multiaddrs: peer.addresses.map((address) => address.multiaddr)
	          }
	        });

	        return
	      } catch (/** @type {any} */ err) {
	        if (err.code !== 'ERR_NOT_FOUND') {
	          throw err
	        }
	      }
	    }

	    const self = this;

	    /**
	     * @type {import('../query/types').QueryFunc}
	     */
	    const findPeerQuery = async function * ({ peer, signal }) {
	      const request = new Message$7(Message$7.TYPES.FIND_NODE, id.toBytes(), 0);

	      for await (const event of self._network.sendRequest(peer, request, { signal })) {
	        yield event;

	        if (event.name === 'PEER_RESPONSE') {
	          const match = event.closer.find((p) => p.id.equals(id));

	          // found the peer
	          if (match) {
	            yield finalPeerEvent({ from: event.from, peer: match });
	          }
	        }
	      }
	    };

	    let foundPeer = false;

	    for await (const event of this._queryManager.run(id.id, peers, findPeerQuery, options)) {
	      if (event.name === 'FINAL_PEER') {
	        foundPeer = true;
	      }

	      yield event;
	    }

	    if (!foundPeer) {
	      yield queryErrorEvent$2({ from: this._peerId, error: errcode$e(new Error('Not found'), 'ERR_NOT_FOUND') });
	    }
	  }

	  /**
	   * Kademlia 'node lookup' operation
	   *
	   * @param {Uint8Array} key - the key to look up, could be a the bytes from a multihash or a peer ID
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal]
	   * @param {number} [options.queryFuncTimeout]
	   */
	  async * getClosestPeers (key, options = {}) {
	    this._log('getClosestPeers to %b', key);
	    const id = await utils$i.convertBuffer(key);
	    const tablePeers = this._routingTable.closestPeers(id);
	    const self = this;

	    const peers = new PeerDistanceList(id, this._routingTable._kBucketSize);
	    tablePeers.forEach(peer => peers.add(peer));

	    /**
	     * @type {import('../query/types').QueryFunc}
	     */
	    const getCloserPeersQuery = async function * ({ peer, signal }) {
	      self._log('closerPeersSingle %s from %p', uint8ArrayToString$5(key, 'base32'), peer);
	      const request = new Message$7(Message$7.TYPES.FIND_NODE, key, 0);

	      yield * self._network.sendRequest(peer, request, { signal });
	    };

	    for await (const event of this._queryManager.run(key, tablePeers, getCloserPeersQuery, options)) {
	      yield event;

	      if (event.name === 'PEER_RESPONSE') {
	        event.closer.forEach(peerData => {
	          peers.add(peerData.id);
	        });
	      }
	    }

	    this._log('found %d peers close to %b', peers.length, key);

	    for (const peer of peers.peers) {
	      yield finalPeerEvent({
	        from: this._peerId,
	        peer: {
	          id: peer,
	          multiaddrs: (await (this._peerStore.addressBook.get(peer)) || []).map(addr => addr.multiaddr)
	        }
	      });
	    }
	  }

	  /**
	   * Query a particular peer for the value for the given key.
	   * It will either return the value or a list of closer peers.
	   *
	   * Note: The peerStore is updated with new addresses found for the given peer.
	   *
	   * @param {PeerId} peer
	   * @param {Uint8Array} key
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal]
	   */
	  async * getValueOrPeers (peer, key, options = {}) {
	    for await (const event of this._getValueSingle(peer, key, options)) {
	      if (event.name === 'PEER_RESPONSE') {
	        if (event.record) {
	          // We have a record
	          try {
	            await this._verifyRecordOnline(event.record);
	          } catch (/** @type {any} */ err) {
	            const errMsg = 'invalid record received, discarded';
	            this._log(errMsg);

	            yield queryErrorEvent$2({ from: event.from, error: errcode$e(new Error(errMsg), 'ERR_INVALID_RECORD') });
	            continue
	          }
	        }
	      }

	      yield event;
	    }
	  }

	  /**
	   * Verify a record, fetching missing public keys from the network.
	   * Calls back with an error if the record is invalid.
	   *
	   * @param {import('../types').DHTRecord} record
	   * @returns {Promise<void>}
	   */
	  async _verifyRecordOnline ({ key, value, timeReceived }) {
	    await validator$1.verifyRecord(this._validators, new Record$1(key, value, timeReceived));
	  }

	  /**
	   * Get the nearest peers to the given query, but if closer
	   * than self
	   *
	   * @param {Uint8Array} key
	   * @param {PeerId} closerThan
	   */
	  async getCloserPeersOffline (key, closerThan) {
	    const id = await utils$i.convertBuffer(key);
	    const ids = this._routingTable.closestPeers(id);
	    const output = [];

	    for (const peerId of ids) {
	      if (peerId.equals(closerThan)) {
	        continue
	      }

	      try {
	        const addresses = await this._peerStore.addressBook.get(peerId);

	        output.push({
	          id: peerId,
	          multiaddrs: addresses.map((address) => address.multiaddr)
	        });
	      } catch (/** @type {any} */ err) {
	        if (err.code !== 'ERR_NOT_FOUND') {
	          throw err
	        }
	      }
	    }

	    if (output.length) {
	      this._log('getCloserPeersOffline found %d peer(s) closer to %b than %p', output.length, key, closerThan);
	    } else {
	      this._log('getCloserPeersOffline could not find peer closer to %b than %p', key, closerThan);
	    }

	    return output
	  }
	}

	peerRouting$1.PeerRouting = PeerRouting$3;

	var providers = {};

	const cache$1 = hashlru;
	// @ts-ignore
	const varint$2 = varint$9;
	const PeerId$h = src$o.exports;
	const { Key: Key$3 } = require$$4;
	const { default: Queue$1 } = dist$1;
	const {
	  PROVIDERS_CLEANUP_INTERVAL,
	  PROVIDERS_VALIDITY,
	  PROVIDERS_LRU_CACHE_SIZE,
	  PROVIDER_KEY_PREFIX
	} = constants$5;
	const utils$h = utils$o;
	const { toString: uint8ArrayToString$4 } = require$$8;

	const log$D = utils$h.logger('libp2p:kad-dht:providers');

	/**
	 * @typedef {import('multiformats/cid').CID} CID
	 * @typedef {import('interface-datastore').Datastore} Datastore
	 */

	/**
	 * This class manages known providers.
	 * A provider is a peer that we know to have the content for a given CID.
	 *
	 * Every `cleanupInterval` providers are checked if they
	 * are still valid, i.e. younger than the `provideValidity`.
	 * If they are not, they are deleted.
	 *
	 * To ensure the list survives restarts of the daemon,
	 * providers are stored in the datastore, but to ensure
	 * access is fast there is an LRU cache in front of that.
	 */
	class Providers$1 {
	  /**
	   * @param {object} options
	   * @param {Datastore} options.providers
	   * @param {number} [options.cacheSize=256]
	   * @param {number} [options.cleanupInterval] - How often invalid records are cleaned. (in seconds)
	   * @param {number} [options.provideValidity] - How long is a provider valid for. (in seconds)
	   */
	  constructor ({ providers, cacheSize, cleanupInterval, provideValidity }) {
	    this.datastore = providers;
	    this.cleanupInterval = cleanupInterval || PROVIDERS_CLEANUP_INTERVAL;
	    this.provideValidity = provideValidity || PROVIDERS_VALIDITY;
	    // @ts-expect-error hashlru types are wrong
	    this.cache = cache$1(cacheSize || PROVIDERS_LRU_CACHE_SIZE);
	    this.syncQueue = new Queue$1({ concurrency: 1 });
	  }

	  /**
	   * Start the provider cleanup service
	   */
	  start () {
	    if (this._started) {
	      return
	    }

	    this._started = true;

	    this._cleaner = setInterval(
	      () => this._cleanup(),
	      this.cleanupInterval
	    );
	  }

	  /**
	   * Release any resources.
	   */
	  stop () {
	    this._started = false;

	    if (this._cleaner) {
	      clearInterval(this._cleaner);
	      this._cleaner = null;
	    }
	  }

	  /**
	   * Check all providers if they are still valid, and if not delete them.
	   *
	   * @returns {Promise<void>}
	   * @private
	   */
	  _cleanup () {
	    return this.syncQueue.add(async () => {
	      const start = Date.now();

	      let count = 0;
	      let deleteCount = 0;
	      const deleted = new Map();
	      const batch = this.datastore.batch();

	      // Get all provider entries from the datastore
	      const query = this.datastore.query({ prefix: PROVIDER_KEY_PREFIX });

	      for await (const entry of query) {
	        try {
	          // Add a delete to the batch for each expired entry
	          const { cid, peerId } = parseProviderKey(entry.key);
	          const time = readTime(entry.value);
	          const now = Date.now();
	          const delta = now - time;
	          const expired = delta > this.provideValidity;

	          log$D('comparing: %d - %d = %d > %d %s', now, time, delta, this.provideValidity, expired ? '(expired)' : '');

	          if (expired) {
	            deleteCount++;
	            batch.delete(entry.key);
	            const peers = deleted.get(cid) || new Set();
	            peers.add(peerId);
	            deleted.set(cid, peers);
	          }
	          count++;
	        } catch (/** @type {any} */ err) {
	          log$D.error(err.message);
	        }
	      }

	      // Commit the deletes to the datastore
	      if (deleted.size) {
	        log$D('deleting %d / %d entries', deleteCount, count);
	        await batch.commit();
	      } else {
	        log$D('nothing to delete');
	      }

	      // Clear expired entries from the cache
	      for (const [cid, peers] of deleted) {
	        const key = makeProviderKey(cid);
	        const provs = this.cache.get(key);

	        if (provs) {
	          for (const peerId of peers) {
	            provs.delete(peerId);
	          }

	          if (provs.size === 0) {
	            this.cache.remove(key);
	          } else {
	            this.cache.set(key, provs);
	          }
	        }
	      }

	      log$D('Cleanup successful (%dms)', Date.now() - start);
	    })
	  }

	  /**
	   * Get the currently known provider peer ids for a given CID.
	   *
	   * @param {CID} cid
	   * @returns {Promise<Map<string, Date>>}
	   *
	   * @private
	   */
	  async _getProvidersMap (cid) {
	    const cacheKey = makeProviderKey(cid);
	    let provs = this.cache.get(cacheKey);

	    if (!provs) {
	      provs = await loadProviders(this.datastore, cid);
	      this.cache.set(cacheKey, provs);
	    }

	    return provs
	  }

	  /**
	   * Add a new provider for the given CID.
	   *
	   * @param {CID} cid
	   * @param {PeerId} provider
	   * @returns {Promise<void>}
	   */
	  async addProvider (cid, provider) { // eslint-disable-line require-await
	    return this.syncQueue.add(async () => {
	      log$D('%p provides %s', provider, cid);
	      const provs = await this._getProvidersMap(cid);

	      log$D('loaded %s provs', provs.size);
	      const now = new Date();
	      provs.set(provider.toString(), now);

	      const dsKey = makeProviderKey(cid);
	      this.cache.set(dsKey, provs);

	      return writeProviderEntry(this.datastore, cid, provider, now)
	    })
	  }

	  /**
	   * Get a list of providers for the given CID.
	   *
	   * @param {CID} cid
	   * @returns {Promise<Array<PeerId>>}
	   */
	  async getProviders (cid) { // eslint-disable-line require-await
	    return this.syncQueue.add(async () => {
	      log$D('get providers for %s', cid);
	      const provs = await this._getProvidersMap(cid);

	      return [...provs.keys()].map(peerIdStr => {
	        return PeerId$h.parse(peerIdStr)
	      })
	    })
	  }
	}

	/**
	 * Encode the given key its matching datastore key.
	 *
	 * @param {CID|string} cid - cid or base32 encoded string
	 * @returns {string}
	 *
	 * @private
	 */
	function makeProviderKey (cid) {
	  cid = typeof cid === 'string' ? cid : uint8ArrayToString$4(cid.multihash.bytes, 'base32');

	  return `${PROVIDER_KEY_PREFIX}/${cid}`
	}

	/**
	 * Write a provider into the given store.
	 *
	 * @param {Datastore} store
	 * @param {CID} cid
	 * @param {PeerId} peer
	 * @param {Date} time
	 */
	async function writeProviderEntry (store, cid, peer, time) { // eslint-disable-line require-await
	  const dsKey = [
	    makeProviderKey(cid),
	    '/',
	    peer.toString()
	  ].join('');

	  const key = new Key$3(dsKey);
	  const buffer = Uint8Array.from(varint$2.encode(time.getTime()));

	  return store.put(key, buffer)
	}

	/**
	 * Parse the CID and provider peer id from the key
	 *
	 * @param {import('interface-datastore/key').Key} key
	 */
	function parseProviderKey (key) {
	  const parts = key.toString().split('/');

	  if (parts.length !== 5) {
	    throw new Error('incorrectly formatted provider entry key in datastore: ' + key)
	  }

	  return {
	    cid: parts[3],
	    peerId: parts[4]
	  }
	}

	/**
	 * Load providers for the given CID from the store.
	 *
	 * @param {Datastore} store
	 * @param {CID} cid
	 * @returns {Promise<Map<PeerId, Date>>}
	 *
	 * @private
	 */
	async function loadProviders (store, cid) {
	  const providers = new Map();
	  const query = store.query({ prefix: makeProviderKey(cid) });

	  for await (const entry of query) {
	    const { peerId } = parseProviderKey(entry.key);
	    providers.set(peerId, readTime(entry.value));
	  }

	  return providers
	}

	/**
	 * @param {Uint8Array} buf
	 */
	function readTime (buf) {
	  return varint$2.decode(buf)
	}

	providers.Providers = Providers$1;

	var manager = {};

	var queryPath$1 = {};

	const { default: Queue } = dist$1;
	const { xor } = require$$1$1;
	const { toString } = require$$8;
	const defer$1 = pDefer_1;
	const errCode$i = errCode$q;
	const { convertPeerId, convertBuffer } = utils$o;
	const { TimeoutController: TimeoutController$4 } = timeoutAbortController;
	const { anySignal: anySignal$4 } = anySignal$7.exports;
	const { queryErrorEvent: queryErrorEvent$1 } = events;

	const MAX_XOR = BigInt('0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF');

	/**
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('../types').QueryEvent} QueryEvent
	 * @typedef {import('./types').QueryFunc} QueryFunc
	 */

	/**
	 * Walks a path through the DHT, calling the passed query function for
	 * every peer encountered that we have not seen before.
	 *
	 * @param {object} context
	 * @param {Uint8Array} context.key - what are we trying to find
	 * @param {PeerId} context.startingPeer - where we start our query
	 * @param {PeerId} context.ourPeerId - who we are
	 * @param {AbortSignal} context.signal - when to stop querying
	 * @param {QueryFunc} context.query - the query function to run with each peer
	 * @param {number} context.alpha - how many concurrent node/value lookups to run
	 * @param {number} context.pathIndex - how many concurrent node/value lookups to run
	 * @param {number} context.numPaths - how many concurrent node/value lookups to run
	 * @param {import('events').EventEmitter} context.cleanUp - will emit a 'cleanup' event if the caller exits the for..await of early
	 * @param {number} [context.queryFuncTimeout] - a timeout for queryFunc in ms
	 * @param {ReturnType<import('../utils').logger>} context.log
	 */
	queryPath$1.queryPath = async function * queryPath ({ key, startingPeer, ourPeerId, signal, query, alpha, pathIndex, numPaths, cleanUp, queryFuncTimeout, log }) {
	  // Only ALPHA node/value lookups are allowed at any given time for each process
	  // https://github.com/libp2p/specs/tree/master/kad-dht#alpha-concurrency-parameter-%CE%B1
	  const queue = new Queue({
	    concurrency: alpha
	  });

	  // perform lookups on kadId, not the actual value
	  const kadId = await convertBuffer(key);

	  // make sure we don't get trapped in a loop
	  const peersSeen = new Set();

	  /**
	   * Adds the passed peer to the query queue if it's not us and no
	   * other path has passed through this peer
	   *
	   * @param {PeerId} peer
	   * @param {Uint8Array} peerKadId
	   */
	  function queryPeer (peer, peerKadId) {
	    if (!peer) {
	      return
	    }

	    peersSeen.add(peer.toB58String());

	    const peerXor = BigInt('0x' + toString(xor(peerKadId, kadId), 'base16'));

	    queue.add(async () => {
	      let timeout;
	      const signals = [signal];

	      if (queryFuncTimeout != null) {
	        timeout = new TimeoutController$4(queryFuncTimeout);
	        signals.push(timeout.signal);
	      }

	      const compoundSignal = anySignal$4(signals);

	      try {
	        for await (const event of query({
	          key,
	          peer,
	          signal: compoundSignal,
	          pathIndex,
	          numPaths
	        })) {
	          if (compoundSignal.aborted) {
	            return
	          }

	          // if there are closer peers and the query has not completed, continue the query
	          if (event.name === 'PEER_RESPONSE') {
	            for (const closerPeer of event.closer) {
	              if (peersSeen.has(closerPeer.id.toB58String())) { // eslint-disable-line max-depth
	                log('already seen %p in query', closerPeer.id);
	                continue
	              }

	              if (ourPeerId.equals(closerPeer.id)) { // eslint-disable-line max-depth
	                log('not querying ourselves');
	                continue
	              }

	              const closerPeerKadId = await convertPeerId(closerPeer.id);
	              const closerPeerXor = BigInt('0x' + toString(xor(closerPeerKadId, kadId), 'base16'));

	              // only continue query if closer peer is actually closer
	              if (closerPeerXor > peerXor) { // eslint-disable-line max-depth
	                log('skipping %p as they are not closer to %b than %p', closerPeer.id, key, peer);
	                continue
	              }

	              log('querying closer peer %p', closerPeer.id);
	              queryPeer(closerPeer.id, closerPeerKadId);
	            }
	          }

	          // @ts-ignore simulate p-queue@7.x.x event
	          queue.emit('completed', event);
	        }

	        timeout && timeout.clear();
	      } catch (/** @type {any} */ err) {
	        if (signal.aborted) {
	          // @ts-ignore simulate p-queue@7.x.x event
	          queue.emit('error', err);
	        } else {
	          // @ts-ignore simulate p-queue@7.x.x event
	          queue.emit('completed', queryErrorEvent$1({
	            from: peer,
	            error: err
	          }));
	        }
	      } finally {
	        timeout && timeout.clear();
	      }
	    }, {
	      // use xor value as the queue priority - closer peers should execute first
	      // subtract it from MAX_XOR because higher priority values execute sooner

	      // @ts-expect-error this is supposed to be a Number but it's ok to use BigInts
	      // as long as all priorities are BigInts since we won't mix BigInts and Number
	      // values in arithmetic operations
	      priority: MAX_XOR - peerXor
	    });
	  }

	  // begin the query with the starting peer
	  queryPeer(startingPeer, await convertPeerId(startingPeer));

	  // yield results as they come in
	  yield * toGenerator(queue, signal, cleanUp, log);
	};

	/**
	 * @param {Queue} queue
	 * @param {AbortSignal} signal
	 * @param {import('events').EventEmitter} cleanUp
	 * @param {ReturnType<import('../utils').logger>} log
	 */
	async function * toGenerator (queue, signal, cleanUp, log) {
	  let deferred = defer$1();
	  let running = true;
	  /** @type {QueryEvent[]} */
	  const results = [];

	  const cleanup = () => {
	    if (!running) {
	      return
	    }

	    log('clean up queue, results %d, queue size %d, pending tasks %d', results.length, queue.size, queue.pending);

	    running = false;
	    queue.clear();
	    results.splice(0, results.length);
	  };

	  // @ts-expect-error 'completed' event is in p-queue@7.x.x
	  queue.on('completed', result => {
	    results.push(result);
	    deferred.resolve();
	  });
	  // @ts-expect-error 'error' event is in p-queue@7.x.x
	  queue.on('error', err => {
	    log('queue error', err);
	    cleanup();
	    deferred.reject(err);
	  });
	  queue.on('idle', () => {
	    log('queue idle');
	    running = false;
	    deferred.resolve();
	  });

	  // clear the queue and throw if the query is aborted
	  signal.addEventListener('abort', () => {
	    log('abort queue');
	    const wasRunning = running;
	    cleanup();

	    if (wasRunning) {
	      deferred.reject(errCode$i(new Error('Query aborted'), 'ERR_QUERY_ABORTED'));
	    }
	  });

	  // the user broke out of the loop early, ensure we resolve the deferred result
	  // promise and clear the queue of any remaining jobs
	  cleanUp.on('cleanup', () => {
	    cleanup();
	    deferred.resolve();
	  });

	  while (running) { // eslint-disable-line no-unmodified-loop-condition
	    await deferred.promise;
	    deferred = defer$1();

	    // yield all available results
	    while (results.length) {
	      const result = results.shift();

	      if (result) {
	        yield result;
	      }
	    }
	  }

	  // yield any remaining results
	  yield * results;
	}

	const { TimeoutController: TimeoutController$3 } = timeoutAbortController;
	const { anySignal: anySignal$3 } = anySignal$7.exports;
	const {
	  ALPHA, K: K$2, DEFAULT_QUERY_TIMEOUT
	} = constants$5;
	const { toString: uint8ArrayToString$3 } = require$$8;
	const { logger: logger$1 } = utils$o;
	const { queryPath } = queryPath$1;
	const merge$3 = itMerge;
	const {
	  EventEmitter: EventEmitter$c,
	  // @ts-expect-error only available in node 15+
	  setMaxListeners: setMaxListeners$4
	} = require$$1$5;

	/**
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('../types').Metrics} Metrics
	 */

	const METRIC_RUNNING_QUERIES = 'running-queries';

	/**
	 * Keeps track of all running queries
	 */
	class QueryManager$1 {
	  /**
	   * Creates a new QueryManager
	   *
	   * @param {object} params
	   * @param {PeerId} params.peerId
	   * @param {boolean} params.lan
	   * @param {Metrics} [params.metrics]
	   * @param {number} [params.disjointPaths]
	   * @param {number} [params.alpha]
	   */
	  constructor ({ peerId, lan, metrics, disjointPaths = K$2, alpha = ALPHA }) {
	    this._peerId = peerId;
	    this._disjointPaths = disjointPaths || K$2;
	    this._controllers = new Set();
	    this._running = false;
	    this._alpha = alpha || ALPHA;
	    this._lan = lan;
	    this._metrics = metrics;
	    this._queries = 0;
	  }

	  /**
	   * Starts the query manager
	   */
	  start () {
	    this._running = true;
	  }

	  /**
	   * Stops all queries
	   */
	  stop () {
	    this._running = false;

	    for (const controller of this._controllers) {
	      controller.abort();
	    }

	    this._controllers.clear();
	  }

	  /**
	   * @template T
	   *
	   * @param {Uint8Array} key
	   * @param {PeerId[]} peers
	   * @param {import('./types').QueryFunc} queryFunc
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal]
	   * @param {number} [options.queryFuncTimeout]
	   *
	   * @returns {AsyncIterable<import('../types').QueryEvent>}
	   */
	  async * run (key, peers, queryFunc, options = {}) {
	    if (!this._running) {
	      throw new Error('QueryManager not started')
	    }

	    let timeoutController;

	    if (!options.signal) {
	      // don't let queries run forever
	      timeoutController = new TimeoutController$3(DEFAULT_QUERY_TIMEOUT);
	      options.signal = timeoutController.signal;
	    }

	    // allow us to stop queries on shut down
	    const abortController = new AbortController();
	    this._controllers.add(abortController);
	    const signals = [abortController.signal];
	    options.signal && signals.push(options.signal);
	    const signal = anySignal$3(signals);

	    // this signal will get listened to for every invocation of queryFunc
	    // so make sure we don't make a lot of noise in the logs
	    try {
	      setMaxListeners$4 && setMaxListeners$4(0, signal);
	    } catch {} // fails on node < 15.4

	    const log = logger$1(`libp2p:kad-dht:${this._lan ? 'lan' : 'wan'}:query:` + uint8ArrayToString$3(key, 'base58btc'));

	    // query a subset of peers up to `kBucketSize / 2` in length
	    const peersToQuery = peers.slice(0, Math.min(this._disjointPaths, peers.length));
	    const startTime = Date.now();
	    const cleanUp = new EventEmitter$c();

	    try {
	      log('query:start');
	      this._queries++;
	      this._metrics && this._metrics.updateComponentMetric({ component: `kad-dht-${this._lan ? 'lan' : 'wan'}`, metric: METRIC_RUNNING_QUERIES, value: this._queries });

	      if (peers.length === 0) {
	        log.error('Running query with no peers');
	        return
	      }

	      // Create query paths from the starting peers
	      const paths = peersToQuery.map((peer, index) => {
	        return queryPath({
	          key,
	          startingPeer: peer,
	          ourPeerId: this._peerId,
	          signal,
	          query: queryFunc,
	          pathIndex: index,
	          numPaths: peersToQuery.length,
	          alpha: this._alpha,
	          cleanUp,
	          queryFuncTimeout: options.queryFuncTimeout,
	          log
	        })
	      });

	      // Execute the query along each disjoint path and yield their results as they become available
	      for await (const event of merge$3(...paths)) {
	        yield event;

	        if (event.name === 'QUERY_ERROR' && event.error) {
	          log('error', event.error);
	        }
	      }
	    } catch (/** @type {any} */ err) {
	      if (!this._running && err.code === 'ERR_QUERY_ABORTED') ; else {
	        throw err
	      }
	    } finally {
	      this._controllers.delete(abortController);

	      if (timeoutController) {
	        timeoutController.clear();
	      }

	      this._queries--;
	      this._metrics && this._metrics.updateComponentMetric({ component: `kad-dht-${this._lan ? 'lan' : 'wan'}`, metric: METRIC_RUNNING_QUERIES, value: this._queries });

	      cleanUp.emit('cleanup');
	      log(`query:done in ${Date.now() - (startTime || 0)}ms`);
	    }
	  }
	}

	manager.QueryManager = QueryManager$1;

	var rpc = {};

	var addProvider = {};

	const { CID: CID$2 } = require$$0$3;
	const errcode$d = errCode$q;
	const utils$g = utils$o;
	const log$C = utils$g.logger('libp2p:kad-dht:rpc:handlers:add-provider');

	/**
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('../../message').Message} Message
	 * @typedef {import('../types').DHTMessageHandler} DHTMessageHandler
	 */

	/**
	 * @implements {DHTMessageHandler}
	 */
	class AddProviderHandler$1 {
	  /**
	   * @param {object} params
	   * @param {PeerId} params.peerId
	   * @param {import('../../providers').Providers} params.providers
	   * @param {import('libp2p/src/peer-store/types').PeerStore} params.peerStore
	   */
	  constructor ({ peerId, providers, peerStore }) {
	    this._peerId = peerId;
	    this._providers = providers;
	    this._peerStore = peerStore;
	  }

	  /**
	   * @param {PeerId} peerId
	   * @param {Message} msg
	   */
	  async handle (peerId, msg) {
	    log$C('start');

	    if (!msg.key || msg.key.length === 0) {
	      throw errcode$d(new Error('Missing key'), 'ERR_MISSING_KEY')
	    }

	    /** @type {CID} */
	    let cid;
	    try {
	      // this is actually just the multihash, not the whole CID
	      cid = CID$2.decode(msg.key);
	    } catch (/** @type {any} */ err) {
	      const errMsg = `Invalid CID: ${err.message}`;
	      throw errcode$d(new Error(errMsg), 'ERR_INVALID_CID')
	    }

	    if (!msg.providerPeers || !msg.providerPeers.length) {
	      log$C.error('no providers found in message');
	    }

	    await Promise.all(
	      msg.providerPeers.map(async (pi) => {
	        // Ignore providers not from the originator
	        if (!pi.id.equals(peerId)) {
	          log$C('invalid provider peer %p from %p', pi.id, peerId);
	          return
	        }

	        if (pi.multiaddrs.length < 1) {
	          log$C('no valid addresses for provider %p. Ignore', peerId);
	          return
	        }

	        log$C('received provider %p for %s (addrs %s)', peerId, cid, pi.multiaddrs.map((m) => m.toString()));

	        if (!this._peerId.equals(pi.id)) {
	          // Add known address to peer store
	          await this._peerStore.addressBook.add(pi.id, pi.multiaddrs);
	          await this._providers.addProvider(cid, pi.id);
	        }
	      })
	    );

	    // typescript requires a return value
	    return undefined
	  }
	}

	addProvider.AddProviderHandler = AddProviderHandler$1;

	var findNode = {};

	const { Message: Message$6 } = message$1;
	const utils$f = utils$o;
	const log$B = utils$f.logger('libp2p:kad-dht:rpc:handlers:find-node');
	const {
	  removePrivateAddresses: removePrivateAddresses$2,
	  removePublicAddresses: removePublicAddresses$2
	} = utils$o;

	/**
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('../types').DHTMessageHandler} DHTMessageHandler
	 */

	/**
	 * @implements {DHTMessageHandler}
	 */
	class FindNodeHandler$1 {
	  /**
	   * @param {object} params
	   * @param {PeerId} params.peerId
	   * @param {import('../../types').Addressable} params.addressable
	   * @param {import('../../peer-routing').PeerRouting} params.peerRouting
	   * @param {boolean} [params.lan]
	   */
	  constructor ({ peerId, addressable, peerRouting, lan }) {
	    this._peerId = peerId;
	    this._addressable = addressable;
	    this._peerRouting = peerRouting;
	    this._lan = Boolean(lan);
	  }

	  /**
	   * Process `FindNode` DHT messages
	   *
	   * @param {PeerId} peerId
	   * @param {Message} msg
	   */
	  async handle (peerId, msg) {
	    log$B('incoming request from %p for peers closer to %b', peerId, msg.key);

	    let closer;
	    if (this._peerId.equals(msg.key)) {
	      closer = [{
	        id: this._peerId,
	        multiaddrs: this._addressable.multiaddrs
	      }];
	    } else {
	      closer = await this._peerRouting.getCloserPeersOffline(msg.key, peerId);
	    }

	    closer = closer
	      .map(this._lan ? removePublicAddresses$2 : removePrivateAddresses$2)
	      .filter(({ multiaddrs }) => multiaddrs.length);

	    const response = new Message$6(msg.type, new Uint8Array(0), msg.clusterLevel);

	    if (closer.length > 0) {
	      response.closerPeers = closer;
	    } else {
	      log$B('could not find any peers closer to %p', peerId);
	    }

	    return response
	  }
	}

	findNode.FindNodeHandler = FindNodeHandler$1;

	var getProviders = {};

	const { CID: CID$1 } = require$$0$3;
	const errcode$c = errCode$q;
	const { Message: Message$5 } = message$1;
	const utils$e = utils$o;
	const log$A = utils$e.logger('libp2p:kad-dht:rpc:handlers:get-providers');
	const {
	  removePrivateAddresses: removePrivateAddresses$1,
	  removePublicAddresses: removePublicAddresses$1
	} = utils$o;

	/**
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('../types').DHTMessageHandler} DHTMessageHandler
	 * @typedef {import('../../types').PeerData} PeerData
	 */

	/**
	 * @implements {DHTMessageHandler}
	 */
	class GetProvidersHandler$1 {
	  /**
	   * @param {object} params
	   * @param {PeerId} params.peerId
	   * @param {import('../../peer-routing').PeerRouting} params.peerRouting
	   * @param {import('../../providers').Providers} params.providers
	   * @param {import('libp2p/src/peer-store/types').PeerStore} params.peerStore
	   * @param {import('../../types').Addressable} params.addressable
	   * @param {boolean} [params.lan]
	   */
	  constructor ({ peerId, peerRouting, providers, peerStore, addressable, lan }) {
	    this._peerId = peerId;
	    this._peerRouting = peerRouting;
	    this._providers = providers;
	    this._peerStore = peerStore;
	    this._addressable = addressable;
	    this._lan = Boolean(lan);
	  }

	  /**
	   * Process `GetProviders` DHT messages.
	   *
	   * @param {PeerId} peerId
	   * @param {Message} msg
	   */
	  async handle (peerId, msg) {
	    let cid;
	    try {
	      cid = CID$1.decode(msg.key);
	    } catch (/** @type {any} */ err) {
	      throw errcode$c(new Error(`Invalid CID: ${err.message}`), 'ERR_INVALID_CID')
	    }

	    log$A('%p asking for providers for %s', peerId, cid);

	    const [peers, closer] = await Promise.all([
	      this._providers.getProviders(cid),
	      this._peerRouting.getCloserPeersOffline(msg.key, peerId)
	    ]);

	    const providerPeers = await this._getPeers(peers);
	    const closerPeers = await this._getPeers(closer.map(({ id }) => id));
	    const response = new Message$5(msg.type, msg.key, msg.clusterLevel);

	    if (providerPeers.length > 0) {
	      response.providerPeers = providerPeers;
	    }

	    if (closerPeers.length > 0) {
	      response.closerPeers = closerPeers;
	    }

	    log$A('got %s providers %s closerPeers', providerPeers.length, closerPeers.length);
	    return response
	  }

	  /**
	   * @param {PeerId} peerId
	   */
	  async _getAddresses (peerId) {
	    return this._peerId.equals(peerId) ? this._addressable.multiaddrs : (await (this._peerStore.addressBook.get(peerId)) || []).map(address => address.multiaddr)
	  }

	  /**
	   * @param {PeerId[]} peerIds
	   */
	  async _getPeers (peerIds) {
	    /** @type {PeerData[]} */
	    const output = [];
	    const addrFilter = this._lan ? removePublicAddresses$1 : removePrivateAddresses$1;

	    for (const peerId of peerIds) {
	      const peer = addrFilter({
	        id: peerId,
	        multiaddrs: await this._getAddresses(peerId)
	      });

	      if (peer.multiaddrs.length) {
	        output.push(peer);
	      }
	    }

	    return output
	  }
	}

	getProviders.GetProvidersHandler = GetProvidersHandler$1;

	var getValue = {};

	const { Record } = src$l;
	const errcode$b = errCode$q;
	const { Message: Message$4 } = message$1;
	const {
	  MAX_RECORD_AGE
	} = constants$5;
	const utils$d = utils$o;

	const log$z = utils$d.logger('libp2p:kad-dht:rpc:handlers:get-value');

	/**
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('../types').DHTMessageHandler} DHTMessageHandler
	 * @typedef {import('libp2p-interfaces/src/keys/types').PublicKey} PublicKey
	 */

	/**
	 * @implements {DHTMessageHandler}
	 */
	class GetValueHandler$1 {
	  /**
	   * @param {object} params
	   * @param {PeerId} params.peerId
	   * @param {import('libp2p/src/peer-store/types').PeerStore} params.peerStore
	   * @param {import('../../peer-routing').PeerRouting} params.peerRouting
	   * @param {import('interface-datastore').Datastore} params.records
	   */
	  constructor ({ peerId, peerStore, peerRouting, records }) {
	    this._peerId = peerId;
	    this._peerStore = peerStore;
	    this._peerRouting = peerRouting;
	    this._records = records;
	  }

	  /**
	   * Process `GetValue` DHT messages.
	   *
	   * @param {PeerId} peerId
	   * @param {Message} msg
	   */
	  async handle (peerId, msg) {
	    const key = msg.key;

	    log$z('%p asked for key %b', peerId, key);

	    if (!key || key.length === 0) {
	      throw errcode$b(new Error('Invalid key'), 'ERR_INVALID_KEY')
	    }

	    const response = new Message$4(Message$4.TYPES.GET_VALUE, key, msg.clusterLevel);

	    if (utils$d.isPublicKeyKey(key)) {
	      log$z('is public key');
	      const idFromKey = utils$d.fromPublicKeyKey(key);
	      /** @type {PublicKey | undefined} */
	      let pubKey;

	      if (this._peerId.equals(idFromKey)) {
	        pubKey = this._peerId.pubKey;
	      } else {
	        try {
	          pubKey = await this._peerStore.keyBook.get(idFromKey);
	        } catch (/** @type {any} */ err) {
	          if (err.code !== 'ERR_NOT_FOUND') {
	            throw err
	          }
	        }
	      }

	      if (pubKey != null) {
	        log$z('returning found public key');
	        response.record = new Record(key, pubKey.bytes);
	        return response
	      }
	    }

	    const [record, closer] = await Promise.all([
	      this._checkLocalDatastore(key),
	      this._peerRouting.getCloserPeersOffline(msg.key, peerId)
	    ]);

	    if (record) {
	      log$z('had record for %b in local datastore', key);
	      response.record = record;
	    }

	    if (closer.length > 0) {
	      log$z('had %s closer peers in routing table', closer.length);
	      response.closerPeers = closer;
	    }

	    return response
	  }

	  /**
	   * Try to fetch a given record by from the local datastore.
	   * Returns the record iff it is still valid, meaning
	   * - it was either authored by this node, or
	   * - it was received less than `MAX_RECORD_AGE` ago.
	   *
	   * @param {Uint8Array} key
	   */
	  async _checkLocalDatastore (key) {
	    log$z('checkLocalDatastore looking for %b', key);
	    const dsKey = utils$d.bufferToKey(key);

	    // Fetch value from ds
	    let rawRecord;
	    try {
	      rawRecord = await this._records.get(dsKey);
	    } catch (/** @type {any} */ err) {
	      if (err.code === 'ERR_NOT_FOUND') {
	        return undefined
	      }
	      throw err
	    }

	    // Create record from the returned bytes
	    const record = Record.deserialize(rawRecord);

	    if (!record) {
	      throw errcode$b(new Error('Invalid record'), 'ERR_INVALID_RECORD')
	    }

	    // Check validity: compare time received with max record age
	    if (record.timeReceived == null ||
	      Date.now() - record.timeReceived.getTime() > MAX_RECORD_AGE) {
	      // If record is bad delete it and return
	      await this._records.delete(dsKey);
	      return undefined
	    }

	    // Record is valid
	    return record
	  }
	}

	getValue.GetValueHandler = GetValueHandler$1;

	var ping$1 = {};

	const utils$c = utils$o;
	const log$y = utils$c.logger('libp2p:kad-dht:rpc:handlers:ping');

	/**
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('../../message').Message} Message
	 * @typedef {import('../types').DHTMessageHandler} DHTMessageHandler
	 */

	/**
	 * @implements {DHTMessageHandler}
	 */
	class PingHandler$1 {
	  /**
	   * Process `Ping` DHT messages.
	   *
	   * @param {PeerId} peerId
	   * @param {Message} msg
	   */
	  async handle (peerId, msg) {
	    log$y(`ping from ${peerId}`);
	    return msg
	  }
	}

	ping$1.PingHandler = PingHandler$1;

	var putValue = {};

	const utils$b = utils$o;
	const errcode$a = errCode$q;
	const Libp2pRecord = src$l;
	const log$x = utils$b.logger('libp2p:kad-dht:rpc:handlers:put-value');

	/**
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('../../message').Message} Message
	 * @typedef {import('../types').DHTMessageHandler} DHTMessageHandler
	 */

	/**
	 * @implements {DHTMessageHandler}
	 */
	class PutValueHandler$1 {
	  /**
	   * @param {object} params
	   * @param {import('libp2p-interfaces/src/types').DhtValidators} params.validators
	   * @param {import('interface-datastore').Datastore} params.records
	   */
	  constructor ({ validators, records }) {
	    this._validators = validators;
	    this._records = records;
	  }

	  /**
	   * Process `PutValue` DHT messages.
	   *
	   * @param {PeerId} peerId
	   * @param {Message} msg
	   */
	  async handle (peerId, msg) {
	    const key = msg.key;
	    log$x('%p asked to store value for key %b', peerId, key);

	    const record = msg.record;

	    if (!record) {
	      const errMsg = `Empty record from: ${peerId.toB58String()}`;

	      log$x.error(errMsg);
	      throw errcode$a(new Error(errMsg), 'ERR_EMPTY_RECORD')
	    }

	    await Libp2pRecord.validator.verifyRecord(this._validators, record);

	    record.timeReceived = new Date();
	    const recordKey = utils$b.bufferToKey(record.key);
	    await this._records.put(recordKey, record.serialize());

	    return msg
	  }
	}

	putValue.PutValueHandler = PutValueHandler$1;

	const { Message: Message$3 } = message$1;
	const { AddProviderHandler } = addProvider;
	const { FindNodeHandler } = findNode;
	const { GetProvidersHandler } = getProviders;
	const { GetValueHandler } = getValue;
	const { PingHandler } = ping$1;
	const { PutValueHandler } = putValue;

	/**
	 * @typedef {import('../types').DHTMessageHandler} DHTMessageHandler
	 */

	/**
	 * @param {object} params
	 * @param {import('peer-id')} params.peerId
	 * @param {import('../../providers').Providers} params.providers
	 * @param {import('libp2p/src/peer-store/types').PeerStore} params.peerStore
	 * @param {import('../../types').Addressable} params.addressable
	 * @param {import('../../peer-routing').PeerRouting} params.peerRouting
	 * @param {import('interface-datastore').Datastore} params.records
	 * @param {import('libp2p-interfaces/src/types').DhtValidators} params.validators
	 * @param {boolean} [params.lan]
	 */
	var handlers$1 = ({ peerId, providers, peerStore, addressable, peerRouting, records, validators, lan }) => {
	  /** @type {Record<number, DHTMessageHandler>} */
	  const handlers = {
	    [Message$3.TYPES.GET_VALUE]: new GetValueHandler({ peerId, peerStore, peerRouting, records }),
	    [Message$3.TYPES.PUT_VALUE]: new PutValueHandler({ validators, records }),
	    [Message$3.TYPES.FIND_NODE]: new FindNodeHandler({ peerId, addressable, peerRouting, lan }),
	    [Message$3.TYPES.ADD_PROVIDER]: new AddProviderHandler({ peerId, providers, peerStore }),
	    [Message$3.TYPES.GET_PROVIDERS]: new GetProvidersHandler({ peerId, peerRouting, providers, peerStore, addressable, lan }),
	    [Message$3.TYPES.PING]: new PingHandler()
	  };

	  /**
	   * Get the message handler matching the passed in type.
	   *
	   * @param {number} type
	   */
	  function getMessageHandler (type) {
	    return handlers[type]
	  }

	  return getMessageHandler
	};

	const { pipe: pipe$c } = itPipe.exports;
	const lp$4 = src$i;

	const { Message: Message$2, MESSAGE_TYPE_LOOKUP } = message$1;
	const handlers = handlers$1;
	const utils$a = utils$o;

	const log$w = utils$a.logger('libp2p:kad-dht:rpc');

	/**
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream
	 */

	/**
	 * @param {import('../types').DHT} dht
	 */
	class RPC$1 {
	  /**
	   * @param {object} params
	   * @param {import('../routing-table').RoutingTable} params.routingTable
	   * @param {import('peer-id')} params.peerId
	   * @param {import('../providers').Providers} params.providers
	   * @param {import('libp2p/src/peer-store/types').PeerStore} params.peerStore
	   * @param {import('../types').Addressable} params.addressable
	   * @param {import('../peer-routing').PeerRouting} params.peerRouting
	   * @param {import('interface-datastore').Datastore} params.records
	   * @param {import('libp2p-interfaces/src/types').DhtValidators} params.validators
	   * @param {boolean} [params.lan]
	   */
	  constructor (params) {
	    this._messageHandler = handlers(params);
	    this._routingTable = params.routingTable;
	  }

	  /**
	   * Process incoming DHT messages.
	   *
	   * @param {PeerId} peerId
	   * @param {Message} msg
	   */
	  async handleMessage (peerId, msg) {
	    // get handler & execute it
	    const handler = this._messageHandler(msg.type);

	    try {
	      await this._routingTable.add(peerId);
	    } catch (/** @type {any} */ err) {
	      log$w.error('Failed to update the kbucket store', err);
	    }

	    if (!handler) {
	      log$w.error(`no handler found for message type: ${msg.type}`);
	      return
	    }

	    return handler.handle(peerId, msg)
	  }

	  /**
	   * Handle incoming streams on the dht protocol
	   *
	   * @param {object} props
	   * @param {MuxedStream} props.stream
	   * @param {import('libp2p-interfaces/src/connection').Connection} props.connection
	   */
	  async onIncomingStream ({ stream, connection }) {
	    const peerId = connection.remotePeer;

	    try {
	      await this._routingTable.add(peerId);
	    } catch (/** @type {any} */ err) {
	      log$w.error(err);
	    }

	    const self = this;

	    await pipe$c(
	      stream.source,
	      lp$4.decode(),
	      /**
	       * @param {AsyncIterable<Uint8Array>} source
	       */
	      source => (async function * () {
	        for await (const msg of source) {
	          // handle the message
	          const desMessage = Message$2.deserialize(msg.slice());
	          log$w('incoming %s from %p', MESSAGE_TYPE_LOOKUP[desMessage.type], peerId);
	          const res = await self.handleMessage(peerId, desMessage);

	          // Not all handlers will return a response
	          if (res) {
	            yield res.serialize();
	          }
	        }
	      })(),
	      lp$4.encode(),
	      stream.sink
	    );
	  }
	}

	rpc.RPC = RPC$1;

	var topologyListener = {};

	const MulticodecTopology = multicodecTopology;
	const { EventEmitter: EventEmitter$b } = require$$1$5;
	const utils$9 = utils$o;

	/**
	 * Receives notifications of new peers joining the network that support the DHT protocol
	 */
	class TopologyListener$1 extends EventEmitter$b {
	  /**
	   * Create a new network
	   *
	   * @param {object} params
	   * @param {import('libp2p/src/registrar')} params.registrar
	   * @param {string} params.protocol
	   * @param {boolean} params.lan
	   */
	  constructor ({ registrar, protocol, lan }) {
	    super();

	    this._log = utils$9.logger(`libp2p:kad-dht:topology-listener:${lan ? 'lan' : 'wan'}:network`);
	    this._running = false;
	    this._registrar = registrar;
	    this._protocol = protocol;
	  }

	  /**
	   * Start the network
	   */
	  async start () {
	    if (this._running) {
	      return
	    }

	    this._running = true;

	    // register protocol with topology
	    const topology = new MulticodecTopology({
	      multicodecs: [this._protocol],
	      handlers: {
	        onConnect: (peerId) => {
	          this._log('observed peer that with protocol %s %p', this._protocol, peerId);
	          this.emit('peer', peerId);
	        },
	        onDisconnect: () => {}
	      }
	    });
	    this._registrarId = await this._registrar.register(topology);
	  }

	  /**
	   * Stop all network activity
	   */
	  stop () {
	    this._running = false;

	    // unregister protocol and handlers
	    if (this._registrarId) {
	      this._registrar.unregister(this._registrarId);
	    }
	  }
	}

	topologyListener.TopologyListener = TopologyListener$1;

	var querySelf = {};

	const { EventEmitter: EventEmitter$a } = require$$1$5;
	const take$3 = itTake;
	const length$1 = itLength;
	const { QUERY_SELF_INTERVAL: QUERY_SELF_INTERVAL$1, QUERY_SELF_TIMEOUT, K: K$1 } = constants$5;
	const utils$8 = utils$o;
	const { TimeoutController: TimeoutController$2 } = timeoutAbortController;
	const { anySignal: anySignal$2 } = anySignal$7.exports;
	// @ts-expect-error setMaxListeners is missing from the types
	const { setMaxListeners: setMaxListeners$3 } = require$$1$5;

	/**
	 * Receives notifications of new peers joining the network that support the DHT protocol
	 */
	class QuerySelf$1 extends EventEmitter$a {
	  /**
	   * Create a new network
	   *
	   * @param {object} params
	   * @param {import('peer-id')} params.peerId
	   * @param {import('./peer-routing').PeerRouting} params.peerRouting
	   * @param {number} [params.count] - how many peers to find
	   * @param {number} [params.interval] - how often to find them
	   * @param {number} [params.queryTimeout] - how long to let queries run
	   * @param {boolean} params.lan
	   */
	  constructor ({ peerId, peerRouting, lan, count = K$1, interval = QUERY_SELF_INTERVAL$1, queryTimeout = QUERY_SELF_TIMEOUT }) {
	    super();

	    this._log = utils$8.logger(`libp2p:kad-dht:${lan ? 'lan' : 'wan'}:query-self`);
	    this._running = false;
	    this._peerId = peerId;
	    this._peerRouting = peerRouting;
	    this._count = count || K$1;
	    this._interval = interval || QUERY_SELF_INTERVAL$1;
	    this._queryTimeout = queryTimeout || QUERY_SELF_TIMEOUT;
	  }

	  /**
	   * Start the network
	   */
	  start () {
	    if (this._running) {
	      return
	    }

	    this._running = true;
	    this._querySelf();
	  }

	  /**
	   * Stop all network activity
	   */
	  stop () {
	    this._running = false;

	    if (this._timeoutId) {
	      clearTimeout(this._timeoutId);
	    }

	    if (this._controller) {
	      this._controller.abort();
	    }
	  }

	  async _querySelf () {
	    const timeoutController = new TimeoutController$2(this._queryTimeout);

	    try {
	      this._controller = new AbortController();
	      const signal = anySignal$2([this._controller.signal, timeoutController.signal]);
	      // this controller will get used for lots of dial attempts so make sure we don't cause warnings to be logged
	      try {
	        setMaxListeners$3 && setMaxListeners$3(Infinity, signal);
	      } catch {} // fails on node < 15.4
	      const found = await length$1(await take$3(this._peerRouting.getClosestPeers(this._peerId.toBytes(), {
	        signal
	      }), this._count));

	      this._log('query ran successfully - found %d peers', found);
	    } catch (/** @type {any} */ err) {
	      this._log('query error', err);
	    } finally {
	      this._timeoutId = setTimeout(this._querySelf.bind(this), this._interval);
	      timeoutController.clear();
	    }
	  }
	}

	querySelf.QuerySelf = QuerySelf$1;

	var require$$17 = /*@__PURE__*/getAugmentedNamespace(src$m);

	const { EventEmitter: EventEmitter$9 } = require$$1$5;
	const crypto$4 = src$n;
	const libp2pRecord = src$l;
	const { MemoryDatastore: MemoryDatastore$1 } = require$$5;
	const { RoutingTable } = routingTable;
	const { RoutingTableRefresh } = refresh;
	const utils$7 = utils$o;
	const {
	  K,
	  QUERY_SELF_INTERVAL,
	  RECORD_KEY_PREFIX
	} = constants$5;
	const { Network: Network$2 } = network;
	const { ContentFetching } = contentFetching;
	const { ContentRouting: ContentRouting$2 } = contentRouting$1;
	const { PeerRouting: PeerRouting$2 } = peerRouting$1;
	const { Providers } = providers;
	const { QueryManager } = manager;
	const { RPC } = rpc;
	const { TopologyListener } = topologyListener;
	const { QuerySelf } = querySelf;
	const {
	  removePrivateAddresses,
	  removePublicAddresses
	} = utils$o;
	const { KeyTransformDatastore } = require$$17;
	const { Key: Key$2 } = require$$4;

	/**
	 * @typedef {import('libp2p')} Libp2p
	 * @typedef {import('libp2p/src/peer-store')} PeerStore
	 * @typedef {import('interface-datastore').Datastore} Datastore
	 * @typedef {import('libp2p/src/dialer')} Dialer
	 * @typedef {import('libp2p/src/registrar')} Registrar
	 * @typedef {import('multiformats/cid').CID} CID
	 * @typedef {import('multiaddr').Multiaddr} Multiaddr
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('./types').DHT} DHT
	 * @typedef {import('./types').PeerData} PeerData
	 * @typedef {import('./types').QueryEvent} QueryEvent
	 * @typedef {import('./types').SendingQueryEvent} SendingQueryEvent
	 * @typedef {import('./types').PeerResponseEvent} PeerResponseEvent
	 * @typedef {import('./types').FinalPeerEvent} FinalPeerEvent
	 * @typedef {import('./types').QueryErrorEvent} QueryErrorEvent
	 * @typedef {import('./types').ProviderEvent} ProviderEvent
	 * @typedef {import('./types').ValueEvent} ValueEvent
	 * @typedef {import('./types').AddingPeerEvent} AddingPeerEvent
	 * @typedef {import('./types').DialingPeerEvent} DialingPeerEvent
	 *
	 * @typedef {object} KadDHTOps
	 * @property {Libp2p} libp2p - the libp2p instance
	 * @property {string} [protocol = '/ipfs/kad/1.0.0'] - libp2p registrar handle protocol
	 * @property {number} kBucketSize - k-bucket size (default 20)
	 * @property {boolean} clientMode - If true, the DHT will not respond to queries. This should be true if your node will not be dialable. (default: false)
	 * @property {import('libp2p-interfaces/src/types').DhtValidators} validators - validators object with namespace as keys and function(key, record, callback)
	 * @property {object} selectors - selectors object with namespace as keys and function(key, records)
	 * @property {number} querySelfInterval - how often to search the network for peers close to ourselves
	 * @property {boolean} lan
	 * @property {PeerData[]} bootstrapPeers
	 */

	class PrefixTransform {
	  /**
	   *
	   * @param {string} prefix - : ;
	   */
	  constructor (prefix) {
	    this._prefix = prefix;

	    if (this._prefix.startsWith('/')) {
	      this._prefix = this._prefix.substring(1);
	    }
	  }

	  /**
	   * @param {Key} key
	   */
	  convert (key) {
	    return new Key$2(`/${this._prefix}${key}`)
	  }

	  /**
	   * @param {Key} key
	   */
	  invert (key) {
	    const namespaces = key.namespaces();

	    if (namespaces[0] === this._prefix) {
	      namespaces.shift();
	    }

	    return Key$2.withNamespaces(namespaces)
	  }
	}

	/**
	 * A DHT implementation modelled after Kademlia with S/Kademlia modifications.
	 * Original implementation in go: https://github.com/libp2p/go-libp2p-kad-dht.
	 */
	class KadDHT$1 extends EventEmitter$9 {
	  /**
	   * Create a new KadDHT.
	   *
	   * @param {KadDHTOps} opts
	   */
	  constructor ({
	    libp2p,
	    kBucketSize = K,
	    clientMode = true,
	    validators = {},
	    selectors = {},
	    querySelfInterval = QUERY_SELF_INTERVAL,
	    lan = true,
	    protocol = '/ipfs/lan/kad/1.0.0',
	    bootstrapPeers = []
	  }) {
	    super();

	    this._running = false;
	    this._log = utils$7.logger(`libp2p:kad-dht:${lan ? 'lan' : 'wan'}`);

	    /**
	     * Local reference to the libp2p instance
	     *
	     * @type {Libp2p}
	     */
	    this._libp2p = libp2p;

	    /**
	     * Registrar protocol
	     *
	     * @type {string}
	     */
	    this._protocol = protocol;

	    /**
	     * k-bucket size
	     *
	     * @type {number}
	     */
	    this._kBucketSize = kBucketSize;

	    /**
	     * Whether we are in client or server mode
	     */
	    this._clientMode = clientMode;

	    /**
	     * Will be added to the routing table on startup
	     */
	    this._bootstrapPeers = bootstrapPeers;

	    /**
	     * The routing table.
	     *
	     * @type {RoutingTable}
	     */
	    this._routingTable = new RoutingTable({
	      peerId: libp2p.peerId,
	      dialer: libp2p,
	      kBucketSize,
	      metrics: libp2p.metrics,
	      lan
	    });

	    const datastore = libp2p.datastore || new MemoryDatastore$1();
	    const records = new KeyTransformDatastore(datastore, new PrefixTransform(RECORD_KEY_PREFIX));

	    /**
	     * Provider management
	     *
	     * @type {Providers}
	     */
	    this._providers = new Providers({
	      providers: datastore
	    });

	    /**
	     * @type {boolean}
	     */
	    this._lan = lan;

	    this._validators = {
	      pk: libp2pRecord.validator.validators.pk,
	      ...validators
	    };

	    this._selectors = {
	      pk: libp2pRecord.selection.selectors.pk,
	      ...selectors
	    };

	    this._network = new Network$2({
	      dialer: libp2p,
	      protocol: this._protocol,
	      lan
	    });
	    /**
	     * Keeps track of running queries
	     *
	     * @type {QueryManager}
	     */
	    this._queryManager = new QueryManager({
	      peerId: libp2p.peerId,
	      // Number of disjoint query paths to use - This is set to `kBucketSize/2` per the S/Kademlia paper
	      disjointPaths: Math.ceil(kBucketSize / 2),
	      metrics: libp2p.metrics,
	      lan
	    });

	    // DHT components
	    this._peerRouting = new PeerRouting$2({
	      peerId: libp2p.peerId,
	      routingTable: this._routingTable,
	      peerStore: libp2p.peerStore,
	      network: this._network,
	      validators: this._validators,
	      queryManager: this._queryManager,
	      lan
	    });
	    this._contentFetching = new ContentFetching({
	      peerId: libp2p.peerId,
	      records,
	      validators: this._validators,
	      selectors: this._selectors,
	      peerRouting: this._peerRouting,
	      queryManager: this._queryManager,
	      routingTable: this._routingTable,
	      network: this._network,
	      lan
	    });
	    this._contentRouting = new ContentRouting$2({
	      peerId: libp2p.peerId,
	      network: this._network,
	      peerRouting: this._peerRouting,
	      queryManager: this._queryManager,
	      routingTable: this._routingTable,
	      providers: this._providers,
	      peerStore: libp2p.peerStore,
	      lan
	    });
	    this._routingTableRefresh = new RoutingTableRefresh({
	      peerRouting: this._peerRouting,
	      routingTable: this._routingTable,
	      lan
	    });
	    this._rpc = new RPC({
	      routingTable: this._routingTable,
	      peerId: libp2p.peerId,
	      providers: this._providers,
	      peerStore: libp2p.peerStore,
	      addressable: libp2p,
	      peerRouting: this._peerRouting,
	      records,
	      validators: this._validators,
	      lan
	    });
	    this._topologyListener = new TopologyListener({
	      registrar: libp2p.registrar,
	      protocol: this._protocol,
	      lan
	    });
	    this._querySelf = new QuerySelf({
	      peerId: libp2p.peerId,
	      peerRouting: this._peerRouting,
	      interval: querySelfInterval,
	      lan
	    });

	    // handle peers being discovered during processing of DHT messages
	    this._network.on('peer', (peerData) => {
	      this.onPeerConnect(peerData).catch(err => {
	        this._log.error(`could not add ${peerData.id} to routing table`, err);
	      });

	      this.emit('peer', peerData);
	    });

	    // handle peers being discovered via other peer discovery mechanisms
	    this._topologyListener.on('peer', async (peerId) => {
	      const multiaddrs = await this._libp2p.peerStore.addressBook.get(peerId);

	      const peerData = {
	        id: peerId,
	        multiaddrs: multiaddrs.map(addr => addr.multiaddr)
	      };

	      this.onPeerConnect(peerData).catch(err => {
	        this._log.error(`could not add ${peerData.id} to routing table`, err);
	      });
	    });
	  }

	  /**
	   * @param {PeerData} peerData
	   */
	  async onPeerConnect (peerData) {
	    this._log('peer %p connected', peerData.id);

	    if (this._lan) {
	      peerData = removePublicAddresses(peerData);
	    } else {
	      peerData = removePrivateAddresses(peerData);
	    }

	    if (!peerData.multiaddrs.length) {
	      this._log('ignoring %p as they do not have any %s addresses in %s', peerData.id, this._lan ? 'private' : 'public', peerData.multiaddrs.map(addr => addr.toString()));
	      return
	    }

	    try {
	      await this._routingTable.add(peerData.id);
	    } catch (/** @type {any} */ err) {
	      this._log.error('could not add %p to routing table', peerData.id, err);
	    }
	  }

	  /**
	   * Is this DHT running.
	   */
	  isStarted () {
	    return this._running
	  }

	  /**
	   * Is this DHT in server mode
	   */
	  isServer () {
	    return !this._clientMode
	  }

	  /**
	   * Whether we are in client or server mode
	   */
	  async enableServerMode () {
	    this._log('enabling server mode');
	    this._clientMode = false;
	    await this._libp2p.handle(this._protocol, this._rpc.onIncomingStream.bind(this._rpc));
	  }

	  /**
	   * Whether we are in client or server mode
	   */
	  async enableClientMode () {
	    this._log('enabling client mode');
	    this._clientMode = true;
	    await this._libp2p.unhandle(this._protocol);
	  }

	  /**
	   * Start listening to incoming connections.
	   */
	  async start () {
	    this._running = true;

	    // Only respond to queries when not in client mode
	    if (this._clientMode) {
	      await this.enableClientMode();
	    } else {
	      await this.enableServerMode();
	    }

	    await Promise.all([
	      this._providers.start(),
	      this._queryManager.start(),
	      this._network.start(),
	      this._routingTable.start(),
	      this._topologyListener.start(),
	      this._querySelf.start()
	    ]);

	    await Promise.all(
	      this._bootstrapPeers.map(peerData => this._routingTable.add(peerData.id))
	    );

	    await this._routingTableRefresh.start();
	    await this.refreshRoutingTable();
	  }

	  /**
	   * Stop accepting incoming connections and sending outgoing
	   * messages.
	   */
	  async stop () {
	    this._running = false;

	    await Promise.all([
	      this._providers.stop(),
	      this._queryManager.stop(),
	      this._network.stop(),
	      this._routingTable.stop(),
	      this._routingTableRefresh.stop(),
	      this._topologyListener.stop(),
	      this._querySelf.stop()
	    ]);
	  }

	  /**
	   * Store the given key/value pair in the DHT
	   *
	   * @param {Uint8Array} key
	   * @param {Uint8Array} value
	   * @param {object} [options] - put options
	   * @param {AbortSignal} [options.signal]
	   * @param {number} [options.minPeers] - minimum number of peers required to successfully put (default: closestPeers.length)
	   */
	  async * put (key, value, options = {}) { // eslint-disable-line require-await
	    yield * this._contentFetching.put(key, value, options);
	  }

	  /**
	   * Get the value that corresponds to the passed key
	   *
	   * @param {Uint8Array} key
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal]
	   * @param {number} [options.queryFuncTimeout]
	   */
	  async * get (key, options = {}) { // eslint-disable-line require-await
	    yield * this._contentFetching.get(key, options);
	  }

	  // ----------- Content Routing

	  /**
	   * Announce to the network that we can provide given key's value
	   *
	   * @param {CID} key
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal]
	   */
	  async * provide (key, options = {}) { // eslint-disable-line require-await
	    yield * this._contentRouting.provide(key, this._libp2p.multiaddrs, options);
	  }

	  /**
	   * Search the dht for up to `K` providers of the given CID.
	   *
	   * @param {CID} key
	   * @param {object} [options] - findProviders options
	   * @param {number} [options.maxNumProviders=5] - maximum number of providers to find
	   * @param {AbortSignal} [options.signal]
	   * @param {number} [options.queryFuncTimeout]
	   */
	  async * findProviders (key, options = { maxNumProviders: 5 }) {
	    yield * this._contentRouting.findProviders(key, options);
	  }

	  // ----------- Peer Routing -----------

	  /**
	   * Search for a peer with the given ID
	   *
	   * @param {PeerId} id
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal]
	   * @param {number} [options.queryFuncTimeout]
	   */
	  async * findPeer (id, options = {}) { // eslint-disable-line require-await
	    yield * this._peerRouting.findPeer(id, options);
	  }

	  /**
	   * Kademlia 'node lookup' operation.
	   *
	   * @param {Uint8Array} key
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal]
	   * @param {number} [options.queryFuncTimeout]
	   */
	  async * getClosestPeers (key, options = {}) {
	    yield * this._peerRouting.getClosestPeers(key, options);
	  }

	  /**
	   * Get the public key for the given peer id
	   *
	   * @param {PeerId} peer
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal]
	   */
	  async getPublicKey (peer, options = {}) {
	    this._log('getPublicKey %p', peer);

	    // try the node directly
	    for await (const event of this._peerRouting.getPublicKeyFromNode(peer, options)) {
	      if (event.name === 'VALUE') {
	        return crypto$4.keys.unmarshalPublicKey(event.value)
	      }
	    }

	    // search the dht
	    const pkKey = utils$7.keyForPublicKey(peer);

	    for await (const event of this.get(pkKey, options)) {
	      if (event.name === 'VALUE') {
	        return crypto$4.keys.unmarshalPublicKey(event.value)
	      }
	    }
	  }

	  async refreshRoutingTable () {
	    await this._routingTableRefresh.refreshTable(true);
	  }
	}

	var kadDht = {
	  KadDHT: KadDHT$1
	};

	const { EventEmitter: EventEmitter$8 } = require$$1$5;
	const PeerId$g = src$o.exports;
	const utils$6 = utils$o;
	const errCode$h = errCode$q;
	const merge$2 = itMerge;
	const { queryErrorEvent } = events;

	const log$v = utils$6.logger('libp2p:kad-dht');

	/**
	 * @typedef {import('libp2p')} Libp2p
	 * @typedef {import('libp2p/src/peer-store')} PeerStore
	 * @typedef {import('interface-datastore').Datastore} Datastore
	 * @typedef {import('libp2p/src/dialer')} Dialer
	 * @typedef {import('libp2p/src/registrar')} Registrar
	 * @typedef {import('multiformats/cid').CID} CID
	 * @typedef {import('multiaddr').Multiaddr} Multiaddr
	 * @typedef {import('./kad-dht').KadDHT} KadDHT
	 * @typedef {import('./types').DHT} DHT
	 * @typedef {import('./types').QueryEvent} QueryEvent
	 * @typedef {import('./types').SendingQueryEvent} SendingQueryEvent
	 * @typedef {import('./types').PeerResponseEvent} PeerResponseEvent
	 * @typedef {import('./types').FinalPeerEvent} FinalPeerEvent
	 * @typedef {import('./types').QueryErrorEvent} QueryErrorEvent
	 * @typedef {import('./types').ProviderEvent} ProviderEvent
	 * @typedef {import('./types').ValueEvent} ValueEvent
	 * @typedef {import('./types').AddingPeerEvent} AddingPeerEvent
	 * @typedef {import('./types').DialingPeerEvent} DialingPeerEvent
	 *
	 * @typedef {object} KadDHTOps
	 * @property {Libp2p} libp2p - the libp2p instance
	 * @property {string} [protocol = '/ipfs/kad/1.0.0'] - libp2p registrar handle protocol
	 * @property {number} kBucketSize - k-bucket size (default 20)
	 * @property {boolean} clientMode - If true, the DHT will not respond to queries. This should be true if your node will not be dialable. (default: false)
	 * @property {import('libp2p-interfaces/src/types').DhtValidators} validators - validators object with namespace as keys and function(key, record, callback)
	 * @property {object} selectors - selectors object with namespace as keys and function(key, records)
	 * @property {number} querySelfInterval - how often to search the network for peers close to ourselves
	 */

	/**
	 * A DHT implementation modelled after Kademlia with S/Kademlia modifications.
	 * Original implementation in go: https://github.com/libp2p/go-libp2p-kad-dht.
	 */
	class DualKadDHT$1 extends EventEmitter$8 {
	  /**
	   * Create a new KadDHT.
	   *
	   * @param {KadDHT} wan
	   * @param {KadDHT} lan
	   * @param {Libp2p} libp2p
	   */
	  constructor (wan, lan, libp2p) {
	    super();

	    this._wan = wan;
	    this._lan = lan;
	    this._libp2p = libp2p;

	    // handle peers being discovered during processing of DHT messages
	    this._wan.on('peer', (peerData) => {
	      this.emit('peer', peerData);
	    });
	    this._lan.on('peer', (peerData) => {
	      this.emit('peer', peerData);
	    });
	  }

	  /**
	   * Is this DHT running.
	   */
	  isStarted () {
	    return this._wan.isStarted() && this._lan.isStarted()
	  }

	  /**
	   * Whether we are in client or server mode
	   */
	  async enableServerMode () {
	    await this._wan.enableServerMode();
	  }

	  /**
	   * Whether we are in client or server mode
	   */
	  async enableClientMode () {
	    await this._wan.enableClientMode();
	  }

	  /**
	   * Start listening to incoming connections.
	   */
	  async start () {
	    await Promise.all([
	      this._lan.start(),
	      this._wan.start()
	    ]);
	  }

	  /**
	   * Stop accepting incoming connections and sending outgoing
	   * messages.
	   */
	  async stop () {
	    await Promise.all([
	      this._lan.stop(),
	      this._wan.stop()
	    ]);
	  }

	  /**
	   * Store the given key/value pair in the DHT
	   *
	   * @param {Uint8Array} key
	   * @param {Uint8Array} value
	   * @param {object} [options] - put options
	   * @param {AbortSignal} [options.signal]
	   * @param {number} [options.minPeers] - minimum number of peers required to successfully put (default: closestPeers.length)
	   */
	  async * put (key, value, options = {}) { // eslint-disable-line require-await
	    let counterAll = 0;
	    let counterSuccess = 0;

	    for await (const event of merge$2(
	      this._lan.put(key, value, options),
	      this._wan.put(key, value, options)
	    )) {
	      yield event;

	      if (event.name === 'SENDING_QUERY' && event.messageName === 'PUT_VALUE') {
	        counterAll++;
	      }

	      if (event.name === 'PEER_RESPONSE' && event.messageName === 'PUT_VALUE') {
	        counterSuccess++;
	      }
	    }

	    // Ensure we have a default `minPeers`
	    const minPeers = options.minPeers == null ? counterAll || 1 : options.minPeers;

	    // verify if we were able to put to enough peers
	    if (counterSuccess < minPeers) {
	      const error = errCode$h(new Error(`Failed to put value to enough peers: ${counterSuccess}/${minPeers}`), 'ERR_NOT_ENOUGH_PUT_PEERS');
	      log$v.error(error);
	      throw error
	    }
	  }

	  /**
	   * Get the value that corresponds to the passed key
	   *
	   * @param {Uint8Array} key
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal]
	   * @param {number} [options.queryFuncTimeout]
	   */
	  async * get (key, options = {}) { // eslint-disable-line require-await
	    let queriedPeers = false;
	    let foundValue = false;

	    for await (const event of merge$2(
	      this._lan.get(key, options),
	      this._wan.get(key, options)
	    )) {
	      yield event;

	      if (event.name === 'DIALING_PEER') {
	        queriedPeers = true;
	      }

	      if (event.name === 'VALUE') {
	        queriedPeers = true;

	        if (event.value != null) {
	          foundValue = true;
	        }
	      }

	      if (event.name === 'SENDING_QUERY') {
	        queriedPeers = true;
	      }
	    }

	    if (!queriedPeers) {
	      throw errCode$h(new Error('No peers found in routing table!'), 'ERR_NO_PEERS_IN_ROUTING_TABLE')
	    }

	    if (!foundValue) {
	      yield queryErrorEvent({
	        from: this._libp2p.peerId,
	        error: errCode$h(new Error('Not found'), 'ERR_NOT_FOUND')
	      });
	    }
	  }

	  // ----------- Content Routing

	  /**
	   * Announce to the network that we can provide given key's value
	   *
	   * @param {CID} key
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal]
	   */
	  async * provide (key, options = {}) { // eslint-disable-line require-await
	    let sent = 0;
	    let success = 0;
	    const errors = [];

	    const dhts = [this._lan];

	    // only run provide on the wan if we are in server mode
	    if (this._wan.isServer()) {
	      dhts.push(this._wan);
	    }

	    for await (const event of merge$2(...dhts.map(dht => dht.provide(key, options)))) {
	      yield event;

	      if (event.name === 'SENDING_QUERY') {
	        sent++;
	      }

	      if (event.name === 'QUERY_ERROR') {
	        errors.push(event.error);
	      }

	      if (event.name === 'PEER_RESPONSE' && event.messageName === 'ADD_PROVIDER') {
	        log$v('sent provider record for %s to %p', key, event.from.id);
	        success++;
	      }
	    }

	    if (success === 0) {
	      if (errors.length) {
	        // if all sends failed, throw an error to inform the caller
	        throw errCode$h(new Error(`Failed to provide to ${errors.length} of ${sent} peers`), 'ERR_PROVIDES_FAILED', { errors })
	      }

	      throw errCode$h(new Error('Failed to provide - no peers found'), 'ERR_PROVIDES_FAILED')
	    }
	  }

	  /**
	   * Search the dht for up to `K` providers of the given CID.
	   *
	   * @param {CID} key
	   * @param {object} [options] - findProviders options
	   * @param {number} [options.maxNumProviders=5] - maximum number of providers to find
	   * @param {AbortSignal} [options.signal]
	   * @param {number} [options.queryFuncTimeout]
	   */
	  async * findProviders (key, options = { maxNumProviders: 5 }) {
	    yield * merge$2(
	      this._lan.findProviders(key, options),
	      this._wan.findProviders(key, options)
	    );
	  }

	  // ----------- Peer Routing -----------

	  /**
	   * Search for a peer with the given ID
	   *
	   * @param {PeerId} id
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal]
	   * @param {number} [options.queryFuncTimeout]
	   */
	  async * findPeer (id, options = {}) { // eslint-disable-line require-await
	    let queriedPeers = false;

	    for await (const event of merge$2(
	      this._lan.findPeer(id, options),
	      this._wan.findPeer(id, options)
	    )) {
	      yield event;

	      if (event.name === 'SENDING_QUERY' || event.name === 'FINAL_PEER') {
	        queriedPeers = true;
	      }
	    }

	    if (!queriedPeers) {
	      throw errCode$h(new Error('Peer lookup failed'), 'ERR_LOOKUP_FAILED')
	    }
	  }

	  /**
	   * Kademlia 'node lookup' operation.
	   *
	   * @param {Uint8Array} key
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal]
	   * @param {number} [options.queryFuncTimeout]
	   */
	  async * getClosestPeers (key, options = {}) {
	    yield * merge$2(
	      this._lan.getClosestPeers(key, options),
	      this._wan.getClosestPeers(key, options)
	    );
	  }

	  /**
	   * Get the public key for the given peer id
	   *
	   * @param {PeerId} peer
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal]
	   */
	  async getPublicKey (peer, options = {}) {
	    log$v('getPublicKey %p', peer);

	    let peerData;

	    // local check
	    try {
	      peerData = await this._libp2p.peerStore.get(peer);

	      if (peerData.pubKey) {
	        log$v('getPublicKey: found local copy');
	        return peerData.pubKey
	      }

	      if (peerData.id.pubKey) {
	        log$v('getPublicKey: found local copy');
	        return peerData.id.pubKey
	      }
	    } catch (/** @type {any} */ err) {
	      if (err.code !== 'ERR_NOT_FOUND') {
	        throw err
	      }
	    }

	    // try the node directly
	    const pks = await Promise.all([
	      this._lan.getPublicKey(peer, options),
	      this._wan.getPublicKey(peer, options)
	    ]);

	    if (pks[0] && pks[1] && !pks[0].equals(pks[1])) {
	      throw errCode$h(new Error('Inconsistent public key loaded from wan and lan DHTs'), 'ERR_FAILED_TO_LOAD_KEY')
	    }

	    const pk = pks[0] || pks[1];

	    if (!pk) {
	      throw errCode$h(new Error('Failed to load public key'), 'ERR_FAILED_TO_LOAD_KEY')
	    }

	    const peerId = new PeerId$g(peer.id, undefined, pk);
	    const addrs = ((peerData && peerData.addresses) || []).map((address) => address.multiaddr);
	    await this._libp2p.peerStore.addressBook.add(peerId, addrs);
	    await this._libp2p.peerStore.keyBook.set(peerId, pk);

	    return pk
	  }

	  async refreshRoutingTable () {
	    await Promise.all([
	      this._lan.refreshRoutingTable(),
	      this._wan.refreshRoutingTable()
	    ]);
	  }
	}

	var dualKadDht = {
	  DualKadDHT: DualKadDHT$1
	};

	const { KadDHT } = kadDht;
	const { DualKadDHT } = dualKadDht;

	/**
	 * @typedef {import('./types').DHT} DHT
	 * @typedef {import('./kad-dht').KadDHTOps} KadDHTOps
	 * @typedef {import('./types').QueryEvent} QueryEvent
	 * @typedef {import('./types').SendingQueryEvent} SendingQueryEvent
	 * @typedef {import('./types').PeerResponseEvent} PeerResponseEvent
	 * @typedef {import('./types').FinalPeerEvent} FinalPeerEvent
	 * @typedef {import('./types').QueryErrorEvent} QueryErrorEvent
	 * @typedef {import('./types').ProviderEvent} ProviderEvent
	 * @typedef {import('./types').ValueEvent} ValueEvent
	 * @typedef {import('./types').AddingPeerEvent} AddingPeerEvent
	 * @typedef {import('./types').DialingPeerEvent} DialingPeerEvent
	 */

	var src$7 = {
	  /**
	   * @param {KadDHTOps} opts
	   * @returns {DHT}
	   */
	  create: (opts) => {
	    return new DualKadDHT(
	      new KadDHT({
	        ...opts,
	        protocol: '/ipfs/kad/1.0.0',
	        lan: false
	      }),
	      new KadDHT({
	        ...opts,
	        protocol: '/ipfs/lan/kad/1.0.0',
	        clientMode: false,
	        lan: true
	      }),
	      opts.libp2p
	    )
	  }
	};

	const validator = { func: (key, record) => validator$3.validate(record, key) };
	function selector(_k, records) {
	  return validator$3.select(records[0], records[1]);
	}

	function libp2pConfig() {
	  const options = {
	    dialer: {
	      maxParallelDials: 150,
	      maxDialsPerPeer: 4,
	      dialTimeout: 10000
	    },
	    modules: {
	      transport: [
	        src$e,
	        src$d
	      ],
	      streamMuxer: [src$c],
	      connEncryption: [src$b.NOISE],
	      peerDiscovery: [],
	      dht: src$7,
	      pubsub: src$h
	    },
	    config: {
	      peerDiscovery: {
	        autoDial: true,
	        bootstrap: { enabled: true },
	        webRTCStar: { enabled: true }
	      },
	      dht: {
	        kBucketSize: 20,
	        enabled: true,
	        clientMode: true,
	        validators: { ipns: validator },
	        selectors: { ipns: selector }
	      },
	      pubsub: {
	        enabled: true,
	        emitSelf: true
	      },
	      nat: { enabled: false }
	    },
	    metrics: { enabled: true },
	    peerStore: { persistence: true }
	  };
	  return options;
	}

	var src$6 = {exports: {}};

	(function (module, exports) {

	const PeerId = src$o.exports;
	const { Multiaddr } = src$s;
	const mafmt = src$r;
	const { EventEmitter } = require$$1$5;
	const debug = browser$a.exports;

	const log = Object.assign(debug('libp2p:bootstrap'), {
	  error: debug('libp2p:bootstrap:error')
	});

	/**
	 * Emits 'peer' events on a regular interval for each peer in the provided list.
	 */
	class Bootstrap extends EventEmitter {
	  /**
	   * Constructs a new Bootstrap.
	   *
	   * @param {Object} options
	   * @param {Array<string>} options.list - the list of peer addresses in multi-address format
	   * @param {number} [options.interval = 10000] - the interval between emitting addresses in milliseconds
	   *
	   */
	  constructor (options = { list: [] }) {
	    if (!options.list || !options.list.length) {
	      throw new Error('Bootstrap requires a list of peer addresses')
	    }
	    super();

	    this._list = options.list;
	    this._interval = options.interval || 10000;
	    this._timer = null;
	  }

	  /**
	   * Start emitting events.
	   */
	  start () {
	    if (this._timer) {
	      return
	    }

	    this._timer = setInterval(() => this._discoverBootstrapPeers(), this._interval);
	    log('Starting bootstrap node discovery');
	    this._discoverBootstrapPeers();
	  }

	  /**
	   * Emit each address in the list as a PeerInfo.
	   */
	  _discoverBootstrapPeers () {
	    if (!this._timer) {
	      return
	    }

	    this._list.forEach((candidate) => {
	      if (!mafmt.P2P.matches(candidate)) {
	        return log.error('Invalid multiaddr')
	      }

	      const ma = new Multiaddr(candidate);
	      const peerIdStr = ma.getPeerId();

	      if (!peerIdStr) {
	        log.error('Invalid bootstrap multiaddr without peer id');
	        return
	      }

	      const peerId = PeerId.createFromB58String(peerIdStr);

	      try {
	        this.emit('peer', {
	          id: peerId,
	          multiaddrs: [ma]
	        });
	      } catch (err) {
	        log.error('Invalid bootstrap peer id', err);
	      }
	    });
	  }

	  /**
	   * Stop emitting events.
	   */
	  stop () {
	    if (this._timer) clearInterval(this._timer);
	    this._timer = null;
	  }
	}

	exports = module.exports = Bootstrap;
	exports.tag = 'bootstrap';
	}(src$6, src$6.exports));

	var bootstrap = src$6.exports;

	const errCode$g = errCode$q;
	const filter$4 = itFilter;
	const map$1 = itMap;
	const take$2 = itTake;

	/**
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('multiaddr').Multiaddr} Multiaddr
	 */

	/**
	 * Store the multiaddrs from every peer in the passed peer store
	 *
	 * @param {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>} source
	 * @param {import('../peer-store/types').PeerStore} peerStore
	 */
	async function * storeAddresses$2 (source, peerStore) {
	  yield * map$1(source, async (peer) => {
	    // ensure we have the addresses for a given peer
	    await peerStore.addressBook.add(peer.id, peer.multiaddrs);

	    return peer
	  });
	}

	/**
	 * Filter peers by unique peer id
	 *
	 * @param {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>} source
	 */
	function uniquePeers$2 (source) {
	  /** @type Set<string> */
	  const seen = new Set();

	  return filter$4(source, (peer) => {
	    // dedupe by peer id
	    if (seen.has(peer.id.toString())) {
	      return false
	    }

	    seen.add(peer.id.toString());

	    return true
	  })
	}

	/**
	 * Require at least `min` peers to be yielded from `source`
	 *
	 * @param {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>} source
	 * @param {number} min
	 */
	async function * requirePeers$2 (source, min = 1) {
	  let seen = 0;

	  for await (const peer of source) {
	    seen++;

	    yield peer;
	  }

	  if (seen < min) {
	    throw errCode$g(new Error('not found'), 'NOT_FOUND')
	  }
	}

	/**
	 * If `max` is passed, only take that number of peers from the source
	 * otherwise take all the peers
	 *
	 * @param {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>} source
	 * @param {number} [max]
	 */
	function maybeLimitSource$1 (source, max) {
	  if (max) {
	    return take$2(source, max)
	  }

	  return source
	}

	var utils$5 = {
	  storeAddresses: storeAddresses$2,
	  uniquePeers: uniquePeers$2,
	  requirePeers: requirePeers$2,
	  maybeLimitSource: maybeLimitSource$1
	};

	const intervals = new Map();

	const _generateId = () => `${Date.now()}:${Math.floor(Math.random() * 1000000)}`;

	/**
	 * Run a given task each {interval} ms
	 *
	 * @param {() => Promise} task
	 * @param {number} interval
	 * @param {string} id
	 */
	async function _runPeriodically (task, interval, id) {
	  while (intervals.get(id)) {
	    try {
	      await task();
	    } catch (err) {
	      // Throw global context error if handler throws
	      setTimeout(() => { throw err }, 1);
	      break
	    }

	    if (!intervals.get(id)) {
	      break
	    }

	    await new Promise(resolve => {
	      const _timeout = setTimeout(resolve, interval);

	      intervals.set(id, _timeout);
	    });
	  }
	}

	/**
	 * Asynchronous setInterval that is properly delayed using promises and can be delayed on boot.
	 *
	 * @param {() => Promise} task
	 * @param {number} interval
	 * @param {number} [delay = interval]
	 * @returns {string}
	 */
	function setDelayedInterval$2 (task, interval, delay) {
	  delay = delay || interval;

	  const id = _generateId();
	  const _timeout = setTimeout(() => {
	    _runPeriodically(task, interval, id);
	  }, delay);

	  intervals.set(id, _timeout);

	  return id
	}

	/**
	 * Clear delayed interval.
	 *
	 * @param {string} id
	 */
	function clearDelayedInterval$2 (id) {
	  const _timeout = intervals.get(id);

	  if (_timeout) {
	    clearTimeout(_timeout);
	    intervals.delete(id);
	  }
	}

	var src$5 = {
	  setDelayedInterval: setDelayedInterval$2,
	  clearDelayedInterval: clearDelayedInterval$2
	};

	const errCode$f = errCode$q;
	const { messages: messages$2, codes: codes$i } = errors$3;

	/**
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('libp2p-interfaces/src/peer-routing/types').PeerRouting} PeerRoutingModule
	 */

	/**
	 * Wrapper class to convert events into returned values
	 *
	 * @implements {PeerRoutingModule}
	 */
	class DHTPeerRouting$1 {
	  /**
	   * @param {import('libp2p-kad-dht').DHT} dht
	   */
	  constructor (dht) {
	    this._dht = dht;
	  }

	  /**
	   * @param {PeerId} peerId
	   * @param {any} options
	   */
	  async findPeer (peerId, options = {}) {
	    for await (const event of this._dht.findPeer(peerId, options)) {
	      if (event.name === 'FINAL_PEER') {
	        return event.peer
	      }
	    }

	    throw errCode$f(new Error(messages$2.NOT_FOUND), codes$i.ERR_NOT_FOUND)
	  }

	  /**
	   * @param {Uint8Array} key
	   * @param {any} options
	   */
	  async * getClosestPeers (key, options = {}) {
	    for await (const event of this._dht.getClosestPeers(key, options)) {
	      if (event.name === 'PEER_RESPONSE') {
	        yield * event.closer;
	      }
	    }
	  }
	}

	var dhtPeerRouting = { DHTPeerRouting: DHTPeerRouting$1 };

	const debug$u = browser$a.exports;
	const log$u = Object.assign(debug$u('libp2p:peer-routing'), {
	  error: debug$u('libp2p:peer-routing:err')
	});
	const errCode$e = errCode$q;
	const errors = errors$3;
	const {
	  storeAddresses: storeAddresses$1,
	  uniquePeers: uniquePeers$1,
	  requirePeers: requirePeers$1
	} = utils$5;
	const { TimeoutController: TimeoutController$1 } = timeoutAbortController;

	const merge$1 = itMerge;
	const { pipe: pipe$b } = itPipe.exports;
	const first$1 = itFirst;
	const drain$2 = itDrain;
	const filter$3 = itFilter;
	const {
	  setDelayedInterval: setDelayedInterval$1,
	  clearDelayedInterval: clearDelayedInterval$1
	// @ts-ignore module with no types
	} = src$5;
	const { DHTPeerRouting } = dhtPeerRouting;
	// @ts-expect-error setMaxListeners is missing from the types
	const { setMaxListeners: setMaxListeners$2 } = require$$1$5;

	/**
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('multiaddr').Multiaddr} Multiaddr
	 * @typedef {import('libp2p-interfaces/src/peer-routing/types').PeerRouting} PeerRoutingModule
	 */

	/**
	 * @typedef {Object} RefreshManagerOptions
	 * @property {boolean} [enabled = true] - Whether to enable the Refresh manager
	 * @property {number} [bootDelay = 6e5] - Boot delay to start the Refresh Manager (in ms)
	 * @property {number} [interval = 10e3] - Interval between each Refresh Manager run (in ms)
	 * @property {number} [timeout = 10e3] - How long to let each refresh run (in ms)
	 *
	 * @typedef {Object} PeerRoutingOptions
	 * @property {RefreshManagerOptions} [refreshManager]
	 */

	class PeerRouting$1 {
	  /**
	   * @class
	   * @param {import('./')} libp2p
	   */
	  constructor (libp2p) {
	    this._peerId = libp2p.peerId;
	    this._peerStore = libp2p.peerStore;
	    /** @type {PeerRoutingModule[]} */
	    this._routers = libp2p._modules.peerRouting || [];

	    // If we have the dht, add it to the available peer routers
	    if (libp2p._dht && libp2p._config.dht.enabled) {
	      this._routers.push(new DHTPeerRouting(libp2p._dht));
	    }

	    this._refreshManagerOptions = libp2p._options.peerRouting.refreshManager;

	    this._findClosestPeersTask = this._findClosestPeersTask.bind(this);
	  }

	  /**
	   * Start peer routing service.
	   */
	  start () {
	    if (!this._routers.length || this._timeoutId || !this._refreshManagerOptions.enabled) {
	      return
	    }

	    this._timeoutId = setDelayedInterval$1(
	      this._findClosestPeersTask, this._refreshManagerOptions.interval, this._refreshManagerOptions.bootDelay
	    );
	  }

	  /**
	   * Recurrent task to find closest peers and add their addresses to the Address Book.
	   */
	  async _findClosestPeersTask () {
	    try {
	      // nb getClosestPeers adds the addresses to the address book
	      await drain$2(this.getClosestPeers(this._peerId.id, { timeout: this._refreshManagerOptions.timeout || 10e3 }));
	    } catch (/** @type {any} */ err) {
	      log$u.error(err);
	    }
	  }

	  /**
	   * Stop peer routing service.
	   */
	  stop () {
	    clearDelayedInterval$1(this._timeoutId);
	  }

	  /**
	   * Iterates over all peer routers in parallel to find the given peer.
	   *
	   * @param {PeerId} id - The id of the peer to find
	   * @param {object} [options]
	   * @param {number} [options.timeout] - How long the query should run
	   * @returns {Promise<{ id: PeerId, multiaddrs: Multiaddr[] }>}
	   */
	  async findPeer (id, options) { // eslint-disable-line require-await
	    if (!this._routers.length) {
	      throw errCode$e(new Error('No peer routers available'), errors.codes.ERR_NO_ROUTERS_AVAILABLE)
	    }

	    if (id.toB58String() === this._peerId.toB58String()) {
	      throw errCode$e(new Error('Should not try to find self'), errors.codes.ERR_FIND_SELF)
	    }

	    const output = await pipe$b(
	      merge$1(
	        ...this._routers.map(router => (async function * () {
	          try {
	            yield await router.findPeer(id, options);
	          } catch (err) {
	            log$u.error(err);
	          }
	        })())
	      ),
	      (source) => filter$3(source, Boolean),
	      (source) => storeAddresses$1(source, this._peerStore),
	      (source) => first$1(source)
	    );

	    if (output) {
	      return output
	    }

	    throw errCode$e(new Error(errors.messages.NOT_FOUND), errors.codes.ERR_NOT_FOUND)
	  }

	  /**
	   * Attempt to find the closest peers on the network to the given key.
	   *
	   * @param {Uint8Array} key - A CID like key
	   * @param {Object} [options]
	   * @param {number} [options.timeout=30e3] - How long the query can take
	   * @param {AbortSignal} [options.signal] - An AbortSignal to abort the request
	   * @returns {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>}
	   */
	  async * getClosestPeers (key, options = { timeout: 30e3 }) {
	    if (!this._routers.length) {
	      throw errCode$e(new Error('No peer routers available'), errors.codes.ERR_NO_ROUTERS_AVAILABLE)
	    }

	    if (options.timeout) {
	      const controller = new TimeoutController$1(options.timeout);
	      // this controller will potentially be used while dialing lots of
	      // peers so prevent MaxListenersExceededWarning appearing in the console
	      try {
	        // fails on node < 15.4
	        setMaxListeners$2 && setMaxListeners$2(Infinity, controller.signal);
	      } catch {}

	      options.signal = controller.signal;
	    }

	    yield * pipe$b(
	      merge$1(
	        ...this._routers.map(router => router.getClosestPeers(key, options))
	      ),
	      (source) => storeAddresses$1(source, this._peerStore),
	      (source) => uniquePeers$1(source),
	      (source) => requirePeers$1(source)
	    );
	  }
	}

	var peerRouting = PeerRouting$1;

	const drain$1 = itDrain;

	/**
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('libp2p-interfaces/src/content-routing/types').ContentRouting} ContentRoutingModule
	 * @typedef {import('multiformats/cid').CID} CID
	 */

	/**
	 * Wrapper class to convert events into returned values
	 *
	 * @implements {ContentRoutingModule}
	 */
	class DHTContentRouting$1 {
	  /**
	   * @param {import('libp2p-kad-dht').DHT} dht
	   */
	  constructor (dht) {
	    this._dht = dht;
	  }

	  /**
	   * @param {CID} cid
	   */
	  async provide (cid) {
	    await drain$1(this._dht.provide(cid));
	  }

	  /**
	   * @param {CID} cid
	   * @param {*} options
	   */
	  async * findProviders (cid, options) {
	    for await (const event of this._dht.findProviders(cid, options)) {
	      if (event.name === 'PROVIDER') {
	        yield * event.providers;
	      }
	    }
	  }
	}

	var dhtContentRouting = { DHTContentRouting: DHTContentRouting$1 };

	const errCode$d = errCode$q;
	const { messages: messages$1, codes: codes$h } = errors$3;
	const {
	  storeAddresses,
	  uniquePeers,
	  requirePeers,
	  maybeLimitSource
	} = utils$5;
	const drain = itDrain;
	const merge = itMerge;
	const { pipe: pipe$a } = itPipe.exports;
	const { DHTContentRouting } = dhtContentRouting;

	/**
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('multiaddr').Multiaddr} Multiaddr
	 * @typedef {import('multiformats/cid').CID} CID
	 * @typedef {import('libp2p-interfaces/src/content-routing/types').ContentRouting} ContentRoutingModule
	 */

	/**
	 * @typedef {Object} GetData
	 * @property {PeerId} from
	 * @property {Uint8Array} val
	 */

	class ContentRouting$1 {
	  /**
	   * @class
	   * @param {import('..')} libp2p
	   */
	  constructor (libp2p) {
	    this.libp2p = libp2p;
	    /** @type {ContentRoutingModule[]} */
	    this.routers = libp2p._modules.contentRouting || [];
	    this.dht = libp2p._dht;

	    // If we have the dht, add it to the available content routers
	    if (this.dht && libp2p._config.dht.enabled) {
	      this.routers.push(new DHTContentRouting(this.dht));
	    }
	  }

	  /**
	   * Iterates over all content routers in parallel to find providers of the given key.
	   *
	   * @param {CID} key - The CID key of the content to find
	   * @param {object} [options]
	   * @param {number} [options.timeout] - How long the query should run
	   * @param {number} [options.maxNumProviders] - maximum number of providers to find
	   * @returns {AsyncIterable<{ id: PeerId, multiaddrs: Multiaddr[] }>}
	   */
	  async * findProviders (key, options = {}) {
	    if (!this.routers.length) {
	      throw errCode$d(new Error('No content this.routers available'), codes$h.ERR_NO_ROUTERS_AVAILABLE)
	    }

	    yield * pipe$a(
	      merge(
	        ...this.routers.map(router => router.findProviders(key, options))
	      ),
	      (source) => storeAddresses(source, this.libp2p.peerStore),
	      (source) => uniquePeers(source),
	      (source) => maybeLimitSource(source, options.maxNumProviders),
	      (source) => requirePeers(source)
	    );
	  }

	  /**
	   * Iterates over all content routers in parallel to notify it is
	   * a provider of the given key.
	   *
	   * @param {CID} key - The CID key of the content to find
	   * @returns {Promise<void>}
	   */
	  async provide (key) {
	    if (!this.routers.length) {
	      throw errCode$d(new Error('No content routers available'), codes$h.ERR_NO_ROUTERS_AVAILABLE)
	    }

	    await Promise.all(this.routers.map((router) => router.provide(key)));
	  }

	  /**
	   * Store the given key/value pair in the DHT.
	   *
	   * @param {Uint8Array} key
	   * @param {Uint8Array} value
	   * @param {Object} [options] - put options
	   * @param {number} [options.minPeers] - minimum number of peers required to successfully put
	   * @returns {Promise<void>}
	   */
	  async put (key, value, options) {
	    if (!this.libp2p.isStarted() || !this.dht.isStarted) {
	      throw errCode$d(new Error(messages$1.NOT_STARTED_YET), codes$h.DHT_NOT_STARTED)
	    }

	    await drain(this.dht.put(key, value, options));
	  }

	  /**
	   * Get the value to the given key.
	   * Times out after 1 minute by default.
	   *
	   * @param {Uint8Array} key
	   * @param {Object} [options] - get options
	   * @param {number} [options.timeout] - optional timeout (default: 60000)
	   * @returns {Promise<GetData>}
	   */
	  async get (key, options) {
	    if (!this.libp2p.isStarted() || !this.dht.isStarted) {
	      throw errCode$d(new Error(messages$1.NOT_STARTED_YET), codes$h.DHT_NOT_STARTED)
	    }

	    for await (const event of this.dht.get(key, options)) {
	      if (event.name === 'VALUE') {
	        return { from: event.peerId, val: event.value }
	      }
	    }

	    throw errCode$d(new Error(messages$1.NOT_FOUND), codes$h.ERR_NOT_FOUND)
	  }

	  /**
	   * Get the `n` values to the given key without sorting.
	   *
	   * @param {Uint8Array} key
	   * @param {number} nVals
	   * @param {Object} [options] - get options
	   * @param {number} [options.timeout] - optional timeout (default: 60000)
	   */
	  async * getMany (key, nVals, options) { // eslint-disable-line require-await
	    if (!this.libp2p.isStarted() || !this.dht.isStarted) {
	      throw errCode$d(new Error(messages$1.NOT_STARTED_YET), codes$h.DHT_NOT_STARTED)
	    }

	    if (!nVals) {
	      return
	    }

	    let gotValues = 0;

	    for await (const event of this.dht.get(key, options)) {
	      if (event.name === 'VALUE') {
	        yield { from: event.peerId, val: event.value };

	        gotValues++;

	        if (gotValues === nVals) {
	          break
	        }
	      }
	    }

	    if (gotValues === 0) {
	      throw errCode$d(new Error(messages$1.NOT_FOUND), codes$h.ERR_NOT_FOUND)
	    }
	  }
	}

	var contentRouting = ContentRouting$1;

	const PeerId$f = src$o.exports;
	const { Multiaddr: Multiaddr$d } = src$s;
	const errCode$c = errCode$q;

	const { codes: codes$g } = errors$3;

	/**
	 * Converts the given `peer` to a `Peer` object.
	 * If a multiaddr is received, the addressBook is updated.
	 *
	 * @param {PeerId|Multiaddr|string} peer
	 * @returns {{ id: PeerId, multiaddrs: Multiaddr[]|undefined }}
	 */
	function getPeer$2 (peer) {
	  if (typeof peer === 'string') {
	    peer = new Multiaddr$d(peer);
	  }

	  let addr;
	  if (Multiaddr$d.isMultiaddr(peer)) {
	    addr = peer;
	    const idStr = peer.getPeerId();

	    if (!idStr) {
	      throw errCode$c(
	        new Error(`${peer} does not have a valid peer type`),
	        codes$g.ERR_INVALID_MULTIADDR
	      )
	    }

	    try {
	      peer = PeerId$f.createFromB58String(idStr);
	    } catch (/** @type {any} */ err) {
	      throw errCode$c(
	        new Error(`${peer} is not a valid peer type`),
	        codes$g.ERR_INVALID_MULTIADDR
	      )
	    }
	  }

	  return {
	    id: peer,
	    multiaddrs: addr ? [addr] : undefined
	  }
	}

	var getPeer_1 = getPeer$2;

	var config = {};

	var receptacle = Receptacle$1;
	var toMS = ms;
	var cache = Receptacle$1.prototype;
	var counter = new Date() % 1e9;

	function getUID () { return (Math.random() * 1e9 >>> 0) + (counter++) }

	/**
	 * Creates a cache with a maximum key size.
	 *
	 * @constructor
	 * @param {Object} options
	 * @param {Number} [options.max=Infinity] the maximum number of keys allowed in the cache (lru).
	 * @param {Array} [options.items=[]] the default items in the cache.
	 */
	function Receptacle$1 (options) {
	  options = options || {};
	  this.id = options.id || getUID();
	  this.max = options.max || Infinity;
	  this.items = options.items || [];
	  this._lookup = {};
	  this.size = this.items.length;
	  this.lastModified = new Date(options.lastModified || new Date());

	  // Setup initial timers and indexes for the cache.
	  for (var item, ttl, i = this.items.length; i--;) {
	    item = this.items[i];
	    ttl = new Date(item.expires) - new Date();
	    this._lookup[item.key] = item;
	    if (ttl > 0) this.expire(item.key, ttl);
	    else if (ttl <= 0) this.delete(item.key);
	  }
	}

	/**
	 * Tests if a key is currently in the cache.
	 * Does not check if slot is empty.
	 *
	 * @param {String} key - the key to retrieve from the cache.
	 * @return {Boolean}
	 */
	cache.has = function (key) {
	  return key in this._lookup
	};

	/**
	 * Retrieves a key from the cache and marks it as recently used.
	 *
	 * @param {String} key - the key to retrieve from the cache.
	 * @return {*}
	 */
	cache.get = function (key) {
	  if (!this.has(key)) return null
	  var record = this._lookup[key];
	  // Update expiry for "refresh" keys
	  if (record.refresh) this.expire(key, record.refresh);
	  // Move to front of the line.
	  this.items.splice(this.items.indexOf(record), 1);
	  this.items.push(record);
	  return record.value
	};

	/**
	 * Retrieves user meta data for a cached item.
	 *
	 * @param {String} key - the key to retrieve meta data from the cache.
	 * @return {*}
	 */
	cache.meta = function (key) {
	  if (!this.has(key)) return null
	  var record = this._lookup[key];
	  if (!('meta' in record)) return null
	  return record.meta
	};

	/**
	 * Puts a key into the cache with an optional expiry time.
	 *
	 * @param {String} key - the key for the value in the cache.
	 * @param {*} value - the value to place at the key.
	 * @param {Number} [options.ttl] - a time after which the key will be removed.
	 * @return {Receptacle}
	 */
	cache.set = function (key, value, options) {
	  var oldRecord = this._lookup[key];
	  var record = this._lookup[key] = { key: key, value: value };
	  // Mark cache as modified.
	  this.lastModified = new Date();

	  if (oldRecord) {
	    // Replace an old key.
	    clearTimeout(oldRecord.timeout);
	    this.items.splice(this.items.indexOf(oldRecord), 1, record);
	  } else {
	    // Remove least used item if needed.
	    if (this.size >= this.max) this.delete(this.items[0].key);
	    // Add a new key.
	    this.items.push(record);
	    this.size++;
	  }

	  if (options) {
	    // Setup key expiry.
	    if ('ttl' in options) this.expire(key, options.ttl);
	    // Store user options in the record.
	    if ('meta' in options) record.meta = options.meta;
	    // Mark a auto refresh key.
	    if (options.refresh) record.refresh = options.ttl;
	  }

	  return this
	};

	/**
	 * Deletes an item from the cache.
	 *
	 * @param {String} key - the key to remove.
	 * @return {Receptacle}
	 */
	cache.delete = function (key) {
	  var record = this._lookup[key];
	  if (!record) return false
	  this.lastModified = new Date();
	  this.items.splice(this.items.indexOf(record), 1);
	  clearTimeout(record.timeout);
	  delete this._lookup[key];
	  this.size--;
	  return this
	};

	/**
	 * Utility to register a key that will be removed after some time.
	 *
	 * @param {String} key - the key to remove.
	 * @param {Number} [ms] - the timeout before removal.
	 * @return {Receptacle}
	 */
	cache.expire = function (key, ttl) {
	  var ms = ttl || 0;
	  var record = this._lookup[key];
	  if (!record) return this
	  if (typeof ms === 'string') ms = toMS(ttl);
	  if (typeof ms !== 'number') throw new TypeError('Expiration time must be a string or number.')
	  clearTimeout(record.timeout);
	  record.timeout = setTimeout(this.delete.bind(this, record.key), ms);
	  record.expires = Number(new Date()) + ms;
	  return this
	};

	/**
	 * Deletes all items from the cache.
	 * @return {Receptacle}
	 */
	cache.clear = function () {
	  for (var i = this.items.length; i--;) this.delete(this.items[i].key);
	  return this
	};

	/**
	 * Fixes serialization issues in polyfilled environments.
	 * Ensures non-cyclical serialized object.
	 */
	cache.toJSON = function () {
	  var items = new Array(this.items.length);
	  var item;
	  for (var i = items.length; i--;) {
	    item = this.items[i];
	    items[i] = {
	      key: item.key,
	      meta: item.meta,
	      value: item.value,
	      expires: item.expires,
	      refresh: item.refresh
	    };
	  }

	  return {
	    id: this.id,
	    max: isFinite(this.max) ? this.max : undefined,
	    lastModified: this.lastModified,
	    items: items
	  }
	};

	const { default: nativeFetch, Headers } = src$p.exports;

	/**
	 * Build fetch resource for request.
	 *
	 * @param {object} properties
	 * @param {string} properties.serverResolver
	 * @param {string} properties.hostname
	 * @param {string} properties.recordType
	 * @returns {string}
	 */
	function buildResource ({ serverResolver, hostname, recordType }) {
	  return `${serverResolver}?name=${hostname}&type=${recordType}`
	}

	/**
	 * Use fetch to find the record.
	 *
	 * @param {object} resource
	 * @returns {Promise}
	 */
	function fetch$1 (resource) {
	  return nativeFetch(resource, {
	    headers: new Headers({
	      accept: 'application/dns-json'
	    })
	  })
	}

	/**
	 * Creates cache key composed by recordType and hostname.
	 *
	 * @param {string} hostname
	 * @param {string} recordType
	 * @returns {string}
	 */
	function getCacheKey (hostname, recordType) {
	  return `${recordType}_${hostname}`
	}

	var utils$4 = {
	  buildResource,
	  fetch: fetch$1,
	  getCacheKey
	};

	const debug$t = browser$a.exports;
	const log$t = debug$t('dns-over-http-resolver');
	log$t.error = debug$t('dns-over-http-resolver:error');

	const Receptacle = receptacle;

	const utils$3 = utils$4;

	/**
	 * DNS over HTTP resolver.
	 * Uses a list of servers to resolve DNS records with HTTP requests.
	 */
	class Resolver {
	  /**
	   * @class
	   * @param {object} [properties]
	   * @param {number} [properties.maxCache = 100] - maximum number of cached dns records.
	   */
	  constructor ({ maxCache = 100 } = {}) {
	    this._cache = new Receptacle({ max: maxCache });
	    this._servers = [
	      'https://cloudflare-dns.com/dns-query',
	      'https://dns.google/resolve'
	    ];
	  }

	  /**
	   * Get an array of the IP addresses currently configured for DNS resolution.
	   * These addresses are formatted according to RFC 5952. It can include a custom port.
	   *
	   * @returns {Array<string>}
	   */
	  getServers () {
	    return this._servers
	  }

	  /**
	   * Get a shuffled array of the IP addresses currently configured for DNS resolution.
	   * These addresses are formatted according to RFC 5952. It can include a custom port.
	   *
	   * @returns {Array<string>}
	   */
	  _getShuffledServers () {
	    const newServers = [].concat(this._servers);

	    for (let i = newServers.length - 1; i > 0; i--) {
	      const j = Math.floor(Math.random() * i);
	      const temp = newServers[i];
	      newServers[i] = newServers[j];
	      newServers[j] = temp;
	    }

	    return newServers
	  }

	  /**
	   * Sets the IP address and port of servers to be used when performing DNS resolution.
	   *
	   * @param {Array<string>} servers - array of RFC 5952 formatted addresses.
	   */
	  setServers (servers) {
	    this._servers = servers;
	  }

	  /**
	   * Uses the DNS protocol to resolve the given host name into the appropriate DNS record.
	   *
	   * @param {string} hostname - host name to resolve.
	   * @param {string} [rrType = 'A'] - resource record type.
	   * @returns {Promise<*>}
	   */
	  resolve (hostname, rrType = 'A') {
	    switch (rrType) {
	      case 'A':
	        return this.resolve4(hostname)
	      case 'AAAA':
	        return this.resolve6(hostname)
	      case 'TXT':
	        return this.resolveTxt(hostname)
	      default:
	        throw new Error(`${rrType} is not supported`)
	    }
	  }

	  /**
	   * Uses the DNS protocol to resolve the given host name into IPv4 addresses.
	   *
	   * @param {string} hostname - host name to resolve.
	   * @returns {Promise<Array<string>>}
	   */
	  async resolve4 (hostname) {
	    const recordType = 'A';
	    const cached = this._cache.get(utils$3.getCacheKey(hostname, recordType));
	    if (cached) {
	      return cached
	    }

	    for (const server of this._getShuffledServers()) {
	      try {
	        const response = await utils$3.fetch(utils$3.buildResource({
	          serverResolver: server,
	          hostname,
	          recordType
	        }));

	        const d = await response.json();
	        const data = d.Answer.map(a => a.data);
	        const ttl = Math.min(d.Answer.map(a => a.TTL));

	        this._cache.set(utils$3.getCacheKey(hostname, recordType), data, { ttl });

	        return data
	      } catch (err) {
	        log$t.error(`${server} could not resolve ${hostname} record ${recordType}`);
	      }
	    }

	    throw new Error(`Could not resolve ${hostname} record ${recordType}`)
	  }

	  /**
	   * Uses the DNS protocol to resolve the given host name into IPv6 addresses.
	   *
	   * @param {string} hostname - host name to resolve.
	   * @returns {Promise<Array<string>>}
	   */
	  async resolve6 (hostname) {
	    const recordType = 'AAAA';
	    const cached = this._cache.get(utils$3.getCacheKey(hostname, recordType));
	    if (cached) {
	      return cached
	    }

	    for (const server of this._getShuffledServers()) {
	      try {
	        const response = await utils$3.fetch(utils$3.buildResource({
	          serverResolver: server,
	          hostname,
	          recordType
	        }));

	        const d = await response.json();
	        const data = d.Answer.map(a => a.data);
	        const ttl = Math.min(d.Answer.map(a => a.TTL));

	        this._cache.set(utils$3.getCacheKey(hostname, recordType), data, { ttl });

	        return data
	      } catch (err) {
	        log$t.error(`${server} could not resolve ${hostname} record ${recordType}`);
	      }
	    }

	    throw new Error(`Could not resolve ${hostname} record ${recordType}`)
	  }

	  /**
	   * Uses the DNS protocol to resolve the given host name into a Text record.
	   *
	   * @param {string} hostname - host name to resolve.
	   * @returns {Promise<Array<Array<string>>>}
	   */
	  async resolveTxt (hostname) {
	    const recordType = 'TXT';
	    const cached = this._cache.get(utils$3.getCacheKey(hostname, recordType));
	    if (cached) {
	      return cached
	    }

	    for (const server of this._getShuffledServers()) {
	      try {
	        const response = await utils$3.fetch(utils$3.buildResource({
	          serverResolver: server,
	          hostname,
	          recordType
	        }));

	        const d = await response.json();
	        const data = d.Answer.map(a => [a.data.replace(/['"]+/g, '')]);
	        const ttl = Math.min(d.Answer.map(a => a.TTL));

	        this._cache.set(utils$3.getCacheKey(hostname, recordType), data, { ttl });

	        return data
	      } catch (err) {
	        log$t.error(`${server} could not resolve ${hostname} record ${recordType}`);
	      }
	    }

	    throw new Error(`Could not resolve ${hostname} record ${recordType}`)
	  }
	}

	Resolver.Resolver = Resolver;
	var src$4 = Resolver;

	/** @type {import('dns').promises.Resolver} */
	// @ts-ignore - has no types
	const dns = src$4;

	var dns_browser = dns;

	const protocols = protocolsTable;

	const { code: dnsaddrCode } = protocols('dnsaddr');

	/**
	 * @typedef {import('..').Multiaddr} Multiaddr
	 */

	/**
	 * Resolver for dnsaddr addresses.
	 *
	 * @param {Multiaddr} addr
	 * @returns {Promise<string[]>}
	 */
	async function dnsaddrResolver$1 (addr) {
	  const Resolver = dns_browser;
	  const resolver = new Resolver();

	  const peerId = addr.getPeerId();
	  const [, hostname] = addr.stringTuples().find(([proto]) => proto === dnsaddrCode) || [];

	  const records = await resolver.resolveTxt(`_dnsaddr.${hostname}`);
	  let addresses = records.flat().map((a) => a.split('=')[1]);

	  if (peerId) {
	    addresses = addresses.filter((entry) => entry.includes(peerId));
	  }

	  return addresses
	}

	var resolvers = {
	  dnsaddrResolver: dnsaddrResolver$1
	};

	var constants$4 = {
	  DIAL_TIMEOUT: 30e3, // How long in ms a dial attempt is allowed to take
	  MAX_PARALLEL_DIALS: 100, // Maximum allowed concurrent dials
	  MAX_PER_PEER_DIALS: 4, // Allowed parallel dials per DialRequest
	  MAX_ADDRS_TO_DIAL: 25, // Maximum number of allowed addresses to attempt to dial
	  METRICS: {
	    computeThrottleMaxQueueSize: 1000,
	    computeThrottleTimeout: 2000,
	    movingAverageIntervals: [
	      60 * 1000, // 1 minute
	      5 * 60 * 1000, // 5 minutes
	      15 * 60 * 1000 // 15 minutes
	    ],
	    maxOldPeersRetention: 50
	  }
	};

	var consts$1 = {};

	var name = "libp2p";
	var version = "0.36.2";
	var description = "JavaScript implementation of libp2p, a modular peer to peer network stack";
	var leadMaintainer = "Jacob Heun <jacobheun@gmail.com>";
	var main = "src/index.js";
	var types = "dist/src/index.d.ts";
	var typesVersions = {
		"*": {
			"src/*": [
				"dist/src/*",
				"dist/src/*/index"
			]
		}
	};
	var files = [
		"dist",
		"src"
	];
	var scripts = {
		lint: "aegir lint",
		build: "aegir build",
		"build:proto": "npm run build:proto:circuit && npm run build:proto:fetch && npm run build:proto:identify && npm run build:proto:plaintext && npm run build:proto:address-book && npm run build:proto:proto-book && npm run build:proto:peer && npm run build:proto:peer-record && npm run build:proto:envelope",
		"build:proto:circuit": "pbjs -t static-module -w commonjs -r libp2p-circuit --force-number --no-verify --no-delimited --no-create --no-beautify --no-defaults --lint eslint-disable -o src/circuit/protocol/index.js ./src/circuit/protocol/index.proto",
		"build:proto:fetch": "pbjs -t static-module -w commonjs -r libp2p-fetch --force-number --no-verify --no-delimited --no-create --no-beautify --no-defaults --lint eslint-disable -o src/fetch/proto.js ./src/fetch/proto.proto",
		"build:proto:identify": "pbjs -t static-module -w commonjs -r libp2p-identify --force-number --no-verify --no-delimited --no-create --no-beautify --no-defaults --lint eslint-disable -o src/identify/message.js ./src/identify/message.proto",
		"build:proto:plaintext": "pbjs -t static-module -w commonjs -r libp2p-plaintext --force-number --no-verify --no-delimited --no-create --no-beautify --no-defaults --lint eslint-disable -o src/insecure/proto.js ./src/insecure/proto.proto",
		"build:proto:peer": "pbjs -t static-module -w commonjs -r libp2p-peer --force-number --no-verify --no-delimited --no-create --no-beautify --no-defaults --lint eslint-disable -o src/peer-store/pb/peer.js ./src/peer-store/pb/peer.proto",
		"build:proto:peer-record": "pbjs -t static-module -w commonjs -r libp2p-peer-record --force-number --no-verify --no-delimited --no-create --no-beautify --no-defaults --lint eslint-disable -o src/record/peer-record/peer-record.js ./src/record/peer-record/peer-record.proto",
		"build:proto:envelope": "pbjs -t static-module -w commonjs -r libp2p-envelope --force-number --no-verify --no-delimited --no-create --no-beautify --no-defaults --lint eslint-disable -o src/record/envelope/envelope.js ./src/record/envelope/envelope.proto",
		"build:proto-types": "npm run build:proto-types:circuit && npm run build:proto-types:fetch && npm run build:proto-types:identify && npm run build:proto-types:plaintext && npm run build:proto-types:address-book && npm run build:proto-types:proto-book && npm run build:proto-types:peer && npm run build:proto-types:peer-record && npm run build:proto-types:envelope",
		"build:proto-types:circuit": "pbts -o src/circuit/protocol/index.d.ts src/circuit/protocol/index.js",
		"build:proto-types:fetch": "pbts -o src/fetch/proto.d.ts src/fetch/proto.js",
		"build:proto-types:identify": "pbts -o src/identify/message.d.ts src/identify/message.js",
		"build:proto-types:plaintext": "pbts -o src/insecure/proto.d.ts src/insecure/proto.js",
		"build:proto-types:peer": "pbts -o src/peer-store/pb/peer.d.ts src/peer-store/pb/peer.js",
		"build:proto-types:peer-record": "pbts -o src/record/peer-record/peer-record.d.ts src/record/peer-record/peer-record.js",
		"build:proto-types:envelope": "pbts -o src/record/envelope/envelope.d.ts src/record/envelope/envelope.js",
		test: "aegir test",
		"test:ts": "aegir build --no-bundle && npm run test --prefix test/ts-use",
		"test:node": "aegir test -t node -f \"./test/**/*.{node,spec}.js\"",
		"test:browser": "aegir test -t browser",
		"test:examples": "cd examples && npm run test:all",
		"test:interop": "LIBP2P_JS=$PWD npx aegir test -t node -f ./node_modules/libp2p-interop/test/*",
		prepare: "npm run build",
		coverage: "nyc --reporter=text --reporter=lcov npm run test:node"
	};
	var repository = {
		type: "git",
		url: "https://github.com/libp2p/js-libp2p.git"
	};
	var keywords = [
		"libp2p",
		"network",
		"p2p",
		"peer",
		"peer-to-peer",
		"IPFS"
	];
	var bugs = {
		url: "https://github.com/libp2p/js-libp2p/issues"
	};
	var homepage = "https://libp2p.io";
	var license = "MIT";
	var engines = {
		node: ">=15.0.0"
	};
	var browser$2 = {
		"nat-api": false
	};
	var eslintConfig = {
		"extends": "ipfs",
		ignorePatterns: [
			"!.aegir.js",
			"test/ts-use",
			"*.d.ts"
		]
	};
	var dependencies = {
		"@vascosantos/moving-average": "^1.1.0",
		"abortable-iterator": "^3.0.0",
		"aggregate-error": "^3.1.0",
		"any-signal": "^3.0.0",
		"bignumber.js": "^9.0.1",
		"class-is": "^1.1.0",
		"datastore-core": "^7.0.0",
		debug: "^4.3.1",
		"err-code": "^3.0.0",
		"es6-promisify": "^7.0.0",
		events: "^3.3.0",
		hashlru: "^2.3.0",
		"interface-datastore": "^6.0.2",
		"it-all": "^1.0.4",
		"it-buffer": "^0.1.2",
		"it-drain": "^1.0.3",
		"it-filter": "^1.0.1",
		"it-first": "^1.0.4",
		"it-foreach": "^0.1.1",
		"it-handshake": "^2.0.0",
		"it-length-prefixed": "^5.0.2",
		"it-map": "^1.0.4",
		"it-merge": "^1.0.0",
		"it-pipe": "^1.1.0",
		"it-sort": "^1.0.1",
		"it-take": "^1.0.0",
		"libp2p-crypto": "^0.21.2",
		"libp2p-interfaces": "^4.0.0",
		"libp2p-utils": "^0.4.0",
		mafmt: "^10.0.0",
		"merge-options": "^3.0.4",
		mortice: "^2.0.1",
		multiaddr: "^10.0.0",
		multiformats: "^9.0.0",
		"multistream-select": "^3.0.0",
		"mutable-proxy": "^1.0.0",
		"nat-api": "^0.3.1",
		"node-forge": "^1.2.1",
		"p-any": "^3.0.0",
		"p-fifo": "^1.0.0",
		"p-retry": "^4.4.0",
		"p-settle": "^4.1.1",
		"peer-id": "^0.16.0",
		"private-ip": "^2.1.0",
		protobufjs: "^6.10.2",
		retimer: "^3.0.0",
		"sanitize-filename": "^1.6.3",
		"set-delayed-interval": "^1.0.0",
		"streaming-iterables": "^6.0.0",
		"timeout-abort-controller": "^3.0.0",
		uint8arrays: "^3.0.0",
		varint: "^6.0.0",
		wherearewe: "^1.0.0",
		xsalsa20: "^1.1.0"
	};
	var devDependencies = {
		"@chainsafe/libp2p-noise": "^5.0.0",
		"@nodeutils/defaults-deep": "^1.1.0",
		"@types/es6-promisify": "^6.0.0",
		"@types/node": "^16.0.1",
		"@types/node-forge": "^1.0.0",
		"@types/varint": "^6.0.0",
		aegir: "^36.0.0",
		buffer: "^6.0.3",
		delay: "^5.0.0",
		"into-stream": "^6.0.0",
		"ipfs-http-client": "^54.0.2",
		"it-concat": "^2.0.0",
		"it-pair": "^1.0.0",
		"it-pushable": "^1.4.0",
		libp2p: ".",
		"libp2p-bootstrap": "^0.14.0",
		"libp2p-delegated-content-routing": "^0.11.0",
		"libp2p-delegated-peer-routing": "^0.11.1",
		"libp2p-interfaces-compliance-tests": "^4.0.8",
		"libp2p-interop": "^0.7.1",
		"libp2p-kad-dht": "^0.28.6",
		"libp2p-mdns": "^0.18.0",
		"libp2p-mplex": "^0.10.4",
		"libp2p-tcp": "^0.17.0",
		"libp2p-webrtc-star": "^0.25.0",
		"libp2p-websockets": "^0.16.0",
		nock: "^13.0.3",
		"p-defer": "^3.0.0",
		"p-times": "^3.0.0",
		"p-wait-for": "^3.2.0",
		rimraf: "^3.0.2",
		sinon: "^12.0.1",
		util: "^0.12.3"
	};
	var contributors = [
		"Vasco Santos <vasco.santos@moxy.studio>",
		"David Dias <daviddias.p@gmail.com>",
		"Jacob Heun <jacobheun@gmail.com>",
		"Alex Potsides <alex@achingbrain.net>",
		"Alan Shaw <alan@tableflip.io>",
		"Cayman <caymannava@gmail.com>",
		"Pedro Teixeira <i@pgte.me>",
		"Friedel Ziegelmayer <dignifiedquire@gmail.com>",
		"Maciej Krüger <mkg20001@gmail.com>",
		"Hugo Dias <mail@hugodias.me>",
		"dirkmc <dirkmdev@gmail.com>",
		"Volker Mische <volker.mische@gmail.com>",
		"Chris Dostert <chrisdostert@users.noreply.github.com>",
		"zeim839 <50573884+zeim839@users.noreply.github.com>",
		"Robert Kiel <robert.kiel@hoprnet.org>",
		"Richard Littauer <richard.littauer@gmail.com>",
		"a1300 <matthias-knopp@gmx.net>",
		"Ryan Bell <ryan@piing.net>",
		"ᴠɪᴄᴛᴏʀ ʙᴊᴇʟᴋʜᴏʟᴍ <victorbjelkholm@gmail.com>",
		"Andrew Nesbitt <andrewnez@gmail.com>",
		"Franck Royer <franck@royer.one>",
		"Thomas Eizinger <thomas@eizinger.io>",
		"Vít Habada <vithabada93@gmail.com>",
		"Giovanni T. Parra <fiatjaf@gmail.com>",
		"acolytec3 <17355484+acolytec3@users.noreply.github.com>",
		"Alan Smithee <ggnore.alan.smithee@gmail.com>",
		"Elven <mon.samuel@qq.com>",
		"Samlior <samlior@foxmail.com>",
		"Didrik Nordström <didrik.nordstrom@gmail.com>",
		"Aditya Bose <13054902+adbose@users.noreply.github.com>",
		"TJKoury <TJKoury@gmail.com>",
		"TheStarBoys <41286328+TheStarBoys@users.noreply.github.com>",
		"Tiago Alves <alvesjtiago@gmail.com>",
		"Tim Daubenschütz <tim@daubenschuetz.de>",
		"XiaoZhang <zxinmyth@gmail.com>",
		"Yusef Napora <yusef@napora.org>",
		"Zane Starr <zcstarr@gmail.com>",
		"ebinks <elizabethjbinks@gmail.com>",
		"greenSnot <greenSnot@users.noreply.github.com>",
		"isan_rivkin <isanrivkin@gmail.com>",
		"mayerwin <mayerwin@users.noreply.github.com>",
		"mcclure <andi.m.mcclure@gmail.com>",
		"patrickwoodhead <91056047+patrickwoodhead@users.noreply.github.com>",
		"phillmac <phillmac@users.noreply.github.com>",
		"robertkiel <robert.kiel@validitylabs.org>",
		"shresthagrawal <34920931+shresthagrawal@users.noreply.github.com>",
		"swedneck <40505480+swedneck@users.noreply.github.com>",
		"tuyennhv <vutuyen2636@gmail.com>",
		"Sönke Hahn <soenkehahn@gmail.com>",
		"Aleksei <vozhdb@gmail.com>",
		"Bernd Strehl <bernd.strehl@gmail.com>",
		"Chris Bratlien <chrisbratlien@gmail.com>",
		"Cindy Wu <ciindy.wu@gmail.com>",
		"Daijiro Wachi <daijiro.wachi@gmail.com>",
		"Diogo Silva <fsdiogo@gmail.com>",
		"Dmitriy Ryajov <dryajov@gmail.com>",
		"Ethan Lam <elmemphis2000@gmail.com>",
		"Fei Liu <liu.feiwood@gmail.com>",
		"Felipe Martins <felipebrasil93@gmail.com>",
		"Florian-Merle <florian.david.merle@gmail.com>",
		"Francis Gulotta <wizard@roborooter.com>",
		"Guy Sviry <32539816+guysv@users.noreply.github.com>",
		"Henrique Dias <hacdias@gmail.com>",
		"Irakli Gozalishvili <rfobic@gmail.com>",
		"Joel Gustafson <joelg@mit.edu>",
		"John Rees <johnrees@users.noreply.github.com>",
		"João Santos <joaosantos15@users.noreply.github.com>",
		"Julien Bouquillon <contact@revolunet.com>",
		"Kevin Kwok <antimatter15@gmail.com>",
		"Kevin Lacker <lacker@gmail.com>",
		"Lars Gierth <lgierth@users.noreply.github.com>",
		"Leask Wong <i@leaskh.com>",
		"Marcin Tojek <mtojek@users.noreply.github.com>",
		"Marston Connell <34043723+TheMarstonConnell@users.noreply.github.com>",
		"Michael Burns <5170+mburns@users.noreply.github.com>",
		"Miguel Mota <miguelmota2@gmail.com>",
		"Nuno Nogueira <nunofmn@gmail.com>",
		"Philipp Muens <raute1337@gmx.de>",
		"RasmusErik Voel Jensen <github@solsort.com>",
		"Smite Chow <xiaopengyou@live.com>",
		"Soeren <nikorpoulsen@gmail.com>"
	];
	var require$$7 = {
		name: name,
		version: version,
		description: description,
		leadMaintainer: leadMaintainer,
		main: main,
		types: types,
		typesVersions: typesVersions,
		files: files,
		scripts: scripts,
		repository: repository,
		keywords: keywords,
		bugs: bugs,
		homepage: homepage,
		license: license,
		engines: engines,
		browser: browser$2,
		eslintConfig: eslintConfig,
		dependencies: dependencies,
		devDependencies: devDependencies,
		contributors: contributors
	};

	// @ts-ignore file not listed within the file list of projects
	const libp2pVersion = require$$7.version;

	consts$1.PROTOCOL_VERSION = 'ipfs/0.1.0'; // deprecated
	consts$1.AGENT_VERSION = `js-libp2p/${libp2pVersion}`;
	consts$1.MULTICODEC_IDENTIFY = '/ipfs/id/1.0.0'; // deprecated
	consts$1.MULTICODEC_IDENTIFY_PUSH = '/ipfs/id/push/1.0.0'; // deprecated

	consts$1.IDENTIFY_PROTOCOL_VERSION = '0.1.0';
	consts$1.MULTICODEC_IDENTIFY_PROTOCOL_NAME = 'id';
	consts$1.MULTICODEC_IDENTIFY_PUSH_PROTOCOL_NAME = 'id/push';
	consts$1.MULTICODEC_IDENTIFY_PROTOCOL_VERSION = '1.0.0';
	consts$1.MULTICODEC_IDENTIFY_PUSH_PROTOCOL_VERSION = '1.0.0';

	const minute = 60 * 1000;

	var constants$3 = {
	  ADVERTISE_BOOT_DELAY: 15 * minute, // Delay before HOP relay service is advertised on the network
	  ADVERTISE_TTL: 30 * minute, // Delay Between HOP relay service advertisements on the network
	  CIRCUIT_PROTO_CODE: 290, // Multicodec code
	  HOP_METADATA_KEY: 'hop_relay', // PeerStore metadaBook key for HOP relay service
	  HOP_METADATA_VALUE: 'true', // PeerStore metadaBook value for HOP relay service
	  RELAY_RENDEZVOUS_NS: '/libp2p/relay' // Relay HOP relay service namespace for discovery
	};

	var addressSort = {};

	// @ts-ignore private-ip does not publish types
	const isIpPrivate = privateIp;

	/**
	 * @typedef {import('multiaddr').Multiaddr} Multiaddr
	 */

	/**
	 * Check if a given multiaddr has a private address.
	 *
	 * @param {Multiaddr} ma
	 * @returns {boolean}
	 */
	function isPrivate$1 (ma) {
	  const { address } = ma.nodeAddress();

	  return isIpPrivate(address)
	}

	var isPrivate_1 = isPrivate$1;

	const isPrivate = isPrivate_1;

	/**
	 * @typedef {import('multiaddr').Multiaddr} Multiaddr
	 */

	/**
	 * @typedef {Object} Address
	 * @property {Multiaddr} multiaddr peer multiaddr.
	 * @property {boolean} isCertified obtained from a signed peer record.
	 */

	/**
	 * Compare function for array.sort().
	 * This sort aims to move the private adresses to the end of the array.
	 * In case of equality, a certified address will come first.
	 *
	 * @param {Address} a
	 * @param {Address} b
	 * @returns {number}
	 */
	function addressesPublicFirstCompareFunction (a, b) {
	  const isAPrivate = isPrivate(a.multiaddr);
	  const isBPrivate = isPrivate(b.multiaddr);

	  if (isAPrivate && !isBPrivate) {
	    return 1
	  } else if (!isAPrivate && isBPrivate) {
	    return -1
	  }
	  // Check certified?
	  if (a.isCertified && !b.isCertified) {
	    return -1
	  } else if (!a.isCertified && b.isCertified) {
	    return 1
	  }

	  return 0
	}

	/**
	 * Sort given addresses by putting public addresses first.
	 * In case of equality, a certified address will come first.
	 *
	 * @param {Array<Address>} addresses
	 * @returns {Array<Address>}
	 */
	function publicAddressesFirst$2 (addresses) {
	  return [...addresses].sort(addressesPublicFirstCompareFunction)
	}

	addressSort.publicAddressesFirst = publicAddressesFirst$2;

	var pReflect$2 = {exports: {}};

	const pReflect$1 = async promise => {
		try {
			const value = await promise;
			return {
				isFulfilled: true,
				isRejected: false,
				value
			};
		} catch (error) {
			return {
				isFulfilled: false,
				isRejected: true,
				reason: error
			};
		}
	};

	pReflect$2.exports = pReflect$1;
	// TODO: Remove this for the next major release
	pReflect$2.exports.default = pReflect$1;

	var pLimit$2 = {exports: {}};

	var pTry$2 = {exports: {}};

	const pTry$1 = (fn, ...arguments_) => new Promise(resolve => {
		resolve(fn(...arguments_));
	});

	pTry$2.exports = pTry$1;
	// TODO: remove this in the next major version
	pTry$2.exports.default = pTry$1;

	const pTry = pTry$2.exports;

	const pLimit$1 = concurrency => {
		if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {
			return Promise.reject(new TypeError('Expected `concurrency` to be a number from 1 and up'));
		}

		const queue = [];
		let activeCount = 0;

		const next = () => {
			activeCount--;

			if (queue.length > 0) {
				queue.shift()();
			}
		};

		const run = (fn, resolve, ...args) => {
			activeCount++;

			const result = pTry(fn, ...args);

			resolve(result);

			result.then(next, next);
		};

		const enqueue = (fn, resolve, ...args) => {
			if (activeCount < concurrency) {
				run(fn, resolve, ...args);
			} else {
				queue.push(run.bind(null, fn, resolve, ...args));
			}
		};

		const generator = (fn, ...args) => new Promise(resolve => enqueue(fn, resolve, ...args));
		Object.defineProperties(generator, {
			activeCount: {
				get: () => activeCount
			},
			pendingCount: {
				get: () => queue.length
			},
			clearQueue: {
				value: () => {
					queue.length = 0;
				}
			}
		});

		return generator;
	};

	pLimit$2.exports = pLimit$1;
	pLimit$2.exports.default = pLimit$1;

	const pReflect = pReflect$2.exports;
	const pLimit = pLimit$2.exports;

	var pSettle$1 = async (array, options = {}) => {
		const {concurrency = Infinity} = options;
		const limit = pLimit(concurrency);

		return Promise.all(array.map(element => {
			if (element && typeof element.then === 'function') { // eslint-disable-line promise/prefer-await-to-then
				return pReflect(element);
			}

			if (typeof element === 'function') {
				return pReflect(limit(() => element()));
			}

			return pReflect(Promise.resolve(element));
		}));
	};

	var utils$2 = {};

	/**
	 * Verify if two arrays of non primitive types with the "equals" function are equal.
	 * Compatible with multiaddr, peer-id and others.
	 *
	 * @param {Array<*>} a
	 * @param {Array<*>} b
	 * @returns {boolean}
	 */
	function arrayEquals$1 (a, b) {
	  return a.length === b.length && b.sort() && a.sort().every((item, index) => b[index].equals(item))
	}

	var arrayEquals_1 = arrayEquals$1;

	/*eslint-disable*/

	var $protobuf$4 = minimal;

	// Common aliases
	var $Reader$5 = $protobuf$4.Reader, $Writer$5 = $protobuf$4.Writer, $util$5 = $protobuf$4.util;

	// Exported root namespace
	var $root$5 = $protobuf$4.roots["libp2p-peer-record"] || ($protobuf$4.roots["libp2p-peer-record"] = {});

	$root$5.PeerRecord = (function() {

	    /**
	     * Properties of a PeerRecord.
	     * @exports IPeerRecord
	     * @interface IPeerRecord
	     * @property {Uint8Array|null} [peerId] PeerRecord peerId
	     * @property {number|null} [seq] PeerRecord seq
	     * @property {Array.<PeerRecord.IAddressInfo>|null} [addresses] PeerRecord addresses
	     */

	    /**
	     * Constructs a new PeerRecord.
	     * @exports PeerRecord
	     * @classdesc Represents a PeerRecord.
	     * @implements IPeerRecord
	     * @constructor
	     * @param {IPeerRecord=} [p] Properties to set
	     */
	    function PeerRecord(p) {
	        this.addresses = [];
	        if (p)
	            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                if (p[ks[i]] != null)
	                    this[ks[i]] = p[ks[i]];
	    }

	    /**
	     * PeerRecord peerId.
	     * @member {Uint8Array} peerId
	     * @memberof PeerRecord
	     * @instance
	     */
	    PeerRecord.prototype.peerId = $util$5.newBuffer([]);

	    /**
	     * PeerRecord seq.
	     * @member {number} seq
	     * @memberof PeerRecord
	     * @instance
	     */
	    PeerRecord.prototype.seq = $util$5.Long ? $util$5.Long.fromBits(0,0,true) : 0;

	    /**
	     * PeerRecord addresses.
	     * @member {Array.<PeerRecord.IAddressInfo>} addresses
	     * @memberof PeerRecord
	     * @instance
	     */
	    PeerRecord.prototype.addresses = $util$5.emptyArray;

	    /**
	     * Encodes the specified PeerRecord message. Does not implicitly {@link PeerRecord.verify|verify} messages.
	     * @function encode
	     * @memberof PeerRecord
	     * @static
	     * @param {IPeerRecord} m PeerRecord message or plain object to encode
	     * @param {$protobuf.Writer} [w] Writer to encode to
	     * @returns {$protobuf.Writer} Writer
	     */
	    PeerRecord.encode = function encode(m, w) {
	        if (!w)
	            w = $Writer$5.create();
	        if (m.peerId != null && Object.hasOwnProperty.call(m, "peerId"))
	            w.uint32(10).bytes(m.peerId);
	        if (m.seq != null && Object.hasOwnProperty.call(m, "seq"))
	            w.uint32(16).uint64(m.seq);
	        if (m.addresses != null && m.addresses.length) {
	            for (var i = 0; i < m.addresses.length; ++i)
	                $root$5.PeerRecord.AddressInfo.encode(m.addresses[i], w.uint32(26).fork()).ldelim();
	        }
	        return w;
	    };

	    /**
	     * Decodes a PeerRecord message from the specified reader or buffer.
	     * @function decode
	     * @memberof PeerRecord
	     * @static
	     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	     * @param {number} [l] Message length if known beforehand
	     * @returns {PeerRecord} PeerRecord
	     * @throws {Error} If the payload is not a reader or valid buffer
	     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	     */
	    PeerRecord.decode = function decode(r, l) {
	        if (!(r instanceof $Reader$5))
	            r = $Reader$5.create(r);
	        var c = l === undefined ? r.len : r.pos + l, m = new $root$5.PeerRecord();
	        while (r.pos < c) {
	            var t = r.uint32();
	            switch (t >>> 3) {
	            case 1:
	                m.peerId = r.bytes();
	                break;
	            case 2:
	                m.seq = r.uint64();
	                break;
	            case 3:
	                if (!(m.addresses && m.addresses.length))
	                    m.addresses = [];
	                m.addresses.push($root$5.PeerRecord.AddressInfo.decode(r, r.uint32()));
	                break;
	            default:
	                r.skipType(t & 7);
	                break;
	            }
	        }
	        return m;
	    };

	    /**
	     * Creates a PeerRecord message from a plain object. Also converts values to their respective internal types.
	     * @function fromObject
	     * @memberof PeerRecord
	     * @static
	     * @param {Object.<string,*>} d Plain object
	     * @returns {PeerRecord} PeerRecord
	     */
	    PeerRecord.fromObject = function fromObject(d) {
	        if (d instanceof $root$5.PeerRecord)
	            return d;
	        var m = new $root$5.PeerRecord();
	        if (d.peerId != null) {
	            if (typeof d.peerId === "string")
	                $util$5.base64.decode(d.peerId, m.peerId = $util$5.newBuffer($util$5.base64.length(d.peerId)), 0);
	            else if (d.peerId.length)
	                m.peerId = d.peerId;
	        }
	        if (d.seq != null) {
	            if ($util$5.Long)
	                (m.seq = $util$5.Long.fromValue(d.seq)).unsigned = true;
	            else if (typeof d.seq === "string")
	                m.seq = parseInt(d.seq, 10);
	            else if (typeof d.seq === "number")
	                m.seq = d.seq;
	            else if (typeof d.seq === "object")
	                m.seq = new $util$5.LongBits(d.seq.low >>> 0, d.seq.high >>> 0).toNumber(true);
	        }
	        if (d.addresses) {
	            if (!Array.isArray(d.addresses))
	                throw TypeError(".PeerRecord.addresses: array expected");
	            m.addresses = [];
	            for (var i = 0; i < d.addresses.length; ++i) {
	                if (typeof d.addresses[i] !== "object")
	                    throw TypeError(".PeerRecord.addresses: object expected");
	                m.addresses[i] = $root$5.PeerRecord.AddressInfo.fromObject(d.addresses[i]);
	            }
	        }
	        return m;
	    };

	    /**
	     * Creates a plain object from a PeerRecord message. Also converts values to other types if specified.
	     * @function toObject
	     * @memberof PeerRecord
	     * @static
	     * @param {PeerRecord} m PeerRecord
	     * @param {$protobuf.IConversionOptions} [o] Conversion options
	     * @returns {Object.<string,*>} Plain object
	     */
	    PeerRecord.toObject = function toObject(m, o) {
	        if (!o)
	            o = {};
	        var d = {};
	        if (o.arrays || o.defaults) {
	            d.addresses = [];
	        }
	        if (o.defaults) {
	            if (o.bytes === String)
	                d.peerId = "";
	            else {
	                d.peerId = [];
	                if (o.bytes !== Array)
	                    d.peerId = $util$5.newBuffer(d.peerId);
	            }
	            if ($util$5.Long) {
	                var n = new $util$5.Long(0, 0, true);
	                d.seq = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;
	            } else
	                d.seq = o.longs === String ? "0" : 0;
	        }
	        if (m.peerId != null && m.hasOwnProperty("peerId")) {
	            d.peerId = o.bytes === String ? $util$5.base64.encode(m.peerId, 0, m.peerId.length) : o.bytes === Array ? Array.prototype.slice.call(m.peerId) : m.peerId;
	        }
	        if (m.seq != null && m.hasOwnProperty("seq")) {
	            if (typeof m.seq === "number")
	                d.seq = o.longs === String ? String(m.seq) : m.seq;
	            else
	                d.seq = o.longs === String ? $util$5.Long.prototype.toString.call(m.seq) : o.longs === Number ? new $util$5.LongBits(m.seq.low >>> 0, m.seq.high >>> 0).toNumber(true) : m.seq;
	        }
	        if (m.addresses && m.addresses.length) {
	            d.addresses = [];
	            for (var j = 0; j < m.addresses.length; ++j) {
	                d.addresses[j] = $root$5.PeerRecord.AddressInfo.toObject(m.addresses[j], o);
	            }
	        }
	        return d;
	    };

	    /**
	     * Converts this PeerRecord to JSON.
	     * @function toJSON
	     * @memberof PeerRecord
	     * @instance
	     * @returns {Object.<string,*>} JSON object
	     */
	    PeerRecord.prototype.toJSON = function toJSON() {
	        return this.constructor.toObject(this, $protobuf$4.util.toJSONOptions);
	    };

	    PeerRecord.AddressInfo = (function() {

	        /**
	         * Properties of an AddressInfo.
	         * @memberof PeerRecord
	         * @interface IAddressInfo
	         * @property {Uint8Array|null} [multiaddr] AddressInfo multiaddr
	         */

	        /**
	         * Constructs a new AddressInfo.
	         * @memberof PeerRecord
	         * @classdesc Represents an AddressInfo.
	         * @implements IAddressInfo
	         * @constructor
	         * @param {PeerRecord.IAddressInfo=} [p] Properties to set
	         */
	        function AddressInfo(p) {
	            if (p)
	                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                    if (p[ks[i]] != null)
	                        this[ks[i]] = p[ks[i]];
	        }

	        /**
	         * AddressInfo multiaddr.
	         * @member {Uint8Array} multiaddr
	         * @memberof PeerRecord.AddressInfo
	         * @instance
	         */
	        AddressInfo.prototype.multiaddr = $util$5.newBuffer([]);

	        /**
	         * Encodes the specified AddressInfo message. Does not implicitly {@link PeerRecord.AddressInfo.verify|verify} messages.
	         * @function encode
	         * @memberof PeerRecord.AddressInfo
	         * @static
	         * @param {PeerRecord.IAddressInfo} m AddressInfo message or plain object to encode
	         * @param {$protobuf.Writer} [w] Writer to encode to
	         * @returns {$protobuf.Writer} Writer
	         */
	        AddressInfo.encode = function encode(m, w) {
	            if (!w)
	                w = $Writer$5.create();
	            if (m.multiaddr != null && Object.hasOwnProperty.call(m, "multiaddr"))
	                w.uint32(10).bytes(m.multiaddr);
	            return w;
	        };

	        /**
	         * Decodes an AddressInfo message from the specified reader or buffer.
	         * @function decode
	         * @memberof PeerRecord.AddressInfo
	         * @static
	         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	         * @param {number} [l] Message length if known beforehand
	         * @returns {PeerRecord.AddressInfo} AddressInfo
	         * @throws {Error} If the payload is not a reader or valid buffer
	         * @throws {$protobuf.util.ProtocolError} If required fields are missing
	         */
	        AddressInfo.decode = function decode(r, l) {
	            if (!(r instanceof $Reader$5))
	                r = $Reader$5.create(r);
	            var c = l === undefined ? r.len : r.pos + l, m = new $root$5.PeerRecord.AddressInfo();
	            while (r.pos < c) {
	                var t = r.uint32();
	                switch (t >>> 3) {
	                case 1:
	                    m.multiaddr = r.bytes();
	                    break;
	                default:
	                    r.skipType(t & 7);
	                    break;
	                }
	            }
	            return m;
	        };

	        /**
	         * Creates an AddressInfo message from a plain object. Also converts values to their respective internal types.
	         * @function fromObject
	         * @memberof PeerRecord.AddressInfo
	         * @static
	         * @param {Object.<string,*>} d Plain object
	         * @returns {PeerRecord.AddressInfo} AddressInfo
	         */
	        AddressInfo.fromObject = function fromObject(d) {
	            if (d instanceof $root$5.PeerRecord.AddressInfo)
	                return d;
	            var m = new $root$5.PeerRecord.AddressInfo();
	            if (d.multiaddr != null) {
	                if (typeof d.multiaddr === "string")
	                    $util$5.base64.decode(d.multiaddr, m.multiaddr = $util$5.newBuffer($util$5.base64.length(d.multiaddr)), 0);
	                else if (d.multiaddr.length)
	                    m.multiaddr = d.multiaddr;
	            }
	            return m;
	        };

	        /**
	         * Creates a plain object from an AddressInfo message. Also converts values to other types if specified.
	         * @function toObject
	         * @memberof PeerRecord.AddressInfo
	         * @static
	         * @param {PeerRecord.AddressInfo} m AddressInfo
	         * @param {$protobuf.IConversionOptions} [o] Conversion options
	         * @returns {Object.<string,*>} Plain object
	         */
	        AddressInfo.toObject = function toObject(m, o) {
	            if (!o)
	                o = {};
	            var d = {};
	            if (o.defaults) {
	                if (o.bytes === String)
	                    d.multiaddr = "";
	                else {
	                    d.multiaddr = [];
	                    if (o.bytes !== Array)
	                        d.multiaddr = $util$5.newBuffer(d.multiaddr);
	                }
	            }
	            if (m.multiaddr != null && m.hasOwnProperty("multiaddr")) {
	                d.multiaddr = o.bytes === String ? $util$5.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;
	            }
	            return d;
	        };

	        /**
	         * Converts this AddressInfo to JSON.
	         * @function toJSON
	         * @memberof PeerRecord.AddressInfo
	         * @instance
	         * @returns {Object.<string,*>} JSON object
	         */
	        AddressInfo.prototype.toJSON = function toJSON() {
	            return this.constructor.toObject(this, $protobuf$4.util.toJSONOptions);
	        };

	        return AddressInfo;
	    })();

	    return PeerRecord;
	})();

	var peerRecord$1 = $root$5;

	// The domain string used for peer records contained in a Envelope.
	const domain = 'libp2p-peer-record';

	// The type hint used to identify peer records in a Envelope.
	// Defined in https://github.com/multiformats/multicodec/blob/master/table.csv
	// with name "libp2p-peer-record"
	const payloadType = Uint8Array.from([3, 1]);

	var consts = {
	  ENVELOPE_DOMAIN_PEER_RECORD: domain,
	  ENVELOPE_PAYLOAD_TYPE_PEER_RECORD: payloadType
	};

	const { Multiaddr: Multiaddr$c } = src$s;
	const PeerId$e = src$o.exports;
	const arrayEquals = arrayEquals_1;

	const { PeerRecord: Protobuf } = peerRecord$1;
	const {
	  ENVELOPE_DOMAIN_PEER_RECORD,
	  ENVELOPE_PAYLOAD_TYPE_PEER_RECORD
	} = consts;

	/**
	 * @typedef {import('../../peer-store/types').Address} Address
	 * @typedef {import('libp2p-interfaces/src/record/types').Record} Record
	 */

	/**
	 * @implements {Record}
	 */
	class PeerRecord$3 {
	  /**
	   * The PeerRecord is used for distributing peer routing records across the network.
	   * It contains the peer's reachable listen addresses.
	   *
	   * @class
	   * @param {Object} params
	   * @param {PeerId} params.peerId
	   * @param {Multiaddr[]} params.multiaddrs - addresses of the associated peer.
	   * @param {number} [params.seqNumber] - monotonically-increasing sequence counter that's used to order PeerRecords in time.
	   */
	  constructor ({ peerId, multiaddrs = [], seqNumber = Date.now() }) {
	    this.domain = ENVELOPE_DOMAIN_PEER_RECORD;
	    this.codec = ENVELOPE_PAYLOAD_TYPE_PEER_RECORD;

	    this.peerId = peerId;
	    this.multiaddrs = multiaddrs;
	    this.seqNumber = seqNumber;

	    // Cache
	    this._marshal = undefined;
	  }

	  /**
	   * Marshal a record to be used in an envelope.
	   *
	   * @returns {Uint8Array}
	   */
	  marshal () {
	    if (this._marshal) {
	      return this._marshal
	    }

	    this._marshal = Protobuf.encode({
	      peerId: this.peerId.toBytes(),
	      seq: this.seqNumber,
	      addresses: this.multiaddrs.map((m) => ({
	        multiaddr: m.bytes
	      }))
	    }).finish();

	    return this._marshal
	  }

	  /**
	   * Returns true if `this` record equals the `other`.
	   *
	   * @param {unknown} other
	   * @returns {boolean}
	   */
	  equals (other) {
	    if (!(other instanceof PeerRecord$3)) {
	      return false
	    }

	    // Validate PeerId
	    if (!this.peerId.equals(other.peerId)) {
	      return false
	    }

	    // Validate seqNumber
	    if (this.seqNumber !== other.seqNumber) {
	      return false
	    }

	    // Validate multiaddrs
	    if (!arrayEquals(this.multiaddrs, other.multiaddrs)) {
	      return false
	    }

	    return true
	  }
	}

	/**
	 * Unmarshal Peer Record Protobuf.
	 *
	 * @param {Uint8Array} buf - marshaled peer record.
	 * @returns {PeerRecord}
	 */
	PeerRecord$3.createFromProtobuf = (buf) => {
	  const peerRecord = Protobuf.decode(buf);

	  const peerId = PeerId$e.createFromBytes(peerRecord.peerId);
	  const multiaddrs = (peerRecord.addresses || []).map((a) => new Multiaddr$c(a.multiaddr));
	  const seqNumber = Number(peerRecord.seq);

	  return new PeerRecord$3({ peerId, multiaddrs, seqNumber })
	};

	PeerRecord$3.DOMAIN = ENVELOPE_DOMAIN_PEER_RECORD;

	var peerRecord = PeerRecord$3;

	const Envelope$2 = envelope;
	const PeerRecord$2 = peerRecord;

	/**
	 * @typedef {import('../')} Libp2p
	 */

	/**
	 * Create (or update if existing) self peer record and store it in the AddressBook.
	 *
	 * @param {Libp2p} libp2p
	 * @returns {Promise<void>}
	 */
	async function updateSelfPeerRecord$2 (libp2p) {
	  const peerRecord = new PeerRecord$2({
	    peerId: libp2p.peerId,
	    multiaddrs: libp2p.multiaddrs
	  });
	  const envelope = await Envelope$2.seal(peerRecord, libp2p.peerId);
	  await libp2p.peerStore.addressBook.consumePeerRecord(envelope);
	}

	utils$2.updateSelfPeerRecord = updateSelfPeerRecord$2;

	const debug$s = browser$a.exports;
	const log$s = Object.assign(debug$s('libp2p:transports'), {
	  error: debug$s('libp2p:transports:err')
	});

	const pSettle = pSettle$1;
	const { codes: codes$f } = errors$3;
	const errCode$b = errCode$q;

	const { updateSelfPeerRecord: updateSelfPeerRecord$1 } = utils$2;

	/**
	 * @typedef {import('multiaddr').Multiaddr} Multiaddr
	 * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection
	 * @typedef {import('libp2p-interfaces/src/transport/types').TransportFactory<any, any>} TransportFactory
	 * @typedef {import('libp2p-interfaces/src/transport/types').Transport<any, any>} Transport
	 *
	 * @typedef {Object} TransportManagerProperties
	 * @property {import('./')} libp2p
	 * @property {import('./upgrader')} upgrader
	 *
	 * @typedef {Object} TransportManagerOptions
	 * @property {number} [faultTolerance = FAULT_TOLERANCE.FATAL_ALL] - Address listen error tolerance.
	 */

	class TransportManager$1 {
	  /**
	   * @class
	   * @param {TransportManagerProperties & TransportManagerOptions} options
	   */
	  constructor ({ libp2p, upgrader, faultTolerance = FAULT_TOLERANCE.FATAL_ALL }) {
	    this.libp2p = libp2p;
	    this.upgrader = upgrader;
	    /** @type {Map<string, Transport>} */
	    this._transports = new Map();
	    this._listeners = new Map();
	    this._listenerOptions = new Map();
	    this.faultTolerance = faultTolerance;
	  }

	  /**
	   * Adds a `Transport` to the manager
	   *
	   * @param {string} key
	   * @param {TransportFactory} Transport
	   * @param {*} transportOptions - Additional options to pass to the transport
	   * @returns {void}
	   */
	  add (key, Transport, transportOptions = {}) {
	    log$s('adding %s', key);
	    if (!key) {
	      throw errCode$b(new Error(`Transport must have a valid key, was given '${key}'`), codes$f.ERR_INVALID_KEY)
	    }
	    if (this._transports.has(key)) {
	      throw errCode$b(new Error('There is already a transport with this key'), codes$f.ERR_DUPLICATE_TRANSPORT)
	    }

	    const transport = new Transport({
	      ...transportOptions,
	      libp2p: this.libp2p,
	      upgrader: this.upgrader
	    });

	    this._transports.set(key, transport);
	    this._listenerOptions.set(key, transportOptions.listenerOptions || {});
	    if (!this._listeners.has(key)) {
	      this._listeners.set(key, []);
	    }
	  }

	  /**
	   * Stops all listeners
	   *
	   * @async
	   */
	  async close () {
	    const tasks = [];
	    for (const [key, listeners] of this._listeners) {
	      log$s('closing listeners for %s', key);
	      while (listeners.length) {
	        const listener = listeners.pop();
	        listener.removeAllListeners('listening');
	        listener.removeAllListeners('close');
	        tasks.push(listener.close());
	      }
	    }

	    await Promise.all(tasks);
	    log$s('all listeners closed');
	    for (const key of this._listeners.keys()) {
	      this._listeners.set(key, []);
	    }
	  }

	  /**
	   * Dials the given Multiaddr over it's supported transport
	   *
	   * @param {Multiaddr} ma
	   * @param {*} options
	   * @returns {Promise<Connection>}
	   */
	  async dial (ma, options) {
	    const transport = this.transportForMultiaddr(ma);
	    if (!transport) {
	      throw errCode$b(new Error(`No transport available for address ${String(ma)}`), codes$f.ERR_TRANSPORT_UNAVAILABLE)
	    }

	    try {
	      return await transport.dial(ma, options)
	    } catch (/** @type {any} */ err) {
	      if (!err.code) err.code = codes$f.ERR_TRANSPORT_DIAL_FAILED;
	      throw err
	    }
	  }

	  /**
	   * Returns all Multiaddr's the listeners are using
	   *
	   * @returns {Multiaddr[]}
	   */
	  getAddrs () {
	    /** @type {Multiaddr[]} */
	    let addrs = [];
	    for (const listeners of this._listeners.values()) {
	      for (const listener of listeners) {
	        addrs = [...addrs, ...listener.getAddrs()];
	      }
	    }
	    return addrs
	  }

	  /**
	   * Returns all the transports instances.
	   *
	   * @returns {IterableIterator<Transport>}
	   */
	  getTransports () {
	    return this._transports.values()
	  }

	  /**
	   * Finds a transport that matches the given Multiaddr
	   *
	   * @param {Multiaddr} ma
	   * @returns {Transport|null}
	   */
	  transportForMultiaddr (ma) {
	    for (const transport of this._transports.values()) {
	      const addrs = transport.filter([ma]);
	      if (addrs.length) return transport
	    }
	    return null
	  }

	  /**
	   * Starts listeners for each listen Multiaddr.
	   *
	   * @async
	   * @param {Multiaddr[]} addrs - addresses to attempt to listen on
	   */
	  async listen (addrs) {
	    if (!addrs || addrs.length === 0) {
	      log$s('no addresses were provided for listening, this node is dial only');
	      return
	    }

	    const couldNotListen = [];
	    for (const [key, transport] of this._transports.entries()) {
	      const supportedAddrs = transport.filter(addrs);
	      const tasks = [];

	      // For each supported multiaddr, create a listener
	      for (const addr of supportedAddrs) {
	        log$s('creating listener for %s on %s', key, addr);
	        const listener = transport.createListener(this._listenerOptions.get(key));
	        this._listeners.get(key).push(listener);

	        // Track listen/close events
	        listener.on('listening', () => updateSelfPeerRecord$1(this.libp2p));
	        listener.on('close', () => updateSelfPeerRecord$1(this.libp2p));

	        // We need to attempt to listen on everything
	        tasks.push(listener.listen(addr));
	      }

	      // Keep track of transports we had no addresses for
	      if (tasks.length === 0) {
	        couldNotListen.push(key);
	        continue
	      }

	      const results = await pSettle(tasks);
	      // If we are listening on at least 1 address, succeed.
	      // TODO: we should look at adding a retry (`p-retry`) here to better support
	      // listening on remote addresses as they may be offline. We could then potentially
	      // just wait for any (`p-any`) listener to succeed on each transport before returning
	      const isListening = results.find(r => r.isFulfilled === true);
	      if (!isListening && this.faultTolerance !== FAULT_TOLERANCE.NO_FATAL) {
	        throw errCode$b(new Error(`Transport (${key}) could not listen on any available address`), codes$f.ERR_NO_VALID_ADDRESSES)
	      }
	    }

	    // If no transports were able to listen, throw an error. This likely
	    // means we were given addresses we do not have transports for
	    if (couldNotListen.length === this._transports.size) {
	      const message = `no valid addresses were provided for transports [${couldNotListen}]`;
	      if (this.faultTolerance === FAULT_TOLERANCE.FATAL_ALL) {
	        throw errCode$b(new Error(message), codes$f.ERR_NO_VALID_ADDRESSES)
	      }
	      log$s(`libp2p in dial mode only: ${message}`);
	    }
	  }

	  /**
	   * Removes the given transport from the manager.
	   * If a transport has any running listeners, they will be closed.
	   *
	   * @async
	   * @param {string} key
	   */
	  async remove (key) {
	    log$s('removing %s', key);
	    if (this._listeners.has(key)) {
	      // Close any running listeners
	      for (const listener of this._listeners.get(key)) {
	        listener.removeAllListeners('listening');
	        listener.removeAllListeners('close');
	        await listener.close();
	      }
	    }

	    this._transports.delete(key);
	    this._listeners.delete(key);
	  }

	  /**
	   * Removes all transports from the manager.
	   * If any listeners are running, they will be closed.
	   *
	   * @async
	   */
	  async removeAll () {
	    const tasks = [];
	    for (const key of this._transports.keys()) {
	      tasks.push(this.remove(key));
	    }

	    await Promise.all(tasks);
	  }
	}

	/**
	 * Enum Transport Manager Fault Tolerance values.
	 * FATAL_ALL should be used for failing in any listen circumstance.
	 * NO_FATAL should be used for not failing when not listening.
	 *
	 * @readonly
	 * @enum {number}
	 */
	const FAULT_TOLERANCE = {
	  FATAL_ALL: 0,
	  NO_FATAL: 1
	};

	TransportManager$1.FaultTolerance = FAULT_TOLERANCE;

	var transportManager = TransportManager$1;

	const mergeOptions$7 = mergeOptions$k;
	// @ts-ignore no types in multiaddr path
	const { dnsaddrResolver } = resolvers;

	const Constants = constants$4;
	const { AGENT_VERSION } = consts$1;
	const RelayConstants = constants$3;

	const { publicAddressesFirst: publicAddressesFirst$1 } = addressSort;
	const { FaultTolerance } = transportManager;

	/**
	 * @typedef {import('multiaddr').Multiaddr} Multiaddr
	 * @typedef {import('./types').ConnectionGater} ConnectionGater
	 * @typedef {import('.').Libp2pOptions} Libp2pOptions
	 * @typedef {import('.').constructorOptions} constructorOptions
	 */

	const DefaultConfig = {
	  addresses: {
	    listen: [],
	    announce: [],
	    noAnnounce: [],
	    announceFilter: (/** @type {Multiaddr[]} */ multiaddrs) => multiaddrs
	  },
	  connectionManager: {
	    minConnections: 25
	  },
	  connectionGater: /** @type {ConnectionGater} */ {},
	  transportManager: {
	    faultTolerance: FaultTolerance.FATAL_ALL
	  },
	  dialer: {
	    maxParallelDials: Constants.MAX_PARALLEL_DIALS,
	    maxDialsPerPeer: Constants.MAX_PER_PEER_DIALS,
	    dialTimeout: Constants.DIAL_TIMEOUT,
	    resolvers: {
	      dnsaddr: dnsaddrResolver
	    },
	    addressSorter: publicAddressesFirst$1
	  },
	  host: {
	    agentVersion: AGENT_VERSION
	  },
	  metrics: {
	    enabled: false
	  },
	  peerStore: {
	    persistence: false,
	    threshold: 5
	  },
	  peerRouting: {
	    refreshManager: {
	      enabled: true,
	      interval: 6e5,
	      bootDelay: 10e3
	    }
	  },
	  config: {
	    protocolPrefix: 'ipfs',
	    dht: {
	      enabled: false,
	      kBucketSize: 20
	    },
	    nat: {
	      enabled: true,
	      ttl: 7200,
	      keepAlive: true,
	      gateway: null,
	      externalIp: null,
	      pmp: {
	        enabled: false
	      }
	    },
	    peerDiscovery: {
	      autoDial: true
	    },
	    pubsub: {
	      enabled: true
	    },
	    relay: {
	      enabled: true,
	      advertise: {
	        bootDelay: RelayConstants.ADVERTISE_BOOT_DELAY,
	        enabled: false,
	        ttl: RelayConstants.ADVERTISE_TTL
	      },
	      hop: {
	        enabled: false,
	        active: false
	      },
	      autoRelay: {
	        enabled: false,
	        maxListeners: 2
	      }
	    },
	    transport: {}
	  }
	};

	/**
	 * @param {Libp2pOptions} opts
	 * @returns {DefaultConfig & Libp2pOptions & constructorOptions}
	 */
	config.validate = (opts) => {
	  /** @type {DefaultConfig & Libp2pOptions & constructorOptions} */
	  const resultingOptions = mergeOptions$7(DefaultConfig, opts);

	  if (resultingOptions.modules.transport.length < 1) throw new Error("'options.modules.transport' must contain at least 1 transport")

	  return resultingOptions
	};

	const { EventEmitter: EventEmitter$7 } = require$$1$5;
	const { Multiaddr: Multiaddr$b } = src$s;
	const PeerId$d = src$o.exports;

	/**
	 * @typedef {Object} AddressManagerOptions
	 * @property {string[]} [listen = []] - list of multiaddrs string representation to listen.
	 * @property {string[]} [announce = []] - list of multiaddrs string representation to announce.
	 */

	/**
	 * @fires AddressManager#change:addresses Emitted when a addresses change.
	 */
	class AddressManager$1 extends EventEmitter$7 {
	  /**
	   * Responsible for managing the peer addresses.
	   * Peers can specify their listen and announce addresses.
	   * The listen addresses will be used by the libp2p transports to listen for new connections,
	   * while the announce addresses will be used for the peer addresses' to other peers in the network.
	   *
	   * @class
	   * @param {PeerId} peerId - The Peer ID of the node
	   * @param {object} [options]
	   * @param {Array<string>} [options.listen = []] - list of multiaddrs string representation to listen.
	   * @param {Array<string>} [options.announce = []] - list of multiaddrs string representation to announce.
	   */
	  constructor (peerId, { listen = [], announce = [] } = {}) {
	    super();

	    this.peerId = peerId;
	    this.listen = new Set(listen.map(ma => ma.toString()));
	    this.announce = new Set(announce.map(ma => ma.toString()));
	    this.observed = new Set();
	  }

	  /**
	   * Get peer listen multiaddrs.
	   *
	   * @returns {Multiaddr[]}
	   */
	  getListenAddrs () {
	    return Array.from(this.listen).map((a) => new Multiaddr$b(a))
	  }

	  /**
	   * Get peer announcing multiaddrs.
	   *
	   * @returns {Multiaddr[]}
	   */
	  getAnnounceAddrs () {
	    return Array.from(this.announce).map((a) => new Multiaddr$b(a))
	  }

	  /**
	   * Get observed multiaddrs.
	   *
	   * @returns {Array<Multiaddr>}
	   */
	  getObservedAddrs () {
	    return Array.from(this.observed).map((a) => new Multiaddr$b(a))
	  }

	  /**
	   * Add peer observed addresses
	   *
	   * @param {string | Multiaddr} addr
	   */
	  addObservedAddr (addr) {
	    let ma = new Multiaddr$b(addr);
	    const remotePeer = ma.getPeerId();

	    // strip our peer id if it has been passed
	    if (remotePeer) {
	      const remotePeerId = PeerId$d.createFromB58String(remotePeer);

	      // use same encoding for comparison
	      if (remotePeerId.equals(this.peerId)) {
	        ma = ma.decapsulate(new Multiaddr$b(`/p2p/${this.peerId}`));
	      }
	    }

	    const addrString = ma.toString();

	    // do not trigger the change:addresses event if we already know about this address
	    if (this.observed.has(addrString)) {
	      return
	    }

	    this.observed.add(addrString);
	    this.emit('change:addresses');
	  }
	}

	var addressManager = AddressManager$1;

	const { EventEmitter: EventEmitter$6 } = require$$1$5;

	const debug$r = browser$a.exports('latency-monitor:VisibilityChangeEmitter');

	/**
	 * Listen to page visibility change events (i.e. when the page is focused / blurred) by an event emitter.
	 *
	 * Warning: This does not work on all browsers, but should work on all modern browsers
	 *
	 * @example
	 *
	 *     const myVisibilityEmitter = new VisibilityChangeEmitter();
	 *
	 *     myVisibilityEmitter.on('visibilityChange', (pageInFocus) => {
	 *        if ( pageInFocus ){
	 *            // Page is in focus
	 *            console.log('In focus');
	 *        }
	 *        else {
	 *            // Page is blurred
	 *            console.log('Out of focus');
	 *        }
	 *     });
	 *     // To access the visibility state directly, call:
	 *     console.log('Am I focused now? ' + myVisibilityEmitter.isVisible());
	 */
	class VisibilityChangeEmitter$1 extends EventEmitter$6 {
	  /**
	   * Creates a VisibilityChangeEmitter
	   *
	   * @class
	   */
	  constructor () {
	    super();
	    if (typeof document === 'undefined') {
	      debug$r('This is not a browser, no "document" found. Stopping.');
	      return
	    }
	    this._initializeVisibilityVarNames();
	    this._addVisibilityChangeListener();
	  }

	  /**
	   * document.hidden and document.visibilityChange are the two variables we need to check for;
	   * Since these variables are named differently in different browsers, this function sets
	   * the appropriate name based on the browser being used. Once executed, tha actual names of
	   * document.hidden and document.visibilityChange are found in this._hidden and this._visibilityChange
	   * respectively
	   *
	   * @private
	   */
	  _initializeVisibilityVarNames () {
	    let hidden;
	    let visibilityChange;
	    if (typeof document.hidden !== 'undefined') { // Opera 12.10 and Firefox 18 and later support
	      hidden = 'hidden';
	      visibilityChange = 'visibilitychange';
	    } else if (typeof document.mozHidden !== 'undefined') {
	      hidden = 'mozHidden';
	      visibilityChange = 'mozvisibilitychange';
	    } else if (typeof document.msHidden !== 'undefined') {
	      hidden = 'msHidden';
	      visibilityChange = 'msvisibilitychange';
	    } else if (typeof document.webkitHidden !== 'undefined') {
	      hidden = 'webkitHidden';
	      visibilityChange = 'webkitvisibilitychange';
	    }
	    this._hidden = hidden;
	    this._visibilityChange = visibilityChange;
	  }

	  /**
	   * Adds an event listener on the document that listens to changes in document.visibilityChange
	   * (or whatever name by which the visibilityChange variable is known in the browser)
	   *
	   * @private
	   */
	  _addVisibilityChangeListener () {
	    if (typeof document.addEventListener === 'undefined' ||
	            typeof document[this._hidden] === 'undefined') {
	      debug$r('Checking page visibility requires a browser that supports the Page Visibility API.');
	    } else {
	      // Handle page visibility change
	      document.addEventListener(this._visibilityChange, this._handleVisibilityChange.bind(this), false);
	    }
	  }

	  /**
	   * The function returns ```true``` if the page is visible or ```false``` if the page is not visible and
	   * ```undefined``` if the page visibility API is not supported by the browser.
	   *
	   * @returns {boolean | void} whether the page is now visible or not (undefined is unknown)
	   */
	  isVisible () {
	    if (this._hidden === undefined || document[this._hidden] === undefined) {
	      return undefined
	    }

	    return !document[this._hidden]
	  }

	  /**
	   * The function that is called when document.visibilityChange has changed
	   * It emits an event called visibilityChange and sends the value of document.hidden as a
	   * parameter
	   *
	   * @private
	   */
	  _handleVisibilityChange () {
	    const visible = !document[this._hidden];
	    debug$r(visible ? 'Page Visible' : 'Page Hidden');
	    // Emit the event
	    this.emit('visibilityChange', visible);
	  }
	}

	var visibilityChangeEmitter = VisibilityChangeEmitter$1;

	/**
	 * This code is based on `latency-monitor` (https://github.com/mlucool/latency-monitor) by `mlucool` (https://github.com/mlucool), available under Apache License 2.0 (https://github.com/mlucool/latency-monitor/blob/master/LICENSE)
	 */

	const { EventEmitter: EventEmitter$5 } = require$$1$5;
	const VisibilityChangeEmitter = visibilityChangeEmitter;
	const debug$q = browser$a.exports('latency-monitor:LatencyMonitor');

	/**
	 * @typedef {Object} SummaryObject
	 * @property {number} events How many events were called
	 * @property {number} minMS What was the min time for a cb to be called
	 * @property {number} maxMS What was the max time for a cb to be called
	 * @property {number} avgMs What was the average time for a cb to be called
	 * @property {number} lengthMs How long this interval was in ms
	 *
	 * @typedef {Object} LatencyMonitorOptions
	 * @property {number} [latencyCheckIntervalMs=500] - How often to add a latency check event (ms)
	 * @property {number} [dataEmitIntervalMs=5000] - How often to summarize latency check events. null or 0 disables event firing
	 * @property {Function} [asyncTestFn] - What cb-style async function to use
	 * @property {number} [latencyRandomPercentage=5] - What percent (+/-) of latencyCheckIntervalMs should we randomly use? This helps avoid alignment to other events.
	 */

	/**
	 * A class to monitor latency of any async function which works in a browser or node. This works by periodically calling
	 * the asyncTestFn and timing how long it takes the callback to be called. It can also periodically emit stats about this.
	 * This can be disabled and stats can be pulled via setting dataEmitIntervalMs = 0.
	 *
	 * @extends {EventEmitter}
	 *
	 * The default implementation is an event loop latency monitor. This works by firing periodic events into the event loop
	 * and timing how long it takes to get back.
	 *
	 * @example
	 * const monitor = new LatencyMonitor();
	 * monitor.on('data', (summary) => console.log('Event Loop Latency: %O', summary));
	 *
	 * @example
	 * const monitor = new LatencyMonitor({latencyCheckIntervalMs: 1000, dataEmitIntervalMs: 60000, asyncTestFn:ping});
	 * monitor.on('data', (summary) => console.log('Ping Pong Latency: %O', summary));
	 */
	class LatencyMonitor$1 extends EventEmitter$5 {
	  /**
	   * @class
	   * @param {LatencyMonitorOptions} [options]
	   */
	  constructor ({ latencyCheckIntervalMs, dataEmitIntervalMs, asyncTestFn, latencyRandomPercentage } = {}) {
	    super();
	    const that = this;

	    // 0 isn't valid here, so its ok to use ||
	    that.latencyCheckIntervalMs = latencyCheckIntervalMs || 500; // 0.5s
	    that.latencyRandomPercentage = latencyRandomPercentage || 10;
	    that._latecyCheckMultiply = 2 * (that.latencyRandomPercentage / 100.0) * that.latencyCheckIntervalMs;
	    that._latecyCheckSubtract = that._latecyCheckMultiply / 2;

	    that.dataEmitIntervalMs = (dataEmitIntervalMs === null || dataEmitIntervalMs === 0)
	      ? undefined
	      : dataEmitIntervalMs || 5 * 1000; // 5s
	    debug$q('latencyCheckIntervalMs: %s dataEmitIntervalMs: %s',
	      that.latencyCheckIntervalMs, that.dataEmitIntervalMs);
	    if (that.dataEmitIntervalMs) {
	      debug$q('Expecting ~%s events per summary', that.latencyCheckIntervalMs / that.dataEmitIntervalMs);
	    } else {
	      debug$q('Not emitting summaries');
	    }

	    that.asyncTestFn = asyncTestFn; // If there is no asyncFn, we measure latency
	  }

	  start () {
	    // If process: use high resolution timer
	    if (globalThis.process && globalThis.process.hrtime) { // eslint-disable-line no-undef
	      debug$q('Using process.hrtime for timing');
	      this.now = globalThis.process.hrtime; // eslint-disable-line no-undef
	      this.getDeltaMS = (startTime) => {
	        const hrtime = this.now(startTime);
	        return (hrtime[0] * 1000) + (hrtime[1] / 1000000)
	      };
	      // Let's try for a timer that only monotonically increases
	    } else if (typeof window !== 'undefined' && window.performance && window.performance.now) {
	      debug$q('Using performance.now for timing');
	      this.now = window.performance.now.bind(window.performance);
	      this.getDeltaMS = (startTime) => Math.round(this.now() - startTime);
	    } else {
	      debug$q('Using Date.now for timing');
	      this.now = Date.now;
	      this.getDeltaMS = (startTime) => this.now() - startTime;
	    }

	    this._latencyData = this._initLatencyData();

	    // We check for isBrowser because of browsers set max rates of timeouts when a page is hidden,
	    // so we fall back to another library
	    // See: http://stackoverflow.com/questions/6032429/chrome-timeouts-interval-suspended-in-background-tabs
	    if (isBrowser$1()) {
	      this._visibilityChangeEmitter = new VisibilityChangeEmitter();

	      this._visibilityChangeEmitter.on('visibilityChange', (pageInFocus) => {
	        if (pageInFocus) {
	          this._startTimers();
	        } else {
	          this._emitSummary();
	          this._stopTimers();
	        }
	      });
	    }

	    if (!this._visibilityChangeEmitter || this._visibilityChangeEmitter.isVisible()) {
	      this._startTimers();
	    }
	  }

	  stop () {
	    this._stopTimers();
	  }

	  /**
	   * Start internal timers
	   *
	   * @private
	   */
	  _startTimers () {
	    // Timer already started, ignore this
	    if (this._checkLatencyID) {
	      return
	    }
	    this._checkLatency();
	    if (this.dataEmitIntervalMs) {
	      this._emitIntervalID = setInterval(() => this._emitSummary(), this.dataEmitIntervalMs);
	      if (typeof this._emitIntervalID.unref === 'function') {
	        this._emitIntervalID.unref(); // Doesn't block exit
	      }
	    }
	  }

	  /**
	   * Stop internal timers
	   *
	   * @private
	   */
	  _stopTimers () {
	    if (this._checkLatencyID) {
	      clearTimeout(this._checkLatencyID);
	      this._checkLatencyID = undefined;
	    }
	    if (this._emitIntervalID) {
	      clearInterval(this._emitIntervalID);
	      this._emitIntervalID = undefined;
	    }
	  }

	  /**
	   * Emit summary only if there were events. It might not have any events if it was forced via a page hidden/show
	   *
	   * @private
	   */
	  _emitSummary () {
	    const summary = this.getSummary();
	    if (summary.events > 0) {
	      this.emit('data', summary);
	    }
	  }

	  /**
	   * Calling this function will end the collection period. If a timing event was already fired and somewhere in the queue,
	   * it will not count for this time period
	   *
	   * @returns {SummaryObject}
	   */
	  getSummary () {
	    // We might want to adjust for the number of expected events
	    // Example: first 1 event it comes back, then such a long blocker that the next emit check comes
	    // Then this fires - looks like no latency!!
	    const latency = {
	      events: this._latencyData.events,
	      minMs: this._latencyData.minMs,
	      maxMs: this._latencyData.maxMs,
	      avgMs: this._latencyData.events
	        ? this._latencyData.totalMs / this._latencyData.events
	        : Number.POSITIVE_INFINITY,
	      lengthMs: this.getDeltaMS(this._latencyData.startTime)
	    };
	    this._latencyData = this._initLatencyData(); // Clear

	    debug$q('Summary: %O', latency);
	    return latency
	  }

	  /**
	   * Randomly calls an async fn every roughly latencyCheckIntervalMs (plus some randomness). If no async fn is found,
	   * it will simply report on event loop latency.
	   *
	   * @private
	   */
	  _checkLatency () {
	    const that = this;
	    // Randomness is needed to avoid alignment by accident to regular things in the event loop
	    const randomness = (Math.random() * that._latecyCheckMultiply) - that._latecyCheckSubtract;

	    // We use this to ensure that in case some overlap somehow, we don't take the wrong startTime/offset
	    const localData = {
	      deltaOffset: Math.ceil(that.latencyCheckIntervalMs + randomness),
	      startTime: that.now()
	    };

	    const cb = () => {
	      // We are already stopped, ignore this datapoint
	      if (!this._checkLatencyID) {
	        return
	      }
	      const deltaMS = that.getDeltaMS(localData.startTime) - localData.deltaOffset;
	      that._checkLatency(); // Start again ASAP

	      // Add the data point. If this gets complex, refactor it
	      that._latencyData.events++;
	      that._latencyData.minMs = Math.min(that._latencyData.minMs, deltaMS);
	      that._latencyData.maxMs = Math.max(that._latencyData.maxMs, deltaMS);
	      that._latencyData.totalMs += deltaMS;
	      debug$q('MS: %s Data: %O', deltaMS, that._latencyData);
	    };
	    debug$q('localData: %O', localData);

	    this._checkLatencyID = setTimeout(() => {
	      // This gets rid of including event loop
	      if (that.asyncTestFn) {
	        // Clear timing related things
	        localData.deltaOffset = 0;
	        localData.startTime = that.now();
	        that.asyncTestFn(cb);
	      } else {
	        // setTimeout is not more accurate than 1ms, so this will ensure positive numbers. Add 1 to emitted data to remove.
	        // This is not the best, but for now it'll be just fine. This isn't meant to be sub ms accurate.
	        localData.deltaOffset -= 1;
	        // If there is no function to test, we mean check latency which is a special case that is really cb => cb()
	        // We avoid that for the few extra function all overheads. Also, we want to keep the timers different
	        cb();
	      }
	    }, localData.deltaOffset);

	    if (typeof this._checkLatencyID.unref === 'function') {
	      this._checkLatencyID.unref(); // Doesn't block exit
	    }
	  }

	  _initLatencyData () {
	    return {
	      startTime: this.now(),
	      minMs: Number.POSITIVE_INFINITY,
	      maxMs: Number.NEGATIVE_INFINITY,
	      events: 0,
	      totalMs: 0
	    }
	  }
	}

	function isBrowser$1 () {
	  return typeof window !== 'undefined'
	}

	var latencyMonitor = LatencyMonitor$1;

	/**
	 * @template K
	 * @template V
	 */
	class TrackedMap extends Map {
	  /**
	   * @param {object} options
	   * @param {string} options.system
	   * @param {string} options.component
	   * @param {string} options.metric
	   * @param {import('.')} options.metrics
	   */
	  constructor (options) {
	    super();

	    const { system, component, metric, metrics } = options;
	    this._system = system;
	    this._component = component;
	    this._metric = metric;
	    this._metrics = metrics;

	    this._metrics.updateComponentMetric({
	      system: this._system,
	      component: this._component,
	      metric: this._metric,
	      value: this.size
	    });
	  }

	  /**
	   * @param {K} key
	   * @param {V} value
	   */
	  set (key, value) {
	    super.set(key, value);
	    this._metrics.updateComponentMetric({
	      system: this._system,
	      component: this._component,
	      metric: this._metric,
	      value: this.size
	    });
	    return this
	  }

	  /**
	   * @param {K} key
	   */
	  delete (key) {
	    const deleted = super.delete(key);
	    this._metrics.updateComponentMetric({
	      system: this._system,
	      component: this._component,
	      metric: this._metric,
	      value: this.size
	    });
	    return deleted
	  }

	  clear () {
	    super.clear();

	    this._metrics.updateComponentMetric({
	      system: this._system,
	      component: this._component,
	      metric: this._metric,
	      value: this.size
	    });
	  }
	}

	/**
	 * @template K
	 * @template V
	 * @param {object} options
	 * @param {string} [options.system]
	 * @param {string} options.component
	 * @param {string} options.metric
	 * @param {import('.')} [options.metrics]
	 * @returns {Map<K, V>}
	 */
	var trackedMap$2 = ({ system = 'libp2p', component, metric, metrics }) => {
	  /** @type {Map<K, V>} */
	  let map;

	  if (metrics) {
	    map = new TrackedMap({ system, component, metric, metrics });
	  } else {
	    map = new Map();
	  }

	  return map
	};

	const debug$p = browser$a.exports;
	const log$r = Object.assign(debug$p('libp2p:connection-manager'), {
	  error: debug$p('libp2p:connection-manager:err')
	});

	const errcode$9 = errCode$q;
	const mergeOptions$6 = mergeOptions$k;
	const LatencyMonitor = latencyMonitor;
	// @ts-ignore retimer does not have types
	const retimer$2 = retimer_1;

	const { EventEmitter: EventEmitter$4 } = require$$1$5;
	const trackedMap$1 = trackedMap$2;
	const PeerId$c = src$o.exports;

	const {
	  codes: { ERR_INVALID_PARAMETERS: ERR_INVALID_PARAMETERS$2 }
	} = errors$3;

	const defaultOptions$5 = {
	  maxConnections: Infinity,
	  minConnections: 0,
	  maxData: Infinity,
	  maxSentData: Infinity,
	  maxReceivedData: Infinity,
	  maxEventLoopDelay: Infinity,
	  pollInterval: 2000,
	  autoDialInterval: 10000,
	  movingAverageInterval: 60000,
	  defaultPeerValue: 1
	};

	const METRICS_COMPONENT$1 = 'connection-manager';
	const METRICS_PEER_CONNECTIONS = 'peer-connections';
	const METRICS_PEER_VALUES = 'peer-values';

	/**
	 * @typedef {import('../')} Libp2p
	 * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection
	 */

	/**
	 * @typedef {Object} ConnectionManagerOptions
	 * @property {number} [maxConnections = Infinity] - The maximum number of connections allowed.
	 * @property {number} [minConnections = 0] - The minimum number of connections to avoid pruning.
	 * @property {number} [maxData = Infinity] - The max data (in and out), per average interval to allow.
	 * @property {number} [maxSentData = Infinity] - The max outgoing data, per average interval to allow.
	 * @property {number} [maxReceivedData = Infinity] - The max incoming data, per average interval to allow.
	 * @property {number} [maxEventLoopDelay = Infinity] - The upper limit the event loop can take to run.
	 * @property {number} [pollInterval = 2000] - How often, in milliseconds, metrics and latency should be checked.
	 * @property {number} [movingAverageInterval = 60000] - How often, in milliseconds, to compute averages.
	 * @property {number} [defaultPeerValue = 1] - The value of the peer.
	 * @property {boolean} [autoDial = true] - Should preemptively guarantee connections are above the low watermark.
	 * @property {number} [autoDialInterval = 10000] - How often, in milliseconds, it should preemptively guarantee connections are above the low watermark.
	 */

	/**
	 *
	 * @fires ConnectionManager#peer:connect Emitted when a new peer is connected.
	 * @fires ConnectionManager#peer:disconnect Emitted when a peer is disconnected.
	 */
	class ConnectionManager$1 extends EventEmitter$4 {
	  /**
	   * Responsible for managing known connections.
	   *
	   * @class
	   * @param {Libp2p} libp2p
	   * @param {ConnectionManagerOptions} options
	   */
	  constructor (libp2p, options = {}) {
	    super();

	    this._libp2p = libp2p;
	    this._peerId = libp2p.peerId.toB58String();

	    this._options = mergeOptions$6.call({ ignoreUndefined: true }, defaultOptions$5, options);
	    if (this._options.maxConnections < this._options.minConnections) {
	      throw errcode$9(new Error('Connection Manager maxConnections must be greater than minConnections'), ERR_INVALID_PARAMETERS$2)
	    }

	    log$r('options: %j', this._options);

	    /**
	     * Map of peer identifiers to their peer value for pruning connections.
	     *
	     * @type {Map<string, number>}
	     */
	    this._peerValues = trackedMap$1({
	      component: METRICS_COMPONENT$1,
	      metric: METRICS_PEER_VALUES,
	      metrics: this._libp2p.metrics
	    });

	    /**
	     * Map of connections per peer
	     *
	     * @type {Map<string, Connection[]>}
	     */
	    this.connections = trackedMap$1({
	      component: METRICS_COMPONENT$1,
	      metric: METRICS_PEER_CONNECTIONS,
	      metrics: this._libp2p.metrics
	    });

	    this._started = false;
	    this._timer = null;
	    this._checkMetrics = this._checkMetrics.bind(this);

	    this._latencyMonitor = new LatencyMonitor({
	      latencyCheckIntervalMs: this._options.pollInterval,
	      dataEmitIntervalMs: this._options.pollInterval
	    });

	    // This emitter gets listened to a lot
	    this.setMaxListeners(Infinity);
	  }

	  /**
	   * Get current number of open connections.
	   */
	  get size () {
	    return Array.from(this.connections.values())
	      .reduce((accumulator, value) => accumulator + value.length, 0)
	  }

	  /**
	   * Starts the Connection Manager. If Metrics are not enabled on libp2p
	   * only event loop and connection limits will be monitored.
	   */
	  start () {
	    if (this._libp2p.metrics) {
	      this._timer = this._timer || retimer$2(this._checkMetrics, this._options.pollInterval);
	    }

	    // latency monitor
	    this._latencyMonitor.start();
	    this._onLatencyMeasure = this._onLatencyMeasure.bind(this);
	    this._latencyMonitor.on('data', this._onLatencyMeasure);

	    this._started = true;
	    log$r('started');
	  }

	  /**
	   * Stops the Connection Manager
	   *
	   * @async
	   */
	  async stop () {
	    this._timer && this._timer.clear();

	    this._latencyMonitor.removeListener('data', this._onLatencyMeasure);
	    this._latencyMonitor.stop();

	    this._started = false;
	    await this._close();
	    log$r('stopped');
	  }

	  /**
	   * Cleans up the connections
	   *
	   * @async
	   */
	  async _close () {
	    // Close all connections we're tracking
	    const tasks = [];
	    for (const connectionList of this.connections.values()) {
	      for (const connection of connectionList) {
	        tasks.push(connection.close());
	      }
	    }

	    await Promise.all(tasks);
	    this.connections.clear();
	  }

	  /**
	   * Sets the value of the given peer. Peers with lower values
	   * will be disconnected first.
	   *
	   * @param {PeerId} peerId
	   * @param {number} value - A number between 0 and 1
	   * @returns {void}
	   */
	  setPeerValue (peerId, value) {
	    if (value < 0 || value > 1) {
	      throw new Error('value should be a number between 0 and 1')
	    }
	    this._peerValues.set(peerId.toB58String(), value);
	  }

	  /**
	   * Checks the libp2p metrics to determine if any values have exceeded
	   * the configured maximums.
	   *
	   * @private
	   */
	  async _checkMetrics () {
	    if (this._libp2p.metrics) {
	      try {
	        const movingAverages = this._libp2p.metrics.global.movingAverages;
	        // @ts-ignore moving averages object types
	        const received = movingAverages.dataReceived[this._options.movingAverageInterval].movingAverage();
	        await this._checkMaxLimit('maxReceivedData', received);
	        // @ts-ignore moving averages object types
	        const sent = movingAverages.dataSent[this._options.movingAverageInterval].movingAverage();
	        await this._checkMaxLimit('maxSentData', sent);
	        const total = received + sent;
	        await this._checkMaxLimit('maxData', total);
	        log$r('metrics update', total);
	      } finally {
	        this._timer = retimer$2(this._checkMetrics, this._options.pollInterval);
	      }
	    }
	  }

	  /**
	   * Tracks the incoming connection and check the connection limit
	   *
	   * @param {Connection} connection
	   */
	  async onConnect (connection) {
	    if (!this._started) {
	      // This can happen when we are in the process of shutting down the node
	      await connection.close();
	      return
	    }

	    const peerId = connection.remotePeer;
	    const peerIdStr = peerId.toB58String();
	    const storedConn = this.connections.get(peerIdStr);

	    this.emit('peer:connect', connection);

	    if (storedConn) {
	      storedConn.push(connection);
	    } else {
	      this.connections.set(peerIdStr, [connection]);
	    }

	    await this._libp2p.peerStore.keyBook.set(peerId, peerId.pubKey);

	    if (!this._peerValues.has(peerIdStr)) {
	      this._peerValues.set(peerIdStr, this._options.defaultPeerValue);
	    }

	    await this._checkMaxLimit('maxConnections', this.size);
	  }

	  /**
	   * Removes the connection from tracking
	   *
	   * @param {Connection} connection
	   * @returns {void}
	   */
	  onDisconnect (connection) {
	    if (!this._started) {
	      // This can happen when we are in the process of shutting down the node
	      return
	    }

	    const peerId = connection.remotePeer.toB58String();
	    let storedConn = this.connections.get(peerId);

	    if (storedConn && storedConn.length > 1) {
	      storedConn = storedConn.filter((conn) => conn.id !== connection.id);
	      this.connections.set(peerId, storedConn);
	    } else if (storedConn) {
	      this.connections.delete(peerId);
	      this._peerValues.delete(connection.remotePeer.toB58String());
	      this.emit('peer:disconnect', connection);

	      this._libp2p.metrics && this._libp2p.metrics.onPeerDisconnected(connection.remotePeer);
	    }
	  }

	  /**
	   * Get a connection with a peer.
	   *
	   * @param {PeerId} peerId
	   * @returns {Connection|null}
	   */
	  get (peerId) {
	    const connections = this.getAll(peerId);
	    if (connections.length) {
	      return connections[0]
	    }
	    return null
	  }

	  /**
	   * Get all open connections with a peer.
	   *
	   * @param {PeerId} peerId
	   * @returns {Connection[]}
	   */
	  getAll (peerId) {
	    if (!PeerId$c.isPeerId(peerId)) {
	      throw errcode$9(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS$2)
	    }

	    const id = peerId.toB58String();
	    const connections = this.connections.get(id);

	    // Return all open connections
	    if (connections) {
	      return connections.filter(connection => connection.stat.status === 'open')
	    }
	    return []
	  }

	  /**
	   * If the event loop is slow, maybe close a connection
	   *
	   * @private
	   * @param {*} summary - The LatencyMonitor summary
	   */
	  _onLatencyMeasure (summary) {
	    this._checkMaxLimit('maxEventLoopDelay', summary.avgMs)
	      .catch(err => {
	        log$r.error(err);
	      });
	  }

	  /**
	   * If the `value` of `name` has exceeded its limit, maybe close a connection
	   *
	   * @private
	   * @param {string} name - The name of the field to check limits for
	   * @param {number} value - The current value of the field
	   */
	  async _checkMaxLimit (name, value) {
	    const limit = this._options[name];
	    log$r('checking limit of %s. current value: %d of %d', name, value, limit);
	    if (value > limit) {
	      log$r('%s: limit exceeded: %s, %d', this._peerId, name, value);
	      await this._maybeDisconnectOne();
	    }
	  }

	  /**
	   * If we have more connections than our maximum, close a connection
	   * to the lowest valued peer.
	   *
	   * @private
	   */
	  async _maybeDisconnectOne () {
	    if (this._options.minConnections < this.connections.size) {
	      const peerValues = Array.from(new Map([...this._peerValues.entries()].sort((a, b) => a[1] - b[1])));
	      log$r('%s: sorted peer values: %j', this._peerId, peerValues);
	      const disconnectPeer = peerValues[0];
	      if (disconnectPeer) {
	        const peerId = disconnectPeer[0];
	        log$r('%s: lowest value peer is %s', this._peerId, peerId);
	        log$r('%s: closing a connection to %j', this._peerId, peerId);
	        for (const connections of this.connections.values()) {
	          if (connections[0].remotePeer.toB58String() === peerId) {
	            connections[0].close().catch(err => {
	              log$r.error(err);
	            });
	            // TODO: should not need to invoke this manually
	            this.onDisconnect(connections[0]);
	            break
	          }
	        }
	      }
	    }
	  }
	}

	var connectionManager = ConnectionManager$1;

	const debug$o = browser$a.exports;
	const mergeOptions$5 = mergeOptions$k;
	// @ts-ignore retimer does not have types
	const retimer$1 = retimer_1;
	const all$3 = itAll;
	const { pipe: pipe$9 } = itPipe.exports;
	const filter$2 = itFilter;
	const sort = itSort;

	const log$q = Object.assign(debug$o('libp2p:connection-manager:auto-dialler'), {
	  error: debug$o('libp2p:connection-manager:auto-dialler:err')
	});

	const defaultOptions$4 = {
	  enabled: true,
	  minConnections: 0,
	  autoDialInterval: 10000
	};

	/**
	 * @typedef {import('../index')} Libp2p
	 * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection
	 */

	/**
	 * @typedef {Object} AutoDiallerOptions
	 * @property {boolean} [enabled = true] - Should preemptively guarantee connections are above the low watermark
	 * @property {number} [minConnections = 0] - The minimum number of connections to avoid pruning
	 * @property {number} [autoDialInterval = 10000] - How often, in milliseconds, it should preemptively guarantee connections are above the low watermark
	 */

	class AutoDialler$1 {
	  /**
	   * Proactively tries to connect to known peers stored in the PeerStore.
	   * It will keep the number of connections below the upper limit and sort
	   * the peers to connect based on wether we know their keys and protocols.
	   *
	   * @class
	   * @param {Libp2p} libp2p
	   * @param {AutoDiallerOptions} options
	   */
	  constructor (libp2p, options = {}) {
	    this._options = mergeOptions$5.call({ ignoreUndefined: true }, defaultOptions$4, options);
	    this._libp2p = libp2p;
	    this._running = false;
	    this._autoDialTimeout = null;
	    this._autoDial = this._autoDial.bind(this);

	    log$q('options: %j', this._options);
	  }

	  /**
	   * Starts the auto dialer
	   */
	  async start () {
	    if (!this._options.enabled) {
	      log$q('not enabled');
	      return
	    }

	    this._running = true;
	    this._autoDial().catch(err => {
	      log$q.error('could start autodial', err);
	    });
	    log$q('started');
	  }

	  /**
	   * Stops the auto dialler
	   */
	  async stop () {
	    if (!this._options.enabled) {
	      log$q('not enabled');
	      return
	    }

	    this._running = false;
	    this._autoDialTimeout && this._autoDialTimeout.clear();
	    log$q('stopped');
	  }

	  async _autoDial () {
	    const minConnections = this._options.minConnections;

	    // Already has enough connections
	    if (this._libp2p.connections.size >= minConnections) {
	      this._autoDialTimeout = retimer$1(this._autoDial, this._options.autoDialInterval);
	      return
	    }

	    // Sort peers on whether we know protocols of public keys for them
	    // TODO: assuming the `peerStore.getPeers()` order is stable this will mean
	    // we keep trying to connect to the same peers?
	    const peers = await pipe$9(
	      this._libp2p.peerStore.getPeers(),
	      (source) => filter$2(source, (peer) => !peer.id.equals(this._libp2p.peerId)),
	      (source) => sort(source, (a, b) => {
	        if (b.protocols && b.protocols.length && (!a.protocols || !a.protocols.length)) {
	          return 1
	        } else if (b.id.pubKey && !a.id.pubKey) {
	          return 1
	        }
	        return -1
	      }),
	      (source) => all$3(source)
	    );

	    for (let i = 0; this._running && i < peers.length && this._libp2p.connections.size < minConnections; i++) {
	      const peer = peers[i];

	      if (!this._libp2p.connectionManager.get(peer.id)) {
	        log$q('connecting to a peerStore stored peer %s', peer.id.toB58String());
	        try {
	          await this._libp2p.dialer.connectToPeer(peer.id);
	        } catch (/** @type {any} */ err) {
	          log$q.error('could not connect to peerStore stored peer', err);
	        }
	      }
	    }

	    // Connection Manager was stopped
	    if (!this._running) {
	      return
	    }

	    this._autoDialTimeout = retimer$1(this._autoDial, this._options.autoDialInterval);
	  }
	}

	var autoDialler = AutoDialler$1;

	/*eslint-disable*/

	var $protobuf$3 = minimal;

	// Common aliases
	var $Reader$4 = $protobuf$3.Reader, $Writer$4 = $protobuf$3.Writer, $util$4 = $protobuf$3.util;

	// Exported root namespace
	var $root$4 = $protobuf$3.roots["libp2p-circuit"] || ($protobuf$3.roots["libp2p-circuit"] = {});

	$root$4.CircuitRelay = (function() {

	    /**
	     * Properties of a CircuitRelay.
	     * @exports ICircuitRelay
	     * @interface ICircuitRelay
	     * @property {CircuitRelay.Type|null} [type] CircuitRelay type
	     * @property {CircuitRelay.IPeer|null} [srcPeer] CircuitRelay srcPeer
	     * @property {CircuitRelay.IPeer|null} [dstPeer] CircuitRelay dstPeer
	     * @property {CircuitRelay.Status|null} [code] CircuitRelay code
	     */

	    /**
	     * Constructs a new CircuitRelay.
	     * @exports CircuitRelay
	     * @classdesc Represents a CircuitRelay.
	     * @implements ICircuitRelay
	     * @constructor
	     * @param {ICircuitRelay=} [p] Properties to set
	     */
	    function CircuitRelay(p) {
	        if (p)
	            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                if (p[ks[i]] != null)
	                    this[ks[i]] = p[ks[i]];
	    }

	    /**
	     * CircuitRelay type.
	     * @member {CircuitRelay.Type} type
	     * @memberof CircuitRelay
	     * @instance
	     */
	    CircuitRelay.prototype.type = 1;

	    /**
	     * CircuitRelay srcPeer.
	     * @member {CircuitRelay.IPeer|null|undefined} srcPeer
	     * @memberof CircuitRelay
	     * @instance
	     */
	    CircuitRelay.prototype.srcPeer = null;

	    /**
	     * CircuitRelay dstPeer.
	     * @member {CircuitRelay.IPeer|null|undefined} dstPeer
	     * @memberof CircuitRelay
	     * @instance
	     */
	    CircuitRelay.prototype.dstPeer = null;

	    /**
	     * CircuitRelay code.
	     * @member {CircuitRelay.Status} code
	     * @memberof CircuitRelay
	     * @instance
	     */
	    CircuitRelay.prototype.code = 100;

	    /**
	     * Encodes the specified CircuitRelay message. Does not implicitly {@link CircuitRelay.verify|verify} messages.
	     * @function encode
	     * @memberof CircuitRelay
	     * @static
	     * @param {ICircuitRelay} m CircuitRelay message or plain object to encode
	     * @param {$protobuf.Writer} [w] Writer to encode to
	     * @returns {$protobuf.Writer} Writer
	     */
	    CircuitRelay.encode = function encode(m, w) {
	        if (!w)
	            w = $Writer$4.create();
	        if (m.type != null && Object.hasOwnProperty.call(m, "type"))
	            w.uint32(8).int32(m.type);
	        if (m.srcPeer != null && Object.hasOwnProperty.call(m, "srcPeer"))
	            $root$4.CircuitRelay.Peer.encode(m.srcPeer, w.uint32(18).fork()).ldelim();
	        if (m.dstPeer != null && Object.hasOwnProperty.call(m, "dstPeer"))
	            $root$4.CircuitRelay.Peer.encode(m.dstPeer, w.uint32(26).fork()).ldelim();
	        if (m.code != null && Object.hasOwnProperty.call(m, "code"))
	            w.uint32(32).int32(m.code);
	        return w;
	    };

	    /**
	     * Decodes a CircuitRelay message from the specified reader or buffer.
	     * @function decode
	     * @memberof CircuitRelay
	     * @static
	     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	     * @param {number} [l] Message length if known beforehand
	     * @returns {CircuitRelay} CircuitRelay
	     * @throws {Error} If the payload is not a reader or valid buffer
	     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	     */
	    CircuitRelay.decode = function decode(r, l) {
	        if (!(r instanceof $Reader$4))
	            r = $Reader$4.create(r);
	        var c = l === undefined ? r.len : r.pos + l, m = new $root$4.CircuitRelay();
	        while (r.pos < c) {
	            var t = r.uint32();
	            switch (t >>> 3) {
	            case 1:
	                m.type = r.int32();
	                break;
	            case 2:
	                m.srcPeer = $root$4.CircuitRelay.Peer.decode(r, r.uint32());
	                break;
	            case 3:
	                m.dstPeer = $root$4.CircuitRelay.Peer.decode(r, r.uint32());
	                break;
	            case 4:
	                m.code = r.int32();
	                break;
	            default:
	                r.skipType(t & 7);
	                break;
	            }
	        }
	        return m;
	    };

	    /**
	     * Creates a CircuitRelay message from a plain object. Also converts values to their respective internal types.
	     * @function fromObject
	     * @memberof CircuitRelay
	     * @static
	     * @param {Object.<string,*>} d Plain object
	     * @returns {CircuitRelay} CircuitRelay
	     */
	    CircuitRelay.fromObject = function fromObject(d) {
	        if (d instanceof $root$4.CircuitRelay)
	            return d;
	        var m = new $root$4.CircuitRelay();
	        switch (d.type) {
	        case "HOP":
	        case 1:
	            m.type = 1;
	            break;
	        case "STOP":
	        case 2:
	            m.type = 2;
	            break;
	        case "STATUS":
	        case 3:
	            m.type = 3;
	            break;
	        case "CAN_HOP":
	        case 4:
	            m.type = 4;
	            break;
	        }
	        if (d.srcPeer != null) {
	            if (typeof d.srcPeer !== "object")
	                throw TypeError(".CircuitRelay.srcPeer: object expected");
	            m.srcPeer = $root$4.CircuitRelay.Peer.fromObject(d.srcPeer);
	        }
	        if (d.dstPeer != null) {
	            if (typeof d.dstPeer !== "object")
	                throw TypeError(".CircuitRelay.dstPeer: object expected");
	            m.dstPeer = $root$4.CircuitRelay.Peer.fromObject(d.dstPeer);
	        }
	        switch (d.code) {
	        case "SUCCESS":
	        case 100:
	            m.code = 100;
	            break;
	        case "HOP_SRC_ADDR_TOO_LONG":
	        case 220:
	            m.code = 220;
	            break;
	        case "HOP_DST_ADDR_TOO_LONG":
	        case 221:
	            m.code = 221;
	            break;
	        case "HOP_SRC_MULTIADDR_INVALID":
	        case 250:
	            m.code = 250;
	            break;
	        case "HOP_DST_MULTIADDR_INVALID":
	        case 251:
	            m.code = 251;
	            break;
	        case "HOP_NO_CONN_TO_DST":
	        case 260:
	            m.code = 260;
	            break;
	        case "HOP_CANT_DIAL_DST":
	        case 261:
	            m.code = 261;
	            break;
	        case "HOP_CANT_OPEN_DST_STREAM":
	        case 262:
	            m.code = 262;
	            break;
	        case "HOP_CANT_SPEAK_RELAY":
	        case 270:
	            m.code = 270;
	            break;
	        case "HOP_CANT_RELAY_TO_SELF":
	        case 280:
	            m.code = 280;
	            break;
	        case "STOP_SRC_ADDR_TOO_LONG":
	        case 320:
	            m.code = 320;
	            break;
	        case "STOP_DST_ADDR_TOO_LONG":
	        case 321:
	            m.code = 321;
	            break;
	        case "STOP_SRC_MULTIADDR_INVALID":
	        case 350:
	            m.code = 350;
	            break;
	        case "STOP_DST_MULTIADDR_INVALID":
	        case 351:
	            m.code = 351;
	            break;
	        case "STOP_RELAY_REFUSED":
	        case 390:
	            m.code = 390;
	            break;
	        case "MALFORMED_MESSAGE":
	        case 400:
	            m.code = 400;
	            break;
	        }
	        return m;
	    };

	    /**
	     * Creates a plain object from a CircuitRelay message. Also converts values to other types if specified.
	     * @function toObject
	     * @memberof CircuitRelay
	     * @static
	     * @param {CircuitRelay} m CircuitRelay
	     * @param {$protobuf.IConversionOptions} [o] Conversion options
	     * @returns {Object.<string,*>} Plain object
	     */
	    CircuitRelay.toObject = function toObject(m, o) {
	        if (!o)
	            o = {};
	        var d = {};
	        if (o.defaults) {
	            d.type = o.enums === String ? "HOP" : 1;
	            d.srcPeer = null;
	            d.dstPeer = null;
	            d.code = o.enums === String ? "SUCCESS" : 100;
	        }
	        if (m.type != null && m.hasOwnProperty("type")) {
	            d.type = o.enums === String ? $root$4.CircuitRelay.Type[m.type] : m.type;
	        }
	        if (m.srcPeer != null && m.hasOwnProperty("srcPeer")) {
	            d.srcPeer = $root$4.CircuitRelay.Peer.toObject(m.srcPeer, o);
	        }
	        if (m.dstPeer != null && m.hasOwnProperty("dstPeer")) {
	            d.dstPeer = $root$4.CircuitRelay.Peer.toObject(m.dstPeer, o);
	        }
	        if (m.code != null && m.hasOwnProperty("code")) {
	            d.code = o.enums === String ? $root$4.CircuitRelay.Status[m.code] : m.code;
	        }
	        return d;
	    };

	    /**
	     * Converts this CircuitRelay to JSON.
	     * @function toJSON
	     * @memberof CircuitRelay
	     * @instance
	     * @returns {Object.<string,*>} JSON object
	     */
	    CircuitRelay.prototype.toJSON = function toJSON() {
	        return this.constructor.toObject(this, $protobuf$3.util.toJSONOptions);
	    };

	    /**
	     * Status enum.
	     * @name CircuitRelay.Status
	     * @enum {number}
	     * @property {number} SUCCESS=100 SUCCESS value
	     * @property {number} HOP_SRC_ADDR_TOO_LONG=220 HOP_SRC_ADDR_TOO_LONG value
	     * @property {number} HOP_DST_ADDR_TOO_LONG=221 HOP_DST_ADDR_TOO_LONG value
	     * @property {number} HOP_SRC_MULTIADDR_INVALID=250 HOP_SRC_MULTIADDR_INVALID value
	     * @property {number} HOP_DST_MULTIADDR_INVALID=251 HOP_DST_MULTIADDR_INVALID value
	     * @property {number} HOP_NO_CONN_TO_DST=260 HOP_NO_CONN_TO_DST value
	     * @property {number} HOP_CANT_DIAL_DST=261 HOP_CANT_DIAL_DST value
	     * @property {number} HOP_CANT_OPEN_DST_STREAM=262 HOP_CANT_OPEN_DST_STREAM value
	     * @property {number} HOP_CANT_SPEAK_RELAY=270 HOP_CANT_SPEAK_RELAY value
	     * @property {number} HOP_CANT_RELAY_TO_SELF=280 HOP_CANT_RELAY_TO_SELF value
	     * @property {number} STOP_SRC_ADDR_TOO_LONG=320 STOP_SRC_ADDR_TOO_LONG value
	     * @property {number} STOP_DST_ADDR_TOO_LONG=321 STOP_DST_ADDR_TOO_LONG value
	     * @property {number} STOP_SRC_MULTIADDR_INVALID=350 STOP_SRC_MULTIADDR_INVALID value
	     * @property {number} STOP_DST_MULTIADDR_INVALID=351 STOP_DST_MULTIADDR_INVALID value
	     * @property {number} STOP_RELAY_REFUSED=390 STOP_RELAY_REFUSED value
	     * @property {number} MALFORMED_MESSAGE=400 MALFORMED_MESSAGE value
	     */
	    CircuitRelay.Status = (function() {
	        var valuesById = {}, values = Object.create(valuesById);
	        values[valuesById[100] = "SUCCESS"] = 100;
	        values[valuesById[220] = "HOP_SRC_ADDR_TOO_LONG"] = 220;
	        values[valuesById[221] = "HOP_DST_ADDR_TOO_LONG"] = 221;
	        values[valuesById[250] = "HOP_SRC_MULTIADDR_INVALID"] = 250;
	        values[valuesById[251] = "HOP_DST_MULTIADDR_INVALID"] = 251;
	        values[valuesById[260] = "HOP_NO_CONN_TO_DST"] = 260;
	        values[valuesById[261] = "HOP_CANT_DIAL_DST"] = 261;
	        values[valuesById[262] = "HOP_CANT_OPEN_DST_STREAM"] = 262;
	        values[valuesById[270] = "HOP_CANT_SPEAK_RELAY"] = 270;
	        values[valuesById[280] = "HOP_CANT_RELAY_TO_SELF"] = 280;
	        values[valuesById[320] = "STOP_SRC_ADDR_TOO_LONG"] = 320;
	        values[valuesById[321] = "STOP_DST_ADDR_TOO_LONG"] = 321;
	        values[valuesById[350] = "STOP_SRC_MULTIADDR_INVALID"] = 350;
	        values[valuesById[351] = "STOP_DST_MULTIADDR_INVALID"] = 351;
	        values[valuesById[390] = "STOP_RELAY_REFUSED"] = 390;
	        values[valuesById[400] = "MALFORMED_MESSAGE"] = 400;
	        return values;
	    })();

	    /**
	     * Type enum.
	     * @name CircuitRelay.Type
	     * @enum {number}
	     * @property {number} HOP=1 HOP value
	     * @property {number} STOP=2 STOP value
	     * @property {number} STATUS=3 STATUS value
	     * @property {number} CAN_HOP=4 CAN_HOP value
	     */
	    CircuitRelay.Type = (function() {
	        var valuesById = {}, values = Object.create(valuesById);
	        values[valuesById[1] = "HOP"] = 1;
	        values[valuesById[2] = "STOP"] = 2;
	        values[valuesById[3] = "STATUS"] = 3;
	        values[valuesById[4] = "CAN_HOP"] = 4;
	        return values;
	    })();

	    CircuitRelay.Peer = (function() {

	        /**
	         * Properties of a Peer.
	         * @memberof CircuitRelay
	         * @interface IPeer
	         * @property {Uint8Array} id Peer id
	         * @property {Array.<Uint8Array>|null} [addrs] Peer addrs
	         */

	        /**
	         * Constructs a new Peer.
	         * @memberof CircuitRelay
	         * @classdesc Represents a Peer.
	         * @implements IPeer
	         * @constructor
	         * @param {CircuitRelay.IPeer=} [p] Properties to set
	         */
	        function Peer(p) {
	            this.addrs = [];
	            if (p)
	                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                    if (p[ks[i]] != null)
	                        this[ks[i]] = p[ks[i]];
	        }

	        /**
	         * Peer id.
	         * @member {Uint8Array} id
	         * @memberof CircuitRelay.Peer
	         * @instance
	         */
	        Peer.prototype.id = $util$4.newBuffer([]);

	        /**
	         * Peer addrs.
	         * @member {Array.<Uint8Array>} addrs
	         * @memberof CircuitRelay.Peer
	         * @instance
	         */
	        Peer.prototype.addrs = $util$4.emptyArray;

	        /**
	         * Encodes the specified Peer message. Does not implicitly {@link CircuitRelay.Peer.verify|verify} messages.
	         * @function encode
	         * @memberof CircuitRelay.Peer
	         * @static
	         * @param {CircuitRelay.IPeer} m Peer message or plain object to encode
	         * @param {$protobuf.Writer} [w] Writer to encode to
	         * @returns {$protobuf.Writer} Writer
	         */
	        Peer.encode = function encode(m, w) {
	            if (!w)
	                w = $Writer$4.create();
	            w.uint32(10).bytes(m.id);
	            if (m.addrs != null && m.addrs.length) {
	                for (var i = 0; i < m.addrs.length; ++i)
	                    w.uint32(18).bytes(m.addrs[i]);
	            }
	            return w;
	        };

	        /**
	         * Decodes a Peer message from the specified reader or buffer.
	         * @function decode
	         * @memberof CircuitRelay.Peer
	         * @static
	         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	         * @param {number} [l] Message length if known beforehand
	         * @returns {CircuitRelay.Peer} Peer
	         * @throws {Error} If the payload is not a reader or valid buffer
	         * @throws {$protobuf.util.ProtocolError} If required fields are missing
	         */
	        Peer.decode = function decode(r, l) {
	            if (!(r instanceof $Reader$4))
	                r = $Reader$4.create(r);
	            var c = l === undefined ? r.len : r.pos + l, m = new $root$4.CircuitRelay.Peer();
	            while (r.pos < c) {
	                var t = r.uint32();
	                switch (t >>> 3) {
	                case 1:
	                    m.id = r.bytes();
	                    break;
	                case 2:
	                    if (!(m.addrs && m.addrs.length))
	                        m.addrs = [];
	                    m.addrs.push(r.bytes());
	                    break;
	                default:
	                    r.skipType(t & 7);
	                    break;
	                }
	            }
	            if (!m.hasOwnProperty("id"))
	                throw $util$4.ProtocolError("missing required 'id'", { instance: m });
	            return m;
	        };

	        /**
	         * Creates a Peer message from a plain object. Also converts values to their respective internal types.
	         * @function fromObject
	         * @memberof CircuitRelay.Peer
	         * @static
	         * @param {Object.<string,*>} d Plain object
	         * @returns {CircuitRelay.Peer} Peer
	         */
	        Peer.fromObject = function fromObject(d) {
	            if (d instanceof $root$4.CircuitRelay.Peer)
	                return d;
	            var m = new $root$4.CircuitRelay.Peer();
	            if (d.id != null) {
	                if (typeof d.id === "string")
	                    $util$4.base64.decode(d.id, m.id = $util$4.newBuffer($util$4.base64.length(d.id)), 0);
	                else if (d.id.length)
	                    m.id = d.id;
	            }
	            if (d.addrs) {
	                if (!Array.isArray(d.addrs))
	                    throw TypeError(".CircuitRelay.Peer.addrs: array expected");
	                m.addrs = [];
	                for (var i = 0; i < d.addrs.length; ++i) {
	                    if (typeof d.addrs[i] === "string")
	                        $util$4.base64.decode(d.addrs[i], m.addrs[i] = $util$4.newBuffer($util$4.base64.length(d.addrs[i])), 0);
	                    else if (d.addrs[i].length)
	                        m.addrs[i] = d.addrs[i];
	                }
	            }
	            return m;
	        };

	        /**
	         * Creates a plain object from a Peer message. Also converts values to other types if specified.
	         * @function toObject
	         * @memberof CircuitRelay.Peer
	         * @static
	         * @param {CircuitRelay.Peer} m Peer
	         * @param {$protobuf.IConversionOptions} [o] Conversion options
	         * @returns {Object.<string,*>} Plain object
	         */
	        Peer.toObject = function toObject(m, o) {
	            if (!o)
	                o = {};
	            var d = {};
	            if (o.arrays || o.defaults) {
	                d.addrs = [];
	            }
	            if (o.defaults) {
	                if (o.bytes === String)
	                    d.id = "";
	                else {
	                    d.id = [];
	                    if (o.bytes !== Array)
	                        d.id = $util$4.newBuffer(d.id);
	                }
	            }
	            if (m.id != null && m.hasOwnProperty("id")) {
	                d.id = o.bytes === String ? $util$4.base64.encode(m.id, 0, m.id.length) : o.bytes === Array ? Array.prototype.slice.call(m.id) : m.id;
	            }
	            if (m.addrs && m.addrs.length) {
	                d.addrs = [];
	                for (var j = 0; j < m.addrs.length; ++j) {
	                    d.addrs[j] = o.bytes === String ? $util$4.base64.encode(m.addrs[j], 0, m.addrs[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.addrs[j]) : m.addrs[j];
	                }
	            }
	            return d;
	        };

	        /**
	         * Converts this Peer to JSON.
	         * @function toJSON
	         * @memberof CircuitRelay.Peer
	         * @instance
	         * @returns {Object.<string,*>} JSON object
	         */
	        Peer.prototype.toJSON = function toJSON() {
	            return this.constructor.toObject(this, $protobuf$3.util.toJSONOptions);
	        };

	        return Peer;
	    })();

	    return CircuitRelay;
	})();

	var protocol = $root$4;

	const { source: abortable } = abortableIterator.exports;
	const debug$n = browser$a.exports;
	const log$p = debug$n('libp2p:stream:converter');

	/**
	 * @typedef {import('multiaddr').Multiaddr} Multiaddr
	 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream
	 *
	 * @typedef {Object} Timeline
	 * @property {number} open - connection opening timestamp.
	 * @property {number} [upgraded] - connection upgraded timestamp.
	 * @property {number} [close]
	 */

	/**
	 * Convert a duplex iterable into a MultiaddrConnection.
	 * https://github.com/libp2p/interface-transport#multiaddrconnection
	 *
	 * @param {object} streamProperties
	 * @param {MuxedStream} streamProperties.stream
	 * @param {Multiaddr} streamProperties.remoteAddr
	 * @param {Multiaddr} streamProperties.localAddr
	 * @param {object} [options]
	 * @param {AbortSignal} [options.signal]
	 * @returns {import('libp2p-interfaces/src/transport/types').MultiaddrConnection}
	 */
	function streamToMaConnection ({ stream, remoteAddr, localAddr }, options = {}) {
	  const { sink, source } = stream;
	  const maConn = {
	    /**
	     * @param {Uint8Array} source
	     */
	    async sink (source) {
	      if (options.signal) {
	        // @ts-ignore ts infers source template will be a number
	        source = abortable(source, options.signal);
	      }

	      try {
	        await sink(source);
	      } catch (err) {
	        // If aborted we can safely ignore
	        if (err.type !== 'aborted') {
	          // If the source errored the socket will already have been destroyed by
	          // toIterable.duplex(). If the socket errored it will already be
	          // destroyed. There's nothing to do here except log the error & return.
	          log$p(err);
	        }
	      }
	      close();
	    },
	    source: options.signal ? abortable(source, options.signal) : source,
	    conn: stream,
	    localAddr,
	    remoteAddr,
	    /** @type {Timeline} */
	    timeline: { open: Date.now(), close: undefined },
	    close () {
	      sink(new Uint8Array(0));
	      return close()
	    }
	  };

	  function close () {
	    if (!maConn.timeline.close) {
	      maConn.timeline.close = Date.now();
	    }
	    return Promise.resolve()
	  }

	  return maConn
	}

	var streamToMaConn = streamToMaConnection;

	var multicodec$4 = {
	  relay: '/libp2p/circuit/relay/0.1.0'
	};

	const { EventEmitter: EventEmitter$3 } = require$$1$5;
	const { Multiaddr: Multiaddr$a } = src$s;

	/**
	 * @typedef {import('libp2p-interfaces/src/transport/types').Listener} Listener
	 */

	/**
	 * @param {import('../')} libp2p
	 * @returns {Listener} a transport listener
	 */
	var listener = (libp2p) => {
	  const listeningAddrs = new Map();

	  /**
	   * Add swarm handler and listen for incoming connections
	   *
	   * @param {Multiaddr} addr
	   * @returns {Promise<void>}
	   */
	  async function listen (addr) {
	    const addrString = String(addr).split('/p2p-circuit').find(a => a !== '');

	    const relayConn = await libp2p.dial(new Multiaddr$a(addrString));
	    const relayedAddr = relayConn.remoteAddr.encapsulate('/p2p-circuit');

	    listeningAddrs.set(relayConn.remotePeer.toB58String(), relayedAddr);
	    listener.emit('listening');
	  }

	  /**
	   * Get fixed up multiaddrs
	   *
	   * NOTE: This method will grab the peers multiaddrs and expand them such that:
	   *
	   * a) If it's an existing /p2p-circuit address for a specific relay i.e.
	   * `/ip4/0.0.0.0/tcp/0/ipfs/QmRelay/p2p-circuit` this method will expand the
	   * address to `/ip4/0.0.0.0/tcp/0/ipfs/QmRelay/p2p-circuit/ipfs/QmPeer` where
	   * `QmPeer` is this peers id
	   * b) If it's not a /p2p-circuit address, it will encapsulate the address as a /p2p-circuit
	   * addr, such when dialing over a relay with this address, it will create the circuit using
	   * the encapsulated transport address. This is useful when for example, a peer should only
	   * be dialed over TCP rather than any other transport
	   *
	   * @returns {Multiaddr[]}
	   */
	  function getAddrs () {
	    const addrs = [];
	    for (const addr of listeningAddrs.values()) {
	      addrs.push(addr);
	    }
	    return addrs
	  }

	  /** @type Listener */
	  const listener = Object.assign(new EventEmitter$3(), {
	    close: () => Promise.resolve(),
	    listen,
	    getAddrs
	  });

	  // Remove listeningAddrs when a peer disconnects
	  libp2p.connectionManager.on('peer:disconnect', (connection) => {
	    const deleted = listeningAddrs.delete(connection.remotePeer.toB58String());

	    if (deleted) {
	      // Announce listen addresses change
	      listener.emit('close');
	    }
	  });

	  return listener
	};

	const { Multiaddr: Multiaddr$9 } = src$s;
	const { CircuitRelay: CircuitRelay$1 } = protocol;

	/**
	 * @typedef {import('./stream-handler')} StreamHandler
	 * @typedef {import('../protocol').ICircuitRelay} ICircuitRelay
	 */

	/**
	 * Write a response
	 *
	 * @param {StreamHandler} streamHandler
	 * @param {import('../protocol').CircuitRelay.Status} status
	 */
	function writeResponse (streamHandler, status) {
	  streamHandler.write({
	    type: CircuitRelay$1.Type.STATUS,
	    code: status
	  });
	}

	/**
	 * Validate incomming HOP/STOP message
	 *
	 * @param {ICircuitRelay} msg - A CircuitRelay unencoded protobuf message
	 * @param {StreamHandler} streamHandler
	 */
	function validateAddrs$2 (msg, streamHandler) {
	  try {
	    if (msg.dstPeer && msg.dstPeer.addrs) {
	      msg.dstPeer.addrs.forEach((addr) => {
	        return new Multiaddr$9(addr)
	      });
	    }
	  } catch (/** @type {any} */ err) {
	    writeResponse(streamHandler, msg.type === CircuitRelay$1.Type.HOP
	      ? CircuitRelay$1.Status.HOP_DST_MULTIADDR_INVALID
	      : CircuitRelay$1.Status.STOP_DST_MULTIADDR_INVALID);
	    throw err
	  }

	  try {
	    if (msg.srcPeer && msg.srcPeer.addrs) {
	      msg.srcPeer.addrs.forEach((addr) => {
	        return new Multiaddr$9(addr)
	      });
	    }
	  } catch (/** @type {any} */ err) {
	    writeResponse(streamHandler, msg.type === CircuitRelay$1.Type.HOP
	      ? CircuitRelay$1.Status.HOP_SRC_MULTIADDR_INVALID
	      : CircuitRelay$1.Status.STOP_SRC_MULTIADDR_INVALID);
	    throw err
	  }
	}

	var utils$1 = {
	  validateAddrs: validateAddrs$2
	};

	const debug$m = browser$a.exports;
	const log$o = Object.assign(debug$m('libp2p:circuit:stream-handler'), {
	  error: debug$m('libp2p:circuit:stream-handler:err')
	});

	const lp$3 = src$i;
	// @ts-ignore it-handshake does not export types
	const handshake$3 = src$a;
	const { CircuitRelay } = protocol;

	/**
	 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream
	 * @typedef {import('../protocol').ICircuitRelay} ICircuitRelay
	 */

	class StreamHandler$3 {
	  /**
	   * Create a stream handler for connection
	   *
	   * @class
	   * @param {object} options
	   * @param {MuxedStream} options.stream - A duplex iterable
	   * @param {number} [options.maxLength = 4096] - max bytes length of message
	   */
	  constructor ({ stream, maxLength = 4096 }) {
	    this.stream = stream;

	    this.shake = handshake$3(this.stream);
	    // @ts-ignore options are not optional
	    this.decoder = lp$3.decode.fromReader(this.shake.reader, { maxDataLength: maxLength });
	  }

	  /**
	   * Read and decode message
	   *
	   * @async
	   */
	  async read () {
	    const msg = await this.decoder.next();
	    if (msg.value) {
	      const value = CircuitRelay.decode(msg.value.slice());
	      log$o('read message type', value.type);
	      return value
	    }

	    log$o('read received no value, closing stream');
	    // End the stream, we didn't get data
	    this.close();
	  }

	  /**
	   * Encode and write array of buffers
	   *
	   * @param {ICircuitRelay} msg - An unencoded CircuitRelay protobuf message
	   * @returns {void}
	   */
	  write (msg) {
	    log$o('write message type %s', msg.type);
	    // @ts-ignore lp.encode expects type type 'Buffer | BufferList', not 'Uint8Array'
	    this.shake.write(lp$3.encode.single(CircuitRelay.encode(msg).finish()));
	  }

	  /**
	   * Return the handshake rest stream and invalidate handler
	   *
	   * @returns {*} A duplex iterable
	   */
	  rest () {
	    this.shake.rest();
	    return this.shake.stream
	  }

	  /**
	   * @param {ICircuitRelay} msg - An unencoded CircuitRelay protobuf message
	   */
	  end (msg) {
	    this.write(msg);
	    this.close();
	  }

	  /**
	   * Close the stream
	   *
	   * @returns {void}
	   */
	  close () {
	    log$o('closing the stream');
	    this.rest().sink([]);
	  }
	}

	var streamHandler = StreamHandler$3;

	var stop$1 = {};

	const debug$l = browser$a.exports;
	const log$n = Object.assign(debug$l('libp2p:circuit:stop'), {
	  error: debug$l('libp2p:circuit:stop:err')
	});

	const { CircuitRelay: CircuitPB$2 } = protocol;
	const multicodec$3 = multicodec$4;
	const StreamHandler$2 = streamHandler;
	const { validateAddrs: validateAddrs$1 } = utils$1;

	/**
	 * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection
	 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream
	 * @typedef {import('../protocol').ICircuitRelay} ICircuitRelay
	 */

	/**
	 * Handles incoming STOP requests
	 *
	 * @private
	 * @param {Object} options
	 * @param {Connection} options.connection
	 * @param {ICircuitRelay} options.request - The CircuitRelay protobuf request (unencoded)
	 * @param {StreamHandler} options.streamHandler
	 * @returns {Promise<MuxedStream>|void} Resolves a duplex iterable
	 */
	stop$1.handleStop = function handleStop ({
	  connection,
	  request,
	  streamHandler
	}) {
	  // Validate the STOP request has the required input
	  try {
	    validateAddrs$1(request, streamHandler);
	  } catch (/** @type {any} */ err) {
	    return log$n.error('invalid stop request via peer %s', connection.remotePeer.toB58String(), err)
	  }

	  // The request is valid
	  log$n('stop request is valid');
	  streamHandler.write({
	    type: CircuitPB$2.Type.STATUS,
	    code: CircuitPB$2.Status.SUCCESS
	  });
	  return streamHandler.rest()
	};

	/**
	 * Creates a STOP request
	 *
	 * @private
	 * @param {Object} options
	 * @param {Connection} options.connection
	 * @param {ICircuitRelay} options.request - The CircuitRelay protobuf request (unencoded)
	 * @returns {Promise<MuxedStream|void>} Resolves a duplex iterable
	 */
	stop$1.stop = async function stop ({
	  connection,
	  request
	}) {
	  const { stream } = await connection.newStream([multicodec$3.relay]);
	  log$n('starting stop request to %s', connection.remotePeer.toB58String());
	  const streamHandler = new StreamHandler$2({ stream });

	  streamHandler.write(request);
	  const response = await streamHandler.read();

	  if (!response) {
	    return streamHandler.close()
	  }

	  if (response.code === CircuitPB$2.Status.SUCCESS) {
	    log$n('stop request to %s was successful', connection.remotePeer.toB58String());
	    return streamHandler.rest()
	  }

	  log$n('stop request failed with code %d', response.code);
	  streamHandler.close();
	};

	const debug$k = browser$a.exports;
	const log$m = Object.assign(debug$k('libp2p:circuit:hop'), {
	  error: debug$k('libp2p:circuit:hop:err')
	});
	const errCode$a = errCode$q;

	const PeerId$b = src$o.exports;
	const { validateAddrs } = utils$1;
	const StreamHandler$1 = streamHandler;
	const { CircuitRelay: CircuitPB$1 } = protocol;
	const { pipe: pipe$8 } = itPipe.exports;
	const { codes: Errors } = errors$3;

	const { stop } = stop$1;

	const multicodec$2 = multicodec$4;

	/**
	 * @typedef {import('../protocol').ICircuitRelay} ICircuitRelay
	 * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection
	 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream
	 * @typedef {import('../transport')} Transport
	 */

	/**
	 * @typedef {Object} HopRequest
	 * @property {Connection} connection
	 * @property {ICircuitRelay} request
	 * @property {StreamHandler} streamHandler
	 * @property {Transport} circuit
	 */

	/**
	 * @param {HopRequest} options
	 * @returns {Promise<void>}
	 */
	async function handleHop$1 ({
	  connection,
	  request,
	  streamHandler,
	  circuit
	}) {
	  // Ensure hop is enabled
	  if (!circuit._options.hop.enabled) {
	    log$m('HOP request received but we are not acting as a relay');
	    return streamHandler.end({
	      type: CircuitPB$1.Type.STATUS,
	      code: CircuitPB$1.Status.HOP_CANT_SPEAK_RELAY
	    })
	  }

	  // Validate the HOP request has the required input
	  try {
	    validateAddrs(request, streamHandler);
	  } catch (/** @type {any} */ err) {
	    return log$m.error('invalid hop request via peer %s', connection.remotePeer.toB58String(), err)
	  }

	  if (!request.dstPeer) {
	    log$m('HOP request received but we do not receive a dstPeer');
	    return
	  }

	  // Get the connection to the destination (stop) peer
	  const destinationPeer = new PeerId$b(request.dstPeer.id);

	  const destinationConnection = circuit._connectionManager.get(destinationPeer);
	  if (!destinationConnection && !circuit._options.hop.active) {
	    log$m('HOP request received but we are not connected to the destination peer');
	    return streamHandler.end({
	      type: CircuitPB$1.Type.STATUS,
	      code: CircuitPB$1.Status.HOP_NO_CONN_TO_DST
	    })
	  }

	  // TODO: Handle being an active relay
	  if (!destinationConnection) {
	    return
	  }

	  // Handle the incoming HOP request by performing a STOP request
	  const stopRequest = {
	    type: CircuitPB$1.Type.STOP,
	    dstPeer: request.dstPeer,
	    srcPeer: request.srcPeer
	  };

	  let destinationStream;
	  try {
	    destinationStream = await stop({
	      connection: destinationConnection,
	      request: stopRequest
	    });
	  } catch (/** @type {any} */ err) {
	    return log$m.error(err)
	  }

	  log$m('hop request from %s is valid', connection.remotePeer.toB58String());
	  streamHandler.write({
	    type: CircuitPB$1.Type.STATUS,
	    code: CircuitPB$1.Status.SUCCESS
	  });
	  const sourceStream = streamHandler.rest();

	  // Short circuit the two streams to create the relayed connection
	  return pipe$8(
	    sourceStream,
	    destinationStream,
	    sourceStream
	  )
	}

	/**
	 * Performs a HOP request to a relay peer, to request a connection to another
	 * peer. A new, virtual, connection will be created between the two via the relay.
	 *
	 * @param {object} options
	 * @param {Connection} options.connection - Connection to the relay
	 * @param {ICircuitRelay} options.request
	 * @returns {Promise<MuxedStream>}
	 */
	async function hop$1 ({
	  connection,
	  request
	}) {
	  // Create a new stream to the relay
	  const { stream } = await connection.newStream([multicodec$2.relay]);
	  // Send the HOP request
	  const streamHandler = new StreamHandler$1({ stream });
	  streamHandler.write(request);

	  const response = await streamHandler.read();

	  if (!response) {
	    throw errCode$a(new Error('HOP request had no response'), Errors.ERR_HOP_REQUEST_FAILED)
	  }

	  if (response.code === CircuitPB$1.Status.SUCCESS) {
	    log$m('hop request was successful');
	    return streamHandler.rest()
	  }

	  log$m('hop request failed with code %d, closing stream', response.code);
	  streamHandler.close();
	  throw errCode$a(new Error(`HOP request failed with code ${response.code}`), Errors.ERR_HOP_REQUEST_FAILED)
	}

	/**
	 * Performs a CAN_HOP request to a relay peer, in order to understand its capabilities.
	 *
	 * @param {object} options
	 * @param {Connection} options.connection - Connection to the relay
	 * @returns {Promise<boolean>}
	 */
	async function canHop$1 ({
	  connection
	}) {
	  // Create a new stream to the relay
	  const { stream } = await connection.newStream([multicodec$2.relay]);
	  // Send the HOP request
	  const streamHandler = new StreamHandler$1({ stream });
	  streamHandler.write({
	    type: CircuitPB$1.Type.CAN_HOP
	  });

	  const response = await streamHandler.read();
	  await streamHandler.close();

	  if (!response || response.code !== CircuitPB$1.Status.SUCCESS) {
	    return false
	  }

	  return true
	}

	/**
	 * Creates an unencoded CAN_HOP response based on the Circuits configuration
	 *
	 * @param {Object} options
	 * @param {Connection} options.connection
	 * @param {StreamHandler} options.streamHandler
	 * @param {Transport} options.circuit
	 * @private
	 */
	function handleCanHop$1 ({
	  connection,
	  streamHandler,
	  circuit
	}) {
	  const canHop = circuit._options.hop.enabled;
	  log$m('can hop (%s) request from %s', canHop, connection.remotePeer.toB58String());
	  streamHandler.end({
	    type: CircuitPB$1.Type.STATUS,
	    code: canHop ? CircuitPB$1.Status.SUCCESS : CircuitPB$1.Status.HOP_CANT_SPEAK_RELAY
	  });
	}

	var hop_1 = {
	  handleHop: handleHop$1,
	  hop: hop$1,
	  canHop: canHop$1,
	  handleCanHop: handleCanHop$1
	};

	const debug$j = browser$a.exports;
	const log$l = Object.assign(debug$j('libp2p:circuit'), {
	  error: debug$j('libp2p:circuit:err')
	});

	const errCode$9 = errCode$q;
	const mafmt = src$r;
	const { Multiaddr: Multiaddr$8 } = src$s;
	const PeerId$a = src$o.exports;
	const { CircuitRelay: CircuitPB } = protocol;
	const { codes: codes$e } = errors$3;

	const toConnection = streamToMaConn;

	const { relay: multicodec$1 } = multicodec$4;
	const createListener = listener;
	const { handleCanHop, handleHop, hop } = hop_1;
	const { handleStop } = stop$1;
	const StreamHandler = streamHandler;

	const transportSymbol = Symbol.for('@libp2p/js-libp2p-circuit/circuit');

	/**
	 * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection
	 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream
	 */

	class Circuit$1 {
	  /**
	   * Creates an instance of the Circuit Transport.
	   *
	   * @class
	   * @param {object} options
	   * @param {import('../')} options.libp2p
	   * @param {import('../upgrader')} options.upgrader
	   */
	  constructor ({ libp2p, upgrader }) {
	    this._dialer = libp2p.dialer;
	    this._registrar = libp2p.registrar;
	    this._connectionManager = libp2p.connectionManager;
	    this._upgrader = upgrader;
	    this._options = libp2p._config.relay;
	    this._libp2p = libp2p;
	    this.peerId = libp2p.peerId;

	    this._registrar.handle(multicodec$1, this._onProtocol.bind(this));
	  }

	  /**
	   * @param {Object} props
	   * @param {Connection} props.connection
	   * @param {MuxedStream} props.stream
	   */
	  async _onProtocol ({ connection, stream }) {
	    /** @type {import('./circuit/stream-handler')} */
	    const streamHandler = new StreamHandler({ stream });
	    const request = await streamHandler.read();

	    if (!request) {
	      return
	    }

	    const circuit = this;
	    let virtualConnection;

	    switch (request.type) {
	      case CircuitPB.Type.CAN_HOP: {
	        log$l('received CAN_HOP request from %s', connection.remotePeer.toB58String());
	        await handleCanHop({ circuit, connection, streamHandler });
	        break
	      }
	      case CircuitPB.Type.HOP: {
	        log$l('received HOP request from %s', connection.remotePeer.toB58String());
	        virtualConnection = await handleHop({
	          connection,
	          request,
	          streamHandler,
	          circuit
	        });
	        break
	      }
	      case CircuitPB.Type.STOP: {
	        log$l('received STOP request from %s', connection.remotePeer.toB58String());
	        virtualConnection = await handleStop({
	          connection,
	          request,
	          streamHandler
	        });
	        break
	      }
	      default: {
	        log$l('Request of type %s not supported', request.type);
	      }
	    }

	    if (virtualConnection) {
	      // @ts-ignore dst peer will not be undefined
	      const remoteAddr = new Multiaddr$8(request.dstPeer.addrs[0]);
	      // @ts-ignore src peer will not be undefined
	      const localAddr = new Multiaddr$8(request.srcPeer.addrs[0]);
	      const maConn = toConnection({
	        stream: virtualConnection,
	        remoteAddr,
	        localAddr
	      });
	      const type = request.type === CircuitPB.Type.HOP ? 'relay' : 'inbound';
	      log$l('new %s connection %s', type, maConn.remoteAddr);

	      const conn = await this._upgrader.upgradeInbound(maConn);
	      log$l('%s connection %s upgraded', type, maConn.remoteAddr);
	      this.handler && this.handler(conn);
	    }
	  }

	  /**
	   * Dial a peer over a relay
	   *
	   * @param {Multiaddr} ma - the multiaddr of the peer to dial
	   * @param {Object} options - dial options
	   * @param {AbortSignal} [options.signal] - An optional abort signal
	   * @returns {Promise<Connection>} - the connection
	   */
	  async dial (ma, options) {
	    // Check the multiaddr to see if it contains a relay and a destination peer
	    const addrs = ma.toString().split('/p2p-circuit');
	    const relayAddr = new Multiaddr$8(addrs[0]);
	    const destinationAddr = new Multiaddr$8(addrs[addrs.length - 1]);
	    const relayId = relayAddr.getPeerId();
	    const destinationId = destinationAddr.getPeerId();

	    if (!relayId || !destinationId) {
	      const errMsg = 'Circuit relay dial failed as addresses did not have peer id';
	      log$l.error(errMsg);
	      throw errCode$9(new Error(errMsg), codes$e.ERR_RELAYED_DIAL)
	    }

	    const relayPeer = PeerId$a.createFromB58String(relayId);
	    const destinationPeer = PeerId$a.createFromB58String(destinationId);

	    let disconnectOnFailure = false;
	    let relayConnection = this._connectionManager.get(relayPeer);
	    if (!relayConnection) {
	      relayConnection = await this._dialer.connectToPeer(relayAddr, options);
	      disconnectOnFailure = true;
	    }

	    try {
	      const virtualConnection = await hop({
	        connection: relayConnection,
	        request: {
	          type: CircuitPB.Type.HOP,
	          srcPeer: {
	            id: this.peerId.toBytes(),
	            addrs: this._libp2p.multiaddrs.map(addr => addr.bytes)
	          },
	          dstPeer: {
	            id: destinationPeer.toBytes(),
	            addrs: [new Multiaddr$8(destinationAddr).bytes]
	          }
	        }
	      });

	      const localAddr = relayAddr.encapsulate(`/p2p-circuit/p2p/${this.peerId.toB58String()}`);
	      const maConn = toConnection({
	        stream: virtualConnection,
	        remoteAddr: ma,
	        localAddr
	      });
	      log$l('new outbound connection %s', maConn.remoteAddr);

	      return this._upgrader.upgradeOutbound(maConn)
	    } catch (/** @type {any} */ err) {
	      log$l.error('Circuit relay dial failed', err);
	      disconnectOnFailure && await relayConnection.close();
	      throw err
	    }
	  }

	  /**
	   * Create a listener
	   *
	   * @param {any} options
	   * @param {Function} handler
	   * @returns {import('libp2p-interfaces/src/transport/types').Listener}
	   */
	  createListener (options, handler) {
	    if (typeof options === 'function') {
	      handler = options;
	      options = {};
	    }

	    // Called on successful HOP and STOP requests
	    this.handler = handler;

	    return createListener(this._libp2p)
	  }

	  /**
	   * Filter check for all Multiaddrs that this transport can dial on
	   *
	   * @param {Multiaddr[]} multiaddrs
	   * @returns {Multiaddr[]}
	   */
	  filter (multiaddrs) {
	    multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs];

	    return multiaddrs.filter((ma) => {
	      return mafmt.Circuit.matches(ma)
	    })
	  }

	  get [Symbol.toStringTag] () {
	    return 'Circuit'
	  }

	  /**
	   * Checks if the given value is a Transport instance.
	   *
	   * @param {any} other
	   * @returns {other is Transport}
	   */
	  static isTransport (other) {
	    return Boolean(other && other[transportSymbol])
	  }
	}

	var transport = Circuit$1;

	var utils = {};

	const { CID } = require$$0$3;
	const { sha256 } = require$$1$6;

	/**
	 * Convert a namespace string into a cid.
	 *
	 * @param {string} namespace
	 * @returns {Promise<CID>}
	 */
	utils.namespaceToCid = async (namespace) => {
	  const bytes = new TextEncoder().encode(namespace);
	  const hash = await sha256.digest(bytes);

	  return CID.createV0(hash)
	};

	const debug$i = browser$a.exports;
	const log$k = Object.assign(debug$i('libp2p:auto-relay'), {
	  error: debug$i('libp2p:auto-relay:err')
	});

	const { fromString: uint8ArrayFromString$4 } = require$$5$3;
	const { toString: uint8ArrayToString$2 } = require$$8;
	const { Multiaddr: Multiaddr$7 } = src$s;
	const all$2 = itAll;

	const { relay: multicodec } = multicodec$4;
	const { canHop } = hop_1;
	const { namespaceToCid: namespaceToCid$1 } = utils;
	const {
	  CIRCUIT_PROTO_CODE,
	  HOP_METADATA_KEY,
	  HOP_METADATA_VALUE,
	  RELAY_RENDEZVOUS_NS: RELAY_RENDEZVOUS_NS$1
	} = constants$3;

	/**
	 * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection
	 * @typedef {import('../peer-store/types').Address} Address
	 * @typedef {import('peer-id')} PeerId
	 */

	/**
	 * @typedef {Object} AutoRelayProperties
	 * @property {import('../')} libp2p
	 *
	 * @typedef {Object} AutoRelayOptions
	 * @property {number} [maxListeners = 1] - maximum number of relays to listen.
	 * @property {(error: Error, msg?: string) => {}} [onError]
	 */

	class AutoRelay$1 {
	  /**
	   * Creates an instance of AutoRelay.
	   *
	   * @class
	   * @param {AutoRelayProperties & AutoRelayOptions} props
	   */
	  constructor ({ libp2p, maxListeners = 1, onError }) {
	    this._libp2p = libp2p;
	    this._peerId = libp2p.peerId;
	    this._peerStore = libp2p.peerStore;
	    this._connectionManager = libp2p.connectionManager;
	    this._transportManager = libp2p.transportManager;
	    this._addressSorter = libp2p.dialer.addressSorter;

	    this.maxListeners = maxListeners;

	    /**
	     * @type {Set<string>}
	     */
	    this._listenRelays = new Set();

	    this._onProtocolChange = this._onProtocolChange.bind(this);
	    this._onPeerDisconnected = this._onPeerDisconnected.bind(this);

	    this._peerStore.on('change:protocols', this._onProtocolChange);
	    this._connectionManager.on('peer:disconnect', this._onPeerDisconnected);

	    /**
	     * @param {Error} error
	     * @param {string} [msg]
	     */
	    this._onError = (error, msg) => {
	      log$k.error(msg || error);
	      onError && onError(error, msg);
	    };
	  }

	  /**
	   * Check if a peer supports the relay protocol.
	   * If the protocol is not supported, check if it was supported before and remove it as a listen relay.
	   * If the protocol is supported, check if the peer supports **HOP** and add it as a listener if
	   * inside the threshold.
	   *
	   * @param {Object} props
	   * @param {PeerId} props.peerId
	   * @param {string[]} props.protocols
	   * @returns {Promise<void>}
	   */
	  async _onProtocolChange ({ peerId, protocols }) {
	    const id = peerId.toB58String();

	    // Check if it has the protocol
	    const hasProtocol = protocols.find(protocol => protocol === multicodec);

	    // If no protocol, check if we were keeping the peer before as a listenRelay
	    if (!hasProtocol && this._listenRelays.has(id)) {
	      await this._removeListenRelay(id);
	      return
	    } else if (!hasProtocol || this._listenRelays.has(id)) {
	      return
	    }

	    // If protocol, check if can hop, store info in the metadataBook and listen on it
	    try {
	      const connection = this._connectionManager.get(peerId);
	      if (!connection) {
	        return
	      }

	      // Do not hop on a relayed connection
	      if (connection.remoteAddr.protoCodes().includes(CIRCUIT_PROTO_CODE)) {
	        log$k(`relayed connection to ${id} will not be used to hop on`);
	        return
	      }

	      const supportsHop = await canHop({ connection });

	      if (supportsHop) {
	        await this._peerStore.metadataBook.setValue(peerId, HOP_METADATA_KEY, uint8ArrayFromString$4(HOP_METADATA_VALUE));
	        await this._addListenRelay(connection, id);
	      }
	    } catch (/** @type {any} */ err) {
	      this._onError(err);
	    }
	  }

	  /**
	   * Peer disconnects.
	   *
	   * @param {Connection} connection - connection to the peer
	   */
	  _onPeerDisconnected (connection) {
	    const peerId = connection.remotePeer;
	    const id = peerId.toB58String();

	    // Not listening on this relay
	    if (!this._listenRelays.has(id)) {
	      return
	    }

	    this._removeListenRelay(id).catch(err => {
	      log$k.error(err);
	    });
	  }

	  /**
	   * Attempt to listen on the given relay connection.
	   *
	   * @private
	   * @param {Connection} connection - connection to the peer
	   * @param {string} id - peer identifier string
	   * @returns {Promise<void>}
	   */
	  async _addListenRelay (connection, id) {
	    try {
	      // Check if already listening on enough relays
	      if (this._listenRelays.size >= this.maxListeners) {
	        return
	      }

	      // Get peer known addresses and sort them per public addresses first
	      const remoteAddrs = await this._peerStore.addressBook.getMultiaddrsForPeer(
	        connection.remotePeer, this._addressSorter
	      );

	      // Attempt to listen on relay
	      const result = await Promise.all(
	        remoteAddrs.map(async addr => {
	          try {
	            // Announce multiaddrs will update on listen success by TransportManager event being triggered
	            await this._transportManager.listen([new Multiaddr$7(`${addr.toString()}/p2p-circuit`)]);
	            return true
	          } catch (/** @type {any} */ err) {
	            this._onError(err);
	          }

	          return false
	        })
	      );

	      if (result.includes(true)) {
	        this._listenRelays.add(id);
	      }
	    } catch (/** @type {any} */ err) {
	      this._onError(err);
	      this._listenRelays.delete(id);
	    }
	  }

	  /**
	   * Remove listen relay.
	   *
	   * @private
	   * @param {string} id - peer identifier string.
	   */
	  async _removeListenRelay (id) {
	    if (this._listenRelays.delete(id)) {
	      // TODO: this should be responsibility of the connMgr
	      await this._listenOnAvailableHopRelays([id]);
	    }
	  }

	  /**
	   * Try to listen on available hop relay connections.
	   * The following order will happen while we do not have enough relays.
	   * 1. Check the metadata store for known relays, try to listen on the ones we are already connected.
	   * 2. Dial and try to listen on the peers we know that support hop but are not connected.
	   * 3. Search the network.
	   *
	   * @param {string[]} [peersToIgnore]
	   */
	  async _listenOnAvailableHopRelays (peersToIgnore = []) {
	    // TODO: The peer redial issue on disconnect should be handled by connection gating
	    // Check if already listening on enough relays
	    if (this._listenRelays.size >= this.maxListeners) {
	      return
	    }

	    const knownHopsToDial = [];
	    const peers = await all$2(this._peerStore.getPeers());

	    // Check if we have known hop peers to use and attempt to listen on the already connected
	    for await (const { id, metadata } of peers) {
	      const idStr = id.toB58String();

	      // Continue to next if listening on this or peer to ignore
	      if (this._listenRelays.has(idStr)) {
	        continue
	      }

	      if (peersToIgnore.includes(idStr)) {
	        continue
	      }

	      const supportsHop = metadata.get(HOP_METADATA_KEY);

	      // Continue to next if it does not support Hop
	      if (!supportsHop || uint8ArrayToString$2(supportsHop) !== HOP_METADATA_VALUE) {
	        continue
	      }

	      const connection = this._connectionManager.get(id);

	      // If not connected, store for possible later use.
	      if (!connection) {
	        knownHopsToDial.push(id);
	        continue
	      }

	      await this._addListenRelay(connection, idStr);

	      // Check if already listening on enough relays
	      if (this._listenRelays.size >= this.maxListeners) {
	        return
	      }
	    }

	    // Try to listen on known peers that are not connected
	    for (const peerId of knownHopsToDial) {
	      await this._tryToListenOnRelay(peerId);

	      // Check if already listening on enough relays
	      if (this._listenRelays.size >= this.maxListeners) {
	        return
	      }
	    }

	    // Try to find relays to hop on the network
	    try {
	      const cid = await namespaceToCid$1(RELAY_RENDEZVOUS_NS$1);
	      for await (const provider of this._libp2p.contentRouting.findProviders(cid)) {
	        if (!provider.multiaddrs.length) {
	          continue
	        }

	        const peerId = provider.id;
	        await this._peerStore.addressBook.add(peerId, provider.multiaddrs);

	        await this._tryToListenOnRelay(peerId);

	        // Check if already listening on enough relays
	        if (this._listenRelays.size >= this.maxListeners) {
	          return
	        }
	      }
	    } catch (/** @type {any} */ err) {
	      this._onError(err);
	    }
	  }

	  /**
	   * @param {PeerId} peerId
	   */
	  async _tryToListenOnRelay (peerId) {
	    try {
	      const connection = await this._libp2p.dial(peerId);
	      await this._addListenRelay(connection, peerId.toB58String());
	    } catch (/** @type {any} */ err) {
	      this._onError(err, `could not connect and listen on known hop relay ${peerId.toB58String()}`);
	    }
	  }
	}

	var autoRelay = AutoRelay$1;

	const debug$h = browser$a.exports;
	const log$j = Object.assign(debug$h('libp2p:relay'), {
	  error: debug$h('libp2p:relay:err')
	});
	const { codes: codes$d } = errors$3;
	const {
	  setDelayedInterval,
	  clearDelayedInterval
	// @ts-ignore set-delayed-interval does not export types
	} = src$5;

	const AutoRelay = autoRelay;
	const { namespaceToCid } = utils;
	const {
	  RELAY_RENDEZVOUS_NS
	} = constants$3;

	/**
	 * @typedef {import('../')} Libp2p
	 *
	 * @typedef {Object} RelayAdvertiseOptions
	 * @property {number} [bootDelay = ADVERTISE_BOOT_DELAY]
	 * @property {boolean} [enabled = true]
	 * @property {number} [ttl = ADVERTISE_TTL]
	 *
	 * @typedef {Object} HopOptions
	 * @property {boolean} [enabled = false]
	 * @property {boolean} [active = false]
	 *
	 * @typedef {Object} AutoRelayOptions
	 * @property {number} [maxListeners = 2] - maximum number of relays to listen.
	 * @property {boolean} [enabled = false]
	 */

	class Relay$1 {
	  /**
	   * Creates an instance of Relay.
	   *
	   * @class
	   * @param {Libp2p} libp2p
	   */
	  constructor (libp2p) {
	    this._libp2p = libp2p;
	    this._options = {
	      ...libp2p._config.relay
	    };

	    // Create autoRelay if enabled
	    this._autoRelay = this._options.autoRelay.enabled && new AutoRelay({ libp2p, ...this._options.autoRelay });

	    this._advertiseService = this._advertiseService.bind(this);
	  }

	  /**
	   * Start Relay service.
	   *
	   * @returns {void}
	   */
	  start () {
	    // Advertise service if HOP enabled
	    const canHop = this._options.hop.enabled;

	    if (canHop && this._options.advertise.enabled) {
	      this._timeout = setDelayedInterval(
	        this._advertiseService, this._options.advertise.ttl, this._options.advertise.bootDelay
	      );
	    }
	  }

	  /**
	   * Stop Relay service.
	   *
	   * @returns {void}
	   */
	  stop () {
	    clearDelayedInterval(this._timeout);
	  }

	  /**
	   * Advertise hop relay service in the network.
	   *
	   * @returns {Promise<void>}
	   */
	  async _advertiseService () {
	    try {
	      const cid = await namespaceToCid(RELAY_RENDEZVOUS_NS);
	      await this._libp2p.contentRouting.provide(cid);
	    } catch (/** @type {any} */ err) {
	      if (err.code === codes$d.ERR_NO_ROUTERS_AVAILABLE) {
	        log$j.error('a content router, such as a DHT, must be provided in order to advertise the relay service', err);
	        // Stop the advertise
	        this.stop();
	      } else {
	        log$j.error(err);
	      }
	    }
	  }
	}

	var circuit = Relay$1;

	const Fifo = fastFifo;
	const defer = pDefer_1;

	var pFifo = class PFifo {
	  constructor () {
	    this._buffer = new Fifo();
	    this._waitingConsumers = new Fifo();
	  }

	  push (chunk) {
	    const { promise, resolve } = defer();
	    this._buffer.push({ chunk, resolve });
	    this._consume();
	    return promise
	  }

	  _consume () {
	    while (!this._waitingConsumers.isEmpty() && !this._buffer.isEmpty()) {
	      const nextConsumer = this._waitingConsumers.shift();
	      const nextChunk = this._buffer.shift();
	      nextConsumer.resolve(nextChunk.chunk);
	      nextChunk.resolve();
	    }
	  }

	  shift () {
	    const { promise, resolve } = defer();
	    this._waitingConsumers.push({ resolve });
	    this._consume();
	    return promise
	  }

	  isEmpty () {
	    return this._buffer.isEmpty()
	  }
	};

	var pAny$1 = {exports: {}};

	var pSome$2 = {exports: {}};

	var pCancelable = {exports: {}};

	class CancelError extends Error {
		constructor(reason) {
			super(reason || 'Promise was canceled');
			this.name = 'CancelError';
		}

		get isCanceled() {
			return true;
		}
	}

	class PCancelable$2 {
		static fn(userFn) {
			return (...arguments_) => {
				return new PCancelable$2((resolve, reject, onCancel) => {
					arguments_.push(onCancel);
					// eslint-disable-next-line promise/prefer-await-to-then
					userFn(...arguments_).then(resolve, reject);
				});
			};
		}

		constructor(executor) {
			this._cancelHandlers = [];
			this._isPending = true;
			this._isCanceled = false;
			this._rejectOnCancel = true;

			this._promise = new Promise((resolve, reject) => {
				this._reject = reject;

				const onResolve = value => {
					if (!this._isCanceled || !onCancel.shouldReject) {
						this._isPending = false;
						resolve(value);
					}
				};

				const onReject = error => {
					this._isPending = false;
					reject(error);
				};

				const onCancel = handler => {
					if (!this._isPending) {
						throw new Error('The `onCancel` handler was attached after the promise settled.');
					}

					this._cancelHandlers.push(handler);
				};

				Object.defineProperties(onCancel, {
					shouldReject: {
						get: () => this._rejectOnCancel,
						set: boolean => {
							this._rejectOnCancel = boolean;
						}
					}
				});

				return executor(onResolve, onReject, onCancel);
			});
		}

		then(onFulfilled, onRejected) {
			// eslint-disable-next-line promise/prefer-await-to-then
			return this._promise.then(onFulfilled, onRejected);
		}

		catch(onRejected) {
			return this._promise.catch(onRejected);
		}

		finally(onFinally) {
			return this._promise.finally(onFinally);
		}

		cancel(reason) {
			if (!this._isPending || this._isCanceled) {
				return;
			}

			this._isCanceled = true;

			if (this._cancelHandlers.length > 0) {
				try {
					for (const handler of this._cancelHandlers) {
						handler();
					}
				} catch (error) {
					this._reject(error);
					return;
				}
			}

			if (this._rejectOnCancel) {
				this._reject(new CancelError(reason));
			}
		}

		get isCanceled() {
			return this._isCanceled;
		}
	}

	Object.setPrototypeOf(PCancelable$2.prototype, Promise.prototype);

	pCancelable.exports = PCancelable$2;
	pCancelable.exports.CancelError = CancelError;

	const AggregateError = aggregateError;
	const PCancelable$1 = pCancelable.exports;

	class FilterError extends Error { }

	const pSome$1 = (iterable, options) => new PCancelable$1((resolve, reject, onCancel) => {
		const {
			count,
			filter = () => true
		} = options;

		if (!Number.isFinite(count)) {
			reject(new TypeError(`Expected a finite number, got ${typeof options.count}`));
			return;
		}

		const values = [];
		const errors = [];
		let elementCount = 0;
		let isSettled = false;

		const completed = new Set();
		const maybeSettle = () => {
			if (values.length === count) {
				resolve(values);
				isSettled = true;
			}

			if (elementCount - errors.length < count) {
				reject(new AggregateError(errors));
				isSettled = true;
			}

			return isSettled;
		};

		const cancelPending = () => {
			for (const promise of iterable) {
				if (!completed.has(promise) && typeof promise.cancel === 'function') {
					promise.cancel();
				}
			}
		};

		onCancel(cancelPending);

		for (const element of iterable) {
			elementCount++;

			(async () => {
				try {
					const value = await element;

					if (isSettled) {
						return;
					}

					if (!filter(value)) {
						throw new FilterError('Value does not satisfy filter');
					}

					values.push(value);
				} catch (error) {
					errors.push(error);
				} finally {
					completed.add(element);

					if (!isSettled && maybeSettle()) {
						cancelPending();
					}
				}
			})();
		}

		if (count > elementCount) {
			reject(new RangeError(`Expected input to contain at least ${options.count} items, but contains ${elementCount} items`));
			cancelPending();
		}
	});

	pSome$2.exports = pSome$1;
	pSome$2.exports.AggregateError = AggregateError;
	pSome$2.exports.FilterError = FilterError;

	const pSome = pSome$2.exports;
	const PCancelable = pCancelable.exports;

	pAny$1.exports = (iterable, options) => {
		const anyCancelable = pSome(iterable, {...options, count: 1});

		return PCancelable.fn(async onCancel => {
			onCancel(() => {
				anyCancelable.cancel();
			});

			const [value] = await anyCancelable;
			return value;
		})();
	};

	pAny$1.exports.AggregateError = pSome.AggregateError;

	const errCode$8 = errCode$q;
	const { anySignal: anySignal$1 } = anySignal$7.exports;
	// @ts-ignore p-fifo does not export types
	const FIFO = pFifo;
	const pAny = pAny$1.exports;
	// @ts-expect-error setMaxListeners is missing from the types
	const { setMaxListeners: setMaxListeners$1 } = require$$1$5;
	const { codes: codes$c } = errors$3;

	/**
	 * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection
	 * @typedef {import('./')} Dialer
	 * @typedef {import('multiaddr').Multiaddr} Multiaddr
	 */

	/**
	 * @typedef {Object} DialOptions
	 * @property {AbortSignal} signal
	 *
	 * @typedef {Object} DialRequestOptions
	 * @property {Multiaddr[]} addrs
	 * @property {(m: Multiaddr, options: DialOptions) => Promise<Connection>} dialAction
	 * @property {Dialer} dialer
	 */

	class DialRequest$1 {
	  /**
	   * Manages running the `dialAction` on multiple provided `addrs` in parallel
	   * up to a maximum determined by the number of tokens returned
	   * from `dialer.getTokens`. Once a DialRequest is created, it can be
	   * started using `DialRequest.run(options)`. Once a single dial has succeeded,
	   * all other dials in the request will be cancelled.
	   *
	   * @class
	   * @param {DialRequestOptions} options
	   */
	  constructor ({
	    addrs,
	    dialAction,
	    dialer
	  }) {
	    this.addrs = addrs;
	    this.dialer = dialer;
	    this.dialAction = dialAction;
	  }

	  /**
	   * @async
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal] - An AbortController signal
	   * @returns {Promise<Connection>}
	   */
	  async run (options = {}) {
	    const tokens = this.dialer.getTokens(this.addrs.length);
	    // If no tokens are available, throw
	    if (tokens.length < 1) {
	      throw errCode$8(new Error('No dial tokens available'), codes$c.ERR_NO_DIAL_TOKENS)
	    }

	    const tokenHolder = new FIFO();
	    tokens.forEach(token => tokenHolder.push(token));
	    const dialAbortControllers = this.addrs.map(() => {
	      const controller = new AbortController();
	      try {
	        // fails on node < 15.4
	        setMaxListeners$1 && setMaxListeners$1(Infinity, controller.signal);
	      } catch {}

	      return controller
	    });
	    let completedDials = 0;

	    try {
	      return await pAny(this.addrs.map(async (addr, i) => {
	        const token = await tokenHolder.shift(); // get token
	        let conn;
	        try {
	          const signal = dialAbortControllers[i].signal;
	          conn = await this.dialAction(addr, { ...options, signal: options.signal ? anySignal$1([signal, options.signal]) : signal });
	          // Remove the successful AbortController so it is not aborted
	          dialAbortControllers.splice(i, 1);
	        } finally {
	          completedDials++;
	          // If we have more or equal dials remaining than tokens, recycle the token, otherwise release it
	          if (this.addrs.length - completedDials >= tokens.length) {
	            tokenHolder.push(token);
	          } else {
	            this.dialer.releaseToken(tokens.splice(tokens.indexOf(token), 1)[0]);
	          }
	        }

	        return conn
	      }))
	    } finally {
	      dialAbortControllers.map(c => c.abort()); // success/failure happened, abort everything else
	      tokens.forEach(token => this.dialer.releaseToken(token)); // release tokens back to the dialer
	    }
	  }
	}

	var dialRequest = DialRequest$1;

	const debug$g = browser$a.exports;
	const all$1 = itAll;
	const filter$1 = itFilter;
	const { pipe: pipe$7 } = itPipe.exports;
	const log$i = Object.assign(debug$g('libp2p:dialer'), {
	  error: debug$g('libp2p:dialer:err')
	});
	const errCode$7 = errCode$q;
	const { Multiaddr: Multiaddr$6 } = src$s;
	const { TimeoutController } = timeoutAbortController;
	const { AbortError: AbortError$1 } = abortableIterator.exports;
	const { anySignal } = anySignal$7.exports;
	// @ts-expect-error setMaxListeners is missing from the types
	const { setMaxListeners } = require$$1$5;
	const DialRequest = dialRequest;
	const { publicAddressesFirst } = addressSort;
	const getPeer$1 = getPeer_1;
	const trackedMap = trackedMap$2;
	const { codes: codes$b } = errors$3;
	const {
	  DIAL_TIMEOUT,
	  MAX_PARALLEL_DIALS,
	  MAX_PER_PEER_DIALS,
	  MAX_ADDRS_TO_DIAL
	} = constants$4;

	const METRICS_COMPONENT = 'dialler';
	const METRICS_PENDING_DIALS = 'pending-dials';
	const METRICS_PENDING_DIAL_TARGETS = 'pending-dial-targets';

	/**
	 * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('../peer-store/types').PeerStore} PeerStore
	 * @typedef {import('../peer-store/types').Address} Address
	 * @typedef {import('../transport-manager')} TransportManager
	 * @typedef {import('../types').ConnectionGater} ConnectionGater
	 */

	/**
	 * @typedef {Object} DialerProperties
	 * @property {PeerStore} peerStore
	 * @property {TransportManager} transportManager
	 * @property {ConnectionGater} connectionGater
	 *
	 * @typedef {(addr:Multiaddr) => Promise<string[]>} Resolver
	 *
	 * @typedef {Object} DialerOptions
	 * @property {(addresses: Address[]) => Address[]} [options.addressSorter = publicAddressesFirst] - Sort the known addresses of a peer before trying to dial.
	 * @property {number} [maxParallelDials = MAX_PARALLEL_DIALS] - Number of max concurrent dials.
	 * @property {number} [maxAddrsToDial = MAX_ADDRS_TO_DIAL] - Number of max addresses to dial for a given peer.
	 * @property {number} [maxDialsPerPeer = MAX_PER_PEER_DIALS] - Number of max concurrent dials per peer.
	 * @property {number} [dialTimeout = DIAL_TIMEOUT] - How long a dial attempt is allowed to take.
	 * @property {Record<string, Resolver>} [resolvers = {}] - multiaddr resolvers to use when dialing
	 * @property {import('../metrics')} [metrics]
	 *
	 * @typedef DialTarget
	 * @property {string} id
	 * @property {Multiaddr[]} addrs
	 *
	 * @typedef PendingDial
	 * @property {import('./dial-request')} dialRequest
	 * @property {import('timeout-abort-controller').TimeoutController} controller
	 * @property {Promise<Connection>} promise
	 * @property {function():void} destroy
	 */

	class Dialer$2 {
	  /**
	   * @class
	   * @param {DialerProperties & DialerOptions} options
	   */
	  constructor ({
	    transportManager,
	    peerStore,
	    connectionGater,
	    addressSorter = publicAddressesFirst,
	    maxParallelDials = MAX_PARALLEL_DIALS,
	    maxAddrsToDial = MAX_ADDRS_TO_DIAL,
	    dialTimeout = DIAL_TIMEOUT,
	    maxDialsPerPeer = MAX_PER_PEER_DIALS,
	    resolvers = {},
	    metrics
	  }) {
	    this.connectionGater = connectionGater;
	    this.transportManager = transportManager;
	    this.peerStore = peerStore;
	    this.addressSorter = addressSorter;
	    this.maxParallelDials = maxParallelDials;
	    this.maxAddrsToDial = maxAddrsToDial;
	    this.timeout = dialTimeout;
	    this.maxDialsPerPeer = maxDialsPerPeer;
	    this.tokens = [...new Array(maxParallelDials)].map((_, index) => index);

	    /** @type {Map<string, PendingDial>} */
	    this._pendingDials = trackedMap({
	      component: METRICS_COMPONENT,
	      metric: METRICS_PENDING_DIALS,
	      metrics
	    });

	    /** @type {Map<string, { resolve: (value: any) => void, reject: (err: Error) => void}>} */
	    this._pendingDialTargets = trackedMap({
	      component: METRICS_COMPONENT,
	      metric: METRICS_PENDING_DIAL_TARGETS,
	      metrics
	    });

	    for (const [key, value] of Object.entries(resolvers)) {
	      Multiaddr$6.resolvers.set(key, value);
	    }
	  }

	  /**
	   * Clears any pending dials
	   */
	  destroy () {
	    for (const dial of this._pendingDials.values()) {
	      try {
	        dial.controller.abort();
	      } catch (/** @type {any} */ err) {
	        log$i.error(err);
	      }
	    }
	    this._pendingDials.clear();

	    for (const pendingTarget of this._pendingDialTargets.values()) {
	      pendingTarget.reject(new AbortError$1('Dialer was destroyed'));
	    }
	    this._pendingDialTargets.clear();
	  }

	  /**
	   * Connects to a given `peer` by dialing all of its known addresses.
	   * The dial to the first address that is successfully able to upgrade a connection
	   * will be used.
	   *
	   * @param {PeerId|Multiaddr|string} peer - The peer to dial
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal] - An AbortController signal
	   * @returns {Promise<Connection>}
	   */
	  async connectToPeer (peer, options = {}) {
	    const { id } = getPeer$1(peer);

	    if (await this.connectionGater.denyDialPeer(id)) {
	      throw errCode$7(new Error('The dial request is blocked by gater.allowDialPeer'), codes$b.ERR_PEER_DIAL_INTERCEPTED)
	    }

	    const dialTarget = await this._createCancellableDialTarget(peer);

	    if (!dialTarget.addrs.length) {
	      throw errCode$7(new Error('The dial request has no valid addresses'), codes$b.ERR_NO_VALID_ADDRESSES)
	    }
	    const pendingDial = this._pendingDials.get(dialTarget.id) || this._createPendingDial(dialTarget, options);

	    try {
	      const connection = await pendingDial.promise;
	      log$i('dial succeeded to %s', dialTarget.id);
	      return connection
	    } catch (/** @type {any} */ err) {
	      // Error is a timeout
	      if (pendingDial.controller.signal.aborted) {
	        err.code = codes$b.ERR_TIMEOUT;
	      }
	      log$i.error(err);
	      throw err
	    } finally {
	      pendingDial.destroy();
	    }
	  }

	  /**
	   * Connects to a given `peer` by dialing all of its known addresses.
	   * The dial to the first address that is successfully able to upgrade a connection
	   * will be used.
	   *
	   * @param {PeerId|Multiaddr|string} peer - The peer to dial
	   * @returns {Promise<DialTarget>}
	   */
	  async _createCancellableDialTarget (peer) {
	    // Make dial target promise cancellable
	    const id = `${(parseInt(String(Math.random() * 1e9), 10)).toString() + Date.now()}`;
	    const cancellablePromise = new Promise((resolve, reject) => {
	      this._pendingDialTargets.set(id, { resolve, reject });
	    });

	    try {
	      const dialTarget = await Promise.race([
	        this._createDialTarget(peer),
	        cancellablePromise
	      ]);

	      return dialTarget
	    } finally {
	      this._pendingDialTargets.delete(id);
	    }
	  }

	  /**
	   * Creates a DialTarget. The DialTarget is used to create and track
	   * the DialRequest to a given peer.
	   * If a multiaddr is received it should be the first address attempted.
	   * Multiaddrs not supported by the available transports will be filtered out.
	   *
	   * @private
	   * @param {PeerId|Multiaddr|string} peer - A PeerId or Multiaddr
	   * @returns {Promise<DialTarget>}
	   */
	  async _createDialTarget (peer) {
	    const { id, multiaddrs } = getPeer$1(peer);

	    if (multiaddrs) {
	      await this.peerStore.addressBook.add(id, multiaddrs);
	    }

	    let knownAddrs = await pipe$7(
	      await this.peerStore.addressBook.getMultiaddrsForPeer(id, this.addressSorter),
	      (source) => filter$1(source, async (multiaddr) => {
	        return !(await this.connectionGater.denyDialMultiaddr(id, multiaddr))
	      }),
	      (source) => all$1(source)
	    );

	    // If received a multiaddr to dial, it should be the first to use
	    // But, if we know other multiaddrs for the peer, we should try them too.
	    if (Multiaddr$6.isMultiaddr(peer)) {
	      knownAddrs = knownAddrs.filter((addr) => !peer.equals(addr));
	      knownAddrs.unshift(peer);
	    }

	    /** @type {Multiaddr[]} */
	    const addrs = [];
	    for (const a of knownAddrs) {
	      const resolvedAddrs = await this._resolve(a);
	      resolvedAddrs.forEach(ra => addrs.push(ra));
	    }

	    // Multiaddrs not supported by the available transports will be filtered out.
	    const supportedAddrs = addrs.filter(a => this.transportManager.transportForMultiaddr(a));

	    if (supportedAddrs.length > this.maxAddrsToDial) {
	      await this.peerStore.delete(id);
	      throw errCode$7(new Error('dial with more addresses than allowed'), codes$b.ERR_TOO_MANY_ADDRESSES)
	    }

	    return {
	      id: id.toB58String(),
	      addrs: supportedAddrs
	    }
	  }

	  /**
	   * Creates a PendingDial that wraps the underlying DialRequest
	   *
	   * @private
	   * @param {DialTarget} dialTarget
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal] - An AbortController signal
	   * @returns {PendingDial}
	   */
	  _createPendingDial (dialTarget, options = {}) {
	    /**
	     * @param {Multiaddr} addr
	     * @param {{ signal: { aborted: any; }; }} options
	     */
	    const dialAction = (addr, options) => {
	      if (options.signal.aborted) throw errCode$7(new Error('already aborted'), codes$b.ERR_ALREADY_ABORTED)
	      return this.transportManager.dial(addr, options)
	    };

	    const dialRequest = new DialRequest({
	      addrs: dialTarget.addrs,
	      dialAction,
	      dialer: this
	    });

	    // Combine the timeout signal and options.signal, if provided
	    const timeoutController = new TimeoutController(this.timeout);

	    const signals = [timeoutController.signal];
	    options.signal && signals.push(options.signal);
	    const signal = anySignal(signals);

	    // this signal will potentially be used while dialing lots of
	    // peers so prevent MaxListenersExceededWarning appearing in the console
	    try {
	      // fails on node < 15.4
	      setMaxListeners && setMaxListeners(Infinity, signal);
	    } catch {}

	    const pendingDial = {
	      dialRequest,
	      controller: timeoutController,
	      promise: dialRequest.run({ ...options, signal }),
	      destroy: () => {
	        timeoutController.clear();
	        this._pendingDials.delete(dialTarget.id);
	      }
	    };
	    this._pendingDials.set(dialTarget.id, pendingDial);

	    return pendingDial
	  }

	  /**
	   * @param {number} num
	   */
	  getTokens (num) {
	    const total = Math.min(num, this.maxDialsPerPeer, this.tokens.length);
	    const tokens = this.tokens.splice(0, total);
	    log$i('%d tokens request, returning %d, %d remaining', num, total, this.tokens.length);
	    return tokens
	  }

	  /**
	   * @param {number} token
	   */
	  releaseToken (token) {
	    // Guard against duplicate releases
	    if (this.tokens.indexOf(token) > -1) return
	    log$i('token %d released', token);
	    this.tokens.push(token);
	  }

	  /**
	   * Resolve multiaddr recursively.
	   *
	   * @param {Multiaddr} ma
	   * @returns {Promise<Multiaddr[]>}
	   */
	  async _resolve (ma) {
	    // TODO: recursive logic should live in multiaddr once dns4/dns6 support is in place
	    // Now only supporting resolve for dnsaddr
	    const resolvableProto = ma.protoNames().includes('dnsaddr');

	    // Multiaddr is not resolvable? End recursion!
	    if (!resolvableProto) {
	      return [ma]
	    }

	    const resolvedMultiaddrs = await this._resolveRecord(ma);
	    const recursiveMultiaddrs = await Promise.all(resolvedMultiaddrs.map((nm) => {
	      return this._resolve(nm)
	    }));

	    const addrs = recursiveMultiaddrs.flat();
	    return addrs.reduce((array, newM) => {
	      if (!array.find(m => m.equals(newM))) {
	        array.push(newM);
	      }
	      return array
	    }, /** @type  {Multiaddr[]} */([]))
	  }

	  /**
	   * Resolve a given multiaddr. If this fails, an empty array will be returned
	   *
	   * @param {Multiaddr} ma
	   * @returns {Promise<Multiaddr[]>}
	   */
	  async _resolveRecord (ma) {
	    try {
	      ma = new Multiaddr$6(ma.toString()); // Use current multiaddr module
	      const multiaddrs = await ma.resolve();
	      return multiaddrs
	    } catch (_) {
	      log$i.error(`multiaddr ${ma} could not be resolved`);
	      return []
	    }
	  }
	}

	var dialer = Dialer$2;

	function isHighSurrogate$1(codePoint) {
	  return codePoint >= 0xd800 && codePoint <= 0xdbff;
	}

	function isLowSurrogate$1(codePoint) {
	  return codePoint >= 0xdc00 && codePoint <= 0xdfff;
	}

	// Truncate string by size in bytes
	var truncate$2 = function truncate(getLength, string, byteLength) {
	  if (typeof string !== "string") {
	    throw new Error("Input must be string");
	  }

	  var charLength = string.length;
	  var curByteLength = 0;
	  var codePoint;
	  var segment;

	  for (var i = 0; i < charLength; i += 1) {
	    codePoint = string.charCodeAt(i);
	    segment = string[i];

	    if (isHighSurrogate$1(codePoint) && isLowSurrogate$1(string.charCodeAt(i + 1))) {
	      i += 1;
	      segment += string[i];
	    }

	    curByteLength += getLength(segment);

	    if (curByteLength === byteLength) {
	      return string.slice(0, i + 1);
	    }
	    else if (curByteLength > byteLength) {
	      return string.slice(0, i - segment.length + 1);
	    }
	  }

	  return string;
	};

	function isHighSurrogate(codePoint) {
	  return codePoint >= 0xd800 && codePoint <= 0xdbff;
	}

	function isLowSurrogate(codePoint) {
	  return codePoint >= 0xdc00 && codePoint <= 0xdfff;
	}

	// Truncate string by size in bytes
	var browser$1 = function getByteLength(string) {
	  if (typeof string !== "string") {
	    throw new Error("Input must be string");
	  }

	  var charLength = string.length;
	  var byteLength = 0;
	  var codePoint = null;
	  var prevCodePoint = null;
	  for (var i = 0; i < charLength; i++) {
	    codePoint = string.charCodeAt(i);
	    // handle 4-byte non-BMP chars
	    // low surrogate
	    if (isLowSurrogate(codePoint)) {
	      // when parsing previous hi-surrogate, 3 is added to byteLength
	      if (prevCodePoint != null && isHighSurrogate(prevCodePoint)) {
	        byteLength += 1;
	      }
	      else {
	        byteLength += 3;
	      }
	    }
	    else if (codePoint <= 0x7f ) {
	      byteLength += 1;
	    }
	    else if (codePoint >= 0x80 && codePoint <= 0x7ff) {
	      byteLength += 2;
	    }
	    else if (codePoint >= 0x800 && codePoint <= 0xffff) {
	      byteLength += 3;
	    }
	    prevCodePoint = codePoint;
	  }

	  return byteLength;
	};

	var truncate$1 = truncate$2;
	var getLength = browser$1;
	var browser = truncate$1.bind(null, getLength);

	/*jshint node:true*/

	/**
	 * Replaces characters in strings that are illegal/unsafe for filenames.
	 * Unsafe characters are either removed or replaced by a substitute set
	 * in the optional `options` object.
	 *
	 * Illegal Characters on Various Operating Systems
	 * / ? < > \ : * | "
	 * https://kb.acronis.com/content/39790
	 *
	 * Unicode Control codes
	 * C0 0x00-0x1f & C1 (0x80-0x9f)
	 * http://en.wikipedia.org/wiki/C0_and_C1_control_codes
	 *
	 * Reserved filenames on Unix-based systems (".", "..")
	 * Reserved filenames in Windows ("CON", "PRN", "AUX", "NUL", "COM1",
	 * "COM2", "COM3", "COM4", "COM5", "COM6", "COM7", "COM8", "COM9",
	 * "LPT1", "LPT2", "LPT3", "LPT4", "LPT5", "LPT6", "LPT7", "LPT8", and
	 * "LPT9") case-insesitively and with or without filename extensions.
	 *
	 * Capped at 255 characters in length.
	 * http://unix.stackexchange.com/questions/32795/what-is-the-maximum-allowed-filename-and-folder-size-with-ecryptfs
	 *
	 * @param  {String} input   Original filename
	 * @param  {Object} options {replacement: String | Function }
	 * @return {String}         Sanitized filename
	 */

	var truncate = browser;

	var illegalRe = /[\/\?<>\\:\*\|"]/g;
	var controlRe = /[\x00-\x1f\x80-\x9f]/g;
	var reservedRe = /^\.+$/;
	var windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\..*)?$/i;
	var windowsTrailingRe = /[\. ]+$/;

	function sanitize$1(input, replacement) {
	  if (typeof input !== 'string') {
	    throw new Error('Input must be string');
	  }
	  var sanitized = input
	    .replace(illegalRe, replacement)
	    .replace(controlRe, replacement)
	    .replace(reservedRe, replacement)
	    .replace(windowsReservedRe, replacement)
	    .replace(windowsTrailingRe, replacement);
	  return truncate(sanitized, 255);
	}

	var sanitizeFilename = function (input, options) {
	  var replacement = (options && options.replacement) || '';
	  var output = sanitize$1(input, replacement);
	  if (replacement === '') {
	    return output;
	  }
	  return sanitize$1(output, '');
	};

	/**
	 * Javascript implementation of ASN.1 validators for PKCS#7 v1.5.
	 *
	 * @author Dave Longley
	 * @author Stefan Siegl
	 *
	 * Copyright (c) 2012-2015 Digital Bazaar, Inc.
	 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
	 *
	 * The ASN.1 representation of PKCS#7 is as follows
	 * (see RFC #2315 for details, http://www.ietf.org/rfc/rfc2315.txt):
	 *
	 * A PKCS#7 message consists of a ContentInfo on root level, which may
	 * contain any number of further ContentInfo nested into it.
	 *
	 * ContentInfo ::= SEQUENCE {
	 *   contentType                ContentType,
	 *   content               [0]  EXPLICIT ANY DEFINED BY contentType OPTIONAL
	 * }
	 *
	 * ContentType ::= OBJECT IDENTIFIER
	 *
	 * EnvelopedData ::= SEQUENCE {
	 *   version                    Version,
	 *   recipientInfos             RecipientInfos,
	 *   encryptedContentInfo       EncryptedContentInfo
	 * }
	 *
	 * EncryptedData ::= SEQUENCE {
	 *   version                    Version,
	 *   encryptedContentInfo       EncryptedContentInfo
	 * }
	 *
	 * id-signedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)
	 *   us(840) rsadsi(113549) pkcs(1) pkcs7(7) 2 }
	 *
	 * SignedData ::= SEQUENCE {
	 *   version           INTEGER,
	 *   digestAlgorithms  DigestAlgorithmIdentifiers,
	 *   contentInfo       ContentInfo,
	 *   certificates      [0] IMPLICIT Certificates OPTIONAL,
	 *   crls              [1] IMPLICIT CertificateRevocationLists OPTIONAL,
	 *   signerInfos       SignerInfos
	 * }
	 *
	 * SignerInfos ::= SET OF SignerInfo
	 *
	 * SignerInfo ::= SEQUENCE {
	 *   version                    Version,
	 *   issuerAndSerialNumber      IssuerAndSerialNumber,
	 *   digestAlgorithm            DigestAlgorithmIdentifier,
	 *   authenticatedAttributes    [0] IMPLICIT Attributes OPTIONAL,
	 *   digestEncryptionAlgorithm  DigestEncryptionAlgorithmIdentifier,
	 *   encryptedDigest            EncryptedDigest,
	 *   unauthenticatedAttributes  [1] IMPLICIT Attributes OPTIONAL
	 * }
	 *
	 * EncryptedDigest ::= OCTET STRING
	 *
	 * Attributes ::= SET OF Attribute
	 *
	 * Attribute ::= SEQUENCE {
	 *   attrType    OBJECT IDENTIFIER,
	 *   attrValues  SET OF AttributeValue
	 * }
	 *
	 * AttributeValue ::= ANY
	 *
	 * Version ::= INTEGER
	 *
	 * RecipientInfos ::= SET OF RecipientInfo
	 *
	 * EncryptedContentInfo ::= SEQUENCE {
	 *   contentType                 ContentType,
	 *   contentEncryptionAlgorithm  ContentEncryptionAlgorithmIdentifier,
	 *   encryptedContent       [0]  IMPLICIT EncryptedContent OPTIONAL
	 * }
	 *
	 * ContentEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
	 *
	 * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters
	 * for the algorithm, if any. In the case of AES and DES3, there is only one,
	 * the IV.
	 *
	 * AlgorithmIdentifer ::= SEQUENCE {
	 *    algorithm OBJECT IDENTIFIER,
	 *    parameters ANY DEFINED BY algorithm OPTIONAL
	 * }
	 *
	 * EncryptedContent ::= OCTET STRING
	 *
	 * RecipientInfo ::= SEQUENCE {
	 *   version                     Version,
	 *   issuerAndSerialNumber       IssuerAndSerialNumber,
	 *   keyEncryptionAlgorithm      KeyEncryptionAlgorithmIdentifier,
	 *   encryptedKey                EncryptedKey
	 * }
	 *
	 * IssuerAndSerialNumber ::= SEQUENCE {
	 *   issuer                      Name,
	 *   serialNumber                CertificateSerialNumber
	 * }
	 *
	 * CertificateSerialNumber ::= INTEGER
	 *
	 * KeyEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
	 *
	 * EncryptedKey ::= OCTET STRING
	 */

	var forge$7 = forge$z;



	// shortcut for ASN.1 API
	var asn1$2 = forge$7.asn1;

	// shortcut for PKCS#7 API
	var p7v = forge$7.pkcs7asn1 = forge$7.pkcs7asn1 || {};
	forge$7.pkcs7 = forge$7.pkcs7 || {};
	forge$7.pkcs7.asn1 = p7v;

	var contentInfoValidator = {
	  name: 'ContentInfo',
	  tagClass: asn1$2.Class.UNIVERSAL,
	  type: asn1$2.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'ContentInfo.ContentType',
	    tagClass: asn1$2.Class.UNIVERSAL,
	    type: asn1$2.Type.OID,
	    constructed: false,
	    capture: 'contentType'
	  }, {
	    name: 'ContentInfo.content',
	    tagClass: asn1$2.Class.CONTEXT_SPECIFIC,
	    type: 0,
	    constructed: true,
	    optional: true,
	    captureAsn1: 'content'
	  }]
	};
	p7v.contentInfoValidator = contentInfoValidator;

	var encryptedContentInfoValidator = {
	  name: 'EncryptedContentInfo',
	  tagClass: asn1$2.Class.UNIVERSAL,
	  type: asn1$2.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'EncryptedContentInfo.contentType',
	    tagClass: asn1$2.Class.UNIVERSAL,
	    type: asn1$2.Type.OID,
	    constructed: false,
	    capture: 'contentType'
	  }, {
	    name: 'EncryptedContentInfo.contentEncryptionAlgorithm',
	    tagClass: asn1$2.Class.UNIVERSAL,
	    type: asn1$2.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'EncryptedContentInfo.contentEncryptionAlgorithm.algorithm',
	      tagClass: asn1$2.Class.UNIVERSAL,
	      type: asn1$2.Type.OID,
	      constructed: false,
	      capture: 'encAlgorithm'
	    }, {
	      name: 'EncryptedContentInfo.contentEncryptionAlgorithm.parameter',
	      tagClass: asn1$2.Class.UNIVERSAL,
	      captureAsn1: 'encParameter'
	    }]
	  }, {
	    name: 'EncryptedContentInfo.encryptedContent',
	    tagClass: asn1$2.Class.CONTEXT_SPECIFIC,
	    type: 0,
	    /* The PKCS#7 structure output by OpenSSL somewhat differs from what
	     * other implementations do generate.
	     *
	     * OpenSSL generates a structure like this:
	     * SEQUENCE {
	     *    ...
	     *    [0]
	     *       26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38
	     *       C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45
	     *       ...
	     * }
	     *
	     * Whereas other implementations (and this PKCS#7 module) generate:
	     * SEQUENCE {
	     *    ...
	     *    [0] {
	     *       OCTET STRING
	     *          26 DA 67 D2 17 9C 45 3C B1 2A A8 59 2F 29 33 38
	     *          C3 C3 DF 86 71 74 7A 19 9F 40 D0 29 BE 85 90 45
	     *          ...
	     *    }
	     * }
	     *
	     * In order to support both, we just capture the context specific
	     * field here.  The OCTET STRING bit is removed below.
	     */
	    capture: 'encryptedContent',
	    captureAsn1: 'encryptedContentAsn1'
	  }]
	};

	p7v.envelopedDataValidator = {
	  name: 'EnvelopedData',
	  tagClass: asn1$2.Class.UNIVERSAL,
	  type: asn1$2.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'EnvelopedData.Version',
	    tagClass: asn1$2.Class.UNIVERSAL,
	    type: asn1$2.Type.INTEGER,
	    constructed: false,
	    capture: 'version'
	  }, {
	    name: 'EnvelopedData.RecipientInfos',
	    tagClass: asn1$2.Class.UNIVERSAL,
	    type: asn1$2.Type.SET,
	    constructed: true,
	    captureAsn1: 'recipientInfos'
	  }].concat(encryptedContentInfoValidator)
	};

	p7v.encryptedDataValidator = {
	  name: 'EncryptedData',
	  tagClass: asn1$2.Class.UNIVERSAL,
	  type: asn1$2.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'EncryptedData.Version',
	    tagClass: asn1$2.Class.UNIVERSAL,
	    type: asn1$2.Type.INTEGER,
	    constructed: false,
	    capture: 'version'
	  }].concat(encryptedContentInfoValidator)
	};

	var signerValidator = {
	  name: 'SignerInfo',
	  tagClass: asn1$2.Class.UNIVERSAL,
	  type: asn1$2.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'SignerInfo.version',
	    tagClass: asn1$2.Class.UNIVERSAL,
	    type: asn1$2.Type.INTEGER,
	    constructed: false
	  }, {
	    name: 'SignerInfo.issuerAndSerialNumber',
	    tagClass: asn1$2.Class.UNIVERSAL,
	    type: asn1$2.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'SignerInfo.issuerAndSerialNumber.issuer',
	      tagClass: asn1$2.Class.UNIVERSAL,
	      type: asn1$2.Type.SEQUENCE,
	      constructed: true,
	      captureAsn1: 'issuer'
	    }, {
	      name: 'SignerInfo.issuerAndSerialNumber.serialNumber',
	      tagClass: asn1$2.Class.UNIVERSAL,
	      type: asn1$2.Type.INTEGER,
	      constructed: false,
	      capture: 'serial'
	    }]
	  }, {
	    name: 'SignerInfo.digestAlgorithm',
	    tagClass: asn1$2.Class.UNIVERSAL,
	    type: asn1$2.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'SignerInfo.digestAlgorithm.algorithm',
	      tagClass: asn1$2.Class.UNIVERSAL,
	      type: asn1$2.Type.OID,
	      constructed: false,
	      capture: 'digestAlgorithm'
	    }, {
	      name: 'SignerInfo.digestAlgorithm.parameter',
	      tagClass: asn1$2.Class.UNIVERSAL,
	      constructed: false,
	      captureAsn1: 'digestParameter',
	      optional: true
	    }]
	  }, {
	    name: 'SignerInfo.authenticatedAttributes',
	    tagClass: asn1$2.Class.CONTEXT_SPECIFIC,
	    type: 0,
	    constructed: true,
	    optional: true,
	    capture: 'authenticatedAttributes'
	  }, {
	    name: 'SignerInfo.digestEncryptionAlgorithm',
	    tagClass: asn1$2.Class.UNIVERSAL,
	    type: asn1$2.Type.SEQUENCE,
	    constructed: true,
	    capture: 'signatureAlgorithm'
	  }, {
	    name: 'SignerInfo.encryptedDigest',
	    tagClass: asn1$2.Class.UNIVERSAL,
	    type: asn1$2.Type.OCTETSTRING,
	    constructed: false,
	    capture: 'signature'
	  }, {
	    name: 'SignerInfo.unauthenticatedAttributes',
	    tagClass: asn1$2.Class.CONTEXT_SPECIFIC,
	    type: 1,
	    constructed: true,
	    optional: true,
	    capture: 'unauthenticatedAttributes'
	  }]
	};

	p7v.signedDataValidator = {
	  name: 'SignedData',
	  tagClass: asn1$2.Class.UNIVERSAL,
	  type: asn1$2.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'SignedData.Version',
	    tagClass: asn1$2.Class.UNIVERSAL,
	    type: asn1$2.Type.INTEGER,
	    constructed: false,
	    capture: 'version'
	  }, {
	    name: 'SignedData.DigestAlgorithms',
	    tagClass: asn1$2.Class.UNIVERSAL,
	    type: asn1$2.Type.SET,
	    constructed: true,
	    captureAsn1: 'digestAlgorithms'
	  },
	  contentInfoValidator,
	  {
	    name: 'SignedData.Certificates',
	    tagClass: asn1$2.Class.CONTEXT_SPECIFIC,
	    type: 0,
	    optional: true,
	    captureAsn1: 'certificates'
	  }, {
	    name: 'SignedData.CertificateRevocationLists',
	    tagClass: asn1$2.Class.CONTEXT_SPECIFIC,
	    type: 1,
	    optional: true,
	    captureAsn1: 'crls'
	  }, {
	    name: 'SignedData.SignerInfos',
	    tagClass: asn1$2.Class.UNIVERSAL,
	    type: asn1$2.Type.SET,
	    capture: 'signerInfos',
	    optional: true,
	    value: [signerValidator]
	  }]
	};

	p7v.recipientInfoValidator = {
	  name: 'RecipientInfo',
	  tagClass: asn1$2.Class.UNIVERSAL,
	  type: asn1$2.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'RecipientInfo.version',
	    tagClass: asn1$2.Class.UNIVERSAL,
	    type: asn1$2.Type.INTEGER,
	    constructed: false,
	    capture: 'version'
	  }, {
	    name: 'RecipientInfo.issuerAndSerial',
	    tagClass: asn1$2.Class.UNIVERSAL,
	    type: asn1$2.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'RecipientInfo.issuerAndSerial.issuer',
	      tagClass: asn1$2.Class.UNIVERSAL,
	      type: asn1$2.Type.SEQUENCE,
	      constructed: true,
	      captureAsn1: 'issuer'
	    }, {
	      name: 'RecipientInfo.issuerAndSerial.serialNumber',
	      tagClass: asn1$2.Class.UNIVERSAL,
	      type: asn1$2.Type.INTEGER,
	      constructed: false,
	      capture: 'serial'
	    }]
	  }, {
	    name: 'RecipientInfo.keyEncryptionAlgorithm',
	    tagClass: asn1$2.Class.UNIVERSAL,
	    type: asn1$2.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      name: 'RecipientInfo.keyEncryptionAlgorithm.algorithm',
	      tagClass: asn1$2.Class.UNIVERSAL,
	      type: asn1$2.Type.OID,
	      constructed: false,
	      capture: 'encAlgorithm'
	    }, {
	      name: 'RecipientInfo.keyEncryptionAlgorithm.parameter',
	      tagClass: asn1$2.Class.UNIVERSAL,
	      constructed: false,
	      captureAsn1: 'encParameter',
	      optional: true
	    }]
	  }, {
	    name: 'RecipientInfo.encryptedKey',
	    tagClass: asn1$2.Class.UNIVERSAL,
	    type: asn1$2.Type.OCTETSTRING,
	    constructed: false,
	    capture: 'encKey'
	  }]
	};

	/**
	 * Javascript implementation of mask generation function MGF1.
	 *
	 * @author Stefan Siegl
	 * @author Dave Longley
	 *
	 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
	 * Copyright (c) 2014 Digital Bazaar, Inc.
	 */

	var forge$6 = forge$z;


	forge$6.mgf = forge$6.mgf || {};
	var mgf1 = forge$6.mgf.mgf1 = forge$6.mgf1 = forge$6.mgf1 || {};

	/**
	 * Creates a MGF1 mask generation function object.
	 *
	 * @param md the message digest API to use (eg: forge.md.sha1.create()).
	 *
	 * @return a mask generation function object.
	 */
	mgf1.create = function(md) {
	  var mgf = {
	    /**
	     * Generate mask of specified length.
	     *
	     * @param {String} seed The seed for mask generation.
	     * @param maskLen Number of bytes to generate.
	     * @return {String} The generated mask.
	     */
	    generate: function(seed, maskLen) {
	      /* 2. Let T be the empty octet string. */
	      var t = new forge$6.util.ByteBuffer();

	      /* 3. For counter from 0 to ceil(maskLen / hLen), do the following: */
	      var len = Math.ceil(maskLen / md.digestLength);
	      for(var i = 0; i < len; i++) {
	        /* a. Convert counter to an octet string C of length 4 octets */
	        var c = new forge$6.util.ByteBuffer();
	        c.putInt32(i);

	        /* b. Concatenate the hash of the seed mgfSeed and C to the octet
	         * string T: */
	        md.start();
	        md.update(seed + c.getBytes());
	        t.putBuffer(md.digest());
	      }

	      /* Output the leading maskLen octets of T as the octet string mask. */
	      t.truncate(t.length() - maskLen);
	      return t.getBytes();
	    }
	  };

	  return mgf;
	};

	/**
	 * Node.js module for Forge mask generation functions.
	 *
	 * @author Stefan Siegl
	 *
	 * Copyright 2012 Stefan Siegl <stesie@brokenpipe.de>
	 */

	var forge$5 = forge$z;


	forge$5.mgf = forge$5.mgf || {};
	forge$5.mgf.mgf1 = forge$5.mgf1;

	/**
	 * Javascript implementation of PKCS#1 PSS signature padding.
	 *
	 * @author Stefan Siegl
	 *
	 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
	 */

	var forge$4 = forge$z;



	// shortcut for PSS API
	var pss = forge$4.pss = forge$4.pss || {};

	/**
	 * Creates a PSS signature scheme object.
	 *
	 * There are several ways to provide a salt for encoding:
	 *
	 * 1. Specify the saltLength only and the built-in PRNG will generate it.
	 * 2. Specify the saltLength and a custom PRNG with 'getBytesSync' defined that
	 *   will be used.
	 * 3. Specify the salt itself as a forge.util.ByteBuffer.
	 *
	 * @param options the options to use:
	 *          md the message digest object to use, a forge md instance.
	 *          mgf the mask generation function to use, a forge mgf instance.
	 *          [saltLength] the length of the salt in octets.
	 *          [prng] the pseudo-random number generator to use to produce a salt.
	 *          [salt] the salt to use when encoding.
	 *
	 * @return a signature scheme object.
	 */
	pss.create = function(options) {
	  // backwards compatibility w/legacy args: hash, mgf, sLen
	  if(arguments.length === 3) {
	    options = {
	      md: arguments[0],
	      mgf: arguments[1],
	      saltLength: arguments[2]
	    };
	  }

	  var hash = options.md;
	  var mgf = options.mgf;
	  var hLen = hash.digestLength;

	  var salt_ = options.salt || null;
	  if(typeof salt_ === 'string') {
	    // assume binary-encoded string
	    salt_ = forge$4.util.createBuffer(salt_);
	  }

	  var sLen;
	  if('saltLength' in options) {
	    sLen = options.saltLength;
	  } else if(salt_ !== null) {
	    sLen = salt_.length();
	  } else {
	    throw new Error('Salt length not specified or specific salt not given.');
	  }

	  if(salt_ !== null && salt_.length() !== sLen) {
	    throw new Error('Given salt length does not match length of given salt.');
	  }

	  var prng = options.prng || forge$4.random;

	  var pssobj = {};

	  /**
	   * Encodes a PSS signature.
	   *
	   * This function implements EMSA-PSS-ENCODE as per RFC 3447, section 9.1.1.
	   *
	   * @param md the message digest object with the hash to sign.
	   * @param modsBits the length of the RSA modulus in bits.
	   *
	   * @return the encoded message as a binary-encoded string of length
	   *           ceil((modBits - 1) / 8).
	   */
	  pssobj.encode = function(md, modBits) {
	    var i;
	    var emBits = modBits - 1;
	    var emLen = Math.ceil(emBits / 8);

	    /* 2. Let mHash = Hash(M), an octet string of length hLen. */
	    var mHash = md.digest().getBytes();

	    /* 3. If emLen < hLen + sLen + 2, output "encoding error" and stop. */
	    if(emLen < hLen + sLen + 2) {
	      throw new Error('Message is too long to encrypt.');
	    }

	    /* 4. Generate a random octet string salt of length sLen; if sLen = 0,
	     *    then salt is the empty string. */
	    var salt;
	    if(salt_ === null) {
	      salt = prng.getBytesSync(sLen);
	    } else {
	      salt = salt_.bytes();
	    }

	    /* 5. Let M' = (0x)00 00 00 00 00 00 00 00 || mHash || salt; */
	    var m_ = new forge$4.util.ByteBuffer();
	    m_.fillWithByte(0, 8);
	    m_.putBytes(mHash);
	    m_.putBytes(salt);

	    /* 6. Let H = Hash(M'), an octet string of length hLen. */
	    hash.start();
	    hash.update(m_.getBytes());
	    var h = hash.digest().getBytes();

	    /* 7. Generate an octet string PS consisting of emLen - sLen - hLen - 2
	     *    zero octets.  The length of PS may be 0. */
	    var ps = new forge$4.util.ByteBuffer();
	    ps.fillWithByte(0, emLen - sLen - hLen - 2);

	    /* 8. Let DB = PS || 0x01 || salt; DB is an octet string of length
	     *    emLen - hLen - 1. */
	    ps.putByte(0x01);
	    ps.putBytes(salt);
	    var db = ps.getBytes();

	    /* 9. Let dbMask = MGF(H, emLen - hLen - 1). */
	    var maskLen = emLen - hLen - 1;
	    var dbMask = mgf.generate(h, maskLen);

	    /* 10. Let maskedDB = DB \xor dbMask. */
	    var maskedDB = '';
	    for(i = 0; i < maskLen; i++) {
	      maskedDB += String.fromCharCode(db.charCodeAt(i) ^ dbMask.charCodeAt(i));
	    }

	    /* 11. Set the leftmost 8emLen - emBits bits of the leftmost octet in
	     *     maskedDB to zero. */
	    var mask = (0xFF00 >> (8 * emLen - emBits)) & 0xFF;
	    maskedDB = String.fromCharCode(maskedDB.charCodeAt(0) & ~mask) +
	      maskedDB.substr(1);

	    /* 12. Let EM = maskedDB || H || 0xbc.
	     * 13. Output EM. */
	    return maskedDB + h + String.fromCharCode(0xbc);
	  };

	  /**
	   * Verifies a PSS signature.
	   *
	   * This function implements EMSA-PSS-VERIFY as per RFC 3447, section 9.1.2.
	   *
	   * @param mHash the message digest hash, as a binary-encoded string, to
	   *         compare against the signature.
	   * @param em the encoded message, as a binary-encoded string
	   *          (RSA decryption result).
	   * @param modsBits the length of the RSA modulus in bits.
	   *
	   * @return true if the signature was verified, false if not.
	   */
	  pssobj.verify = function(mHash, em, modBits) {
	    var i;
	    var emBits = modBits - 1;
	    var emLen = Math.ceil(emBits / 8);

	    /* c. Convert the message representative m to an encoded message EM
	     *    of length emLen = ceil((modBits - 1) / 8) octets, where modBits
	     *    is the length in bits of the RSA modulus n */
	    em = em.substr(-emLen);

	    /* 3. If emLen < hLen + sLen + 2, output "inconsistent" and stop. */
	    if(emLen < hLen + sLen + 2) {
	      throw new Error('Inconsistent parameters to PSS signature verification.');
	    }

	    /* 4. If the rightmost octet of EM does not have hexadecimal value
	     *    0xbc, output "inconsistent" and stop. */
	    if(em.charCodeAt(emLen - 1) !== 0xbc) {
	      throw new Error('Encoded message does not end in 0xBC.');
	    }

	    /* 5. Let maskedDB be the leftmost emLen - hLen - 1 octets of EM, and
	     *    let H be the next hLen octets. */
	    var maskLen = emLen - hLen - 1;
	    var maskedDB = em.substr(0, maskLen);
	    var h = em.substr(maskLen, hLen);

	    /* 6. If the leftmost 8emLen - emBits bits of the leftmost octet in
	     *    maskedDB are not all equal to zero, output "inconsistent" and stop. */
	    var mask = (0xFF00 >> (8 * emLen - emBits)) & 0xFF;
	    if((maskedDB.charCodeAt(0) & mask) !== 0) {
	      throw new Error('Bits beyond keysize not zero as expected.');
	    }

	    /* 7. Let dbMask = MGF(H, emLen - hLen - 1). */
	    var dbMask = mgf.generate(h, maskLen);

	    /* 8. Let DB = maskedDB \xor dbMask. */
	    var db = '';
	    for(i = 0; i < maskLen; i++) {
	      db += String.fromCharCode(maskedDB.charCodeAt(i) ^ dbMask.charCodeAt(i));
	    }

	    /* 9. Set the leftmost 8emLen - emBits bits of the leftmost octet
	     * in DB to zero. */
	    db = String.fromCharCode(db.charCodeAt(0) & ~mask) + db.substr(1);

	    /* 10. If the emLen - hLen - sLen - 2 leftmost octets of DB are not zero
	     * or if the octet at position emLen - hLen - sLen - 1 (the leftmost
	     * position is "position 1") does not have hexadecimal value 0x01,
	     * output "inconsistent" and stop. */
	    var checkLen = emLen - hLen - sLen - 2;
	    for(i = 0; i < checkLen; i++) {
	      if(db.charCodeAt(i) !== 0x00) {
	        throw new Error('Leftmost octets not zero as expected');
	      }
	    }

	    if(db.charCodeAt(checkLen) !== 0x01) {
	      throw new Error('Inconsistent PSS signature, 0x01 marker not found');
	    }

	    /* 11. Let salt be the last sLen octets of DB. */
	    var salt = db.substr(-sLen);

	    /* 12.  Let M' = (0x)00 00 00 00 00 00 00 00 || mHash || salt */
	    var m_ = new forge$4.util.ByteBuffer();
	    m_.fillWithByte(0, 8);
	    m_.putBytes(mHash);
	    m_.putBytes(salt);

	    /* 13. Let H' = Hash(M'), an octet string of length hLen. */
	    hash.start();
	    hash.update(m_.getBytes());
	    var h_ = hash.digest().getBytes();

	    /* 14. If H = H', output "consistent." Otherwise, output "inconsistent." */
	    return h === h_;
	  };

	  return pssobj;
	};

	/**
	 * Javascript implementation of X.509 and related components (such as
	 * Certification Signing Requests) of a Public Key Infrastructure.
	 *
	 * @author Dave Longley
	 *
	 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
	 *
	 * The ASN.1 representation of an X.509v3 certificate is as follows
	 * (see RFC 2459):
	 *
	 * Certificate ::= SEQUENCE {
	 *   tbsCertificate       TBSCertificate,
	 *   signatureAlgorithm   AlgorithmIdentifier,
	 *   signatureValue       BIT STRING
	 * }
	 *
	 * TBSCertificate ::= SEQUENCE {
	 *   version         [0]  EXPLICIT Version DEFAULT v1,
	 *   serialNumber         CertificateSerialNumber,
	 *   signature            AlgorithmIdentifier,
	 *   issuer               Name,
	 *   validity             Validity,
	 *   subject              Name,
	 *   subjectPublicKeyInfo SubjectPublicKeyInfo,
	 *   issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,
	 *                        -- If present, version shall be v2 or v3
	 *   subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
	 *                        -- If present, version shall be v2 or v3
	 *   extensions      [3]  EXPLICIT Extensions OPTIONAL
	 *                        -- If present, version shall be v3
	 * }
	 *
	 * Version ::= INTEGER  { v1(0), v2(1), v3(2) }
	 *
	 * CertificateSerialNumber ::= INTEGER
	 *
	 * Name ::= CHOICE {
	 *   // only one possible choice for now
	 *   RDNSequence
	 * }
	 *
	 * RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
	 *
	 * RelativeDistinguishedName ::= SET OF AttributeTypeAndValue
	 *
	 * AttributeTypeAndValue ::= SEQUENCE {
	 *   type     AttributeType,
	 *   value    AttributeValue
	 * }
	 * AttributeType ::= OBJECT IDENTIFIER
	 * AttributeValue ::= ANY DEFINED BY AttributeType
	 *
	 * Validity ::= SEQUENCE {
	 *   notBefore      Time,
	 *   notAfter       Time
	 * }
	 *
	 * Time ::= CHOICE {
	 *   utcTime        UTCTime,
	 *   generalTime    GeneralizedTime
	 * }
	 *
	 * UniqueIdentifier ::= BIT STRING
	 *
	 * SubjectPublicKeyInfo ::= SEQUENCE {
	 *   algorithm            AlgorithmIdentifier,
	 *   subjectPublicKey     BIT STRING
	 * }
	 *
	 * Extensions ::= SEQUENCE SIZE (1..MAX) OF Extension
	 *
	 * Extension ::= SEQUENCE {
	 *   extnID      OBJECT IDENTIFIER,
	 *   critical    BOOLEAN DEFAULT FALSE,
	 *   extnValue   OCTET STRING
	 * }
	 *
	 * The only key algorithm currently supported for PKI is RSA.
	 *
	 * RSASSA-PSS signatures are described in RFC 3447 and RFC 4055.
	 *
	 * PKCS#10 v1.7 describes certificate signing requests:
	 *
	 * CertificationRequestInfo:
	 *
	 * CertificationRequestInfo ::= SEQUENCE {
	 *   version       INTEGER { v1(0) } (v1,...),
	 *   subject       Name,
	 *   subjectPKInfo SubjectPublicKeyInfo{{ PKInfoAlgorithms }},
	 *   attributes    [0] Attributes{{ CRIAttributes }}
	 * }
	 *
	 * Attributes { ATTRIBUTE:IOSet } ::= SET OF Attribute{{ IOSet }}
	 *
	 * CRIAttributes  ATTRIBUTE  ::= {
	 *   ... -- add any locally defined attributes here -- }
	 *
	 * Attribute { ATTRIBUTE:IOSet } ::= SEQUENCE {
	 *   type   ATTRIBUTE.&id({IOSet}),
	 *   values SET SIZE(1..MAX) OF ATTRIBUTE.&Type({IOSet}{@type})
	 * }
	 *
	 * CertificationRequest ::= SEQUENCE {
	 *   certificationRequestInfo CertificationRequestInfo,
	 *   signatureAlgorithm AlgorithmIdentifier{{ SignatureAlgorithms }},
	 *   signature          BIT STRING
	 * }
	 */

	var forge$3 = forge$z;











	// shortcut for asn.1 API
	var asn1$1 = forge$3.asn1;

	/* Public Key Infrastructure (PKI) implementation. */
	var pki$1 = forge$3.pki = forge$3.pki || {};
	var oids = pki$1.oids;

	// short name OID mappings
	var _shortNames = {};
	_shortNames['CN'] = oids['commonName'];
	_shortNames['commonName'] = 'CN';
	_shortNames['C'] = oids['countryName'];
	_shortNames['countryName'] = 'C';
	_shortNames['L'] = oids['localityName'];
	_shortNames['localityName'] = 'L';
	_shortNames['ST'] = oids['stateOrProvinceName'];
	_shortNames['stateOrProvinceName'] = 'ST';
	_shortNames['O'] = oids['organizationName'];
	_shortNames['organizationName'] = 'O';
	_shortNames['OU'] = oids['organizationalUnitName'];
	_shortNames['organizationalUnitName'] = 'OU';
	_shortNames['E'] = oids['emailAddress'];
	_shortNames['emailAddress'] = 'E';

	// validator for an SubjectPublicKeyInfo structure
	// Note: Currently only works with an RSA public key
	var publicKeyValidator = forge$3.pki.rsa.publicKeyValidator;

	// validator for an X.509v3 certificate
	var x509CertificateValidator = {
	  name: 'Certificate',
	  tagClass: asn1$1.Class.UNIVERSAL,
	  type: asn1$1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'Certificate.TBSCertificate',
	    tagClass: asn1$1.Class.UNIVERSAL,
	    type: asn1$1.Type.SEQUENCE,
	    constructed: true,
	    captureAsn1: 'tbsCertificate',
	    value: [{
	      name: 'Certificate.TBSCertificate.version',
	      tagClass: asn1$1.Class.CONTEXT_SPECIFIC,
	      type: 0,
	      constructed: true,
	      optional: true,
	      value: [{
	        name: 'Certificate.TBSCertificate.version.integer',
	        tagClass: asn1$1.Class.UNIVERSAL,
	        type: asn1$1.Type.INTEGER,
	        constructed: false,
	        capture: 'certVersion'
	      }]
	    }, {
	      name: 'Certificate.TBSCertificate.serialNumber',
	      tagClass: asn1$1.Class.UNIVERSAL,
	      type: asn1$1.Type.INTEGER,
	      constructed: false,
	      capture: 'certSerialNumber'
	    }, {
	      name: 'Certificate.TBSCertificate.signature',
	      tagClass: asn1$1.Class.UNIVERSAL,
	      type: asn1$1.Type.SEQUENCE,
	      constructed: true,
	      value: [{
	        name: 'Certificate.TBSCertificate.signature.algorithm',
	        tagClass: asn1$1.Class.UNIVERSAL,
	        type: asn1$1.Type.OID,
	        constructed: false,
	        capture: 'certinfoSignatureOid'
	      }, {
	        name: 'Certificate.TBSCertificate.signature.parameters',
	        tagClass: asn1$1.Class.UNIVERSAL,
	        optional: true,
	        captureAsn1: 'certinfoSignatureParams'
	      }]
	    }, {
	      name: 'Certificate.TBSCertificate.issuer',
	      tagClass: asn1$1.Class.UNIVERSAL,
	      type: asn1$1.Type.SEQUENCE,
	      constructed: true,
	      captureAsn1: 'certIssuer'
	    }, {
	      name: 'Certificate.TBSCertificate.validity',
	      tagClass: asn1$1.Class.UNIVERSAL,
	      type: asn1$1.Type.SEQUENCE,
	      constructed: true,
	      // Note: UTC and generalized times may both appear so the capture
	      // names are based on their detected order, the names used below
	      // are only for the common case, which validity time really means
	      // "notBefore" and which means "notAfter" will be determined by order
	      value: [{
	        // notBefore (Time) (UTC time case)
	        name: 'Certificate.TBSCertificate.validity.notBefore (utc)',
	        tagClass: asn1$1.Class.UNIVERSAL,
	        type: asn1$1.Type.UTCTIME,
	        constructed: false,
	        optional: true,
	        capture: 'certValidity1UTCTime'
	      }, {
	        // notBefore (Time) (generalized time case)
	        name: 'Certificate.TBSCertificate.validity.notBefore (generalized)',
	        tagClass: asn1$1.Class.UNIVERSAL,
	        type: asn1$1.Type.GENERALIZEDTIME,
	        constructed: false,
	        optional: true,
	        capture: 'certValidity2GeneralizedTime'
	      }, {
	        // notAfter (Time) (only UTC time is supported)
	        name: 'Certificate.TBSCertificate.validity.notAfter (utc)',
	        tagClass: asn1$1.Class.UNIVERSAL,
	        type: asn1$1.Type.UTCTIME,
	        constructed: false,
	        optional: true,
	        capture: 'certValidity3UTCTime'
	      }, {
	        // notAfter (Time) (only UTC time is supported)
	        name: 'Certificate.TBSCertificate.validity.notAfter (generalized)',
	        tagClass: asn1$1.Class.UNIVERSAL,
	        type: asn1$1.Type.GENERALIZEDTIME,
	        constructed: false,
	        optional: true,
	        capture: 'certValidity4GeneralizedTime'
	      }]
	    }, {
	      // Name (subject) (RDNSequence)
	      name: 'Certificate.TBSCertificate.subject',
	      tagClass: asn1$1.Class.UNIVERSAL,
	      type: asn1$1.Type.SEQUENCE,
	      constructed: true,
	      captureAsn1: 'certSubject'
	    },
	    // SubjectPublicKeyInfo
	    publicKeyValidator,
	    {
	      // issuerUniqueID (optional)
	      name: 'Certificate.TBSCertificate.issuerUniqueID',
	      tagClass: asn1$1.Class.CONTEXT_SPECIFIC,
	      type: 1,
	      constructed: true,
	      optional: true,
	      value: [{
	        name: 'Certificate.TBSCertificate.issuerUniqueID.id',
	        tagClass: asn1$1.Class.UNIVERSAL,
	        type: asn1$1.Type.BITSTRING,
	        constructed: false,
	        // TODO: support arbitrary bit length ids
	        captureBitStringValue: 'certIssuerUniqueId'
	      }]
	    }, {
	      // subjectUniqueID (optional)
	      name: 'Certificate.TBSCertificate.subjectUniqueID',
	      tagClass: asn1$1.Class.CONTEXT_SPECIFIC,
	      type: 2,
	      constructed: true,
	      optional: true,
	      value: [{
	        name: 'Certificate.TBSCertificate.subjectUniqueID.id',
	        tagClass: asn1$1.Class.UNIVERSAL,
	        type: asn1$1.Type.BITSTRING,
	        constructed: false,
	        // TODO: support arbitrary bit length ids
	        captureBitStringValue: 'certSubjectUniqueId'
	      }]
	    }, {
	      // Extensions (optional)
	      name: 'Certificate.TBSCertificate.extensions',
	      tagClass: asn1$1.Class.CONTEXT_SPECIFIC,
	      type: 3,
	      constructed: true,
	      captureAsn1: 'certExtensions',
	      optional: true
	    }]
	  }, {
	    // AlgorithmIdentifier (signature algorithm)
	    name: 'Certificate.signatureAlgorithm',
	    tagClass: asn1$1.Class.UNIVERSAL,
	    type: asn1$1.Type.SEQUENCE,
	    constructed: true,
	    value: [{
	      // algorithm
	      name: 'Certificate.signatureAlgorithm.algorithm',
	      tagClass: asn1$1.Class.UNIVERSAL,
	      type: asn1$1.Type.OID,
	      constructed: false,
	      capture: 'certSignatureOid'
	    }, {
	      name: 'Certificate.TBSCertificate.signature.parameters',
	      tagClass: asn1$1.Class.UNIVERSAL,
	      optional: true,
	      captureAsn1: 'certSignatureParams'
	    }]
	  }, {
	    // SignatureValue
	    name: 'Certificate.signatureValue',
	    tagClass: asn1$1.Class.UNIVERSAL,
	    type: asn1$1.Type.BITSTRING,
	    constructed: false,
	    captureBitStringValue: 'certSignature'
	  }]
	};

	var rsassaPssParameterValidator = {
	  name: 'rsapss',
	  tagClass: asn1$1.Class.UNIVERSAL,
	  type: asn1$1.Type.SEQUENCE,
	  constructed: true,
	  value: [{
	    name: 'rsapss.hashAlgorithm',
	    tagClass: asn1$1.Class.CONTEXT_SPECIFIC,
	    type: 0,
	    constructed: true,
	    value: [{
	      name: 'rsapss.hashAlgorithm.AlgorithmIdentifier',
	      tagClass: asn1$1.Class.UNIVERSAL,
	      type: asn1$1.Class.SEQUENCE,
	      constructed: true,
	      optional: true,
	      value: [{
	        name: 'rsapss.hashAlgorithm.AlgorithmIdentifier.algorithm',
	        tagClass: asn1$1.Class.UNIVERSAL,
	        type: asn1$1.Type.OID,
	        constructed: false,
	        capture: 'hashOid'
	        /* parameter block omitted, for SHA1 NULL anyhow. */
	      }]
	    }]
	  }, {
	    name: 'rsapss.maskGenAlgorithm',
	    tagClass: asn1$1.Class.CONTEXT_SPECIFIC,
	    type: 1,
	    constructed: true,
	    value: [{
	      name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier',
	      tagClass: asn1$1.Class.UNIVERSAL,
	      type: asn1$1.Class.SEQUENCE,
	      constructed: true,
	      optional: true,
	      value: [{
	        name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier.algorithm',
	        tagClass: asn1$1.Class.UNIVERSAL,
	        type: asn1$1.Type.OID,
	        constructed: false,
	        capture: 'maskGenOid'
	      }, {
	        name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier.params',
	        tagClass: asn1$1.Class.UNIVERSAL,
	        type: asn1$1.Type.SEQUENCE,
	        constructed: true,
	        value: [{
	          name: 'rsapss.maskGenAlgorithm.AlgorithmIdentifier.params.algorithm',
	          tagClass: asn1$1.Class.UNIVERSAL,
	          type: asn1$1.Type.OID,
	          constructed: false,
	          capture: 'maskGenHashOid'
	          /* parameter block omitted, for SHA1 NULL anyhow. */
	        }]
	      }]
	    }]
	  }, {
	    name: 'rsapss.saltLength',
	    tagClass: asn1$1.Class.CONTEXT_SPECIFIC,
	    type: 2,
	    optional: true,
	    value: [{
	      name: 'rsapss.saltLength.saltLength',
	      tagClass: asn1$1.Class.UNIVERSAL,
	      type: asn1$1.Class.INTEGER,
	      constructed: false,
	      capture: 'saltLength'
	    }]
	  }, {
	    name: 'rsapss.trailerField',
	    tagClass: asn1$1.Class.CONTEXT_SPECIFIC,
	    type: 3,
	    optional: true,
	    value: [{
	      name: 'rsapss.trailer.trailer',
	      tagClass: asn1$1.Class.UNIVERSAL,
	      type: asn1$1.Class.INTEGER,
	      constructed: false,
	      capture: 'trailer'
	    }]
	  }]
	};

	// validator for a CertificationRequestInfo structure
	var certificationRequestInfoValidator = {
	  name: 'CertificationRequestInfo',
	  tagClass: asn1$1.Class.UNIVERSAL,
	  type: asn1$1.Type.SEQUENCE,
	  constructed: true,
	  captureAsn1: 'certificationRequestInfo',
	  value: [{
	    name: 'CertificationRequestInfo.integer',
	    tagClass: asn1$1.Class.UNIVERSAL,
	    type: asn1$1.Type.INTEGER,
	    constructed: false,
	    capture: 'certificationRequestInfoVersion'
	  }, {
	    // Name (subject) (RDNSequence)
	    name: 'CertificationRequestInfo.subject',
	    tagClass: asn1$1.Class.UNIVERSAL,
	    type: asn1$1.Type.SEQUENCE,
	    constructed: true,
	    captureAsn1: 'certificationRequestInfoSubject'
	  },
	  // SubjectPublicKeyInfo
	  publicKeyValidator,
	  {
	    name: 'CertificationRequestInfo.attributes',
	    tagClass: asn1$1.Class.CONTEXT_SPECIFIC,
	    type: 0,
	    constructed: true,
	    optional: true,
	    capture: 'certificationRequestInfoAttributes',
	    value: [{
	      name: 'CertificationRequestInfo.attributes',
	      tagClass: asn1$1.Class.UNIVERSAL,
	      type: asn1$1.Type.SEQUENCE,
	      constructed: true,
	      value: [{
	        name: 'CertificationRequestInfo.attributes.type',
	        tagClass: asn1$1.Class.UNIVERSAL,
	        type: asn1$1.Type.OID,
	        constructed: false
	      }, {
	        name: 'CertificationRequestInfo.attributes.value',
	        tagClass: asn1$1.Class.UNIVERSAL,
	        type: asn1$1.Type.SET,
	        constructed: true
	      }]
	    }]
	  }]
	};

	// validator for a CertificationRequest structure
	var certificationRequestValidator = {
	  name: 'CertificationRequest',
	  tagClass: asn1$1.Class.UNIVERSAL,
	  type: asn1$1.Type.SEQUENCE,
	  constructed: true,
	  captureAsn1: 'csr',
	  value: [
	    certificationRequestInfoValidator, {
	      // AlgorithmIdentifier (signature algorithm)
	      name: 'CertificationRequest.signatureAlgorithm',
	      tagClass: asn1$1.Class.UNIVERSAL,
	      type: asn1$1.Type.SEQUENCE,
	      constructed: true,
	      value: [{
	        // algorithm
	        name: 'CertificationRequest.signatureAlgorithm.algorithm',
	        tagClass: asn1$1.Class.UNIVERSAL,
	        type: asn1$1.Type.OID,
	        constructed: false,
	        capture: 'csrSignatureOid'
	      }, {
	        name: 'CertificationRequest.signatureAlgorithm.parameters',
	        tagClass: asn1$1.Class.UNIVERSAL,
	        optional: true,
	        captureAsn1: 'csrSignatureParams'
	      }]
	    }, {
	      // signature
	      name: 'CertificationRequest.signature',
	      tagClass: asn1$1.Class.UNIVERSAL,
	      type: asn1$1.Type.BITSTRING,
	      constructed: false,
	      captureBitStringValue: 'csrSignature'
	    }
	  ]
	};

	/**
	 * Converts an RDNSequence of ASN.1 DER-encoded RelativeDistinguishedName
	 * sets into an array with objects that have type and value properties.
	 *
	 * @param rdn the RDNSequence to convert.
	 * @param md a message digest to append type and value to if provided.
	 */
	pki$1.RDNAttributesAsArray = function(rdn, md) {
	  var rval = [];

	  // each value in 'rdn' in is a SET of RelativeDistinguishedName
	  var set, attr, obj;
	  for(var si = 0; si < rdn.value.length; ++si) {
	    // get the RelativeDistinguishedName set
	    set = rdn.value[si];

	    // each value in the SET is an AttributeTypeAndValue sequence
	    // containing first a type (an OID) and second a value (defined by
	    // the OID)
	    for(var i = 0; i < set.value.length; ++i) {
	      obj = {};
	      attr = set.value[i];
	      obj.type = asn1$1.derToOid(attr.value[0].value);
	      obj.value = attr.value[1].value;
	      obj.valueTagClass = attr.value[1].type;
	      // if the OID is known, get its name and short name
	      if(obj.type in oids) {
	        obj.name = oids[obj.type];
	        if(obj.name in _shortNames) {
	          obj.shortName = _shortNames[obj.name];
	        }
	      }
	      if(md) {
	        md.update(obj.type);
	        md.update(obj.value);
	      }
	      rval.push(obj);
	    }
	  }

	  return rval;
	};

	/**
	 * Converts ASN.1 CRIAttributes into an array with objects that have type and
	 * value properties.
	 *
	 * @param attributes the CRIAttributes to convert.
	 */
	pki$1.CRIAttributesAsArray = function(attributes) {
	  var rval = [];

	  // each value in 'attributes' in is a SEQUENCE with an OID and a SET
	  for(var si = 0; si < attributes.length; ++si) {
	    // get the attribute sequence
	    var seq = attributes[si];

	    // each value in the SEQUENCE containing first a type (an OID) and
	    // second a set of values (defined by the OID)
	    var type = asn1$1.derToOid(seq.value[0].value);
	    var values = seq.value[1].value;
	    for(var vi = 0; vi < values.length; ++vi) {
	      var obj = {};
	      obj.type = type;
	      obj.value = values[vi].value;
	      obj.valueTagClass = values[vi].type;
	      // if the OID is known, get its name and short name
	      if(obj.type in oids) {
	        obj.name = oids[obj.type];
	        if(obj.name in _shortNames) {
	          obj.shortName = _shortNames[obj.name];
	        }
	      }
	      // parse extensions
	      if(obj.type === oids.extensionRequest) {
	        obj.extensions = [];
	        for(var ei = 0; ei < obj.value.length; ++ei) {
	          obj.extensions.push(pki$1.certificateExtensionFromAsn1(obj.value[ei]));
	        }
	      }
	      rval.push(obj);
	    }
	  }

	  return rval;
	};

	/**
	 * Gets an issuer or subject attribute from its name, type, or short name.
	 *
	 * @param obj the issuer or subject object.
	 * @param options a short name string or an object with:
	 *          shortName the short name for the attribute.
	 *          name the name for the attribute.
	 *          type the type for the attribute.
	 *
	 * @return the attribute.
	 */
	function _getAttribute(obj, options) {
	  if(typeof options === 'string') {
	    options = {shortName: options};
	  }

	  var rval = null;
	  var attr;
	  for(var i = 0; rval === null && i < obj.attributes.length; ++i) {
	    attr = obj.attributes[i];
	    if(options.type && options.type === attr.type) {
	      rval = attr;
	    } else if(options.name && options.name === attr.name) {
	      rval = attr;
	    } else if(options.shortName && options.shortName === attr.shortName) {
	      rval = attr;
	    }
	  }
	  return rval;
	}

	/**
	 * Converts signature parameters from ASN.1 structure.
	 *
	 * Currently only RSASSA-PSS supported.  The PKCS#1 v1.5 signature scheme had
	 * no parameters.
	 *
	 * RSASSA-PSS-params  ::=  SEQUENCE  {
	 *   hashAlgorithm      [0] HashAlgorithm DEFAULT
	 *                             sha1Identifier,
	 *   maskGenAlgorithm   [1] MaskGenAlgorithm DEFAULT
	 *                             mgf1SHA1Identifier,
	 *   saltLength         [2] INTEGER DEFAULT 20,
	 *   trailerField       [3] INTEGER DEFAULT 1
	 * }
	 *
	 * HashAlgorithm  ::=  AlgorithmIdentifier
	 *
	 * MaskGenAlgorithm  ::=  AlgorithmIdentifier
	 *
	 * AlgorithmIdentifer ::= SEQUENCE {
	 *   algorithm OBJECT IDENTIFIER,
	 *   parameters ANY DEFINED BY algorithm OPTIONAL
	 * }
	 *
	 * @param oid The OID specifying the signature algorithm
	 * @param obj The ASN.1 structure holding the parameters
	 * @param fillDefaults Whether to use return default values where omitted
	 * @return signature parameter object
	 */
	var _readSignatureParameters = function(oid, obj, fillDefaults) {
	  var params = {};

	  if(oid !== oids['RSASSA-PSS']) {
	    return params;
	  }

	  if(fillDefaults) {
	    params = {
	      hash: {
	        algorithmOid: oids['sha1']
	      },
	      mgf: {
	        algorithmOid: oids['mgf1'],
	        hash: {
	          algorithmOid: oids['sha1']
	        }
	      },
	      saltLength: 20
	    };
	  }

	  var capture = {};
	  var errors = [];
	  if(!asn1$1.validate(obj, rsassaPssParameterValidator, capture, errors)) {
	    var error = new Error('Cannot read RSASSA-PSS parameter block.');
	    error.errors = errors;
	    throw error;
	  }

	  if(capture.hashOid !== undefined) {
	    params.hash = params.hash || {};
	    params.hash.algorithmOid = asn1$1.derToOid(capture.hashOid);
	  }

	  if(capture.maskGenOid !== undefined) {
	    params.mgf = params.mgf || {};
	    params.mgf.algorithmOid = asn1$1.derToOid(capture.maskGenOid);
	    params.mgf.hash = params.mgf.hash || {};
	    params.mgf.hash.algorithmOid = asn1$1.derToOid(capture.maskGenHashOid);
	  }

	  if(capture.saltLength !== undefined) {
	    params.saltLength = capture.saltLength.charCodeAt(0);
	  }

	  return params;
	};

	/**
	 * Create signature digest for OID.
	 *
	 * @param options
	 *   signatureOid: the OID specifying the signature algorithm.
	 *   type: a human readable type for error messages
	 * @return a created md instance. throws if unknown oid.
	 */
	var _createSignatureDigest = function(options) {
	  switch(oids[options.signatureOid]) {
	    case 'sha1WithRSAEncryption':
	    // deprecated alias
	    case 'sha1WithRSASignature':
	      return forge$3.md.sha1.create();
	    case 'md5WithRSAEncryption':
	      return forge$3.md.md5.create();
	    case 'sha256WithRSAEncryption':
	      return forge$3.md.sha256.create();
	    case 'sha384WithRSAEncryption':
	      return forge$3.md.sha384.create();
	    case 'sha512WithRSAEncryption':
	      return forge$3.md.sha512.create();
	    case 'RSASSA-PSS':
	      return forge$3.md.sha256.create();
	    default:
	      var error = new Error(
	        'Could not compute ' + options.type + ' digest. ' +
	        'Unknown signature OID.');
	      error.signatureOid = options.signatureOid;
	      throw error;
	  }
	};

	/**
	 * Verify signature on certificate or CSR.
	 *
	 * @param options:
	 *   certificate the certificate or CSR to verify.
	 *   md the signature digest.
	 *   signature the signature
	 * @return a created md instance. throws if unknown oid.
	 */
	var _verifySignature = function(options) {
	  var cert = options.certificate;
	  var scheme;

	  switch(cert.signatureOid) {
	    case oids.sha1WithRSAEncryption:
	    // deprecated alias
	    case oids.sha1WithRSASignature:
	      /* use PKCS#1 v1.5 padding scheme */
	      break;
	    case oids['RSASSA-PSS']:
	      var hash, mgf;

	      /* initialize mgf */
	      hash = oids[cert.signatureParameters.mgf.hash.algorithmOid];
	      if(hash === undefined || forge$3.md[hash] === undefined) {
	        var error = new Error('Unsupported MGF hash function.');
	        error.oid = cert.signatureParameters.mgf.hash.algorithmOid;
	        error.name = hash;
	        throw error;
	      }

	      mgf = oids[cert.signatureParameters.mgf.algorithmOid];
	      if(mgf === undefined || forge$3.mgf[mgf] === undefined) {
	        var error = new Error('Unsupported MGF function.');
	        error.oid = cert.signatureParameters.mgf.algorithmOid;
	        error.name = mgf;
	        throw error;
	      }

	      mgf = forge$3.mgf[mgf].create(forge$3.md[hash].create());

	      /* initialize hash function */
	      hash = oids[cert.signatureParameters.hash.algorithmOid];
	      if(hash === undefined || forge$3.md[hash] === undefined) {
	        var error = new Error('Unsupported RSASSA-PSS hash function.');
	        error.oid = cert.signatureParameters.hash.algorithmOid;
	        error.name = hash;
	        throw error;
	      }

	      scheme = forge$3.pss.create(
	        forge$3.md[hash].create(), mgf, cert.signatureParameters.saltLength
	      );
	      break;
	  }

	  // verify signature on cert using public key
	  return cert.publicKey.verify(
	    options.md.digest().getBytes(), options.signature, scheme
	  );
	};

	/**
	 * Converts an X.509 certificate from PEM format.
	 *
	 * Note: If the certificate is to be verified then compute hash should
	 * be set to true. This will scan the TBSCertificate part of the ASN.1
	 * object while it is converted so it doesn't need to be converted back
	 * to ASN.1-DER-encoding later.
	 *
	 * @param pem the PEM-formatted certificate.
	 * @param computeHash true to compute the hash for verification.
	 * @param strict true to be strict when checking ASN.1 value lengths, false to
	 *          allow truncated values (default: true).
	 *
	 * @return the certificate.
	 */
	pki$1.certificateFromPem = function(pem, computeHash, strict) {
	  var msg = forge$3.pem.decode(pem)[0];

	  if(msg.type !== 'CERTIFICATE' &&
	    msg.type !== 'X509 CERTIFICATE' &&
	    msg.type !== 'TRUSTED CERTIFICATE') {
	    var error = new Error(
	      'Could not convert certificate from PEM; PEM header type ' +
	      'is not "CERTIFICATE", "X509 CERTIFICATE", or "TRUSTED CERTIFICATE".');
	    error.headerType = msg.type;
	    throw error;
	  }
	  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
	    throw new Error(
	      'Could not convert certificate from PEM; PEM is encrypted.');
	  }

	  // convert DER to ASN.1 object
	  var obj = asn1$1.fromDer(msg.body, strict);

	  return pki$1.certificateFromAsn1(obj, computeHash);
	};

	/**
	 * Converts an X.509 certificate to PEM format.
	 *
	 * @param cert the certificate.
	 * @param maxline the maximum characters per line, defaults to 64.
	 *
	 * @return the PEM-formatted certificate.
	 */
	pki$1.certificateToPem = function(cert, maxline) {
	  // convert to ASN.1, then DER, then PEM-encode
	  var msg = {
	    type: 'CERTIFICATE',
	    body: asn1$1.toDer(pki$1.certificateToAsn1(cert)).getBytes()
	  };
	  return forge$3.pem.encode(msg, {maxline: maxline});
	};

	/**
	 * Converts an RSA public key from PEM format.
	 *
	 * @param pem the PEM-formatted public key.
	 *
	 * @return the public key.
	 */
	pki$1.publicKeyFromPem = function(pem) {
	  var msg = forge$3.pem.decode(pem)[0];

	  if(msg.type !== 'PUBLIC KEY' && msg.type !== 'RSA PUBLIC KEY') {
	    var error = new Error('Could not convert public key from PEM; PEM header ' +
	      'type is not "PUBLIC KEY" or "RSA PUBLIC KEY".');
	    error.headerType = msg.type;
	    throw error;
	  }
	  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
	    throw new Error('Could not convert public key from PEM; PEM is encrypted.');
	  }

	  // convert DER to ASN.1 object
	  var obj = asn1$1.fromDer(msg.body);

	  return pki$1.publicKeyFromAsn1(obj);
	};

	/**
	 * Converts an RSA public key to PEM format (using a SubjectPublicKeyInfo).
	 *
	 * @param key the public key.
	 * @param maxline the maximum characters per line, defaults to 64.
	 *
	 * @return the PEM-formatted public key.
	 */
	pki$1.publicKeyToPem = function(key, maxline) {
	  // convert to ASN.1, then DER, then PEM-encode
	  var msg = {
	    type: 'PUBLIC KEY',
	    body: asn1$1.toDer(pki$1.publicKeyToAsn1(key)).getBytes()
	  };
	  return forge$3.pem.encode(msg, {maxline: maxline});
	};

	/**
	 * Converts an RSA public key to PEM format (using an RSAPublicKey).
	 *
	 * @param key the public key.
	 * @param maxline the maximum characters per line, defaults to 64.
	 *
	 * @return the PEM-formatted public key.
	 */
	pki$1.publicKeyToRSAPublicKeyPem = function(key, maxline) {
	  // convert to ASN.1, then DER, then PEM-encode
	  var msg = {
	    type: 'RSA PUBLIC KEY',
	    body: asn1$1.toDer(pki$1.publicKeyToRSAPublicKey(key)).getBytes()
	  };
	  return forge$3.pem.encode(msg, {maxline: maxline});
	};

	/**
	 * Gets a fingerprint for the given public key.
	 *
	 * @param options the options to use.
	 *          [md] the message digest object to use (defaults to forge.md.sha1).
	 *          [type] the type of fingerprint, such as 'RSAPublicKey',
	 *            'SubjectPublicKeyInfo' (defaults to 'RSAPublicKey').
	 *          [encoding] an alternative output encoding, such as 'hex'
	 *            (defaults to none, outputs a byte buffer).
	 *          [delimiter] the delimiter to use between bytes for 'hex' encoded
	 *            output, eg: ':' (defaults to none).
	 *
	 * @return the fingerprint as a byte buffer or other encoding based on options.
	 */
	pki$1.getPublicKeyFingerprint = function(key, options) {
	  options = options || {};
	  var md = options.md || forge$3.md.sha1.create();
	  var type = options.type || 'RSAPublicKey';

	  var bytes;
	  switch(type) {
	    case 'RSAPublicKey':
	      bytes = asn1$1.toDer(pki$1.publicKeyToRSAPublicKey(key)).getBytes();
	      break;
	    case 'SubjectPublicKeyInfo':
	      bytes = asn1$1.toDer(pki$1.publicKeyToAsn1(key)).getBytes();
	      break;
	    default:
	      throw new Error('Unknown fingerprint type "' + options.type + '".');
	  }

	  // hash public key bytes
	  md.start();
	  md.update(bytes);
	  var digest = md.digest();
	  if(options.encoding === 'hex') {
	    var hex = digest.toHex();
	    if(options.delimiter) {
	      return hex.match(/.{2}/g).join(options.delimiter);
	    }
	    return hex;
	  } else if(options.encoding === 'binary') {
	    return digest.getBytes();
	  } else if(options.encoding) {
	    throw new Error('Unknown encoding "' + options.encoding + '".');
	  }
	  return digest;
	};

	/**
	 * Converts a PKCS#10 certification request (CSR) from PEM format.
	 *
	 * Note: If the certification request is to be verified then compute hash
	 * should be set to true. This will scan the CertificationRequestInfo part of
	 * the ASN.1 object while it is converted so it doesn't need to be converted
	 * back to ASN.1-DER-encoding later.
	 *
	 * @param pem the PEM-formatted certificate.
	 * @param computeHash true to compute the hash for verification.
	 * @param strict true to be strict when checking ASN.1 value lengths, false to
	 *          allow truncated values (default: true).
	 *
	 * @return the certification request (CSR).
	 */
	pki$1.certificationRequestFromPem = function(pem, computeHash, strict) {
	  var msg = forge$3.pem.decode(pem)[0];

	  if(msg.type !== 'CERTIFICATE REQUEST') {
	    var error = new Error('Could not convert certification request from PEM; ' +
	      'PEM header type is not "CERTIFICATE REQUEST".');
	    error.headerType = msg.type;
	    throw error;
	  }
	  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
	    throw new Error('Could not convert certification request from PEM; ' +
	      'PEM is encrypted.');
	  }

	  // convert DER to ASN.1 object
	  var obj = asn1$1.fromDer(msg.body, strict);

	  return pki$1.certificationRequestFromAsn1(obj, computeHash);
	};

	/**
	 * Converts a PKCS#10 certification request (CSR) to PEM format.
	 *
	 * @param csr the certification request.
	 * @param maxline the maximum characters per line, defaults to 64.
	 *
	 * @return the PEM-formatted certification request.
	 */
	pki$1.certificationRequestToPem = function(csr, maxline) {
	  // convert to ASN.1, then DER, then PEM-encode
	  var msg = {
	    type: 'CERTIFICATE REQUEST',
	    body: asn1$1.toDer(pki$1.certificationRequestToAsn1(csr)).getBytes()
	  };
	  return forge$3.pem.encode(msg, {maxline: maxline});
	};

	/**
	 * Creates an empty X.509v3 RSA certificate.
	 *
	 * @return the certificate.
	 */
	pki$1.createCertificate = function() {
	  var cert = {};
	  cert.version = 0x02;
	  cert.serialNumber = '00';
	  cert.signatureOid = null;
	  cert.signature = null;
	  cert.siginfo = {};
	  cert.siginfo.algorithmOid = null;
	  cert.validity = {};
	  cert.validity.notBefore = new Date();
	  cert.validity.notAfter = new Date();

	  cert.issuer = {};
	  cert.issuer.getField = function(sn) {
	    return _getAttribute(cert.issuer, sn);
	  };
	  cert.issuer.addField = function(attr) {
	    _fillMissingFields([attr]);
	    cert.issuer.attributes.push(attr);
	  };
	  cert.issuer.attributes = [];
	  cert.issuer.hash = null;

	  cert.subject = {};
	  cert.subject.getField = function(sn) {
	    return _getAttribute(cert.subject, sn);
	  };
	  cert.subject.addField = function(attr) {
	    _fillMissingFields([attr]);
	    cert.subject.attributes.push(attr);
	  };
	  cert.subject.attributes = [];
	  cert.subject.hash = null;

	  cert.extensions = [];
	  cert.publicKey = null;
	  cert.md = null;

	  /**
	   * Sets the subject of this certificate.
	   *
	   * @param attrs the array of subject attributes to use.
	   * @param uniqueId an optional a unique ID to use.
	   */
	  cert.setSubject = function(attrs, uniqueId) {
	    // set new attributes, clear hash
	    _fillMissingFields(attrs);
	    cert.subject.attributes = attrs;
	    delete cert.subject.uniqueId;
	    if(uniqueId) {
	      // TODO: support arbitrary bit length ids
	      cert.subject.uniqueId = uniqueId;
	    }
	    cert.subject.hash = null;
	  };

	  /**
	   * Sets the issuer of this certificate.
	   *
	   * @param attrs the array of issuer attributes to use.
	   * @param uniqueId an optional a unique ID to use.
	   */
	  cert.setIssuer = function(attrs, uniqueId) {
	    // set new attributes, clear hash
	    _fillMissingFields(attrs);
	    cert.issuer.attributes = attrs;
	    delete cert.issuer.uniqueId;
	    if(uniqueId) {
	      // TODO: support arbitrary bit length ids
	      cert.issuer.uniqueId = uniqueId;
	    }
	    cert.issuer.hash = null;
	  };

	  /**
	   * Sets the extensions of this certificate.
	   *
	   * @param exts the array of extensions to use.
	   */
	  cert.setExtensions = function(exts) {
	    for(var i = 0; i < exts.length; ++i) {
	      _fillMissingExtensionFields(exts[i], {cert: cert});
	    }
	    // set new extensions
	    cert.extensions = exts;
	  };

	  /**
	   * Gets an extension by its name or id.
	   *
	   * @param options the name to use or an object with:
	   *          name the name to use.
	   *          id the id to use.
	   *
	   * @return the extension or null if not found.
	   */
	  cert.getExtension = function(options) {
	    if(typeof options === 'string') {
	      options = {name: options};
	    }

	    var rval = null;
	    var ext;
	    for(var i = 0; rval === null && i < cert.extensions.length; ++i) {
	      ext = cert.extensions[i];
	      if(options.id && ext.id === options.id) {
	        rval = ext;
	      } else if(options.name && ext.name === options.name) {
	        rval = ext;
	      }
	    }
	    return rval;
	  };

	  /**
	   * Signs this certificate using the given private key.
	   *
	   * @param key the private key to sign with.
	   * @param md the message digest object to use (defaults to forge.md.sha1).
	   */
	  cert.sign = function(key, md) {
	    // TODO: get signature OID from private key
	    cert.md = md || forge$3.md.sha1.create();
	    var algorithmOid = oids[cert.md.algorithm + 'WithRSAEncryption'];
	    if(!algorithmOid) {
	      var error = new Error('Could not compute certificate digest. ' +
	        'Unknown message digest algorithm OID.');
	      error.algorithm = cert.md.algorithm;
	      throw error;
	    }
	    cert.signatureOid = cert.siginfo.algorithmOid = algorithmOid;

	    // get TBSCertificate, convert to DER
	    cert.tbsCertificate = pki$1.getTBSCertificate(cert);
	    var bytes = asn1$1.toDer(cert.tbsCertificate);

	    // digest and sign
	    cert.md.update(bytes.getBytes());
	    cert.signature = key.sign(cert.md);
	  };

	  /**
	   * Attempts verify the signature on the passed certificate using this
	   * certificate's public key.
	   *
	   * @param child the certificate to verify.
	   *
	   * @return true if verified, false if not.
	   */
	  cert.verify = function(child) {
	    var rval = false;

	    if(!cert.issued(child)) {
	      var issuer = child.issuer;
	      var subject = cert.subject;
	      var error = new Error(
	        'The parent certificate did not issue the given child ' +
	        'certificate; the child certificate\'s issuer does not match the ' +
	        'parent\'s subject.');
	      error.expectedIssuer = subject.attributes;
	      error.actualIssuer = issuer.attributes;
	      throw error;
	    }

	    var md = child.md;
	    if(md === null) {
	      // create digest for OID signature types
	      md = _createSignatureDigest({
	        signatureOid: child.signatureOid,
	        type: 'certificate'
	      });

	      // produce DER formatted TBSCertificate and digest it
	      var tbsCertificate = child.tbsCertificate || pki$1.getTBSCertificate(child);
	      var bytes = asn1$1.toDer(tbsCertificate);
	      md.update(bytes.getBytes());
	    }

	    if(md !== null) {
	      rval = _verifySignature({
	        certificate: cert, md: md, signature: child.signature
	      });
	    }

	    return rval;
	  };

	  /**
	   * Returns true if this certificate's issuer matches the passed
	   * certificate's subject. Note that no signature check is performed.
	   *
	   * @param parent the certificate to check.
	   *
	   * @return true if this certificate's issuer matches the passed certificate's
	   *         subject.
	   */
	  cert.isIssuer = function(parent) {
	    var rval = false;

	    var i = cert.issuer;
	    var s = parent.subject;

	    // compare hashes if present
	    if(i.hash && s.hash) {
	      rval = (i.hash === s.hash);
	    } else if(i.attributes.length === s.attributes.length) {
	      // all attributes are the same so issuer matches subject
	      rval = true;
	      var iattr, sattr;
	      for(var n = 0; rval && n < i.attributes.length; ++n) {
	        iattr = i.attributes[n];
	        sattr = s.attributes[n];
	        if(iattr.type !== sattr.type || iattr.value !== sattr.value) {
	          // attribute mismatch
	          rval = false;
	        }
	      }
	    }

	    return rval;
	  };

	  /**
	   * Returns true if this certificate's subject matches the issuer of the
	   * given certificate). Note that not signature check is performed.
	   *
	   * @param child the certificate to check.
	   *
	   * @return true if this certificate's subject matches the passed
	   *         certificate's issuer.
	   */
	  cert.issued = function(child) {
	    return child.isIssuer(cert);
	  };

	  /**
	   * Generates the subjectKeyIdentifier for this certificate as byte buffer.
	   *
	   * @return the subjectKeyIdentifier for this certificate as byte buffer.
	   */
	  cert.generateSubjectKeyIdentifier = function() {
	    /* See: 4.2.1.2 section of the the RFC3280, keyIdentifier is either:

	      (1) The keyIdentifier is composed of the 160-bit SHA-1 hash of the
	        value of the BIT STRING subjectPublicKey (excluding the tag,
	        length, and number of unused bits).

	      (2) The keyIdentifier is composed of a four bit type field with
	        the value 0100 followed by the least significant 60 bits of the
	        SHA-1 hash of the value of the BIT STRING subjectPublicKey
	        (excluding the tag, length, and number of unused bit string bits).
	    */

	    // skipping the tag, length, and number of unused bits is the same
	    // as just using the RSAPublicKey (for RSA keys, which are the
	    // only ones supported)
	    return pki$1.getPublicKeyFingerprint(cert.publicKey, {type: 'RSAPublicKey'});
	  };

	  /**
	   * Verifies the subjectKeyIdentifier extension value for this certificate
	   * against its public key. If no extension is found, false will be
	   * returned.
	   *
	   * @return true if verified, false if not.
	   */
	  cert.verifySubjectKeyIdentifier = function() {
	    var oid = oids['subjectKeyIdentifier'];
	    for(var i = 0; i < cert.extensions.length; ++i) {
	      var ext = cert.extensions[i];
	      if(ext.id === oid) {
	        var ski = cert.generateSubjectKeyIdentifier().getBytes();
	        return (forge$3.util.hexToBytes(ext.subjectKeyIdentifier) === ski);
	      }
	    }
	    return false;
	  };

	  return cert;
	};

	/**
	 * Converts an X.509v3 RSA certificate from an ASN.1 object.
	 *
	 * Note: If the certificate is to be verified then compute hash should
	 * be set to true. There is currently no implementation for converting
	 * a certificate back to ASN.1 so the TBSCertificate part of the ASN.1
	 * object needs to be scanned before the cert object is created.
	 *
	 * @param obj the asn1 representation of an X.509v3 RSA certificate.
	 * @param computeHash true to compute the hash for verification.
	 *
	 * @return the certificate.
	 */
	pki$1.certificateFromAsn1 = function(obj, computeHash) {
	  // validate certificate and capture data
	  var capture = {};
	  var errors = [];
	  if(!asn1$1.validate(obj, x509CertificateValidator, capture, errors)) {
	    var error = new Error('Cannot read X.509 certificate. ' +
	      'ASN.1 object is not an X509v3 Certificate.');
	    error.errors = errors;
	    throw error;
	  }

	  // get oid
	  var oid = asn1$1.derToOid(capture.publicKeyOid);
	  if(oid !== pki$1.oids.rsaEncryption) {
	    throw new Error('Cannot read public key. OID is not RSA.');
	  }

	  // create certificate
	  var cert = pki$1.createCertificate();
	  cert.version = capture.certVersion ?
	    capture.certVersion.charCodeAt(0) : 0;
	  var serial = forge$3.util.createBuffer(capture.certSerialNumber);
	  cert.serialNumber = serial.toHex();
	  cert.signatureOid = forge$3.asn1.derToOid(capture.certSignatureOid);
	  cert.signatureParameters = _readSignatureParameters(
	    cert.signatureOid, capture.certSignatureParams, true);
	  cert.siginfo.algorithmOid = forge$3.asn1.derToOid(capture.certinfoSignatureOid);
	  cert.siginfo.parameters = _readSignatureParameters(cert.siginfo.algorithmOid,
	    capture.certinfoSignatureParams, false);
	  cert.signature = capture.certSignature;

	  var validity = [];
	  if(capture.certValidity1UTCTime !== undefined) {
	    validity.push(asn1$1.utcTimeToDate(capture.certValidity1UTCTime));
	  }
	  if(capture.certValidity2GeneralizedTime !== undefined) {
	    validity.push(asn1$1.generalizedTimeToDate(
	      capture.certValidity2GeneralizedTime));
	  }
	  if(capture.certValidity3UTCTime !== undefined) {
	    validity.push(asn1$1.utcTimeToDate(capture.certValidity3UTCTime));
	  }
	  if(capture.certValidity4GeneralizedTime !== undefined) {
	    validity.push(asn1$1.generalizedTimeToDate(
	      capture.certValidity4GeneralizedTime));
	  }
	  if(validity.length > 2) {
	    throw new Error('Cannot read notBefore/notAfter validity times; more ' +
	      'than two times were provided in the certificate.');
	  }
	  if(validity.length < 2) {
	    throw new Error('Cannot read notBefore/notAfter validity times; they ' +
	      'were not provided as either UTCTime or GeneralizedTime.');
	  }
	  cert.validity.notBefore = validity[0];
	  cert.validity.notAfter = validity[1];

	  // keep TBSCertificate to preserve signature when exporting
	  cert.tbsCertificate = capture.tbsCertificate;

	  if(computeHash) {
	    // create digest for OID signature type
	    cert.md = _createSignatureDigest({
	      signatureOid: cert.signatureOid,
	      type: 'certificate'
	    });

	    // produce DER formatted TBSCertificate and digest it
	    var bytes = asn1$1.toDer(cert.tbsCertificate);
	    cert.md.update(bytes.getBytes());
	  }

	  // handle issuer, build issuer message digest
	  var imd = forge$3.md.sha1.create();
	  var ibytes = asn1$1.toDer(capture.certIssuer);
	  imd.update(ibytes.getBytes());
	  cert.issuer.getField = function(sn) {
	    return _getAttribute(cert.issuer, sn);
	  };
	  cert.issuer.addField = function(attr) {
	    _fillMissingFields([attr]);
	    cert.issuer.attributes.push(attr);
	  };
	  cert.issuer.attributes = pki$1.RDNAttributesAsArray(capture.certIssuer);
	  if(capture.certIssuerUniqueId) {
	    cert.issuer.uniqueId = capture.certIssuerUniqueId;
	  }
	  cert.issuer.hash = imd.digest().toHex();

	  // handle subject, build subject message digest
	  var smd = forge$3.md.sha1.create();
	  var sbytes = asn1$1.toDer(capture.certSubject);
	  smd.update(sbytes.getBytes());
	  cert.subject.getField = function(sn) {
	    return _getAttribute(cert.subject, sn);
	  };
	  cert.subject.addField = function(attr) {
	    _fillMissingFields([attr]);
	    cert.subject.attributes.push(attr);
	  };
	  cert.subject.attributes = pki$1.RDNAttributesAsArray(capture.certSubject);
	  if(capture.certSubjectUniqueId) {
	    cert.subject.uniqueId = capture.certSubjectUniqueId;
	  }
	  cert.subject.hash = smd.digest().toHex();

	  // handle extensions
	  if(capture.certExtensions) {
	    cert.extensions = pki$1.certificateExtensionsFromAsn1(capture.certExtensions);
	  } else {
	    cert.extensions = [];
	  }

	  // convert RSA public key from ASN.1
	  cert.publicKey = pki$1.publicKeyFromAsn1(capture.subjectPublicKeyInfo);

	  return cert;
	};

	/**
	 * Converts an ASN.1 extensions object (with extension sequences as its
	 * values) into an array of extension objects with types and values.
	 *
	 * Supported extensions:
	 *
	 * id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }
	 * KeyUsage ::= BIT STRING {
	 *   digitalSignature        (0),
	 *   nonRepudiation          (1),
	 *   keyEncipherment         (2),
	 *   dataEncipherment        (3),
	 *   keyAgreement            (4),
	 *   keyCertSign             (5),
	 *   cRLSign                 (6),
	 *   encipherOnly            (7),
	 *   decipherOnly            (8)
	 * }
	 *
	 * id-ce-basicConstraints OBJECT IDENTIFIER ::=  { id-ce 19 }
	 * BasicConstraints ::= SEQUENCE {
	 *   cA                      BOOLEAN DEFAULT FALSE,
	 *   pathLenConstraint       INTEGER (0..MAX) OPTIONAL
	 * }
	 *
	 * subjectAltName EXTENSION ::= {
	 *   SYNTAX GeneralNames
	 *   IDENTIFIED BY id-ce-subjectAltName
	 * }
	 *
	 * GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName
	 *
	 * GeneralName ::= CHOICE {
	 *   otherName      [0] INSTANCE OF OTHER-NAME,
	 *   rfc822Name     [1] IA5String,
	 *   dNSName        [2] IA5String,
	 *   x400Address    [3] ORAddress,
	 *   directoryName  [4] Name,
	 *   ediPartyName   [5] EDIPartyName,
	 *   uniformResourceIdentifier [6] IA5String,
	 *   IPAddress      [7] OCTET STRING,
	 *   registeredID   [8] OBJECT IDENTIFIER
	 * }
	 *
	 * OTHER-NAME ::= TYPE-IDENTIFIER
	 *
	 * EDIPartyName ::= SEQUENCE {
	 *   nameAssigner [0] DirectoryString {ub-name} OPTIONAL,
	 *   partyName    [1] DirectoryString {ub-name}
	 * }
	 *
	 * @param exts the extensions ASN.1 with extension sequences to parse.
	 *
	 * @return the array.
	 */
	pki$1.certificateExtensionsFromAsn1 = function(exts) {
	  var rval = [];
	  for(var i = 0; i < exts.value.length; ++i) {
	    // get extension sequence
	    var extseq = exts.value[i];
	    for(var ei = 0; ei < extseq.value.length; ++ei) {
	      rval.push(pki$1.certificateExtensionFromAsn1(extseq.value[ei]));
	    }
	  }

	  return rval;
	};

	/**
	 * Parses a single certificate extension from ASN.1.
	 *
	 * @param ext the extension in ASN.1 format.
	 *
	 * @return the parsed extension as an object.
	 */
	pki$1.certificateExtensionFromAsn1 = function(ext) {
	  // an extension has:
	  // [0] extnID      OBJECT IDENTIFIER
	  // [1] critical    BOOLEAN DEFAULT FALSE
	  // [2] extnValue   OCTET STRING
	  var e = {};
	  e.id = asn1$1.derToOid(ext.value[0].value);
	  e.critical = false;
	  if(ext.value[1].type === asn1$1.Type.BOOLEAN) {
	    e.critical = (ext.value[1].value.charCodeAt(0) !== 0x00);
	    e.value = ext.value[2].value;
	  } else {
	    e.value = ext.value[1].value;
	  }
	  // if the oid is known, get its name
	  if(e.id in oids) {
	    e.name = oids[e.id];

	    // handle key usage
	    if(e.name === 'keyUsage') {
	      // get value as BIT STRING
	      var ev = asn1$1.fromDer(e.value);
	      var b2 = 0x00;
	      var b3 = 0x00;
	      if(ev.value.length > 1) {
	        // skip first byte, just indicates unused bits which
	        // will be padded with 0s anyway
	        // get bytes with flag bits
	        b2 = ev.value.charCodeAt(1);
	        b3 = ev.value.length > 2 ? ev.value.charCodeAt(2) : 0;
	      }
	      // set flags
	      e.digitalSignature = (b2 & 0x80) === 0x80;
	      e.nonRepudiation = (b2 & 0x40) === 0x40;
	      e.keyEncipherment = (b2 & 0x20) === 0x20;
	      e.dataEncipherment = (b2 & 0x10) === 0x10;
	      e.keyAgreement = (b2 & 0x08) === 0x08;
	      e.keyCertSign = (b2 & 0x04) === 0x04;
	      e.cRLSign = (b2 & 0x02) === 0x02;
	      e.encipherOnly = (b2 & 0x01) === 0x01;
	      e.decipherOnly = (b3 & 0x80) === 0x80;
	    } else if(e.name === 'basicConstraints') {
	      // handle basic constraints
	      // get value as SEQUENCE
	      var ev = asn1$1.fromDer(e.value);
	      // get cA BOOLEAN flag (defaults to false)
	      if(ev.value.length > 0 && ev.value[0].type === asn1$1.Type.BOOLEAN) {
	        e.cA = (ev.value[0].value.charCodeAt(0) !== 0x00);
	      } else {
	        e.cA = false;
	      }
	      // get path length constraint
	      var value = null;
	      if(ev.value.length > 0 && ev.value[0].type === asn1$1.Type.INTEGER) {
	        value = ev.value[0].value;
	      } else if(ev.value.length > 1) {
	        value = ev.value[1].value;
	      }
	      if(value !== null) {
	        e.pathLenConstraint = asn1$1.derToInteger(value);
	      }
	    } else if(e.name === 'extKeyUsage') {
	      // handle extKeyUsage
	      // value is a SEQUENCE of OIDs
	      var ev = asn1$1.fromDer(e.value);
	      for(var vi = 0; vi < ev.value.length; ++vi) {
	        var oid = asn1$1.derToOid(ev.value[vi].value);
	        if(oid in oids) {
	          e[oids[oid]] = true;
	        } else {
	          e[oid] = true;
	        }
	      }
	    } else if(e.name === 'nsCertType') {
	      // handle nsCertType
	      // get value as BIT STRING
	      var ev = asn1$1.fromDer(e.value);
	      var b2 = 0x00;
	      if(ev.value.length > 1) {
	        // skip first byte, just indicates unused bits which
	        // will be padded with 0s anyway
	        // get bytes with flag bits
	        b2 = ev.value.charCodeAt(1);
	      }
	      // set flags
	      e.client = (b2 & 0x80) === 0x80;
	      e.server = (b2 & 0x40) === 0x40;
	      e.email = (b2 & 0x20) === 0x20;
	      e.objsign = (b2 & 0x10) === 0x10;
	      e.reserved = (b2 & 0x08) === 0x08;
	      e.sslCA = (b2 & 0x04) === 0x04;
	      e.emailCA = (b2 & 0x02) === 0x02;
	      e.objCA = (b2 & 0x01) === 0x01;
	    } else if(
	      e.name === 'subjectAltName' ||
	      e.name === 'issuerAltName') {
	      // handle subjectAltName/issuerAltName
	      e.altNames = [];

	      // ev is a SYNTAX SEQUENCE
	      var gn;
	      var ev = asn1$1.fromDer(e.value);
	      for(var n = 0; n < ev.value.length; ++n) {
	        // get GeneralName
	        gn = ev.value[n];

	        var altName = {
	          type: gn.type,
	          value: gn.value
	        };
	        e.altNames.push(altName);

	        // Note: Support for types 1,2,6,7,8
	        switch(gn.type) {
	          // rfc822Name
	          case 1:
	          // dNSName
	          case 2:
	          // uniformResourceIdentifier (URI)
	          case 6:
	            break;
	          // IPAddress
	          case 7:
	            // convert to IPv4/IPv6 string representation
	            altName.ip = forge$3.util.bytesToIP(gn.value);
	            break;
	          // registeredID
	          case 8:
	            altName.oid = asn1$1.derToOid(gn.value);
	            break;
	            // unsupported
	        }
	      }
	    } else if(e.name === 'subjectKeyIdentifier') {
	      // value is an OCTETSTRING w/the hash of the key-type specific
	      // public key structure (eg: RSAPublicKey)
	      var ev = asn1$1.fromDer(e.value);
	      e.subjectKeyIdentifier = forge$3.util.bytesToHex(ev.value);
	    }
	  }
	  return e;
	};

	/**
	 * Converts a PKCS#10 certification request (CSR) from an ASN.1 object.
	 *
	 * Note: If the certification request is to be verified then compute hash
	 * should be set to true. There is currently no implementation for converting
	 * a certificate back to ASN.1 so the CertificationRequestInfo part of the
	 * ASN.1 object needs to be scanned before the csr object is created.
	 *
	 * @param obj the asn1 representation of a PKCS#10 certification request (CSR).
	 * @param computeHash true to compute the hash for verification.
	 *
	 * @return the certification request (CSR).
	 */
	pki$1.certificationRequestFromAsn1 = function(obj, computeHash) {
	  // validate certification request and capture data
	  var capture = {};
	  var errors = [];
	  if(!asn1$1.validate(obj, certificationRequestValidator, capture, errors)) {
	    var error = new Error('Cannot read PKCS#10 certificate request. ' +
	      'ASN.1 object is not a PKCS#10 CertificationRequest.');
	    error.errors = errors;
	    throw error;
	  }

	  // get oid
	  var oid = asn1$1.derToOid(capture.publicKeyOid);
	  if(oid !== pki$1.oids.rsaEncryption) {
	    throw new Error('Cannot read public key. OID is not RSA.');
	  }

	  // create certification request
	  var csr = pki$1.createCertificationRequest();
	  csr.version = capture.csrVersion ? capture.csrVersion.charCodeAt(0) : 0;
	  csr.signatureOid = forge$3.asn1.derToOid(capture.csrSignatureOid);
	  csr.signatureParameters = _readSignatureParameters(
	    csr.signatureOid, capture.csrSignatureParams, true);
	  csr.siginfo.algorithmOid = forge$3.asn1.derToOid(capture.csrSignatureOid);
	  csr.siginfo.parameters = _readSignatureParameters(
	    csr.siginfo.algorithmOid, capture.csrSignatureParams, false);
	  csr.signature = capture.csrSignature;

	  // keep CertificationRequestInfo to preserve signature when exporting
	  csr.certificationRequestInfo = capture.certificationRequestInfo;

	  if(computeHash) {
	    // create digest for OID signature type
	    csr.md = _createSignatureDigest({
	      signatureOid: csr.signatureOid,
	      type: 'certification request'
	    });

	    // produce DER formatted CertificationRequestInfo and digest it
	    var bytes = asn1$1.toDer(csr.certificationRequestInfo);
	    csr.md.update(bytes.getBytes());
	  }

	  // handle subject, build subject message digest
	  var smd = forge$3.md.sha1.create();
	  csr.subject.getField = function(sn) {
	    return _getAttribute(csr.subject, sn);
	  };
	  csr.subject.addField = function(attr) {
	    _fillMissingFields([attr]);
	    csr.subject.attributes.push(attr);
	  };
	  csr.subject.attributes = pki$1.RDNAttributesAsArray(
	    capture.certificationRequestInfoSubject, smd);
	  csr.subject.hash = smd.digest().toHex();

	  // convert RSA public key from ASN.1
	  csr.publicKey = pki$1.publicKeyFromAsn1(capture.subjectPublicKeyInfo);

	  // convert attributes from ASN.1
	  csr.getAttribute = function(sn) {
	    return _getAttribute(csr, sn);
	  };
	  csr.addAttribute = function(attr) {
	    _fillMissingFields([attr]);
	    csr.attributes.push(attr);
	  };
	  csr.attributes = pki$1.CRIAttributesAsArray(
	    capture.certificationRequestInfoAttributes || []);

	  return csr;
	};

	/**
	 * Creates an empty certification request (a CSR or certificate signing
	 * request). Once created, its public key and attributes can be set and then
	 * it can be signed.
	 *
	 * @return the empty certification request.
	 */
	pki$1.createCertificationRequest = function() {
	  var csr = {};
	  csr.version = 0x00;
	  csr.signatureOid = null;
	  csr.signature = null;
	  csr.siginfo = {};
	  csr.siginfo.algorithmOid = null;

	  csr.subject = {};
	  csr.subject.getField = function(sn) {
	    return _getAttribute(csr.subject, sn);
	  };
	  csr.subject.addField = function(attr) {
	    _fillMissingFields([attr]);
	    csr.subject.attributes.push(attr);
	  };
	  csr.subject.attributes = [];
	  csr.subject.hash = null;

	  csr.publicKey = null;
	  csr.attributes = [];
	  csr.getAttribute = function(sn) {
	    return _getAttribute(csr, sn);
	  };
	  csr.addAttribute = function(attr) {
	    _fillMissingFields([attr]);
	    csr.attributes.push(attr);
	  };
	  csr.md = null;

	  /**
	   * Sets the subject of this certification request.
	   *
	   * @param attrs the array of subject attributes to use.
	   */
	  csr.setSubject = function(attrs) {
	    // set new attributes
	    _fillMissingFields(attrs);
	    csr.subject.attributes = attrs;
	    csr.subject.hash = null;
	  };

	  /**
	   * Sets the attributes of this certification request.
	   *
	   * @param attrs the array of attributes to use.
	   */
	  csr.setAttributes = function(attrs) {
	    // set new attributes
	    _fillMissingFields(attrs);
	    csr.attributes = attrs;
	  };

	  /**
	   * Signs this certification request using the given private key.
	   *
	   * @param key the private key to sign with.
	   * @param md the message digest object to use (defaults to forge.md.sha1).
	   */
	  csr.sign = function(key, md) {
	    // TODO: get signature OID from private key
	    csr.md = md || forge$3.md.sha1.create();
	    var algorithmOid = oids[csr.md.algorithm + 'WithRSAEncryption'];
	    if(!algorithmOid) {
	      var error = new Error('Could not compute certification request digest. ' +
	        'Unknown message digest algorithm OID.');
	      error.algorithm = csr.md.algorithm;
	      throw error;
	    }
	    csr.signatureOid = csr.siginfo.algorithmOid = algorithmOid;

	    // get CertificationRequestInfo, convert to DER
	    csr.certificationRequestInfo = pki$1.getCertificationRequestInfo(csr);
	    var bytes = asn1$1.toDer(csr.certificationRequestInfo);

	    // digest and sign
	    csr.md.update(bytes.getBytes());
	    csr.signature = key.sign(csr.md);
	  };

	  /**
	   * Attempts verify the signature on the passed certification request using
	   * its public key.
	   *
	   * A CSR that has been exported to a file in PEM format can be verified using
	   * OpenSSL using this command:
	   *
	   * openssl req -in <the-csr-pem-file> -verify -noout -text
	   *
	   * @return true if verified, false if not.
	   */
	  csr.verify = function() {
	    var rval = false;

	    var md = csr.md;
	    if(md === null) {
	      md = _createSignatureDigest({
	        signatureOid: csr.signatureOid,
	        type: 'certification request'
	      });

	      // produce DER formatted CertificationRequestInfo and digest it
	      var cri = csr.certificationRequestInfo ||
	        pki$1.getCertificationRequestInfo(csr);
	      var bytes = asn1$1.toDer(cri);
	      md.update(bytes.getBytes());
	    }

	    if(md !== null) {
	      rval = _verifySignature({
	        certificate: csr, md: md, signature: csr.signature
	      });
	    }

	    return rval;
	  };

	  return csr;
	};

	/**
	 * Converts an X.509 subject or issuer to an ASN.1 RDNSequence.
	 *
	 * @param obj the subject or issuer (distinguished name).
	 *
	 * @return the ASN.1 RDNSequence.
	 */
	function _dnToAsn1(obj) {
	  // create an empty RDNSequence
	  var rval = asn1$1.create(
	    asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, []);

	  // iterate over attributes
	  var attr, set;
	  var attrs = obj.attributes;
	  for(var i = 0; i < attrs.length; ++i) {
	    attr = attrs[i];
	    var value = attr.value;

	    // reuse tag class for attribute value if available
	    var valueTagClass = asn1$1.Type.PRINTABLESTRING;
	    if('valueTagClass' in attr) {
	      valueTagClass = attr.valueTagClass;

	      if(valueTagClass === asn1$1.Type.UTF8) {
	        value = forge$3.util.encodeUtf8(value);
	      }
	      // FIXME: handle more encodings
	    }

	    // create a RelativeDistinguishedName set
	    // each value in the set is an AttributeTypeAndValue first
	    // containing the type (an OID) and second the value
	    set = asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.SET, true, [
	      asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, [
	        // AttributeType
	        asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.OID, false,
	          asn1$1.oidToDer(attr.type).getBytes()),
	        // AttributeValue
	        asn1$1.create(asn1$1.Class.UNIVERSAL, valueTagClass, false, value)
	      ])
	    ]);
	    rval.value.push(set);
	  }

	  return rval;
	}

	/**
	 * Fills in missing fields in attributes.
	 *
	 * @param attrs the attributes to fill missing fields in.
	 */
	function _fillMissingFields(attrs) {
	  var attr;
	  for(var i = 0; i < attrs.length; ++i) {
	    attr = attrs[i];

	    // populate missing name
	    if(typeof attr.name === 'undefined') {
	      if(attr.type && attr.type in pki$1.oids) {
	        attr.name = pki$1.oids[attr.type];
	      } else if(attr.shortName && attr.shortName in _shortNames) {
	        attr.name = pki$1.oids[_shortNames[attr.shortName]];
	      }
	    }

	    // populate missing type (OID)
	    if(typeof attr.type === 'undefined') {
	      if(attr.name && attr.name in pki$1.oids) {
	        attr.type = pki$1.oids[attr.name];
	      } else {
	        var error = new Error('Attribute type not specified.');
	        error.attribute = attr;
	        throw error;
	      }
	    }

	    // populate missing shortname
	    if(typeof attr.shortName === 'undefined') {
	      if(attr.name && attr.name in _shortNames) {
	        attr.shortName = _shortNames[attr.name];
	      }
	    }

	    // convert extensions to value
	    if(attr.type === oids.extensionRequest) {
	      attr.valueConstructed = true;
	      attr.valueTagClass = asn1$1.Type.SEQUENCE;
	      if(!attr.value && attr.extensions) {
	        attr.value = [];
	        for(var ei = 0; ei < attr.extensions.length; ++ei) {
	          attr.value.push(pki$1.certificateExtensionToAsn1(
	            _fillMissingExtensionFields(attr.extensions[ei])));
	        }
	      }
	    }

	    if(typeof attr.value === 'undefined') {
	      var error = new Error('Attribute value not specified.');
	      error.attribute = attr;
	      throw error;
	    }
	  }
	}

	/**
	 * Fills in missing fields in certificate extensions.
	 *
	 * @param e the extension.
	 * @param [options] the options to use.
	 *          [cert] the certificate the extensions are for.
	 *
	 * @return the extension.
	 */
	function _fillMissingExtensionFields(e, options) {
	  options = options || {};

	  // populate missing name
	  if(typeof e.name === 'undefined') {
	    if(e.id && e.id in pki$1.oids) {
	      e.name = pki$1.oids[e.id];
	    }
	  }

	  // populate missing id
	  if(typeof e.id === 'undefined') {
	    if(e.name && e.name in pki$1.oids) {
	      e.id = pki$1.oids[e.name];
	    } else {
	      var error = new Error('Extension ID not specified.');
	      error.extension = e;
	      throw error;
	    }
	  }

	  if(typeof e.value !== 'undefined') {
	    return e;
	  }

	  // handle missing value:

	  // value is a BIT STRING
	  if(e.name === 'keyUsage') {
	    // build flags
	    var unused = 0;
	    var b2 = 0x00;
	    var b3 = 0x00;
	    if(e.digitalSignature) {
	      b2 |= 0x80;
	      unused = 7;
	    }
	    if(e.nonRepudiation) {
	      b2 |= 0x40;
	      unused = 6;
	    }
	    if(e.keyEncipherment) {
	      b2 |= 0x20;
	      unused = 5;
	    }
	    if(e.dataEncipherment) {
	      b2 |= 0x10;
	      unused = 4;
	    }
	    if(e.keyAgreement) {
	      b2 |= 0x08;
	      unused = 3;
	    }
	    if(e.keyCertSign) {
	      b2 |= 0x04;
	      unused = 2;
	    }
	    if(e.cRLSign) {
	      b2 |= 0x02;
	      unused = 1;
	    }
	    if(e.encipherOnly) {
	      b2 |= 0x01;
	      unused = 0;
	    }
	    if(e.decipherOnly) {
	      b3 |= 0x80;
	      unused = 7;
	    }

	    // create bit string
	    var value = String.fromCharCode(unused);
	    if(b3 !== 0) {
	      value += String.fromCharCode(b2) + String.fromCharCode(b3);
	    } else if(b2 !== 0) {
	      value += String.fromCharCode(b2);
	    }
	    e.value = asn1$1.create(
	      asn1$1.Class.UNIVERSAL, asn1$1.Type.BITSTRING, false, value);
	  } else if(e.name === 'basicConstraints') {
	    // basicConstraints is a SEQUENCE
	    e.value = asn1$1.create(
	      asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, []);
	    // cA BOOLEAN flag defaults to false
	    if(e.cA) {
	      e.value.value.push(asn1$1.create(
	        asn1$1.Class.UNIVERSAL, asn1$1.Type.BOOLEAN, false,
	        String.fromCharCode(0xFF)));
	    }
	    if('pathLenConstraint' in e) {
	      e.value.value.push(asn1$1.create(
	        asn1$1.Class.UNIVERSAL, asn1$1.Type.INTEGER, false,
	        asn1$1.integerToDer(e.pathLenConstraint).getBytes()));
	    }
	  } else if(e.name === 'extKeyUsage') {
	    // extKeyUsage is a SEQUENCE of OIDs
	    e.value = asn1$1.create(
	      asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, []);
	    var seq = e.value.value;
	    for(var key in e) {
	      if(e[key] !== true) {
	        continue;
	      }
	      // key is name in OID map
	      if(key in oids) {
	        seq.push(asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.OID,
	          false, asn1$1.oidToDer(oids[key]).getBytes()));
	      } else if(key.indexOf('.') !== -1) {
	        // assume key is an OID
	        seq.push(asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.OID,
	          false, asn1$1.oidToDer(key).getBytes()));
	      }
	    }
	  } else if(e.name === 'nsCertType') {
	    // nsCertType is a BIT STRING
	    // build flags
	    var unused = 0;
	    var b2 = 0x00;

	    if(e.client) {
	      b2 |= 0x80;
	      unused = 7;
	    }
	    if(e.server) {
	      b2 |= 0x40;
	      unused = 6;
	    }
	    if(e.email) {
	      b2 |= 0x20;
	      unused = 5;
	    }
	    if(e.objsign) {
	      b2 |= 0x10;
	      unused = 4;
	    }
	    if(e.reserved) {
	      b2 |= 0x08;
	      unused = 3;
	    }
	    if(e.sslCA) {
	      b2 |= 0x04;
	      unused = 2;
	    }
	    if(e.emailCA) {
	      b2 |= 0x02;
	      unused = 1;
	    }
	    if(e.objCA) {
	      b2 |= 0x01;
	      unused = 0;
	    }

	    // create bit string
	    var value = String.fromCharCode(unused);
	    if(b2 !== 0) {
	      value += String.fromCharCode(b2);
	    }
	    e.value = asn1$1.create(
	      asn1$1.Class.UNIVERSAL, asn1$1.Type.BITSTRING, false, value);
	  } else if(e.name === 'subjectAltName' || e.name === 'issuerAltName') {
	    // SYNTAX SEQUENCE
	    e.value = asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, []);

	    var altName;
	    for(var n = 0; n < e.altNames.length; ++n) {
	      altName = e.altNames[n];
	      var value = altName.value;
	      // handle IP
	      if(altName.type === 7 && altName.ip) {
	        value = forge$3.util.bytesFromIP(altName.ip);
	        if(value === null) {
	          var error = new Error(
	            'Extension "ip" value is not a valid IPv4 or IPv6 address.');
	          error.extension = e;
	          throw error;
	        }
	      } else if(altName.type === 8) {
	        // handle OID
	        if(altName.oid) {
	          value = asn1$1.oidToDer(asn1$1.oidToDer(altName.oid));
	        } else {
	          // deprecated ... convert value to OID
	          value = asn1$1.oidToDer(value);
	        }
	      }
	      e.value.value.push(asn1$1.create(
	        asn1$1.Class.CONTEXT_SPECIFIC, altName.type, false,
	        value));
	    }
	  } else if(e.name === 'nsComment' && options.cert) {
	    // sanity check value is ASCII (req'd) and not too big
	    if(!(/^[\x00-\x7F]*$/.test(e.comment)) ||
	      (e.comment.length < 1) || (e.comment.length > 128)) {
	      throw new Error('Invalid "nsComment" content.');
	    }
	    // IA5STRING opaque comment
	    e.value = asn1$1.create(
	      asn1$1.Class.UNIVERSAL, asn1$1.Type.IA5STRING, false, e.comment);
	  } else if(e.name === 'subjectKeyIdentifier' && options.cert) {
	    var ski = options.cert.generateSubjectKeyIdentifier();
	    e.subjectKeyIdentifier = ski.toHex();
	    // OCTETSTRING w/digest
	    e.value = asn1$1.create(
	      asn1$1.Class.UNIVERSAL, asn1$1.Type.OCTETSTRING, false, ski.getBytes());
	  } else if(e.name === 'authorityKeyIdentifier' && options.cert) {
	    // SYNTAX SEQUENCE
	    e.value = asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, []);
	    var seq = e.value.value;

	    if(e.keyIdentifier) {
	      var keyIdentifier = (e.keyIdentifier === true ?
	        options.cert.generateSubjectKeyIdentifier().getBytes() :
	        e.keyIdentifier);
	      seq.push(
	        asn1$1.create(asn1$1.Class.CONTEXT_SPECIFIC, 0, false, keyIdentifier));
	    }

	    if(e.authorityCertIssuer) {
	      var authorityCertIssuer = [
	        asn1$1.create(asn1$1.Class.CONTEXT_SPECIFIC, 4, true, [
	          _dnToAsn1(e.authorityCertIssuer === true ?
	            options.cert.issuer : e.authorityCertIssuer)
	        ])
	      ];
	      seq.push(
	        asn1$1.create(asn1$1.Class.CONTEXT_SPECIFIC, 1, true, authorityCertIssuer));
	    }

	    if(e.serialNumber) {
	      var serialNumber = forge$3.util.hexToBytes(e.serialNumber === true ?
	        options.cert.serialNumber : e.serialNumber);
	      seq.push(
	        asn1$1.create(asn1$1.Class.CONTEXT_SPECIFIC, 2, false, serialNumber));
	    }
	  } else if(e.name === 'cRLDistributionPoints') {
	    e.value = asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, []);
	    var seq = e.value.value;

	    // Create sub SEQUENCE of DistributionPointName
	    var subSeq = asn1$1.create(
	      asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, []);

	    // Create fullName CHOICE
	    var fullNameGeneralNames = asn1$1.create(
	      asn1$1.Class.CONTEXT_SPECIFIC, 0, true, []);
	    var altName;
	    for(var n = 0; n < e.altNames.length; ++n) {
	      altName = e.altNames[n];
	      var value = altName.value;
	      // handle IP
	      if(altName.type === 7 && altName.ip) {
	        value = forge$3.util.bytesFromIP(altName.ip);
	        if(value === null) {
	          var error = new Error(
	            'Extension "ip" value is not a valid IPv4 or IPv6 address.');
	          error.extension = e;
	          throw error;
	        }
	      } else if(altName.type === 8) {
	        // handle OID
	        if(altName.oid) {
	          value = asn1$1.oidToDer(asn1$1.oidToDer(altName.oid));
	        } else {
	          // deprecated ... convert value to OID
	          value = asn1$1.oidToDer(value);
	        }
	      }
	      fullNameGeneralNames.value.push(asn1$1.create(
	        asn1$1.Class.CONTEXT_SPECIFIC, altName.type, false,
	        value));
	    }

	    // Add to the parent SEQUENCE
	    subSeq.value.push(asn1$1.create(
	      asn1$1.Class.CONTEXT_SPECIFIC, 0, true, [fullNameGeneralNames]));
	    seq.push(subSeq);
	  }

	  // ensure value has been defined by now
	  if(typeof e.value === 'undefined') {
	    var error = new Error('Extension value not specified.');
	    error.extension = e;
	    throw error;
	  }

	  return e;
	}

	/**
	 * Convert signature parameters object to ASN.1
	 *
	 * @param {String} oid Signature algorithm OID
	 * @param params The signature parametrs object
	 * @return ASN.1 object representing signature parameters
	 */
	function _signatureParametersToAsn1(oid, params) {
	  switch(oid) {
	    case oids['RSASSA-PSS']:
	      var parts = [];

	      if(params.hash.algorithmOid !== undefined) {
	        parts.push(asn1$1.create(asn1$1.Class.CONTEXT_SPECIFIC, 0, true, [
	          asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, [
	            asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.OID, false,
	              asn1$1.oidToDer(params.hash.algorithmOid).getBytes()),
	            asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.NULL, false, '')
	          ])
	        ]));
	      }

	      if(params.mgf.algorithmOid !== undefined) {
	        parts.push(asn1$1.create(asn1$1.Class.CONTEXT_SPECIFIC, 1, true, [
	          asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, [
	            asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.OID, false,
	              asn1$1.oidToDer(params.mgf.algorithmOid).getBytes()),
	            asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, [
	              asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.OID, false,
	                asn1$1.oidToDer(params.mgf.hash.algorithmOid).getBytes()),
	              asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.NULL, false, '')
	            ])
	          ])
	        ]));
	      }

	      if(params.saltLength !== undefined) {
	        parts.push(asn1$1.create(asn1$1.Class.CONTEXT_SPECIFIC, 2, true, [
	          asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.INTEGER, false,
	            asn1$1.integerToDer(params.saltLength).getBytes())
	        ]));
	      }

	      return asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, parts);

	    default:
	      return asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.NULL, false, '');
	  }
	}

	/**
	 * Converts a certification request's attributes to an ASN.1 set of
	 * CRIAttributes.
	 *
	 * @param csr certification request.
	 *
	 * @return the ASN.1 set of CRIAttributes.
	 */
	function _CRIAttributesToAsn1(csr) {
	  // create an empty context-specific container
	  var rval = asn1$1.create(asn1$1.Class.CONTEXT_SPECIFIC, 0, true, []);

	  // no attributes, return empty container
	  if(csr.attributes.length === 0) {
	    return rval;
	  }

	  // each attribute has a sequence with a type and a set of values
	  var attrs = csr.attributes;
	  for(var i = 0; i < attrs.length; ++i) {
	    var attr = attrs[i];
	    var value = attr.value;

	    // reuse tag class for attribute value if available
	    var valueTagClass = asn1$1.Type.UTF8;
	    if('valueTagClass' in attr) {
	      valueTagClass = attr.valueTagClass;
	    }
	    if(valueTagClass === asn1$1.Type.UTF8) {
	      value = forge$3.util.encodeUtf8(value);
	    }
	    var valueConstructed = false;
	    if('valueConstructed' in attr) {
	      valueConstructed = attr.valueConstructed;
	    }
	    // FIXME: handle more encodings

	    // create a RelativeDistinguishedName set
	    // each value in the set is an AttributeTypeAndValue first
	    // containing the type (an OID) and second the value
	    var seq = asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, [
	      // AttributeType
	      asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.OID, false,
	        asn1$1.oidToDer(attr.type).getBytes()),
	      asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.SET, true, [
	        // AttributeValue
	        asn1$1.create(
	          asn1$1.Class.UNIVERSAL, valueTagClass, valueConstructed, value)
	      ])
	    ]);
	    rval.value.push(seq);
	  }

	  return rval;
	}

	var jan_1_1950 = new Date('1950-01-01T00:00:00Z');
	var jan_1_2050 = new Date('2050-01-01T00:00:00Z');

	/**
	 * Converts a Date object to ASN.1
	 * Handles the different format before and after 1st January 2050
	 *
	 * @param date date object.
	 *
	 * @return the ASN.1 object representing the date.
	 */
	function _dateToAsn1(date) {
	  if(date >= jan_1_1950 && date < jan_1_2050) {
	    return asn1$1.create(
	      asn1$1.Class.UNIVERSAL, asn1$1.Type.UTCTIME, false,
	      asn1$1.dateToUtcTime(date));
	  } else {
	    return asn1$1.create(
	      asn1$1.Class.UNIVERSAL, asn1$1.Type.GENERALIZEDTIME, false,
	      asn1$1.dateToGeneralizedTime(date));
	  }
	}

	/**
	 * Gets the ASN.1 TBSCertificate part of an X.509v3 certificate.
	 *
	 * @param cert the certificate.
	 *
	 * @return the asn1 TBSCertificate.
	 */
	pki$1.getTBSCertificate = function(cert) {
	  // TBSCertificate
	  var notBefore = _dateToAsn1(cert.validity.notBefore);
	  var notAfter = _dateToAsn1(cert.validity.notAfter);
	  var tbs = asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, [
	    // version
	    asn1$1.create(asn1$1.Class.CONTEXT_SPECIFIC, 0, true, [
	      // integer
	      asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.INTEGER, false,
	        asn1$1.integerToDer(cert.version).getBytes())
	    ]),
	    // serialNumber
	    asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.INTEGER, false,
	      forge$3.util.hexToBytes(cert.serialNumber)),
	    // signature
	    asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, [
	      // algorithm
	      asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.OID, false,
	        asn1$1.oidToDer(cert.siginfo.algorithmOid).getBytes()),
	      // parameters
	      _signatureParametersToAsn1(
	        cert.siginfo.algorithmOid, cert.siginfo.parameters)
	    ]),
	    // issuer
	    _dnToAsn1(cert.issuer),
	    // validity
	    asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, [
	      notBefore,
	      notAfter
	    ]),
	    // subject
	    _dnToAsn1(cert.subject),
	    // SubjectPublicKeyInfo
	    pki$1.publicKeyToAsn1(cert.publicKey)
	  ]);

	  if(cert.issuer.uniqueId) {
	    // issuerUniqueID (optional)
	    tbs.value.push(
	      asn1$1.create(asn1$1.Class.CONTEXT_SPECIFIC, 1, true, [
	        asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.BITSTRING, false,
	          // TODO: support arbitrary bit length ids
	          String.fromCharCode(0x00) +
	          cert.issuer.uniqueId
	        )
	      ])
	    );
	  }
	  if(cert.subject.uniqueId) {
	    // subjectUniqueID (optional)
	    tbs.value.push(
	      asn1$1.create(asn1$1.Class.CONTEXT_SPECIFIC, 2, true, [
	        asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.BITSTRING, false,
	          // TODO: support arbitrary bit length ids
	          String.fromCharCode(0x00) +
	          cert.subject.uniqueId
	        )
	      ])
	    );
	  }

	  if(cert.extensions.length > 0) {
	    // extensions (optional)
	    tbs.value.push(pki$1.certificateExtensionsToAsn1(cert.extensions));
	  }

	  return tbs;
	};

	/**
	 * Gets the ASN.1 CertificationRequestInfo part of a
	 * PKCS#10 CertificationRequest.
	 *
	 * @param csr the certification request.
	 *
	 * @return the asn1 CertificationRequestInfo.
	 */
	pki$1.getCertificationRequestInfo = function(csr) {
	  // CertificationRequestInfo
	  var cri = asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, [
	    // version
	    asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.INTEGER, false,
	      asn1$1.integerToDer(csr.version).getBytes()),
	    // subject
	    _dnToAsn1(csr.subject),
	    // SubjectPublicKeyInfo
	    pki$1.publicKeyToAsn1(csr.publicKey),
	    // attributes
	    _CRIAttributesToAsn1(csr)
	  ]);

	  return cri;
	};

	/**
	 * Converts a DistinguishedName (subject or issuer) to an ASN.1 object.
	 *
	 * @param dn the DistinguishedName.
	 *
	 * @return the asn1 representation of a DistinguishedName.
	 */
	pki$1.distinguishedNameToAsn1 = function(dn) {
	  return _dnToAsn1(dn);
	};

	/**
	 * Converts an X.509v3 RSA certificate to an ASN.1 object.
	 *
	 * @param cert the certificate.
	 *
	 * @return the asn1 representation of an X.509v3 RSA certificate.
	 */
	pki$1.certificateToAsn1 = function(cert) {
	  // prefer cached TBSCertificate over generating one
	  var tbsCertificate = cert.tbsCertificate || pki$1.getTBSCertificate(cert);

	  // Certificate
	  return asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, [
	    // TBSCertificate
	    tbsCertificate,
	    // AlgorithmIdentifier (signature algorithm)
	    asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, [
	      // algorithm
	      asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.OID, false,
	        asn1$1.oidToDer(cert.signatureOid).getBytes()),
	      // parameters
	      _signatureParametersToAsn1(cert.signatureOid, cert.signatureParameters)
	    ]),
	    // SignatureValue
	    asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.BITSTRING, false,
	      String.fromCharCode(0x00) + cert.signature)
	  ]);
	};

	/**
	 * Converts X.509v3 certificate extensions to ASN.1.
	 *
	 * @param exts the extensions to convert.
	 *
	 * @return the extensions in ASN.1 format.
	 */
	pki$1.certificateExtensionsToAsn1 = function(exts) {
	  // create top-level extension container
	  var rval = asn1$1.create(asn1$1.Class.CONTEXT_SPECIFIC, 3, true, []);

	  // create extension sequence (stores a sequence for each extension)
	  var seq = asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, []);
	  rval.value.push(seq);

	  for(var i = 0; i < exts.length; ++i) {
	    seq.value.push(pki$1.certificateExtensionToAsn1(exts[i]));
	  }

	  return rval;
	};

	/**
	 * Converts a single certificate extension to ASN.1.
	 *
	 * @param ext the extension to convert.
	 *
	 * @return the extension in ASN.1 format.
	 */
	pki$1.certificateExtensionToAsn1 = function(ext) {
	  // create a sequence for each extension
	  var extseq = asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, []);

	  // extnID (OID)
	  extseq.value.push(asn1$1.create(
	    asn1$1.Class.UNIVERSAL, asn1$1.Type.OID, false,
	    asn1$1.oidToDer(ext.id).getBytes()));

	  // critical defaults to false
	  if(ext.critical) {
	    // critical BOOLEAN DEFAULT FALSE
	    extseq.value.push(asn1$1.create(
	      asn1$1.Class.UNIVERSAL, asn1$1.Type.BOOLEAN, false,
	      String.fromCharCode(0xFF)));
	  }

	  var value = ext.value;
	  if(typeof ext.value !== 'string') {
	    // value is asn.1
	    value = asn1$1.toDer(value).getBytes();
	  }

	  // extnValue (OCTET STRING)
	  extseq.value.push(asn1$1.create(
	    asn1$1.Class.UNIVERSAL, asn1$1.Type.OCTETSTRING, false, value));

	  return extseq;
	};

	/**
	 * Converts a PKCS#10 certification request to an ASN.1 object.
	 *
	 * @param csr the certification request.
	 *
	 * @return the asn1 representation of a certification request.
	 */
	pki$1.certificationRequestToAsn1 = function(csr) {
	  // prefer cached CertificationRequestInfo over generating one
	  var cri = csr.certificationRequestInfo ||
	    pki$1.getCertificationRequestInfo(csr);

	  // Certificate
	  return asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, [
	    // CertificationRequestInfo
	    cri,
	    // AlgorithmIdentifier (signature algorithm)
	    asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.SEQUENCE, true, [
	      // algorithm
	      asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.OID, false,
	        asn1$1.oidToDer(csr.signatureOid).getBytes()),
	      // parameters
	      _signatureParametersToAsn1(csr.signatureOid, csr.signatureParameters)
	    ]),
	    // signature
	    asn1$1.create(asn1$1.Class.UNIVERSAL, asn1$1.Type.BITSTRING, false,
	      String.fromCharCode(0x00) + csr.signature)
	  ]);
	};

	/**
	 * Creates a CA store.
	 *
	 * @param certs an optional array of certificate objects or PEM-formatted
	 *          certificate strings to add to the CA store.
	 *
	 * @return the CA store.
	 */
	pki$1.createCaStore = function(certs) {
	  // create CA store
	  var caStore = {
	    // stored certificates
	    certs: {}
	  };

	  /**
	   * Gets the certificate that issued the passed certificate or its
	   * 'parent'.
	   *
	   * @param cert the certificate to get the parent for.
	   *
	   * @return the parent certificate or null if none was found.
	   */
	  caStore.getIssuer = function(cert) {
	    var rval = getBySubject(cert.issuer);

	    // see if there are multiple matches
	    /*if(forge.util.isArray(rval)) {
	      // TODO: resolve multiple matches by checking
	      // authorityKey/subjectKey/issuerUniqueID/other identifiers, etc.
	      // FIXME: or alternatively do authority key mapping
	      // if possible (X.509v1 certs can't work?)
	      throw new Error('Resolving multiple issuer matches not implemented yet.');
	    }*/

	    return rval;
	  };

	  /**
	   * Adds a trusted certificate to the store.
	   *
	   * @param cert the certificate to add as a trusted certificate (either a
	   *          pki.certificate object or a PEM-formatted certificate).
	   */
	  caStore.addCertificate = function(cert) {
	    // convert from pem if necessary
	    if(typeof cert === 'string') {
	      cert = forge$3.pki.certificateFromPem(cert);
	    }

	    ensureSubjectHasHash(cert.subject);

	    if(!caStore.hasCertificate(cert)) { // avoid duplicate certificates in store
	      if(cert.subject.hash in caStore.certs) {
	        // subject hash already exists, append to array
	        var tmp = caStore.certs[cert.subject.hash];
	        if(!forge$3.util.isArray(tmp)) {
	          tmp = [tmp];
	        }
	        tmp.push(cert);
	        caStore.certs[cert.subject.hash] = tmp;
	      } else {
	        caStore.certs[cert.subject.hash] = cert;
	      }
	    }
	  };

	  /**
	   * Checks to see if the given certificate is in the store.
	   *
	   * @param cert the certificate to check (either a pki.certificate or a
	   *          PEM-formatted certificate).
	   *
	   * @return true if the certificate is in the store, false if not.
	   */
	  caStore.hasCertificate = function(cert) {
	    // convert from pem if necessary
	    if(typeof cert === 'string') {
	      cert = forge$3.pki.certificateFromPem(cert);
	    }

	    var match = getBySubject(cert.subject);
	    if(!match) {
	      return false;
	    }
	    if(!forge$3.util.isArray(match)) {
	      match = [match];
	    }
	    // compare DER-encoding of certificates
	    var der1 = asn1$1.toDer(pki$1.certificateToAsn1(cert)).getBytes();
	    for(var i = 0; i < match.length; ++i) {
	      var der2 = asn1$1.toDer(pki$1.certificateToAsn1(match[i])).getBytes();
	      if(der1 === der2) {
	        return true;
	      }
	    }
	    return false;
	  };

	  /**
	   * Lists all of the certificates kept in the store.
	   *
	   * @return an array of all of the pki.certificate objects in the store.
	   */
	  caStore.listAllCertificates = function() {
	    var certList = [];

	    for(var hash in caStore.certs) {
	      if(caStore.certs.hasOwnProperty(hash)) {
	        var value = caStore.certs[hash];
	        if(!forge$3.util.isArray(value)) {
	          certList.push(value);
	        } else {
	          for(var i = 0; i < value.length; ++i) {
	            certList.push(value[i]);
	          }
	        }
	      }
	    }

	    return certList;
	  };

	  /**
	   * Removes a certificate from the store.
	   *
	   * @param cert the certificate to remove (either a pki.certificate or a
	   *          PEM-formatted certificate).
	   *
	   * @return the certificate that was removed or null if the certificate
	   *           wasn't in store.
	   */
	  caStore.removeCertificate = function(cert) {
	    var result;

	    // convert from pem if necessary
	    if(typeof cert === 'string') {
	      cert = forge$3.pki.certificateFromPem(cert);
	    }
	    ensureSubjectHasHash(cert.subject);
	    if(!caStore.hasCertificate(cert)) {
	      return null;
	    }

	    var match = getBySubject(cert.subject);

	    if(!forge$3.util.isArray(match)) {
	      result = caStore.certs[cert.subject.hash];
	      delete caStore.certs[cert.subject.hash];
	      return result;
	    }

	    // compare DER-encoding of certificates
	    var der1 = asn1$1.toDer(pki$1.certificateToAsn1(cert)).getBytes();
	    for(var i = 0; i < match.length; ++i) {
	      var der2 = asn1$1.toDer(pki$1.certificateToAsn1(match[i])).getBytes();
	      if(der1 === der2) {
	        result = match[i];
	        match.splice(i, 1);
	      }
	    }
	    if(match.length === 0) {
	      delete caStore.certs[cert.subject.hash];
	    }

	    return result;
	  };

	  function getBySubject(subject) {
	    ensureSubjectHasHash(subject);
	    return caStore.certs[subject.hash] || null;
	  }

	  function ensureSubjectHasHash(subject) {
	    // produce subject hash if it doesn't exist
	    if(!subject.hash) {
	      var md = forge$3.md.sha1.create();
	      subject.attributes = pki$1.RDNAttributesAsArray(_dnToAsn1(subject), md);
	      subject.hash = md.digest().toHex();
	    }
	  }

	  // auto-add passed in certs
	  if(certs) {
	    // parse PEM-formatted certificates as necessary
	    for(var i = 0; i < certs.length; ++i) {
	      var cert = certs[i];
	      caStore.addCertificate(cert);
	    }
	  }

	  return caStore;
	};

	/**
	 * Certificate verification errors, based on TLS.
	 */
	pki$1.certificateError = {
	  bad_certificate: 'forge.pki.BadCertificate',
	  unsupported_certificate: 'forge.pki.UnsupportedCertificate',
	  certificate_revoked: 'forge.pki.CertificateRevoked',
	  certificate_expired: 'forge.pki.CertificateExpired',
	  certificate_unknown: 'forge.pki.CertificateUnknown',
	  unknown_ca: 'forge.pki.UnknownCertificateAuthority'
	};

	/**
	 * Verifies a certificate chain against the given Certificate Authority store
	 * with an optional custom verify callback.
	 *
	 * @param caStore a certificate store to verify against.
	 * @param chain the certificate chain to verify, with the root or highest
	 *          authority at the end (an array of certificates).
	 * @param options a callback to be called for every certificate in the chain or
	 *                  an object with:
	 *                  verify a callback to be called for every certificate in the
	 *                    chain
	 *                  validityCheckDate the date against which the certificate
	 *                    validity period should be checked. Pass null to not check
	 *                    the validity period. By default, the current date is used.
	 *
	 * The verify callback has the following signature:
	 *
	 * verified - Set to true if certificate was verified, otherwise the
	 *   pki.certificateError for why the certificate failed.
	 * depth - The current index in the chain, where 0 is the end point's cert.
	 * certs - The certificate chain, *NOTE* an empty chain indicates an anonymous
	 *   end point.
	 *
	 * The function returns true on success and on failure either the appropriate
	 * pki.certificateError or an object with 'error' set to the appropriate
	 * pki.certificateError and 'message' set to a custom error message.
	 *
	 * @return true if successful, error thrown if not.
	 */
	pki$1.verifyCertificateChain = function(caStore, chain, options) {
	  /* From: RFC3280 - Internet X.509 Public Key Infrastructure Certificate
	    Section 6: Certification Path Validation
	    See inline parentheticals related to this particular implementation.

	    The primary goal of path validation is to verify the binding between
	    a subject distinguished name or a subject alternative name and subject
	    public key, as represented in the end entity certificate, based on the
	    public key of the trust anchor. This requires obtaining a sequence of
	    certificates that support that binding. That sequence should be provided
	    in the passed 'chain'. The trust anchor should be in the given CA
	    store. The 'end entity' certificate is the certificate provided by the
	    end point (typically a server) and is the first in the chain.

	    To meet this goal, the path validation process verifies, among other
	    things, that a prospective certification path (a sequence of n
	    certificates or a 'chain') satisfies the following conditions:

	    (a) for all x in {1, ..., n-1}, the subject of certificate x is
	          the issuer of certificate x+1;

	    (b) certificate 1 is issued by the trust anchor;

	    (c) certificate n is the certificate to be validated; and

	    (d) for all x in {1, ..., n}, the certificate was valid at the
	          time in question.

	    Note that here 'n' is index 0 in the chain and 1 is the last certificate
	    in the chain and it must be signed by a certificate in the connection's
	    CA store.

	    The path validation process also determines the set of certificate
	    policies that are valid for this path, based on the certificate policies
	    extension, policy mapping extension, policy constraints extension, and
	    inhibit any-policy extension.

	    Note: Policy mapping extension not supported (Not Required).

	    Note: If the certificate has an unsupported critical extension, then it
	    must be rejected.

	    Note: A certificate is self-issued if the DNs that appear in the subject
	    and issuer fields are identical and are not empty.

	    The path validation algorithm assumes the following seven inputs are
	    provided to the path processing logic. What this specific implementation
	    will use is provided parenthetically:

	    (a) a prospective certification path of length n (the 'chain')
	    (b) the current date/time: ('now').
	    (c) user-initial-policy-set: A set of certificate policy identifiers
	          naming the policies that are acceptable to the certificate user.
	          The user-initial-policy-set contains the special value any-policy
	          if the user is not concerned about certificate policy
	          (Not implemented. Any policy is accepted).
	    (d) trust anchor information, describing a CA that serves as a trust
	          anchor for the certification path. The trust anchor information
	          includes:

	      (1)  the trusted issuer name,
	      (2)  the trusted public key algorithm,
	      (3)  the trusted public key, and
	      (4)  optionally, the trusted public key parameters associated
	             with the public key.

	      (Trust anchors are provided via certificates in the CA store).

	      The trust anchor information may be provided to the path processing
	      procedure in the form of a self-signed certificate. The trusted anchor
	      information is trusted because it was delivered to the path processing
	      procedure by some trustworthy out-of-band procedure. If the trusted
	      public key algorithm requires parameters, then the parameters are
	      provided along with the trusted public key (No parameters used in this
	      implementation).

	    (e) initial-policy-mapping-inhibit, which indicates if policy mapping is
	          allowed in the certification path.
	          (Not implemented, no policy checking)

	    (f) initial-explicit-policy, which indicates if the path must be valid
	          for at least one of the certificate policies in the user-initial-
	          policy-set.
	          (Not implemented, no policy checking)

	    (g) initial-any-policy-inhibit, which indicates whether the
	          anyPolicy OID should be processed if it is included in a
	          certificate.
	          (Not implemented, so any policy is valid provided that it is
	          not marked as critical) */

	  /* Basic Path Processing:

	    For each certificate in the 'chain', the following is checked:

	    1. The certificate validity period includes the current time.
	    2. The certificate was signed by its parent (where the parent is either
	       the next in the chain or from the CA store). Allow processing to
	       continue to the next step if no parent is found but the certificate is
	       in the CA store.
	    3. TODO: The certificate has not been revoked.
	    4. The certificate issuer name matches the parent's subject name.
	    5. TODO: If the certificate is self-issued and not the final certificate
	       in the chain, skip this step, otherwise verify that the subject name
	       is within one of the permitted subtrees of X.500 distinguished names
	       and that each of the alternative names in the subjectAltName extension
	       (critical or non-critical) is within one of the permitted subtrees for
	       that name type.
	    6. TODO: If the certificate is self-issued and not the final certificate
	       in the chain, skip this step, otherwise verify that the subject name
	       is not within one of the excluded subtrees for X.500 distinguished
	       names and none of the subjectAltName extension names are excluded for
	       that name type.
	    7. The other steps in the algorithm for basic path processing involve
	       handling the policy extension which is not presently supported in this
	       implementation. Instead, if a critical policy extension is found, the
	       certificate is rejected as not supported.
	    8. If the certificate is not the first or if its the only certificate in
	       the chain (having no parent from the CA store or is self-signed) and it
	       has a critical key usage extension, verify that the keyCertSign bit is
	       set. If the key usage extension exists, verify that the basic
	       constraints extension exists. If the basic constraints extension exists,
	       verify that the cA flag is set. If pathLenConstraint is set, ensure that
	       the number of certificates that precede in the chain (come earlier
	       in the chain as implemented below), excluding the very first in the
	       chain (typically the end-entity one), isn't greater than the
	       pathLenConstraint. This constraint limits the number of intermediate
	       CAs that may appear below a CA before only end-entity certificates
	       may be issued. */

	  // if a verify callback is passed as the third parameter, package it within
	  // the options object. This is to support a legacy function signature that
	  // expected the verify callback as the third parameter.
	  if(typeof options === 'function') {
	    options = {verify: options};
	  }
	  options = options || {};

	  // copy cert chain references to another array to protect against changes
	  // in verify callback
	  chain = chain.slice(0);
	  var certs = chain.slice(0);

	  var validityCheckDate = options.validityCheckDate;
	  // if no validityCheckDate is specified, default to the current date. Make
	  // sure to maintain the value null because it indicates that the validity
	  // period should not be checked.
	  if(typeof validityCheckDate === 'undefined') {
	    validityCheckDate = new Date();
	  }

	  // verify each cert in the chain using its parent, where the parent
	  // is either the next in the chain or from the CA store
	  var first = true;
	  var error = null;
	  var depth = 0;
	  do {
	    var cert = chain.shift();
	    var parent = null;
	    var selfSigned = false;

	    if(validityCheckDate) {
	      // 1. check valid time
	      if(validityCheckDate < cert.validity.notBefore ||
	         validityCheckDate > cert.validity.notAfter) {
	        error = {
	          message: 'Certificate is not valid yet or has expired.',
	          error: pki$1.certificateError.certificate_expired,
	          notBefore: cert.validity.notBefore,
	          notAfter: cert.validity.notAfter,
	          // TODO: we might want to reconsider renaming 'now' to
	          // 'validityCheckDate' should this API be changed in the future.
	          now: validityCheckDate
	        };
	      }
	    }

	    // 2. verify with parent from chain or CA store
	    if(error === null) {
	      parent = chain[0] || caStore.getIssuer(cert);
	      if(parent === null) {
	        // check for self-signed cert
	        if(cert.isIssuer(cert)) {
	          selfSigned = true;
	          parent = cert;
	        }
	      }

	      if(parent) {
	        // FIXME: current CA store implementation might have multiple
	        // certificates where the issuer can't be determined from the
	        // certificate (happens rarely with, eg: old certificates) so normalize
	        // by always putting parents into an array
	        // TODO: there's may be an extreme degenerate case currently uncovered
	        // where an old intermediate certificate seems to have a matching parent
	        // but none of the parents actually verify ... but the intermediate
	        // is in the CA and it should pass this check; needs investigation
	        var parents = parent;
	        if(!forge$3.util.isArray(parents)) {
	          parents = [parents];
	        }

	        // try to verify with each possible parent (typically only one)
	        var verified = false;
	        while(!verified && parents.length > 0) {
	          parent = parents.shift();
	          try {
	            verified = parent.verify(cert);
	          } catch(ex) {
	            // failure to verify, don't care why, try next one
	          }
	        }

	        if(!verified) {
	          error = {
	            message: 'Certificate signature is invalid.',
	            error: pki$1.certificateError.bad_certificate
	          };
	        }
	      }

	      if(error === null && (!parent || selfSigned) &&
	        !caStore.hasCertificate(cert)) {
	        // no parent issuer and certificate itself is not trusted
	        error = {
	          message: 'Certificate is not trusted.',
	          error: pki$1.certificateError.unknown_ca
	        };
	      }
	    }

	    // TODO: 3. check revoked

	    // 4. check for matching issuer/subject
	    if(error === null && parent && !cert.isIssuer(parent)) {
	      // parent is not issuer
	      error = {
	        message: 'Certificate issuer is invalid.',
	        error: pki$1.certificateError.bad_certificate
	      };
	    }

	    // 5. TODO: check names with permitted names tree

	    // 6. TODO: check names against excluded names tree

	    // 7. check for unsupported critical extensions
	    if(error === null) {
	      // supported extensions
	      var se = {
	        keyUsage: true,
	        basicConstraints: true
	      };
	      for(var i = 0; error === null && i < cert.extensions.length; ++i) {
	        var ext = cert.extensions[i];
	        if(ext.critical && !(ext.name in se)) {
	          error = {
	            message:
	              'Certificate has an unsupported critical extension.',
	            error: pki$1.certificateError.unsupported_certificate
	          };
	        }
	      }
	    }

	    // 8. check for CA if cert is not first or is the only certificate
	    // remaining in chain with no parent or is self-signed
	    if(error === null &&
	      (!first || (chain.length === 0 && (!parent || selfSigned)))) {
	      // first check keyUsage extension and then basic constraints
	      var bcExt = cert.getExtension('basicConstraints');
	      var keyUsageExt = cert.getExtension('keyUsage');
	      if(keyUsageExt !== null) {
	        // keyCertSign must be true and there must be a basic
	        // constraints extension
	        if(!keyUsageExt.keyCertSign || bcExt === null) {
	          // bad certificate
	          error = {
	            message:
	              'Certificate keyUsage or basicConstraints conflict ' +
	              'or indicate that the certificate is not a CA. ' +
	              'If the certificate is the only one in the chain or ' +
	              'isn\'t the first then the certificate must be a ' +
	              'valid CA.',
	            error: pki$1.certificateError.bad_certificate
	          };
	        }
	      }
	      // basic constraints cA flag must be set
	      if(error === null && bcExt !== null && !bcExt.cA) {
	        // bad certificate
	        error = {
	          message:
	            'Certificate basicConstraints indicates the certificate ' +
	            'is not a CA.',
	          error: pki$1.certificateError.bad_certificate
	        };
	      }
	      // if error is not null and keyUsage is available, then we know it
	      // has keyCertSign and there is a basic constraints extension too,
	      // which means we can check pathLenConstraint (if it exists)
	      if(error === null && keyUsageExt !== null &&
	        'pathLenConstraint' in bcExt) {
	        // pathLen is the maximum # of intermediate CA certs that can be
	        // found between the current certificate and the end-entity (depth 0)
	        // certificate; this number does not include the end-entity (depth 0,
	        // last in the chain) even if it happens to be a CA certificate itself
	        var pathLen = depth - 1;
	        if(pathLen > bcExt.pathLenConstraint) {
	          // pathLenConstraint violated, bad certificate
	          error = {
	            message:
	              'Certificate basicConstraints pathLenConstraint violated.',
	            error: pki$1.certificateError.bad_certificate
	          };
	        }
	      }
	    }

	    // call application callback
	    var vfd = (error === null) ? true : error.error;
	    var ret = options.verify ? options.verify(vfd, depth, certs) : vfd;
	    if(ret === true) {
	      // clear any set error
	      error = null;
	    } else {
	      // if passed basic tests, set default message and alert
	      if(vfd === true) {
	        error = {
	          message: 'The application rejected the certificate.',
	          error: pki$1.certificateError.bad_certificate
	        };
	      }

	      // check for custom error info
	      if(ret || ret === 0) {
	        // set custom message and error
	        if(typeof ret === 'object' && !forge$3.util.isArray(ret)) {
	          if(ret.message) {
	            error.message = ret.message;
	          }
	          if(ret.error) {
	            error.error = ret.error;
	          }
	        } else if(typeof ret === 'string') {
	          // set custom error
	          error.error = ret;
	        }
	      }

	      // throw error
	      throw error;
	    }

	    // no longer first cert in chain
	    first = false;
	    ++depth;
	  } while(chain.length > 0);

	  return true;
	};

	/**
	 * Javascript implementation of PKCS#7 v1.5.
	 *
	 * @author Stefan Siegl
	 * @author Dave Longley
	 *
	 * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>
	 * Copyright (c) 2012-2015 Digital Bazaar, Inc.
	 *
	 * Currently this implementation only supports ContentType of EnvelopedData,
	 * EncryptedData, or SignedData at the root level. The top level elements may
	 * contain only a ContentInfo of ContentType Data, i.e. plain data. Further
	 * nesting is not (yet) supported.
	 *
	 * The Forge validators for PKCS #7's ASN.1 structures are available from
	 * a separate file pkcs7asn1.js, since those are referenced from other
	 * PKCS standards like PKCS #12.
	 */

	var forge$2 = forge$z;










	// shortcut for ASN.1 API
	var asn1 = forge$2.asn1;

	// shortcut for PKCS#7 API
	var p7 = forge$2.pkcs7 = forge$2.pkcs7 || {};

	/**
	 * Converts a PKCS#7 message from PEM format.
	 *
	 * @param pem the PEM-formatted PKCS#7 message.
	 *
	 * @return the PKCS#7 message.
	 */
	p7.messageFromPem = function(pem) {
	  var msg = forge$2.pem.decode(pem)[0];

	  if(msg.type !== 'PKCS7') {
	    var error = new Error('Could not convert PKCS#7 message from PEM; PEM ' +
	      'header type is not "PKCS#7".');
	    error.headerType = msg.type;
	    throw error;
	  }
	  if(msg.procType && msg.procType.type === 'ENCRYPTED') {
	    throw new Error('Could not convert PKCS#7 message from PEM; PEM is encrypted.');
	  }

	  // convert DER to ASN.1 object
	  var obj = asn1.fromDer(msg.body);

	  return p7.messageFromAsn1(obj);
	};

	/**
	 * Converts a PKCS#7 message to PEM format.
	 *
	 * @param msg The PKCS#7 message object
	 * @param maxline The maximum characters per line, defaults to 64.
	 *
	 * @return The PEM-formatted PKCS#7 message.
	 */
	p7.messageToPem = function(msg, maxline) {
	  // convert to ASN.1, then DER, then PEM-encode
	  var pemObj = {
	    type: 'PKCS7',
	    body: asn1.toDer(msg.toAsn1()).getBytes()
	  };
	  return forge$2.pem.encode(pemObj, {maxline: maxline});
	};

	/**
	 * Converts a PKCS#7 message from an ASN.1 object.
	 *
	 * @param obj the ASN.1 representation of a ContentInfo.
	 *
	 * @return the PKCS#7 message.
	 */
	p7.messageFromAsn1 = function(obj) {
	  // validate root level ContentInfo and capture data
	  var capture = {};
	  var errors = [];
	  if(!asn1.validate(obj, p7.asn1.contentInfoValidator, capture, errors)) {
	    var error = new Error('Cannot read PKCS#7 message. ' +
	      'ASN.1 object is not an PKCS#7 ContentInfo.');
	    error.errors = errors;
	    throw error;
	  }

	  var contentType = asn1.derToOid(capture.contentType);
	  var msg;

	  switch(contentType) {
	    case forge$2.pki.oids.envelopedData:
	      msg = p7.createEnvelopedData();
	      break;

	    case forge$2.pki.oids.encryptedData:
	      msg = p7.createEncryptedData();
	      break;

	    case forge$2.pki.oids.signedData:
	      msg = p7.createSignedData();
	      break;

	    default:
	      throw new Error('Cannot read PKCS#7 message. ContentType with OID ' +
	        contentType + ' is not (yet) supported.');
	  }

	  msg.fromAsn1(capture.content.value[0]);
	  return msg;
	};

	p7.createSignedData = function() {
	  var msg = null;
	  msg = {
	    type: forge$2.pki.oids.signedData,
	    version: 1,
	    certificates: [],
	    crls: [],
	    // TODO: add json-formatted signer stuff here?
	    signers: [],
	    // populated during sign()
	    digestAlgorithmIdentifiers: [],
	    contentInfo: null,
	    signerInfos: [],

	    fromAsn1: function(obj) {
	      // validate SignedData content block and capture data.
	      _fromAsn1(msg, obj, p7.asn1.signedDataValidator);
	      msg.certificates = [];
	      msg.crls = [];
	      msg.digestAlgorithmIdentifiers = [];
	      msg.contentInfo = null;
	      msg.signerInfos = [];

	      if(msg.rawCapture.certificates) {
	        var certs = msg.rawCapture.certificates.value;
	        for(var i = 0; i < certs.length; ++i) {
	          msg.certificates.push(forge$2.pki.certificateFromAsn1(certs[i]));
	        }
	      }

	      // TODO: parse crls
	    },

	    toAsn1: function() {
	      // degenerate case with no content
	      if(!msg.contentInfo) {
	        msg.sign();
	      }

	      var certs = [];
	      for(var i = 0; i < msg.certificates.length; ++i) {
	        certs.push(forge$2.pki.certificateToAsn1(msg.certificates[i]));
	      }

	      var crls = [];
	      // TODO: implement CRLs

	      // [0] SignedData
	      var signedData = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	          // Version
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	            asn1.integerToDer(msg.version).getBytes()),
	          // DigestAlgorithmIdentifiers
	          asn1.create(
	            asn1.Class.UNIVERSAL, asn1.Type.SET, true,
	            msg.digestAlgorithmIdentifiers),
	          // ContentInfo
	          msg.contentInfo
	        ])
	      ]);
	      if(certs.length > 0) {
	        // [0] IMPLICIT ExtendedCertificatesAndCertificates OPTIONAL
	        signedData.value[0].value.push(
	          asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, certs));
	      }
	      if(crls.length > 0) {
	        // [1] IMPLICIT CertificateRevocationLists OPTIONAL
	        signedData.value[0].value.push(
	          asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, crls));
	      }
	      // SignerInfos
	      signedData.value[0].value.push(
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true,
	          msg.signerInfos));

	      // ContentInfo
	      return asn1.create(
	        asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	          // ContentType
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	            asn1.oidToDer(msg.type).getBytes()),
	          // [0] SignedData
	          signedData
	        ]);
	    },

	    /**
	     * Add (another) entity to list of signers.
	     *
	     * Note: If authenticatedAttributes are provided, then, per RFC 2315,
	     * they must include at least two attributes: content type and
	     * message digest. The message digest attribute value will be
	     * auto-calculated during signing and will be ignored if provided.
	     *
	     * Here's an example of providing these two attributes:
	     *
	     * forge.pkcs7.createSignedData();
	     * p7.addSigner({
	     *   issuer: cert.issuer.attributes,
	     *   serialNumber: cert.serialNumber,
	     *   key: privateKey,
	     *   digestAlgorithm: forge.pki.oids.sha1,
	     *   authenticatedAttributes: [{
	     *     type: forge.pki.oids.contentType,
	     *     value: forge.pki.oids.data
	     *   }, {
	     *     type: forge.pki.oids.messageDigest
	     *   }]
	     * });
	     *
	     * TODO: Support [subjectKeyIdentifier] as signer's ID.
	     *
	     * @param signer the signer information:
	     *          key the signer's private key.
	     *          [certificate] a certificate containing the public key
	     *            associated with the signer's private key; use this option as
	     *            an alternative to specifying signer.issuer and
	     *            signer.serialNumber.
	     *          [issuer] the issuer attributes (eg: cert.issuer.attributes).
	     *          [serialNumber] the signer's certificate's serial number in
	     *           hexadecimal (eg: cert.serialNumber).
	     *          [digestAlgorithm] the message digest OID, as a string, to use
	     *            (eg: forge.pki.oids.sha1).
	     *          [authenticatedAttributes] an optional array of attributes
	     *            to also sign along with the content.
	     */
	    addSigner: function(signer) {
	      var issuer = signer.issuer;
	      var serialNumber = signer.serialNumber;
	      if(signer.certificate) {
	        var cert = signer.certificate;
	        if(typeof cert === 'string') {
	          cert = forge$2.pki.certificateFromPem(cert);
	        }
	        issuer = cert.issuer.attributes;
	        serialNumber = cert.serialNumber;
	      }
	      var key = signer.key;
	      if(!key) {
	        throw new Error(
	          'Could not add PKCS#7 signer; no private key specified.');
	      }
	      if(typeof key === 'string') {
	        key = forge$2.pki.privateKeyFromPem(key);
	      }

	      // ensure OID known for digest algorithm
	      var digestAlgorithm = signer.digestAlgorithm || forge$2.pki.oids.sha1;
	      switch(digestAlgorithm) {
	      case forge$2.pki.oids.sha1:
	      case forge$2.pki.oids.sha256:
	      case forge$2.pki.oids.sha384:
	      case forge$2.pki.oids.sha512:
	      case forge$2.pki.oids.md5:
	        break;
	      default:
	        throw new Error(
	          'Could not add PKCS#7 signer; unknown message digest algorithm: ' +
	          digestAlgorithm);
	      }

	      // if authenticatedAttributes is present, then the attributes
	      // must contain at least PKCS #9 content-type and message-digest
	      var authenticatedAttributes = signer.authenticatedAttributes || [];
	      if(authenticatedAttributes.length > 0) {
	        var contentType = false;
	        var messageDigest = false;
	        for(var i = 0; i < authenticatedAttributes.length; ++i) {
	          var attr = authenticatedAttributes[i];
	          if(!contentType && attr.type === forge$2.pki.oids.contentType) {
	            contentType = true;
	            if(messageDigest) {
	              break;
	            }
	            continue;
	          }
	          if(!messageDigest && attr.type === forge$2.pki.oids.messageDigest) {
	            messageDigest = true;
	            if(contentType) {
	              break;
	            }
	            continue;
	          }
	        }

	        if(!contentType || !messageDigest) {
	          throw new Error('Invalid signer.authenticatedAttributes. If ' +
	            'signer.authenticatedAttributes is specified, then it must ' +
	            'contain at least two attributes, PKCS #9 content-type and ' +
	            'PKCS #9 message-digest.');
	        }
	      }

	      msg.signers.push({
	        key: key,
	        version: 1,
	        issuer: issuer,
	        serialNumber: serialNumber,
	        digestAlgorithm: digestAlgorithm,
	        signatureAlgorithm: forge$2.pki.oids.rsaEncryption,
	        signature: null,
	        authenticatedAttributes: authenticatedAttributes,
	        unauthenticatedAttributes: []
	      });
	    },

	    /**
	     * Signs the content.
	     * @param options Options to apply when signing:
	     *    [detached] boolean. If signing should be done in detached mode. Defaults to false.
	     */
	    sign: function(options) {
	      options = options || {};
	      // auto-generate content info
	      if(typeof msg.content !== 'object' || msg.contentInfo === null) {
	        // use Data ContentInfo
	        msg.contentInfo = asn1.create(
	          asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	            // ContentType
	            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	              asn1.oidToDer(forge$2.pki.oids.data).getBytes())
	          ]);

	        // add actual content, if present
	        if('content' in msg) {
	          var content;
	          if(msg.content instanceof forge$2.util.ByteBuffer) {
	            content = msg.content.bytes();
	          } else if(typeof msg.content === 'string') {
	            content = forge$2.util.encodeUtf8(msg.content);
	          }

	          if (options.detached) {
	            msg.detachedContent = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, content);
	          } else {
	            msg.contentInfo.value.push(
	              // [0] EXPLICIT content
	              asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	                asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
	                  content)
	              ]));
	          }
	        }
	      }

	      // no signers, return early (degenerate case for certificate container)
	      if(msg.signers.length === 0) {
	        return;
	      }

	      // generate digest algorithm identifiers
	      var mds = addDigestAlgorithmIds();

	      // generate signerInfos
	      addSignerInfos(mds);
	    },

	    verify: function() {
	      throw new Error('PKCS#7 signature verification not yet implemented.');
	    },

	    /**
	     * Add a certificate.
	     *
	     * @param cert the certificate to add.
	     */
	    addCertificate: function(cert) {
	      // convert from PEM
	      if(typeof cert === 'string') {
	        cert = forge$2.pki.certificateFromPem(cert);
	      }
	      msg.certificates.push(cert);
	    },

	    /**
	     * Add a certificate revokation list.
	     *
	     * @param crl the certificate revokation list to add.
	     */
	    addCertificateRevokationList: function(crl) {
	      throw new Error('PKCS#7 CRL support not yet implemented.');
	    }
	  };
	  return msg;

	  function addDigestAlgorithmIds() {
	    var mds = {};

	    for(var i = 0; i < msg.signers.length; ++i) {
	      var signer = msg.signers[i];
	      var oid = signer.digestAlgorithm;
	      if(!(oid in mds)) {
	        // content digest
	        mds[oid] = forge$2.md[forge$2.pki.oids[oid]].create();
	      }
	      if(signer.authenticatedAttributes.length === 0) {
	        // no custom attributes to digest; use content message digest
	        signer.md = mds[oid];
	      } else {
	        // custom attributes to be digested; use own message digest
	        // TODO: optimize to just copy message digest state if that
	        // feature is ever supported with message digests
	        signer.md = forge$2.md[forge$2.pki.oids[oid]].create();
	      }
	    }

	    // add unique digest algorithm identifiers
	    msg.digestAlgorithmIdentifiers = [];
	    for(var oid in mds) {
	      msg.digestAlgorithmIdentifiers.push(
	        // AlgorithmIdentifier
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	          // algorithm
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	            asn1.oidToDer(oid).getBytes()),
	          // parameters (null)
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
	        ]));
	    }

	    return mds;
	  }

	  function addSignerInfos(mds) {
	    var content;

	    if (msg.detachedContent) {
	      // Signature has been made in detached mode.
	      content = msg.detachedContent;
	    } else {
	      // Note: ContentInfo is a SEQUENCE with 2 values, second value is
	      // the content field and is optional for a ContentInfo but required here
	      // since signers are present
	      // get ContentInfo content
	      content = msg.contentInfo.value[1];
	      // skip [0] EXPLICIT content wrapper
	      content = content.value[0];
	    }

	    if(!content) {
	      throw new Error(
	        'Could not sign PKCS#7 message; there is no content to sign.');
	    }

	    // get ContentInfo content type
	    var contentType = asn1.derToOid(msg.contentInfo.value[0].value);

	    // serialize content
	    var bytes = asn1.toDer(content);

	    // skip identifier and length per RFC 2315 9.3
	    // skip identifier (1 byte)
	    bytes.getByte();
	    // read and discard length bytes
	    asn1.getBerValueLength(bytes);
	    bytes = bytes.getBytes();

	    // digest content DER value bytes
	    for(var oid in mds) {
	      mds[oid].start().update(bytes);
	    }

	    // sign content
	    var signingTime = new Date();
	    for(var i = 0; i < msg.signers.length; ++i) {
	      var signer = msg.signers[i];

	      if(signer.authenticatedAttributes.length === 0) {
	        // if ContentInfo content type is not "Data", then
	        // authenticatedAttributes must be present per RFC 2315
	        if(contentType !== forge$2.pki.oids.data) {
	          throw new Error(
	            'Invalid signer; authenticatedAttributes must be present ' +
	            'when the ContentInfo content type is not PKCS#7 Data.');
	        }
	      } else {
	        // process authenticated attributes
	        // [0] IMPLICIT
	        signer.authenticatedAttributesAsn1 = asn1.create(
	          asn1.Class.CONTEXT_SPECIFIC, 0, true, []);

	        // per RFC 2315, attributes are to be digested using a SET container
	        // not the above [0] IMPLICIT container
	        var attrsAsn1 = asn1.create(
	          asn1.Class.UNIVERSAL, asn1.Type.SET, true, []);

	        for(var ai = 0; ai < signer.authenticatedAttributes.length; ++ai) {
	          var attr = signer.authenticatedAttributes[ai];
	          if(attr.type === forge$2.pki.oids.messageDigest) {
	            // use content message digest as value
	            attr.value = mds[signer.digestAlgorithm].digest();
	          } else if(attr.type === forge$2.pki.oids.signingTime) {
	            // auto-populate signing time if not already set
	            if(!attr.value) {
	              attr.value = signingTime;
	            }
	          }

	          // convert to ASN.1 and push onto Attributes SET (for signing) and
	          // onto authenticatedAttributesAsn1 to complete SignedData ASN.1
	          // TODO: optimize away duplication
	          attrsAsn1.value.push(_attributeToAsn1(attr));
	          signer.authenticatedAttributesAsn1.value.push(_attributeToAsn1(attr));
	        }

	        // DER-serialize and digest SET OF attributes only
	        bytes = asn1.toDer(attrsAsn1).getBytes();
	        signer.md.start().update(bytes);
	      }

	      // sign digest
	      signer.signature = signer.key.sign(signer.md, 'RSASSA-PKCS1-V1_5');
	    }

	    // add signer info
	    msg.signerInfos = _signersToAsn1(msg.signers);
	  }
	};

	/**
	 * Creates an empty PKCS#7 message of type EncryptedData.
	 *
	 * @return the message.
	 */
	p7.createEncryptedData = function() {
	  var msg = null;
	  msg = {
	    type: forge$2.pki.oids.encryptedData,
	    version: 0,
	    encryptedContent: {
	      algorithm: forge$2.pki.oids['aes256-CBC']
	    },

	    /**
	     * Reads an EncryptedData content block (in ASN.1 format)
	     *
	     * @param obj The ASN.1 representation of the EncryptedData content block
	     */
	    fromAsn1: function(obj) {
	      // Validate EncryptedData content block and capture data.
	      _fromAsn1(msg, obj, p7.asn1.encryptedDataValidator);
	    },

	    /**
	     * Decrypt encrypted content
	     *
	     * @param key The (symmetric) key as a byte buffer
	     */
	    decrypt: function(key) {
	      if(key !== undefined) {
	        msg.encryptedContent.key = key;
	      }
	      _decryptContent(msg);
	    }
	  };
	  return msg;
	};

	/**
	 * Creates an empty PKCS#7 message of type EnvelopedData.
	 *
	 * @return the message.
	 */
	p7.createEnvelopedData = function() {
	  var msg = null;
	  msg = {
	    type: forge$2.pki.oids.envelopedData,
	    version: 0,
	    recipients: [],
	    encryptedContent: {
	      algorithm: forge$2.pki.oids['aes256-CBC']
	    },

	    /**
	     * Reads an EnvelopedData content block (in ASN.1 format)
	     *
	     * @param obj the ASN.1 representation of the EnvelopedData content block.
	     */
	    fromAsn1: function(obj) {
	      // validate EnvelopedData content block and capture data
	      var capture = _fromAsn1(msg, obj, p7.asn1.envelopedDataValidator);
	      msg.recipients = _recipientsFromAsn1(capture.recipientInfos.value);
	    },

	    toAsn1: function() {
	      // ContentInfo
	      return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	        // ContentType
	        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	          asn1.oidToDer(msg.type).getBytes()),
	        // [0] EnvelopedData
	        asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	            // Version
	            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	              asn1.integerToDer(msg.version).getBytes()),
	            // RecipientInfos
	            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true,
	              _recipientsToAsn1(msg.recipients)),
	            // EncryptedContentInfo
	            asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true,
	              _encryptedContentToAsn1(msg.encryptedContent))
	          ])
	        ])
	      ]);
	    },

	    /**
	     * Find recipient by X.509 certificate's issuer.
	     *
	     * @param cert the certificate with the issuer to look for.
	     *
	     * @return the recipient object.
	     */
	    findRecipient: function(cert) {
	      var sAttr = cert.issuer.attributes;

	      for(var i = 0; i < msg.recipients.length; ++i) {
	        var r = msg.recipients[i];
	        var rAttr = r.issuer;

	        if(r.serialNumber !== cert.serialNumber) {
	          continue;
	        }

	        if(rAttr.length !== sAttr.length) {
	          continue;
	        }

	        var match = true;
	        for(var j = 0; j < sAttr.length; ++j) {
	          if(rAttr[j].type !== sAttr[j].type ||
	            rAttr[j].value !== sAttr[j].value) {
	            match = false;
	            break;
	          }
	        }

	        if(match) {
	          return r;
	        }
	      }

	      return null;
	    },

	    /**
	     * Decrypt enveloped content
	     *
	     * @param recipient The recipient object related to the private key
	     * @param privKey The (RSA) private key object
	     */
	    decrypt: function(recipient, privKey) {
	      if(msg.encryptedContent.key === undefined && recipient !== undefined &&
	        privKey !== undefined) {
	        switch(recipient.encryptedContent.algorithm) {
	          case forge$2.pki.oids.rsaEncryption:
	          case forge$2.pki.oids.desCBC:
	            var key = privKey.decrypt(recipient.encryptedContent.content);
	            msg.encryptedContent.key = forge$2.util.createBuffer(key);
	            break;

	          default:
	            throw new Error('Unsupported asymmetric cipher, ' +
	              'OID ' + recipient.encryptedContent.algorithm);
	        }
	      }

	      _decryptContent(msg);
	    },

	    /**
	     * Add (another) entity to list of recipients.
	     *
	     * @param cert The certificate of the entity to add.
	     */
	    addRecipient: function(cert) {
	      msg.recipients.push({
	        version: 0,
	        issuer: cert.issuer.attributes,
	        serialNumber: cert.serialNumber,
	        encryptedContent: {
	          // We simply assume rsaEncryption here, since forge.pki only
	          // supports RSA so far.  If the PKI module supports other
	          // ciphers one day, we need to modify this one as well.
	          algorithm: forge$2.pki.oids.rsaEncryption,
	          key: cert.publicKey
	        }
	      });
	    },

	    /**
	     * Encrypt enveloped content.
	     *
	     * This function supports two optional arguments, cipher and key, which
	     * can be used to influence symmetric encryption.  Unless cipher is
	     * provided, the cipher specified in encryptedContent.algorithm is used
	     * (defaults to AES-256-CBC).  If no key is provided, encryptedContent.key
	     * is (re-)used.  If that one's not set, a random key will be generated
	     * automatically.
	     *
	     * @param [key] The key to be used for symmetric encryption.
	     * @param [cipher] The OID of the symmetric cipher to use.
	     */
	    encrypt: function(key, cipher) {
	      // Part 1: Symmetric encryption
	      if(msg.encryptedContent.content === undefined) {
	        cipher = cipher || msg.encryptedContent.algorithm;
	        key = key || msg.encryptedContent.key;

	        var keyLen, ivLen, ciphFn;
	        switch(cipher) {
	          case forge$2.pki.oids['aes128-CBC']:
	            keyLen = 16;
	            ivLen = 16;
	            ciphFn = forge$2.aes.createEncryptionCipher;
	            break;

	          case forge$2.pki.oids['aes192-CBC']:
	            keyLen = 24;
	            ivLen = 16;
	            ciphFn = forge$2.aes.createEncryptionCipher;
	            break;

	          case forge$2.pki.oids['aes256-CBC']:
	            keyLen = 32;
	            ivLen = 16;
	            ciphFn = forge$2.aes.createEncryptionCipher;
	            break;

	          case forge$2.pki.oids['des-EDE3-CBC']:
	            keyLen = 24;
	            ivLen = 8;
	            ciphFn = forge$2.des.createEncryptionCipher;
	            break;

	          default:
	            throw new Error('Unsupported symmetric cipher, OID ' + cipher);
	        }

	        if(key === undefined) {
	          key = forge$2.util.createBuffer(forge$2.random.getBytes(keyLen));
	        } else if(key.length() != keyLen) {
	          throw new Error('Symmetric key has wrong length; ' +
	            'got ' + key.length() + ' bytes, expected ' + keyLen + '.');
	        }

	        // Keep a copy of the key & IV in the object, so the caller can
	        // use it for whatever reason.
	        msg.encryptedContent.algorithm = cipher;
	        msg.encryptedContent.key = key;
	        msg.encryptedContent.parameter = forge$2.util.createBuffer(
	          forge$2.random.getBytes(ivLen));

	        var ciph = ciphFn(key);
	        ciph.start(msg.encryptedContent.parameter.copy());
	        ciph.update(msg.content);

	        // The finish function does PKCS#7 padding by default, therefore
	        // no action required by us.
	        if(!ciph.finish()) {
	          throw new Error('Symmetric encryption failed.');
	        }

	        msg.encryptedContent.content = ciph.output;
	      }

	      // Part 2: asymmetric encryption for each recipient
	      for(var i = 0; i < msg.recipients.length; ++i) {
	        var recipient = msg.recipients[i];

	        // Nothing to do, encryption already done.
	        if(recipient.encryptedContent.content !== undefined) {
	          continue;
	        }

	        switch(recipient.encryptedContent.algorithm) {
	          case forge$2.pki.oids.rsaEncryption:
	            recipient.encryptedContent.content =
	              recipient.encryptedContent.key.encrypt(
	                msg.encryptedContent.key.data);
	            break;

	          default:
	            throw new Error('Unsupported asymmetric cipher, OID ' +
	              recipient.encryptedContent.algorithm);
	        }
	      }
	    }
	  };
	  return msg;
	};

	/**
	 * Converts a single recipient from an ASN.1 object.
	 *
	 * @param obj the ASN.1 RecipientInfo.
	 *
	 * @return the recipient object.
	 */
	function _recipientFromAsn1(obj) {
	  // validate EnvelopedData content block and capture data
	  var capture = {};
	  var errors = [];
	  if(!asn1.validate(obj, p7.asn1.recipientInfoValidator, capture, errors)) {
	    var error = new Error('Cannot read PKCS#7 RecipientInfo. ' +
	      'ASN.1 object is not an PKCS#7 RecipientInfo.');
	    error.errors = errors;
	    throw error;
	  }

	  return {
	    version: capture.version.charCodeAt(0),
	    issuer: forge$2.pki.RDNAttributesAsArray(capture.issuer),
	    serialNumber: forge$2.util.createBuffer(capture.serial).toHex(),
	    encryptedContent: {
	      algorithm: asn1.derToOid(capture.encAlgorithm),
	      parameter: capture.encParameter ? capture.encParameter.value : undefined,
	      content: capture.encKey
	    }
	  };
	}

	/**
	 * Converts a single recipient object to an ASN.1 object.
	 *
	 * @param obj the recipient object.
	 *
	 * @return the ASN.1 RecipientInfo.
	 */
	function _recipientToAsn1(obj) {
	  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // Version
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      asn1.integerToDer(obj.version).getBytes()),
	    // IssuerAndSerialNumber
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // Name
	      forge$2.pki.distinguishedNameToAsn1({attributes: obj.issuer}),
	      // Serial
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	        forge$2.util.hexToBytes(obj.serialNumber))
	    ]),
	    // KeyEncryptionAlgorithmIdentifier
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // Algorithm
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	        asn1.oidToDer(obj.encryptedContent.algorithm).getBytes()),
	      // Parameter, force NULL, only RSA supported for now.
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
	    ]),
	    // EncryptedKey
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
	      obj.encryptedContent.content)
	  ]);
	}

	/**
	 * Map a set of RecipientInfo ASN.1 objects to recipient objects.
	 *
	 * @param infos an array of ASN.1 representations RecipientInfo (i.e. SET OF).
	 *
	 * @return an array of recipient objects.
	 */
	function _recipientsFromAsn1(infos) {
	  var ret = [];
	  for(var i = 0; i < infos.length; ++i) {
	    ret.push(_recipientFromAsn1(infos[i]));
	  }
	  return ret;
	}

	/**
	 * Map an array of recipient objects to ASN.1 RecipientInfo objects.
	 *
	 * @param recipients an array of recipientInfo objects.
	 *
	 * @return an array of ASN.1 RecipientInfos.
	 */
	function _recipientsToAsn1(recipients) {
	  var ret = [];
	  for(var i = 0; i < recipients.length; ++i) {
	    ret.push(_recipientToAsn1(recipients[i]));
	  }
	  return ret;
	}

	/**
	 * Converts a single signerInfo object to an ASN.1 object.
	 *
	 * @param obj the signerInfo object.
	 *
	 * @return the ASN.1 representation of a SignerInfo.
	 */
	function _signerToAsn1(obj) {
	  // SignerInfo
	  var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // version
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	      asn1.integerToDer(obj.version).getBytes()),
	    // issuerAndSerialNumber
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // name
	      forge$2.pki.distinguishedNameToAsn1({attributes: obj.issuer}),
	      // serial
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,
	        forge$2.util.hexToBytes(obj.serialNumber))
	    ]),
	    // digestAlgorithm
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // algorithm
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	        asn1.oidToDer(obj.digestAlgorithm).getBytes()),
	      // parameters (null)
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
	    ])
	  ]);

	  // authenticatedAttributes (OPTIONAL)
	  if(obj.authenticatedAttributesAsn1) {
	    // add ASN.1 previously generated during signing
	    rval.value.push(obj.authenticatedAttributesAsn1);
	  }

	  // digestEncryptionAlgorithm
	  rval.value.push(asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // algorithm
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	      asn1.oidToDer(obj.signatureAlgorithm).getBytes()),
	    // parameters (null)
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')
	  ]));

	  // encryptedDigest
	  rval.value.push(asn1.create(
	    asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, obj.signature));

	  // unauthenticatedAttributes (OPTIONAL)
	  if(obj.unauthenticatedAttributes.length > 0) {
	    // [1] IMPLICIT
	    var attrsAsn1 = asn1.create(asn1.Class.CONTEXT_SPECIFIC, 1, true, []);
	    for(var i = 0; i < obj.unauthenticatedAttributes.length; ++i) {
	      var attr = obj.unauthenticatedAttributes[i];
	      attrsAsn1.values.push(_attributeToAsn1(attr));
	    }
	    rval.value.push(attrsAsn1);
	  }

	  return rval;
	}

	/**
	 * Map an array of signer objects to ASN.1 objects.
	 *
	 * @param signers an array of signer objects.
	 *
	 * @return an array of ASN.1 SignerInfos.
	 */
	function _signersToAsn1(signers) {
	  var ret = [];
	  for(var i = 0; i < signers.length; ++i) {
	    ret.push(_signerToAsn1(signers[i]));
	  }
	  return ret;
	}

	/**
	 * Convert an attribute object to an ASN.1 Attribute.
	 *
	 * @param attr the attribute object.
	 *
	 * @return the ASN.1 Attribute.
	 */
	function _attributeToAsn1(attr) {
	  var value;

	  // TODO: generalize to support more attributes
	  if(attr.type === forge$2.pki.oids.contentType) {
	    value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	      asn1.oidToDer(attr.value).getBytes());
	  } else if(attr.type === forge$2.pki.oids.messageDigest) {
	    value = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
	      attr.value.bytes());
	  } else if(attr.type === forge$2.pki.oids.signingTime) {
	    /* Note per RFC 2985: Dates between 1 January 1950 and 31 December 2049
	      (inclusive) MUST be encoded as UTCTime. Any dates with year values
	      before 1950 or after 2049 MUST be encoded as GeneralizedTime. [Further,]
	      UTCTime values MUST be expressed in Greenwich Mean Time (Zulu) and MUST
	      include seconds (i.e., times are YYMMDDHHMMSSZ), even where the
	      number of seconds is zero.  Midnight (GMT) must be represented as
	      "YYMMDD000000Z". */
	    // TODO: make these module-level constants
	    var jan_1_1950 = new Date('1950-01-01T00:00:00Z');
	    var jan_1_2050 = new Date('2050-01-01T00:00:00Z');
	    var date = attr.value;
	    if(typeof date === 'string') {
	      // try to parse date
	      var timestamp = Date.parse(date);
	      if(!isNaN(timestamp)) {
	        date = new Date(timestamp);
	      } else if(date.length === 13) {
	        // YYMMDDHHMMSSZ (13 chars for UTCTime)
	        date = asn1.utcTimeToDate(date);
	      } else {
	        // assume generalized time
	        date = asn1.generalizedTimeToDate(date);
	      }
	    }

	    if(date >= jan_1_1950 && date < jan_1_2050) {
	      value = asn1.create(
	        asn1.Class.UNIVERSAL, asn1.Type.UTCTIME, false,
	        asn1.dateToUtcTime(date));
	    } else {
	      value = asn1.create(
	        asn1.Class.UNIVERSAL, asn1.Type.GENERALIZEDTIME, false,
	        asn1.dateToGeneralizedTime(date));
	    }
	  }

	  // TODO: expose as common API call
	  // create a RelativeDistinguishedName set
	  // each value in the set is an AttributeTypeAndValue first
	  // containing the type (an OID) and second the value
	  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	    // AttributeType
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	      asn1.oidToDer(attr.type).getBytes()),
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SET, true, [
	      // AttributeValue
	      value
	    ])
	  ]);
	}

	/**
	 * Map messages encrypted content to ASN.1 objects.
	 *
	 * @param ec The encryptedContent object of the message.
	 *
	 * @return ASN.1 representation of the encryptedContent object (SEQUENCE).
	 */
	function _encryptedContentToAsn1(ec) {
	  return [
	    // ContentType, always Data for the moment
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	      asn1.oidToDer(forge$2.pki.oids.data).getBytes()),
	    // ContentEncryptionAlgorithmIdentifier
	    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [
	      // Algorithm
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,
	        asn1.oidToDer(ec.algorithm).getBytes()),
	      // Parameters (IV)
	      !ec.parameter ?
	        undefined :
	        asn1.create(
	          asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
	          ec.parameter.getBytes())
	    ]),
	    // [0] EncryptedContent
	    asn1.create(asn1.Class.CONTEXT_SPECIFIC, 0, true, [
	      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,
	        ec.content.getBytes())
	    ])
	  ];
	}

	/**
	 * Reads the "common part" of an PKCS#7 content block (in ASN.1 format)
	 *
	 * This function reads the "common part" of the PKCS#7 content blocks
	 * EncryptedData and EnvelopedData, i.e. version number and symmetrically
	 * encrypted content block.
	 *
	 * The result of the ASN.1 validate and capture process is returned
	 * to allow the caller to extract further data, e.g. the list of recipients
	 * in case of a EnvelopedData object.
	 *
	 * @param msg the PKCS#7 object to read the data to.
	 * @param obj the ASN.1 representation of the content block.
	 * @param validator the ASN.1 structure validator object to use.
	 *
	 * @return the value map captured by validator object.
	 */
	function _fromAsn1(msg, obj, validator) {
	  var capture = {};
	  var errors = [];
	  if(!asn1.validate(obj, validator, capture, errors)) {
	    var error = new Error('Cannot read PKCS#7 message. ' +
	      'ASN.1 object is not a supported PKCS#7 message.');
	    error.errors = error;
	    throw error;
	  }

	  // Check contentType, so far we only support (raw) Data.
	  var contentType = asn1.derToOid(capture.contentType);
	  if(contentType !== forge$2.pki.oids.data) {
	    throw new Error('Unsupported PKCS#7 message. ' +
	      'Only wrapped ContentType Data supported.');
	  }

	  if(capture.encryptedContent) {
	    var content = '';
	    if(forge$2.util.isArray(capture.encryptedContent)) {
	      for(var i = 0; i < capture.encryptedContent.length; ++i) {
	        if(capture.encryptedContent[i].type !== asn1.Type.OCTETSTRING) {
	          throw new Error('Malformed PKCS#7 message, expecting encrypted ' +
	            'content constructed of only OCTET STRING objects.');
	        }
	        content += capture.encryptedContent[i].value;
	      }
	    } else {
	      content = capture.encryptedContent;
	    }
	    msg.encryptedContent = {
	      algorithm: asn1.derToOid(capture.encAlgorithm),
	      parameter: forge$2.util.createBuffer(capture.encParameter.value),
	      content: forge$2.util.createBuffer(content)
	    };
	  }

	  if(capture.content) {
	    var content = '';
	    if(forge$2.util.isArray(capture.content)) {
	      for(var i = 0; i < capture.content.length; ++i) {
	        if(capture.content[i].type !== asn1.Type.OCTETSTRING) {
	          throw new Error('Malformed PKCS#7 message, expecting ' +
	            'content constructed of only OCTET STRING objects.');
	        }
	        content += capture.content[i].value;
	      }
	    } else {
	      content = capture.content;
	    }
	    msg.content = forge$2.util.createBuffer(content);
	  }

	  msg.version = capture.version.charCodeAt(0);
	  msg.rawCapture = capture;

	  return capture;
	}

	/**
	 * Decrypt the symmetrically encrypted content block of the PKCS#7 message.
	 *
	 * Decryption is skipped in case the PKCS#7 message object already has a
	 * (decrypted) content attribute.  The algorithm, key and cipher parameters
	 * (probably the iv) are taken from the encryptedContent attribute of the
	 * message object.
	 *
	 * @param The PKCS#7 message object.
	 */
	function _decryptContent(msg) {
	  if(msg.encryptedContent.key === undefined) {
	    throw new Error('Symmetric key not available.');
	  }

	  if(msg.content === undefined) {
	    var ciph;

	    switch(msg.encryptedContent.algorithm) {
	      case forge$2.pki.oids['aes128-CBC']:
	      case forge$2.pki.oids['aes192-CBC']:
	      case forge$2.pki.oids['aes256-CBC']:
	        ciph = forge$2.aes.createDecryptionCipher(msg.encryptedContent.key);
	        break;

	      case forge$2.pki.oids['desCBC']:
	      case forge$2.pki.oids['des-EDE3-CBC']:
	        ciph = forge$2.des.createDecryptionCipher(msg.encryptedContent.key);
	        break;

	      default:
	        throw new Error('Unsupported symmetric cipher, OID ' +
	          msg.encryptedContent.algorithm);
	    }
	    ciph.start(msg.encryptedContent.parameter);
	    ciph.update(msg.encryptedContent.content);

	    if(!ciph.finish()) {
	      throw new Error('Symmetric decryption failed.');
	    }

	    msg.content = ciph.output;
	  }
	}

	const forge$1 = forge$z;
	const pki = forge$1.pki;

	/**
	 * Gets a self-signed X.509 certificate for the key.
	 *
	 * The output Uint8Array contains the PKCS #7 message in DER.
	 *
	 * TODO: move to libp2p-crypto package
	 *
	 * @param {KeyInfo} key - The id and name of the key
	 * @param {RsaPrivateKey} privateKey - The naked key
	 * @returns {Uint8Array}
	 */
	const certificateForKey$1 = (key, privateKey) => {
	  const publicKey = pki.setRsaPublicKey(privateKey.n, privateKey.e);
	  const cert = pki.createCertificate();
	  cert.publicKey = publicKey;
	  cert.serialNumber = '01';
	  cert.validity.notBefore = new Date();
	  cert.validity.notAfter = new Date();
	  cert.validity.notAfter.setFullYear(cert.validity.notBefore.getFullYear() + 10);
	  const attrs = [{
	    name: 'organizationName',
	    value: 'ipfs'
	  }, {
	    shortName: 'OU',
	    value: 'keystore'
	  }, {
	    name: 'commonName',
	    value: key.id
	  }];
	  cert.setSubject(attrs);
	  cert.setIssuer(attrs);
	  cert.setExtensions([{
	    name: 'basicConstraints',
	    cA: true
	  }, {
	    name: 'keyUsage',
	    keyCertSign: true,
	    digitalSignature: true,
	    nonRepudiation: true,
	    keyEncipherment: true,
	    dataEncipherment: true
	  }, {
	    name: 'extKeyUsage',
	    serverAuth: true,
	    clientAuth: true,
	    codeSigning: true,
	    emailProtection: true,
	    timeStamping: true
	  }, {
	    name: 'nsCertType',
	    client: true,
	    server: true,
	    email: true,
	    objsign: true,
	    sslCA: true,
	    emailCA: true,
	    objCA: true
	  }]);
	  // self-sign certificate
	  cert.sign(privateKey);

	  return cert
	};

	/**
	 * Finds the first item in a collection that is matched in the
	 * `asyncCompare` function.
	 *
	 * `asyncCompare` is an async function that must
	 * resolve to either `true` or `false`.
	 *
	 * @param {Array} array
	 * @param {function(*)} asyncCompare - An async function that returns a boolean
	 */
	async function findAsync$1 (array, asyncCompare) {
	  const promises = array.map(asyncCompare);
	  const results = await Promise.all(promises);
	  const index = results.findIndex(result => result);
	  return array[index]
	}

	var util = {
	  certificateForKey: certificateForKey$1,
	  findAsync: findAsync$1
	};

	// @ts-ignore node-forge types not exported

	// @ts-ignore node-forge types not exported

	// @ts-ignore node-forge types not exported
	const forge = forge$z;
	const { certificateForKey, findAsync } = util;
	const errcode$8 = errCode$q;
	const { fromString: uint8ArrayFromString$3 } = require$$5$3;
	const { toString: uint8ArrayToString$1 } = require$$8;
	const { codes: codes$a } = errors$3;

	const privates$1 = new WeakMap();

	/**
	 * Cryptographic Message Syntax (aka PKCS #7)
	 *
	 * CMS describes an encapsulation syntax for data protection. It
	 * is used to digitally sign, digest, authenticate, or encrypt
	 * arbitrary message content.
	 *
	 * See RFC 5652 for all the details.
	 */
	class CMS$1 {
	  /**
	   * Creates a new instance with a keychain
	   *
	   * @param {import('./index')} keychain - the available keys
	   * @param {string} dek
	   */
	  constructor (keychain, dek) {
	    if (!keychain) {
	      throw errcode$8(new Error('keychain is required'), codes$a.ERR_KEYCHAIN_REQUIRED)
	    }

	    this.keychain = keychain;
	    privates$1.set(this, { dek });
	  }

	  /**
	   * Creates some protected data.
	   *
	   * The output Uint8Array contains the PKCS #7 message in DER.
	   *
	   * @param {string} name - The local key name.
	   * @param {Uint8Array} plain - The data to encrypt.
	   * @returns {Promise<Uint8Array>}
	   */
	  async encrypt (name, plain) {
	    if (!(plain instanceof Uint8Array)) {
	      throw errcode$8(new Error('Plain data must be a Uint8Array'), codes$a.ERR_INVALID_PARAMETERS)
	    }

	    const key = await this.keychain.findKeyByName(name);
	    const pem = await this.keychain._getPrivateKey(name);
	    /** @type {string} */
	    const dek = privates$1.get(this).dek;
	    const privateKey = forge.pki.decryptRsaPrivateKey(pem, dek);
	    const certificate = await certificateForKey(key, privateKey);

	    // create a p7 enveloped message
	    const p7 = forge.pkcs7.createEnvelopedData();
	    p7.addRecipient(certificate);
	    p7.content = forge.util.createBuffer(plain);
	    p7.encrypt();

	    // convert message to DER
	    const der = forge.asn1.toDer(p7.toAsn1()).getBytes();
	    return uint8ArrayFromString$3(der, 'ascii')
	  }

	  /**
	   * Reads some protected data.
	   *
	   * The keychain must contain one of the keys used to encrypt the data.  If none of the keys
	   * exists, an Error is returned with the property 'missingKeys'.  It is array of key ids.
	   *
	   * @param {Uint8Array} cmsData - The CMS encrypted data to decrypt.
	   * @returns {Promise<Uint8Array>}
	   */
	  async decrypt (cmsData) {
	    if (!(cmsData instanceof Uint8Array)) {
	      throw errcode$8(new Error('CMS data is required'), codes$a.ERR_INVALID_PARAMETERS)
	    }

	    let cms;
	    try {
	      const buf = forge.util.createBuffer(uint8ArrayToString$1(cmsData, 'ascii'));
	      const obj = forge.asn1.fromDer(buf);
	      // @ts-ignore not defined
	      cms = forge.pkcs7.messageFromAsn1(obj);
	    } catch (/** @type {any} */ err) {
	      throw errcode$8(new Error('Invalid CMS: ' + err.message), codes$a.ERR_INVALID_CMS)
	    }

	    // Find a recipient whose key we hold. We only deal with recipient certs
	    // issued by ipfs (O=ipfs).
	    const recipients = cms.recipients
	      // @ts-ignore cms types not defined
	      .filter(r => r.issuer.find(a => a.shortName === 'O' && a.value === 'ipfs'))
	      // @ts-ignore cms types not defined
	      .filter(r => r.issuer.find(a => a.shortName === 'CN'))
	      // @ts-ignore cms types not defined
	      .map(r => {
	        return {
	          recipient: r,
	          // @ts-ignore cms types not defined
	          keyId: r.issuer.find(a => a.shortName === 'CN').value
	        }
	      });

	    const r = await findAsync(recipients, async (recipient) => {
	      try {
	        const key = await this.keychain.findKeyById(recipient.keyId);
	        if (key) return true
	      } catch (/** @type {any} */ err) {
	        return false
	      }
	      return false
	    });

	    if (!r) {
	      // @ts-ignore cms types not defined
	      const missingKeys = recipients.map(r => r.keyId);
	      throw errcode$8(new Error('Decryption needs one of the key(s): ' + missingKeys.join(', ')), codes$a.ERR_MISSING_KEYS, {
	        missingKeys
	      })
	    }

	    const key = await this.keychain.findKeyById(r.keyId);

	    if (!key) {
	      throw errcode$8(new Error('No key available to decrypto'), codes$a.ERR_NO_KEY)
	    }

	    const pem = await this.keychain._getPrivateKey(key.name);
	    const dek = privates$1.get(this).dek;
	    const privateKey = forge.pki.decryptRsaPrivateKey(pem, dek);
	    cms.decrypt(r.recipient, privateKey);
	    return uint8ArrayFromString$3(cms.content.getBytes(), 'ascii')
	  }
	}

	var cms = CMS$1;

	/* eslint max-nested-callbacks: ["error", 5] */
	const debug$f = browser$a.exports;
	const log$h = Object.assign(debug$f('libp2p:keychain'), {
	  error: debug$f('libp2p:keychain:err')
	});
	const sanitize = sanitizeFilename;
	const mergeOptions$4 = mergeOptions$k;
	const crypto$3 = src$n;
	const { Key: Key$1 } = require$$4;
	const CMS = cms;
	const errcode$7 = errCode$q;
	const { codes: codes$9 } = errors$3;
	const { toString: uint8ArrayToString } = require$$8;
	const { fromString: uint8ArrayFromString$2 } = require$$5$3;

	// @ts-ignore node-forge sha512 types not exported


	/**
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('interface-datastore').Datastore} Datastore
	 */

	/**
	 * @typedef {Object} DekOptions
	 * @property {string} hash
	 * @property {string} salt
	 * @property {number} iterationCount
	 * @property {number} keyLength
	 *
	 * @typedef {Object} KeychainOptions
	 * @property {string} [pass]
	 * @property {DekOptions} [dek]
	 */

	/**
	 * Information about a key.
	 *
	 * @typedef {Object} KeyInfo
	 * @property {string} id - The universally unique key id.
	 * @property {string} name - The local key name.
	 */

	const keyPrefix = '/pkcs8/';
	const infoPrefix = '/info/';
	const privates = new WeakMap();

	// NIST SP 800-132
	const NIST = {
	  minKeyLength: 112 / 8,
	  minSaltLength: 128 / 8,
	  minIterationCount: 1000
	};

	const defaultOptions$3 = {
	  // See https://cryptosense.com/parametesr-choice-for-pbkdf2/
	  dek: {
	    keyLength: 512 / 8,
	    iterationCount: 10000,
	    salt: 'you should override this value with a crypto secure random number',
	    hash: 'sha2-512'
	  }
	};

	/**
	 * @param {string} name
	 */
	function validateKeyName (name) {
	  if (!name) return false
	  if (typeof name !== 'string') return false
	  return name === sanitize(name.trim())
	}

	/**
	 * Throws an error after a delay
	 *
	 * This assumes than an error indicates that the keychain is under attack. Delay returning an
	 * error to make brute force attacks harder.
	 *
	 * @param {string|Error} err - The error
	 * @returns {Promise<never>}
	 * @private
	 */
	async function throwDelayed (err) {
	  const min = 200;
	  const max = 1000;
	  const delay = Math.random() * (max - min) + min;

	  await new Promise(resolve => setTimeout(resolve, delay));
	  throw err
	}

	/**
	 * Converts a key name into a datastore name.
	 *
	 * @param {string} name
	 * @returns {Key}
	 * @private
	 */
	function DsName (name) {
	  return new Key$1(keyPrefix + name)
	}

	/**
	 * Converts a key name into a datastore info name.
	 *
	 * @param {string} name
	 * @returns {Key}
	 * @private
	 */
	function DsInfoName (name) {
	  return new Key$1(infoPrefix + name)
	}

	/**
	 * Manages the lifecycle of a key. Keys are encrypted at rest using PKCS #8.
	 *
	 * A key in the store has two entries
	 * - '/info/*key-name*', contains the KeyInfo for the key
	 * - '/pkcs8/*key-name*', contains the PKCS #8 for the key
	 *
	 */
	class Keychain$1 {
	  /**
	   * Creates a new instance of a key chain.
	   *
	   * @param {Datastore} store - where the key are.
	   * @param {KeychainOptions} options
	   * @class
	   */
	  constructor (store, options) {
	    if (!store) {
	      throw new Error('store is required')
	    }
	    this.store = store;

	    this.opts = mergeOptions$4(defaultOptions$3, options);

	    // Enforce NIST SP 800-132
	    if (this.opts.pass && this.opts.pass.length < 20) {
	      throw new Error('pass must be least 20 characters')
	    }
	    if (this.opts.dek.keyLength < NIST.minKeyLength) {
	      throw new Error(`dek.keyLength must be least ${NIST.minKeyLength} bytes`)
	    }
	    if (this.opts.dek.salt.length < NIST.minSaltLength) {
	      throw new Error(`dek.saltLength must be least ${NIST.minSaltLength} bytes`)
	    }
	    if (this.opts.dek.iterationCount < NIST.minIterationCount) {
	      throw new Error(`dek.iterationCount must be least ${NIST.minIterationCount}`)
	    }

	    const dek = this.opts.pass
	      ? crypto$3.pbkdf2(
	        this.opts.pass,
	        this.opts.dek.salt,
	        this.opts.dek.iterationCount,
	        this.opts.dek.keyLength,
	        this.opts.dek.hash)
	      : '';

	    privates.set(this, { dek });
	  }

	  /**
	   * Gets an object that can encrypt/decrypt protected data
	   * using the Cryptographic Message Syntax (CMS).
	   *
	   * CMS describes an encapsulation syntax for data protection. It
	   * is used to digitally sign, digest, authenticate, or encrypt
	   * arbitrary message content.
	   *
	   * @returns {CMS}
	   */
	  get cms () {
	    return new CMS(this, privates.get(this).dek)
	  }

	  /**
	   * Generates the options for a keychain.  A random salt is produced.
	   *
	   * @returns {Object}
	   */
	  static generateOptions () {
	    const options = Object.assign({}, defaultOptions$3);
	    const saltLength = Math.ceil(NIST.minSaltLength / 3) * 3; // no base64 padding
	    options.dek.salt = uint8ArrayToString(crypto$3.randomBytes(saltLength), 'base64');
	    return options
	  }

	  /**
	   * Gets an object that can encrypt/decrypt protected data.
	   * The default options for a keychain.
	   *
	   * @returns {Object}
	   */
	  static get options () {
	    return defaultOptions$3
	  }

	  /**
	   * Create a new key.
	   *
	   * @param {string} name - The local key name; cannot already exist.
	   * @param {string} type - One of the key types; 'rsa'.
	   * @param {number} [size = 2048] - The key size in bits. Used for rsa keys only.
	   * @returns {Promise<KeyInfo>}
	   */
	  async createKey (name, type, size = 2048) {
	    const self = this;

	    if (!validateKeyName(name) || name === 'self') {
	      return throwDelayed(errcode$7(new Error(`Invalid key name '${name}'`), codes$9.ERR_INVALID_KEY_NAME))
	    }

	    if (typeof type !== 'string') {
	      return throwDelayed(errcode$7(new Error(`Invalid key type '${type}'`), codes$9.ERR_INVALID_KEY_TYPE))
	    }

	    const dsname = DsName(name);
	    const exists = await self.store.has(dsname);
	    if (exists) return throwDelayed(errcode$7(new Error(`Key '${name}' already exists`), codes$9.ERR_KEY_ALREADY_EXISTS))

	    switch (type.toLowerCase()) {
	      case 'rsa':
	        if (!Number.isSafeInteger(size) || size < 2048) {
	          return throwDelayed(errcode$7(new Error(`Invalid RSA key size ${size}`), codes$9.ERR_INVALID_KEY_SIZE))
	        }
	        break
	    }

	    let keyInfo;
	    try {
	      // @ts-ignore Differences between several crypto return types need to be fixed in libp2p-crypto
	      const keypair = await crypto$3.keys.generateKeyPair(type, size);
	      const kid = await keypair.id();
	      /** @type {string} */
	      const dek = privates.get(this).dek;
	      const pem = await keypair.export(dek);
	      keyInfo = {
	        name: name,
	        id: kid
	      };
	      const batch = self.store.batch();
	      batch.put(dsname, uint8ArrayFromString$2(pem));
	      batch.put(DsInfoName(name), uint8ArrayFromString$2(JSON.stringify(keyInfo)));

	      await batch.commit();
	    } catch (/** @type {any} */ err) {
	      return throwDelayed(err)
	    }

	    return keyInfo
	  }

	  /**
	   * List all the keys.
	   *
	   * @returns {Promise<KeyInfo[]>}
	   */
	  async listKeys () {
	    const self = this;
	    const query = {
	      prefix: infoPrefix
	    };

	    const info = [];
	    for await (const value of self.store.query(query)) {
	      info.push(JSON.parse(uint8ArrayToString(value.value)));
	    }

	    return info
	  }

	  /**
	   * Find a key by it's id.
	   *
	   * @param {string} id - The universally unique key identifier.
	   * @returns {Promise<KeyInfo|undefined>}
	   */
	  async findKeyById (id) {
	    try {
	      const keys = await this.listKeys();
	      return keys.find((k) => k.id === id)
	    } catch (/** @type {any} */ err) {
	      return throwDelayed(err)
	    }
	  }

	  /**
	   * Find a key by it's name.
	   *
	   * @param {string} name - The local key name.
	   * @returns {Promise<KeyInfo>}
	   */
	  async findKeyByName (name) {
	    if (!validateKeyName(name)) {
	      return throwDelayed(errcode$7(new Error(`Invalid key name '${name}'`), codes$9.ERR_INVALID_KEY_NAME))
	    }

	    const dsname = DsInfoName(name);
	    try {
	      const res = await this.store.get(dsname);
	      return JSON.parse(uint8ArrayToString(res))
	    } catch (/** @type {any} */ err) {
	      return throwDelayed(errcode$7(new Error(`Key '${name}' does not exist. ${err.message}`), codes$9.ERR_KEY_NOT_FOUND))
	    }
	  }

	  /**
	   * Remove an existing key.
	   *
	   * @param {string} name - The local key name; must already exist.
	   * @returns {Promise<KeyInfo>}
	   */
	  async removeKey (name) {
	    const self = this;
	    if (!validateKeyName(name) || name === 'self') {
	      return throwDelayed(errcode$7(new Error(`Invalid key name '${name}'`), codes$9.ERR_INVALID_KEY_NAME))
	    }
	    const dsname = DsName(name);
	    const keyInfo = await self.findKeyByName(name);
	    const batch = self.store.batch();
	    batch.delete(dsname);
	    batch.delete(DsInfoName(name));
	    await batch.commit();
	    return keyInfo
	  }

	  /**
	   * Rename a key
	   *
	   * @param {string} oldName - The old local key name; must already exist.
	   * @param {string} newName - The new local key name; must not already exist.
	   * @returns {Promise<KeyInfo>}
	   */
	  async renameKey (oldName, newName) {
	    const self = this;
	    if (!validateKeyName(oldName) || oldName === 'self') {
	      return throwDelayed(errcode$7(new Error(`Invalid old key name '${oldName}'`), codes$9.ERR_OLD_KEY_NAME_INVALID))
	    }
	    if (!validateKeyName(newName) || newName === 'self') {
	      return throwDelayed(errcode$7(new Error(`Invalid new key name '${newName}'`), codes$9.ERR_NEW_KEY_NAME_INVALID))
	    }
	    const oldDsname = DsName(oldName);
	    const newDsname = DsName(newName);
	    const oldInfoName = DsInfoName(oldName);
	    const newInfoName = DsInfoName(newName);

	    const exists = await self.store.has(newDsname);
	    if (exists) return throwDelayed(errcode$7(new Error(`Key '${newName}' already exists`), codes$9.ERR_KEY_ALREADY_EXISTS))

	    try {
	      const pem = await self.store.get(oldDsname);
	      const res = await self.store.get(oldInfoName);

	      const keyInfo = JSON.parse(uint8ArrayToString(res));
	      keyInfo.name = newName;
	      const batch = self.store.batch();
	      batch.put(newDsname, pem);
	      batch.put(newInfoName, uint8ArrayFromString$2(JSON.stringify(keyInfo)));
	      batch.delete(oldDsname);
	      batch.delete(oldInfoName);
	      await batch.commit();
	      return keyInfo
	    } catch (/** @type {any} */ err) {
	      return throwDelayed(err)
	    }
	  }

	  /**
	   * Export an existing key as a PEM encrypted PKCS #8 string
	   *
	   * @param {string} name - The local key name; must already exist.
	   * @param {string} password - The password
	   * @returns {Promise<string>}
	   */
	  async exportKey (name, password) {
	    if (!validateKeyName(name)) {
	      return throwDelayed(errcode$7(new Error(`Invalid key name '${name}'`), codes$9.ERR_INVALID_KEY_NAME))
	    }
	    if (!password) {
	      return throwDelayed(errcode$7(new Error('Password is required'), codes$9.ERR_PASSWORD_REQUIRED))
	    }

	    const dsname = DsName(name);
	    try {
	      const res = await this.store.get(dsname);
	      const pem = uint8ArrayToString(res);
	      /** @type {string} */
	      const dek = privates.get(this).dek;
	      const privateKey = await crypto$3.keys.import(pem, dek);
	      return privateKey.export(password)
	    } catch (/** @type {any} */ err) {
	      return throwDelayed(err)
	    }
	  }

	  /**
	   * Import a new key from a PEM encoded PKCS #8 string
	   *
	   * @param {string} name - The local key name; must not already exist.
	   * @param {string} pem - The PEM encoded PKCS #8 string
	   * @param {string} password - The password.
	   * @returns {Promise<KeyInfo>}
	   */
	  async importKey (name, pem, password) {
	    const self = this;
	    if (!validateKeyName(name) || name === 'self') {
	      return throwDelayed(errcode$7(new Error(`Invalid key name '${name}'`), codes$9.ERR_INVALID_KEY_NAME))
	    }
	    if (!pem) {
	      return throwDelayed(errcode$7(new Error('PEM encoded key is required'), codes$9.ERR_PEM_REQUIRED))
	    }
	    const dsname = DsName(name);
	    const exists = await self.store.has(dsname);
	    if (exists) return throwDelayed(errcode$7(new Error(`Key '${name}' already exists`), codes$9.ERR_KEY_ALREADY_EXISTS))

	    let privateKey;
	    try {
	      privateKey = await crypto$3.keys.import(pem, password);
	    } catch (/** @type {any} */ err) {
	      return throwDelayed(errcode$7(new Error('Cannot read the key, most likely the password is wrong'), codes$9.ERR_CANNOT_READ_KEY))
	    }

	    let kid;
	    try {
	      kid = await privateKey.id();
	      /** @type {string} */
	      const dek = privates.get(this).dek;
	      pem = await privateKey.export(dek);
	    } catch (/** @type {any} */ err) {
	      return throwDelayed(err)
	    }

	    const keyInfo = {
	      name: name,
	      id: kid
	    };
	    const batch = self.store.batch();
	    batch.put(dsname, uint8ArrayFromString$2(pem));
	    batch.put(DsInfoName(name), uint8ArrayFromString$2(JSON.stringify(keyInfo)));
	    await batch.commit();

	    return keyInfo
	  }

	  /**
	   * Import a peer key
	   *
	   * @param {string} name - The local key name; must not already exist.
	   * @param {PeerId} peer - The PEM encoded PKCS #8 string
	   * @returns {Promise<KeyInfo>}
	   */
	  async importPeer (name, peer) {
	    const self = this;
	    if (!validateKeyName(name)) {
	      return throwDelayed(errcode$7(new Error(`Invalid key name '${name}'`), codes$9.ERR_INVALID_KEY_NAME))
	    }
	    if (!peer || !peer.privKey) {
	      return throwDelayed(errcode$7(new Error('Peer.privKey is required'), codes$9.ERR_MISSING_PRIVATE_KEY))
	    }

	    const privateKey = peer.privKey;
	    const dsname = DsName(name);
	    const exists = await self.store.has(dsname);
	    if (exists) return throwDelayed(errcode$7(new Error(`Key '${name}' already exists`), codes$9.ERR_KEY_ALREADY_EXISTS))

	    try {
	      const kid = await privateKey.id();
	      /** @type {string} */
	      const dek = privates.get(this).dek;
	      const pem = await privateKey.export(dek);
	      const keyInfo = {
	        name: name,
	        id: kid
	      };
	      const batch = self.store.batch();
	      batch.put(dsname, uint8ArrayFromString$2(pem));
	      batch.put(DsInfoName(name), uint8ArrayFromString$2(JSON.stringify(keyInfo)));
	      await batch.commit();
	      return keyInfo
	    } catch (/** @type {any} */ err) {
	      return throwDelayed(err)
	    }
	  }

	  /**
	   * Gets the private key as PEM encoded PKCS #8 string.
	   *
	   * @param {string} name
	   * @returns {Promise<string>}
	   */
	  async _getPrivateKey (name) {
	    if (!validateKeyName(name)) {
	      return throwDelayed(errcode$7(new Error(`Invalid key name '${name}'`), codes$9.ERR_INVALID_KEY_NAME))
	    }

	    try {
	      const dsname = DsName(name);
	      const res = await this.store.get(dsname);
	      return uint8ArrayToString(res)
	    } catch (/** @type {any} */ err) {
	      return throwDelayed(errcode$7(new Error(`Key '${name}' does not exist. ${err.message}`), codes$9.ERR_KEY_NOT_FOUND))
	    }
	  }

	  /**
	   * Rotate keychain password and re-encrypt all assosciated keys
	   *
	   * @param {string} oldPass - The old local keychain password
	   * @param {string} newPass - The new local keychain password
	   */
	  async rotateKeychainPass (oldPass, newPass) {
	    if (typeof oldPass !== 'string') {
	      return throwDelayed(errcode$7(new Error(`Invalid old pass type '${typeof oldPass}'`), codes$9.ERR_INVALID_OLD_PASS_TYPE))
	    }
	    if (typeof newPass !== 'string') {
	      return throwDelayed(errcode$7(new Error(`Invalid new pass type '${typeof newPass}'`), codes$9.ERR_INVALID_NEW_PASS_TYPE))
	    }
	    if (newPass.length < 20) {
	      return throwDelayed(errcode$7(new Error(`Invalid pass length ${newPass.length}`), codes$9.ERR_INVALID_PASS_LENGTH))
	    }
	    log$h('recreating keychain');
	    const oldDek = privates.get(this).dek;
	    this.opts.pass = newPass;
	    const newDek = newPass
	      ? crypto$3.pbkdf2(
	        newPass,
	        this.opts.dek.salt,
	        this.opts.dek.iterationCount,
	        this.opts.dek.keyLength,
	        this.opts.dek.hash)
	      : '';
	    privates.set(this, { dek: newDek });
	    const keys = await this.listKeys();
	    for (const key of keys) {
	      const res = await this.store.get(DsName(key.name));
	      const pem = uint8ArrayToString(res);
	      const privateKey = await crypto$3.keys.import(pem, oldDek);
	      const password = newDek.toString();
	      const keyAsPEM = await privateKey.export(password);

	      // Update stored key
	      const batch = this.store.batch();
	      const keyInfo = {
	        name: key.name,
	        id: key.id
	      };
	      batch.put(DsName(key.name), uint8ArrayFromString$2(keyAsPEM));
	      batch.put(DsInfoName(key.name), uint8ArrayFromString$2(JSON.stringify(keyInfo)));
	      await batch.commit();
	    }
	    log$h('keychain reconstructed');
	  }
	}

	var keychain = Keychain$1;

	var dist = {exports: {}};

	(function (module, exports) {
	(function (global, factory) {
	    factory(exports) ;
	})(commonjsGlobal, (function (exports) {
	    async function* _batch(size, iterable) {
	        let dataBatch = [];
	        for await (const data of iterable) {
	            dataBatch.push(data);
	            if (dataBatch.length === size) {
	                yield dataBatch;
	                dataBatch = [];
	            }
	        }
	        if (dataBatch.length > 0) {
	            yield dataBatch;
	        }
	    }
	    function* _syncBatch(size, iterable) {
	        let dataBatch = [];
	        for (const data of iterable) {
	            dataBatch.push(data);
	            if (dataBatch.length === size) {
	                yield dataBatch;
	                dataBatch = [];
	            }
	        }
	        if (dataBatch.length > 0) {
	            yield dataBatch;
	        }
	    }
	    function batch(size, iterable) {
	        if (iterable === undefined) {
	            return curriedIterable => batch(size, curriedIterable);
	        }
	        if (iterable[Symbol.asyncIterator]) {
	            return _batch(size, iterable);
	        }
	        return _syncBatch(size, iterable);
	    }

	    const TIMEOUT = Symbol('TIMEOUT');
	    const createTimer = (duration) => {
	        let timeoutId;
	        return [
	            new Promise(resolve => {
	                timeoutId = setTimeout(() => resolve(TIMEOUT), duration);
	            }),
	            () => {
	                clearTimeout(timeoutId);
	            },
	        ];
	    };
	    // Like `batch` but flushes early if the `timeout` is reached
	    // NOTE: The strategy is to only hold onto a single item for a maximum of `timeout` ms.
	    async function* _batchWithTimeout(size, timeout, iterable) {
	        const iterator = iterable[Symbol.asyncIterator]();
	        let pendingData;
	        let batchData = [];
	        let timer;
	        let clearTimer;
	        const startTimer = () => {
	            deleteTimer();
	            [timer, clearTimer] = createTimer(timeout);
	        };
	        const deleteTimer = () => {
	            if (clearTimer) {
	                clearTimer();
	            }
	            timer = undefined;
	        };
	        pendingData = iterator.next();
	        while (true) {
	            const res = await (timer ? Promise.race([pendingData, timer]) : pendingData);
	            if (res === TIMEOUT || res.done) {
	                // Flush early (before we reach the batch size)
	                if (batchData.length) {
	                    yield batchData;
	                    batchData = [];
	                }
	                deleteTimer();
	                // And exit appropriately
	                if (res !== TIMEOUT) {
	                    // done
	                    break;
	                }
	                continue;
	            }
	            // Fetch next item early doors (before we potentially yield)
	            pendingData = iterator.next();
	            // Then handle the value
	            batchData.push(res.value);
	            if (batchData.length === 1) {
	                // Start timer once we have at least 1 item ready to go
	                startTimer();
	            }
	            if (batchData.length === size) {
	                yield batchData;
	                batchData = [];
	                deleteTimer();
	                continue;
	            }
	        }
	    }
	    function batchWithTimeout(size, timeout, iterable) {
	        if (iterable === undefined) {
	            return curriedIterable => batchWithTimeout(size, timeout, curriedIterable);
	        }
	        if (iterable[Symbol.asyncIterator] && timeout !== Infinity) {
	            return _batchWithTimeout(size, timeout, iterable);
	        }
	        // For sync iterables or an infinite timeout, the timeout is irrelevant so just fallback to regular `batch`.
	        return batch(size, iterable);
	    }

	    function getIterator(iterable) {
	        if (typeof iterable.next === 'function') {
	            return iterable;
	        }
	        if (typeof iterable[Symbol.iterator] === 'function') {
	            return iterable[Symbol.iterator]();
	        }
	        if (typeof iterable[Symbol.asyncIterator] === 'function') {
	            return iterable[Symbol.asyncIterator]();
	        }
	        throw new TypeError('"values" does not to conform to any of the iterator or iterable protocols');
	    }

	    function defer() {
	        let reject;
	        let resolve;
	        const promise = new Promise((resolveFunc, rejectFunc) => {
	            resolve = resolveFunc;
	            reject = rejectFunc;
	        });
	        return {
	            promise,
	            reject,
	            resolve,
	        };
	    }

	    function _buffer(size, iterable) {
	        const iterator = getIterator(iterable);
	        const resultQueue = [];
	        const readQueue = [];
	        let reading = false;
	        let ended = false;
	        function fulfillReadQueue() {
	            while (readQueue.length > 0 && resultQueue.length > 0) {
	                const readDeferred = readQueue.shift();
	                const { error, value } = resultQueue.shift();
	                if (error) {
	                    readDeferred.reject(error);
	                }
	                else {
	                    readDeferred.resolve({ done: false, value });
	                }
	            }
	            while (readQueue.length > 0 && ended) {
	                const { resolve } = readQueue.shift();
	                resolve({ done: true, value: undefined });
	            }
	        }
	        async function fillQueue() {
	            if (ended) {
	                return;
	            }
	            if (reading) {
	                return;
	            }
	            if (resultQueue.length >= size) {
	                return;
	            }
	            reading = true;
	            try {
	                const { done, value } = await iterator.next();
	                if (done) {
	                    ended = true;
	                }
	                else {
	                    resultQueue.push({ value });
	                }
	            }
	            catch (error) {
	                ended = true;
	                resultQueue.push({ error });
	            }
	            fulfillReadQueue();
	            reading = false;
	            fillQueue();
	        }
	        async function next() {
	            if (resultQueue.length > 0) {
	                const { error, value } = resultQueue.shift();
	                if (error) {
	                    throw error;
	                }
	                fillQueue();
	                return { done: false, value };
	            }
	            if (ended) {
	                return { done: true, value: undefined }; // stupid ts
	            }
	            const deferred = defer();
	            readQueue.push(deferred);
	            fillQueue();
	            return deferred.promise;
	        }
	        const asyncIterableIterator = {
	            next,
	            [Symbol.asyncIterator]: () => asyncIterableIterator,
	        };
	        return asyncIterableIterator;
	    }
	    function* syncBuffer(size, iterable) {
	        const valueQueue = [];
	        let e;
	        try {
	            for (const value of iterable) {
	                valueQueue.push(value);
	                if (valueQueue.length <= size) {
	                    continue;
	                }
	                yield valueQueue.shift();
	            }
	        }
	        catch (error) {
	            e = error;
	        }
	        for (const value of valueQueue) {
	            yield value;
	        }
	        if (e) {
	            throw e;
	        }
	    }
	    function buffer(size, iterable) {
	        if (iterable === undefined) {
	            return curriedIterable => buffer(size, curriedIterable);
	        }
	        if (size === 0) {
	            return iterable;
	        }
	        if (iterable[Symbol.asyncIterator]) {
	            return _buffer(size, iterable);
	        }
	        return syncBuffer(size, iterable);
	    }

	    async function _collect(iterable) {
	        const values = [];
	        for await (const value of iterable) {
	            values.push(value);
	        }
	        return values;
	    }
	    function collect(iterable) {
	        if (iterable[Symbol.asyncIterator]) {
	            return _collect(iterable);
	        }
	        return Array.from(iterable);
	    }

	    async function* _concat(iterables) {
	        for await (const iterable of iterables) {
	            yield* iterable;
	        }
	    }
	    function* _syncConcat(iterables) {
	        for (const iterable of iterables) {
	            yield* iterable;
	        }
	    }
	    function concat(...iterables) {
	        const hasAnyAsync = iterables.find(itr => itr[Symbol.asyncIterator] !== undefined);
	        if (hasAnyAsync) {
	            return _concat(iterables);
	        }
	        else {
	            return _syncConcat(iterables);
	        }
	    }

	    async function _consume(iterable) {
	        for await (const val of iterable) {
	            // do nothing
	        }
	    }
	    function consume(iterable) {
	        if (iterable[Symbol.asyncIterator]) {
	            return _consume(iterable);
	        }
	        for (const val of iterable) {
	            // do nothing
	        }
	    }

	    async function* _filter(filterFunc, iterable) {
	        for await (const data of iterable) {
	            if (await filterFunc(data)) {
	                yield data;
	            }
	        }
	    }
	    function filter(filterFunc, iterable) {
	        if (iterable === undefined) {
	            return (curriedIterable) => _filter(filterFunc, curriedIterable);
	        }
	        return _filter(filterFunc, iterable);
	    }

	    async function* flatten(iterable) {
	        for await (const maybeItr of iterable) {
	            if (maybeItr && typeof maybeItr !== 'string' && (maybeItr[Symbol.iterator] || maybeItr[Symbol.asyncIterator])) {
	                yield* flatten(maybeItr);
	            }
	            else {
	                yield maybeItr;
	            }
	        }
	    }

	    async function* _map(func, iterable) {
	        for await (const val of iterable) {
	            yield await func(val);
	        }
	    }
	    function map(func, iterable) {
	        if (iterable === undefined) {
	            return curriedIterable => _map(func, curriedIterable);
	        }
	        return _map(func, iterable);
	    }

	    function flatMap(func, iterable) {
	        if (iterable === undefined) {
	            return curriedIterable => flatMap(func, curriedIterable);
	        }
	        return filter(i => i !== undefined && i !== null, flatten(map(func, iterable)));
	    }

	    function _flatTransform(concurrency, func, iterable) {
	        const iterator = getIterator(iterable);
	        const resultQueue = [];
	        const readQueue = [];
	        let ended = false;
	        let reading = false;
	        let inflightCount = 0;
	        let lastError = null;
	        function fulfillReadQueue() {
	            while (readQueue.length > 0 && resultQueue.length > 0) {
	                const { resolve } = readQueue.shift();
	                const value = resultQueue.shift();
	                resolve({ done: false, value });
	            }
	            while (readQueue.length > 0 && inflightCount === 0 && ended) {
	                const { resolve, reject } = readQueue.shift();
	                if (lastError) {
	                    reject(lastError);
	                    lastError = null;
	                }
	                else {
	                    resolve({ done: true, value: undefined });
	                }
	            }
	        }
	        async function fillQueue() {
	            if (ended) {
	                fulfillReadQueue();
	                return;
	            }
	            if (reading) {
	                return;
	            }
	            if (inflightCount + resultQueue.length >= concurrency) {
	                return;
	            }
	            reading = true;
	            inflightCount++;
	            try {
	                const { done, value } = await iterator.next();
	                if (done) {
	                    ended = true;
	                    inflightCount--;
	                    fulfillReadQueue();
	                }
	                else {
	                    mapAndQueue(value);
	                }
	            }
	            catch (error) {
	                ended = true;
	                inflightCount--;
	                lastError = error;
	                fulfillReadQueue();
	            }
	            reading = false;
	            fillQueue();
	        }
	        async function mapAndQueue(itrValue) {
	            try {
	                const value = await func(itrValue);
	                if (value && value[Symbol.asyncIterator]) {
	                    for await (const asyncVal of value) {
	                        resultQueue.push(asyncVal);
	                    }
	                }
	                else {
	                    resultQueue.push(value);
	                }
	            }
	            catch (error) {
	                ended = true;
	                lastError = error;
	            }
	            inflightCount--;
	            fulfillReadQueue();
	            fillQueue();
	        }
	        async function next() {
	            if (resultQueue.length === 0) {
	                const deferred = defer();
	                readQueue.push(deferred);
	                fillQueue();
	                return deferred.promise;
	            }
	            const value = resultQueue.shift();
	            fillQueue();
	            return { done: false, value };
	        }
	        const asyncIterableIterator = {
	            next,
	            [Symbol.asyncIterator]: () => asyncIterableIterator,
	        };
	        return asyncIterableIterator;
	    }
	    function flatTransform(concurrency, func, iterable) {
	        if (func === undefined) {
	            return (curriedFunc, curriedIterable) => curriedIterable
	                ? flatTransform(concurrency, curriedFunc, curriedIterable)
	                : flatTransform(concurrency, curriedFunc);
	        }
	        if (iterable === undefined) {
	            return (curriedIterable) => flatTransform(concurrency, func, curriedIterable);
	        }
	        return filter(i => i !== undefined && i !== null, flatten(_flatTransform(concurrency, func, iterable)));
	    }

	    async function onceReadable(stream) {
	        return new Promise(resolve => {
	            stream.once('readable', () => {
	                resolve();
	            });
	        });
	    }
	    async function* _fromStream(stream) {
	        while (true) {
	            const data = stream.read();
	            if (data !== null) {
	                yield data;
	                continue;
	            }
	            if (stream._readableState.ended) {
	                break;
	            }
	            await onceReadable(stream);
	        }
	    }
	    function fromStream(stream) {
	        if (typeof stream[Symbol.asyncIterator] === 'function') {
	            return stream;
	        }
	        return _fromStream(stream);
	    }

	    async function* merge(...iterables) {
	        const sources = new Set(iterables.map(getIterator));
	        while (sources.size > 0) {
	            for (const iterator of sources) {
	                const nextVal = await iterator.next();
	                if (nextVal.done) {
	                    sources.delete(iterator);
	                }
	                else {
	                    yield nextVal.value;
	                }
	            }
	        }
	    }

	    function pipeline(firstFn, ...fns) {
	        let previousFn = firstFn();
	        for (const func of fns) {
	            previousFn = func(previousFn);
	        }
	        return previousFn;
	    }

	    async function* _parallelMap(concurrency, func, iterable) {
	        let transformError = null;
	        const wrapFunc = value => ({
	            value: func(value),
	        });
	        const stopOnError = async function* (source) {
	            for await (const value of source) {
	                if (transformError) {
	                    return;
	                }
	                yield value;
	            }
	        };
	        const output = pipeline(() => iterable, buffer(1), stopOnError, map(wrapFunc), buffer(concurrency - 1));
	        const itr = getIterator(output);
	        while (true) {
	            const { value, done } = await itr.next();
	            if (done) {
	                break;
	            }
	            try {
	                const val = await value.value;
	                if (!transformError) {
	                    yield val;
	                }
	            }
	            catch (error) {
	                transformError = error;
	            }
	        }
	        if (transformError) {
	            throw transformError;
	        }
	    }
	    function parallelMap(concurrency, func, iterable) {
	        if (func === undefined) {
	            return (curriedFunc, curriedIterable) => parallelMap(concurrency, curriedFunc, curriedIterable);
	        }
	        if (iterable === undefined) {
	            return curriedIterable => parallelMap(concurrency, func, curriedIterable);
	        }
	        if (concurrency === 1) {
	            return map(func, iterable);
	        }
	        return _parallelMap(concurrency, func, iterable);
	    }

	    function parallelFlatMap(concurrency, func, iterable) {
	        if (func === undefined) {
	            return (curriedFunc, curriedIterable) => curriedIterable
	                ? parallelFlatMap(concurrency, curriedFunc, curriedIterable)
	                : parallelFlatMap(concurrency, curriedFunc);
	        }
	        if (iterable === undefined) {
	            return (curriedIterable) => parallelFlatMap(concurrency, func, curriedIterable);
	        }
	        return filter(i => i !== undefined && i !== null, flatten(parallelMap(concurrency, func, iterable)));
	    }

	    async function* parallelMerge(...iterables) {
	        const inputs = iterables.map(getIterator);
	        const concurrentWork = new Set();
	        const values = new Map();
	        let lastError = null;
	        let errCb = null;
	        let valueCb = null;
	        const notifyError = err => {
	            lastError = err;
	            if (errCb) {
	                errCb(err);
	            }
	        };
	        const notifyDone = value => {
	            if (valueCb) {
	                valueCb(value);
	            }
	        };
	        const waitForQueue = () => new Promise((resolve, reject) => {
	            if (lastError) {
	                reject(lastError);
	            }
	            if (values.size > 0) {
	                return resolve();
	            }
	            valueCb = resolve;
	            errCb = reject;
	        });
	        const queueNext = input => {
	            const nextVal = Promise.resolve(input.next()).then(async ({ done, value }) => {
	                if (!done) {
	                    values.set(input, value);
	                }
	                concurrentWork.delete(nextVal);
	            });
	            concurrentWork.add(nextVal);
	            nextVal.then(notifyDone, notifyError);
	        };
	        for (const input of inputs) {
	            queueNext(input);
	        }
	        while (true) {
	            // We technically don't have to check `values.size` as the for loop should have emptied it
	            // However I haven't yet found specs verifying that behavior, only tests
	            // the guard in waitForQueue() checking for values is in place for the same reason
	            if (concurrentWork.size === 0 && values.size === 0) {
	                return;
	            }
	            await waitForQueue();
	            for (const [input, value] of values) {
	                values.delete(input);
	                yield value;
	                queueNext(input);
	            }
	        }
	    }

	    async function _reduce(func, start, iterable) {
	        let value = start;
	        for await (const nextItem of iterable) {
	            value = await func(value, nextItem);
	        }
	        return value;
	    }
	    function reduce(func, start, iterable) {
	        if (start === undefined) {
	            return (curriedStart, curriedIterable) => curriedIterable ? _reduce(func, curriedStart, curriedIterable) : reduce(func, curriedStart);
	        }
	        if (iterable === undefined) {
	            return (curriedIterable) => reduce(func, start, curriedIterable);
	        }
	        return _reduce(func, start, iterable);
	    }

	    async function* _take(count, iterable) {
	        let taken = 0;
	        for await (const val of iterable) {
	            yield await val;
	            taken++;
	            if (taken >= count) {
	                break;
	            }
	        }
	    }
	    function* _syncTake(count, iterable) {
	        let taken = 0;
	        for (const val of iterable) {
	            yield val;
	            taken++;
	            if (taken >= count) {
	                break;
	            }
	        }
	    }
	    function take(count, iterable) {
	        if (iterable === undefined) {
	            return curriedIterable => take(count, curriedIterable);
	        }
	        if (iterable[Symbol.asyncIterator]) {
	            return _take(count, iterable);
	        }
	        return _syncTake(count, iterable);
	    }

	    async function* _asyncTap(func, iterable) {
	        for await (const val of iterable) {
	            await func(val);
	            yield val;
	        }
	    }
	    function tap(func, iterable) {
	        if (iterable === undefined) {
	            return (curriedIterable) => _asyncTap(func, curriedIterable);
	        }
	        return _asyncTap(func, iterable);
	    }

	    const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));
	    function _throttle(limit, interval, iterable) {
	        if (!Number.isFinite(limit)) {
	            throw new TypeError('Expected `limit` to be a finite number');
	        }
	        if (limit <= 0) {
	            throw new TypeError('Expected `limit` to be greater than 0');
	        }
	        if (!Number.isFinite(interval)) {
	            throw new TypeError('Expected `interval` to be a finite number');
	        }
	        return (async function* __throttle() {
	            let sent = 0;
	            let time;
	            for await (const val of iterable) {
	                if (sent < limit) {
	                    if (typeof time === 'undefined') {
	                        time = Date.now();
	                    }
	                    sent++;
	                    yield val;
	                    continue;
	                }
	                // Only wait if the interval hasn't already passed while we were
	                // yielding the previous values.
	                const elapsedMs = Date.now() - time;
	                const waitFor = interval - elapsedMs;
	                if (waitFor > 0) {
	                    await sleep(waitFor);
	                }
	                time = Date.now();
	                sent = 1;
	                yield val;
	            }
	        })();
	    }
	    function throttle(limit, interval, iterable) {
	        if (iterable === undefined) {
	            return (curriedIterable) => _throttle(limit, interval, curriedIterable);
	        }
	        return _throttle(limit, interval, iterable);
	    }

	    function addTime(a, b) {
	        let seconds = a[0] + b[0];
	        let nanoseconds = a[1] + b[1];
	        if (nanoseconds >= 1000000000) {
	            const remainder = nanoseconds % 1000000000;
	            seconds += (nanoseconds - remainder) / 1000000000;
	            nanoseconds = remainder;
	        }
	        return [seconds, nanoseconds];
	    }
	    async function* _asyncTime(config, iterable) {
	        const itr = iterable[Symbol.asyncIterator]();
	        let total = [0, 0];
	        while (true) {
	            const start = process$3.hrtime();
	            const { value, done } = await itr.next();
	            const delta = process$3.hrtime(start);
	            total = addTime(total, delta);
	            if (config.progress) {
	                config.progress(delta, total);
	            }
	            if (done) {
	                if (config.total) {
	                    config.total(total);
	                }
	                return value;
	            }
	            yield value;
	        }
	    }
	    function* _syncTime(config, iterable) {
	        const itr = iterable[Symbol.iterator]();
	        let total = [0, 0];
	        while (true) {
	            const start = process$3.hrtime();
	            const { value, done } = itr.next();
	            const delta = process$3.hrtime(start);
	            total = addTime(total, delta);
	            if (config.progress) {
	                config.progress(delta, total);
	            }
	            if (done) {
	                if (config.total) {
	                    config.total(total);
	                }
	                return value;
	            }
	            yield value;
	        }
	    }
	    function time(config = {}, iterable) {
	        if (iterable === undefined) {
	            return curriedIterable => time(config, curriedIterable);
	        }
	        if (iterable[Symbol.asyncIterator] !== undefined) {
	            return _asyncTime(config, iterable);
	        }
	        else {
	            return _syncTime(config, iterable);
	        }
	    }

	    function _transform(concurrency, func, iterable) {
	        const iterator = getIterator(iterable);
	        const resultQueue = [];
	        const readQueue = [];
	        let ended = false;
	        let reading = false;
	        let inflightCount = 0;
	        let lastError = null;
	        function fulfillReadQueue() {
	            while (readQueue.length > 0 && resultQueue.length > 0) {
	                const { resolve } = readQueue.shift();
	                const value = resultQueue.shift();
	                resolve({ done: false, value });
	            }
	            while (readQueue.length > 0 && inflightCount === 0 && ended) {
	                const { resolve, reject } = readQueue.shift();
	                if (lastError) {
	                    reject(lastError);
	                    lastError = null;
	                }
	                else {
	                    resolve({ done: true, value: undefined });
	                }
	            }
	        }
	        async function fillQueue() {
	            if (ended) {
	                fulfillReadQueue();
	                return;
	            }
	            if (reading) {
	                return;
	            }
	            if (inflightCount + resultQueue.length >= concurrency) {
	                return;
	            }
	            reading = true;
	            inflightCount++;
	            try {
	                const { done, value } = await iterator.next();
	                if (done) {
	                    ended = true;
	                    inflightCount--;
	                    fulfillReadQueue();
	                }
	                else {
	                    mapAndQueue(value);
	                }
	            }
	            catch (error) {
	                ended = true;
	                inflightCount--;
	                lastError = error;
	                fulfillReadQueue();
	            }
	            reading = false;
	            fillQueue();
	        }
	        async function mapAndQueue(itrValue) {
	            try {
	                const value = await func(itrValue);
	                resultQueue.push(value);
	            }
	            catch (error) {
	                ended = true;
	                lastError = error;
	            }
	            inflightCount--;
	            fulfillReadQueue();
	            fillQueue();
	        }
	        async function next() {
	            if (resultQueue.length === 0) {
	                const deferred = defer();
	                readQueue.push(deferred);
	                fillQueue();
	                return deferred.promise;
	            }
	            const value = resultQueue.shift();
	            fillQueue();
	            return { done: false, value };
	        }
	        const asyncIterableIterator = {
	            next,
	            [Symbol.asyncIterator]: () => asyncIterableIterator,
	        };
	        return asyncIterableIterator;
	    }
	    function transform(concurrency, func, iterable) {
	        if (func === undefined) {
	            return (curriedFunc, curriedIterable) => curriedIterable
	                ? transform(concurrency, curriedFunc, curriedIterable)
	                : transform(concurrency, curriedFunc);
	        }
	        if (iterable === undefined) {
	            return (curriedIterable) => transform(concurrency, func, curriedIterable);
	        }
	        return _transform(concurrency, func, iterable);
	    }

	    async function _writeToStream(stream, iterable) {
	        let lastError = null;
	        let errCb = null;
	        let drainCb = null;
	        const notifyError = err => {
	            lastError = err;
	            if (errCb) {
	                errCb(err);
	            }
	        };
	        const notifyDrain = () => {
	            if (drainCb) {
	                drainCb();
	            }
	        };
	        const cleanup = () => {
	            stream.removeListener('error', notifyError);
	            stream.removeListener('drain', notifyDrain);
	        };
	        stream.once('error', notifyError);
	        const waitForDrain = () => new Promise((resolve, reject) => {
	            if (lastError) {
	                return reject(lastError);
	            }
	            stream.once('drain', notifyDrain);
	            drainCb = resolve;
	            errCb = reject;
	        });
	        for await (const value of iterable) {
	            if (stream.write(value) === false) {
	                await waitForDrain();
	            }
	            if (lastError) {
	                break;
	            }
	        }
	        cleanup();
	        if (lastError) {
	            throw lastError;
	        }
	    }
	    function writeToStream(stream, iterable) {
	        if (iterable === undefined) {
	            return (curriedIterable) => _writeToStream(stream, curriedIterable);
	        }
	        return _writeToStream(stream, iterable);
	    }

	    exports.batch = batch;
	    exports.batchWithTimeout = batchWithTimeout;
	    exports.buffer = buffer;
	    exports.collect = collect;
	    exports.concat = concat;
	    exports.consume = consume;
	    exports.filter = filter;
	    exports.flatMap = flatMap;
	    exports.flatTransform = flatTransform;
	    exports.flatten = flatten;
	    exports.fromStream = fromStream;
	    exports.getIterator = getIterator;
	    exports.map = map;
	    exports.merge = merge;
	    exports.parallelFlatMap = parallelFlatMap;
	    exports.parallelMap = parallelMap;
	    exports.parallelMerge = parallelMerge;
	    exports.pipeline = pipeline;
	    exports.reduce = reduce;
	    exports.take = take;
	    exports.tap = tap;
	    exports.throttle = throttle;
	    exports.time = time;
	    exports.transform = transform;
	    exports.writeToStream = writeToStream;

	    Object.defineProperty(exports, '__esModule', { value: true });

	}));
	}(dist, dist.exports));

	const LRU = hashlru;

	/**
	 * Creates and returns a Least Recently Used Cache
	 *
	 * @param {number} maxSize
	 * @returns {any}
	 */
	var oldPeers = (maxSize) => {
	  // @ts-ignore LRU expression is not callable
	  const patched = LRU(maxSize);
	  patched.delete = patched.remove;
	  return patched
	};

	var bignumber = {exports: {}};

	(function (module) {
	(function (globalObject) {

	/*
	 *      bignumber.js v9.0.2
	 *      A JavaScript library for arbitrary-precision arithmetic.
	 *      https://github.com/MikeMcl/bignumber.js
	 *      Copyright (c) 2021 Michael Mclaughlin <M8ch88l@gmail.com>
	 *      MIT Licensed.
	 *
	 *      BigNumber.prototype methods     |  BigNumber methods
	 *                                      |
	 *      absoluteValue            abs    |  clone
	 *      comparedTo                      |  config               set
	 *      decimalPlaces            dp     |      DECIMAL_PLACES
	 *      dividedBy                div    |      ROUNDING_MODE
	 *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
	 *      exponentiatedBy          pow    |      RANGE
	 *      integerValue                    |      CRYPTO
	 *      isEqualTo                eq     |      MODULO_MODE
	 *      isFinite                        |      POW_PRECISION
	 *      isGreaterThan            gt     |      FORMAT
	 *      isGreaterThanOrEqualTo   gte    |      ALPHABET
	 *      isInteger                       |  isBigNumber
	 *      isLessThan               lt     |  maximum              max
	 *      isLessThanOrEqualTo      lte    |  minimum              min
	 *      isNaN                           |  random
	 *      isNegative                      |  sum
	 *      isPositive                      |
	 *      isZero                          |
	 *      minus                           |
	 *      modulo                   mod    |
	 *      multipliedBy             times  |
	 *      negated                         |
	 *      plus                            |
	 *      precision                sd     |
	 *      shiftedBy                       |
	 *      squareRoot               sqrt   |
	 *      toExponential                   |
	 *      toFixed                         |
	 *      toFormat                        |
	 *      toFraction                      |
	 *      toJSON                          |
	 *      toNumber                        |
	 *      toPrecision                     |
	 *      toString                        |
	 *      valueOf                         |
	 *
	 */


	  var BigNumber,
	    isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,
	    mathceil = Math.ceil,
	    mathfloor = Math.floor,

	    bignumberError = '[BigNumber Error] ',
	    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',

	    BASE = 1e14,
	    LOG_BASE = 14,
	    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
	    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
	    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
	    SQRT_BASE = 1e7,

	    // EDITABLE
	    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
	    // the arguments to toExponential, toFixed, toFormat, and toPrecision.
	    MAX = 1E9;                                   // 0 to MAX_INT32


	  /*
	   * Create and return a BigNumber constructor.
	   */
	  function clone(configObject) {
	    var div, convertBase, parseNumeric,
	      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },
	      ONE = new BigNumber(1),


	      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------


	      // The default values below must be integers within the inclusive ranges stated.
	      // The values can also be changed at run-time using BigNumber.set.

	      // The maximum number of decimal places for operations involving division.
	      DECIMAL_PLACES = 20,                     // 0 to MAX

	      // The rounding mode used when rounding to the above decimal places, and when using
	      // toExponential, toFixed, toFormat and toPrecision, and round (default value).
	      // UP         0 Away from zero.
	      // DOWN       1 Towards zero.
	      // CEIL       2 Towards +Infinity.
	      // FLOOR      3 Towards -Infinity.
	      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
	      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
	      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
	      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
	      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
	      ROUNDING_MODE = 4,                       // 0 to 8

	      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

	      // The exponent value at and beneath which toString returns exponential notation.
	      // Number type: -7
	      TO_EXP_NEG = -7,                         // 0 to -MAX

	      // The exponent value at and above which toString returns exponential notation.
	      // Number type: 21
	      TO_EXP_POS = 21,                         // 0 to MAX

	      // RANGE : [MIN_EXP, MAX_EXP]

	      // The minimum exponent value, beneath which underflow to zero occurs.
	      // Number type: -324  (5e-324)
	      MIN_EXP = -1e7,                          // -1 to -MAX

	      // The maximum exponent value, above which overflow to Infinity occurs.
	      // Number type:  308  (1.7976931348623157e+308)
	      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
	      MAX_EXP = 1e7,                           // 1 to MAX

	      // Whether to use cryptographically-secure random number generation, if available.
	      CRYPTO = false,                          // true or false

	      // The modulo mode used when calculating the modulus: a mod n.
	      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
	      // The remainder (r) is calculated as: r = a - n * q.
	      //
	      // UP        0 The remainder is positive if the dividend is negative, else is negative.
	      // DOWN      1 The remainder has the same sign as the dividend.
	      //             This modulo mode is commonly known as 'truncated division' and is
	      //             equivalent to (a % n) in JavaScript.
	      // FLOOR     3 The remainder has the same sign as the divisor (Python %).
	      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
	      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
	      //             The remainder is always positive.
	      //
	      // The truncated division, floored division, Euclidian division and IEEE 754 remainder
	      // modes are commonly used for the modulus operation.
	      // Although the other rounding modes can also be used, they may not give useful results.
	      MODULO_MODE = 1,                         // 0 to 9

	      // The maximum number of significant digits of the result of the exponentiatedBy operation.
	      // If POW_PRECISION is 0, there will be unlimited significant digits.
	      POW_PRECISION = 0,                       // 0 to MAX

	      // The format specification used by the BigNumber.prototype.toFormat method.
	      FORMAT = {
	        prefix: '',
	        groupSize: 3,
	        secondaryGroupSize: 0,
	        groupSeparator: ',',
	        decimalSeparator: '.',
	        fractionGroupSize: 0,
	        fractionGroupSeparator: '\xA0',        // non-breaking space
	        suffix: ''
	      },

	      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
	      // '-', '.', whitespace, or repeated character.
	      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
	      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',
	      alphabetHasNormalDecimalDigits = true;


	    //------------------------------------------------------------------------------------------


	    // CONSTRUCTOR


	    /*
	     * The BigNumber constructor and exported function.
	     * Create and return a new instance of a BigNumber object.
	     *
	     * v {number|string|BigNumber} A numeric value.
	     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
	     */
	    function BigNumber(v, b) {
	      var alphabet, c, caseChanged, e, i, isNum, len, str,
	        x = this;

	      // Enable constructor call without `new`.
	      if (!(x instanceof BigNumber)) return new BigNumber(v, b);

	      if (b == null) {

	        if (v && v._isBigNumber === true) {
	          x.s = v.s;

	          if (!v.c || v.e > MAX_EXP) {
	            x.c = x.e = null;
	          } else if (v.e < MIN_EXP) {
	            x.c = [x.e = 0];
	          } else {
	            x.e = v.e;
	            x.c = v.c.slice();
	          }

	          return;
	        }

	        if ((isNum = typeof v == 'number') && v * 0 == 0) {

	          // Use `1 / n` to handle minus zero also.
	          x.s = 1 / v < 0 ? (v = -v, -1) : 1;

	          // Fast path for integers, where n < 2147483648 (2**31).
	          if (v === ~~v) {
	            for (e = 0, i = v; i >= 10; i /= 10, e++);

	            if (e > MAX_EXP) {
	              x.c = x.e = null;
	            } else {
	              x.e = e;
	              x.c = [v];
	            }

	            return;
	          }

	          str = String(v);
	        } else {

	          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);

	          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
	        }

	        // Decimal point?
	        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

	        // Exponential form?
	        if ((i = str.search(/e/i)) > 0) {

	          // Determine exponent.
	          if (e < 0) e = i;
	          e += +str.slice(i + 1);
	          str = str.substring(0, i);
	        } else if (e < 0) {

	          // Integer.
	          e = str.length;
	        }

	      } else {

	        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
	        intCheck(b, 2, ALPHABET.length, 'Base');

	        // Allow exponential notation to be used with base 10 argument, while
	        // also rounding to DECIMAL_PLACES as with other bases.
	        if (b == 10 && alphabetHasNormalDecimalDigits) {
	          x = new BigNumber(v);
	          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
	        }

	        str = String(v);

	        if (isNum = typeof v == 'number') {

	          // Avoid potential interpretation of Infinity and NaN as base 44+ values.
	          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);

	          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;

	          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
	          if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
	            throw Error
	             (tooManyDigits + v);
	          }
	        } else {
	          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
	        }

	        alphabet = ALPHABET.slice(0, b);
	        e = i = 0;

	        // Check that str is a valid base b number.
	        // Don't use RegExp, so alphabet can contain special characters.
	        for (len = str.length; i < len; i++) {
	          if (alphabet.indexOf(c = str.charAt(i)) < 0) {
	            if (c == '.') {

	              // If '.' is not the first character and it has not be found before.
	              if (i > e) {
	                e = len;
	                continue;
	              }
	            } else if (!caseChanged) {

	              // Allow e.g. hexadecimal 'FF' as well as 'ff'.
	              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||
	                  str == str.toLowerCase() && (str = str.toUpperCase())) {
	                caseChanged = true;
	                i = -1;
	                e = 0;
	                continue;
	              }
	            }

	            return parseNumeric(x, String(v), isNum, b);
	          }
	        }

	        // Prevent later check for length on converted number.
	        isNum = false;
	        str = convertBase(str, b, 10, x.s);

	        // Decimal point?
	        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
	        else e = str.length;
	      }

	      // Determine leading zeros.
	      for (i = 0; str.charCodeAt(i) === 48; i++);

	      // Determine trailing zeros.
	      for (len = str.length; str.charCodeAt(--len) === 48;);

	      if (str = str.slice(i, ++len)) {
	        len -= i;

	        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
	        if (isNum && BigNumber.DEBUG &&
	          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
	            throw Error
	             (tooManyDigits + (x.s * v));
	        }

	         // Overflow?
	        if ((e = e - i - 1) > MAX_EXP) {

	          // Infinity.
	          x.c = x.e = null;

	        // Underflow?
	        } else if (e < MIN_EXP) {

	          // Zero.
	          x.c = [x.e = 0];
	        } else {
	          x.e = e;
	          x.c = [];

	          // Transform base

	          // e is the base 10 exponent.
	          // i is where to slice str to get the first element of the coefficient array.
	          i = (e + 1) % LOG_BASE;
	          if (e < 0) i += LOG_BASE;  // i < 1

	          if (i < len) {
	            if (i) x.c.push(+str.slice(0, i));

	            for (len -= LOG_BASE; i < len;) {
	              x.c.push(+str.slice(i, i += LOG_BASE));
	            }

	            i = LOG_BASE - (str = str.slice(i)).length;
	          } else {
	            i -= len;
	          }

	          for (; i--; str += '0');
	          x.c.push(+str);
	        }
	      } else {

	        // Zero.
	        x.c = [x.e = 0];
	      }
	    }


	    // CONSTRUCTOR PROPERTIES


	    BigNumber.clone = clone;

	    BigNumber.ROUND_UP = 0;
	    BigNumber.ROUND_DOWN = 1;
	    BigNumber.ROUND_CEIL = 2;
	    BigNumber.ROUND_FLOOR = 3;
	    BigNumber.ROUND_HALF_UP = 4;
	    BigNumber.ROUND_HALF_DOWN = 5;
	    BigNumber.ROUND_HALF_EVEN = 6;
	    BigNumber.ROUND_HALF_CEIL = 7;
	    BigNumber.ROUND_HALF_FLOOR = 8;
	    BigNumber.EUCLID = 9;


	    /*
	     * Configure infrequently-changing library-wide settings.
	     *
	     * Accept an object with the following optional properties (if the value of a property is
	     * a number, it must be an integer within the inclusive range stated):
	     *
	     *   DECIMAL_PLACES   {number}           0 to MAX
	     *   ROUNDING_MODE    {number}           0 to 8
	     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
	     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
	     *   CRYPTO           {boolean}          true or false
	     *   MODULO_MODE      {number}           0 to 9
	     *   POW_PRECISION       {number}           0 to MAX
	     *   ALPHABET         {string}           A string of two or more unique characters which does
	     *                                       not contain '.'.
	     *   FORMAT           {object}           An object with some of the following properties:
	     *     prefix                 {string}
	     *     groupSize              {number}
	     *     secondaryGroupSize     {number}
	     *     groupSeparator         {string}
	     *     decimalSeparator       {string}
	     *     fractionGroupSize      {number}
	     *     fractionGroupSeparator {string}
	     *     suffix                 {string}
	     *
	     * (The values assigned to the above FORMAT object properties are not checked for validity.)
	     *
	     * E.g.
	     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
	     *
	     * Ignore properties/parameters set to null or undefined, except for ALPHABET.
	     *
	     * Return an object with the properties current values.
	     */
	    BigNumber.config = BigNumber.set = function (obj) {
	      var p, v;

	      if (obj != null) {

	        if (typeof obj == 'object') {

	          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
	          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
	          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
	            v = obj[p];
	            intCheck(v, 0, MAX, p);
	            DECIMAL_PLACES = v;
	          }

	          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
	          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
	          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
	            v = obj[p];
	            intCheck(v, 0, 8, p);
	            ROUNDING_MODE = v;
	          }

	          // EXPONENTIAL_AT {number|number[]}
	          // Integer, -MAX to MAX inclusive or
	          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
	          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
	          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
	            v = obj[p];
	            if (v && v.pop) {
	              intCheck(v[0], -MAX, 0, p);
	              intCheck(v[1], 0, MAX, p);
	              TO_EXP_NEG = v[0];
	              TO_EXP_POS = v[1];
	            } else {
	              intCheck(v, -MAX, MAX, p);
	              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
	            }
	          }

	          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
	          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
	          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
	          if (obj.hasOwnProperty(p = 'RANGE')) {
	            v = obj[p];
	            if (v && v.pop) {
	              intCheck(v[0], -MAX, -1, p);
	              intCheck(v[1], 1, MAX, p);
	              MIN_EXP = v[0];
	              MAX_EXP = v[1];
	            } else {
	              intCheck(v, -MAX, MAX, p);
	              if (v) {
	                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
	              } else {
	                throw Error
	                 (bignumberError + p + ' cannot be zero: ' + v);
	              }
	            }
	          }

	          // CRYPTO {boolean} true or false.
	          // '[BigNumber Error] CRYPTO not true or false: {v}'
	          // '[BigNumber Error] crypto unavailable'
	          if (obj.hasOwnProperty(p = 'CRYPTO')) {
	            v = obj[p];
	            if (v === !!v) {
	              if (v) {
	                if (typeof crypto != 'undefined' && crypto &&
	                 (crypto.getRandomValues || crypto.randomBytes)) {
	                  CRYPTO = v;
	                } else {
	                  CRYPTO = !v;
	                  throw Error
	                   (bignumberError + 'crypto unavailable');
	                }
	              } else {
	                CRYPTO = v;
	              }
	            } else {
	              throw Error
	               (bignumberError + p + ' not true or false: ' + v);
	            }
	          }

	          // MODULO_MODE {number} Integer, 0 to 9 inclusive.
	          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
	          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
	            v = obj[p];
	            intCheck(v, 0, 9, p);
	            MODULO_MODE = v;
	          }

	          // POW_PRECISION {number} Integer, 0 to MAX inclusive.
	          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
	          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
	            v = obj[p];
	            intCheck(v, 0, MAX, p);
	            POW_PRECISION = v;
	          }

	          // FORMAT {object}
	          // '[BigNumber Error] FORMAT not an object: {v}'
	          if (obj.hasOwnProperty(p = 'FORMAT')) {
	            v = obj[p];
	            if (typeof v == 'object') FORMAT = v;
	            else throw Error
	             (bignumberError + p + ' not an object: ' + v);
	          }

	          // ALPHABET {string}
	          // '[BigNumber Error] ALPHABET invalid: {v}'
	          if (obj.hasOwnProperty(p = 'ALPHABET')) {
	            v = obj[p];

	            // Disallow if less than two characters,
	            // or if it contains '+', '-', '.', whitespace, or a repeated character.
	            if (typeof v == 'string' && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
	              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';
	              ALPHABET = v;
	            } else {
	              throw Error
	               (bignumberError + p + ' invalid: ' + v);
	            }
	          }

	        } else {

	          // '[BigNumber Error] Object expected: {v}'
	          throw Error
	           (bignumberError + 'Object expected: ' + obj);
	        }
	      }

	      return {
	        DECIMAL_PLACES: DECIMAL_PLACES,
	        ROUNDING_MODE: ROUNDING_MODE,
	        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
	        RANGE: [MIN_EXP, MAX_EXP],
	        CRYPTO: CRYPTO,
	        MODULO_MODE: MODULO_MODE,
	        POW_PRECISION: POW_PRECISION,
	        FORMAT: FORMAT,
	        ALPHABET: ALPHABET
	      };
	    };


	    /*
	     * Return true if v is a BigNumber instance, otherwise return false.
	     *
	     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
	     *
	     * v {any}
	     *
	     * '[BigNumber Error] Invalid BigNumber: {v}'
	     */
	    BigNumber.isBigNumber = function (v) {
	      if (!v || v._isBigNumber !== true) return false;
	      if (!BigNumber.DEBUG) return true;

	      var i, n,
	        c = v.c,
	        e = v.e,
	        s = v.s;

	      out: if ({}.toString.call(c) == '[object Array]') {

	        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {

	          // If the first element is zero, the BigNumber value must be zero.
	          if (c[0] === 0) {
	            if (e === 0 && c.length === 1) return true;
	            break out;
	          }

	          // Calculate number of digits that c[0] should have, based on the exponent.
	          i = (e + 1) % LOG_BASE;
	          if (i < 1) i += LOG_BASE;

	          // Calculate number of digits of c[0].
	          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {
	          if (String(c[0]).length == i) {

	            for (i = 0; i < c.length; i++) {
	              n = c[i];
	              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
	            }

	            // Last element cannot be zero, unless it is the only element.
	            if (n !== 0) return true;
	          }
	        }

	      // Infinity/NaN
	      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
	        return true;
	      }

	      throw Error
	        (bignumberError + 'Invalid BigNumber: ' + v);
	    };


	    /*
	     * Return a new BigNumber whose value is the maximum of the arguments.
	     *
	     * arguments {number|string|BigNumber}
	     */
	    BigNumber.maximum = BigNumber.max = function () {
	      return maxOrMin(arguments, P.lt);
	    };


	    /*
	     * Return a new BigNumber whose value is the minimum of the arguments.
	     *
	     * arguments {number|string|BigNumber}
	     */
	    BigNumber.minimum = BigNumber.min = function () {
	      return maxOrMin(arguments, P.gt);
	    };


	    /*
	     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
	     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
	     * zeros are produced).
	     *
	     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
	     * '[BigNumber Error] crypto unavailable'
	     */
	    BigNumber.random = (function () {
	      var pow2_53 = 0x20000000000000;

	      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
	      // Check if Math.random() produces more than 32 bits of randomness.
	      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
	      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
	      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
	       ? function () { return mathfloor(Math.random() * pow2_53); }
	       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
	         (Math.random() * 0x800000 | 0); };

	      return function (dp) {
	        var a, b, e, k, v,
	          i = 0,
	          c = [],
	          rand = new BigNumber(ONE);

	        if (dp == null) dp = DECIMAL_PLACES;
	        else intCheck(dp, 0, MAX);

	        k = mathceil(dp / LOG_BASE);

	        if (CRYPTO) {

	          // Browsers supporting crypto.getRandomValues.
	          if (crypto.getRandomValues) {

	            a = crypto.getRandomValues(new Uint32Array(k *= 2));

	            for (; i < k;) {

	              // 53 bits:
	              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
	              // 11111 11111111 11111111 11111111 11100000 00000000 00000000
	              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
	              //                                     11111 11111111 11111111
	              // 0x20000 is 2^21.
	              v = a[i] * 0x20000 + (a[i + 1] >>> 11);

	              // Rejection sampling:
	              // 0 <= v < 9007199254740992
	              // Probability that v >= 9e15, is
	              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
	              if (v >= 9e15) {
	                b = crypto.getRandomValues(new Uint32Array(2));
	                a[i] = b[0];
	                a[i + 1] = b[1];
	              } else {

	                // 0 <= v <= 8999999999999999
	                // 0 <= (v % 1e14) <= 99999999999999
	                c.push(v % 1e14);
	                i += 2;
	              }
	            }
	            i = k / 2;

	          // Node.js supporting crypto.randomBytes.
	          } else if (crypto.randomBytes) {

	            // buffer
	            a = crypto.randomBytes(k *= 7);

	            for (; i < k;) {

	              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
	              // 0x100000000 is 2^32, 0x1000000 is 2^24
	              // 11111 11111111 11111111 11111111 11111111 11111111 11111111
	              // 0 <= v < 9007199254740992
	              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +
	                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +
	                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

	              if (v >= 9e15) {
	                crypto.randomBytes(7).copy(a, i);
	              } else {

	                // 0 <= (v % 1e14) <= 99999999999999
	                c.push(v % 1e14);
	                i += 7;
	              }
	            }
	            i = k / 7;
	          } else {
	            CRYPTO = false;
	            throw Error
	             (bignumberError + 'crypto unavailable');
	          }
	        }

	        // Use Math.random.
	        if (!CRYPTO) {

	          for (; i < k;) {
	            v = random53bitInt();
	            if (v < 9e15) c[i++] = v % 1e14;
	          }
	        }

	        k = c[--i];
	        dp %= LOG_BASE;

	        // Convert trailing digits to zeros according to dp.
	        if (k && dp) {
	          v = POWS_TEN[LOG_BASE - dp];
	          c[i] = mathfloor(k / v) * v;
	        }

	        // Remove trailing elements which are zero.
	        for (; c[i] === 0; c.pop(), i--);

	        // Zero?
	        if (i < 0) {
	          c = [e = 0];
	        } else {

	          // Remove leading elements which are zero and adjust exponent accordingly.
	          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);

	          // Count the digits of the first element of c to determine leading zeros, and...
	          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);

	          // adjust the exponent accordingly.
	          if (i < LOG_BASE) e -= LOG_BASE - i;
	        }

	        rand.e = e;
	        rand.c = c;
	        return rand;
	      };
	    })();


	    /*
	     * Return a BigNumber whose value is the sum of the arguments.
	     *
	     * arguments {number|string|BigNumber}
	     */
	    BigNumber.sum = function () {
	      var i = 1,
	        args = arguments,
	        sum = new BigNumber(args[0]);
	      for (; i < args.length;) sum = sum.plus(args[i++]);
	      return sum;
	    };


	    // PRIVATE FUNCTIONS


	    // Called by BigNumber and BigNumber.prototype.toString.
	    convertBase = (function () {
	      var decimal = '0123456789';

	      /*
	       * Convert string of baseIn to an array of numbers of baseOut.
	       * Eg. toBaseOut('255', 10, 16) returns [15, 15].
	       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
	       */
	      function toBaseOut(str, baseIn, baseOut, alphabet) {
	        var j,
	          arr = [0],
	          arrL,
	          i = 0,
	          len = str.length;

	        for (; i < len;) {
	          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);

	          arr[0] += alphabet.indexOf(str.charAt(i++));

	          for (j = 0; j < arr.length; j++) {

	            if (arr[j] > baseOut - 1) {
	              if (arr[j + 1] == null) arr[j + 1] = 0;
	              arr[j + 1] += arr[j] / baseOut | 0;
	              arr[j] %= baseOut;
	            }
	          }
	        }

	        return arr.reverse();
	      }

	      // Convert a numeric string of baseIn to a numeric string of baseOut.
	      // If the caller is toString, we are converting from base 10 to baseOut.
	      // If the caller is BigNumber, we are converting from baseIn to base 10.
	      return function (str, baseIn, baseOut, sign, callerIsToString) {
	        var alphabet, d, e, k, r, x, xc, y,
	          i = str.indexOf('.'),
	          dp = DECIMAL_PLACES,
	          rm = ROUNDING_MODE;

	        // Non-integer.
	        if (i >= 0) {
	          k = POW_PRECISION;

	          // Unlimited precision.
	          POW_PRECISION = 0;
	          str = str.replace('.', '');
	          y = new BigNumber(baseIn);
	          x = y.pow(str.length - i);
	          POW_PRECISION = k;

	          // Convert str as if an integer, then restore the fraction part by dividing the
	          // result by its base raised to a power.

	          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),
	           10, baseOut, decimal);
	          y.e = y.c.length;
	        }

	        // Convert the number as integer.

	        xc = toBaseOut(str, baseIn, baseOut, callerIsToString
	         ? (alphabet = ALPHABET, decimal)
	         : (alphabet = decimal, ALPHABET));

	        // xc now represents str as an integer and converted to baseOut. e is the exponent.
	        e = k = xc.length;

	        // Remove trailing zeros.
	        for (; xc[--k] == 0; xc.pop());

	        // Zero?
	        if (!xc[0]) return alphabet.charAt(0);

	        // Does str represent an integer? If so, no need for the division.
	        if (i < 0) {
	          --e;
	        } else {
	          x.c = xc;
	          x.e = e;

	          // The sign is needed for correct rounding.
	          x.s = sign;
	          x = div(x, y, dp, rm, baseOut);
	          xc = x.c;
	          r = x.r;
	          e = x.e;
	        }

	        // xc now represents str converted to baseOut.

	        // THe index of the rounding digit.
	        d = e + dp + 1;

	        // The rounding digit: the digit to the right of the digit that may be rounded up.
	        i = xc[d];

	        // Look at the rounding digits and mode to determine whether to round up.

	        k = baseOut / 2;
	        r = r || d < 0 || xc[d + 1] != null;

	        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
	              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
	               rm == (x.s < 0 ? 8 : 7));

	        // If the index of the rounding digit is not greater than zero, or xc represents
	        // zero, then the result of the base conversion is zero or, if rounding up, a value
	        // such as 0.00001.
	        if (d < 1 || !xc[0]) {

	          // 1^-dp or 0
	          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
	        } else {

	          // Truncate xc to the required number of decimal places.
	          xc.length = d;

	          // Round up?
	          if (r) {

	            // Rounding up may mean the previous digit has to be rounded up and so on.
	            for (--baseOut; ++xc[--d] > baseOut;) {
	              xc[d] = 0;

	              if (!d) {
	                ++e;
	                xc = [1].concat(xc);
	              }
	            }
	          }

	          // Determine trailing zeros.
	          for (k = xc.length; !xc[--k];);

	          // E.g. [4, 11, 15] becomes 4bf.
	          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));

	          // Add leading zeros, decimal point and trailing zeros as required.
	          str = toFixedPoint(str, e, alphabet.charAt(0));
	        }

	        // The caller will add the sign.
	        return str;
	      };
	    })();


	    // Perform division in the specified base. Called by div and convertBase.
	    div = (function () {

	      // Assume non-zero x and k.
	      function multiply(x, k, base) {
	        var m, temp, xlo, xhi,
	          carry = 0,
	          i = x.length,
	          klo = k % SQRT_BASE,
	          khi = k / SQRT_BASE | 0;

	        for (x = x.slice(); i--;) {
	          xlo = x[i] % SQRT_BASE;
	          xhi = x[i] / SQRT_BASE | 0;
	          m = khi * xlo + xhi * klo;
	          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;
	          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
	          x[i] = temp % base;
	        }

	        if (carry) x = [carry].concat(x);

	        return x;
	      }

	      function compare(a, b, aL, bL) {
	        var i, cmp;

	        if (aL != bL) {
	          cmp = aL > bL ? 1 : -1;
	        } else {

	          for (i = cmp = 0; i < aL; i++) {

	            if (a[i] != b[i]) {
	              cmp = a[i] > b[i] ? 1 : -1;
	              break;
	            }
	          }
	        }

	        return cmp;
	      }

	      function subtract(a, b, aL, base) {
	        var i = 0;

	        // Subtract b from a.
	        for (; aL--;) {
	          a[aL] -= i;
	          i = a[aL] < b[aL] ? 1 : 0;
	          a[aL] = i * base + a[aL] - b[aL];
	        }

	        // Remove leading zeros.
	        for (; !a[0] && a.length > 1; a.splice(0, 1));
	      }

	      // x: dividend, y: divisor.
	      return function (x, y, dp, rm, base) {
	        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
	          yL, yz,
	          s = x.s == y.s ? 1 : -1,
	          xc = x.c,
	          yc = y.c;

	        // Either NaN, Infinity or 0?
	        if (!xc || !xc[0] || !yc || !yc[0]) {

	          return new BigNumber(

	           // Return NaN if either NaN, or both Infinity or 0.
	           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

	            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
	            xc && xc[0] == 0 || !yc ? s * 0 : s / 0
	         );
	        }

	        q = new BigNumber(s);
	        qc = q.c = [];
	        e = x.e - y.e;
	        s = dp + e + 1;

	        if (!base) {
	          base = BASE;
	          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
	          s = s / LOG_BASE | 0;
	        }

	        // Result exponent may be one less then the current value of e.
	        // The coefficients of the BigNumbers from convertBase may have trailing zeros.
	        for (i = 0; yc[i] == (xc[i] || 0); i++);

	        if (yc[i] > (xc[i] || 0)) e--;

	        if (s < 0) {
	          qc.push(1);
	          more = true;
	        } else {
	          xL = xc.length;
	          yL = yc.length;
	          i = 0;
	          s += 2;

	          // Normalise xc and yc so highest order digit of yc is >= base / 2.

	          n = mathfloor(base / (yc[0] + 1));

	          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
	          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
	          if (n > 1) {
	            yc = multiply(yc, n, base);
	            xc = multiply(xc, n, base);
	            yL = yc.length;
	            xL = xc.length;
	          }

	          xi = yL;
	          rem = xc.slice(0, yL);
	          remL = rem.length;

	          // Add zeros to make remainder as long as divisor.
	          for (; remL < yL; rem[remL++] = 0);
	          yz = yc.slice();
	          yz = [0].concat(yz);
	          yc0 = yc[0];
	          if (yc[1] >= base / 2) yc0++;
	          // Not necessary, but to prevent trial digit n > base, when using base 3.
	          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

	          do {
	            n = 0;

	            // Compare divisor and remainder.
	            cmp = compare(yc, rem, yL, remL);

	            // If divisor < remainder.
	            if (cmp < 0) {

	              // Calculate trial digit, n.

	              rem0 = rem[0];
	              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

	              // n is how many times the divisor goes into the current remainder.
	              n = mathfloor(rem0 / yc0);

	              //  Algorithm:
	              //  product = divisor multiplied by trial digit (n).
	              //  Compare product and remainder.
	              //  If product is greater than remainder:
	              //    Subtract divisor from product, decrement trial digit.
	              //  Subtract product from remainder.
	              //  If product was less than remainder at the last compare:
	              //    Compare new remainder and divisor.
	              //    If remainder is greater than divisor:
	              //      Subtract divisor from remainder, increment trial digit.

	              if (n > 1) {

	                // n may be > base only when base is 3.
	                if (n >= base) n = base - 1;

	                // product = divisor * trial digit.
	                prod = multiply(yc, n, base);
	                prodL = prod.length;
	                remL = rem.length;

	                // Compare product and remainder.
	                // If product > remainder then trial digit n too high.
	                // n is 1 too high about 5% of the time, and is not known to have
	                // ever been more than 1 too high.
	                while (compare(prod, rem, prodL, remL) == 1) {
	                  n--;

	                  // Subtract divisor from product.
	                  subtract(prod, yL < prodL ? yz : yc, prodL, base);
	                  prodL = prod.length;
	                  cmp = 1;
	                }
	              } else {

	                // n is 0 or 1, cmp is -1.
	                // If n is 0, there is no need to compare yc and rem again below,
	                // so change cmp to 1 to avoid it.
	                // If n is 1, leave cmp as -1, so yc and rem are compared again.
	                if (n == 0) {

	                  // divisor < remainder, so n must be at least 1.
	                  cmp = n = 1;
	                }

	                // product = divisor
	                prod = yc.slice();
	                prodL = prod.length;
	              }

	              if (prodL < remL) prod = [0].concat(prod);

	              // Subtract product from remainder.
	              subtract(rem, prod, remL, base);
	              remL = rem.length;

	               // If product was < remainder.
	              if (cmp == -1) {

	                // Compare divisor and new remainder.
	                // If divisor < new remainder, subtract divisor from remainder.
	                // Trial digit n too low.
	                // n is 1 too low about 5% of the time, and very rarely 2 too low.
	                while (compare(yc, rem, yL, remL) < 1) {
	                  n++;

	                  // Subtract divisor from remainder.
	                  subtract(rem, yL < remL ? yz : yc, remL, base);
	                  remL = rem.length;
	                }
	              }
	            } else if (cmp === 0) {
	              n++;
	              rem = [0];
	            } // else cmp === 1 and n will be 0

	            // Add the next digit, n, to the result array.
	            qc[i++] = n;

	            // Update the remainder.
	            if (rem[0]) {
	              rem[remL++] = xc[xi] || 0;
	            } else {
	              rem = [xc[xi]];
	              remL = 1;
	            }
	          } while ((xi++ < xL || rem[0] != null) && s--);

	          more = rem[0] != null;

	          // Leading zero?
	          if (!qc[0]) qc.splice(0, 1);
	        }

	        if (base == BASE) {

	          // To calculate q.e, first get the number of digits of qc[0].
	          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);

	          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

	        // Caller is convertBase.
	        } else {
	          q.e = e;
	          q.r = +more;
	        }

	        return q;
	      };
	    })();


	    /*
	     * Return a string representing the value of BigNumber n in fixed-point or exponential
	     * notation rounded to the specified decimal places or significant digits.
	     *
	     * n: a BigNumber.
	     * i: the index of the last digit required (i.e. the digit that may be rounded up).
	     * rm: the rounding mode.
	     * id: 1 (toExponential) or 2 (toPrecision).
	     */
	    function format(n, i, rm, id) {
	      var c0, e, ne, len, str;

	      if (rm == null) rm = ROUNDING_MODE;
	      else intCheck(rm, 0, 8);

	      if (!n.c) return n.toString();

	      c0 = n.c[0];
	      ne = n.e;

	      if (i == null) {
	        str = coeffToString(n.c);
	        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)
	         ? toExponential(str, ne)
	         : toFixedPoint(str, ne, '0');
	      } else {
	        n = round(new BigNumber(n), i, rm);

	        // n.e may have changed if the value was rounded up.
	        e = n.e;

	        str = coeffToString(n.c);
	        len = str.length;

	        // toPrecision returns exponential notation if the number of significant digits
	        // specified is less than the number of digits necessary to represent the integer
	        // part of the value in fixed-point notation.

	        // Exponential notation.
	        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {

	          // Append zeros?
	          for (; len < i; str += '0', len++);
	          str = toExponential(str, e);

	        // Fixed-point notation.
	        } else {
	          i -= ne;
	          str = toFixedPoint(str, e, '0');

	          // Append zeros?
	          if (e + 1 > len) {
	            if (--i > 0) for (str += '.'; i--; str += '0');
	          } else {
	            i += e - len;
	            if (i > 0) {
	              if (e + 1 == len) str += '.';
	              for (; i--; str += '0');
	            }
	          }
	        }
	      }

	      return n.s < 0 && c0 ? '-' + str : str;
	    }


	    // Handle BigNumber.max and BigNumber.min.
	    function maxOrMin(args, method) {
	      var n,
	        i = 1,
	        m = new BigNumber(args[0]);

	      for (; i < args.length; i++) {
	        n = new BigNumber(args[i]);

	        // If any number is NaN, return NaN.
	        if (!n.s) {
	          m = n;
	          break;
	        } else if (method.call(m, n)) {
	          m = n;
	        }
	      }

	      return m;
	    }


	    /*
	     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
	     * Called by minus, plus and times.
	     */
	    function normalise(n, c, e) {
	      var i = 1,
	        j = c.length;

	       // Remove trailing zeros.
	      for (; !c[--j]; c.pop());

	      // Calculate the base 10 exponent. First get the number of digits of c[0].
	      for (j = c[0]; j >= 10; j /= 10, i++);

	      // Overflow?
	      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

	        // Infinity.
	        n.c = n.e = null;

	      // Underflow?
	      } else if (e < MIN_EXP) {

	        // Zero.
	        n.c = [n.e = 0];
	      } else {
	        n.e = e;
	        n.c = c;
	      }

	      return n;
	    }


	    // Handle values that fail the validity test in BigNumber.
	    parseNumeric = (function () {
	      var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
	        dotAfter = /^([^.]+)\.$/,
	        dotBefore = /^\.([^.]+)$/,
	        isInfinityOrNaN = /^-?(Infinity|NaN)$/,
	        whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

	      return function (x, str, isNum, b) {
	        var base,
	          s = isNum ? str : str.replace(whitespaceOrPlus, '');

	        // No exception on ±Infinity or NaN.
	        if (isInfinityOrNaN.test(s)) {
	          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
	        } else {
	          if (!isNum) {

	            // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
	            s = s.replace(basePrefix, function (m, p1, p2) {
	              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
	              return !b || b == base ? p1 : m;
	            });

	            if (b) {
	              base = b;

	              // E.g. '1.' to '1', '.1' to '0.1'
	              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
	            }

	            if (str != s) return new BigNumber(s, base);
	          }

	          // '[BigNumber Error] Not a number: {n}'
	          // '[BigNumber Error] Not a base {b} number: {n}'
	          if (BigNumber.DEBUG) {
	            throw Error
	              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
	          }

	          // NaN
	          x.s = null;
	        }

	        x.c = x.e = null;
	      }
	    })();


	    /*
	     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
	     * If r is truthy, it is known that there are more digits after the rounding digit.
	     */
	    function round(x, sd, rm, r) {
	      var d, i, j, k, n, ni, rd,
	        xc = x.c,
	        pows10 = POWS_TEN;

	      // if x is not Infinity or NaN...
	      if (xc) {

	        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
	        // n is a base 1e14 number, the value of the element of array x.c containing rd.
	        // ni is the index of n within x.c.
	        // d is the number of digits of n.
	        // i is the index of rd within n including leading zeros.
	        // j is the actual index of rd within n (if < 0, rd is a leading zero).
	        out: {

	          // Get the number of digits of the first element of xc.
	          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
	          i = sd - d;

	          // If the rounding digit is in the first element of xc...
	          if (i < 0) {
	            i += LOG_BASE;
	            j = sd;
	            n = xc[ni = 0];

	            // Get the rounding digit at index j of n.
	            rd = n / pows10[d - j - 1] % 10 | 0;
	          } else {
	            ni = mathceil((i + 1) / LOG_BASE);

	            if (ni >= xc.length) {

	              if (r) {

	                // Needed by sqrt.
	                for (; xc.length <= ni; xc.push(0));
	                n = rd = 0;
	                d = 1;
	                i %= LOG_BASE;
	                j = i - LOG_BASE + 1;
	              } else {
	                break out;
	              }
	            } else {
	              n = k = xc[ni];

	              // Get the number of digits of n.
	              for (d = 1; k >= 10; k /= 10, d++);

	              // Get the index of rd within n.
	              i %= LOG_BASE;

	              // Get the index of rd within n, adjusted for leading zeros.
	              // The number of leading zeros of n is given by LOG_BASE - d.
	              j = i - LOG_BASE + d;

	              // Get the rounding digit at index j of n.
	              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
	            }
	          }

	          r = r || sd < 0 ||

	          // Are there any non-zero digits after the rounding digit?
	          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
	          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
	           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

	          r = rm < 4
	           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
	           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

	            // Check whether the digit to the left of the rounding digit is odd.
	            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||
	             rm == (x.s < 0 ? 8 : 7));

	          if (sd < 1 || !xc[0]) {
	            xc.length = 0;

	            if (r) {

	              // Convert sd to decimal places.
	              sd -= x.e + 1;

	              // 1, 0.1, 0.01, 0.001, 0.0001 etc.
	              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
	              x.e = -sd || 0;
	            } else {

	              // Zero.
	              xc[0] = x.e = 0;
	            }

	            return x;
	          }

	          // Remove excess digits.
	          if (i == 0) {
	            xc.length = ni;
	            k = 1;
	            ni--;
	          } else {
	            xc.length = ni + 1;
	            k = pows10[LOG_BASE - i];

	            // E.g. 56700 becomes 56000 if 7 is the rounding digit.
	            // j > 0 means i > number of leading zeros of n.
	            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
	          }

	          // Round up?
	          if (r) {

	            for (; ;) {

	              // If the digit to be rounded up is in the first element of xc...
	              if (ni == 0) {

	                // i will be the length of xc[0] before k is added.
	                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
	                j = xc[0] += k;
	                for (k = 1; j >= 10; j /= 10, k++);

	                // if i != k the length has increased.
	                if (i != k) {
	                  x.e++;
	                  if (xc[0] == BASE) xc[0] = 1;
	                }

	                break;
	              } else {
	                xc[ni] += k;
	                if (xc[ni] != BASE) break;
	                xc[ni--] = 0;
	                k = 1;
	              }
	            }
	          }

	          // Remove trailing zeros.
	          for (i = xc.length; xc[--i] === 0; xc.pop());
	        }

	        // Overflow? Infinity.
	        if (x.e > MAX_EXP) {
	          x.c = x.e = null;

	        // Underflow? Zero.
	        } else if (x.e < MIN_EXP) {
	          x.c = [x.e = 0];
	        }
	      }

	      return x;
	    }


	    function valueOf(n) {
	      var str,
	        e = n.e;

	      if (e === null) return n.toString();

	      str = coeffToString(n.c);

	      str = e <= TO_EXP_NEG || e >= TO_EXP_POS
	        ? toExponential(str, e)
	        : toFixedPoint(str, e, '0');

	      return n.s < 0 ? '-' + str : str;
	    }


	    // PROTOTYPE/INSTANCE METHODS


	    /*
	     * Return a new BigNumber whose value is the absolute value of this BigNumber.
	     */
	    P.absoluteValue = P.abs = function () {
	      var x = new BigNumber(this);
	      if (x.s < 0) x.s = 1;
	      return x;
	    };


	    /*
	     * Return
	     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
	     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
	     *   0 if they have the same value,
	     *   or null if the value of either is NaN.
	     */
	    P.comparedTo = function (y, b) {
	      return compare(this, new BigNumber(y, b));
	    };


	    /*
	     * If dp is undefined or null or true or false, return the number of decimal places of the
	     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
	     *
	     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
	     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
	     * ROUNDING_MODE if rm is omitted.
	     *
	     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
	     */
	    P.decimalPlaces = P.dp = function (dp, rm) {
	      var c, n, v,
	        x = this;

	      if (dp != null) {
	        intCheck(dp, 0, MAX);
	        if (rm == null) rm = ROUNDING_MODE;
	        else intCheck(rm, 0, 8);

	        return round(new BigNumber(x), dp + x.e + 1, rm);
	      }

	      if (!(c = x.c)) return null;
	      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

	      // Subtract the number of trailing zeros of the last number.
	      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
	      if (n < 0) n = 0;

	      return n;
	    };


	    /*
	     *  n / 0 = I
	     *  n / N = N
	     *  n / I = 0
	     *  0 / n = 0
	     *  0 / 0 = N
	     *  0 / N = N
	     *  0 / I = 0
	     *  N / n = N
	     *  N / 0 = N
	     *  N / N = N
	     *  N / I = N
	     *  I / n = I
	     *  I / 0 = I
	     *  I / N = N
	     *  I / I = N
	     *
	     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
	     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
	     */
	    P.dividedBy = P.div = function (y, b) {
	      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
	    };


	    /*
	     * Return a new BigNumber whose value is the integer part of dividing the value of this
	     * BigNumber by the value of BigNumber(y, b).
	     */
	    P.dividedToIntegerBy = P.idiv = function (y, b) {
	      return div(this, new BigNumber(y, b), 0, 1);
	    };


	    /*
	     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
	     *
	     * If m is present, return the result modulo m.
	     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
	     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
	     *
	     * The modular power operation works efficiently when x, n, and m are integers, otherwise it
	     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
	     *
	     * n {number|string|BigNumber} The exponent. An integer.
	     * [m] {number|string|BigNumber} The modulus.
	     *
	     * '[BigNumber Error] Exponent not an integer: {n}'
	     */
	    P.exponentiatedBy = P.pow = function (n, m) {
	      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,
	        x = this;

	      n = new BigNumber(n);

	      // Allow NaN and ±Infinity, but not other non-integers.
	      if (n.c && !n.isInteger()) {
	        throw Error
	          (bignumberError + 'Exponent not an integer: ' + valueOf(n));
	      }

	      if (m != null) m = new BigNumber(m);

	      // Exponent of MAX_SAFE_INTEGER is 15.
	      nIsBig = n.e > 14;

	      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
	      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {

	        // The sign of the result of pow when x is negative depends on the evenness of n.
	        // If +n overflows to ±Infinity, the evenness of n would be not be known.
	        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));
	        return m ? y.mod(m) : y;
	      }

	      nIsNeg = n.s < 0;

	      if (m) {

	        // x % m returns NaN if abs(m) is zero, or m is NaN.
	        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);

	        isModExp = !nIsNeg && x.isInteger() && m.isInteger();

	        if (isModExp) x = x.mod(m);

	      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
	      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
	      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0
	        // [1, 240000000]
	        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7
	        // [80000000000000]  [99999750000000]
	        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {

	        // If x is negative and n is odd, k = -0, else k = 0.
	        k = x.s < 0 && isOdd(n) ? -0 : 0;

	        // If x >= 1, k = ±Infinity.
	        if (x.e > -1) k = 1 / k;

	        // If n is negative return ±0, else return ±Infinity.
	        return new BigNumber(nIsNeg ? 1 / k : k);

	      } else if (POW_PRECISION) {

	        // Truncating each coefficient array to a length of k after each multiplication
	        // equates to truncating significant digits to POW_PRECISION + [28, 41],
	        // i.e. there will be a minimum of 28 guard digits retained.
	        k = mathceil(POW_PRECISION / LOG_BASE + 2);
	      }

	      if (nIsBig) {
	        half = new BigNumber(0.5);
	        if (nIsNeg) n.s = 1;
	        nIsOdd = isOdd(n);
	      } else {
	        i = Math.abs(+valueOf(n));
	        nIsOdd = i % 2;
	      }

	      y = new BigNumber(ONE);

	      // Performs 54 loop iterations for n of 9007199254740991.
	      for (; ;) {

	        if (nIsOdd) {
	          y = y.times(x);
	          if (!y.c) break;

	          if (k) {
	            if (y.c.length > k) y.c.length = k;
	          } else if (isModExp) {
	            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
	          }
	        }

	        if (i) {
	          i = mathfloor(i / 2);
	          if (i === 0) break;
	          nIsOdd = i % 2;
	        } else {
	          n = n.times(half);
	          round(n, n.e + 1, 1);

	          if (n.e > 14) {
	            nIsOdd = isOdd(n);
	          } else {
	            i = +valueOf(n);
	            if (i === 0) break;
	            nIsOdd = i % 2;
	          }
	        }

	        x = x.times(x);

	        if (k) {
	          if (x.c && x.c.length > k) x.c.length = k;
	        } else if (isModExp) {
	          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
	        }
	      }

	      if (isModExp) return y;
	      if (nIsNeg) y = ONE.div(y);

	      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
	    };


	    /*
	     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
	     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
	     *
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
	     */
	    P.integerValue = function (rm) {
	      var n = new BigNumber(this);
	      if (rm == null) rm = ROUNDING_MODE;
	      else intCheck(rm, 0, 8);
	      return round(n, n.e + 1, rm);
	    };


	    /*
	     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
	     * otherwise return false.
	     */
	    P.isEqualTo = P.eq = function (y, b) {
	      return compare(this, new BigNumber(y, b)) === 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is a finite number, otherwise return false.
	     */
	    P.isFinite = function () {
	      return !!this.c;
	    };


	    /*
	     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
	     * otherwise return false.
	     */
	    P.isGreaterThan = P.gt = function (y, b) {
	      return compare(this, new BigNumber(y, b)) > 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is greater than or equal to the value of
	     * BigNumber(y, b), otherwise return false.
	     */
	    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
	      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;

	    };


	    /*
	     * Return true if the value of this BigNumber is an integer, otherwise return false.
	     */
	    P.isInteger = function () {
	      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
	    };


	    /*
	     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
	     * otherwise return false.
	     */
	    P.isLessThan = P.lt = function (y, b) {
	      return compare(this, new BigNumber(y, b)) < 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is less than or equal to the value of
	     * BigNumber(y, b), otherwise return false.
	     */
	    P.isLessThanOrEqualTo = P.lte = function (y, b) {
	      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is NaN, otherwise return false.
	     */
	    P.isNaN = function () {
	      return !this.s;
	    };


	    /*
	     * Return true if the value of this BigNumber is negative, otherwise return false.
	     */
	    P.isNegative = function () {
	      return this.s < 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is positive, otherwise return false.
	     */
	    P.isPositive = function () {
	      return this.s > 0;
	    };


	    /*
	     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
	     */
	    P.isZero = function () {
	      return !!this.c && this.c[0] == 0;
	    };


	    /*
	     *  n - 0 = n
	     *  n - N = N
	     *  n - I = -I
	     *  0 - n = -n
	     *  0 - 0 = 0
	     *  0 - N = N
	     *  0 - I = -I
	     *  N - n = N
	     *  N - 0 = N
	     *  N - N = N
	     *  N - I = N
	     *  I - n = I
	     *  I - 0 = I
	     *  I - N = N
	     *  I - I = N
	     *
	     * Return a new BigNumber whose value is the value of this BigNumber minus the value of
	     * BigNumber(y, b).
	     */
	    P.minus = function (y, b) {
	      var i, j, t, xLTy,
	        x = this,
	        a = x.s;

	      y = new BigNumber(y, b);
	      b = y.s;

	      // Either NaN?
	      if (!a || !b) return new BigNumber(NaN);

	      // Signs differ?
	      if (a != b) {
	        y.s = -b;
	        return x.plus(y);
	      }

	      var xe = x.e / LOG_BASE,
	        ye = y.e / LOG_BASE,
	        xc = x.c,
	        yc = y.c;

	      if (!xe || !ye) {

	        // Either Infinity?
	        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

	        // Either zero?
	        if (!xc[0] || !yc[0]) {

	          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
	          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

	           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
	           ROUNDING_MODE == 3 ? -0 : 0);
	        }
	      }

	      xe = bitFloor(xe);
	      ye = bitFloor(ye);
	      xc = xc.slice();

	      // Determine which is the bigger number.
	      if (a = xe - ye) {

	        if (xLTy = a < 0) {
	          a = -a;
	          t = xc;
	        } else {
	          ye = xe;
	          t = yc;
	        }

	        t.reverse();

	        // Prepend zeros to equalise exponents.
	        for (b = a; b--; t.push(0));
	        t.reverse();
	      } else {

	        // Exponents equal. Check digit by digit.
	        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

	        for (a = b = 0; b < j; b++) {

	          if (xc[b] != yc[b]) {
	            xLTy = xc[b] < yc[b];
	            break;
	          }
	        }
	      }

	      // x < y? Point xc to the array of the bigger number.
	      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

	      b = (j = yc.length) - (i = xc.length);

	      // Append zeros to xc if shorter.
	      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
	      if (b > 0) for (; b--; xc[i++] = 0);
	      b = BASE - 1;

	      // Subtract yc from xc.
	      for (; j > a;) {

	        if (xc[--j] < yc[j]) {
	          for (i = j; i && !xc[--i]; xc[i] = b);
	          --xc[i];
	          xc[j] += BASE;
	        }

	        xc[j] -= yc[j];
	      }

	      // Remove leading zeros and adjust exponent accordingly.
	      for (; xc[0] == 0; xc.splice(0, 1), --ye);

	      // Zero?
	      if (!xc[0]) {

	        // Following IEEE 754 (2008) 6.3,
	        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
	        y.s = ROUNDING_MODE == 3 ? -1 : 1;
	        y.c = [y.e = 0];
	        return y;
	      }

	      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
	      // for finite x and y.
	      return normalise(y, xc, ye);
	    };


	    /*
	     *   n % 0 =  N
	     *   n % N =  N
	     *   n % I =  n
	     *   0 % n =  0
	     *  -0 % n = -0
	     *   0 % 0 =  N
	     *   0 % N =  N
	     *   0 % I =  0
	     *   N % n =  N
	     *   N % 0 =  N
	     *   N % N =  N
	     *   N % I =  N
	     *   I % n =  N
	     *   I % 0 =  N
	     *   I % N =  N
	     *   I % I =  N
	     *
	     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
	     * BigNumber(y, b). The result depends on the value of MODULO_MODE.
	     */
	    P.modulo = P.mod = function (y, b) {
	      var q, s,
	        x = this;

	      y = new BigNumber(y, b);

	      // Return NaN if x is Infinity or NaN, or y is NaN or zero.
	      if (!x.c || !y.s || y.c && !y.c[0]) {
	        return new BigNumber(NaN);

	      // Return x if y is Infinity or x is zero.
	      } else if (!y.c || x.c && !x.c[0]) {
	        return new BigNumber(x);
	      }

	      if (MODULO_MODE == 9) {

	        // Euclidian division: q = sign(y) * floor(x / abs(y))
	        // r = x - qy    where  0 <= r < abs(y)
	        s = y.s;
	        y.s = 1;
	        q = div(x, y, 0, 3);
	        y.s = s;
	        q.s *= s;
	      } else {
	        q = div(x, y, 0, MODULO_MODE);
	      }

	      y = x.minus(q.times(y));

	      // To match JavaScript %, ensure sign of zero is sign of dividend.
	      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;

	      return y;
	    };


	    /*
	     *  n * 0 = 0
	     *  n * N = N
	     *  n * I = I
	     *  0 * n = 0
	     *  0 * 0 = 0
	     *  0 * N = N
	     *  0 * I = N
	     *  N * n = N
	     *  N * 0 = N
	     *  N * N = N
	     *  N * I = N
	     *  I * n = I
	     *  I * 0 = N
	     *  I * N = N
	     *  I * I = I
	     *
	     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
	     * of BigNumber(y, b).
	     */
	    P.multipliedBy = P.times = function (y, b) {
	      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
	        base, sqrtBase,
	        x = this,
	        xc = x.c,
	        yc = (y = new BigNumber(y, b)).c;

	      // Either NaN, ±Infinity or ±0?
	      if (!xc || !yc || !xc[0] || !yc[0]) {

	        // Return NaN if either is NaN, or one is 0 and the other is Infinity.
	        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
	          y.c = y.e = y.s = null;
	        } else {
	          y.s *= x.s;

	          // Return ±Infinity if either is ±Infinity.
	          if (!xc || !yc) {
	            y.c = y.e = null;

	          // Return ±0 if either is ±0.
	          } else {
	            y.c = [0];
	            y.e = 0;
	          }
	        }

	        return y;
	      }

	      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
	      y.s *= x.s;
	      xcL = xc.length;
	      ycL = yc.length;

	      // Ensure xc points to longer array and xcL to its length.
	      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

	      // Initialise the result array with zeros.
	      for (i = xcL + ycL, zc = []; i--; zc.push(0));

	      base = BASE;
	      sqrtBase = SQRT_BASE;

	      for (i = ycL; --i >= 0;) {
	        c = 0;
	        ylo = yc[i] % sqrtBase;
	        yhi = yc[i] / sqrtBase | 0;

	        for (k = xcL, j = i + k; j > i;) {
	          xlo = xc[--k] % sqrtBase;
	          xhi = xc[k] / sqrtBase | 0;
	          m = yhi * xlo + xhi * ylo;
	          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;
	          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
	          zc[j--] = xlo % base;
	        }

	        zc[j] = c;
	      }

	      if (c) {
	        ++e;
	      } else {
	        zc.splice(0, 1);
	      }

	      return normalise(y, zc, e);
	    };


	    /*
	     * Return a new BigNumber whose value is the value of this BigNumber negated,
	     * i.e. multiplied by -1.
	     */
	    P.negated = function () {
	      var x = new BigNumber(this);
	      x.s = -x.s || null;
	      return x;
	    };


	    /*
	     *  n + 0 = n
	     *  n + N = N
	     *  n + I = I
	     *  0 + n = n
	     *  0 + 0 = 0
	     *  0 + N = N
	     *  0 + I = I
	     *  N + n = N
	     *  N + 0 = N
	     *  N + N = N
	     *  N + I = N
	     *  I + n = I
	     *  I + 0 = I
	     *  I + N = N
	     *  I + I = I
	     *
	     * Return a new BigNumber whose value is the value of this BigNumber plus the value of
	     * BigNumber(y, b).
	     */
	    P.plus = function (y, b) {
	      var t,
	        x = this,
	        a = x.s;

	      y = new BigNumber(y, b);
	      b = y.s;

	      // Either NaN?
	      if (!a || !b) return new BigNumber(NaN);

	      // Signs differ?
	       if (a != b) {
	        y.s = -b;
	        return x.minus(y);
	      }

	      var xe = x.e / LOG_BASE,
	        ye = y.e / LOG_BASE,
	        xc = x.c,
	        yc = y.c;

	      if (!xe || !ye) {

	        // Return ±Infinity if either ±Infinity.
	        if (!xc || !yc) return new BigNumber(a / 0);

	        // Either zero?
	        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
	        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
	      }

	      xe = bitFloor(xe);
	      ye = bitFloor(ye);
	      xc = xc.slice();

	      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
	      if (a = xe - ye) {
	        if (a > 0) {
	          ye = xe;
	          t = yc;
	        } else {
	          a = -a;
	          t = xc;
	        }

	        t.reverse();
	        for (; a--; t.push(0));
	        t.reverse();
	      }

	      a = xc.length;
	      b = yc.length;

	      // Point xc to the longer array, and b to the shorter length.
	      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;

	      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
	      for (a = 0; b;) {
	        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
	        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
	      }

	      if (a) {
	        xc = [a].concat(xc);
	        ++ye;
	      }

	      // No need to check for zero, as +x + +y != 0 && -x + -y != 0
	      // ye = MAX_EXP + 1 possible
	      return normalise(y, xc, ye);
	    };


	    /*
	     * If sd is undefined or null or true or false, return the number of significant digits of
	     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
	     * If sd is true include integer-part trailing zeros in the count.
	     *
	     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
	     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
	     * ROUNDING_MODE if rm is omitted.
	     *
	     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
	     *                     boolean: whether to count integer-part trailing zeros: true or false.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
	     */
	    P.precision = P.sd = function (sd, rm) {
	      var c, n, v,
	        x = this;

	      if (sd != null && sd !== !!sd) {
	        intCheck(sd, 1, MAX);
	        if (rm == null) rm = ROUNDING_MODE;
	        else intCheck(rm, 0, 8);

	        return round(new BigNumber(x), sd, rm);
	      }

	      if (!(c = x.c)) return null;
	      v = c.length - 1;
	      n = v * LOG_BASE + 1;

	      if (v = c[v]) {

	        // Subtract the number of trailing zeros of the last element.
	        for (; v % 10 == 0; v /= 10, n--);

	        // Add the number of digits of the first element.
	        for (v = c[0]; v >= 10; v /= 10, n++);
	      }

	      if (sd && x.e + 1 > n) n = x.e + 1;

	      return n;
	    };


	    /*
	     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
	     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
	     *
	     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
	     */
	    P.shiftedBy = function (k) {
	      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
	      return this.times('1e' + k);
	    };


	    /*
	     *  sqrt(-n) =  N
	     *  sqrt(N) =  N
	     *  sqrt(-I) =  N
	     *  sqrt(I) =  I
	     *  sqrt(0) =  0
	     *  sqrt(-0) = -0
	     *
	     * Return a new BigNumber whose value is the square root of the value of this BigNumber,
	     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
	     */
	    P.squareRoot = P.sqrt = function () {
	      var m, n, r, rep, t,
	        x = this,
	        c = x.c,
	        s = x.s,
	        e = x.e,
	        dp = DECIMAL_PLACES + 4,
	        half = new BigNumber('0.5');

	      // Negative/NaN/Infinity/zero?
	      if (s !== 1 || !c || !c[0]) {
	        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
	      }

	      // Initial estimate.
	      s = Math.sqrt(+valueOf(x));

	      // Math.sqrt underflow/overflow?
	      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
	      if (s == 0 || s == 1 / 0) {
	        n = coeffToString(c);
	        if ((n.length + e) % 2 == 0) n += '0';
	        s = Math.sqrt(+n);
	        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

	        if (s == 1 / 0) {
	          n = '5e' + e;
	        } else {
	          n = s.toExponential();
	          n = n.slice(0, n.indexOf('e') + 1) + e;
	        }

	        r = new BigNumber(n);
	      } else {
	        r = new BigNumber(s + '');
	      }

	      // Check for zero.
	      // r could be zero if MIN_EXP is changed after the this value was created.
	      // This would cause a division by zero (x/t) and hence Infinity below, which would cause
	      // coeffToString to throw.
	      if (r.c[0]) {
	        e = r.e;
	        s = e + dp;
	        if (s < 3) s = 0;

	        // Newton-Raphson iteration.
	        for (; ;) {
	          t = r;
	          r = half.times(t.plus(div(x, t, dp, 1)));

	          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {

	            // The exponent of r may here be one less than the final result exponent,
	            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
	            // are indexed correctly.
	            if (r.e < e) --s;
	            n = n.slice(s - 3, s + 1);

	            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
	            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
	            // iteration.
	            if (n == '9999' || !rep && n == '4999') {

	              // On the first iteration only, check to see if rounding up gives the
	              // exact result as the nines may infinitely repeat.
	              if (!rep) {
	                round(t, t.e + DECIMAL_PLACES + 2, 0);

	                if (t.times(t).eq(x)) {
	                  r = t;
	                  break;
	                }
	              }

	              dp += 4;
	              s += 4;
	              rep = 1;
	            } else {

	              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
	              // result. If not, then there are further digits and m will be truthy.
	              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

	                // Truncate to the first rounding digit.
	                round(r, r.e + DECIMAL_PLACES + 2, 1);
	                m = !r.times(r).eq(x);
	              }

	              break;
	            }
	          }
	        }
	      }

	      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
	    };


	    /*
	     * Return a string representing the value of this BigNumber in exponential notation and
	     * rounded using ROUNDING_MODE to dp fixed decimal places.
	     *
	     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
	     */
	    P.toExponential = function (dp, rm) {
	      if (dp != null) {
	        intCheck(dp, 0, MAX);
	        dp++;
	      }
	      return format(this, dp, rm, 1);
	    };


	    /*
	     * Return a string representing the value of this BigNumber in fixed-point notation rounding
	     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
	     *
	     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
	     * but e.g. (-0.00001).toFixed(0) is '-0'.
	     *
	     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
	     */
	    P.toFixed = function (dp, rm) {
	      if (dp != null) {
	        intCheck(dp, 0, MAX);
	        dp = dp + this.e + 1;
	      }
	      return format(this, dp, rm);
	    };


	    /*
	     * Return a string representing the value of this BigNumber in fixed-point notation rounded
	     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
	     * of the format or FORMAT object (see BigNumber.set).
	     *
	     * The formatting object may contain some or all of the properties shown below.
	     *
	     * FORMAT = {
	     *   prefix: '',
	     *   groupSize: 3,
	     *   secondaryGroupSize: 0,
	     *   groupSeparator: ',',
	     *   decimalSeparator: '.',
	     *   fractionGroupSize: 0,
	     *   fractionGroupSeparator: '\xA0',      // non-breaking space
	     *   suffix: ''
	     * };
	     *
	     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     * [format] {object} Formatting options. See FORMAT pbject above.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
	     * '[BigNumber Error] Argument not an object: {format}'
	     */
	    P.toFormat = function (dp, rm, format) {
	      var str,
	        x = this;

	      if (format == null) {
	        if (dp != null && rm && typeof rm == 'object') {
	          format = rm;
	          rm = null;
	        } else if (dp && typeof dp == 'object') {
	          format = dp;
	          dp = rm = null;
	        } else {
	          format = FORMAT;
	        }
	      } else if (typeof format != 'object') {
	        throw Error
	          (bignumberError + 'Argument not an object: ' + format);
	      }

	      str = x.toFixed(dp, rm);

	      if (x.c) {
	        var i,
	          arr = str.split('.'),
	          g1 = +format.groupSize,
	          g2 = +format.secondaryGroupSize,
	          groupSeparator = format.groupSeparator || '',
	          intPart = arr[0],
	          fractionPart = arr[1],
	          isNeg = x.s < 0,
	          intDigits = isNeg ? intPart.slice(1) : intPart,
	          len = intDigits.length;

	        if (g2) i = g1, g1 = g2, g2 = i, len -= i;

	        if (g1 > 0 && len > 0) {
	          i = len % g1 || g1;
	          intPart = intDigits.substr(0, i);
	          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
	          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
	          if (isNeg) intPart = '-' + intPart;
	        }

	        str = fractionPart
	         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)
	          ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'),
	           '$&' + (format.fractionGroupSeparator || ''))
	          : fractionPart)
	         : intPart;
	      }

	      return (format.prefix || '') + str + (format.suffix || '');
	    };


	    /*
	     * Return an array of two BigNumbers representing the value of this BigNumber as a simple
	     * fraction with an integer numerator and an integer denominator.
	     * The denominator will be a positive non-zero value less than or equal to the specified
	     * maximum denominator. If a maximum denominator is not specified, the denominator will be
	     * the lowest value necessary to represent the number exactly.
	     *
	     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
	     *
	     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
	     */
	    P.toFraction = function (md) {
	      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,
	        x = this,
	        xc = x.c;

	      if (md != null) {
	        n = new BigNumber(md);

	        // Throw if md is less than one or is not an integer, unless it is Infinity.
	        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
	          throw Error
	            (bignumberError + 'Argument ' +
	              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));
	        }
	      }

	      if (!xc) return new BigNumber(x);

	      d = new BigNumber(ONE);
	      n1 = d0 = new BigNumber(ONE);
	      d1 = n0 = new BigNumber(ONE);
	      s = coeffToString(xc);

	      // Determine initial denominator.
	      // d is a power of 10 and the minimum max denominator that specifies the value exactly.
	      e = d.e = s.length - x.e - 1;
	      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
	      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;

	      exp = MAX_EXP;
	      MAX_EXP = 1 / 0;
	      n = new BigNumber(s);

	      // n0 = d1 = 0
	      n0.c[0] = 0;

	      for (; ;)  {
	        q = div(n, d, 0, 1);
	        d2 = d0.plus(q.times(d1));
	        if (d2.comparedTo(md) == 1) break;
	        d0 = d1;
	        d1 = d2;
	        n1 = n0.plus(q.times(d2 = n1));
	        n0 = d2;
	        d = n.minus(q.times(d2 = d));
	        n = d2;
	      }

	      d2 = div(md.minus(d0), d1, 0, 1);
	      n0 = n0.plus(d2.times(n1));
	      d0 = d0.plus(d2.times(d1));
	      n0.s = n1.s = x.s;
	      e = e * 2;

	      // Determine which fraction is closer to x, n0/d0 or n1/d1
	      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
	          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];

	      MAX_EXP = exp;

	      return r;
	    };


	    /*
	     * Return the value of this BigNumber converted to a number primitive.
	     */
	    P.toNumber = function () {
	      return +valueOf(this);
	    };


	    /*
	     * Return a string representing the value of this BigNumber rounded to sd significant digits
	     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
	     * necessary to represent the integer part of the value in fixed-point notation, then use
	     * exponential notation.
	     *
	     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
	     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	     *
	     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
	     */
	    P.toPrecision = function (sd, rm) {
	      if (sd != null) intCheck(sd, 1, MAX);
	      return format(this, sd, rm, 2);
	    };


	    /*
	     * Return a string representing the value of this BigNumber in base b, or base 10 if b is
	     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
	     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
	     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
	     * TO_EXP_NEG, return exponential notation.
	     *
	     * [b] {number} Integer, 2 to ALPHABET.length inclusive.
	     *
	     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
	     */
	    P.toString = function (b) {
	      var str,
	        n = this,
	        s = n.s,
	        e = n.e;

	      // Infinity or NaN?
	      if (e === null) {
	        if (s) {
	          str = 'Infinity';
	          if (s < 0) str = '-' + str;
	        } else {
	          str = 'NaN';
	        }
	      } else {
	        if (b == null) {
	          str = e <= TO_EXP_NEG || e >= TO_EXP_POS
	           ? toExponential(coeffToString(n.c), e)
	           : toFixedPoint(coeffToString(n.c), e, '0');
	        } else if (b === 10 && alphabetHasNormalDecimalDigits) {
	          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
	          str = toFixedPoint(coeffToString(n.c), n.e, '0');
	        } else {
	          intCheck(b, 2, ALPHABET.length, 'Base');
	          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);
	        }

	        if (s < 0 && n.c[0]) str = '-' + str;
	      }

	      return str;
	    };


	    /*
	     * Return as toString, but do not accept a base argument, and include the minus sign for
	     * negative zero.
	     */
	    P.valueOf = P.toJSON = function () {
	      return valueOf(this);
	    };


	    P._isBigNumber = true;

	    if (configObject != null) BigNumber.set(configObject);

	    return BigNumber;
	  }


	  // PRIVATE HELPER FUNCTIONS

	  // These functions don't need access to variables,
	  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.


	  function bitFloor(n) {
	    var i = n | 0;
	    return n > 0 || n === i ? i : i - 1;
	  }


	  // Return a coefficient array as a string of base 10 digits.
	  function coeffToString(a) {
	    var s, z,
	      i = 1,
	      j = a.length,
	      r = a[0] + '';

	    for (; i < j;) {
	      s = a[i++] + '';
	      z = LOG_BASE - s.length;
	      for (; z--; s = '0' + s);
	      r += s;
	    }

	    // Determine trailing zeros.
	    for (j = r.length; r.charCodeAt(--j) === 48;);

	    return r.slice(0, j + 1 || 1);
	  }


	  // Compare the value of BigNumbers x and y.
	  function compare(x, y) {
	    var a, b,
	      xc = x.c,
	      yc = y.c,
	      i = x.s,
	      j = y.s,
	      k = x.e,
	      l = y.e;

	    // Either NaN?
	    if (!i || !j) return null;

	    a = xc && !xc[0];
	    b = yc && !yc[0];

	    // Either zero?
	    if (a || b) return a ? b ? 0 : -j : i;

	    // Signs differ?
	    if (i != j) return i;

	    a = i < 0;
	    b = k == l;

	    // Either Infinity?
	    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

	    // Compare exponents.
	    if (!b) return k > l ^ a ? 1 : -1;

	    j = (k = xc.length) < (l = yc.length) ? k : l;

	    // Compare digit by digit.
	    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

	    // Compare lengths.
	    return k == l ? 0 : k > l ^ a ? 1 : -1;
	  }


	  /*
	   * Check that n is a primitive number, an integer, and in range, otherwise throw.
	   */
	  function intCheck(n, min, max, name) {
	    if (n < min || n > max || n !== mathfloor(n)) {
	      throw Error
	       (bignumberError + (name || 'Argument') + (typeof n == 'number'
	         ? n < min || n > max ? ' out of range: ' : ' not an integer: '
	         : ' not a primitive number: ') + String(n));
	    }
	  }


	  // Assumes finite n.
	  function isOdd(n) {
	    var k = n.c.length - 1;
	    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
	  }


	  function toExponential(str, e) {
	    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +
	     (e < 0 ? 'e' : 'e+') + e;
	  }


	  function toFixedPoint(str, e, z) {
	    var len, zs;

	    // Negative exponent?
	    if (e < 0) {

	      // Prepend zeros.
	      for (zs = z + '.'; ++e; zs += z);
	      str = zs + str;

	    // Positive exponent
	    } else {
	      len = str.length;

	      // Append zeros.
	      if (++e > len) {
	        for (zs = z, e -= len; --e; zs += z);
	        str += zs;
	      } else if (e < len) {
	        str = str.slice(0, e) + '.' + str.slice(e);
	      }
	    }

	    return str;
	  }


	  // EXPORT


	  BigNumber = clone();
	  BigNumber['default'] = BigNumber.BigNumber = BigNumber;

	  // AMD.
	  if (module.exports) {
	    module.exports = BigNumber;

	  // Browser.
	  } else {
	    if (!globalObject) {
	      globalObject = typeof self != 'undefined' && self ? self : window;
	    }

	    globalObject.BigNumber = BigNumber;
	  }
	})(commonjsGlobal);
	}(bignumber));

	var movingAverage = {exports: {}};

	(function (module, exports) {

	const exp = Math.exp;

	module.exports =
	function MovingAverage (timespan) {
	  if (typeof timespan !== 'number') { throw new Error('must provide a timespan to the moving average constructor') }

	  if (timespan <= 0) { throw new Error('must provide a timespan > 0 to the moving average constructor') }

	  let ma;     // moving average
	  let v = 0;  // variance
	  let d = 0;  // deviation
	  let f = 0;  // forecast

	  let previousTime;

	  let ret = {};

	  function alpha (t, pt) {
	    return 1 - (exp(-(t - pt) / timespan))
	  }

	  ret.push =
	  function push (time, value) {
	    if (previousTime) {
	      // calculate moving average
	      const a = alpha(time, previousTime);
	      const diff = value - ma;
	      const incr = a * diff;
	      ma = a * value + (1 - a) * ma;
	      // calculate variance & deviation
	      v = (1 - a) * (v + diff * incr);
	      d = Math.sqrt(v);
	      // calculate forecast
	      f = ma + a * diff;
	    } else {
	      ma = value;
	    }
	    previousTime = time;
	  };

	  // Exponential Moving Average

	  ret.movingAverage =
	  function movingAverage () {
	    return ma
	  };

	  // Variance
	  ret.variance =
	  function variance () {
	    return v
	  };

	  ret.deviation =
	  function deviation () {
	    return d
	  };

	  ret.forecast =
	  function forecast () {
	    return f
	  };

	  return ret
	};
	}(movingAverage));

	var MovingAverage$1 = movingAverage.exports;

	const { EventEmitter: EventEmitter$2 } = require$$1$5;
	const { BigNumber: Big } = bignumber.exports;
	const MovingAverage = movingAverage.exports;
	const retimer = retimer_1;

	/**
	 * @typedef {import('@vascosantos/moving-average').IMovingAverage} IMovingAverage
	 * @typedef {import('bignumber.js').BigNumber} Big
	 */

	class Stats$2 extends EventEmitter$2 {
	  /**
	   * A queue based manager for stat processing
	   *
	   * @class
	   * @param {string[]} initialCounters
	   * @param {any} options
	   */
	  constructor (initialCounters, options) {
	    super();

	    this._options = options;
	    this._queue = [];

	    /** @type {{ dataReceived: Big, dataSent: Big }} */
	    this._stats = {
	      dataReceived: Big(0),
	      dataSent: Big(0)
	    };

	    this._frequencyLastTime = Date.now();
	    this._frequencyAccumulators = {};

	    /** @type {{ dataReceived: IMovingAverage[], dataSent: IMovingAverage[] }} */
	    this._movingAverages = {};

	    this._update = this._update.bind(this);

	    const intervals = this._options.movingAverageIntervals;

	    for (let i = 0; i < initialCounters.length; i++) {
	      const key = initialCounters[i];
	      this._stats[key] = Big(0);
	      this._movingAverages[key] = {};
	      for (let k = 0; k < intervals.length; k++) {
	        const interval = intervals[k];
	        const ma = this._movingAverages[key][interval] = MovingAverage(interval);
	        ma.push(this._frequencyLastTime, 0);
	      }
	    }
	  }

	  /**
	   * Initializes the internal timer if there are items in the queue. This
	   * should only need to be called if `Stats.stop` was previously called, as
	   * `Stats.push` will also start the processing.
	   *
	   * @returns {void}
	   */
	  start () {
	    if (this._queue.length) {
	      this._resetComputeTimeout();
	    }
	  }

	  /**
	   * Stops processing and computing of stats by clearing the internal
	   * timer.
	   *
	   * @returns {void}
	   */
	  stop () {
	    if (this._timeout) {
	      this._timeout.clear();
	      this._timeout = null;
	    }
	  }

	  /**
	   * Returns a clone of the current stats.
	   */
	  get snapshot () {
	    return Object.assign({}, this._stats)
	  }

	  /**
	   * Returns a clone of the internal movingAverages
	   */
	  get movingAverages () {
	    return Object.assign({}, this._movingAverages)
	  }

	  /**
	   * Returns a plain JSON object of the stats
	   *
	   * @returns {*}
	   */
	  toJSON () {
	    const snapshot = this.snapshot;
	    const movingAverages = this.movingAverages;
	    const data = {
	      dataReceived: snapshot.dataReceived.toString(),
	      dataSent: snapshot.dataSent.toString(),
	      movingAverages: {}
	    };

	    const counters = Object.keys(movingAverages);
	    for (const key of counters) {
	      data.movingAverages[key] = {};
	      for (const interval of Object.keys(movingAverages[key])) {
	        data.movingAverages[key][interval] = movingAverages[key][interval].movingAverage();
	      }
	    }

	    return data
	  }

	  /**
	   * Pushes the given operation data to the queue, along with the
	   * current Timestamp, then resets the update timer.
	   *
	   * @param {string} counter
	   * @param {number} inc
	   * @returns {void}
	   */
	  push (counter, inc) {
	    this._queue.push([counter, inc, Date.now()]);
	    this._resetComputeTimeout();
	  }

	  /**
	   * Resets the timeout for triggering updates.
	   *
	   * @private
	   * @returns {void}
	   */
	  _resetComputeTimeout () {
	    this._timeout = retimer(this._update, this._nextTimeout());
	  }

	  /**
	   * Calculates and returns the timeout for the next update based on
	   * the urgency of the update.
	   *
	   * @private
	   * @returns {number}
	   */
	  _nextTimeout () {
	    // calculate the need for an update, depending on the queue length
	    const urgency = this._queue.length / this._options.computeThrottleMaxQueueSize;
	    const timeout = Math.max(this._options.computeThrottleTimeout * (1 - urgency), 0);
	    return timeout
	  }

	  /**
	   * If there are items in the queue, they will will be processed and
	   * the frequency for all items will be updated based on the Timestamp
	   * of the last item in the queue. The `update` event will also be emitted
	   * with the latest stats.
	   *
	   * If there are no items in the queue, no action is taken.
	   *
	   * @private
	   * @returns {void}
	   */
	  _update () {
	    this._timeout = null;
	    if (this._queue.length) {
	      let last;
	      for (last of this._queue) {
	        this._applyOp(last);
	      }
	      this._queue = [];

	      this._updateFrequency(last[2]); // contains timestamp of last op

	      this.emit('update', this._stats);
	    }
	  }

	  /**
	   * For each key in the stats, the frequency and moving averages
	   * will be updated via Stats._updateFrequencyFor based on the time
	   * difference between calls to this method.
	   *
	   * @private
	   * @param {Timestamp} latestTime
	   * @returns {void}
	   */
	  _updateFrequency (latestTime) {
	    const timeDiff = latestTime - this._frequencyLastTime;

	    Object.keys(this._stats).forEach((key) => {
	      this._updateFrequencyFor(key, timeDiff, latestTime);
	    });

	    this._frequencyLastTime = latestTime;
	  }

	  /**
	   * Updates the `movingAverages` for the given `key` and also
	   * resets the `frequencyAccumulator` for the `key`.
	   *
	   * @private
	   * @param {string} key
	   * @param {number} timeDiffMS - Time in milliseconds
	   * @param {Timestamp} latestTime - Time in ticks
	   * @returns {void}
	   */
	  _updateFrequencyFor (key, timeDiffMS, latestTime) {
	    const count = this._frequencyAccumulators[key] || 0;
	    this._frequencyAccumulators[key] = 0;
	    // if `timeDiff` is zero, `hz` becomes Infinity, so we fallback to 1ms
	    const safeTimeDiff = timeDiffMS || 1;
	    const hz = (count / safeTimeDiff) * 1000;

	    let movingAverages = this._movingAverages[key];
	    if (!movingAverages) {
	      movingAverages = this._movingAverages[key] = {};
	    }

	    const intervals = this._options.movingAverageIntervals;

	    for (let i = 0; i < intervals.length; i++) {
	      const movingAverageInterval = intervals[i];
	      let movingAverage = movingAverages[movingAverageInterval];
	      if (!movingAverage) {
	        movingAverage = movingAverages[movingAverageInterval] = MovingAverage(movingAverageInterval);
	      }
	      movingAverage.push(latestTime, hz);
	    }
	  }

	  /**
	   * For the given operation, `op`, the stats and `frequencyAccumulator`
	   * will be updated or initialized if they don't already exist.
	   *
	   * @private
	   * @param {{string, number}[]} op
	   * @throws {InvalidNumber}
	   * @returns {void}
	   */
	  _applyOp (op) {
	    const key = op[0];
	    const inc = op[1];

	    if (typeof inc !== 'number') {
	      throw new Error(`invalid increment number: ${inc}`)
	    }

	    let n;

	    if (!Object.prototype.hasOwnProperty.call(this._stats, key)) {
	      n = this._stats[key] = Big(0);
	    } else {
	      n = this._stats[key];
	    }
	    this._stats[key] = n.plus(inc);

	    if (!this._frequencyAccumulators[key]) {
	      this._frequencyAccumulators[key] = 0;
	    }
	    this._frequencyAccumulators[key] += inc;
	  }
	}

	var stats = Stats$2;

	const mergeOptions$3 = mergeOptions$k;
	const { pipe: pipe$6 } = itPipe.exports;
	const { tap } = dist.exports;
	const oldPeerLRU = oldPeers;
	const { METRICS: defaultOptions$2 } = constants$4;
	const Stats$1 = stats;

	const initialCounters = [
	  'dataReceived',
	  'dataSent'
	];

	const directionToEvent = {
	  in: 'dataReceived',
	  out: 'dataSent'
	};

	/**
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('libp2p-interfaces/src/transport/types').MultiaddrConnection} MultiaddrConnection
	 */

	/**
	 * @typedef MetricsOptions
	 * @property {number} [computeThrottleMaxQueueSize = defaultOptions.computeThrottleMaxQueueSize]
	 * @property {number} [computeThrottleTimeout = defaultOptions.computeThrottleTimeout]
	 * @property {number[]} [movingAverageIntervals = defaultOptions.movingAverageIntervals]
	 * @property {number} [maxOldPeersRetention = defaultOptions.maxOldPeersRetention]
	 */

	class Metrics$1 {
	  /**
	   * @class
	   * @param {MetricsOptions} options
	   */
	  constructor (options) {
	    this._options = mergeOptions$3(defaultOptions$2, options);
	    this._globalStats = new Stats$1(initialCounters, this._options);
	    this._peerStats = new Map();
	    this._protocolStats = new Map();
	    this._oldPeers = oldPeerLRU(this._options.maxOldPeersRetention);
	    this._running = false;
	    this._onMessage = this._onMessage.bind(this);
	    this._systems = new Map();
	  }

	  /**
	   * Must be called for stats to saved. Any data pushed for tracking
	   * will be ignored.
	   */
	  start () {
	    this._running = true;
	  }

	  /**
	   * Stops all averages timers and prevents new data from being tracked.
	   * Once `stop` is called, `start` must be called to resume stats tracking.
	   */
	  stop () {
	    this._running = false;
	    this._globalStats.stop();
	    for (const stats of this._peerStats.values()) {
	      stats.stop();
	    }
	    for (const stats of this._protocolStats.values()) {
	      stats.stop();
	    }
	  }

	  /**
	   * Gets the global `Stats` object
	   *
	   * @returns {Stats}
	   */
	  get global () {
	    return this._globalStats
	  }

	  /**
	   * Returns a list of `PeerId` strings currently being tracked
	   *
	   * @returns {string[]}
	   */
	  get peers () {
	    return Array.from(this._peerStats.keys())
	  }

	  /**
	   * @returns {Map<string, Map<string, Map<string, any>>>}
	   */
	  getComponentMetrics () {
	    return this._systems
	  }

	  updateComponentMetric ({ system = 'libp2p', component, metric, value }) {
	    if (!this._systems.has(system)) {
	      this._systems.set(system, new Map());
	    }

	    const systemMetrics = this._systems.get(system);

	    if (!systemMetrics.has(component)) {
	      systemMetrics.set(component, new Map());
	    }

	    const componentMetrics = systemMetrics.get(component);

	    componentMetrics.set(metric, value);
	  }

	  /**
	   * Returns the `Stats` object for the given `PeerId` whether it
	   * is a live peer, or in the disconnected peer LRU cache.
	   *
	   * @param {PeerId} peerId
	   * @returns {Stats}
	   */
	  forPeer (peerId) {
	    const idString = peerId.toB58String();
	    return this._peerStats.get(idString) || this._oldPeers.get(idString)
	  }

	  /**
	   * Returns a list of all protocol strings currently being tracked.
	   *
	   * @returns {string[]}
	   */
	  get protocols () {
	    return Array.from(this._protocolStats.keys())
	  }

	  /**
	   * Returns the `Stats` object for the given `protocol`.
	   *
	   * @param {string} protocol
	   * @returns {Stats}
	   */
	  forProtocol (protocol) {
	    return this._protocolStats.get(protocol)
	  }

	  /**
	   * Should be called when all connections to a given peer
	   * have closed. The `Stats` collection for the peer will
	   * be stopped and moved to an LRU for temporary retention.
	   *
	   * @param {PeerId} peerId
	   */
	  onPeerDisconnected (peerId) {
	    const idString = peerId.toB58String();
	    const peerStats = this._peerStats.get(idString);
	    if (peerStats) {
	      peerStats.stop();
	      this._peerStats.delete(idString);
	      this._oldPeers.set(idString, peerStats);
	    }
	  }

	  /**
	   * Takes the metadata for a message and tracks it in the
	   * appropriate categories. If the protocol is present, protocol
	   * stats will also be tracked.
	   *
	   * @private
	   * @param {object} params
	   * @param {PeerId} params.remotePeer - Remote peer
	   * @param {string} [params.protocol] - Protocol string the stream is running
	   * @param {string} params.direction - One of ['in','out']
	   * @param {number} params.dataLength - Size of the message
	   * @returns {void}
	   */
	  _onMessage ({ remotePeer, protocol, direction, dataLength }) {
	    if (!this._running) return

	    const key = directionToEvent[direction];

	    let peerStats = this.forPeer(remotePeer);
	    if (!peerStats) {
	      peerStats = new Stats$1(initialCounters, this._options);
	      this._peerStats.set(remotePeer.toB58String(), peerStats);
	    }

	    // Peer and global stats
	    peerStats.push(key, dataLength);
	    this._globalStats.push(key, dataLength);

	    // Protocol specific stats
	    if (protocol) {
	      let protocolStats = this.forProtocol(protocol);
	      if (!protocolStats) {
	        protocolStats = new Stats$1(initialCounters, this._options);
	        this._protocolStats.set(protocol, protocolStats);
	      }
	      protocolStats.push(key, dataLength);
	    }
	  }

	  /**
	   * Replaces the `PeerId` string with the given `peerId`.
	   * If stats are already being tracked for the given `peerId`, the
	   * placeholder stats will be merged with the existing stats.
	   *
	   * @param {PeerId} placeholder - A peerId string
	   * @param {PeerId} peerId
	   * @returns {void}
	   */
	  updatePlaceholder (placeholder, peerId) {
	    if (!this._running) return
	    const placeholderStats = this.forPeer(placeholder);
	    const peerIdString = peerId.toB58String();
	    const existingStats = this.forPeer(peerId);
	    let mergedStats = placeholderStats;

	    // If we already have stats, merge the two
	    if (existingStats) {
	      // If existing, merge
	      mergedStats = Metrics$1.mergeStats(existingStats, mergedStats);
	      // Attempt to delete from the old peers list just in case it was tracked there
	      this._oldPeers.delete(peerIdString);
	    }

	    this._peerStats.delete(placeholder.toB58String());
	    this._peerStats.set(peerIdString, mergedStats);
	    mergedStats.start();
	  }

	  /**
	   * Tracks data running through a given Duplex Iterable `stream`. If
	   * the `peerId` is not provided, a placeholder string will be created and
	   * returned. This allows lazy tracking of a peer when the peer is not yet known.
	   * When the `PeerId` is known, `Metrics.updatePlaceholder` should be called
	   * with the placeholder string returned from here, and the known `PeerId`.
	   *
	   * @param {Object} options
	   * @param {MultiaddrConnection} options.stream - A duplex iterable stream
	   * @param {PeerId} [options.remotePeer] - The id of the remote peer that's connected
	   * @param {string} [options.protocol] - The protocol the stream is running
	   * @returns {MultiaddrConnection} The peerId string or placeholder string
	   */
	  trackStream ({ stream, remotePeer, protocol }) {
	    const metrics = this;
	    const _source = stream.source;
	    stream.source = tap(chunk => metrics._onMessage({
	      remotePeer,
	      protocol,
	      direction: 'in',
	      dataLength: chunk.length
	    }))(_source);

	    const _sink = stream.sink;
	    stream.sink = source => {
	      return pipe$6(
	        source,
	        tap(chunk => metrics._onMessage({
	          remotePeer,
	          protocol,
	          direction: 'out',
	          dataLength: chunk.length
	        })),
	        _sink
	      )
	    };

	    return stream
	  }

	  /**
	   * Merges `other` into `target`. `target` will be modified
	   * and returned.
	   *
	   * @param {Stats} target
	   * @param {Stats} other
	   * @returns {Stats}
	   */
	  static mergeStats (target, other) {
	    target.stop();
	    other.stop();

	    // Merge queues
	    target._queue = [...target._queue, ...other._queue];

	    // TODO: how to merge moving averages?
	    return target
	  }
	}

	var metrics = Metrics$1;

	var src$3 = {};

	const BufferList$1 = BufferList_1;
	const lp$2 = src$i;
	const { pipe: pipe$5 } = itPipe.exports;
	const errCode$6 = errCode$q;
	const { fromString: uint8ArrayFromString$1 } = require$$5$3;
	const first = itFirst;
	const { source } = abortableIterator.exports;

	/**
	 * @typedef {import('it-pushable').Pushable<Uint8Array | BufferList>} Pushable
	 * @typedef {import('./types').AbortOptions} AbortOptions
	 */

	const NewLine = uint8ArrayFromString$1('\n');

	/**
	 * @param {Uint8Array | BufferList | string} buffer
	 * @returns {Uint8Array}
	 */
	function encode$1 (buffer) {
	  // @ts-expect-error BufferList accepts Buffer[], we pass Uint8Array[]
	  return lp$2.encode.single(new BufferList$1([buffer, NewLine]))
	}

	/**
	 * `write` encodes and writes a single buffer
	 *
	 * @param {Pushable} writer
	 * @param {Uint8Array | BufferList | string} buffer
	 */
	function write (writer, buffer) {
	  writer.push(encode$1(buffer));
	}

	/**
	 * `writeAll` behaves like `write`, except it encodes an array of items as a single write
	 *
	 * @param {Pushable} writer
	 * @param {(Uint8Array | BufferList | string)[]} buffers
	 */
	async function writeAll (writer, buffers) {
	  // @ts-expect-error BufferList cannot append Uint8Arrays
	  writer.push(buffers.reduce((bl, buffer) => bl.append(encode$1(buffer)), new BufferList$1()));
	}

	/**
	 * @param {AsyncGenerator<Uint8Array | BufferList, void, number>} reader
	 * @param {AbortOptions} [options]
	 */
	async function read$1 (reader, options) {
	  let byteLength = 1; // Read single byte chunks until the length is known
	  const varByteSource = { // No return impl - we want the reader to remain readable
	    [Symbol.asyncIterator] () { return this },
	    next: () => reader.next(byteLength)
	  };

	  /** @type {AsyncIterable<Uint8Array | BufferList>} */
	  let input = varByteSource;

	  // If we have been passed an abort signal, wrap the input source in an abortable
	  // iterator that will throw if the operation is aborted
	  if (options && options.signal) {
	    input = source(varByteSource, options.signal);
	  }

	  // Once the length has been parsed, read chunk for that length
	  const onLength = (/** @type {number} */ l) => { byteLength = l; };

	  /** @type {BufferList} */
	  const buf = await pipe$5(
	    input,
	    lp$2.decode({ onLength }),
	    first
	  );

	  if (buf.get(buf.length - 1) !== NewLine[0]) {
	    throw errCode$6(new Error('missing newline'), 'ERR_INVALID_MULTISTREAM_SELECT_MESSAGE')
	  }

	  return buf.shallowSlice(0, -1) // Remove newline
	}

	var multistream$3 = {
	  encode: encode$1,
	  write,
	  writeAll,
	  read: read$1
	};

	const debug$e = browser$a.exports;
	const errCode$5 = errCode$q;
	const multistream$2 = multistream$3;
	// @ts-expect-error no types
	const handshake$2 = src$a;

	const log$g = Object.assign(debug$e('mss:select'), {
	  error: debug$e('mss:select:error')
	});

	/**
	 * @typedef {import('bl/BufferList')} BufferList
	 * @typedef {import('./types').DuplexStream<Uint8Array | BufferList>} DuplexStream
	 * @typedef {import('./types').AbortOptions} AbortOptions
	 */

	/**
	 * @param {DuplexStream} stream
	 * @param {string | string[]} protocols
	 * @param {string} [protocolId]
	 * @param {AbortOptions} [options]
	 */
	var select$1 = async function select (stream, protocols, protocolId, options) {
	  protocols = Array.isArray(protocols) ? [...protocols] : [protocols];
	  const { reader, writer, rest, stream: shakeStream } = handshake$2(stream);

	  const protocol = protocols.shift();

	  if (!protocol) {
	    throw new Error('At least one protocol must be specified')
	  }

	  if (protocolId) {
	    log$g('select: write ["%s", "%s"]', protocolId, protocol);
	    multistream$2.writeAll(writer, [protocolId, protocol]);
	  } else {
	    log$g('select: write "%s"', protocol);
	    multistream$2.write(writer, protocol);
	  }

	  let response = (await multistream$2.read(reader, options)).toString();
	  log$g('select: read "%s"', response);

	  // Read the protocol response if we got the protocolId in return
	  if (response === protocolId) {
	    response = (await multistream$2.read(reader, options)).toString();
	    log$g('select: read "%s"', response);
	  }

	  // We're done
	  if (response === protocol) {
	    rest();
	    return { stream: shakeStream, protocol }
	  }

	  // We haven't gotten a valid ack, try the other protocols
	  for (const protocol of protocols) {
	    log$g('select: write "%s"', protocol);
	    multistream$2.write(writer, protocol);
	    const response = (await multistream$2.read(reader, options)).toString();
	    log$g('select: read "%s" for "%s"', response, protocol);

	    if (response === protocol) {
	      rest(); // End our writer so others can start writing to stream
	      return { stream: shakeStream, protocol }
	    }
	  }

	  rest();
	  throw errCode$5(new Error('protocol selection failed'), 'ERR_UNSUPPORTED_PROTOCOL')
	};

	var constants$2 = {};

	constants$2.PROTOCOL_ID = '/multistream/1.0.0';

	const debug$d = browser$a.exports;
	const BufferList = BufferList_1;
	const multistream$1 = multistream$3;
	// @ts-expect-error no types
	const handshake$1 = src$a;
	const { PROTOCOL_ID: PROTOCOL_ID$1 } = constants$2;

	const log$f = Object.assign(debug$d('mss:handle'), {
	  error: debug$d('mss:handle:error')
	});

	/**
	 * @typedef {import('./types').DuplexStream<Uint8Array | BufferList>} DuplexStream
	 * @typedef {import('./types').AbortOptions} AbortOptions
	 */

	/**
	 * @param {DuplexStream} stream
	 * @param {string | string[]} protocols
	 * @param {AbortOptions} [options]
	 */
	var handle$1 = async function handle (stream, protocols, options) {
	  protocols = Array.isArray(protocols) ? protocols : [protocols];
	  const { writer, reader, rest, stream: shakeStream } = handshake$1(stream);

	  while (true) {
	    const protocol = (await multistream$1.read(reader, options)).toString();
	    log$f('read "%s"', protocol);

	    if (protocol === PROTOCOL_ID$1) {
	      log$f('respond with "%s" for "%s"', PROTOCOL_ID$1, protocol);
	      multistream$1.write(writer, PROTOCOL_ID$1);
	      continue
	    }

	    if (protocols.includes(protocol)) {
	      multistream$1.write(writer, protocol);
	      log$f('respond with "%s" for "%s"', protocol, protocol);
	      rest();
	      return { stream: shakeStream, protocol }
	    }

	    if (protocol === 'ls') {
	      // <varint-msg-len><varint-proto-name-len><proto-name>\n<varint-proto-name-len><proto-name>\n\n
	      multistream$1.write(writer, new BufferList(
	        // @ts-expect-error BufferList does not accept Uint8Array[] as a constructor arg
	        protocols.map(p => multistream$1.encode(p))
	      ));
	      log$f('respond with "%s" for %s', protocols, protocol);
	      continue
	    }

	    multistream$1.write(writer, 'na');
	    log$f('respond with "na" for "%s"', protocol);
	  }
	};

	// @ts-expect-error no types
	const Reader = itReader;
	const debug$c = browser$a.exports;
	const multistream = multistream$3;
	// @ts-expect-error no types
	const handshake = src$a;
	const lp$1 = src$i;
	const { pipe: pipe$4 } = itPipe.exports;

	const log$e = Object.assign(debug$c('mss:ls'), {
	  error: debug$c('mss:ls:error')
	});

	/**
	 * @typedef {import('bl/BufferList')} BufferList
	 * @typedef {import('./types').DuplexStream<Uint8Array | BufferList>} DuplexStream
	 * @typedef {import('./types').AbortOptions} AbortOptions
	 */

	/**
	 * @param {DuplexStream} stream
	 * @param {AbortOptions} [options]
	 */
	var ls$1 = async function ls (stream, options) {
	  const { reader, writer, rest, stream: shakeStream } = handshake(stream);

	  log$e('write "ls"');
	  multistream.write(writer, 'ls');
	  rest();

	  // Next message from remote will be (e.g. for 2 protocols):
	  // <varint-msg-len><varint-proto-name-len><proto-name>\n<varint-proto-name-len><proto-name>\n
	  const res = await multistream.read(reader, options);

	  // After reading response we have:
	  // <varint-proto-name-len><proto-name>\n<varint-proto-name-len><proto-name>\n
	  const protocolsReader = Reader([res]);

	  /**
	   * @type {string[]}
	   */
	  const protocols = [];

	  // Decode each of the protocols from the reader
	  await pipe$4(
	    protocolsReader,
	    lp$1.decode(),
	    async (/** @type {AsyncIterable<BufferList>} */ source) => {
	      for await (const protocol of source) {
	        // Remove the newline
	        protocols.push(protocol.shallowSlice(0, -1).toString());
	      }
	    }
	  );

	  /** @type {{ stream: DuplexStream, protocols: string[] }} */
	  const output = { stream: shakeStream, protocols };

	  return output
	};

	const select = select$1;
	const handle = handle$1;
	const ls = ls$1;
	const { PROTOCOL_ID } = constants$2;

	src$3.PROTOCOL_ID = PROTOCOL_ID;

	/**
	 * @typedef {import('bl/BufferList')} BufferList
	 * @typedef {import('./types').DuplexStream<Uint8Array | BufferList>} DuplexStream
	 * @typedef {import('./types').AbortOptions} AbortOptions
	 */

	class MultistreamSelect {
	  /**
	   * @param {DuplexStream} stream
	   */
	  constructor (stream) {
	    this._stream = stream;
	    this._shaken = false;
	  }

	  /**
	   * Perform the multistream-select handshake
	   *
	   * @param {AbortOptions} [options]
	   */
	  async _handshake (options) {
	    if (this._shaken) return
	    const { stream } = await select(this._stream, PROTOCOL_ID, undefined, options);
	    this._stream = stream;
	    this._shaken = true;
	  }
	}

	class Dialer$1 extends MultistreamSelect {
	  /**
	   * @param {string | string[]} protocols
	   * @param {AbortOptions} [options]
	   */
	  select (protocols, options) {
	    return select(this._stream, protocols, this._shaken ? undefined : PROTOCOL_ID, options)
	  }

	  /**
	   * @param {AbortOptions} [options]
	   */
	  async ls (options) {
	    await this._handshake(options);
	    /** @type {{ stream: DuplexStream, protocols: string[] }} */
	    const res = await ls(this._stream, options);
	    const { stream, protocols } = res;
	    this._stream = stream;
	    return protocols
	  }
	}

	src$3.Dialer = Dialer$1;

	class Listener extends MultistreamSelect {
	  /**
	   * @param {string | string[]} protocols
	   * @param {AbortOptions} [options]
	   */
	  handle (protocols, options) {
	    return handle(this._stream, protocols, options)
	  }
	}

	src$3.Listener = Listener;

	var connection$1 = {};

	const STATUS = {
	  OPEN: /** @type {'open'} */('open'),
	  CLOSING: /** @type {'closing'} */('closing'),
	  CLOSED: /** @type {'closed'} */('closed')
	};
	var status = STATUS;

	const PeerId$9 = src$o.exports;
	const { Multiaddr: Multiaddr$5 } = src$s;
	const errCode$4 = errCode$q;
	const { OPEN, CLOSING, CLOSED } = status;

	const connectionSymbol = Symbol.for('@libp2p/interface-connection/connection');

	/**
	 * @typedef {import('../stream-muxer/types').MuxedStream} MuxedStream
	 * @typedef {import('./status').Status} Status
	 */

	/**
	 * @typedef {Object} Timeline
	 * @property {number} open - connection opening timestamp.
	 * @property {number} [upgraded] - connection upgraded timestamp.
	 * @property {number} [close]
	 *
	 * @typedef {Object} ConectionStat
	 * @property {'inbound' | 'outbound'} direction - connection establishment direction
	 * @property {Timeline} timeline - connection relevant events timestamp.
	 * @property {string} [multiplexer] - connection multiplexing identifier.
	 * @property {string} [encryption] - connection encryption method identifier.
	 *
	 * @typedef {(protocols: string|string[]) => Promise<{stream: MuxedStream, protocol: string}>} CreatedMuxedStream
	 *
	 * @typedef {Object} ConnectionOptions
	 * @property {Multiaddr} [localAddr] - local multiaddr of the connection if known.
	 * @property {Multiaddr} remoteAddr - remote multiaddr of the connection.
	 * @property {PeerId} localPeer - local peer-id.
	 * @property {PeerId} remotePeer - remote peer-id.
	 * @property {CreatedMuxedStream} newStream - new stream muxer function.
	 * @property {() => Promise<void>} close - close raw connection function.
	 * @property {() => MuxedStream[]} getStreams - get streams from muxer function.
	 * @property {ConectionStat} stat - metadata of the connection.
	 *
	 * @typedef {Object} StreamData
	 * @property {string} protocol - the protocol used by the stream
	 * @property {Object} [metadata] - metadata of the stream
	 */

	/**
	 * An implementation of the js-libp2p connection.
	 * Any libp2p transport should use an upgrader to return this connection.
	 */
	class Connection$1 {
	  /**
	   * An implementation of the js-libp2p connection.
	   * Any libp2p transport should use an upgrader to return this connection.
	   *
	   * @class
	   * @param {ConnectionOptions} options
	   */
	  constructor ({ localAddr, remoteAddr, localPeer, remotePeer, newStream, close, getStreams, stat }) {
	    validateArgs(localAddr, localPeer, remotePeer, newStream, close, getStreams, stat);

	    /**
	     * Connection identifier.
	     */
	    this.id = (parseInt(String(Math.random() * 1e9))).toString(36) + Date.now();

	    /**
	     * Observed multiaddr of the local peer
	     */
	    this.localAddr = localAddr;

	    /**
	     * Observed multiaddr of the remote peer
	     */
	    this.remoteAddr = remoteAddr;

	    /**
	     * Local peer id.
	     */
	    this.localPeer = localPeer;

	    /**
	     * Remote peer id.
	     */
	    this.remotePeer = remotePeer;

	    /**
	     * Connection metadata.
	     *
	     * @type {ConectionStat & {status: Status}}
	     */
	    this._stat = {
	      ...stat,
	      status: OPEN
	    };

	    /**
	     * Reference to the new stream function of the multiplexer
	     */
	    this._newStream = newStream;

	    /**
	     * Reference to the close function of the raw connection
	     */
	    this._close = close;

	    /**
	     * Reference to the getStreams function of the muxer
	     */
	    this._getStreams = getStreams;

	    /**
	     * Connection streams registry
	     */
	    this.registry = new Map();

	    /**
	     * User provided tags
	     *
	     * @type {string[]}
	     */
	    this.tags = [];
	  }

	  get [Symbol.toStringTag] () {
	    return 'Connection'
	  }

	  get [connectionSymbol] () {
	    return true
	  }

	  /**
	   * Checks if the given value is a `Connection` instance.
	   *
	   * @param {any} other
	   * @returns {other is Connection}
	   */
	  static isConnection (other) {
	    return Boolean(other && other[connectionSymbol])
	  }

	  /**
	   * Get connection metadata
	   *
	   * @this {Connection}
	   */
	  get stat () {
	    return this._stat
	  }

	  /**
	   * Get all the streams of the muxer.
	   *
	   * @this {Connection}
	   */
	  get streams () {
	    return this._getStreams()
	  }

	  /**
	   * Create a new stream from this connection
	   *
	   * @param {string|string[]} protocols - intended protocol for the stream
	   * @returns {Promise<{stream: MuxedStream, protocol: string}>} with muxed+multistream-selected stream and selected protocol
	   */
	  async newStream (protocols) {
	    if (this.stat.status === CLOSING) {
	      throw errCode$4(new Error('the connection is being closed'), 'ERR_CONNECTION_BEING_CLOSED')
	    }

	    if (this.stat.status === CLOSED) {
	      throw errCode$4(new Error('the connection is closed'), 'ERR_CONNECTION_CLOSED')
	    }

	    if (!Array.isArray(protocols)) protocols = [protocols];

	    const { stream, protocol } = await this._newStream(protocols);

	    this.addStream(stream, { protocol });

	    return {
	      stream,
	      protocol
	    }
	  }

	  /**
	   * Add a stream when it is opened to the registry.
	   *
	   * @param {MuxedStream} muxedStream - a muxed stream
	   * @param {StreamData} data - the stream data to be registered
	   * @returns {void}
	   */
	  addStream (muxedStream, { protocol, metadata = {} }) {
	    // Add metadata for the stream
	    this.registry.set(muxedStream.id, {
	      protocol,
	      ...metadata
	    });
	  }

	  /**
	   * Remove stream registry after it is closed.
	   *
	   * @param {string} id - identifier of the stream
	   */
	  removeStream (id) {
	    this.registry.delete(id);
	  }

	  /**
	   * Close the connection.
	   *
	   * @returns {Promise<void>}
	   */
	  async close () {
	    if (this.stat.status === CLOSED) {
	      return
	    }

	    if (this._closing) {
	      return this._closing
	    }

	    this.stat.status = CLOSING;

	    // Close raw connection
	    this._closing = await this._close();

	    this._stat.timeline.close = Date.now();
	    this.stat.status = CLOSED;
	  }
	}

	var connection = Connection$1;

	/**
	 * @param {Multiaddr|undefined} localAddr
	 * @param {PeerId} localPeer
	 * @param {PeerId} remotePeer
	 * @param {(protocols: string | string[]) => Promise<{ stream: import("../stream-muxer/types").MuxedStream; protocol: string; }>} newStream
	 * @param {() => Promise<void>} close
	 * @param {() => import("../stream-muxer/types").MuxedStream[]} getStreams
	 * @param {{ direction: any; timeline: any; multiplexer?: string | undefined; encryption?: string | undefined; }} stat
	 */
	function validateArgs (localAddr, localPeer, remotePeer, newStream, close, getStreams, stat) {
	  if (localAddr && !Multiaddr$5.isMultiaddr(localAddr)) {
	    throw errCode$4(new Error('localAddr must be an instance of multiaddr'), 'ERR_INVALID_PARAMETERS')
	  }

	  if (!PeerId$9.isPeerId(localPeer)) {
	    throw errCode$4(new Error('localPeer must be an instance of peer-id'), 'ERR_INVALID_PARAMETERS')
	  }

	  if (!PeerId$9.isPeerId(remotePeer)) {
	    throw errCode$4(new Error('remotePeer must be an instance of peer-id'), 'ERR_INVALID_PARAMETERS')
	  }

	  if (typeof newStream !== 'function') {
	    throw errCode$4(new Error('new stream must be a function'), 'ERR_INVALID_PARAMETERS')
	  }

	  if (typeof close !== 'function') {
	    throw errCode$4(new Error('close must be a function'), 'ERR_INVALID_PARAMETERS')
	  }

	  if (typeof getStreams !== 'function') {
	    throw errCode$4(new Error('getStreams must be a function'), 'ERR_INVALID_PARAMETERS')
	  }

	  if (!stat) {
	    throw errCode$4(new Error('connection metadata object must be provided'), 'ERR_INVALID_PARAMETERS')
	  }

	  if (stat.direction !== 'inbound' && stat.direction !== 'outbound') {
	    throw errCode$4(new Error('direction must be "inbound" or "outbound"'), 'ERR_INVALID_PARAMETERS')
	  }

	  if (!stat.timeline) {
	    throw errCode$4(new Error('connection timeline object must be provided in the stat object'), 'ERR_INVALID_PARAMETERS')
	  }

	  if (!stat.timeline.open) {
	    throw errCode$4(new Error('connection open timestamp must be provided'), 'ERR_INVALID_PARAMETERS')
	  }

	  if (!stat.timeline.upgraded) {
	    throw errCode$4(new Error('connection upgraded timestamp must be provided'), 'ERR_INVALID_PARAMETERS')
	  }
	}

	connection$1.Connection = connection;

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	var build = function mutableProxyFactory(defaultTarget) {
	  var mutableHandler = void 0;
	  var mutableTarget = void 0;

	  function setTarget(target) {
	    if (!(target instanceof Object)) {
	      throw new Error('Target "' + target + '" is not an object');
	    }
	    mutableTarget = target;
	  }

	  function setHandler(handler) {
	    Object.keys(handler).forEach(function (key) {
	      var value = handler[key];

	      if (typeof value !== 'function') {
	        throw new Error('Trap "' + key + ': ' + value + '" is not a function');
	      }

	      if (!Reflect[key]) {
	        throw new Error('Trap "' + key + ': ' + value + '" is not a valid trap');
	      }
	    });
	    mutableHandler = handler;
	  }
	  setTarget(function () {});

	  if (defaultTarget) {
	    setTarget(defaultTarget);
	  }
	  setHandler(Reflect);

	  // Dynamically forward all the traps to the associated methods on the mutable handler
	  var handler = new Proxy({}, {
	    get: function get(target, property) {
	      return function () {
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	          args[_key] = arguments[_key];
	        }

	        return mutableHandler[property].apply(null, [mutableTarget].concat(_toConsumableArray(args.slice(1))));
	      };
	    }
	  });

	  return {
	    setTarget: setTarget,
	    setHandler: setHandler,
	    getTarget: function getTarget() {
	      return mutableTarget;
	    },
	    getHandler: function getHandler() {
	      return mutableHandler;
	    },

	    proxy: new Proxy(mutableTarget, handler)
	  };
	};

	const debug$b = browser$a.exports;
	const log$d = Object.assign(debug$b('libp2p:upgrader'), {
	  error: debug$b('libp2p:upgrader:err')
	});
	const errCode$3 = errCode$q;
	const Multistream = src$3;
	const { Connection } = connection$1;
	const PeerId$8 = src$o.exports;
	const { pipe: pipe$3 } = itPipe.exports;
	// @ts-ignore mutable-proxy does not export types
	const mutableProxy = build;

	const { codes: codes$8 } = errors$3;

	/**
	 * @typedef {import('libp2p-interfaces/src/transport/types').MultiaddrConnection} MultiaddrConnection
	 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxerFactory} MuxerFactory
	 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').Muxer} Muxer
	 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream
	 * @typedef {import('libp2p-interfaces/src/crypto/types').Crypto} Crypto
	 * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection
	 * @typedef {import('multiaddr').Multiaddr} Multiaddr
	 * @typedef {import('./types').ConnectionGater} ConnectionGater
	 */

	/**
	 * @typedef CryptoResult
	 * @property {MultiaddrConnection} conn A duplex iterable
	 * @property {PeerId} remotePeer
	 * @property {string} protocol
	 */

	class Upgrader$1 {
	  /**
	   * @param {object} options
	   * @param {PeerId} options.localPeer
	   * @param {ConnectionGater} options.connectionGater
	   *
	   * @param {import('./metrics')} [options.metrics]
	   * @param {Map<string, Crypto>} [options.cryptos]
	   * @param {Map<string, MuxerFactory>} [options.muxers]
	   * @param {(connection: Connection) => void} options.onConnection - Called when a connection is upgraded
	   * @param {(connection: Connection) => void} options.onConnectionEnd
	   */
	  constructor ({
	    localPeer,
	    metrics,
	    connectionGater,
	    cryptos = new Map(),
	    muxers = new Map(),
	    onConnectionEnd = () => {},
	    onConnection = () => {}
	  }) {
	    this.connectionGater = connectionGater;
	    this.localPeer = localPeer;
	    this.metrics = metrics;
	    this.cryptos = cryptos;
	    this.muxers = muxers;
	    /** @type {import("./pnet") | null} */
	    this.protector = null;
	    this.protocols = new Map();
	    this.onConnection = onConnection;
	    this.onConnectionEnd = onConnectionEnd;
	  }

	  /**
	   * Upgrades an inbound connection
	   *
	   * @async
	   * @param {MultiaddrConnection} maConn
	   * @returns {Promise<Connection>}
	   */
	  async upgradeInbound (maConn) {
	    let encryptedConn;
	    let remotePeer;
	    let upgradedConn;
	    let Muxer;
	    let cryptoProtocol;
	    let setPeer;
	    let proxyPeer;

	    if (await this.connectionGater.denyInboundConnection(maConn)) {
	      throw errCode$3(new Error('The multiaddr connection is blocked by gater.acceptConnection'), codes$8.ERR_CONNECTION_INTERCEPTED)
	    }

	    if (this.metrics) {
	      ({ setTarget: setPeer, proxy: proxyPeer } = mutableProxy());
	      const idString = (Math.random() * 1e9).toString(36) + Date.now();
	      setPeer({ toB58String: () => idString });
	      maConn = this.metrics.trackStream({ stream: maConn, remotePeer: proxyPeer });
	    }

	    log$d('Starting the inbound connection upgrade');

	    // Protect
	    let protectedConn = maConn;
	    if (this.protector) {
	      protectedConn = await this.protector.protect(maConn);
	    }

	    try {
	      // Encrypt the connection
	      ({
	        conn: encryptedConn,
	        remotePeer,
	        protocol: cryptoProtocol
	      } = await this._encryptInbound(this.localPeer, protectedConn, this.cryptos));

	      if (await this.connectionGater.denyInboundEncryptedConnection(remotePeer, encryptedConn)) {
	        throw errCode$3(new Error('The multiaddr connection is blocked by gater.acceptEncryptedConnection'), codes$8.ERR_CONNECTION_INTERCEPTED)
	      }

	      // Multiplex the connection
	      if (this.muxers.size) {
	        ({ stream: upgradedConn, Muxer } = await this._multiplexInbound(encryptedConn, this.muxers));
	      } else {
	        upgradedConn = encryptedConn;
	      }
	    } catch (/** @type {any} */ err) {
	      log$d.error('Failed to upgrade inbound connection', err);
	      await maConn.close(err);
	      throw err
	    }

	    if (await this.connectionGater.denyInboundUpgradedConnection(remotePeer, encryptedConn)) {
	      throw errCode$3(new Error('The multiaddr connection is blocked by gater.acceptEncryptedConnection'), codes$8.ERR_CONNECTION_INTERCEPTED)
	    }

	    if (this.metrics) {
	      this.metrics.updatePlaceholder(proxyPeer, remotePeer);
	      setPeer(remotePeer);
	    }

	    log$d('Successfully upgraded inbound connection');

	    return this._createConnection({
	      cryptoProtocol,
	      direction: 'inbound',
	      maConn,
	      upgradedConn,
	      Muxer,
	      remotePeer
	    })
	  }

	  /**
	   * Upgrades an outbound connection
	   *
	   * @async
	   * @param {MultiaddrConnection} maConn
	   * @returns {Promise<Connection>}
	   */
	  async upgradeOutbound (maConn) {
	    const idStr = maConn.remoteAddr.getPeerId();
	    if (!idStr) {
	      throw errCode$3(new Error('outbound connection must have a peer id'), codes$8.ERR_INVALID_MULTIADDR)
	    }

	    const remotePeerId = PeerId$8.createFromB58String(idStr);

	    if (await this.connectionGater.denyOutboundConnection(remotePeerId, maConn)) {
	      throw errCode$3(new Error('The multiaddr connection is blocked by connectionGater.denyOutboundConnection'), codes$8.ERR_CONNECTION_INTERCEPTED)
	    }

	    let encryptedConn;
	    let remotePeer;
	    let upgradedConn;
	    let cryptoProtocol;
	    let Muxer;
	    let setPeer;
	    let proxyPeer;

	    if (this.metrics) {
	      ({ setTarget: setPeer, proxy: proxyPeer } = mutableProxy());
	      const idString = (Math.random() * 1e9).toString(36) + Date.now();
	      setPeer({ toB58String: () => idString });
	      maConn = this.metrics.trackStream({ stream: maConn, remotePeer: proxyPeer });
	    }

	    log$d('Starting the outbound connection upgrade');

	    // Protect
	    let protectedConn = maConn;
	    if (this.protector) {
	      protectedConn = await this.protector.protect(maConn);
	    }

	    try {
	      // Encrypt the connection
	      ({
	        conn: encryptedConn,
	        remotePeer,
	        protocol: cryptoProtocol
	      } = await this._encryptOutbound(this.localPeer, protectedConn, remotePeerId, this.cryptos));

	      if (await this.connectionGater.denyOutboundEncryptedConnection(remotePeer, encryptedConn)) {
	        throw errCode$3(new Error('The multiaddr connection is blocked by gater.acceptEncryptedConnection'), codes$8.ERR_CONNECTION_INTERCEPTED)
	      }

	      // Multiplex the connection
	      if (this.muxers.size) {
	        ({ stream: upgradedConn, Muxer } = await this._multiplexOutbound(encryptedConn, this.muxers));
	      } else {
	        upgradedConn = encryptedConn;
	      }
	    } catch (/** @type {any} */ err) {
	      log$d.error('Failed to upgrade outbound connection', err);
	      await maConn.close(err);
	      throw err
	    }

	    if (await this.connectionGater.denyOutboundUpgradedConnection(remotePeer, encryptedConn)) {
	      throw errCode$3(new Error('The multiaddr connection is blocked by gater.acceptEncryptedConnection'), codes$8.ERR_CONNECTION_INTERCEPTED)
	    }

	    if (this.metrics) {
	      this.metrics.updatePlaceholder(proxyPeer, remotePeer);
	      setPeer(remotePeer);
	    }

	    log$d('Successfully upgraded outbound connection');

	    return this._createConnection({
	      cryptoProtocol,
	      direction: 'outbound',
	      maConn,
	      upgradedConn,
	      Muxer,
	      remotePeer
	    })
	  }

	  /**
	   * A convenience method for generating a new `Connection`
	   *
	   * @private
	   * @param {object} options
	   * @param {string} options.cryptoProtocol - The crypto protocol that was negotiated
	   * @param {'inbound' | 'outbound'} options.direction - One of ['inbound', 'outbound']
	   * @param {MultiaddrConnection} options.maConn - The transport layer connection
	   * @param {MuxedStream | MultiaddrConnection} options.upgradedConn - A duplex connection returned from multiplexer and/or crypto selection
	   * @param {MuxerFactory} [options.Muxer] - The muxer to be used for muxing
	   * @param {PeerId} options.remotePeer - The peer the connection is with
	   * @returns {Connection}
	   */
	  _createConnection ({
	    cryptoProtocol,
	    direction,
	    maConn,
	    upgradedConn,
	    Muxer,
	    remotePeer
	  }) {
	    /** @type {import("libp2p-interfaces/src/stream-muxer/types").Muxer} */
	    let muxer;
	    /** @type {import("libp2p-interfaces/src/connection/connection").CreatedMuxedStream | undefined} */
	    let newStream;
	    /** @type {Connection} */
	    let connection; // eslint-disable-line prefer-const

	    if (Muxer) {
	      // Create the muxer
	      muxer = new Muxer({
	        // Run anytime a remote stream is created
	        onStream: async muxedStream => {
	          if (!connection) return
	          const mss = new Multistream.Listener(muxedStream);
	          try {
	            const { stream, protocol } = await mss.handle(Array.from(this.protocols.keys()));
	            log$d('%s: incoming stream opened on %s', direction, protocol);
	            if (this.metrics) this.metrics.trackStream({ stream, remotePeer, protocol });
	            connection.addStream(muxedStream, { protocol });
	            this._onStream({ connection, stream: { ...muxedStream, ...stream }, protocol });
	          } catch (/** @type {any} */ err) {
	            log$d.error(err);
	          }
	        },
	        // Run anytime a stream closes
	        onStreamEnd: muxedStream => {
	          connection.removeStream(muxedStream.id);
	        }
	      });

	      newStream = async (protocols) => {
	        log$d('%s: starting new stream on %s', direction, protocols);
	        const muxedStream = muxer.newStream();
	        const mss = new Multistream.Dialer(muxedStream);
	        try {
	          const { stream, protocol } = await mss.select(protocols);
	          if (this.metrics) this.metrics.trackStream({ stream, remotePeer, protocol });
	          return { stream: { ...muxedStream, ...stream }, protocol }
	        } catch (/** @type {any} */ err) {
	          log$d.error('could not create new stream', err);
	          throw errCode$3(err, codes$8.ERR_UNSUPPORTED_PROTOCOL)
	        }
	      };

	      // Pipe all data through the muxer
	      pipe$3(upgradedConn, muxer, upgradedConn).catch(log$d.error);
	    }

	    const _timeline = maConn.timeline;
	    maConn.timeline = new Proxy(_timeline, {
	      set: (...args) => {
	        if (connection && args[1] === 'close' && args[2] && !_timeline.close) {
	          // Wait for close to finish before notifying of the closure
	          (async () => {
	            try {
	              if (connection.stat.status === 'open') {
	                await connection.close();
	              }
	            } catch (/** @type {any} */ err) {
	              log$d.error(err);
	            } finally {
	              this.onConnectionEnd(connection);
	            }
	          })().catch(err => {
	            log$d.error(err);
	          });
	        }

	        return Reflect.set(...args)
	      }
	    });
	    maConn.timeline.upgraded = Date.now();

	    const errConnectionNotMultiplexed = () => {
	      throw errCode$3(new Error('connection is not multiplexed'), codes$8.ERR_CONNECTION_NOT_MULTIPLEXED)
	    };

	    // Create the connection
	    connection = new Connection({
	      localAddr: maConn.localAddr,
	      remoteAddr: maConn.remoteAddr,
	      localPeer: this.localPeer,
	      remotePeer: remotePeer,
	      stat: {
	        direction,
	        // @ts-ignore
	        timeline: maConn.timeline,
	        multiplexer: Muxer && Muxer.multicodec,
	        encryption: cryptoProtocol
	      },
	      newStream: newStream || errConnectionNotMultiplexed,
	      getStreams: () => muxer ? muxer.streams : errConnectionNotMultiplexed(),
	      close: async () => {
	        await maConn.close();
	        // Ensure remaining streams are aborted
	        if (muxer) {
	          muxer.streams.map(stream => stream.abort());
	        }
	      }
	    });

	    this.onConnection(connection);

	    return connection
	  }

	  /**
	   * Routes incoming streams to the correct handler
	   *
	   * @private
	   * @param {object} options
	   * @param {Connection} options.connection - The connection the stream belongs to
	   * @param {MuxedStream} options.stream
	   * @param {string} options.protocol
	   */
	  _onStream ({ connection, stream, protocol }) {
	    const handler = this.protocols.get(protocol);
	    handler({ connection, stream, protocol });
	  }

	  /**
	   * Attempts to encrypt the incoming `connection` with the provided `cryptos`.
	   *
	   * @private
	   * @async
	   * @param {PeerId} localPeer - The initiators PeerId
	   * @param {*} connection
	   * @param {Map<string, Crypto>} cryptos
	   * @returns {Promise<CryptoResult>} An encrypted connection, remote peer `PeerId` and the protocol of the `Crypto` used
	   */
	  async _encryptInbound (localPeer, connection, cryptos) {
	    const mss = new Multistream.Listener(connection);
	    const protocols = Array.from(cryptos.keys());
	    log$d('handling inbound crypto protocol selection', protocols);

	    try {
	      const { stream, protocol } = await mss.handle(protocols);
	      const crypto = cryptos.get(protocol);
	      log$d('encrypting inbound connection...');

	      if (!crypto) {
	        throw new Error(`no crypto module found for ${protocol}`)
	      }

	      return {
	        ...await crypto.secureInbound(localPeer, stream),
	        protocol
	      }
	    } catch (/** @type {any} */ err) {
	      throw errCode$3(err, codes$8.ERR_ENCRYPTION_FAILED)
	    }
	  }

	  /**
	   * Attempts to encrypt the given `connection` with the provided `cryptos`.
	   * The first `Crypto` module to succeed will be used
	   *
	   * @private
	   * @async
	   * @param {PeerId} localPeer - The initiators PeerId
	   * @param {MultiaddrConnection} connection
	   * @param {PeerId} remotePeerId
	   * @param {Map<string, Crypto>} cryptos
	   * @returns {Promise<CryptoResult>} An encrypted connection, remote peer `PeerId` and the protocol of the `Crypto` used
	   */
	  async _encryptOutbound (localPeer, connection, remotePeerId, cryptos) {
	    const mss = new Multistream.Dialer(connection);
	    const protocols = Array.from(cryptos.keys());
	    log$d('selecting outbound crypto protocol', protocols);

	    try {
	      const { stream, protocol } = await mss.select(protocols);
	      const crypto = cryptos.get(protocol);
	      log$d('encrypting outbound connection to %j', remotePeerId);

	      if (!crypto) {
	        throw new Error(`no crypto module found for ${protocol}`)
	      }

	      return {
	        ...await crypto.secureOutbound(localPeer, stream, remotePeerId),
	        protocol
	      }
	    } catch (/** @type {any} */ err) {
	      throw errCode$3(err, codes$8.ERR_ENCRYPTION_FAILED)
	    }
	  }

	  /**
	   * Selects one of the given muxers via multistream-select. That
	   * muxer will be used for all future streams on the connection.
	   *
	   * @private
	   * @async
	   * @param {MultiaddrConnection} connection - A basic duplex connection to multiplex
	   * @param {Map<string, MuxerFactory>} muxers - The muxers to attempt multiplexing with
	   * @returns {Promise<{ stream: MuxedStream, Muxer?: MuxerFactory}>} A muxed connection
	   */
	  async _multiplexOutbound (connection, muxers) {
	    const dialer = new Multistream.Dialer(connection);
	    const protocols = Array.from(muxers.keys());
	    log$d('outbound selecting muxer %s', protocols);
	    try {
	      const { stream, protocol } = await dialer.select(protocols);
	      log$d('%s selected as muxer protocol', protocol);
	      const Muxer = muxers.get(protocol);
	      return { stream, Muxer }
	    } catch (/** @type {any} */ err) {
	      throw errCode$3(err, codes$8.ERR_MUXER_UNAVAILABLE)
	    }
	  }

	  /**
	   * Registers support for one of the given muxers via multistream-select. The
	   * selected muxer will be used for all future streams on the connection.
	   *
	   * @private
	   * @async
	   * @param {MultiaddrConnection} connection - A basic duplex connection to multiplex
	   * @param {Map<string, MuxerFactory>} muxers - The muxers to attempt multiplexing with
	   * @returns {Promise<{ stream: MuxedStream, Muxer?: MuxerFactory}>} A muxed connection
	   */
	  async _multiplexInbound (connection, muxers) {
	    const listener = new Multistream.Listener(connection);
	    const protocols = Array.from(muxers.keys());
	    log$d('inbound handling muxers %s', protocols);
	    try {
	      const { stream, protocol } = await listener.handle(protocols);
	      const Muxer = muxers.get(protocol);
	      return { stream, Muxer }
	    } catch (/** @type {any} */ err) {
	      throw errCode$3(err, codes$8.ERR_MUXER_UNAVAILABLE)
	    }
	  }
	}

	var upgrader = Upgrader$1;

	/**
	 * Invokes the passed function for each item in an iterable
	 *
	 * @template T
	 * @param {AsyncIterable<T>|Iterable<T>} source
	 * @param {(thing: T) => void | Promise<void>} fn
	 */
	const each$1 = async function * (source, fn) {
	  for await (const thing of source) {
	    await fn(thing);
	    yield thing;
	  }
	};

	var itForeach = each$1;

	const debug$a = browser$a.exports;
	const errcode$6 = errCode$q;
	const { Multiaddr: Multiaddr$4 } = src$s;
	const PeerId$7 = src$o.exports;
	const { codes: codes$7 } = errors$3;
	const PeerRecord$1 = peerRecord;
	const Envelope$1 = envelope;
	const { pipe: pipe$2 } = itPipe.exports;
	const all = itAll;
	const filter = itFilter;
	const map = itMap;
	const each = itForeach;

	/**
	 * @typedef {import('./types').PeerStore} PeerStore
	 * @typedef {import('./types').Address} Address
	 * @typedef {import('./types').AddressBook} AddressBook
	 */

	const log$c = Object.assign(debug$a('libp2p:peer-store:address-book'), {
	  error: debug$a('libp2p:peer-store:address-book:err')
	});

	const EVENT_NAME$3 = 'change:multiaddrs';

	/**
	 * @implements {AddressBook}
	 */
	class PeerStoreAddressBook {
	  /**
	   * @param {PeerStore["emit"]} emit
	   * @param {import('./types').Store} store
	   * @param {(peerId: PeerId, multiaddr: Multiaddr) => Promise<boolean>} addressFilter
	   */
	  constructor (emit, store, addressFilter) {
	    this._emit = emit;
	    this._store = store;
	    this._addressFilter = addressFilter;
	  }

	  /**
	   * ConsumePeerRecord adds addresses from a signed peer record contained in a record envelope.
	   * This will return a boolean that indicates if the record was successfully processed and added
	   * into the AddressBook.
	   *
	   * @param {Envelope} envelope
	   */
	  async consumePeerRecord (envelope) {
	    log$c('consumePeerRecord await write lock');
	    const release = await this._store.lock.writeLock();
	    log$c('consumePeerRecord got write lock');

	    let peerId;
	    let updatedPeer;

	    try {
	      let peerRecord;
	      try {
	        peerRecord = PeerRecord$1.createFromProtobuf(envelope.payload);
	      } catch (/** @type {any} */ err) {
	        log$c.error('invalid peer record received');
	        return false
	      }

	      peerId = peerRecord.peerId;
	      const multiaddrs = peerRecord.multiaddrs;

	      // Verify peerId
	      if (!peerId.equals(envelope.peerId)) {
	        log$c('signing key does not match PeerId in the PeerRecord');
	        return false
	      }

	      // ensure the record has multiaddrs
	      if (!multiaddrs || !multiaddrs.length) {
	        return false
	      }

	      if (await this._store.has(peerId)) {
	        const peer = await this._store.load(peerId);

	        if (peer.peerRecordEnvelope) {
	          const storedEnvelope = await Envelope$1.createFromProtobuf(peer.peerRecordEnvelope);
	          const storedRecord = PeerRecord$1.createFromProtobuf(storedEnvelope.payload);

	          // ensure seq is greater than, or equal to, the last received
	          if (storedRecord.seqNumber >= peerRecord.seqNumber) {
	            return false
	          }
	        }
	      }

	      // Replace unsigned addresses by the new ones from the record
	      // TODO: Once we have ttls for the addresses, we should merge these in
	      updatedPeer = await this._store.patchOrCreate(peerId, {
	        addresses: await filterMultiaddrs(peerId, multiaddrs, this._addressFilter, true),
	        peerRecordEnvelope: envelope.marshal()
	      });

	      log$c(`stored provided peer record for ${peerRecord.peerId.toB58String()}`);
	    } finally {
	      log$c('consumePeerRecord release write lock');
	      release();
	    }

	    this._emit(EVENT_NAME$3, { peerId, multiaddrs: updatedPeer.addresses.map(({ multiaddr }) => multiaddr) });

	    return true
	  }

	  /**
	   * @param {PeerId} peerId
	   */
	  async getRawEnvelope (peerId) {
	    log$c('getRawEnvelope await read lock');
	    const release = await this._store.lock.readLock();
	    log$c('getRawEnvelope got read lock');

	    try {
	      const peer = await this._store.load(peerId);

	      return peer.peerRecordEnvelope
	    } catch (/** @type {any} */ err) {
	      if (err.code !== codes$7.ERR_NOT_FOUND) {
	        throw err
	      }
	    } finally {
	      log$c('getRawEnvelope release read lock');
	      release();
	    }
	  }

	  /**
	   * Get an Envelope containing a PeerRecord for the given peer.
	   * Returns undefined if no record exists.
	   *
	   * @param {PeerId} peerId
	   */
	  async getPeerRecord (peerId) {
	    const raw = await this.getRawEnvelope(peerId);

	    if (!raw) {
	      return undefined
	    }

	    return Envelope$1.createFromProtobuf(raw)
	  }

	  /**
	   * @param {PeerId} peerId
	   */
	  async get (peerId) {
	    if (!PeerId$7.isPeerId(peerId)) {
	      log$c.error('peerId must be an instance of peer-id to store data');
	      throw errcode$6(new Error('peerId must be an instance of peer-id'), codes$7.ERR_INVALID_PARAMETERS)
	    }

	    log$c('get wait for read lock');
	    const release = await this._store.lock.readLock();
	    log$c('get got read lock');

	    try {
	      const peer = await this._store.load(peerId);

	      return peer.addresses
	    } catch (/** @type {any} */ err) {
	      if (err.code !== codes$7.ERR_NOT_FOUND) {
	        throw err
	      }
	    } finally {
	      log$c('get release read lock');
	      release();
	    }

	    return []
	  }

	  /**
	   * @param {PeerId} peerId
	   * @param {Multiaddr[]} multiaddrs
	   */
	  async set (peerId, multiaddrs) {
	    if (!PeerId$7.isPeerId(peerId)) {
	      log$c.error('peerId must be an instance of peer-id to store data');
	      throw errcode$6(new Error('peerId must be an instance of peer-id'), codes$7.ERR_INVALID_PARAMETERS)
	    }

	    if (!Array.isArray(multiaddrs)) {
	      log$c.error('multiaddrs must be an array of Multiaddrs');
	      throw errcode$6(new Error('multiaddrs must be an array of Multiaddrs'), codes$7.ERR_INVALID_PARAMETERS)
	    }

	    log$c('set await write lock');
	    const release = await this._store.lock.writeLock();
	    log$c('set got write lock');

	    let hasPeer = false;
	    let updatedPeer;

	    try {
	      const addresses = await filterMultiaddrs(peerId, multiaddrs, this._addressFilter);

	      // No valid addresses found
	      if (!addresses.length) {
	        return
	      }

	      try {
	        const peer = await this._store.load(peerId);
	        hasPeer = true;

	        if (new Set([
	          ...addresses.map(({ multiaddr }) => multiaddr.toString()),
	          ...peer.addresses.map(({ multiaddr }) => multiaddr.toString())
	        ]).size === peer.addresses.length && addresses.length === peer.addresses.length) {
	          // not changing anything, no need to update
	          return
	        }
	      } catch (/** @type {any} */ err) {
	        if (err.code !== codes$7.ERR_NOT_FOUND) {
	          throw err
	        }
	      }

	      updatedPeer = await this._store.patchOrCreate(peerId, { addresses });

	      log$c(`set multiaddrs for ${peerId.toB58String()}`);
	    } finally {
	      log$c('set release write lock');
	      release();
	    }

	    this._emit(EVENT_NAME$3, { peerId, multiaddrs: updatedPeer.addresses.map(addr => addr.multiaddr) });

	    // Notify the existence of a new peer
	    if (!hasPeer) {
	      this._emit('peer', peerId);
	    }
	  }

	  /**
	   * @param {PeerId} peerId
	   * @param {Multiaddr[]} multiaddrs
	   */
	  async add (peerId, multiaddrs) {
	    if (!PeerId$7.isPeerId(peerId)) {
	      log$c.error('peerId must be an instance of peer-id to store data');
	      throw errcode$6(new Error('peerId must be an instance of peer-id'), codes$7.ERR_INVALID_PARAMETERS)
	    }

	    if (!Array.isArray(multiaddrs)) {
	      log$c.error('multiaddrs must be an array of Multiaddrs');
	      throw errcode$6(new Error('multiaddrs must be an array of Multiaddrs'), codes$7.ERR_INVALID_PARAMETERS)
	    }

	    log$c('add await write lock');
	    const release = await this._store.lock.writeLock();
	    log$c('add got write lock');

	    let hasPeer;
	    let updatedPeer;

	    try {
	      const addresses = await filterMultiaddrs(peerId, multiaddrs, this._addressFilter);

	      // No valid addresses found
	      if (!addresses.length) {
	        return
	      }

	      try {
	        const peer = await this._store.load(peerId);
	        hasPeer = true;

	        if (new Set([
	          ...addresses.map(({ multiaddr }) => multiaddr.toString()),
	          ...peer.addresses.map(({ multiaddr }) => multiaddr.toString())
	        ]).size === peer.addresses.length) {
	          return
	        }
	      } catch (/** @type {any} */ err) {
	        if (err.code !== codes$7.ERR_NOT_FOUND) {
	          throw err
	        }
	      }

	      updatedPeer = await this._store.mergeOrCreate(peerId, { addresses });

	      log$c(`added multiaddrs for ${peerId.toB58String()}`);
	    } finally {
	      log$c('set release write lock');
	      release();
	    }

	    this._emit(EVENT_NAME$3, { peerId, multiaddrs: updatedPeer.addresses.map(addr => addr.multiaddr) });

	    // Notify the existence of a new peer
	    if (!hasPeer) {
	      this._emit('peer', peerId);
	    }
	  }

	  /**
	   * @param {PeerId} peerId
	   */
	  async delete (peerId) {
	    if (!PeerId$7.isPeerId(peerId)) {
	      log$c.error('peerId must be an instance of peer-id to store data');
	      throw errcode$6(new Error('peerId must be an instance of peer-id'), codes$7.ERR_INVALID_PARAMETERS)
	    }

	    log$c('delete await write lock');
	    const release = await this._store.lock.writeLock();
	    log$c('delete got write lock');

	    let has;

	    try {
	      has = await this._store.has(peerId);

	      await this._store.patchOrCreate(peerId, {
	        addresses: []
	      });
	    } finally {
	      log$c('delete release write lock');
	      release();
	    }

	    if (has) {
	      this._emit(EVENT_NAME$3, { peerId, multiaddrs: [] });
	    }
	  }

	  /**
	   * @param {PeerId} peerId
	   * @param {(addresses: Address[]) => Address[]} [addressSorter]
	   */
	  async getMultiaddrsForPeer (peerId, addressSorter = (ms) => ms) {
	    const addresses = await this.get(peerId);

	    return addressSorter(
	      addresses
	    ).map((address) => {
	      const multiaddr = address.multiaddr;

	      const idString = multiaddr.getPeerId();
	      if (idString && idString === peerId.toB58String()) return multiaddr

	      return multiaddr.encapsulate(`/p2p/${peerId.toB58String()}`)
	    })
	  }
	}

	/**
	 * @param {PeerId} peerId
	 * @param {Multiaddr[]} multiaddrs
	 * @param {(peerId: PeerId, multiaddr: Multiaddr) => Promise<boolean>} addressFilter
	 * @param {boolean} isCertified
	 */
	function filterMultiaddrs (peerId, multiaddrs, addressFilter, isCertified = false) {
	  return pipe$2(
	    multiaddrs,
	    (source) => each(source, (multiaddr) => {
	      if (!Multiaddr$4.isMultiaddr(multiaddr)) {
	        log$c.error('multiaddr must be an instance of Multiaddr');
	        throw errcode$6(new Error('multiaddr must be an instance of Multiaddr'), codes$7.ERR_INVALID_PARAMETERS)
	      }
	    }),
	    (source) => filter(source, (multiaddr) => addressFilter(peerId, multiaddr)),
	    (source) => map(source, (multiaddr) => {
	      return {
	        multiaddr: new Multiaddr$4(multiaddr.toString()),
	        isCertified
	      }
	    }),
	    (source) => all(source)
	  )
	}

	var addressBook = PeerStoreAddressBook;

	const debug$9 = browser$a.exports;
	const errcode$5 = errCode$q;
	const { codes: codes$6 } = errors$3;
	const PeerId$6 = src$o.exports;
	const { equals: uint8arrayEquals$1 } = require$$7$1;

	/**
	 * @typedef {import('./types').PeerStore} PeerStore
	 * @typedef {import('./types').KeyBook} KeyBook
	 * @typedef {import('libp2p-interfaces/src/keys/types').PublicKey} PublicKey
	 */

	const log$b = Object.assign(debug$9('libp2p:peer-store:key-book'), {
	  error: debug$9('libp2p:peer-store:key-book:err')
	});

	const EVENT_NAME$2 = 'change:pubkey';

	/**
	 * @implements {KeyBook}
	 */
	class PeerStoreKeyBook {
	  /**
	   * The KeyBook is responsible for keeping the known public keys of a peer.
	   *
	   * @param {PeerStore["emit"]} emit
	   * @param {import('./types').Store} store
	   */
	  constructor (emit, store) {
	    this._emit = emit;
	    this._store = store;
	  }

	  /**
	   * Set the Peer public key
	   *
	   * @param {PeerId} peerId
	   * @param {PublicKey} publicKey
	   */
	  async set (peerId, publicKey) {
	    if (!PeerId$6.isPeerId(peerId)) {
	      log$b.error('peerId must be an instance of peer-id to store data');
	      throw errcode$5(new Error('peerId must be an instance of peer-id'), codes$6.ERR_INVALID_PARAMETERS)
	    }

	    if (!publicKey) {
	      log$b.error('publicKey must be an instance of PublicKey to store data');
	      throw errcode$5(new Error('publicKey must be an instance of PublicKey'), codes$6.ERR_INVALID_PARAMETERS)
	    }

	    log$b('set await write lock');
	    const release = await this._store.lock.writeLock();
	    log$b('set got write lock');

	    let updatedKey = false;

	    try {
	      try {
	        const existing = await this._store.load(peerId);

	        if (existing.pubKey && uint8arrayEquals$1(existing.pubKey.bytes, publicKey.bytes)) {
	          return
	        }
	      } catch (/** @type {any} */ err) {
	        if (err.code !== codes$6.ERR_NOT_FOUND) {
	          throw err
	        }
	      }

	      await this._store.patchOrCreate(peerId, {
	        pubKey: publicKey
	      });
	      updatedKey = true;
	    } finally {
	      log$b('set release write lock');
	      release();
	    }

	    if (updatedKey) {
	      this._emit(EVENT_NAME$2, { peerId, pubKey: publicKey });
	    }
	  }

	  /**
	   * Get Public key of the given PeerId, if stored
	   *
	   * @param {PeerId} peerId
	   */
	  async get (peerId) {
	    if (!PeerId$6.isPeerId(peerId)) {
	      log$b.error('peerId must be an instance of peer-id to store data');
	      throw errcode$5(new Error('peerId must be an instance of peer-id'), codes$6.ERR_INVALID_PARAMETERS)
	    }

	    log$b('get await write lock');
	    const release = await this._store.lock.readLock();
	    log$b('get got write lock');

	    try {
	      const peer = await this._store.load(peerId);

	      return peer.pubKey
	    } catch (/** @type {any} */ err) {
	      if (err.code !== codes$6.ERR_NOT_FOUND) {
	        throw err
	      }
	    } finally {
	      log$b('get release write lock');
	      release();
	    }
	  }

	  /**
	   * @param {PeerId} peerId
	   */
	  async delete (peerId) {
	    if (!PeerId$6.isPeerId(peerId)) {
	      log$b.error('peerId must be an instance of peer-id to store data');
	      throw errcode$5(new Error('peerId must be an instance of peer-id'), codes$6.ERR_INVALID_PARAMETERS)
	    }

	    log$b('delete await write lock');
	    const release = await this._store.lock.writeLock();
	    log$b('delete got write lock');

	    try {
	      await this._store.patchOrCreate(peerId, {
	        pubKey: undefined
	      });
	    } finally {
	      log$b('delete release write lock');
	      release();
	    }

	    this._emit(EVENT_NAME$2, { peerId, pubKey: undefined });
	  }
	}

	var keyBook = PeerStoreKeyBook;

	const debug$8 = browser$a.exports;
	const errcode$4 = errCode$q;
	const { codes: codes$5 } = errors$3;
	const PeerId$5 = src$o.exports;
	const { equals: uint8ArrayEquals } = require$$7$1;

	const log$a = Object.assign(debug$8('libp2p:peer-store:metadata-book'), {
	  error: debug$8('libp2p:peer-store:metadata-book:err')
	});

	/**
	 * @typedef {import('./types').PeerStore} PeerStore
	 * @typedef {import('./types').MetadataBook} MetadataBook
	 */

	const EVENT_NAME$1 = 'change:metadata';

	/**
	 * @implements {MetadataBook}
	 */
	class PeerStoreMetadataBook {
	  /**
	   * The MetadataBook is responsible for keeping the known supported
	   * protocols of a peer
	   *
	   * @param {PeerStore["emit"]} emit
	   * @param {import('./types').Store} store
	   */
	  constructor (emit, store) {
	    this._emit = emit;
	    this._store = store;
	  }

	  /**
	   * Get the known data of a provided peer
	   *
	   * @param {PeerId} peerId
	   */
	  async get (peerId) {
	    if (!PeerId$5.isPeerId(peerId)) {
	      log$a.error('peerId must be an instance of peer-id to store data');
	      throw errcode$4(new Error('peerId must be an instance of peer-id'), codes$5.ERR_INVALID_PARAMETERS)
	    }

	    log$a('get await read lock');
	    const release = await this._store.lock.readLock();
	    log$a('get got read lock');

	    try {
	      const peer = await this._store.load(peerId);

	      return peer.metadata
	    } catch (/** @type {any} */ err) {
	      if (err.code !== codes$5.ERR_NOT_FOUND) {
	        throw err
	      }
	    } finally {
	      log$a('get release read lock');
	      release();
	    }

	    return new Map()
	  }

	  /**
	   * Get specific metadata value, if it exists
	   *
	   * @param {PeerId} peerId
	   * @param {string} key
	   */
	  async getValue (peerId, key) {
	    if (!PeerId$5.isPeerId(peerId)) {
	      log$a.error('peerId must be an instance of peer-id to store data');
	      throw errcode$4(new Error('peerId must be an instance of peer-id'), codes$5.ERR_INVALID_PARAMETERS)
	    }

	    log$a('getValue await read lock');
	    const release = await this._store.lock.readLock();
	    log$a('getValue got read lock');

	    try {
	      const peer = await this._store.load(peerId);

	      return peer.metadata.get(key)
	    } catch (/** @type {any} */ err) {
	      if (err.code !== codes$5.ERR_NOT_FOUND) {
	        throw err
	      }
	    } finally {
	      log$a('getValue release write lock');
	      release();
	    }
	  }

	  /**
	   * @param {PeerId} peerId
	   * @param {Map<string, Uint8Array>} metadata
	   */
	  async set (peerId, metadata) {
	    if (!PeerId$5.isPeerId(peerId)) {
	      log$a.error('peerId must be an instance of peer-id to store data');
	      throw errcode$4(new Error('peerId must be an instance of peer-id'), codes$5.ERR_INVALID_PARAMETERS)
	    }

	    if (!metadata || !(metadata instanceof Map)) {
	      log$a.error('valid metadata must be provided to store data');
	      throw errcode$4(new Error('valid metadata must be provided'), codes$5.ERR_INVALID_PARAMETERS)
	    }

	    log$a('set await write lock');
	    const release = await this._store.lock.writeLock();
	    log$a('set got write lock');

	    try {
	      await this._store.mergeOrCreate(peerId, {
	        metadata
	      });
	    } finally {
	      log$a('set release write lock');
	      release();
	    }

	    this._emit(EVENT_NAME$1, { peerId, metadata });
	  }

	  /**
	   * Set metadata key and value of a provided peer
	   *
	   * @param {PeerId} peerId
	   * @param {string} key - metadata key
	   * @param {Uint8Array} value - metadata value
	   */
	  async setValue (peerId, key, value) {
	    if (!PeerId$5.isPeerId(peerId)) {
	      log$a.error('peerId must be an instance of peer-id to store data');
	      throw errcode$4(new Error('peerId must be an instance of peer-id'), codes$5.ERR_INVALID_PARAMETERS)
	    }

	    if (typeof key !== 'string' || !(value instanceof Uint8Array)) {
	      log$a.error('valid key and value must be provided to store data');
	      throw errcode$4(new Error('valid key and value must be provided'), codes$5.ERR_INVALID_PARAMETERS)
	    }

	    log$a('setValue await write lock');
	    const release = await this._store.lock.writeLock();
	    log$a('setValue got write lock');

	    let updatedPeer;

	    try {
	      try {
	        const existingPeer = await this._store.load(peerId);
	        const existingValue = existingPeer.metadata.get(key);

	        if (existingValue != null && uint8ArrayEquals(value, existingValue)) {
	          return
	        }
	      } catch (/** @type {any} */ err) {
	        if (err.code !== codes$5.ERR_NOT_FOUND) {
	          throw err
	        }
	      }

	      updatedPeer = await this._store.mergeOrCreate(peerId, {
	        metadata: new Map([[key, value]])
	      });
	    } finally {
	      log$a('setValue release write lock');
	      release();
	    }

	    this._emit(EVENT_NAME$1, { peerId, metadata: updatedPeer.metadata });
	  }

	  /**
	   * @param {PeerId} peerId
	   */
	  async delete (peerId) {
	    if (!PeerId$5.isPeerId(peerId)) {
	      log$a.error('peerId must be an instance of peer-id to store data');
	      throw errcode$4(new Error('peerId must be an instance of peer-id'), codes$5.ERR_INVALID_PARAMETERS)
	    }

	    log$a('delete await write lock');
	    const release = await this._store.lock.writeLock();
	    log$a('delete got write lock');

	    let has;

	    try {
	      has = await this._store.has(peerId);

	      if (has) {
	        await this._store.patch(peerId, {
	          metadata: new Map()
	        });
	      }
	    } finally {
	      log$a('delete release write lock');
	      release();
	    }

	    if (has) {
	      this._emit(EVENT_NAME$1, { peerId, metadata: new Map() });
	    }
	  }

	  /**
	   * @param {PeerId} peerId
	   * @param {string} key
	   */
	  async deleteValue (peerId, key) {
	    if (!PeerId$5.isPeerId(peerId)) {
	      log$a.error('peerId must be an instance of peer-id to store data');
	      throw errcode$4(new Error('peerId must be an instance of peer-id'), codes$5.ERR_INVALID_PARAMETERS)
	    }

	    log$a('deleteValue await write lock');
	    const release = await this._store.lock.writeLock();
	    log$a('deleteValue got write lock');

	    let metadata;

	    try {
	      const peer = await this._store.load(peerId);
	      metadata = peer.metadata;

	      metadata.delete(key);

	      await this._store.patch(peerId, {
	        metadata
	      });
	    } catch (/** @type {any} **/ err) {
	      if (err.code !== codes$5.ERR_NOT_FOUND) {
	        throw err
	      }
	    } finally {
	      log$a('deleteValue release write lock');
	      release();
	    }

	    if (metadata) {
	      this._emit(EVENT_NAME$1, { peerId, metadata });
	    }
	  }
	}

	var metadataBook = PeerStoreMetadataBook;

	const debug$7 = browser$a.exports;
	const errcode$3 = errCode$q;
	const { codes: codes$4 } = errors$3;
	const PeerId$4 = src$o.exports;

	/**
	 * @typedef {import('./types').PeerStore} PeerStore
	 * @typedef {import('./types').ProtoBook} ProtoBook
	 */

	const log$9 = Object.assign(debug$7('libp2p:peer-store:proto-book'), {
	  error: debug$7('libp2p:peer-store:proto-book:err')
	});

	const EVENT_NAME = 'change:protocols';

	/**
	 * @implements {ProtoBook}
	 */
	class PersistentProtoBook {
	  /**
	   * @param {PeerStore["emit"]} emit
	   * @param {import('./types').Store} store
	   */
	  constructor (emit, store) {
	    this._emit = emit;
	    this._store = store;
	  }

	  /**
	   * @param {PeerId} peerId
	   */
	  async get (peerId) {
	    log$9('get wait for read lock');
	    const release = await this._store.lock.readLock();
	    log$9('get got read lock');

	    try {
	      const peer = await this._store.load(peerId);

	      return peer.protocols
	    } catch (/** @type {any} */ err) {
	      if (err.code !== codes$4.ERR_NOT_FOUND) {
	        throw err
	      }
	    } finally {
	      log$9('get release read lock');
	      release();
	    }

	    return []
	  }

	  /**
	   * @param {PeerId} peerId
	   * @param {string[]} protocols
	   */
	  async set (peerId, protocols) {
	    if (!PeerId$4.isPeerId(peerId)) {
	      log$9.error('peerId must be an instance of peer-id to store data');
	      throw errcode$3(new Error('peerId must be an instance of peer-id'), codes$4.ERR_INVALID_PARAMETERS)
	    }

	    if (!Array.isArray(protocols)) {
	      log$9.error('protocols must be provided to store data');
	      throw errcode$3(new Error('protocols must be provided'), codes$4.ERR_INVALID_PARAMETERS)
	    }

	    log$9('set await write lock');
	    const release = await this._store.lock.writeLock();
	    log$9('set got write lock');

	    let updatedPeer;

	    try {
	      try {
	        const peer = await this._store.load(peerId);

	        if (new Set([
	          ...protocols
	        ]).size === peer.protocols.length) {
	          return
	        }
	      } catch (/** @type {any} */ err) {
	        if (err.code !== codes$4.ERR_NOT_FOUND) {
	          throw err
	        }
	      }

	      updatedPeer = await this._store.patchOrCreate(peerId, {
	        protocols
	      });

	      log$9(`stored provided protocols for ${peerId.toB58String()}`);
	    } finally {
	      log$9('set release write lock');
	      release();
	    }

	    this._emit(EVENT_NAME, { peerId, protocols: updatedPeer.protocols });
	  }

	  /**
	   * @param {PeerId} peerId
	   * @param {string[]} protocols
	   */
	  async add (peerId, protocols) {
	    if (!PeerId$4.isPeerId(peerId)) {
	      log$9.error('peerId must be an instance of peer-id to store data');
	      throw errcode$3(new Error('peerId must be an instance of peer-id'), codes$4.ERR_INVALID_PARAMETERS)
	    }

	    if (!Array.isArray(protocols)) {
	      log$9.error('protocols must be provided to store data');
	      throw errcode$3(new Error('protocols must be provided'), codes$4.ERR_INVALID_PARAMETERS)
	    }

	    log$9('add await write lock');
	    const release = await this._store.lock.writeLock();
	    log$9('add got write lock');

	    let updatedPeer;

	    try {
	      try {
	        const peer = await this._store.load(peerId);

	        if (new Set([
	          ...peer.protocols,
	          ...protocols
	        ]).size === peer.protocols.length) {
	          return
	        }
	      } catch (/** @type {any} */ err) {
	        if (err.code !== codes$4.ERR_NOT_FOUND) {
	          throw err
	        }
	      }

	      updatedPeer = await this._store.mergeOrCreate(peerId, {
	        protocols
	      });

	      log$9(`added provided protocols for ${peerId.toB58String()}`);
	    } finally {
	      log$9('add release write lock');
	      release();
	    }

	    this._emit(EVENT_NAME, { peerId, protocols: updatedPeer.protocols });
	  }

	  /**
	   * @param {PeerId} peerId
	   * @param {string[]} protocols
	   */
	  async remove (peerId, protocols) {
	    if (!PeerId$4.isPeerId(peerId)) {
	      log$9.error('peerId must be an instance of peer-id to store data');
	      throw errcode$3(new Error('peerId must be an instance of peer-id'), codes$4.ERR_INVALID_PARAMETERS)
	    }

	    if (!Array.isArray(protocols)) {
	      log$9.error('protocols must be provided to store data');
	      throw errcode$3(new Error('protocols must be provided'), codes$4.ERR_INVALID_PARAMETERS)
	    }

	    log$9('remove await write lock');
	    const release = await this._store.lock.writeLock();
	    log$9('remove got write lock');

	    let updatedPeer;

	    try {
	      try {
	        const peer = await this._store.load(peerId);
	        const protocolSet = new Set(peer.protocols);

	        for (const protocol of protocols) {
	          protocolSet.delete(protocol);
	        }

	        if (peer.protocols.length === protocolSet.size) {
	          return
	        }

	        protocols = Array.from(protocolSet);
	      } catch (/** @type {any} */ err) {
	        if (err.code !== codes$4.ERR_NOT_FOUND) {
	          throw err
	        }
	      }

	      updatedPeer = await this._store.patchOrCreate(peerId, {
	        protocols
	      });
	    } finally {
	      log$9('remove release write lock');
	      release();
	    }

	    this._emit(EVENT_NAME, { peerId, protocols: updatedPeer.protocols });
	  }

	  /**
	   * @param {PeerId} peerId
	   */
	  async delete (peerId) {
	    log$9('delete await write lock');
	    const release = await this._store.lock.writeLock();
	    log$9('delete got write lock');
	    let has;

	    try {
	      has = await this._store.has(peerId);

	      await this._store.patchOrCreate(peerId, {
	        protocols: []
	      });
	    } catch (/** @type {any} */ err) {
	      if (err.code !== codes$4.ERR_NOT_FOUND) {
	        throw err
	      }
	    } finally {
	      log$9('delete release write lock');
	      release();
	    }

	    if (has) {
	      this._emit(EVENT_NAME, { peerId, protocols: [] });
	    }
	  }
	}

	var protoBook = PersistentProtoBook;

	/*eslint-disable*/

	var $protobuf$2 = minimal;

	// Common aliases
	var $Reader$3 = $protobuf$2.Reader, $Writer$3 = $protobuf$2.Writer, $util$3 = $protobuf$2.util;

	// Exported root namespace
	var $root$3 = $protobuf$2.roots["libp2p-peer"] || ($protobuf$2.roots["libp2p-peer"] = {});

	$root$3.Peer = (function() {

	    /**
	     * Properties of a Peer.
	     * @exports IPeer
	     * @interface IPeer
	     * @property {Array.<IAddress>|null} [addresses] Peer addresses
	     * @property {Array.<string>|null} [protocols] Peer protocols
	     * @property {Array.<IMetadata>|null} [metadata] Peer metadata
	     * @property {Uint8Array|null} [pubKey] Peer pubKey
	     * @property {Uint8Array|null} [peerRecordEnvelope] Peer peerRecordEnvelope
	     */

	    /**
	     * Constructs a new Peer.
	     * @exports Peer
	     * @classdesc Represents a Peer.
	     * @implements IPeer
	     * @constructor
	     * @param {IPeer=} [p] Properties to set
	     */
	    function Peer(p) {
	        this.addresses = [];
	        this.protocols = [];
	        this.metadata = [];
	        if (p)
	            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                if (p[ks[i]] != null)
	                    this[ks[i]] = p[ks[i]];
	    }

	    /**
	     * Peer addresses.
	     * @member {Array.<IAddress>} addresses
	     * @memberof Peer
	     * @instance
	     */
	    Peer.prototype.addresses = $util$3.emptyArray;

	    /**
	     * Peer protocols.
	     * @member {Array.<string>} protocols
	     * @memberof Peer
	     * @instance
	     */
	    Peer.prototype.protocols = $util$3.emptyArray;

	    /**
	     * Peer metadata.
	     * @member {Array.<IMetadata>} metadata
	     * @memberof Peer
	     * @instance
	     */
	    Peer.prototype.metadata = $util$3.emptyArray;

	    /**
	     * Peer pubKey.
	     * @member {Uint8Array|null|undefined} pubKey
	     * @memberof Peer
	     * @instance
	     */
	    Peer.prototype.pubKey = null;

	    /**
	     * Peer peerRecordEnvelope.
	     * @member {Uint8Array|null|undefined} peerRecordEnvelope
	     * @memberof Peer
	     * @instance
	     */
	    Peer.prototype.peerRecordEnvelope = null;

	    // OneOf field names bound to virtual getters and setters
	    var $oneOfFields;

	    /**
	     * Peer _pubKey.
	     * @member {"pubKey"|undefined} _pubKey
	     * @memberof Peer
	     * @instance
	     */
	    Object.defineProperty(Peer.prototype, "_pubKey", {
	        get: $util$3.oneOfGetter($oneOfFields = ["pubKey"]),
	        set: $util$3.oneOfSetter($oneOfFields)
	    });

	    /**
	     * Peer _peerRecordEnvelope.
	     * @member {"peerRecordEnvelope"|undefined} _peerRecordEnvelope
	     * @memberof Peer
	     * @instance
	     */
	    Object.defineProperty(Peer.prototype, "_peerRecordEnvelope", {
	        get: $util$3.oneOfGetter($oneOfFields = ["peerRecordEnvelope"]),
	        set: $util$3.oneOfSetter($oneOfFields)
	    });

	    /**
	     * Encodes the specified Peer message. Does not implicitly {@link Peer.verify|verify} messages.
	     * @function encode
	     * @memberof Peer
	     * @static
	     * @param {IPeer} m Peer message or plain object to encode
	     * @param {$protobuf.Writer} [w] Writer to encode to
	     * @returns {$protobuf.Writer} Writer
	     */
	    Peer.encode = function encode(m, w) {
	        if (!w)
	            w = $Writer$3.create();
	        if (m.addresses != null && m.addresses.length) {
	            for (var i = 0; i < m.addresses.length; ++i)
	                $root$3.Address.encode(m.addresses[i], w.uint32(10).fork()).ldelim();
	        }
	        if (m.protocols != null && m.protocols.length) {
	            for (var i = 0; i < m.protocols.length; ++i)
	                w.uint32(18).string(m.protocols[i]);
	        }
	        if (m.metadata != null && m.metadata.length) {
	            for (var i = 0; i < m.metadata.length; ++i)
	                $root$3.Metadata.encode(m.metadata[i], w.uint32(26).fork()).ldelim();
	        }
	        if (m.pubKey != null && Object.hasOwnProperty.call(m, "pubKey"))
	            w.uint32(34).bytes(m.pubKey);
	        if (m.peerRecordEnvelope != null && Object.hasOwnProperty.call(m, "peerRecordEnvelope"))
	            w.uint32(42).bytes(m.peerRecordEnvelope);
	        return w;
	    };

	    /**
	     * Decodes a Peer message from the specified reader or buffer.
	     * @function decode
	     * @memberof Peer
	     * @static
	     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	     * @param {number} [l] Message length if known beforehand
	     * @returns {Peer} Peer
	     * @throws {Error} If the payload is not a reader or valid buffer
	     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	     */
	    Peer.decode = function decode(r, l) {
	        if (!(r instanceof $Reader$3))
	            r = $Reader$3.create(r);
	        var c = l === undefined ? r.len : r.pos + l, m = new $root$3.Peer();
	        while (r.pos < c) {
	            var t = r.uint32();
	            switch (t >>> 3) {
	            case 1:
	                if (!(m.addresses && m.addresses.length))
	                    m.addresses = [];
	                m.addresses.push($root$3.Address.decode(r, r.uint32()));
	                break;
	            case 2:
	                if (!(m.protocols && m.protocols.length))
	                    m.protocols = [];
	                m.protocols.push(r.string());
	                break;
	            case 3:
	                if (!(m.metadata && m.metadata.length))
	                    m.metadata = [];
	                m.metadata.push($root$3.Metadata.decode(r, r.uint32()));
	                break;
	            case 4:
	                m.pubKey = r.bytes();
	                break;
	            case 5:
	                m.peerRecordEnvelope = r.bytes();
	                break;
	            default:
	                r.skipType(t & 7);
	                break;
	            }
	        }
	        return m;
	    };

	    /**
	     * Creates a Peer message from a plain object. Also converts values to their respective internal types.
	     * @function fromObject
	     * @memberof Peer
	     * @static
	     * @param {Object.<string,*>} d Plain object
	     * @returns {Peer} Peer
	     */
	    Peer.fromObject = function fromObject(d) {
	        if (d instanceof $root$3.Peer)
	            return d;
	        var m = new $root$3.Peer();
	        if (d.addresses) {
	            if (!Array.isArray(d.addresses))
	                throw TypeError(".Peer.addresses: array expected");
	            m.addresses = [];
	            for (var i = 0; i < d.addresses.length; ++i) {
	                if (typeof d.addresses[i] !== "object")
	                    throw TypeError(".Peer.addresses: object expected");
	                m.addresses[i] = $root$3.Address.fromObject(d.addresses[i]);
	            }
	        }
	        if (d.protocols) {
	            if (!Array.isArray(d.protocols))
	                throw TypeError(".Peer.protocols: array expected");
	            m.protocols = [];
	            for (var i = 0; i < d.protocols.length; ++i) {
	                m.protocols[i] = String(d.protocols[i]);
	            }
	        }
	        if (d.metadata) {
	            if (!Array.isArray(d.metadata))
	                throw TypeError(".Peer.metadata: array expected");
	            m.metadata = [];
	            for (var i = 0; i < d.metadata.length; ++i) {
	                if (typeof d.metadata[i] !== "object")
	                    throw TypeError(".Peer.metadata: object expected");
	                m.metadata[i] = $root$3.Metadata.fromObject(d.metadata[i]);
	            }
	        }
	        if (d.pubKey != null) {
	            if (typeof d.pubKey === "string")
	                $util$3.base64.decode(d.pubKey, m.pubKey = $util$3.newBuffer($util$3.base64.length(d.pubKey)), 0);
	            else if (d.pubKey.length)
	                m.pubKey = d.pubKey;
	        }
	        if (d.peerRecordEnvelope != null) {
	            if (typeof d.peerRecordEnvelope === "string")
	                $util$3.base64.decode(d.peerRecordEnvelope, m.peerRecordEnvelope = $util$3.newBuffer($util$3.base64.length(d.peerRecordEnvelope)), 0);
	            else if (d.peerRecordEnvelope.length)
	                m.peerRecordEnvelope = d.peerRecordEnvelope;
	        }
	        return m;
	    };

	    /**
	     * Creates a plain object from a Peer message. Also converts values to other types if specified.
	     * @function toObject
	     * @memberof Peer
	     * @static
	     * @param {Peer} m Peer
	     * @param {$protobuf.IConversionOptions} [o] Conversion options
	     * @returns {Object.<string,*>} Plain object
	     */
	    Peer.toObject = function toObject(m, o) {
	        if (!o)
	            o = {};
	        var d = {};
	        if (o.arrays || o.defaults) {
	            d.addresses = [];
	            d.protocols = [];
	            d.metadata = [];
	        }
	        if (m.addresses && m.addresses.length) {
	            d.addresses = [];
	            for (var j = 0; j < m.addresses.length; ++j) {
	                d.addresses[j] = $root$3.Address.toObject(m.addresses[j], o);
	            }
	        }
	        if (m.protocols && m.protocols.length) {
	            d.protocols = [];
	            for (var j = 0; j < m.protocols.length; ++j) {
	                d.protocols[j] = m.protocols[j];
	            }
	        }
	        if (m.metadata && m.metadata.length) {
	            d.metadata = [];
	            for (var j = 0; j < m.metadata.length; ++j) {
	                d.metadata[j] = $root$3.Metadata.toObject(m.metadata[j], o);
	            }
	        }
	        if (m.pubKey != null && m.hasOwnProperty("pubKey")) {
	            d.pubKey = o.bytes === String ? $util$3.base64.encode(m.pubKey, 0, m.pubKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.pubKey) : m.pubKey;
	            if (o.oneofs)
	                d._pubKey = "pubKey";
	        }
	        if (m.peerRecordEnvelope != null && m.hasOwnProperty("peerRecordEnvelope")) {
	            d.peerRecordEnvelope = o.bytes === String ? $util$3.base64.encode(m.peerRecordEnvelope, 0, m.peerRecordEnvelope.length) : o.bytes === Array ? Array.prototype.slice.call(m.peerRecordEnvelope) : m.peerRecordEnvelope;
	            if (o.oneofs)
	                d._peerRecordEnvelope = "peerRecordEnvelope";
	        }
	        return d;
	    };

	    /**
	     * Converts this Peer to JSON.
	     * @function toJSON
	     * @memberof Peer
	     * @instance
	     * @returns {Object.<string,*>} JSON object
	     */
	    Peer.prototype.toJSON = function toJSON() {
	        return this.constructor.toObject(this, $protobuf$2.util.toJSONOptions);
	    };

	    return Peer;
	})();

	$root$3.Address = (function() {

	    /**
	     * Properties of an Address.
	     * @exports IAddress
	     * @interface IAddress
	     * @property {Uint8Array|null} [multiaddr] Address multiaddr
	     * @property {boolean|null} [isCertified] Address isCertified
	     */

	    /**
	     * Constructs a new Address.
	     * @exports Address
	     * @classdesc Represents an Address.
	     * @implements IAddress
	     * @constructor
	     * @param {IAddress=} [p] Properties to set
	     */
	    function Address(p) {
	        if (p)
	            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                if (p[ks[i]] != null)
	                    this[ks[i]] = p[ks[i]];
	    }

	    /**
	     * Address multiaddr.
	     * @member {Uint8Array} multiaddr
	     * @memberof Address
	     * @instance
	     */
	    Address.prototype.multiaddr = $util$3.newBuffer([]);

	    /**
	     * Address isCertified.
	     * @member {boolean|null|undefined} isCertified
	     * @memberof Address
	     * @instance
	     */
	    Address.prototype.isCertified = null;

	    // OneOf field names bound to virtual getters and setters
	    var $oneOfFields;

	    /**
	     * Address _isCertified.
	     * @member {"isCertified"|undefined} _isCertified
	     * @memberof Address
	     * @instance
	     */
	    Object.defineProperty(Address.prototype, "_isCertified", {
	        get: $util$3.oneOfGetter($oneOfFields = ["isCertified"]),
	        set: $util$3.oneOfSetter($oneOfFields)
	    });

	    /**
	     * Encodes the specified Address message. Does not implicitly {@link Address.verify|verify} messages.
	     * @function encode
	     * @memberof Address
	     * @static
	     * @param {IAddress} m Address message or plain object to encode
	     * @param {$protobuf.Writer} [w] Writer to encode to
	     * @returns {$protobuf.Writer} Writer
	     */
	    Address.encode = function encode(m, w) {
	        if (!w)
	            w = $Writer$3.create();
	        if (m.multiaddr != null && Object.hasOwnProperty.call(m, "multiaddr"))
	            w.uint32(10).bytes(m.multiaddr);
	        if (m.isCertified != null && Object.hasOwnProperty.call(m, "isCertified"))
	            w.uint32(16).bool(m.isCertified);
	        return w;
	    };

	    /**
	     * Decodes an Address message from the specified reader or buffer.
	     * @function decode
	     * @memberof Address
	     * @static
	     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	     * @param {number} [l] Message length if known beforehand
	     * @returns {Address} Address
	     * @throws {Error} If the payload is not a reader or valid buffer
	     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	     */
	    Address.decode = function decode(r, l) {
	        if (!(r instanceof $Reader$3))
	            r = $Reader$3.create(r);
	        var c = l === undefined ? r.len : r.pos + l, m = new $root$3.Address();
	        while (r.pos < c) {
	            var t = r.uint32();
	            switch (t >>> 3) {
	            case 1:
	                m.multiaddr = r.bytes();
	                break;
	            case 2:
	                m.isCertified = r.bool();
	                break;
	            default:
	                r.skipType(t & 7);
	                break;
	            }
	        }
	        return m;
	    };

	    /**
	     * Creates an Address message from a plain object. Also converts values to their respective internal types.
	     * @function fromObject
	     * @memberof Address
	     * @static
	     * @param {Object.<string,*>} d Plain object
	     * @returns {Address} Address
	     */
	    Address.fromObject = function fromObject(d) {
	        if (d instanceof $root$3.Address)
	            return d;
	        var m = new $root$3.Address();
	        if (d.multiaddr != null) {
	            if (typeof d.multiaddr === "string")
	                $util$3.base64.decode(d.multiaddr, m.multiaddr = $util$3.newBuffer($util$3.base64.length(d.multiaddr)), 0);
	            else if (d.multiaddr.length)
	                m.multiaddr = d.multiaddr;
	        }
	        if (d.isCertified != null) {
	            m.isCertified = Boolean(d.isCertified);
	        }
	        return m;
	    };

	    /**
	     * Creates a plain object from an Address message. Also converts values to other types if specified.
	     * @function toObject
	     * @memberof Address
	     * @static
	     * @param {Address} m Address
	     * @param {$protobuf.IConversionOptions} [o] Conversion options
	     * @returns {Object.<string,*>} Plain object
	     */
	    Address.toObject = function toObject(m, o) {
	        if (!o)
	            o = {};
	        var d = {};
	        if (o.defaults) {
	            if (o.bytes === String)
	                d.multiaddr = "";
	            else {
	                d.multiaddr = [];
	                if (o.bytes !== Array)
	                    d.multiaddr = $util$3.newBuffer(d.multiaddr);
	            }
	        }
	        if (m.multiaddr != null && m.hasOwnProperty("multiaddr")) {
	            d.multiaddr = o.bytes === String ? $util$3.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;
	        }
	        if (m.isCertified != null && m.hasOwnProperty("isCertified")) {
	            d.isCertified = m.isCertified;
	            if (o.oneofs)
	                d._isCertified = "isCertified";
	        }
	        return d;
	    };

	    /**
	     * Converts this Address to JSON.
	     * @function toJSON
	     * @memberof Address
	     * @instance
	     * @returns {Object.<string,*>} JSON object
	     */
	    Address.prototype.toJSON = function toJSON() {
	        return this.constructor.toObject(this, $protobuf$2.util.toJSONOptions);
	    };

	    return Address;
	})();

	$root$3.Metadata = (function() {

	    /**
	     * Properties of a Metadata.
	     * @exports IMetadata
	     * @interface IMetadata
	     * @property {string|null} [key] Metadata key
	     * @property {Uint8Array|null} [value] Metadata value
	     */

	    /**
	     * Constructs a new Metadata.
	     * @exports Metadata
	     * @classdesc Represents a Metadata.
	     * @implements IMetadata
	     * @constructor
	     * @param {IMetadata=} [p] Properties to set
	     */
	    function Metadata(p) {
	        if (p)
	            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                if (p[ks[i]] != null)
	                    this[ks[i]] = p[ks[i]];
	    }

	    /**
	     * Metadata key.
	     * @member {string} key
	     * @memberof Metadata
	     * @instance
	     */
	    Metadata.prototype.key = "";

	    /**
	     * Metadata value.
	     * @member {Uint8Array} value
	     * @memberof Metadata
	     * @instance
	     */
	    Metadata.prototype.value = $util$3.newBuffer([]);

	    /**
	     * Encodes the specified Metadata message. Does not implicitly {@link Metadata.verify|verify} messages.
	     * @function encode
	     * @memberof Metadata
	     * @static
	     * @param {IMetadata} m Metadata message or plain object to encode
	     * @param {$protobuf.Writer} [w] Writer to encode to
	     * @returns {$protobuf.Writer} Writer
	     */
	    Metadata.encode = function encode(m, w) {
	        if (!w)
	            w = $Writer$3.create();
	        if (m.key != null && Object.hasOwnProperty.call(m, "key"))
	            w.uint32(10).string(m.key);
	        if (m.value != null && Object.hasOwnProperty.call(m, "value"))
	            w.uint32(18).bytes(m.value);
	        return w;
	    };

	    /**
	     * Decodes a Metadata message from the specified reader or buffer.
	     * @function decode
	     * @memberof Metadata
	     * @static
	     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	     * @param {number} [l] Message length if known beforehand
	     * @returns {Metadata} Metadata
	     * @throws {Error} If the payload is not a reader or valid buffer
	     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	     */
	    Metadata.decode = function decode(r, l) {
	        if (!(r instanceof $Reader$3))
	            r = $Reader$3.create(r);
	        var c = l === undefined ? r.len : r.pos + l, m = new $root$3.Metadata();
	        while (r.pos < c) {
	            var t = r.uint32();
	            switch (t >>> 3) {
	            case 1:
	                m.key = r.string();
	                break;
	            case 2:
	                m.value = r.bytes();
	                break;
	            default:
	                r.skipType(t & 7);
	                break;
	            }
	        }
	        return m;
	    };

	    /**
	     * Creates a Metadata message from a plain object. Also converts values to their respective internal types.
	     * @function fromObject
	     * @memberof Metadata
	     * @static
	     * @param {Object.<string,*>} d Plain object
	     * @returns {Metadata} Metadata
	     */
	    Metadata.fromObject = function fromObject(d) {
	        if (d instanceof $root$3.Metadata)
	            return d;
	        var m = new $root$3.Metadata();
	        if (d.key != null) {
	            m.key = String(d.key);
	        }
	        if (d.value != null) {
	            if (typeof d.value === "string")
	                $util$3.base64.decode(d.value, m.value = $util$3.newBuffer($util$3.base64.length(d.value)), 0);
	            else if (d.value.length)
	                m.value = d.value;
	        }
	        return m;
	    };

	    /**
	     * Creates a plain object from a Metadata message. Also converts values to other types if specified.
	     * @function toObject
	     * @memberof Metadata
	     * @static
	     * @param {Metadata} m Metadata
	     * @param {$protobuf.IConversionOptions} [o] Conversion options
	     * @returns {Object.<string,*>} Plain object
	     */
	    Metadata.toObject = function toObject(m, o) {
	        if (!o)
	            o = {};
	        var d = {};
	        if (o.defaults) {
	            d.key = "";
	            if (o.bytes === String)
	                d.value = "";
	            else {
	                d.value = [];
	                if (o.bytes !== Array)
	                    d.value = $util$3.newBuffer(d.value);
	            }
	        }
	        if (m.key != null && m.hasOwnProperty("key")) {
	            d.key = m.key;
	        }
	        if (m.value != null && m.hasOwnProperty("value")) {
	            d.value = o.bytes === String ? $util$3.base64.encode(m.value, 0, m.value.length) : o.bytes === Array ? Array.prototype.slice.call(m.value) : m.value;
	        }
	        return d;
	    };

	    /**
	     * Converts this Metadata to JSON.
	     * @function toJSON
	     * @memberof Metadata
	     * @instance
	     * @returns {Object.<string,*>} JSON object
	     */
	    Metadata.prototype.toJSON = function toJSON() {
	        return this.constructor.toObject(this, $protobuf$2.util.toJSONOptions);
	    };

	    return Metadata;
	})();

	var peer = $root$3;

	const debug$6 = browser$a.exports;
	const PeerId$3 = src$o.exports;
	const errcode$2 = errCode$q;
	const { codes: codes$3 } = errors$3;
	const { Key } = require$$4;
	const { base32 } = require$$5$4;
	const { keys: { unmarshalPublicKey, marshalPublicKey } } = src$n;
	const { Multiaddr: Multiaddr$3 } = src$s;
	const { Peer: PeerPB } = peer;
	// @ts-expect-error no types
	const mortice = lib$2.exports;
	const { equals: uint8arrayEquals } = require$$7$1;

	const log$8 = Object.assign(debug$6('libp2p:peer-store:store'), {
	  error: debug$6('libp2p:peer-store:store:err')
	});

	/**
	 * @typedef {import('./types').PeerStore} PeerStore
	 * @typedef {import('./types').EventName} EventName
	 * @typedef {import('./types').Peer} Peer
	 */

	const NAMESPACE_COMMON = '/peers/';

	class PersistentStore {
	  /**
	   * @param {import('interface-datastore').Datastore} datastore
	   */
	  constructor (datastore) {
	    this._datastore = datastore;
	    this.lock = mortice('peer-store', {
	      singleProcess: true
	    });
	  }

	  /**
	   * @param {PeerId} peerId
	   * @returns {Key}
	   */
	  _peerIdToDatastoreKey (peerId) {
	    if (!PeerId$3.isPeerId(peerId)) {
	      log$8.error('peerId must be an instance of peer-id to store data');
	      throw errcode$2(new Error('peerId must be an instance of peer-id'), codes$3.ERR_INVALID_PARAMETERS)
	    }

	    const b32key = peerId.toString();
	    return new Key(`${NAMESPACE_COMMON}${b32key}`)
	  }

	  /**
	   * @param {PeerId} peerId
	   */
	  async has (peerId) {
	    return this._datastore.has(this._peerIdToDatastoreKey(peerId))
	  }

	  /**
	   * @param {PeerId} peerId
	   */
	  async delete (peerId) {
	    await this._datastore.delete(this._peerIdToDatastoreKey(peerId));
	  }

	  /**
	   * @param {PeerId} peerId
	   * @returns {Promise<import('./types').Peer>} peer
	   */
	  async load (peerId) {
	    const buf = await this._datastore.get(this._peerIdToDatastoreKey(peerId));
	    const peer = PeerPB.decode(buf);
	    const pubKey = peer.pubKey ? unmarshalPublicKey(peer.pubKey) : peerId.pubKey;
	    const metadata = new Map();

	    for (const meta of peer.metadata) {
	      metadata.set(meta.key, meta.value);
	    }

	    return {
	      ...peer,
	      id: peerId,
	      pubKey,
	      addresses: peer.addresses.map(({ multiaddr, isCertified }) => ({
	        multiaddr: new Multiaddr$3(multiaddr),
	        isCertified: isCertified || false
	      })),
	      metadata,
	      peerRecordEnvelope: peer.peerRecordEnvelope || undefined
	    }
	  }

	  /**
	   * @param {Peer} peer
	   */
	  async save (peer) {
	    if (peer.pubKey != null && peer.id.pubKey != null && !uint8arrayEquals(peer.pubKey.bytes, peer.id.pubKey.bytes)) {
	      log$8.error('peer publicKey bytes do not match peer id publicKey bytes');
	      throw errcode$2(new Error('publicKey bytes do not match peer id publicKey bytes'), codes$3.ERR_INVALID_PARAMETERS)
	    }

	    // dedupe addresses
	    const addressSet = new Set();

	    const buf = PeerPB.encode({
	      addresses: peer.addresses
	        .filter(address => {
	          if (addressSet.has(address.multiaddr.toString())) {
	            return false
	          }

	          addressSet.add(address.multiaddr.toString());
	          return true
	        })
	        .sort((a, b) => {
	          return a.multiaddr.toString().localeCompare(b.multiaddr.toString())
	        })
	        .map(({ multiaddr, isCertified }) => ({
	          multiaddr: multiaddr.bytes,
	          isCertified
	        })),
	      protocols: peer.protocols.sort(),
	      pubKey: peer.pubKey ? marshalPublicKey(peer.pubKey) : undefined,
	      metadata: [...peer.metadata.keys()].sort().map(key => ({ key, value: peer.metadata.get(key) })),
	      peerRecordEnvelope: peer.peerRecordEnvelope
	    }).finish();

	    await this._datastore.put(this._peerIdToDatastoreKey(peer.id), buf);

	    return this.load(peer.id)
	  }

	  /**
	   * @param {PeerId} peerId
	   * @param {Partial<Peer>} data
	   */
	  async patch (peerId, data) {
	    const peer = await this.load(peerId);

	    return await this._patch(peerId, data, peer)
	  }

	  /**
	   * @param {PeerId} peerId
	   * @param {Partial<Peer>} data
	   */
	  async patchOrCreate (peerId, data) {
	    /** @type {Peer} */
	    let peer;

	    try {
	      peer = await this.load(peerId);
	    } catch (/** @type {any} */ err) {
	      if (err.code !== codes$3.ERR_NOT_FOUND) {
	        throw err
	      }

	      peer = { id: peerId, addresses: [], protocols: [], metadata: new Map() };
	    }

	    return await this._patch(peerId, data, peer)
	  }

	  /**
	   * @param {PeerId} peerId
	   * @param {Partial<Peer>} data
	   * @param {Peer} peer
	   */
	  async _patch (peerId, data, peer) {
	    return await this.save({
	      ...peer,
	      ...data,
	      id: peerId
	    })
	  }

	  /**
	   * @param {PeerId} peerId
	   * @param {Partial<Peer>} data
	   */
	  async merge (peerId, data) {
	    const peer = await this.load(peerId);

	    return this._merge(peerId, data, peer)
	  }

	  /**
	   * @param {PeerId} peerId
	   * @param {Partial<Peer>} data
	   */
	  async mergeOrCreate (peerId, data) {
	    /** @type {Peer} */
	    let peer;

	    try {
	      peer = await this.load(peerId);
	    } catch (/** @type {any} */ err) {
	      if (err.code !== codes$3.ERR_NOT_FOUND) {
	        throw err
	      }

	      peer = { id: peerId, addresses: [], protocols: [], metadata: new Map() };
	    }

	    return await this._merge(peerId, data, peer)
	  }

	  /**
	   * @param {PeerId} peerId
	   * @param {Partial<Peer>} data
	   * @param {Peer} peer
	   */
	  async _merge (peerId, data, peer) {
	    // if the peer has certified addresses, use those in
	    // favour of the supplied versions
	    /** @type {Map<string, boolean>} */
	    const addresses = new Map()

	    ;(data.addresses || []).forEach(addr => {
	      addresses.set(addr.multiaddr.toString(), addr.isCertified);
	    });

	    peer.addresses.forEach(({ multiaddr, isCertified }) => {
	      const addrStr = multiaddr.toString();
	      addresses.set(addrStr, Boolean(addresses.get(addrStr) || isCertified));
	    });

	    return await this.save({
	      id: peerId,
	      addresses: Array.from(addresses.entries()).map(([addrStr, isCertified]) => {
	        return {
	          multiaddr: new Multiaddr$3(addrStr),
	          isCertified
	        }
	      }),
	      protocols: Array.from(new Set([
	        ...(peer.protocols || []),
	        ...(data.protocols || [])
	      ])),
	      metadata: new Map([
	        ...(peer.metadata ? peer.metadata.entries() : []),
	        ...(data.metadata ? data.metadata.entries() : [])
	      ]),
	      pubKey: data.pubKey || (peer != null ? peer.pubKey : undefined),
	      peerRecordEnvelope: data.peerRecordEnvelope || (peer != null ? peer.peerRecordEnvelope : undefined)
	    })
	  }

	  async * all () {
	    for await (const key of this._datastore.queryKeys({
	      prefix: NAMESPACE_COMMON
	    })) {
	      // /peers/${peer-id-as-libp2p-key-cid-string-in-base-32}
	      const base32Str = key.toString().split('/')[2];
	      const buf = base32.decode(base32Str);

	      yield this.load(PeerId$3.createFromBytes(buf));
	    }
	  }
	}

	var store = PersistentStore;

	const debug$5 = browser$a.exports;
	const { EventEmitter: EventEmitter$1 } = require$$1$5;
	const AddressBook = addressBook;
	const KeyBook = keyBook;
	const MetadataBook = metadataBook;
	const ProtoBook = protoBook;
	const Store = store;

	/**
	 * @typedef {import('./types').PeerStore} PeerStore
	 * @typedef {import('./types').Peer} Peer
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('multiaddr').Multiaddr} Multiaddr
	 */

	const log$7 = Object.assign(debug$5('libp2p:peer-store'), {
	  error: debug$5('libp2p:peer-store:err')
	});

	/**
	 * An implementation of PeerStore that stores data in a Datastore
	 *
	 * @implements {PeerStore}
	 */
	class DefaultPeerStore extends EventEmitter$1 {
	  /**
	   * @param {object} properties
	   * @param {PeerId} properties.peerId
	   * @param {import('interface-datastore').Datastore} properties.datastore
	   * @param {(peerId: PeerId, multiaddr: Multiaddr) => Promise<boolean>} properties.addressFilter
	   */
	  constructor ({ peerId, datastore, addressFilter }) {
	    super();

	    this._peerId = peerId;
	    this._store = new Store(datastore);

	    this.addressBook = new AddressBook(this.emit.bind(this), this._store, addressFilter);
	    this.keyBook = new KeyBook(this.emit.bind(this), this._store);
	    this.metadataBook = new MetadataBook(this.emit.bind(this), this._store);
	    this.protoBook = new ProtoBook(this.emit.bind(this), this._store);
	  }

	  async * getPeers () {
	    log$7('getPeers await read lock');
	    const release = await this._store.lock.readLock();
	    log$7('getPeers got read lock');

	    try {
	      for await (const peer of this._store.all()) {
	        if (peer.id.toB58String() === this._peerId.toB58String()) {
	          // Remove self peer if present
	          continue
	        }

	        yield peer;
	      }
	    } finally {
	      log$7('getPeers release read lock');
	      release();
	    }
	  }

	  /**
	   * Delete the information of the given peer in every book
	   *
	   * @param {PeerId} peerId
	   */
	  async delete (peerId) {
	    log$7('delete await write lock');
	    const release = await this._store.lock.writeLock();
	    log$7('delete got write lock');

	    try {
	      await this._store.delete(peerId);
	    } finally {
	      log$7('delete release write lock');
	      release();
	    }
	  }

	  /**
	   * Get the stored information of a given peer
	   *
	   * @param {PeerId} peerId
	   */
	  async get (peerId) {
	    log$7('get await read lock');
	    const release = await this._store.lock.readLock();
	    log$7('get got read lock');

	    try {
	      return this._store.load(peerId)
	    } finally {
	      log$7('get release read lock');
	      release();
	    }
	  }

	  /**
	   * Returns true if we have a record of the peer
	   *
	   * @param {PeerId} peerId
	   */
	  async has (peerId) {
	    log$7('has await read lock');
	    const release = await this._store.lock.readLock();
	    log$7('has got read lock');

	    try {
	      return this._store.has(peerId)
	    } finally {
	      log$7('has release read lock');
	      release();
	    }
	  }
	}

	var peerStore = DefaultPeerStore;

	// Pubsub adapter to keep API with handlers while not removed.
	/**
	 * @typedef {import('libp2p-interfaces/src/pubsub').InMessage} InMessage
	 * @typedef {import('libp2p-interfaces/src/pubsub')} PubsubRouter
	 */

	/**
	 * @param {{new(...args: any[]): PubsubRouter}} PubsubRouter
	 * @param {import('.')} libp2p
	 * @param {{ enabled: boolean; } & import(".").PubsubLocalOptions & import("libp2p-interfaces/src/pubsub").PubsubOptions} options
	 */
	function pubsubAdapter (PubsubRouter, libp2p, options) {
	  /** @type {PubsubRouter & { _subscribeAdapter: PubsubRouter['subscribe'], _unsubscribeAdapter: PubsubRouter['unsubscribe'] }} */
	  // @ts-ignore we set the extra _subscribeAdapter and _unsubscribeAdapter properties afterwards
	  const pubsub = new PubsubRouter(libp2p, options);
	  pubsub._subscribeAdapter = pubsub.subscribe;
	  pubsub._unsubscribeAdapter = pubsub.unsubscribe;

	  /**
	   * Subscribes to a given topic.
	   *
	   * @override
	   * @param {string} topic
	   * @param {(msg: InMessage) => void} [handler]
	   * @returns {void}
	   */
	  function subscribe (topic, handler) {
	    // Bind provided handler
	    handler && pubsub.on(topic, handler);
	    pubsub._subscribeAdapter(topic);
	  }

	  /**
	   * Unsubscribe from the given topic.
	   *
	   * @override
	   * @param {string} topic
	   * @param {(msg: InMessage) => void} [handler]
	   * @returns {void}
	   */
	  function unsubscribe (topic, handler) {
	    if (!handler) {
	      pubsub.removeAllListeners(topic);
	    } else {
	      pubsub.removeListener(topic, handler);
	    }

	    if (pubsub.listenerCount(topic) === 0) {
	      pubsub._unsubscribeAdapter(topic);
	    }
	  }

	  pubsub.subscribe = subscribe;
	  pubsub.unsubscribe = unsubscribe;

	  return pubsub
	}

	var pubsubAdapter_1 = pubsubAdapter;

	const debug$4 = browser$a.exports;
	const log$6 = Object.assign(debug$4('libp2p:registrar'), {
	  error: debug$4('libp2p:registrar:err')
	});
	const errcode$1 = errCode$q;

	const {
	  codes: { ERR_INVALID_PARAMETERS: ERR_INVALID_PARAMETERS$1 }
	} = errors$3;
	const Topology = topology;

	/**
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('./peer-store/types').PeerStore} PeerStore
	 * @typedef {import('./connection-manager')} ConnectionManager
	 * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection
	 * @typedef {import('./').HandlerProps} HandlerProps
	 */

	/**
	 *
	 */

	/**
	 * Responsible for notifying registered protocols of events in the network.
	 */
	class Registrar$1 {
	  /**
	   * @param {Object} props
	   * @param {PeerStore} props.peerStore
	   * @param {ConnectionManager} props.connectionManager
	   * @class
	   */
	  constructor ({ peerStore, connectionManager }) {
	    // Used on topology to listen for protocol changes
	    this.peerStore = peerStore;

	    this.connectionManager = connectionManager;

	    /**
	     * Map of topologies
	     *
	     * @type {Map<string, Topology>}
	     */
	    this.topologies = new Map();

	    /** @type {(protocols: string[]|string, handler: (props: HandlerProps) => void) => void} */
	    // @ts-ignore handle is not optional
	    this._handle = undefined;

	    this._onDisconnect = this._onDisconnect.bind(this);
	    this.connectionManager.on('peer:disconnect', this._onDisconnect);
	  }

	  /**
	   * @returns {(protocols: string[]|string, handler: (props: HandlerProps) => void) => void}
	   */
	  get handle () {
	    return this._handle
	  }

	  /**
	   * @param {(protocols: string[]|string, handler: (props: HandlerProps) => void) => void} handle
	   */
	  set handle (handle) {
	    this._handle = handle;
	  }

	  /**
	   * Get a connection with a peer.
	   *
	   * @param {PeerId} peerId
	   * @returns {Connection | null}
	   */
	  getConnection (peerId) {
	    return this.connectionManager.get(peerId)
	  }

	  /**
	   * Register handlers for a set of multicodecs given
	   *
	   * @param {Topology} topology - protocol topology
	   * @returns {Promise<string>} registrar identifier
	   */
	  async register (topology) {
	    if (!Topology.isTopology(topology)) {
	      log$6.error('topology must be an instance of interfaces/topology');
	      throw errcode$1(new Error('topology must be an instance of interfaces/topology'), ERR_INVALID_PARAMETERS$1)
	    }

	    // Create topology
	    const id = (Math.random() * 1e9).toString(36) + Date.now();

	    this.topologies.set(id, topology);

	    // Set registrar
	    await topology.setRegistrar(this);

	    return id
	  }

	  /**
	   * Unregister topology.
	   *
	   * @param {string} id - registrar identifier
	   * @returns {boolean} unregistered successfully
	   */
	  unregister (id) {
	    return this.topologies.delete(id)
	  }

	  /**
	   * Remove a disconnected peer from the record
	   *
	   * @param {Connection} connection
	   * @returns {void}
	   */
	  _onDisconnect (connection) {
	    for (const [, topology] of this.topologies) {
	      topology.disconnect(connection.remotePeer);
	    }
	  }
	}

	var registrar = Registrar$1;

	/*eslint-disable*/

	var $protobuf$1 = minimal;

	// Common aliases
	var $Reader$2 = $protobuf$1.Reader, $Writer$2 = $protobuf$1.Writer, $util$2 = $protobuf$1.util;

	// Exported root namespace
	var $root$2 = $protobuf$1.roots["libp2p-identify"] || ($protobuf$1.roots["libp2p-identify"] = {});

	$root$2.Identify = (function() {

	    /**
	     * Properties of an Identify.
	     * @exports IIdentify
	     * @interface IIdentify
	     * @property {string|null} [protocolVersion] Identify protocolVersion
	     * @property {string|null} [agentVersion] Identify agentVersion
	     * @property {Uint8Array|null} [publicKey] Identify publicKey
	     * @property {Array.<Uint8Array>|null} [listenAddrs] Identify listenAddrs
	     * @property {Uint8Array|null} [observedAddr] Identify observedAddr
	     * @property {Array.<string>|null} [protocols] Identify protocols
	     * @property {Uint8Array|null} [signedPeerRecord] Identify signedPeerRecord
	     */

	    /**
	     * Constructs a new Identify.
	     * @exports Identify
	     * @classdesc Represents an Identify.
	     * @implements IIdentify
	     * @constructor
	     * @param {IIdentify=} [p] Properties to set
	     */
	    function Identify(p) {
	        this.listenAddrs = [];
	        this.protocols = [];
	        if (p)
	            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                if (p[ks[i]] != null)
	                    this[ks[i]] = p[ks[i]];
	    }

	    /**
	     * Identify protocolVersion.
	     * @member {string} protocolVersion
	     * @memberof Identify
	     * @instance
	     */
	    Identify.prototype.protocolVersion = "";

	    /**
	     * Identify agentVersion.
	     * @member {string} agentVersion
	     * @memberof Identify
	     * @instance
	     */
	    Identify.prototype.agentVersion = "";

	    /**
	     * Identify publicKey.
	     * @member {Uint8Array} publicKey
	     * @memberof Identify
	     * @instance
	     */
	    Identify.prototype.publicKey = $util$2.newBuffer([]);

	    /**
	     * Identify listenAddrs.
	     * @member {Array.<Uint8Array>} listenAddrs
	     * @memberof Identify
	     * @instance
	     */
	    Identify.prototype.listenAddrs = $util$2.emptyArray;

	    /**
	     * Identify observedAddr.
	     * @member {Uint8Array} observedAddr
	     * @memberof Identify
	     * @instance
	     */
	    Identify.prototype.observedAddr = $util$2.newBuffer([]);

	    /**
	     * Identify protocols.
	     * @member {Array.<string>} protocols
	     * @memberof Identify
	     * @instance
	     */
	    Identify.prototype.protocols = $util$2.emptyArray;

	    /**
	     * Identify signedPeerRecord.
	     * @member {Uint8Array} signedPeerRecord
	     * @memberof Identify
	     * @instance
	     */
	    Identify.prototype.signedPeerRecord = $util$2.newBuffer([]);

	    /**
	     * Encodes the specified Identify message. Does not implicitly {@link Identify.verify|verify} messages.
	     * @function encode
	     * @memberof Identify
	     * @static
	     * @param {IIdentify} m Identify message or plain object to encode
	     * @param {$protobuf.Writer} [w] Writer to encode to
	     * @returns {$protobuf.Writer} Writer
	     */
	    Identify.encode = function encode(m, w) {
	        if (!w)
	            w = $Writer$2.create();
	        if (m.publicKey != null && Object.hasOwnProperty.call(m, "publicKey"))
	            w.uint32(10).bytes(m.publicKey);
	        if (m.listenAddrs != null && m.listenAddrs.length) {
	            for (var i = 0; i < m.listenAddrs.length; ++i)
	                w.uint32(18).bytes(m.listenAddrs[i]);
	        }
	        if (m.protocols != null && m.protocols.length) {
	            for (var i = 0; i < m.protocols.length; ++i)
	                w.uint32(26).string(m.protocols[i]);
	        }
	        if (m.observedAddr != null && Object.hasOwnProperty.call(m, "observedAddr"))
	            w.uint32(34).bytes(m.observedAddr);
	        if (m.protocolVersion != null && Object.hasOwnProperty.call(m, "protocolVersion"))
	            w.uint32(42).string(m.protocolVersion);
	        if (m.agentVersion != null && Object.hasOwnProperty.call(m, "agentVersion"))
	            w.uint32(50).string(m.agentVersion);
	        if (m.signedPeerRecord != null && Object.hasOwnProperty.call(m, "signedPeerRecord"))
	            w.uint32(66).bytes(m.signedPeerRecord);
	        return w;
	    };

	    /**
	     * Decodes an Identify message from the specified reader or buffer.
	     * @function decode
	     * @memberof Identify
	     * @static
	     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	     * @param {number} [l] Message length if known beforehand
	     * @returns {Identify} Identify
	     * @throws {Error} If the payload is not a reader or valid buffer
	     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	     */
	    Identify.decode = function decode(r, l) {
	        if (!(r instanceof $Reader$2))
	            r = $Reader$2.create(r);
	        var c = l === undefined ? r.len : r.pos + l, m = new $root$2.Identify();
	        while (r.pos < c) {
	            var t = r.uint32();
	            switch (t >>> 3) {
	            case 5:
	                m.protocolVersion = r.string();
	                break;
	            case 6:
	                m.agentVersion = r.string();
	                break;
	            case 1:
	                m.publicKey = r.bytes();
	                break;
	            case 2:
	                if (!(m.listenAddrs && m.listenAddrs.length))
	                    m.listenAddrs = [];
	                m.listenAddrs.push(r.bytes());
	                break;
	            case 4:
	                m.observedAddr = r.bytes();
	                break;
	            case 3:
	                if (!(m.protocols && m.protocols.length))
	                    m.protocols = [];
	                m.protocols.push(r.string());
	                break;
	            case 8:
	                m.signedPeerRecord = r.bytes();
	                break;
	            default:
	                r.skipType(t & 7);
	                break;
	            }
	        }
	        return m;
	    };

	    /**
	     * Creates an Identify message from a plain object. Also converts values to their respective internal types.
	     * @function fromObject
	     * @memberof Identify
	     * @static
	     * @param {Object.<string,*>} d Plain object
	     * @returns {Identify} Identify
	     */
	    Identify.fromObject = function fromObject(d) {
	        if (d instanceof $root$2.Identify)
	            return d;
	        var m = new $root$2.Identify();
	        if (d.protocolVersion != null) {
	            m.protocolVersion = String(d.protocolVersion);
	        }
	        if (d.agentVersion != null) {
	            m.agentVersion = String(d.agentVersion);
	        }
	        if (d.publicKey != null) {
	            if (typeof d.publicKey === "string")
	                $util$2.base64.decode(d.publicKey, m.publicKey = $util$2.newBuffer($util$2.base64.length(d.publicKey)), 0);
	            else if (d.publicKey.length)
	                m.publicKey = d.publicKey;
	        }
	        if (d.listenAddrs) {
	            if (!Array.isArray(d.listenAddrs))
	                throw TypeError(".Identify.listenAddrs: array expected");
	            m.listenAddrs = [];
	            for (var i = 0; i < d.listenAddrs.length; ++i) {
	                if (typeof d.listenAddrs[i] === "string")
	                    $util$2.base64.decode(d.listenAddrs[i], m.listenAddrs[i] = $util$2.newBuffer($util$2.base64.length(d.listenAddrs[i])), 0);
	                else if (d.listenAddrs[i].length)
	                    m.listenAddrs[i] = d.listenAddrs[i];
	            }
	        }
	        if (d.observedAddr != null) {
	            if (typeof d.observedAddr === "string")
	                $util$2.base64.decode(d.observedAddr, m.observedAddr = $util$2.newBuffer($util$2.base64.length(d.observedAddr)), 0);
	            else if (d.observedAddr.length)
	                m.observedAddr = d.observedAddr;
	        }
	        if (d.protocols) {
	            if (!Array.isArray(d.protocols))
	                throw TypeError(".Identify.protocols: array expected");
	            m.protocols = [];
	            for (var i = 0; i < d.protocols.length; ++i) {
	                m.protocols[i] = String(d.protocols[i]);
	            }
	        }
	        if (d.signedPeerRecord != null) {
	            if (typeof d.signedPeerRecord === "string")
	                $util$2.base64.decode(d.signedPeerRecord, m.signedPeerRecord = $util$2.newBuffer($util$2.base64.length(d.signedPeerRecord)), 0);
	            else if (d.signedPeerRecord.length)
	                m.signedPeerRecord = d.signedPeerRecord;
	        }
	        return m;
	    };

	    /**
	     * Creates a plain object from an Identify message. Also converts values to other types if specified.
	     * @function toObject
	     * @memberof Identify
	     * @static
	     * @param {Identify} m Identify
	     * @param {$protobuf.IConversionOptions} [o] Conversion options
	     * @returns {Object.<string,*>} Plain object
	     */
	    Identify.toObject = function toObject(m, o) {
	        if (!o)
	            o = {};
	        var d = {};
	        if (o.arrays || o.defaults) {
	            d.listenAddrs = [];
	            d.protocols = [];
	        }
	        if (o.defaults) {
	            if (o.bytes === String)
	                d.publicKey = "";
	            else {
	                d.publicKey = [];
	                if (o.bytes !== Array)
	                    d.publicKey = $util$2.newBuffer(d.publicKey);
	            }
	            if (o.bytes === String)
	                d.observedAddr = "";
	            else {
	                d.observedAddr = [];
	                if (o.bytes !== Array)
	                    d.observedAddr = $util$2.newBuffer(d.observedAddr);
	            }
	            d.protocolVersion = "";
	            d.agentVersion = "";
	            if (o.bytes === String)
	                d.signedPeerRecord = "";
	            else {
	                d.signedPeerRecord = [];
	                if (o.bytes !== Array)
	                    d.signedPeerRecord = $util$2.newBuffer(d.signedPeerRecord);
	            }
	        }
	        if (m.publicKey != null && m.hasOwnProperty("publicKey")) {
	            d.publicKey = o.bytes === String ? $util$2.base64.encode(m.publicKey, 0, m.publicKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.publicKey) : m.publicKey;
	        }
	        if (m.listenAddrs && m.listenAddrs.length) {
	            d.listenAddrs = [];
	            for (var j = 0; j < m.listenAddrs.length; ++j) {
	                d.listenAddrs[j] = o.bytes === String ? $util$2.base64.encode(m.listenAddrs[j], 0, m.listenAddrs[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.listenAddrs[j]) : m.listenAddrs[j];
	            }
	        }
	        if (m.protocols && m.protocols.length) {
	            d.protocols = [];
	            for (var j = 0; j < m.protocols.length; ++j) {
	                d.protocols[j] = m.protocols[j];
	            }
	        }
	        if (m.observedAddr != null && m.hasOwnProperty("observedAddr")) {
	            d.observedAddr = o.bytes === String ? $util$2.base64.encode(m.observedAddr, 0, m.observedAddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.observedAddr) : m.observedAddr;
	        }
	        if (m.protocolVersion != null && m.hasOwnProperty("protocolVersion")) {
	            d.protocolVersion = m.protocolVersion;
	        }
	        if (m.agentVersion != null && m.hasOwnProperty("agentVersion")) {
	            d.agentVersion = m.agentVersion;
	        }
	        if (m.signedPeerRecord != null && m.hasOwnProperty("signedPeerRecord")) {
	            d.signedPeerRecord = o.bytes === String ? $util$2.base64.encode(m.signedPeerRecord, 0, m.signedPeerRecord.length) : o.bytes === Array ? Array.prototype.slice.call(m.signedPeerRecord) : m.signedPeerRecord;
	        }
	        return d;
	    };

	    /**
	     * Converts this Identify to JSON.
	     * @function toJSON
	     * @memberof Identify
	     * @instance
	     * @returns {Object.<string,*>} JSON object
	     */
	    Identify.prototype.toJSON = function toJSON() {
	        return this.constructor.toObject(this, $protobuf$1.util.toJSONOptions);
	    };

	    return Identify;
	})();

	var message = $root$2;

	const debug$3 = browser$a.exports;
	const log$5 = Object.assign(debug$3('libp2p:identify'), {
	  error: debug$3('libp2p:identify:err')
	});
	const errCode$2 = errCode$q;
	const lp = src$i;
	const { pipe: pipe$1 } = itPipe.exports;
	const { collect: collect$1, take: take$1, consume } = dist.exports;
	const { fromString: uint8ArrayFromString } = require$$5$3;

	const PeerId$2 = src$o.exports;
	const { Multiaddr: Multiaddr$2 } = src$s;
	// @ts-ignore it-buffer does not have types
	const { toBuffer: toBuffer$1 } = itBuffer.exports;

	const Message$1 = message;

	const Envelope = envelope;
	const PeerRecord = peerRecord;

	const {
	  MULTICODEC_IDENTIFY,
	  MULTICODEC_IDENTIFY_PUSH,
	  IDENTIFY_PROTOCOL_VERSION,
	  MULTICODEC_IDENTIFY_PROTOCOL_NAME,
	  MULTICODEC_IDENTIFY_PUSH_PROTOCOL_NAME,
	  MULTICODEC_IDENTIFY_PROTOCOL_VERSION,
	  MULTICODEC_IDENTIFY_PUSH_PROTOCOL_VERSION
	} = consts$1;

	const { codes: codes$2 } = errors$3;

	/**
	 * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection
	 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream
	 */

	/**
	 * @typedef {Object} HostProperties
	 * @property {string} agentVersion
	 */

	class IdentifyService$1 {
	  /**
	   * @param {import('../')} libp2p
	   */
	  static getProtocolStr (libp2p) {
	    return {
	      identifyProtocolStr: `/${libp2p._config.protocolPrefix}/${MULTICODEC_IDENTIFY_PROTOCOL_NAME}/${MULTICODEC_IDENTIFY_PROTOCOL_VERSION}`,
	      identifyPushProtocolStr: `/${libp2p._config.protocolPrefix}/${MULTICODEC_IDENTIFY_PUSH_PROTOCOL_NAME}/${MULTICODEC_IDENTIFY_PUSH_PROTOCOL_VERSION}`
	    }
	  }

	  /**
	   * @class
	   * @param {Object} options
	   * @param {import('../')} options.libp2p
	   */
	  constructor ({ libp2p }) {
	    this._libp2p = libp2p;
	    this.peerStore = libp2p.peerStore;
	    this.addressManager = libp2p.addressManager;
	    this.connectionManager = libp2p.connectionManager;
	    this.peerId = libp2p.peerId;

	    this.handleMessage = this.handleMessage.bind(this);

	    const protocolStr = IdentifyService$1.getProtocolStr(libp2p);
	    this.identifyProtocolStr = protocolStr.identifyProtocolStr;
	    this.identifyPushProtocolStr = protocolStr.identifyPushProtocolStr;

	    // Store self host metadata
	    this._host = {
	      protocolVersion: `${libp2p._config.protocolPrefix}/${IDENTIFY_PROTOCOL_VERSION}`,
	      ...libp2p._options.host
	    };

	    // When a new connection happens, trigger identify
	    this.connectionManager.on('peer:connect', (connection) => {
	      this.identify(connection).catch(log$5.error);
	    });

	    // When self multiaddrs change, trigger identify-push
	    this.peerStore.on('change:multiaddrs', ({ peerId }) => {
	      if (peerId.toString() === this.peerId.toString()) {
	        this.pushToPeerStore().catch(err => log$5.error(err));
	      }
	    });

	    // When self protocols change, trigger identify-push
	    this.peerStore.on('change:protocols', ({ peerId }) => {
	      if (peerId.toString() === this.peerId.toString()) {
	        this.pushToPeerStore().catch(err => log$5.error(err));
	      }
	    });
	  }

	  async start () {
	    await this.peerStore.metadataBook.setValue(this.peerId, 'AgentVersion', uint8ArrayFromString(this._host.agentVersion));
	    await this.peerStore.metadataBook.setValue(this.peerId, 'ProtocolVersion', uint8ArrayFromString(this._host.protocolVersion));
	  }

	  async stop () {

	  }

	  /**
	   * Send an Identify Push update to the list of connections
	   *
	   * @param {Connection[]} connections
	   * @returns {Promise<void[]>}
	   */
	  async push (connections) {
	    const signedPeerRecord = await this.peerStore.addressBook.getRawEnvelope(this.peerId);
	    const listenAddrs = this._libp2p.multiaddrs.map((ma) => ma.bytes);
	    const protocols = await this.peerStore.protoBook.get(this.peerId);

	    const pushes = connections.map(async connection => {
	      try {
	        const { stream } = await connection.newStream(this.identifyPushProtocolStr);

	        await pipe$1(
	          [Message$1.Identify.encode({
	            listenAddrs,
	            signedPeerRecord,
	            protocols
	          }).finish()],
	          lp.encode(),
	          stream,
	          consume
	        );
	      } catch (/** @type {any} */ err) {
	        // Just log errors
	        log$5.error('could not push identify update to peer', err);
	      }
	    });

	    return Promise.all(pushes)
	  }

	  /**
	   * Calls `push` for all peers in the `peerStore` that are connected
	   */
	  async pushToPeerStore () {
	    // Do not try to push if libp2p node is not running
	    if (!this._libp2p.isStarted()) {
	      return
	    }

	    const connections = [];
	    let connection;
	    for await (const peer of this.peerStore.getPeers()) {
	      if (peer.protocols.includes(this.identifyPushProtocolStr) && (connection = this.connectionManager.get(peer.id))) {
	        connections.push(connection);
	      }
	    }

	    await this.push(connections);
	  }

	  /**
	   * Requests the `Identify` message from peer associated with the given `connection`.
	   * If the identified peer does not match the `PeerId` associated with the connection,
	   * an error will be thrown.
	   *
	   * @async
	   * @param {Connection} connection
	   * @returns {Promise<void>}
	   */
	  async identify (connection) {
	    const { stream } = await connection.newStream(this.identifyProtocolStr);
	    const [data] = await pipe$1(
	      [],
	      stream,
	      lp.decode(),
	      take$1(1),
	      toBuffer$1,
	      collect$1
	    );

	    if (!data) {
	      throw errCode$2(new Error('No data could be retrieved'), codes$2.ERR_CONNECTION_ENDED)
	    }

	    let message;
	    try {
	      message = Message$1.Identify.decode(data);
	    } catch (/** @type {any} */ err) {
	      throw errCode$2(err, codes$2.ERR_INVALID_MESSAGE)
	    }

	    const {
	      publicKey,
	      listenAddrs,
	      protocols,
	      observedAddr,
	      signedPeerRecord
	    } = message;

	    const id = await PeerId$2.createFromPubKey(publicKey);

	    if (connection.remotePeer.toB58String() !== id.toB58String()) {
	      throw errCode$2(new Error('identified peer does not match the expected peer'), codes$2.ERR_INVALID_PEER)
	    }

	    // Get the observedAddr if there is one
	    const cleanObservedAddr = IdentifyService$1.getCleanMultiaddr(observedAddr);

	    try {
	      const envelope = await Envelope.openAndCertify(signedPeerRecord, PeerRecord.DOMAIN);
	      if (await this.peerStore.addressBook.consumePeerRecord(envelope)) {
	        await this.peerStore.protoBook.set(id, protocols);
	        await this.peerStore.metadataBook.setValue(id, 'AgentVersion', uint8ArrayFromString(message.agentVersion));
	        await this.peerStore.metadataBook.setValue(id, 'ProtocolVersion', uint8ArrayFromString(message.protocolVersion));
	        return
	      }
	    } catch (/** @type {any} */ err) {
	      log$5('received invalid envelope, discard it and fallback to listenAddrs is available', err);
	    }

	    // LEGACY: Update peers data in PeerStore
	    try {
	      await this.peerStore.addressBook.set(id, listenAddrs.map((addr) => new Multiaddr$2(addr)));
	    } catch (/** @type {any} */ err) {
	      log$5.error('received invalid addrs', err);
	    }

	    await this.peerStore.protoBook.set(id, protocols);
	    await this.peerStore.metadataBook.setValue(id, 'AgentVersion', uint8ArrayFromString(message.agentVersion));
	    await this.peerStore.metadataBook.setValue(id, 'ProtocolVersion', uint8ArrayFromString(message.protocolVersion));

	    // TODO: Add and score our observed addr
	    log$5('received observed address of %s', cleanObservedAddr);
	    // this.addressManager.addObservedAddr(observedAddr)
	  }

	  /**
	   * A handler to register with Libp2p to process identify messages.
	   *
	   * @param {Object} options
	   * @param {Connection} options.connection
	   * @param {MuxedStream} options.stream
	   * @param {string} options.protocol
	   * @returns {Promise<void>|undefined}
	   */
	  handleMessage ({ connection, stream, protocol }) {
	    switch (protocol) {
	      case this.identifyProtocolStr:
	        return this._handleIdentify({ connection, stream })
	      case this.identifyPushProtocolStr:
	        return this._handlePush({ connection, stream })
	      default:
	        log$5.error('cannot handle unknown protocol %s', protocol);
	    }
	  }

	  /**
	   * Sends the `Identify` response with the Signed Peer Record
	   * to the requesting peer over the given `connection`
	   *
	   * @private
	   * @param {Object} options
	   * @param {MuxedStream} options.stream
	   * @param {Connection} options.connection
	   * @returns {Promise<void>}
	   */
	  async _handleIdentify ({ connection, stream }) {
	    try {
	      let publicKey = new Uint8Array(0);
	      if (this.peerId.pubKey) {
	        publicKey = this.peerId.pubKey.bytes;
	      }

	      const signedPeerRecord = await this.peerStore.addressBook.getRawEnvelope(this.peerId);
	      const protocols = await this.peerStore.protoBook.get(this.peerId);

	      const message = Message$1.Identify.encode({
	        protocolVersion: this._host.protocolVersion,
	        agentVersion: this._host.agentVersion,
	        publicKey,
	        listenAddrs: this._libp2p.multiaddrs.map((ma) => ma.bytes),
	        signedPeerRecord,
	        observedAddr: connection.remoteAddr.bytes,
	        protocols
	      }).finish();

	      await pipe$1(
	        [message],
	        lp.encode(),
	        stream,
	        consume
	      );
	    } catch (/** @type {any} */ err) {
	      log$5.error('could not respond to identify request', err);
	    }
	  }

	  /**
	   * Reads the Identify Push message from the given `connection`
	   *
	   * @private
	   * @param {object} options
	   * @param {MuxedStream} options.stream
	   * @param {Connection} options.connection
	   * @returns {Promise<void>}
	   */
	  async _handlePush ({ connection, stream }) {
	    let message;
	    try {
	      const [data] = await pipe$1(
	        [],
	        stream,
	        lp.decode(),
	        take$1(1),
	        toBuffer$1,
	        collect$1
	      );
	      message = Message$1.Identify.decode(data);
	    } catch (/** @type {any} */ err) {
	      return log$5.error('received invalid message', err)
	    }

	    const id = connection.remotePeer;

	    try {
	      const envelope = await Envelope.openAndCertify(message.signedPeerRecord, PeerRecord.DOMAIN);
	      if (await this.peerStore.addressBook.consumePeerRecord(envelope)) {
	        await this.peerStore.protoBook.set(id, message.protocols);
	        return
	      }
	    } catch (/** @type {any} */ err) {
	      log$5('received invalid envelope, discard it and fallback to listenAddrs is available', err);
	    }

	    // LEGACY: Update peers data in PeerStore
	    try {
	      await this.peerStore.addressBook.set(id,
	        message.listenAddrs.map((addr) => new Multiaddr$2(addr)));
	    } catch (/** @type {any} */ err) {
	      log$5.error('received invalid addrs', err);
	    }

	    // Update the protocols
	    try {
	      await this.peerStore.protoBook.set(id, message.protocols);
	    } catch (/** @type {any} */ err) {
	      log$5.error('received invalid protocols', err);
	    }
	  }

	  /**
	   * Takes the `addr` and converts it to a Multiaddr if possible
	   *
	   * @param {Uint8Array | string} addr
	   * @returns {Multiaddr|null}
	   */
	  static getCleanMultiaddr (addr) {
	    if (addr && addr.length > 0) {
	      try {
	        return new Multiaddr$2(addr)
	      } catch (_) {
	        return null
	      }
	    }
	    return null
	  }
	}

	/**
	 * The protocols the IdentifyService supports
	 *
	 * @property multicodecs
	 */
	const multicodecs = {
	  IDENTIFY: MULTICODEC_IDENTIFY,
	  IDENTIFY_PUSH: MULTICODEC_IDENTIFY_PUSH
	};

	IdentifyService$1.multicodecs = multicodecs;
	IdentifyService$1.Messsage = Message$1;

	var identify = IdentifyService$1;

	var fetch = {exports: {}};

	/*eslint-disable*/

	var $protobuf = minimal;

	// Common aliases
	var $Reader$1 = $protobuf.Reader, $Writer$1 = $protobuf.Writer, $util$1 = $protobuf.util;

	// Exported root namespace
	var $root$1 = $protobuf.roots["libp2p-fetch"] || ($protobuf.roots["libp2p-fetch"] = {});

	$root$1.FetchRequest = (function() {

	    /**
	     * Properties of a FetchRequest.
	     * @exports IFetchRequest
	     * @interface IFetchRequest
	     * @property {string|null} [identifier] FetchRequest identifier
	     */

	    /**
	     * Constructs a new FetchRequest.
	     * @exports FetchRequest
	     * @classdesc Represents a FetchRequest.
	     * @implements IFetchRequest
	     * @constructor
	     * @param {IFetchRequest=} [p] Properties to set
	     */
	    function FetchRequest(p) {
	        if (p)
	            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                if (p[ks[i]] != null)
	                    this[ks[i]] = p[ks[i]];
	    }

	    /**
	     * FetchRequest identifier.
	     * @member {string} identifier
	     * @memberof FetchRequest
	     * @instance
	     */
	    FetchRequest.prototype.identifier = "";

	    /**
	     * Encodes the specified FetchRequest message. Does not implicitly {@link FetchRequest.verify|verify} messages.
	     * @function encode
	     * @memberof FetchRequest
	     * @static
	     * @param {IFetchRequest} m FetchRequest message or plain object to encode
	     * @param {$protobuf.Writer} [w] Writer to encode to
	     * @returns {$protobuf.Writer} Writer
	     */
	    FetchRequest.encode = function encode(m, w) {
	        if (!w)
	            w = $Writer$1.create();
	        if (m.identifier != null && Object.hasOwnProperty.call(m, "identifier"))
	            w.uint32(10).string(m.identifier);
	        return w;
	    };

	    /**
	     * Decodes a FetchRequest message from the specified reader or buffer.
	     * @function decode
	     * @memberof FetchRequest
	     * @static
	     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	     * @param {number} [l] Message length if known beforehand
	     * @returns {FetchRequest} FetchRequest
	     * @throws {Error} If the payload is not a reader or valid buffer
	     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	     */
	    FetchRequest.decode = function decode(r, l) {
	        if (!(r instanceof $Reader$1))
	            r = $Reader$1.create(r);
	        var c = l === undefined ? r.len : r.pos + l, m = new $root$1.FetchRequest();
	        while (r.pos < c) {
	            var t = r.uint32();
	            switch (t >>> 3) {
	            case 1:
	                m.identifier = r.string();
	                break;
	            default:
	                r.skipType(t & 7);
	                break;
	            }
	        }
	        return m;
	    };

	    /**
	     * Creates a FetchRequest message from a plain object. Also converts values to their respective internal types.
	     * @function fromObject
	     * @memberof FetchRequest
	     * @static
	     * @param {Object.<string,*>} d Plain object
	     * @returns {FetchRequest} FetchRequest
	     */
	    FetchRequest.fromObject = function fromObject(d) {
	        if (d instanceof $root$1.FetchRequest)
	            return d;
	        var m = new $root$1.FetchRequest();
	        if (d.identifier != null) {
	            m.identifier = String(d.identifier);
	        }
	        return m;
	    };

	    /**
	     * Creates a plain object from a FetchRequest message. Also converts values to other types if specified.
	     * @function toObject
	     * @memberof FetchRequest
	     * @static
	     * @param {FetchRequest} m FetchRequest
	     * @param {$protobuf.IConversionOptions} [o] Conversion options
	     * @returns {Object.<string,*>} Plain object
	     */
	    FetchRequest.toObject = function toObject(m, o) {
	        if (!o)
	            o = {};
	        var d = {};
	        if (o.defaults) {
	            d.identifier = "";
	        }
	        if (m.identifier != null && m.hasOwnProperty("identifier")) {
	            d.identifier = m.identifier;
	        }
	        return d;
	    };

	    /**
	     * Converts this FetchRequest to JSON.
	     * @function toJSON
	     * @memberof FetchRequest
	     * @instance
	     * @returns {Object.<string,*>} JSON object
	     */
	    FetchRequest.prototype.toJSON = function toJSON() {
	        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	    };

	    return FetchRequest;
	})();

	$root$1.FetchResponse = (function() {

	    /**
	     * Properties of a FetchResponse.
	     * @exports IFetchResponse
	     * @interface IFetchResponse
	     * @property {FetchResponse.StatusCode|null} [status] FetchResponse status
	     * @property {Uint8Array|null} [data] FetchResponse data
	     */

	    /**
	     * Constructs a new FetchResponse.
	     * @exports FetchResponse
	     * @classdesc Represents a FetchResponse.
	     * @implements IFetchResponse
	     * @constructor
	     * @param {IFetchResponse=} [p] Properties to set
	     */
	    function FetchResponse(p) {
	        if (p)
	            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	                if (p[ks[i]] != null)
	                    this[ks[i]] = p[ks[i]];
	    }

	    /**
	     * FetchResponse status.
	     * @member {FetchResponse.StatusCode} status
	     * @memberof FetchResponse
	     * @instance
	     */
	    FetchResponse.prototype.status = 0;

	    /**
	     * FetchResponse data.
	     * @member {Uint8Array} data
	     * @memberof FetchResponse
	     * @instance
	     */
	    FetchResponse.prototype.data = $util$1.newBuffer([]);

	    /**
	     * Encodes the specified FetchResponse message. Does not implicitly {@link FetchResponse.verify|verify} messages.
	     * @function encode
	     * @memberof FetchResponse
	     * @static
	     * @param {IFetchResponse} m FetchResponse message or plain object to encode
	     * @param {$protobuf.Writer} [w] Writer to encode to
	     * @returns {$protobuf.Writer} Writer
	     */
	    FetchResponse.encode = function encode(m, w) {
	        if (!w)
	            w = $Writer$1.create();
	        if (m.status != null && Object.hasOwnProperty.call(m, "status"))
	            w.uint32(8).int32(m.status);
	        if (m.data != null && Object.hasOwnProperty.call(m, "data"))
	            w.uint32(18).bytes(m.data);
	        return w;
	    };

	    /**
	     * Decodes a FetchResponse message from the specified reader or buffer.
	     * @function decode
	     * @memberof FetchResponse
	     * @static
	     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
	     * @param {number} [l] Message length if known beforehand
	     * @returns {FetchResponse} FetchResponse
	     * @throws {Error} If the payload is not a reader or valid buffer
	     * @throws {$protobuf.util.ProtocolError} If required fields are missing
	     */
	    FetchResponse.decode = function decode(r, l) {
	        if (!(r instanceof $Reader$1))
	            r = $Reader$1.create(r);
	        var c = l === undefined ? r.len : r.pos + l, m = new $root$1.FetchResponse();
	        while (r.pos < c) {
	            var t = r.uint32();
	            switch (t >>> 3) {
	            case 1:
	                m.status = r.int32();
	                break;
	            case 2:
	                m.data = r.bytes();
	                break;
	            default:
	                r.skipType(t & 7);
	                break;
	            }
	        }
	        return m;
	    };

	    /**
	     * Creates a FetchResponse message from a plain object. Also converts values to their respective internal types.
	     * @function fromObject
	     * @memberof FetchResponse
	     * @static
	     * @param {Object.<string,*>} d Plain object
	     * @returns {FetchResponse} FetchResponse
	     */
	    FetchResponse.fromObject = function fromObject(d) {
	        if (d instanceof $root$1.FetchResponse)
	            return d;
	        var m = new $root$1.FetchResponse();
	        switch (d.status) {
	        case "OK":
	        case 0:
	            m.status = 0;
	            break;
	        case "NOT_FOUND":
	        case 1:
	            m.status = 1;
	            break;
	        case "ERROR":
	        case 2:
	            m.status = 2;
	            break;
	        }
	        if (d.data != null) {
	            if (typeof d.data === "string")
	                $util$1.base64.decode(d.data, m.data = $util$1.newBuffer($util$1.base64.length(d.data)), 0);
	            else if (d.data.length)
	                m.data = d.data;
	        }
	        return m;
	    };

	    /**
	     * Creates a plain object from a FetchResponse message. Also converts values to other types if specified.
	     * @function toObject
	     * @memberof FetchResponse
	     * @static
	     * @param {FetchResponse} m FetchResponse
	     * @param {$protobuf.IConversionOptions} [o] Conversion options
	     * @returns {Object.<string,*>} Plain object
	     */
	    FetchResponse.toObject = function toObject(m, o) {
	        if (!o)
	            o = {};
	        var d = {};
	        if (o.defaults) {
	            d.status = o.enums === String ? "OK" : 0;
	            if (o.bytes === String)
	                d.data = "";
	            else {
	                d.data = [];
	                if (o.bytes !== Array)
	                    d.data = $util$1.newBuffer(d.data);
	            }
	        }
	        if (m.status != null && m.hasOwnProperty("status")) {
	            d.status = o.enums === String ? $root$1.FetchResponse.StatusCode[m.status] : m.status;
	        }
	        if (m.data != null && m.hasOwnProperty("data")) {
	            d.data = o.bytes === String ? $util$1.base64.encode(m.data, 0, m.data.length) : o.bytes === Array ? Array.prototype.slice.call(m.data) : m.data;
	        }
	        return d;
	    };

	    /**
	     * Converts this FetchResponse to JSON.
	     * @function toJSON
	     * @memberof FetchResponse
	     * @instance
	     * @returns {Object.<string,*>} JSON object
	     */
	    FetchResponse.prototype.toJSON = function toJSON() {
	        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
	    };

	    /**
	     * StatusCode enum.
	     * @name FetchResponse.StatusCode
	     * @enum {number}
	     * @property {number} OK=0 OK value
	     * @property {number} NOT_FOUND=1 NOT_FOUND value
	     * @property {number} ERROR=2 ERROR value
	     */
	    FetchResponse.StatusCode = (function() {
	        var valuesById = {}, values = Object.create(valuesById);
	        values[valuesById[0] = "OK"] = 0;
	        values[valuesById[1] = "NOT_FOUND"] = 1;
	        values[valuesById[2] = "ERROR"] = 2;
	        return values;
	    })();

	    return FetchResponse;
	})();

	var proto = $root$1;

	var constants$1 = {
	  // https://github.com/libp2p/specs/tree/master/fetch#wire-protocol
	  PROTOCOL: '/libp2p/fetch/0.0.1'
	};

	(function (module, exports) {

	const debug = browser$a.exports;
	const log = Object.assign(debug('libp2p:fetch'), {
	  error: debug('libp2p:fetch:err')
	});
	const errCode = errCode$q;
	const { codes } = errors$3;
	const lp = src$i;
	const { FetchRequest, FetchResponse } = proto;
	// @ts-ignore it-handshake does not export types
	const handshake = src$a;
	const { PROTOCOL } = constants$1;

	/**
	 * @typedef {import('../')} Libp2p
	 * @typedef {import('multiaddr').Multiaddr} Multiaddr
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream
	 * @typedef {(key: string) => Promise<Uint8Array | null>} LookupFunction
	 */

	/**
	 * A simple libp2p protocol for requesting a value corresponding to a key from a peer.
	 * Developers can register one or more lookup function for retrieving the value corresponding to
	 * a given key.  Each lookup function must act on a distinct part of the overall key space, defined
	 * by a fixed prefix that all keys that should be routed to that lookup function will start with.
	 */
	class FetchProtocol {
	  /**
	   * @param {Libp2p} libp2p
	   */
	  constructor (libp2p) {
	    this._lookupFunctions = new Map(); // Maps key prefix to value lookup function
	    this._libp2p = libp2p;
	    this.handleMessage = this.handleMessage.bind(this);
	  }

	  /**
	   * Sends a request to fetch the value associated with the given key from the given peer.
	   *
	   * @param {PeerId|Multiaddr} peer
	   * @param {string} key
	   * @returns {Promise<Uint8Array | null>}
	   */
	  async fetch (peer, key) {
	    // @ts-ignore multiaddr might not have toB58String
	    log('dialing %s to %s', this._protocol, peer.toB58String ? peer.toB58String() : peer);

	    const connection = await this._libp2p.dial(peer);
	    const { stream } = await connection.newStream(FetchProtocol.PROTOCOL);
	    const shake = handshake(stream);

	    // send message
	    const request = new FetchRequest({ identifier: key });
	    shake.write(lp.encode.single(FetchRequest.encode(request).finish()));

	    // read response
	    const response = FetchResponse.decode((await lp.decode.fromReader(shake.reader).next()).value.slice());
	    switch (response.status) {
	      case (FetchResponse.StatusCode.OK): {
	        return response.data
	      }
	      case (FetchResponse.StatusCode.NOT_FOUND): {
	        return null
	      }
	      case (FetchResponse.StatusCode.ERROR): {
	        const errmsg = (new TextDecoder()).decode(response.data);
	        throw errCode(new Error('Error in fetch protocol response: ' + errmsg), codes.ERR_INVALID_PARAMETERS)
	      }
	      default: {
	        throw errCode(new Error('Unknown response status'), codes.ERR_INVALID_MESSAGE)
	      }
	    }
	  }

	  /**
	   * Invoked when a fetch request is received.  Reads the request message off the given stream and
	   * responds based on looking up the key in the request via the lookup callback that corresponds
	   * to the key's prefix.
	   *
	   * @param {object} options
	   * @param {MuxedStream} options.stream
	   * @param {string} options.protocol
	   */
	  async handleMessage (options) {
	    const { stream } = options;
	    const shake = handshake(stream);
	    const request = FetchRequest.decode((await lp.decode.fromReader(shake.reader).next()).value.slice());

	    let response;
	    const lookup = this._getLookupFunction(request.identifier);
	    if (lookup) {
	      const data = await lookup(request.identifier);
	      if (data) {
	        response = new FetchResponse({ status: FetchResponse.StatusCode.OK, data });
	      } else {
	        response = new FetchResponse({ status: FetchResponse.StatusCode.NOT_FOUND });
	      }
	    } else {
	      const errmsg = (new TextEncoder()).encode('No lookup function registered for key: ' + request.identifier);
	      response = new FetchResponse({ status: FetchResponse.StatusCode.ERROR, data: errmsg });
	    }

	    shake.write(lp.encode.single(FetchResponse.encode(response).finish()));
	  }

	  /**
	   * Given a key, finds the appropriate function for looking up its corresponding value, based on
	   * the key's prefix.
	   *
	   * @param {string} key
	   */
	  _getLookupFunction (key) {
	    for (const prefix of this._lookupFunctions.keys()) {
	      if (key.startsWith(prefix)) {
	        return this._lookupFunctions.get(prefix)
	      }
	    }
	    return null
	  }

	  /**
	   * Registers a new lookup callback that can map keys to values, for a given set of keys that
	   * share the same prefix.
	   *
	   * @param {string} prefix
	   * @param {LookupFunction} lookup
	   */
	  registerLookupFunction (prefix, lookup) {
	    if (this._lookupFunctions.has(prefix)) {
	      throw errCode(new Error("Fetch protocol handler for key prefix '" + prefix + "' already registered"), codes.ERR_KEY_ALREADY_EXISTS)
	    }
	    this._lookupFunctions.set(prefix, lookup);
	  }

	  /**
	   * Registers a new lookup callback that can map keys to values, for a given set of keys that
	   * share the same prefix.
	   *
	   * @param {string} prefix
	   * @param {LookupFunction} [lookup]
	   */
	  unregisterLookupFunction (prefix, lookup) {
	    if (lookup != null) {
	      const existingLookup = this._lookupFunctions.get(prefix);

	      if (existingLookup !== lookup) {
	        return
	      }
	    }

	    this._lookupFunctions.delete(prefix);
	  }
	}

	FetchProtocol.PROTOCOL = PROTOCOL;

	module.exports = FetchProtocol;
	}(fetch));

	var constants = {
	  PROTOCOL: '/ipfs/ping/1.0.0', // deprecated
	  PING_LENGTH: 32,
	  PROTOCOL_VERSION: '1.0.0',
	  PROTOCOL_NAME: 'ping'
	};

	const debug$2 = browser$a.exports;
	const log$4 = Object.assign(debug$2('libp2p:ping'), {
	  error: debug$2('libp2p:ping:err')
	});
	const errCode$1 = errCode$q;
	const { codes: codes$1 } = errors$3;
	const crypto$2 = src$n;
	const { pipe } = itPipe.exports;
	// @ts-ignore it-buffer has no types exported
	const { toBuffer } = itBuffer.exports;
	const { collect, take } = dist.exports;
	const { equals } = require$$7$1;

	const { PROTOCOL_NAME, PING_LENGTH, PROTOCOL_VERSION } = constants;

	/**
	 * @typedef {import('../')} Libp2p
	 * @typedef {import('multiaddr').Multiaddr} Multiaddr
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream
	 */

	class PingService$1 {
	  /**
	   * @param {import('../')} libp2p
	   */
	  static getProtocolStr (libp2p) {
	    return `/${libp2p._config.protocolPrefix}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`
	  }

	  /**
	   * @param {Libp2p} libp2p
	   */
	  constructor (libp2p) {
	    this._libp2p = libp2p;
	  }

	  /**
	   * A handler to register with Libp2p to process ping messages
	   *
	   * @param {Object} options
	   * @param {MuxedStream} options.stream
	   */
	  handleMessage ({ stream }) {
	    return pipe(stream, stream)
	  }

	  /**
	   * Ping a given peer and wait for its response, getting the operation latency.
	   *
	   * @param {PeerId|Multiaddr} peer
	   * @returns {Promise<number>}
	   */
	  async ping (peer) {
	    const protocol = `/${this._libp2p._config.protocolPrefix}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`;
	    // @ts-ignore multiaddr might not have toB58String
	    log$4('dialing %s to %s', protocol, peer.toB58String ? peer.toB58String() : peer);

	    const connection = await this._libp2p.dial(peer);
	    const { stream } = await connection.newStream(protocol);

	    const start = Date.now();
	    const data = crypto$2.randomBytes(PING_LENGTH);

	    const [result] = await pipe(
	      [data],
	      stream,
	      (/** @type {MuxedStream} */ stream) => take(1, stream),
	      toBuffer,
	      collect
	    );
	    const end = Date.now();

	    if (!equals(data, result)) {
	      throw errCode$1(new Error('Received wrong ping ack'), codes$1.ERR_WRONG_PING_ACK)
	    }

	    return end - start
	  }
	}

	var ping = PingService$1;

	var promisify$1 = {};

	(function (exports) {
	Object.defineProperty(exports,"__esModule",{value:!0}),exports.promisify=promisify;var customArgumentsToken="__ES6-PROMISIFY--CUSTOM-ARGUMENTS__";function promisify(a){if("function"!=typeof a)throw new TypeError("Argument to promisify must be a function");var b=a[customArgumentsToken],c=promisify.Promise||Promise;if("function"!=typeof c)throw new Error("No Promise implementation found; do you need a polyfill?");return function(){for(var d=this,e=arguments.length,f=Array(e),g=0;g<e;g++)f[g]=arguments[g];return new c(function(c,e){f.push(function(a){if(a)return e(a);for(var d=arguments.length,f=Array(1<d?d-1:0),g=1;g<d;g++)f[g-1]=arguments[g];if(1===f.length||!b)return c(f[0]);var h={};f.forEach(function(a,c){var d=b[c];d&&(h[d]=a);}),c(h);}),a.apply(d,f);})}}promisify.argumentNames="__ES6-PROMISIFY--CUSTOM-ARGUMENTS__",promisify.Promise=void 0;
	}(promisify$1));

	/** @type {() => boolean} */
	// @ts-ignore
	const isElectron = isElectron_1;

	const IS_ENV_WITH_DOM = typeof window === 'object' && typeof document === 'object' && document.nodeType === 9;

	const IS_ELECTRON = isElectron();
	const IS_BROWSER = IS_ENV_WITH_DOM && !IS_ELECTRON;
	const IS_ELECTRON_MAIN = IS_ELECTRON && !IS_ENV_WITH_DOM;
	const IS_ELECTRON_RENDERER = IS_ELECTRON && IS_ENV_WITH_DOM;
	const IS_NODE = typeof commonjsRequire === 'function' && typeof process$3 !== 'undefined' && typeof process$3.release !== 'undefined' && process$3.release.name === 'node' && !IS_ELECTRON;
	// @ts-ignore
	// eslint-disable-next-line no-undef
	const IS_WEBWORKER = typeof importScripts === 'function' && typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;
	const IS_TEST = typeof process$3 !== 'undefined' && typeof process$3.env !== 'undefined' && "development" === 'test';

	var src$2 = {
	  isTest: IS_TEST,
	  isElectron: IS_ELECTRON,
	  isElectronMain: IS_ELECTRON_MAIN,
	  isElectronRenderer: IS_ELECTRON_RENDERER,
	  isNode: IS_NODE,
	  /**
	   * Detects browser main thread  **NOT** web worker or service worker
	   */
	  isBrowser: IS_BROWSER,
	  isWebWorker: IS_WEBWORKER,
	  isEnvWithDom: IS_ENV_WITH_DOM
	};

	var pRetry$1 = {exports: {}};

	var retry$3 = {};

	function RetryOperation(timeouts, options) {
	  // Compatibility for the old (timeouts, retryForever) signature
	  if (typeof options === 'boolean') {
	    options = { forever: options };
	  }

	  this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));
	  this._timeouts = timeouts;
	  this._options = options || {};
	  this._maxRetryTime = options && options.maxRetryTime || Infinity;
	  this._fn = null;
	  this._errors = [];
	  this._attempts = 1;
	  this._operationTimeout = null;
	  this._operationTimeoutCb = null;
	  this._timeout = null;
	  this._operationStart = null;
	  this._timer = null;

	  if (this._options.forever) {
	    this._cachedTimeouts = this._timeouts.slice(0);
	  }
	}
	var retry_operation = RetryOperation;

	RetryOperation.prototype.reset = function() {
	  this._attempts = 1;
	  this._timeouts = this._originalTimeouts.slice(0);
	};

	RetryOperation.prototype.stop = function() {
	  if (this._timeout) {
	    clearTimeout(this._timeout);
	  }
	  if (this._timer) {
	    clearTimeout(this._timer);
	  }

	  this._timeouts       = [];
	  this._cachedTimeouts = null;
	};

	RetryOperation.prototype.retry = function(err) {
	  if (this._timeout) {
	    clearTimeout(this._timeout);
	  }

	  if (!err) {
	    return false;
	  }
	  var currentTime = new Date().getTime();
	  if (err && currentTime - this._operationStart >= this._maxRetryTime) {
	    this._errors.push(err);
	    this._errors.unshift(new Error('RetryOperation timeout occurred'));
	    return false;
	  }

	  this._errors.push(err);

	  var timeout = this._timeouts.shift();
	  if (timeout === undefined) {
	    if (this._cachedTimeouts) {
	      // retry forever, only keep last error
	      this._errors.splice(0, this._errors.length - 1);
	      timeout = this._cachedTimeouts.slice(-1);
	    } else {
	      return false;
	    }
	  }

	  var self = this;
	  this._timer = setTimeout(function() {
	    self._attempts++;

	    if (self._operationTimeoutCb) {
	      self._timeout = setTimeout(function() {
	        self._operationTimeoutCb(self._attempts);
	      }, self._operationTimeout);

	      if (self._options.unref) {
	          self._timeout.unref();
	      }
	    }

	    self._fn(self._attempts);
	  }, timeout);

	  if (this._options.unref) {
	      this._timer.unref();
	  }

	  return true;
	};

	RetryOperation.prototype.attempt = function(fn, timeoutOps) {
	  this._fn = fn;

	  if (timeoutOps) {
	    if (timeoutOps.timeout) {
	      this._operationTimeout = timeoutOps.timeout;
	    }
	    if (timeoutOps.cb) {
	      this._operationTimeoutCb = timeoutOps.cb;
	    }
	  }

	  var self = this;
	  if (this._operationTimeoutCb) {
	    this._timeout = setTimeout(function() {
	      self._operationTimeoutCb();
	    }, self._operationTimeout);
	  }

	  this._operationStart = new Date().getTime();

	  this._fn(this._attempts);
	};

	RetryOperation.prototype.try = function(fn) {
	  this.attempt(fn);
	};

	RetryOperation.prototype.start = function(fn) {
	  this.attempt(fn);
	};

	RetryOperation.prototype.start = RetryOperation.prototype.try;

	RetryOperation.prototype.errors = function() {
	  return this._errors;
	};

	RetryOperation.prototype.attempts = function() {
	  return this._attempts;
	};

	RetryOperation.prototype.mainError = function() {
	  if (this._errors.length === 0) {
	    return null;
	  }

	  var counts = {};
	  var mainError = null;
	  var mainErrorCount = 0;

	  for (var i = 0; i < this._errors.length; i++) {
	    var error = this._errors[i];
	    var message = error.message;
	    var count = (counts[message] || 0) + 1;

	    counts[message] = count;

	    if (count >= mainErrorCount) {
	      mainError = error;
	      mainErrorCount = count;
	    }
	  }

	  return mainError;
	};

	(function (exports) {
	var RetryOperation = retry_operation;

	exports.operation = function(options) {
	  var timeouts = exports.timeouts(options);
	  return new RetryOperation(timeouts, {
	      forever: options && (options.forever || options.retries === Infinity),
	      unref: options && options.unref,
	      maxRetryTime: options && options.maxRetryTime
	  });
	};

	exports.timeouts = function(options) {
	  if (options instanceof Array) {
	    return [].concat(options);
	  }

	  var opts = {
	    retries: 10,
	    factor: 2,
	    minTimeout: 1 * 1000,
	    maxTimeout: Infinity,
	    randomize: false
	  };
	  for (var key in options) {
	    opts[key] = options[key];
	  }

	  if (opts.minTimeout > opts.maxTimeout) {
	    throw new Error('minTimeout is greater than maxTimeout');
	  }

	  var timeouts = [];
	  for (var i = 0; i < opts.retries; i++) {
	    timeouts.push(this.createTimeout(i, opts));
	  }

	  if (options && options.forever && !timeouts.length) {
	    timeouts.push(this.createTimeout(i, opts));
	  }

	  // sort the array numerically ascending
	  timeouts.sort(function(a,b) {
	    return a - b;
	  });

	  return timeouts;
	};

	exports.createTimeout = function(attempt, opts) {
	  var random = (opts.randomize)
	    ? (Math.random() + 1)
	    : 1;

	  var timeout = Math.round(random * Math.max(opts.minTimeout, 1) * Math.pow(opts.factor, attempt));
	  timeout = Math.min(timeout, opts.maxTimeout);

	  return timeout;
	};

	exports.wrap = function(obj, options, methods) {
	  if (options instanceof Array) {
	    methods = options;
	    options = null;
	  }

	  if (!methods) {
	    methods = [];
	    for (var key in obj) {
	      if (typeof obj[key] === 'function') {
	        methods.push(key);
	      }
	    }
	  }

	  for (var i = 0; i < methods.length; i++) {
	    var method   = methods[i];
	    var original = obj[method];

	    obj[method] = function retryWrapper(original) {
	      var op       = exports.operation(options);
	      var args     = Array.prototype.slice.call(arguments, 1);
	      var callback = args.pop();

	      args.push(function(err) {
	        if (op.retry(err)) {
	          return;
	        }
	        if (err) {
	          arguments[0] = op.mainError();
	        }
	        callback.apply(this, arguments);
	      });

	      op.attempt(function() {
	        original.apply(obj, args);
	      });
	    }.bind(obj, original);
	    obj[method].options = options;
	  }
	};
	}(retry$3));

	var retry$2 = retry$3;

	const retry$1 = retry$2;

	const networkErrorMsgs = [
		'Failed to fetch', // Chrome
		'NetworkError when attempting to fetch resource.', // Firefox
		'The Internet connection appears to be offline.', // Safari
		'Network request failed' // `cross-fetch`
	];

	class AbortError extends Error {
		constructor(message) {
			super();

			if (message instanceof Error) {
				this.originalError = message;
				({message} = message);
			} else {
				this.originalError = new Error(message);
				this.originalError.stack = this.stack;
			}

			this.name = 'AbortError';
			this.message = message;
		}
	}

	const decorateErrorWithCounts = (error, attemptNumber, options) => {
		// Minus 1 from attemptNumber because the first attempt does not count as a retry
		const retriesLeft = options.retries - (attemptNumber - 1);

		error.attemptNumber = attemptNumber;
		error.retriesLeft = retriesLeft;
		return error;
	};

	const isNetworkError = errorMessage => networkErrorMsgs.includes(errorMessage);

	const pRetry = (input, options) => new Promise((resolve, reject) => {
		options = {
			onFailedAttempt: () => {},
			retries: 10,
			...options
		};

		const operation = retry$1.operation(options);

		operation.attempt(async attemptNumber => {
			try {
				resolve(await input(attemptNumber));
			} catch (error) {
				if (!(error instanceof Error)) {
					reject(new TypeError(`Non-error was thrown: "${error}". You should only throw errors.`));
					return;
				}

				if (error instanceof AbortError) {
					operation.stop();
					reject(error.originalError);
				} else if (error instanceof TypeError && !isNetworkError(error.message)) {
					operation.stop();
					reject(error);
				} else {
					decorateErrorWithCounts(error, attemptNumber, options);

					try {
						await options.onFailedAttempt(error);
					} catch (error) {
						reject(error);
						return;
					}

					if (!operation.retry(error)) {
						reject(operation.mainError());
					}
				}
			}
		});
	});

	pRetry$1.exports = pRetry;
	// TODO: remove this in the next major version
	pRetry$1.exports.default = pRetry;

	pRetry$1.exports.AbortError = AbortError;

	/**
	 * Check if a given ip address is a loopback address
	 *
	 * @param {string} ip - ip address to check
	 * @returns {boolean}
	 */
	function isLoopbackAddr$1 (ip) {
	  return /^127\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})$/i.test(ip) ||
	    /^::1$/.test(ip)
	}

	var isLoopbackAddr_1 = isLoopbackAddr$1;

	// @ts-ignore is-loopback-addr does not publish types
	const isLoopbackAddr = isLoopbackAddr_1;

	/**
	 * @typedef {import('multiaddr').Multiaddr} Multiaddr
	 */

	/**
	 * Check if a given multiaddr is a loopback address.
	 *
	 * @param {Multiaddr} ma
	 * @returns {boolean}
	 */
	function isLoopback$1 (ma) {
	  const { address } = ma.nodeAddress();

	  return isLoopbackAddr(address)
	}

	var isLoopback_1 = isLoopback$1;

	// @ts-ignore nat-api does not export types
	const NatAPI = require$$0$2;
	const debug$1 = browser$a.exports;
	const { promisify } = promisify$1;
	const { Multiaddr: Multiaddr$1 } = src$s;
	const log$3 = Object.assign(debug$1('libp2p:nat'), {
	  error: debug$1('libp2p:nat:err')
	});
	const { isBrowser } = src$2;
	const retry = pRetry$1.exports;
	const isPrivateIp = privateIp;
	const pkg = require$$7;
	const errcode = errCode$q;
	const {
	  codes: { ERR_INVALID_PARAMETERS }
	} = errors$3;
	const isLoopback = isLoopback_1;

	const DEFAULT_TTL = 7200;

	/**
	 * @typedef {import('peer-id')} PeerId
	 * @typedef {import('./transport-manager')} TransportManager
	 * @typedef {import('./address-manager')} AddressManager
	 */

	/**
	 * @typedef {Object} NatManagerProperties
	 * @property {PeerId} peerId - The peer ID of the current node
	 * @property {TransportManager} transportManager - A transport manager
	 * @property {AddressManager} addressManager - An address manager
	 *
	 * @typedef {Object} NatManagerOptions
	 * @property {boolean} enabled - Whether to enable the NAT manager
	 * @property {string} [externalIp] - Pass a value to use instead of auto-detection
	 * @property {string} [description] - A string value to use for the port mapping description on the gateway
	 * @property {number} [ttl = DEFAULT_TTL] - How long UPnP port mappings should last for in seconds (minimum 1200)
	 * @property {boolean} [keepAlive] - Whether to automatically refresh UPnP port mappings when their TTL is reached
	 * @property {string} [gateway] - Pass a value to use instead of auto-detection
	 * @property {object} [pmp] - PMP options
	 * @property {boolean} [pmp.enabled] - Whether to enable PMP as well as UPnP
	 */

	function highPort (min = 1024, max = 65535) {
	  return Math.floor(Math.random() * (max - min + 1) + min)
	}

	class NatManager$1 {
	  /**
	   * @class
	   * @param {NatManagerProperties & NatManagerOptions} options
	   */
	  constructor ({ peerId, addressManager, transportManager, ...options }) {
	    this._peerId = peerId;
	    this._addressManager = addressManager;
	    this._transportManager = transportManager;

	    this._enabled = options.enabled;
	    this._externalIp = options.externalIp;
	    this._options = {
	      description: options.description || `${pkg.name}@${pkg.version} ${this._peerId}`,
	      ttl: options.ttl || DEFAULT_TTL,
	      autoUpdate: options.keepAlive || true,
	      gateway: options.gateway,
	      enablePMP: Boolean(options.pmp && options.pmp.enabled)
	    };

	    if (this._options.ttl < DEFAULT_TTL) {
	      throw errcode(new Error(`NatManager ttl should be at least ${DEFAULT_TTL} seconds`), ERR_INVALID_PARAMETERS)
	    }
	  }

	  /**
	   * Starts the NAT manager
	   */
	  start () {
	    if (isBrowser || !this._enabled) {
	      return
	    }

	    // done async to not slow down startup
	    this._start().catch((err) => {
	      // hole punching errors are non-fatal
	      log$3.error(err);
	    });
	  }

	  async _start () {
	    const addrs = this._transportManager.getAddrs();

	    for (const addr of addrs) {
	      // try to open uPnP ports for each thin waist address
	      const { family, host, port, transport } = addr.toOptions();

	      if (!addr.isThinWaistAddress() || transport !== 'tcp') {
	        // only bare tcp addresses
	        // eslint-disable-next-line no-continue
	        continue
	      }

	      if (isLoopback(addr)) {
	        // eslint-disable-next-line no-continue
	        continue
	      }

	      if (family !== 4) {
	        // ignore ipv6
	        // eslint-disable-next-line no-continue
	        continue
	      }

	      const client = this._getClient();
	      const publicIp = this._externalIp || await client.externalIp();

	      // @ts-expect-error types are wrong
	      if (isPrivateIp(publicIp)) {
	        throw new Error(`${publicIp} is private - please set config.nat.externalIp to an externally routable IP or ensure you are not behind a double NAT`)
	      }

	      const publicPort = highPort();

	      log$3(`opening uPnP connection from ${publicIp}:${publicPort} to ${host}:${port}`);

	      await client.map({
	        publicPort,
	        privatePort: port,
	        protocol: transport.toUpperCase()
	      });

	      this._addressManager.addObservedAddr(Multiaddr$1.fromNodeAddress({
	        family: 4,
	        address: publicIp,
	        port: publicPort
	      }, transport));
	    }
	  }

	  _getClient () {
	    if (this._client) {
	      return this._client
	    }

	    const client = new NatAPI(this._options);

	    /** @type {(...any: any) => any} */
	    const map = promisify(client.map.bind(client));
	    /** @type {(...any: any) => any} */
	    const destroy = promisify(client.destroy.bind(client));
	    /** @type {(...any: any) => any} */
	    const externalIp = promisify(client.externalIp.bind(client));

	    // these are all network operations so add a retry
	    this._client = {
	      /**
	       * @param  {...any} args
	       * @returns {Promise<void>}
	       */
	      map: (...args) => retry(() => map(...args), { onFailedAttempt: log$3.error, unref: true }),

	      /**
	       * @param  {...any} args
	       * @returns {Promise<void>}
	       */
	      destroy: (...args) => retry(() => destroy(...args), { onFailedAttempt: log$3.error, unref: true }),

	      /**
	       * @param  {...any} args
	       * @returns {Promise<string>}
	       */
	      externalIp: (...args) => retry(() => externalIp(...args), { onFailedAttempt: log$3.error, unref: true })
	    };

	    return this._client
	  }

	  /**
	   * Stops the NAT manager
	   *
	   * @async
	   */
	  async stop () {
	    if (isBrowser || !this._client) {
	      return
	    }

	    try {
	      await this._client.destroy();
	      this._client = null;
	    } catch (/** @type {any} */ err) {
	      log$3.error(err);
	    }
	  }
	}

	var natManager = NatManager$1;

	const debug = browser$a.exports;
	const log$2 = Object.assign(debug('libp2p'), {
	  error: debug('libp2p:err')
	});
	const { EventEmitter } = require$$1$5;

	const errCode = errCode$q;
	const PeerId$1 = src$o.exports;
	const { Multiaddr } = src$s;
	const { MemoryDatastore } = require$$5;
	const PeerRouting = peerRouting;
	const ContentRouting = contentRouting;
	const getPeer = getPeer_1;
	const { validate: validateConfig } = config;
	const { codes, messages } = errors$3;

	const AddressManager = addressManager;
	const ConnectionManager = connectionManager;
	const AutoDialler = autoDialler;
	const Circuit = transport;
	const Relay = circuit;
	const Dialer = dialer;
	const Keychain = keychain;
	const Metrics = metrics;
	const TransportManager = transportManager;
	const Upgrader = upgrader;
	const PeerStore = peerStore;
	const PubsubAdapter = pubsubAdapter_1;
	const Registrar = registrar;
	const IdentifyService = identify;
	const FetchService = fetch.exports;
	const PingService = ping;
	const NatManager = natManager;
	const { updateSelfPeerRecord } = utils$2;

	/**
	 * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection
	 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream
	 * @typedef {import('libp2p-interfaces/src/transport/types').TransportFactory<any, any>} TransportFactory
	 * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxerFactory} MuxerFactory
	 * @typedef {import('libp2p-interfaces/src/content-routing/types').ContentRouting} ContentRoutingModule
	 * @typedef {import('libp2p-interfaces/src/peer-discovery/types').PeerDiscoveryFactory} PeerDiscoveryFactory
	 * @typedef {import('libp2p-interfaces/src/peer-routing/types').PeerRouting} PeerRoutingModule
	 * @typedef {import('libp2p-interfaces/src/crypto/types').Crypto} Crypto
	 * @typedef {import('libp2p-interfaces/src/pubsub')} Pubsub
	 * @typedef {import('libp2p-interfaces/src/pubsub').PubsubOptions} PubsubOptions
	 * @typedef {import('interface-datastore').Datastore} Datastore
	 * @typedef {import('./pnet')} Protector
	 * @typedef {import('./types').ConnectionGater} ConnectionGater
	 * @typedef {Object} PersistentPeerStoreOptions
	 * @property {number} [threshold]
	 */

	/**
	 * @typedef {Object} HandlerProps
	 * @property {Connection} connection
	 * @property {MuxedStream} stream
	 * @property {string} protocol
	 *
	 * @typedef {Object} DhtOptions
	 * @property {boolean} [enabled = false]
	 * @property {number} [kBucketSize = 20]
	 * @property {boolean} [clientMode]
	 * @property {import('libp2p-interfaces/src/types').DhtSelectors} [selectors]
	 * @property {import('libp2p-interfaces/src/types').DhtValidators} [validators]
	 *
	 * @typedef {Object} KeychainOptions
	 * @property {Datastore} [datastore]
	 *
	 * @typedef {Object} PeerStoreOptions
	 * @property {boolean} persistence
	 *
	 * @typedef {Object} PubsubLocalOptions
	 * @property {boolean} enabled
	 *
	 * @typedef {Object} MetricsOptions
	 * @property {boolean} enabled
	 *
	 * @typedef {Object} RelayOptions
	 * @property {boolean} [enabled = true]
	 * @property {import('./circuit').RelayAdvertiseOptions} [advertise]
	 * @property {import('./circuit').HopOptions} [hop]
	 * @property {import('./circuit').AutoRelayOptions} [autoRelay]
	 *
	 * @typedef {Object} Libp2pConfig
	 * @property {DhtOptions} [dht] dht module options
	 * @property {import('./nat-manager').NatManagerOptions} [nat]
	 * @property {Record<string, Object|boolean>} [peerDiscovery]
	 * @property {PubsubLocalOptions & PubsubOptions} [pubsub] pubsub module options
	 * @property {RelayOptions} [relay]
	 * @property {Record<string, Object>} [transport] transport options indexed by transport key
	 *
	 * @typedef {Object} Libp2pModules
	 * @property {TransportFactory[]} transport
	 * @property {MuxerFactory[]} streamMuxer
	 * @property {Crypto[]} connEncryption
	 * @property {PeerDiscoveryFactory[]} [peerDiscovery]
	 * @property {PeerRoutingModule[]} [peerRouting]
	 * @property {ContentRoutingModule[]} [contentRouting]
	 * @property {Object} [dht]
	 * @property {{new(...args: any[]): Pubsub}} [pubsub]
	 * @property {Protector} [connProtector]
	 *
	 * @typedef {Object} Libp2pOptions
	 * @property {Libp2pModules} modules libp2p modules to use
	 * @property {import('./address-manager').AddressManagerOptions} [addresses]
	 * @property {import('./connection-manager').ConnectionManagerOptions} [connectionManager]
	 * @property {Partial<import('./types').ConnectionGater>} [connectionGater]
	 * @property {Datastore} [datastore]
	 * @property {import('./dialer').DialerOptions} [dialer]
	 * @property {import('./identify/index').HostProperties} [host] libp2p host
	 * @property {KeychainOptions & import('./keychain/index').KeychainOptions} [keychain]
	 * @property {MetricsOptions & import('./metrics').MetricsOptions} [metrics]
	 * @property {import('./peer-routing').PeerRoutingOptions} [peerRouting]
	 * @property {PeerStoreOptions} [peerStore]
	 * @property {import('./transport-manager').TransportManagerOptions} [transportManager]
	 * @property {Libp2pConfig} [config]
	 *
	 * @typedef {Object} constructorOptions
	 * @property {PeerId} peerId
	 *
	 * @typedef {Object} CreateOptions
	 * @property {PeerId} [peerId]
	 *
	 * @extends {EventEmitter}
	 * @fires Libp2p#error Emitted when an error occurs
	 * @fires Libp2p#peer:discovery Emitted when a peer is discovered
	 */
	class Libp2p extends EventEmitter {
	  /**
	   * Like `new Libp2p(options)` except it will create a `PeerId`
	   * instance if one is not provided in options.
	   *
	   * @param {Libp2pOptions & CreateOptions} options - Libp2p configuration options
	   * @returns {Promise<Libp2p>}
	   */
	  static async create (options) {
	    if (options.peerId) {
	      // @ts-ignore 'Libp2pOptions & CreateOptions' is not assignable to 'Libp2pOptions & constructorOptions'
	      return new Libp2p(options)
	    }

	    const peerId = await PeerId$1.create();

	    options.peerId = peerId;
	    // @ts-ignore 'Libp2pOptions & CreateOptions' is not assignable to 'Libp2pOptions & constructorOptions'
	    return new Libp2p(options)
	  }

	  /**
	   * Libp2p node.
	   *
	   * @class
	   * @param {Libp2pOptions & constructorOptions} _options
	   */
	  constructor (_options) {
	    super();
	    // validateConfig will ensure the config is correct,
	    // and add default values where appropriate
	    this._options = validateConfig(_options);

	    /** @type {PeerId} */
	    this.peerId = this._options.peerId;
	    this.datastore = this._options.datastore;

	    // Create Metrics
	    if (this._options.metrics.enabled) {
	      const metrics = new Metrics({
	        ...this._options.metrics
	      });

	      this.metrics = metrics;
	    }

	    /** @type {ConnectionGater} */
	    this.connectionGater = {
	      denyDialPeer: async () => Promise.resolve(false),
	      denyDialMultiaddr: async () => Promise.resolve(false),
	      denyInboundConnection: async () => Promise.resolve(false),
	      denyOutboundConnection: async () => Promise.resolve(false),
	      denyInboundEncryptedConnection: async () => Promise.resolve(false),
	      denyOutboundEncryptedConnection: async () => Promise.resolve(false),
	      denyInboundUpgradedConnection: async () => Promise.resolve(false),
	      denyOutboundUpgradedConnection: async () => Promise.resolve(false),
	      filterMultiaddrForPeer: async () => Promise.resolve(true),
	      ...this._options.connectionGater
	    };

	    /** @type {import('./peer-store/types').PeerStore} */
	    this.peerStore = new PeerStore({
	      peerId: this.peerId,
	      datastore: (this.datastore && this._options.peerStore.persistence) ? this.datastore : new MemoryDatastore(),
	      addressFilter: this.connectionGater.filterMultiaddrForPeer
	    });

	    // Addresses {listen, announce, noAnnounce}
	    this.addresses = this._options.addresses;
	    this.addressManager = new AddressManager(this.peerId, this._options.addresses);

	    // when addresses change, update our peer record
	    this.addressManager.on('change:addresses', () => {
	      updateSelfPeerRecord(this).catch(err => {
	        log$2.error('Error updating self peer record', err);
	      });
	    });

	    this._modules = this._options.modules;
	    this._config = this._options.config;
	    this._transport = []; // Transport instances/references
	    this._discovery = new Map(); // Discovery service instances/references

	    // Create the Connection Manager
	    this.connectionManager = new ConnectionManager(this, {
	      ...this._options.connectionManager
	    });
	    this._autodialler = new AutoDialler(this, {
	      enabled: this._config.peerDiscovery.autoDial,
	      minConnections: this._options.connectionManager.minConnections,
	      autoDialInterval: this._options.connectionManager.autoDialInterval
	    });

	    // Create keychain
	    if (this._options.keychain && this._options.keychain.datastore) {
	      log$2('creating keychain');

	      const keychainOpts = Keychain.generateOptions();

	      this.keychain = new Keychain(this._options.keychain.datastore, {
	        ...keychainOpts,
	        ...this._options.keychain
	      });

	      log$2('keychain constructed');
	    }

	    // Setup the Upgrader
	    this.upgrader = new Upgrader({
	      connectionGater: this.connectionGater,
	      localPeer: this.peerId,
	      metrics: this.metrics,
	      onConnection: (connection) => this.connectionManager.onConnect(connection),
	      onConnectionEnd: (connection) => this.connectionManager.onDisconnect(connection)
	    });

	    // Setup the transport manager
	    this.transportManager = new TransportManager({
	      libp2p: this,
	      upgrader: this.upgrader,
	      faultTolerance: this._options.transportManager.faultTolerance
	    });

	    // Create the Nat Manager
	    this.natManager = new NatManager({
	      peerId: this.peerId,
	      addressManager: this.addressManager,
	      transportManager: this.transportManager,
	      // @ts-ignore Nat typedef is not understood as Object
	      ...this._options.config.nat
	    });

	    // Create the Registrar
	    this.registrar = new Registrar({
	      peerStore: this.peerStore,
	      connectionManager: this.connectionManager
	    });

	    this.handle = this.handle.bind(this);
	    this.registrar.handle = this.handle;

	    // Attach crypto channels
	    if (!this._modules.connEncryption || !this._modules.connEncryption.length) {
	      throw errCode(new Error(messages.CONN_ENCRYPTION_REQUIRED), codes.CONN_ENCRYPTION_REQUIRED)
	    }
	    const cryptos = this._modules.connEncryption;
	    cryptos.forEach((crypto) => {
	      this.upgrader.cryptos.set(crypto.protocol, crypto);
	    });

	    this.dialer = new Dialer({
	      transportManager: this.transportManager,
	      connectionGater: this.connectionGater,
	      peerStore: this.peerStore,
	      metrics: this.metrics,
	      ...this._options.dialer
	    });

	    this._modules.transport.forEach((Transport) => {
	      const key = Transport.prototype[Symbol.toStringTag];
	      const transportOptions = this._config.transport[key];
	      this.transportManager.add(key, Transport, transportOptions);
	    });

	    if (this._config.relay.enabled) {
	      // @ts-ignore Circuit prototype
	      this.transportManager.add(Circuit.prototype[Symbol.toStringTag], Circuit);
	      this.relay = new Relay(this);
	    }

	    // Attach stream multiplexers
	    if (this._modules.streamMuxer) {
	      const muxers = this._modules.streamMuxer;
	      muxers.forEach((muxer) => {
	        this.upgrader.muxers.set(muxer.multicodec, muxer);
	      });

	      // Add the identify service since we can multiplex
	      this.identifyService = new IdentifyService({ libp2p: this });
	    }

	    // Attach private network protector
	    if (this._modules.connProtector) {
	      this.upgrader.protector = this._modules.connProtector;
	    } else if (globalThis.process !== undefined && globalThis.process.env && globalThis.process.env.LIBP2P_FORCE_PNET) { // eslint-disable-line no-undef
	      throw new Error('Private network is enforced, but no protector was provided')
	    }

	    // dht provided components (peerRouting, contentRouting, dht)
	    if (this._modules.dht) {
	      const DHT = this._modules.dht;
	      // @ts-ignore TODO: types need fixing - DHT is an `object` which has no `create` method
	      this._dht = DHT.create({
	        libp2p: this,
	        ...this._config.dht
	      });
	    }

	    // Create pubsub if provided
	    if (this._modules.pubsub) {
	      const Pubsub = this._modules.pubsub;
	      // using pubsub adapter with *DEPRECATED* handlers functionality
	      /** @type {Pubsub} */
	      this.pubsub = PubsubAdapter(Pubsub, this, this._config.pubsub);
	    }

	    // Attach remaining APIs
	    // peer and content routing will automatically get modules from _modules and _dht
	    this.peerRouting = new PeerRouting(this);
	    this.contentRouting = new ContentRouting(this);

	    this._onDiscoveryPeer = this._onDiscoveryPeer.bind(this);

	    this.fetchService = new FetchService(this);
	    this.pingService = new PingService(this);
	  }

	  /**
	   * Overrides EventEmitter.emit to conditionally emit errors
	   * if there is a handler. If not, errors will be logged.
	   *
	   * @param {string} eventName
	   * @param  {...any} args
	   * @returns {boolean}
	   */
	  emit (eventName, ...args) {
	    // TODO: do we still need this?
	    // @ts-ignore _events does not exist in libp2p
	    if (eventName === 'error' && !this._events.error) {
	      log$2.error(args);
	      return false
	    } else {
	      return super.emit(eventName, ...args)
	    }
	  }

	  /**
	   * Starts the libp2p node and all its subsystems
	   *
	   * @returns {Promise<void>}
	   */
	  async start () {
	    log$2('libp2p is starting');

	    if (this.identifyService) {
	      await this.handle(Object.values(IdentifyService.getProtocolStr(this)), this.identifyService.handleMessage);
	    }

	    if (this.fetchService) {
	      await this.handle(FetchService.PROTOCOL, this.fetchService.handleMessage);
	    }

	    if (this.pingService) {
	      await this.handle(PingService.getProtocolStr(this), this.pingService.handleMessage);
	    }

	    try {
	      await this._onStarting();
	      await this._onDidStart();
	      log$2('libp2p has started');
	    } catch (/** @type {any} */ err) {
	      this.emit('error', err);
	      log$2.error('An error occurred starting libp2p', err);
	      await this.stop();
	      throw err
	    }
	  }

	  /**
	   * Stop the libp2p node by closing its listeners and open connections
	   *
	   * @async
	   * @returns {Promise<void>}
	   */
	  async stop () {
	    log$2('libp2p is stopping');

	    try {
	      this._isStarted = false;

	      if (this.identifyService) {
	        await this.identifyService.stop();
	      }

	      this.relay && this.relay.stop();
	      this.peerRouting.stop();
	      await this._autodialler.stop();
	      await (this._dht && this._dht.stop());

	      for (const service of this._discovery.values()) {
	        service.removeListener('peer', this._onDiscoveryPeer);
	      }

	      await Promise.all(Array.from(this._discovery.values(), s => s.stop()));

	      this._discovery = new Map();

	      await this.connectionManager.stop();

	      await Promise.all([
	        this.pubsub && this.pubsub.stop(),
	        this.metrics && this.metrics.stop()
	      ]);

	      await this.natManager.stop();
	      await this.transportManager.close();

	      await this.unhandle(FetchService.PROTOCOL);
	      await this.unhandle(PingService.getProtocolStr(this));

	      this.dialer.destroy();
	    } catch (/** @type {any} */ err) {
	      if (err) {
	        log$2.error(err);
	        this.emit('error', err);
	      }
	    }
	    log$2('libp2p has stopped');
	  }

	  /**
	   * Load keychain keys from the datastore.
	   * Imports the private key as 'self', if needed.
	   *
	   * @async
	   * @returns {Promise<void>}
	   */
	  async loadKeychain () {
	    if (!this.keychain) {
	      return
	    }

	    try {
	      await this.keychain.findKeyByName('self');
	    } catch (/** @type {any} */ err) {
	      await this.keychain.importPeer('self', this.peerId);
	    }
	  }

	  isStarted () {
	    return this._isStarted
	  }

	  /**
	   * Gets a Map of the current connections. The keys are the stringified
	   * `PeerId` of the peer. The value is an array of Connections to that peer.
	   *
	   * @returns {Map<string, Connection[]>}
	   */
	  get connections () {
	    return this.connectionManager.connections
	  }

	  /**
	   * Dials to the provided peer. If successful, the known metadata of the
	   * peer will be added to the nodes `peerStore`
	   *
	   * @param {PeerId|Multiaddr|string} peer - The peer to dial
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal]
	   * @returns {Promise<Connection>}
	   */
	  dial (peer, options) {
	    return this._dial(peer, options)
	  }

	  /**
	   * Dials to the provided peer and tries to handshake with the given protocols in order.
	   * If successful, the known metadata of the peer will be added to the nodes `peerStore`,
	   * and the `MuxedStream` will be returned together with the successful negotiated protocol.
	   *
	   * @async
	   * @param {PeerId|Multiaddr|string} peer - The peer to dial
	   * @param {string[]|string} protocols
	   * @param {object} [options]
	   * @param {AbortSignal} [options.signal]
	   */
	  async dialProtocol (peer, protocols, options) {
	    if (!protocols || !protocols.length) {
	      throw errCode(new Error('no protocols were provided to open a stream'), codes.ERR_INVALID_PROTOCOLS_FOR_STREAM)
	    }

	    const connection = await this._dial(peer, options);
	    return connection.newStream(protocols)
	  }

	  /**
	   * @async
	   * @param {PeerId|Multiaddr|string} peer - The peer to dial
	   * @param {object} [options]
	   * @returns {Promise<Connection>}
	   */
	  async _dial (peer, options) {
	    const { id, multiaddrs } = getPeer(peer);

	    if (id.equals(this.peerId)) {
	      throw errCode(new Error('Cannot dial self'), codes.ERR_DIALED_SELF)
	    }

	    let connection = this.connectionManager.get(id);

	    if (!connection) {
	      connection = await this.dialer.connectToPeer(peer, options);
	    } else if (multiaddrs) {
	      await this.peerStore.addressBook.add(id, multiaddrs);
	    }

	    return connection
	  }

	  /**
	   * Get a deduplicated list of peer advertising multiaddrs by concatenating
	   * the listen addresses used by transports with any configured
	   * announce addresses as well as observed addresses reported by peers.
	   *
	   * If Announce addrs are specified, configured listen addresses will be
	   * ignored though observed addresses will still be included.
	   *
	   * @returns {Multiaddr[]}
	   */
	  get multiaddrs () {
	    let addrs = this.addressManager.getAnnounceAddrs().map(ma => ma.toString());

	    if (!addrs.length) {
	      // no configured announce addrs, add configured listen addresses
	      addrs = this.transportManager.getAddrs().map(ma => ma.toString());
	    }

	    addrs = addrs.concat(this.addressManager.getObservedAddrs().map(ma => ma.toString()));

	    const announceFilter = this._options.addresses.announceFilter;

	    // dedupe multiaddrs
	    const addrSet = new Set(addrs);

	    // Create advertising list
	    return announceFilter(Array.from(addrSet).map(str => new Multiaddr(str)))
	  }

	  /**
	   * Disconnects all connections to the given `peer`
	   *
	   * @param {PeerId|Multiaddr|string} peer - the peer to close connections to
	   * @returns {Promise<void>}
	   */
	  async hangUp (peer) {
	    const { id } = getPeer(peer);

	    const connections = this.connectionManager.connections.get(id.toB58String());

	    if (!connections) {
	      return
	    }

	    await Promise.all(
	      connections.map(connection => {
	        return connection.close()
	      })
	    );
	  }

	  /**
	   * Sends a request to fetch the value associated with the given key from the given peer.
	   *
	   * @param {PeerId|Multiaddr} peer
	   * @param {string} key
	   * @returns {Promise<Uint8Array | null>}
	   */
	  fetch (peer, key) {
	    return this.fetchService.fetch(peer, key)
	  }

	  /**
	   * Pings the given peer in order to obtain the operation latency.
	   *
	   * @param {PeerId|Multiaddr|string} peer - The peer to ping
	   * @returns {Promise<number>}
	   */
	  ping (peer) {
	    const { id, multiaddrs } = getPeer(peer);

	    // If received multiaddr, ping it
	    if (multiaddrs) {
	      return this.pingService.ping(multiaddrs[0])
	    }

	    return this.pingService.ping(id)
	  }

	  /**
	   * Registers the `handler` for each protocol
	   *
	   * @param {string[]|string} protocols
	   * @param {(props: HandlerProps) => void} handler
	   */
	  async handle (protocols, handler) {
	    protocols = Array.isArray(protocols) ? protocols : [protocols];
	    protocols.forEach(protocol => {
	      this.upgrader.protocols.set(protocol, handler);
	    });

	    // Add new protocols to self protocols in the Protobook
	    await this.peerStore.protoBook.add(this.peerId, protocols);
	  }

	  /**
	   * Removes the handler for each protocol. The protocol
	   * will no longer be supported on streams.
	   *
	   * @param {string[]|string} protocols
	   */
	  async unhandle (protocols) {
	    protocols = Array.isArray(protocols) ? protocols : [protocols];
	    protocols.forEach(protocol => {
	      this.upgrader.protocols.delete(protocol);
	    });

	    // Remove protocols from self protocols in the Protobook
	    await this.peerStore.protoBook.remove(this.peerId, protocols);
	  }

	  async _onStarting () {
	    // Listen on the provided transports for the provided addresses
	    const addrs = this.addressManager.getListenAddrs();
	    await this.transportManager.listen(addrs);

	    // Manage your NATs
	    this.natManager.start();

	    if (this._config.pubsub.enabled) {
	      this.pubsub && await this.pubsub.start();
	    }

	    // DHT subsystem
	    if (this._config.dht.enabled) {
	      this._dht && await this._dht.start();

	      // TODO: this should be modified once random-walk is used as
	      // the other discovery modules
	      this._dht.on('peer', this._onDiscoveryPeer);
	    }

	    // Start metrics if present
	    this.metrics && this.metrics.start();

	    if (this.identifyService) {
	      await this.identifyService.start();
	    }
	  }

	  /**
	   * Called when libp2p has started and before it returns
	   *
	   * @private
	   */
	  async _onDidStart () {
	    this._isStarted = true;

	    this.peerStore.on('peer', peerId => {
	      this.emit('peer:discovery', peerId);
	      this._maybeConnect(peerId).catch(err => {
	        log$2.error(err);
	      });
	    });

	    // Once we start, emit any peers we may have already discovered
	    // TODO: this should be removed, as we already discovered these peers in the past
	    for await (const peer of this.peerStore.getPeers()) {
	      this.emit('peer:discovery', peer.id);
	    }

	    this.connectionManager.start();
	    await this._autodialler.start();

	    // Peer discovery
	    await this._setupPeerDiscovery();

	    // Relay
	    this.relay && this.relay.start();

	    this.peerRouting.start();
	  }

	  /**
	   * Called whenever peer discovery services emit `peer` events.
	   * Known peers may be emitted.
	   *
	   * @private
	   * @param {{ id: PeerId, multiaddrs: Multiaddr[], protocols: string[] }} peer
	   */
	  _onDiscoveryPeer (peer) {
	    if (peer.id.toB58String() === this.peerId.toB58String()) {
	      log$2.error(new Error(codes.ERR_DISCOVERED_SELF));
	      return
	    }

	    peer.multiaddrs && this.peerStore.addressBook.add(peer.id, peer.multiaddrs).catch(err => log$2.error(err));
	    peer.protocols && this.peerStore.protoBook.set(peer.id, peer.protocols).catch(err => log$2.error(err));
	  }

	  /**
	   * Will dial to the given `peerId` if the current number of
	   * connected peers is less than the configured `ConnectionManager`
	   * minConnections.
	   *
	   * @private
	   * @param {PeerId} peerId
	   */
	  async _maybeConnect (peerId) {
	    // If auto dialing is on and we have no connection to the peer, check if we should dial
	    if (this._config.peerDiscovery.autoDial === true && !this.connectionManager.get(peerId)) {
	      const minConnections = this._options.connectionManager.minConnections || 0;
	      if (minConnections > this.connectionManager.size) {
	        log$2('connecting to discovered peer %s', peerId.toB58String());
	        try {
	          await this.dialer.connectToPeer(peerId);
	        } catch (/** @type {any} */ err) {
	          log$2.error(`could not connect to discovered peer ${peerId.toB58String()} with ${err}`);
	        }
	      }
	    }
	  }

	  /**
	   * Initializes and starts peer discovery services
	   *
	   * @async
	   * @private
	   */
	  async _setupPeerDiscovery () {
	    /**
	     * @param {PeerDiscoveryFactory} DiscoveryService
	     */
	    const setupService = (DiscoveryService) => {
	      let config = {
	        enabled: true // on by default
	      };

	      if (DiscoveryService.tag &&
	        this._config.peerDiscovery &&
	        this._config.peerDiscovery[DiscoveryService.tag]) {
	        // @ts-ignore PeerDiscovery not understood as an Object for spread
	        config = { ...config, ...this._config.peerDiscovery[DiscoveryService.tag] };
	      }

	      if (config.enabled &&
	        !this._discovery.has(DiscoveryService.tag)) { // not already added
	        let discoveryService;

	        if (typeof DiscoveryService === 'function') {
	          // @ts-ignore DiscoveryService has no constructor type inferred
	          discoveryService = new DiscoveryService(Object.assign({}, config, {
	            peerId: this.peerId,
	            libp2p: this
	          }));
	        } else {
	          discoveryService = DiscoveryService;
	        }

	        discoveryService.on('peer', this._onDiscoveryPeer);
	        this._discovery.set(DiscoveryService.tag, discoveryService);
	      }
	    };

	    // Discovery modules
	    for (const DiscoveryService of this._modules.peerDiscovery || []) {
	      setupService(DiscoveryService);
	    }

	    // Transport modules with discovery
	    for (const Transport of this.transportManager.getTransports()) {
	      // @ts-ignore Transport interface does not include discovery
	      if (Transport.discovery) {
	        // @ts-ignore Transport interface does not include discovery
	        setupService(Transport.discovery);
	      }
	    }

	    await Promise.all(Array.from(this._discovery.values(), d => d.start()));
	  }
	}

	var src$1 = Libp2p;

	const mergeOptions$2 = mergeOptions$k.bind({ ignoreUndefined: true });
	function createLibp2p({options = {}, peerId, multiaddrs = [], repo, keychainConfig = {}, config = {}}) {
	  const {datastore, keys} = repo;
	  const libp2pOptions = getLibp2pOptions({
	    options,
	    config,
	    datastore,
	    keys,
	    keychainConfig,
	    peerId,
	    multiaddrs
	  });
	  if (typeof options.libp2p === 'function') {
	    return options.libp2p({
	      libp2pOptions,
	      options,
	      config,
	      datastore,
	      peerId
	    });
	  }
	  return src$1.create(libp2pOptions);
	}
	function getLibp2pOptions({options, config, datastore, keys, keychainConfig, peerId, multiaddrs}) {
	  const getPubsubRouter = () => {
	    const router = get$2(config, 'Pubsub.Router') || 'gossipsub';
	    if (!routers[router]) {
	      throw errCode$q(new Error(`Router unavailable. Configure libp2p.modules.pubsub to use the ${ router } router.`), 'ERR_NOT_SUPPORTED');
	    }
	    return routers[router];
	  };
	  const libp2pDefaults = {
	    datastore,
	    peerId: peerId,
	    modules: {}
	  };
	  const libp2pOptions = {
	    modules: {
	      pubsub: getPubsubRouter(),
	      contentRouting: [],
	      peerRouting: []
	    },
	    config: {
	      peerDiscovery: {
	        mdns: { enabled: get$2(options, 'config.Discovery.MDNS.Enabled', get$2(config, 'Discovery.MDNS.Enabled', true)) },
	        webRTCStar: { enabled: get$2(options, 'config.Discovery.webRTCStar.Enabled', get$2(config, 'Discovery.webRTCStar.Enabled', true)) },
	        bootstrap: { list: get$2(options, 'config.Bootstrap', get$2(config, 'Bootstrap', [])) }
	      },
	      relay: {
	        enabled: get$2(options, 'relay.enabled', get$2(config, 'relay.enabled', true)),
	        hop: {
	          enabled: get$2(options, 'relay.hop.enabled', get$2(config, 'relay.hop.enabled', false)),
	          active: get$2(options, 'relay.hop.active', get$2(config, 'relay.hop.active', false))
	        }
	      },
	      dht: {
	        enabled: get$2(config, 'Routing.Type', 'dhtclient') !== 'none',
	        clientMode: get$2(config, 'Routing.Type', 'dht') !== 'dhtserver',
	        kBucketSize: get$2(options, 'dht.kBucketSize', 20),
	        validators: { ipns: validator$3 }
	      },
	      pubsub: { enabled: get$2(options, 'config.Pubsub.Enabled', get$2(config, 'Pubsub.Enabled', true)) },
	      nat: { enabled: !get$2(config, 'Swarm.DisableNatPortMap', false) }
	    },
	    addresses: {
	      listen: multiaddrs.map(ma => ma.toString()),
	      announce: get$2(options, 'addresses.announce', get$2(config, 'Addresses.Announce', [])),
	      noAnnounce: get$2(options, 'addresses.noAnnounce', get$2(config, 'Addresses.NoAnnounce', []))
	    },
	    connectionManager: get$2(options, 'connectionManager', {
	      maxConnections: get$2(options, 'config.Swarm.ConnMgr.HighWater', get$2(config, 'Swarm.ConnMgr.HighWater')),
	      minConnections: get$2(options, 'config.Swarm.ConnMgr.LowWater', get$2(config, 'Swarm.ConnMgr.LowWater'))
	    }),
	    keychain: {
	      datastore: keys,
	      ...keychainConfig
	    },
	    host: { agentVersion: `js-ipfs/${ ipfsCore }` }
	  };
	  let constructorOptions = get$2(options, 'libp2p', undefined);
	  if (typeof constructorOptions === 'function') {
	    constructorOptions = undefined;
	  }
	  const libp2pConfig$1 = mergeOptions$2(libp2pDefaults, libp2pConfig(), libp2pOptions, constructorOptions);
	  const bootstrapList = get$2(libp2pConfig$1, 'config.peerDiscovery.bootstrap.list', []);
	  if (bootstrapList.length > 0) {
	    libp2pConfig$1.modules.peerDiscovery.push(bootstrap);
	  }
	  const delegateHosts = get$2(options, 'config.Addresses.Delegates', get$2(config, 'Addresses.Delegates', []));
	  if (delegateHosts.length > 0) {
	    const delegateString = delegateHosts[Math.floor(Math.random() * delegateHosts.length)];
	    const delegateAddr = new src$s.Multiaddr(delegateString).toOptions();
	    const delegateApiOptions = {
	      host: delegateAddr.host,
	      protocol: parseInt(delegateAddr.port) === 443 ? 'https' : 'http',
	      port: delegateAddr.port
	    };
	    const delegateHttpClient = create$2(delegateApiOptions);
	    libp2pOptions.modules.contentRouting = libp2pOptions.modules.contentRouting || [];
	    libp2pOptions.modules.contentRouting.push(new src$f(peerId, delegateHttpClient));
	    libp2pOptions.modules.peerRouting = libp2pOptions.modules.peerRouting || [];
	    libp2pOptions.modules.peerRouting.push(new src$g(delegateHttpClient));
	  }
	  return libp2pConfig$1;
	}

	const mergeOptions$1 = mergeOptions$k.bind({ ignoreUndefined: true });
	const log$1 = debug$S('ipfs:components:peer:storage');
	class Storage {
	  constructor(peerId, keychain, repo, print, isNew) {
	    this.print = print;
	    this.peerId = peerId;
	    this.keychain = keychain;
	    this.repo = repo;
	    this.print = print;
	    this.isNew = isNew;
	  }
	  static async start(print, codecs, options) {
	    const {
	      repoAutoMigrate,
	      repo: inputRepo,
	      onMigrationProgress
	    } = options;
	    const repo = typeof inputRepo === 'string' || inputRepo == null ? createRepo$1(print, codecs, {
	      path: inputRepo,
	      autoMigrate: repoAutoMigrate,
	      onMigrationProgress: onMigrationProgress
	    }) : inputRepo;
	    const {peerId, keychain, isNew} = await loadRepo(print, repo, options);
	    return new Storage(peerId, keychain, repo, print, isNew);
	  }
	}
	const loadRepo = async (print, repo, options) => {
	  if (!repo.closed) {
	    return {
	      ...await configureRepo(repo, options),
	      isNew: false
	    };
	  }
	  try {
	    await repo.open();
	    return {
	      ...await configureRepo(repo, options),
	      isNew: false
	    };
	  } catch (err) {
	    if (err.code !== ERR_REPO_NOT_INITIALIZED) {
	      throw err;
	    }
	    if (options.init && options.init.allowNew === false) {
	      throw new NotEnabledError('Initialization of new repos disabled by config, pass `config.init.isNew: true` to enable it');
	    }
	    return {
	      ...await initRepo(print, repo, options),
	      isNew: true
	    };
	  }
	};
	const initRepo = async (print, repo, options) => {
	  const initOptions = options.init || {};
	  const exists = await repo.exists();
	  log$1('repo exists?', exists);
	  if (exists === true) {
	    throw new Error('repo already exists');
	  }
	  const peerId = initOptions.privateKey ? await decodePeerId(initOptions.privateKey) : await initPeerId(print, initOptions);
	  const identity = peerIdToIdentity(peerId);
	  log$1('peer identity: %s', identity.PeerID);
	  const config = {
	    ...mergeOptions$1(applyProfiles(getDefaultConfig(), initOptions.profiles), options.config),
	    Identity: identity
	  };
	  await repo.init(config);
	  await repo.open();
	  log$1('repo opened');
	  const keychainConfig = { pass: options.pass };
	  try {
	    keychainConfig.dek = await repo.config.get('Keychain.DEK');
	  } catch (err) {
	    if (err.code !== 'ERR_NOT_FOUND') {
	      throw err;
	    }
	  }
	  const libp2p = await createLibp2p({
	    options: undefined,
	    multiaddrs: undefined,
	    peerId,
	    repo,
	    config,
	    keychainConfig
	  });
	  if (libp2p.keychain && libp2p.keychain.opts) {
	    await libp2p.loadKeychain();
	    await repo.config.set('Keychain', { DEK: libp2p.keychain.opts.dek });
	  }
	  return {
	    peerId,
	    keychain: libp2p.keychain
	  };
	};
	const decodePeerId = peerId => {
	  log$1('using user-supplied private-key');
	  return typeof peerId === 'object' ? peerId : PeerIdImport.createFromPrivKey(fromString$4(peerId, 'base64pad'));
	};
	const initPeerId = (print, {algorithm = 'Ed25519', bits = 2048}) => {
	  print('generating %s keypair...', algorithm);
	  return PeerIdImport.create({
	    keyType: algorithm,
	    bits
	  });
	};
	const peerIdToIdentity = peerId => ({
	  PeerID: peerId.toB58String(),
	  PrivKey: toString$6(peerId.privKey.bytes, 'base64pad')
	});
	const configureRepo = async (repo, options) => {
	  const config = options.config;
	  const profiles = options.init && options.init.profiles || [];
	  const pass = options.pass;
	  const original = await repo.config.getAll();
	  const changed = mergeConfigs(applyProfiles(original, profiles), config);
	  if (original !== changed) {
	    await repo.config.replace(changed);
	  }
	  if (!changed.Identity || !changed.Identity.PrivKey) {
	    throw new NotInitializedError('No private key was found in the config, please intialize the repo');
	  }
	  const peerId = await PeerIdImport.createFromPrivKey(changed.Identity.PrivKey);
	  const libp2p = await createLibp2p({
	    options: undefined,
	    multiaddrs: undefined,
	    peerId,
	    repo,
	    config: changed,
	    keychainConfig: {
	      pass,
	      ...changed.Keychain
	    }
	  });
	  if (libp2p.keychain) {
	    await libp2p.loadKeychain();
	  }
	  return {
	    peerId,
	    keychain: libp2p.keychain
	  };
	};
	const mergeConfigs = (config, changes) => changes ? mergeOptions$1(config, changes) : config;
	const applyProfiles = (config, profiles$1) => {
	  return (profiles$1 || []).reduce((config, name) => {
	    const profile = profiles[name];
	    if (!profile) {
	      throw new Error(`Could not find profile with name '${ name }'`);
	    }
	    log$1('applying profile %s', name);
	    return profile.transform(config);
	  }, config);
	};

	var encode_1 = encode;

	var MSB$1 = 0x80
	  , REST$1 = 0x7F
	  , MSBALL = ~REST$1
	  , INT = Math.pow(2, 31);

	function encode(num, out, offset) {
	  out = out || [];
	  offset = offset || 0;
	  var oldOffset = offset;

	  while(num >= INT) {
	    out[offset++] = (num & 0xFF) | MSB$1;
	    num /= 128;
	  }
	  while(num & MSBALL) {
	    out[offset++] = (num & 0xFF) | MSB$1;
	    num >>>= 7;
	  }
	  out[offset] = num | 0;
	  
	  encode.bytes = offset - oldOffset + 1;
	  
	  return out
	}

	var decode = read;

	var MSB = 0x80
	  , REST = 0x7F;

	function read(buf, offset) {
	  var res    = 0
	    , offset = offset || 0
	    , shift  = 0
	    , counter = offset
	    , b
	    , l = buf.length;

	  do {
	    if (counter >= l) {
	      read.bytes = 0;
	      throw new RangeError('Could not decode varint')
	    }
	    b = buf[counter++];
	    res += shift < 28
	      ? (b & REST) << shift
	      : (b & REST) * Math.pow(2, shift);
	    shift += 7;
	  } while (b >= MSB)

	  read.bytes = counter - offset;

	  return res
	}

	var N1 = Math.pow(2,  7);
	var N2 = Math.pow(2, 14);
	var N3 = Math.pow(2, 21);
	var N4 = Math.pow(2, 28);
	var N5 = Math.pow(2, 35);
	var N6 = Math.pow(2, 42);
	var N7 = Math.pow(2, 49);
	var N8 = Math.pow(2, 56);
	var N9 = Math.pow(2, 63);

	var length = function (value) {
	  return (
	    value < N1 ? 1
	  : value < N2 ? 2
	  : value < N3 ? 3
	  : value < N4 ? 4
	  : value < N5 ? 5
	  : value < N6 ? 6
	  : value < N7 ? 7
	  : value < N8 ? 8
	  : value < N9 ? 9
	  :              10
	  )
	};

	var varint$1 = {
	    encode: encode_1
	  , decode: decode
	  , encodingLength: length
	};

	const varint = varint$1;

	var src = (buf) => {
	  if (!(buf instanceof Uint8Array)) {
	    throw new Error('arg needs to be a Uint8Array')
	  }

	  const result = [];

	  while (buf.length > 0) {
	    const num = varint.decode(buf);
	    result.push(num);
	    buf = buf.slice(varint.decode.bytes);
	  }

	  return result
	};

	function varintEncoder(buf) {
	  let out = new Uint8Array(buf.reduce((acc, curr) => {
	    return acc + varint$9.encodingLength(curr);
	  }, 0));
	  let offset = 0;
	  for (const num of buf) {
	    out = varint$9.encode(num, out, offset);
	    offset += varint$9.encodingLength(num);
	  }
	  return out;
	}

	class WantListEntry {
	  constructor(cid, priority, wantType) {
	    this._refCounter = 1;
	    this.cid = cid;
	    this.priority = priority || 1;
	    this.wantType = wantType;
	  }
	  inc() {
	    this._refCounter += 1;
	  }
	  dec() {
	    this._refCounter = Math.max(0, this._refCounter - 1);
	  }
	  hasRefs() {
	    return this._refCounter > 0;
	  }
	  get [Symbol.toStringTag]() {
	    const cidStr = this.cid.toString(base58btc$6);
	    return `WantlistEntry <key: ${ cidStr }, priority: ${ this.priority }, refs: ${ this._refCounter }>`;
	  }
	  equals(other) {
	    return this._refCounter === other._refCounter && this.cid.equals(other.cid) && this.priority === other.priority && this.wantType === other.wantType;
	  }
	}

	const $Reader = minimal.Reader, $Writer = minimal.Writer, $util = minimal.util;
	const $root = minimal.roots['ipfs-bitswap'] || (minimal.roots['ipfs-bitswap'] = {});
	const Message = $root.Message = (() => {
	  function Message(p) {
	    this.blocks = [];
	    this.payload = [];
	    this.blockPresences = [];
	    if (p)
	      for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	        if (p[ks[i]] != null)
	          this[ks[i]] = p[ks[i]];
	  }
	  Message.prototype.wantlist = null;
	  Message.prototype.blocks = $util.emptyArray;
	  Message.prototype.payload = $util.emptyArray;
	  Message.prototype.blockPresences = $util.emptyArray;
	  Message.prototype.pendingBytes = 0;
	  Message.encode = function encode(m, w) {
	    if (!w)
	      w = $Writer.create();
	    if (m.wantlist != null && Object.hasOwnProperty.call(m, 'wantlist'))
	      $root.Message.Wantlist.encode(m.wantlist, w.uint32(10).fork()).ldelim();
	    if (m.blocks != null && m.blocks.length) {
	      for (var i = 0; i < m.blocks.length; ++i)
	        w.uint32(18).bytes(m.blocks[i]);
	    }
	    if (m.payload != null && m.payload.length) {
	      for (var i = 0; i < m.payload.length; ++i)
	        $root.Message.Block.encode(m.payload[i], w.uint32(26).fork()).ldelim();
	    }
	    if (m.blockPresences != null && m.blockPresences.length) {
	      for (var i = 0; i < m.blockPresences.length; ++i)
	        $root.Message.BlockPresence.encode(m.blockPresences[i], w.uint32(34).fork()).ldelim();
	    }
	    if (m.pendingBytes != null && Object.hasOwnProperty.call(m, 'pendingBytes'))
	      w.uint32(40).int32(m.pendingBytes);
	    return w;
	  };
	  Message.decode = function decode(r, l) {
	    if (!(r instanceof $Reader))
	      r = $Reader.create(r);
	    var c = l === undefined ? r.len : r.pos + l, m = new $root.Message();
	    while (r.pos < c) {
	      var t = r.uint32();
	      switch (t >>> 3) {
	      case 1:
	        m.wantlist = $root.Message.Wantlist.decode(r, r.uint32());
	        break;
	      case 2:
	        if (!(m.blocks && m.blocks.length))
	          m.blocks = [];
	        m.blocks.push(r.bytes());
	        break;
	      case 3:
	        if (!(m.payload && m.payload.length))
	          m.payload = [];
	        m.payload.push($root.Message.Block.decode(r, r.uint32()));
	        break;
	      case 4:
	        if (!(m.blockPresences && m.blockPresences.length))
	          m.blockPresences = [];
	        m.blockPresences.push($root.Message.BlockPresence.decode(r, r.uint32()));
	        break;
	      case 5:
	        m.pendingBytes = r.int32();
	        break;
	      default:
	        r.skipType(t & 7);
	        break;
	      }
	    }
	    return m;
	  };
	  Message.fromObject = function fromObject(d) {
	    if (d instanceof $root.Message)
	      return d;
	    var m = new $root.Message();
	    if (d.wantlist != null) {
	      if (typeof d.wantlist !== 'object')
	        throw TypeError('.Message.wantlist: object expected');
	      m.wantlist = $root.Message.Wantlist.fromObject(d.wantlist);
	    }
	    if (d.blocks) {
	      if (!Array.isArray(d.blocks))
	        throw TypeError('.Message.blocks: array expected');
	      m.blocks = [];
	      for (var i = 0; i < d.blocks.length; ++i) {
	        if (typeof d.blocks[i] === 'string')
	          $util.base64.decode(d.blocks[i], m.blocks[i] = $util.newBuffer($util.base64.length(d.blocks[i])), 0);
	        else if (d.blocks[i].length)
	          m.blocks[i] = d.blocks[i];
	      }
	    }
	    if (d.payload) {
	      if (!Array.isArray(d.payload))
	        throw TypeError('.Message.payload: array expected');
	      m.payload = [];
	      for (var i = 0; i < d.payload.length; ++i) {
	        if (typeof d.payload[i] !== 'object')
	          throw TypeError('.Message.payload: object expected');
	        m.payload[i] = $root.Message.Block.fromObject(d.payload[i]);
	      }
	    }
	    if (d.blockPresences) {
	      if (!Array.isArray(d.blockPresences))
	        throw TypeError('.Message.blockPresences: array expected');
	      m.blockPresences = [];
	      for (var i = 0; i < d.blockPresences.length; ++i) {
	        if (typeof d.blockPresences[i] !== 'object')
	          throw TypeError('.Message.blockPresences: object expected');
	        m.blockPresences[i] = $root.Message.BlockPresence.fromObject(d.blockPresences[i]);
	      }
	    }
	    if (d.pendingBytes != null) {
	      m.pendingBytes = d.pendingBytes | 0;
	    }
	    return m;
	  };
	  Message.toObject = function toObject(m, o) {
	    if (!o)
	      o = {};
	    var d = {};
	    if (o.arrays || o.defaults) {
	      d.blocks = [];
	      d.payload = [];
	      d.blockPresences = [];
	    }
	    if (o.defaults) {
	      d.wantlist = null;
	      d.pendingBytes = 0;
	    }
	    if (m.wantlist != null && m.hasOwnProperty('wantlist')) {
	      d.wantlist = $root.Message.Wantlist.toObject(m.wantlist, o);
	    }
	    if (m.blocks && m.blocks.length) {
	      d.blocks = [];
	      for (var j = 0; j < m.blocks.length; ++j) {
	        d.blocks[j] = o.bytes === String ? $util.base64.encode(m.blocks[j], 0, m.blocks[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.blocks[j]) : m.blocks[j];
	      }
	    }
	    if (m.payload && m.payload.length) {
	      d.payload = [];
	      for (var j = 0; j < m.payload.length; ++j) {
	        d.payload[j] = $root.Message.Block.toObject(m.payload[j], o);
	      }
	    }
	    if (m.blockPresences && m.blockPresences.length) {
	      d.blockPresences = [];
	      for (var j = 0; j < m.blockPresences.length; ++j) {
	        d.blockPresences[j] = $root.Message.BlockPresence.toObject(m.blockPresences[j], o);
	      }
	    }
	    if (m.pendingBytes != null && m.hasOwnProperty('pendingBytes')) {
	      d.pendingBytes = m.pendingBytes;
	    }
	    return d;
	  };
	  Message.prototype.toJSON = function toJSON() {
	    return this.constructor.toObject(this, minimal.util.toJSONOptions);
	  };
	  Message.Wantlist = function () {
	    function Wantlist(p) {
	      this.entries = [];
	      if (p)
	        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	          if (p[ks[i]] != null)
	            this[ks[i]] = p[ks[i]];
	    }
	    Wantlist.prototype.entries = $util.emptyArray;
	    Wantlist.prototype.full = false;
	    Wantlist.encode = function encode(m, w) {
	      if (!w)
	        w = $Writer.create();
	      if (m.entries != null && m.entries.length) {
	        for (var i = 0; i < m.entries.length; ++i)
	          $root.Message.Wantlist.Entry.encode(m.entries[i], w.uint32(10).fork()).ldelim();
	      }
	      if (m.full != null && Object.hasOwnProperty.call(m, 'full'))
	        w.uint32(16).bool(m.full);
	      return w;
	    };
	    Wantlist.decode = function decode(r, l) {
	      if (!(r instanceof $Reader))
	        r = $Reader.create(r);
	      var c = l === undefined ? r.len : r.pos + l, m = new $root.Message.Wantlist();
	      while (r.pos < c) {
	        var t = r.uint32();
	        switch (t >>> 3) {
	        case 1:
	          if (!(m.entries && m.entries.length))
	            m.entries = [];
	          m.entries.push($root.Message.Wantlist.Entry.decode(r, r.uint32()));
	          break;
	        case 2:
	          m.full = r.bool();
	          break;
	        default:
	          r.skipType(t & 7);
	          break;
	        }
	      }
	      return m;
	    };
	    Wantlist.fromObject = function fromObject(d) {
	      if (d instanceof $root.Message.Wantlist)
	        return d;
	      var m = new $root.Message.Wantlist();
	      if (d.entries) {
	        if (!Array.isArray(d.entries))
	          throw TypeError('.Message.Wantlist.entries: array expected');
	        m.entries = [];
	        for (var i = 0; i < d.entries.length; ++i) {
	          if (typeof d.entries[i] !== 'object')
	            throw TypeError('.Message.Wantlist.entries: object expected');
	          m.entries[i] = $root.Message.Wantlist.Entry.fromObject(d.entries[i]);
	        }
	      }
	      if (d.full != null) {
	        m.full = Boolean(d.full);
	      }
	      return m;
	    };
	    Wantlist.toObject = function toObject(m, o) {
	      if (!o)
	        o = {};
	      var d = {};
	      if (o.arrays || o.defaults) {
	        d.entries = [];
	      }
	      if (o.defaults) {
	        d.full = false;
	      }
	      if (m.entries && m.entries.length) {
	        d.entries = [];
	        for (var j = 0; j < m.entries.length; ++j) {
	          d.entries[j] = $root.Message.Wantlist.Entry.toObject(m.entries[j], o);
	        }
	      }
	      if (m.full != null && m.hasOwnProperty('full')) {
	        d.full = m.full;
	      }
	      return d;
	    };
	    Wantlist.prototype.toJSON = function toJSON() {
	      return this.constructor.toObject(this, minimal.util.toJSONOptions);
	    };
	    Wantlist.WantType = function () {
	      const valuesById = {}, values = Object.create(valuesById);
	      values[valuesById[0] = 'Block'] = 0;
	      values[valuesById[1] = 'Have'] = 1;
	      return values;
	    }();
	    Wantlist.Entry = function () {
	      function Entry(p) {
	        if (p)
	          for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	            if (p[ks[i]] != null)
	              this[ks[i]] = p[ks[i]];
	      }
	      Entry.prototype.block = $util.newBuffer([]);
	      Entry.prototype.priority = 0;
	      Entry.prototype.cancel = false;
	      Entry.prototype.wantType = 0;
	      Entry.prototype.sendDontHave = false;
	      Entry.encode = function encode(m, w) {
	        if (!w)
	          w = $Writer.create();
	        if (m.block != null && Object.hasOwnProperty.call(m, 'block'))
	          w.uint32(10).bytes(m.block);
	        if (m.priority != null && Object.hasOwnProperty.call(m, 'priority'))
	          w.uint32(16).int32(m.priority);
	        if (m.cancel != null && Object.hasOwnProperty.call(m, 'cancel'))
	          w.uint32(24).bool(m.cancel);
	        if (m.wantType != null && Object.hasOwnProperty.call(m, 'wantType'))
	          w.uint32(32).int32(m.wantType);
	        if (m.sendDontHave != null && Object.hasOwnProperty.call(m, 'sendDontHave'))
	          w.uint32(40).bool(m.sendDontHave);
	        return w;
	      };
	      Entry.decode = function decode(r, l) {
	        if (!(r instanceof $Reader))
	          r = $Reader.create(r);
	        var c = l === undefined ? r.len : r.pos + l, m = new $root.Message.Wantlist.Entry();
	        while (r.pos < c) {
	          var t = r.uint32();
	          switch (t >>> 3) {
	          case 1:
	            m.block = r.bytes();
	            break;
	          case 2:
	            m.priority = r.int32();
	            break;
	          case 3:
	            m.cancel = r.bool();
	            break;
	          case 4:
	            m.wantType = r.int32();
	            break;
	          case 5:
	            m.sendDontHave = r.bool();
	            break;
	          default:
	            r.skipType(t & 7);
	            break;
	          }
	        }
	        return m;
	      };
	      Entry.fromObject = function fromObject(d) {
	        if (d instanceof $root.Message.Wantlist.Entry)
	          return d;
	        var m = new $root.Message.Wantlist.Entry();
	        if (d.block != null) {
	          if (typeof d.block === 'string')
	            $util.base64.decode(d.block, m.block = $util.newBuffer($util.base64.length(d.block)), 0);
	          else if (d.block.length)
	            m.block = d.block;
	        }
	        if (d.priority != null) {
	          m.priority = d.priority | 0;
	        }
	        if (d.cancel != null) {
	          m.cancel = Boolean(d.cancel);
	        }
	        switch (d.wantType) {
	        case 'Block':
	        case 0:
	          m.wantType = 0;
	          break;
	        case 'Have':
	        case 1:
	          m.wantType = 1;
	          break;
	        }
	        if (d.sendDontHave != null) {
	          m.sendDontHave = Boolean(d.sendDontHave);
	        }
	        return m;
	      };
	      Entry.toObject = function toObject(m, o) {
	        if (!o)
	          o = {};
	        var d = {};
	        if (o.defaults) {
	          if (o.bytes === String)
	            d.block = '';
	          else {
	            d.block = [];
	            if (o.bytes !== Array)
	              d.block = $util.newBuffer(d.block);
	          }
	          d.priority = 0;
	          d.cancel = false;
	          d.wantType = o.enums === String ? 'Block' : 0;
	          d.sendDontHave = false;
	        }
	        if (m.block != null && m.hasOwnProperty('block')) {
	          d.block = o.bytes === String ? $util.base64.encode(m.block, 0, m.block.length) : o.bytes === Array ? Array.prototype.slice.call(m.block) : m.block;
	        }
	        if (m.priority != null && m.hasOwnProperty('priority')) {
	          d.priority = m.priority;
	        }
	        if (m.cancel != null && m.hasOwnProperty('cancel')) {
	          d.cancel = m.cancel;
	        }
	        if (m.wantType != null && m.hasOwnProperty('wantType')) {
	          d.wantType = o.enums === String ? $root.Message.Wantlist.WantType[m.wantType] : m.wantType;
	        }
	        if (m.sendDontHave != null && m.hasOwnProperty('sendDontHave')) {
	          d.sendDontHave = m.sendDontHave;
	        }
	        return d;
	      };
	      Entry.prototype.toJSON = function toJSON() {
	        return this.constructor.toObject(this, minimal.util.toJSONOptions);
	      };
	      return Entry;
	    }();
	    return Wantlist;
	  }();
	  Message.Block = function () {
	    function Block(p) {
	      if (p)
	        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	          if (p[ks[i]] != null)
	            this[ks[i]] = p[ks[i]];
	    }
	    Block.prototype.prefix = $util.newBuffer([]);
	    Block.prototype.data = $util.newBuffer([]);
	    Block.encode = function encode(m, w) {
	      if (!w)
	        w = $Writer.create();
	      if (m.prefix != null && Object.hasOwnProperty.call(m, 'prefix'))
	        w.uint32(10).bytes(m.prefix);
	      if (m.data != null && Object.hasOwnProperty.call(m, 'data'))
	        w.uint32(18).bytes(m.data);
	      return w;
	    };
	    Block.decode = function decode(r, l) {
	      if (!(r instanceof $Reader))
	        r = $Reader.create(r);
	      var c = l === undefined ? r.len : r.pos + l, m = new $root.Message.Block();
	      while (r.pos < c) {
	        var t = r.uint32();
	        switch (t >>> 3) {
	        case 1:
	          m.prefix = r.bytes();
	          break;
	        case 2:
	          m.data = r.bytes();
	          break;
	        default:
	          r.skipType(t & 7);
	          break;
	        }
	      }
	      return m;
	    };
	    Block.fromObject = function fromObject(d) {
	      if (d instanceof $root.Message.Block)
	        return d;
	      var m = new $root.Message.Block();
	      if (d.prefix != null) {
	        if (typeof d.prefix === 'string')
	          $util.base64.decode(d.prefix, m.prefix = $util.newBuffer($util.base64.length(d.prefix)), 0);
	        else if (d.prefix.length)
	          m.prefix = d.prefix;
	      }
	      if (d.data != null) {
	        if (typeof d.data === 'string')
	          $util.base64.decode(d.data, m.data = $util.newBuffer($util.base64.length(d.data)), 0);
	        else if (d.data.length)
	          m.data = d.data;
	      }
	      return m;
	    };
	    Block.toObject = function toObject(m, o) {
	      if (!o)
	        o = {};
	      var d = {};
	      if (o.defaults) {
	        if (o.bytes === String)
	          d.prefix = '';
	        else {
	          d.prefix = [];
	          if (o.bytes !== Array)
	            d.prefix = $util.newBuffer(d.prefix);
	        }
	        if (o.bytes === String)
	          d.data = '';
	        else {
	          d.data = [];
	          if (o.bytes !== Array)
	            d.data = $util.newBuffer(d.data);
	        }
	      }
	      if (m.prefix != null && m.hasOwnProperty('prefix')) {
	        d.prefix = o.bytes === String ? $util.base64.encode(m.prefix, 0, m.prefix.length) : o.bytes === Array ? Array.prototype.slice.call(m.prefix) : m.prefix;
	      }
	      if (m.data != null && m.hasOwnProperty('data')) {
	        d.data = o.bytes === String ? $util.base64.encode(m.data, 0, m.data.length) : o.bytes === Array ? Array.prototype.slice.call(m.data) : m.data;
	      }
	      return d;
	    };
	    Block.prototype.toJSON = function toJSON() {
	      return this.constructor.toObject(this, minimal.util.toJSONOptions);
	    };
	    return Block;
	  }();
	  Message.BlockPresenceType = function () {
	    const valuesById = {}, values = Object.create(valuesById);
	    values[valuesById[0] = 'Have'] = 0;
	    values[valuesById[1] = 'DontHave'] = 1;
	    return values;
	  }();
	  Message.BlockPresence = function () {
	    function BlockPresence(p) {
	      if (p)
	        for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)
	          if (p[ks[i]] != null)
	            this[ks[i]] = p[ks[i]];
	    }
	    BlockPresence.prototype.cid = $util.newBuffer([]);
	    BlockPresence.prototype.type = 0;
	    BlockPresence.encode = function encode(m, w) {
	      if (!w)
	        w = $Writer.create();
	      if (m.cid != null && Object.hasOwnProperty.call(m, 'cid'))
	        w.uint32(10).bytes(m.cid);
	      if (m.type != null && Object.hasOwnProperty.call(m, 'type'))
	        w.uint32(16).int32(m.type);
	      return w;
	    };
	    BlockPresence.decode = function decode(r, l) {
	      if (!(r instanceof $Reader))
	        r = $Reader.create(r);
	      var c = l === undefined ? r.len : r.pos + l, m = new $root.Message.BlockPresence();
	      while (r.pos < c) {
	        var t = r.uint32();
	        switch (t >>> 3) {
	        case 1:
	          m.cid = r.bytes();
	          break;
	        case 2:
	          m.type = r.int32();
	          break;
	        default:
	          r.skipType(t & 7);
	          break;
	        }
	      }
	      return m;
	    };
	    BlockPresence.fromObject = function fromObject(d) {
	      if (d instanceof $root.Message.BlockPresence)
	        return d;
	      var m = new $root.Message.BlockPresence();
	      if (d.cid != null) {
	        if (typeof d.cid === 'string')
	          $util.base64.decode(d.cid, m.cid = $util.newBuffer($util.base64.length(d.cid)), 0);
	        else if (d.cid.length)
	          m.cid = d.cid;
	      }
	      switch (d.type) {
	      case 'Have':
	      case 0:
	        m.type = 0;
	        break;
	      case 'DontHave':
	      case 1:
	        m.type = 1;
	        break;
	      }
	      return m;
	    };
	    BlockPresence.toObject = function toObject(m, o) {
	      if (!o)
	        o = {};
	      var d = {};
	      if (o.defaults) {
	        if (o.bytes === String)
	          d.cid = '';
	        else {
	          d.cid = [];
	          if (o.bytes !== Array)
	            d.cid = $util.newBuffer(d.cid);
	        }
	        d.type = o.enums === String ? 'Have' : 0;
	      }
	      if (m.cid != null && m.hasOwnProperty('cid')) {
	        d.cid = o.bytes === String ? $util.base64.encode(m.cid, 0, m.cid.length) : o.bytes === Array ? Array.prototype.slice.call(m.cid) : m.cid;
	      }
	      if (m.type != null && m.hasOwnProperty('type')) {
	        d.type = o.enums === String ? $root.Message.BlockPresenceType[m.type] : m.type;
	      }
	      return d;
	    };
	    BlockPresence.prototype.toJSON = function toJSON() {
	      return this.constructor.toObject(this, minimal.util.toJSONOptions);
	    };
	    return BlockPresence;
	  }();
	  return Message;
	})();

	const WantType$1 = {
	  Block: Message.Wantlist.WantType.Block,
	  Have: Message.Wantlist.WantType.Have
	};
	const sortBy = (fn, list) => {
	  return Array.prototype.slice.call(list, 0).sort((a, b) => {
	    const aa = fn(a);
	    const bb = fn(b);
	    return aa < bb ? -1 : aa > bb ? 1 : 0;
	  });
	};
	class Wantlist {
	  constructor(stats, libp2p) {
	    this.set = libp2p ? trackedMap$2({
	      system: 'ipfs',
	      component: 'bitswap',
	      metric: 'wantlist',
	      metrics: libp2p.metrics
	    }) : new Map();
	    this._stats = stats;
	  }
	  get length() {
	    return this.set.size;
	  }
	  add(cid, priority, wantType) {
	    const cidStr = cid.toString(base58btc$6);
	    const entry = this.set.get(cidStr);
	    if (entry) {
	      entry.inc();
	      entry.priority = priority;
	      if (entry.wantType === WantType$1.Have && wantType === WantType$1.Block) {
	        entry.wantType = wantType;
	      }
	    } else {
	      this.set.set(cidStr, new WantListEntry(cid, priority, wantType));
	      if (this._stats) {
	        this._stats.push(null, 'wantListSize', 1);
	      }
	    }
	  }
	  remove(cid) {
	    const cidStr = cid.toString(base58btc$6);
	    const entry = this.set.get(cidStr);
	    if (!entry) {
	      return;
	    }
	    entry.dec();
	    if (entry.hasRefs()) {
	      return;
	    }
	    this.set.delete(cidStr);
	    if (this._stats) {
	      this._stats.push(null, 'wantListSize', -1);
	    }
	  }
	  removeForce(cidStr) {
	    if (this.set.has(cidStr)) {
	      this.set.delete(cidStr);
	    }
	  }
	  forEach(fn) {
	    return this.set.forEach(fn);
	  }
	  entries() {
	    return this.set.entries();
	  }
	  sortedEntries() {
	    return new Map(sortBy(o => o[1].key, Array.from(this.set.entries())));
	  }
	  contains(cid) {
	    const cidStr = cid.toString(base58btc$6);
	    return this.set.has(cidStr);
	  }
	  get(cid) {
	    const cidStr = cid.toString(base58btc$6);
	    return this.set.get(cidStr);
	  }
	}
	Wantlist.Entry = WantListEntry;

	const WantlistEntry = Wantlist.Entry;
	class BitswapMessageEntry {
	  constructor(cid, priority, wantType, cancel, sendDontHave) {
	    this.entry = new WantlistEntry(cid, priority, wantType);
	    this.cancel = Boolean(cancel);
	    this.sendDontHave = Boolean(sendDontHave);
	  }
	  get cid() {
	    return this.entry.cid;
	  }
	  set cid(cid) {
	    this.entry.cid = cid;
	  }
	  get priority() {
	    return this.entry.priority;
	  }
	  set priority(val) {
	    this.entry.priority = val;
	  }
	  get wantType() {
	    return this.entry.wantType;
	  }
	  set wantType(val) {
	    this.entry.wantType = val;
	  }
	  get [Symbol.toStringTag]() {
	    const cidStr = this.cid.toString(base58btc$6);
	    return `BitswapMessageEntry ${ cidStr } <cancel: ${ this.cancel }, priority: ${ this.priority }>`;
	  }
	  equals(other) {
	    return this.cancel === other.cancel && this.sendDontHave === other.sendDontHave && this.wantType === other.wantType && this.entry.equals(other.entry);
	  }
	}

	const logger = (id, subsystem) => {
	  const name = ['bitswap'];
	  if (subsystem) {
	    name.push(subsystem);
	  }
	  if (id) {
	    name.push(`${ id.toB58String().slice(0, 8) }`);
	  }
	  return Object.assign(debug$S(name.join(':')), { error: debug$S(name.concat(['error']).join(':')) });
	};
	const isMapEqual = (a, b) => {
	  if (a.size !== b.size) {
	    return false;
	  }
	  for (const [key, valueA] of a) {
	    const valueB = b.get(key);
	    if (valueB === undefined) {
	      return false;
	    }
	    if (valueA instanceof Uint8Array && valueB instanceof Uint8Array && !equals$1(valueA, valueB)) {
	      return false;
	    }
	    if (valueA instanceof BitswapMessageEntry && valueB instanceof BitswapMessageEntry && !valueA.equals(valueB)) {
	      return false;
	    }
	  }
	  return true;
	};

	class BitswapMessage {
	  constructor(full) {
	    this.full = full;
	    this.wantlist = new Map();
	    this.blocks = new Map();
	    this.blockPresences = new Map();
	    this.pendingBytes = 0;
	  }
	  get empty() {
	    return this.blocks.size === 0 && this.wantlist.size === 0 && this.blockPresences.size === 0;
	  }
	  addEntry(cid, priority, wantType, cancel, sendDontHave) {
	    if (wantType == null) {
	      wantType = BitswapMessage.WantType.Block;
	    }
	    const cidStr = cid.toString(base58btc$6);
	    const entry = this.wantlist.get(cidStr);
	    if (entry) {
	      if (entry.wantType === wantType) {
	        entry.priority = priority;
	      }
	      if (cancel) {
	        entry.cancel = Boolean(cancel);
	      }
	      if (sendDontHave) {
	        entry.sendDontHave = Boolean(sendDontHave);
	      }
	      if (wantType === BitswapMessage.WantType.Block && entry.wantType === BitswapMessage.WantType.Have) {
	        entry.wantType = wantType;
	      }
	    } else {
	      this.wantlist.set(cidStr, new BitswapMessageEntry(cid, priority, wantType, cancel, sendDontHave));
	    }
	  }
	  addBlock(cid, block) {
	    const cidStr = cid.toString(base58btc$6);
	    this.blocks.set(cidStr, block);
	  }
	  addHave(cid) {
	    const cidStr = cid.toString(base58btc$6);
	    if (!this.blockPresences.has(cidStr)) {
	      this.blockPresences.set(cidStr, BitswapMessage.BlockPresenceType.Have);
	    }
	  }
	  addDontHave(cid) {
	    const cidStr = cid.toString(base58btc$6);
	    if (!this.blockPresences.has(cidStr)) {
	      this.blockPresences.set(cidStr, BitswapMessage.BlockPresenceType.DontHave);
	    }
	  }
	  cancel(cid) {
	    const cidStr = cid.toString(base58btc$6);
	    this.wantlist.delete(cidStr);
	    this.addEntry(cid, 0, BitswapMessage.WantType.Block, true, false);
	  }
	  setPendingBytes(size) {
	    this.pendingBytes = size;
	  }
	  serializeToBitswap100() {
	    const msg = {
	      wantlist: {
	        entries: Array.from(this.wantlist.values()).map(entry => {
	          return {
	            block: entry.cid.bytes,
	            priority: Number(entry.priority),
	            cancel: Boolean(entry.cancel)
	          };
	        }),
	        full: this.full ? true : undefined
	      },
	      blocks: Array.from(this.blocks.values())
	    };
	    return Message.encode(msg).finish();
	  }
	  serializeToBitswap110() {
	    const msg = {
	      wantlist: {
	        entries: Array.from(this.wantlist.values()).map(entry => {
	          return {
	            block: entry.cid.bytes,
	            priority: Number(entry.priority),
	            wantType: entry.wantType,
	            cancel: Boolean(entry.cancel),
	            sendDontHave: Boolean(entry.sendDontHave)
	          };
	        }),
	        full: this.full ? true : undefined
	      },
	      blockPresences: [],
	      payload: [],
	      pendingBytes: this.pendingBytes
	    };
	    for (const [cidStr, data] of this.blocks.entries()) {
	      const cid = CID$6.parse(cidStr);
	      const version = cid.version;
	      const codec = cid.code;
	      const multihash = cid.multihash.code;
	      const digestLength = cid.multihash.digest.length;
	      const prefix = varintEncoder([
	        version,
	        codec,
	        multihash,
	        digestLength
	      ]);
	      msg.payload.push(new Message.Block({
	        prefix,
	        data
	      }));
	    }
	    for (const [cidStr, bpType] of this.blockPresences) {
	      msg.blockPresences.push(new Message.BlockPresence({
	        cid: CID$6.parse(cidStr).bytes,
	        type: bpType
	      }));
	    }
	    if (this.pendingBytes > 0) {
	      msg.pendingBytes = this.pendingBytes;
	    }
	    return Message.encode(msg).finish();
	  }
	  equals(other) {
	    if (this.full !== other.full || this.pendingBytes !== other.pendingBytes || !isMapEqual(this.wantlist, other.wantlist) || !isMapEqual(this.blocks, other.blocks) || !isMapEqual(this.blockPresences, other.blockPresences)) {
	      return false;
	    }
	    return true;
	  }
	  get [Symbol.toStringTag]() {
	    const list = Array.from(this.wantlist.keys());
	    const blocks = Array.from(this.blocks.keys());
	    return `BitswapMessage <full: ${ this.full }, list: ${ list }, blocks: ${ blocks }>`;
	  }
	}
	BitswapMessage.deserialize = async (raw, hashLoader) => {
	  const decoded = Message.decode(raw);
	  const isFull = decoded.wantlist && decoded.wantlist.full || false;
	  const msg = new BitswapMessage(isFull);
	  if (decoded.wantlist && decoded.wantlist.entries) {
	    decoded.wantlist.entries.forEach(entry => {
	      if (!entry.block) {
	        return;
	      }
	      const cid = CID$6.decode(entry.block);
	      msg.addEntry(cid, entry.priority || 0, entry.wantType, Boolean(entry.cancel), Boolean(entry.sendDontHave));
	    });
	  }
	  if (decoded.blockPresences) {
	    decoded.blockPresences.forEach(blockPresence => {
	      if (!blockPresence.cid) {
	        return;
	      }
	      const cid = CID$6.decode(blockPresence.cid);
	      if (blockPresence.type === BitswapMessage.BlockPresenceType.Have) {
	        msg.addHave(cid);
	      } else {
	        msg.addDontHave(cid);
	      }
	    });
	  }
	  if (decoded.blocks.length > 0) {
	    await Promise.all(decoded.blocks.map(async b => {
	      const hash = await sha256$b.digest(b);
	      const cid = CID$6.createV0(hash);
	      msg.addBlock(cid, b);
	    }));
	    return msg;
	  }
	  if (decoded.payload.length > 0) {
	    await Promise.all(decoded.payload.map(async p => {
	      if (!p.prefix || !p.data) {
	        return;
	      }
	      const values = src(p.prefix);
	      const cidVersion = values[0];
	      const multicodec = values[1];
	      const hashAlg = values[2];
	      const hasher = hashAlg === sha256$b.code ? sha256$b : hashLoader && await hashLoader.getHasher(hashAlg);
	      if (!hasher) {
	        throw errCode$q(new Error('Unknown hash algorithm'), 'ERR_UNKNOWN_HASH_ALG');
	      }
	      const hash = await hasher.digest(p.data);
	      const cid = CID$6.create(cidVersion, multicodec, hash);
	      msg.addBlock(cid, p.data);
	    }));
	    msg.setPendingBytes(decoded.pendingBytes);
	    return msg;
	  }
	  return msg;
	};
	BitswapMessage.blockPresenceSize = cid => {
	  return cid.bytes.length + 1;
	};
	BitswapMessage.Entry = BitswapMessageEntry;
	BitswapMessage.WantType = {
	  Block: Message.Wantlist.WantType.Block,
	  Have: Message.Wantlist.WantType.Have
	};
	BitswapMessage.BlockPresenceType = {
	  Have: Message.BlockPresenceType.Have,
	  DontHave: Message.BlockPresenceType.DontHave
	};

	const SECOND = 1000;
	const maxProvidersPerRequest = 3;
	const providerRequestTimeout = 10 * SECOND;
	const kMaxPriority = Math.pow(2, 31) - 1;
	const maxListeners = 1000;
	const wantlistSendDebounceMs = 1;

	var justDebounceIt = debounce;

	function debounce(fn, wait, callFirst) {
	  var timeout = null;
	  var debouncedFn = null;

	  var clear = function() {
	    if (timeout) {
	      clearTimeout(timeout);

	      debouncedFn = null;
	      timeout = null;
	    }
	  };

	  var flush = function() {
	    var call = debouncedFn;
	    clear();

	    if (call) {
	      call();
	    }
	  };

	  var debounceWrapper = function() {
	    if (!wait) {
	      return fn.apply(this, arguments);
	    }

	    var context = this;
	    var args = arguments;
	    var callNow = callFirst && !timeout;
	    clear();

	    debouncedFn = function() {
	      fn.apply(context, args);
	    };

	    timeout = setTimeout(function() {
	      timeout = null;

	      if (!callNow) {
	        var call = debouncedFn;
	        debouncedFn = null;

	        return call();
	      }
	    }, wait);

	    if (callNow) {
	      return debouncedFn();
	    }
	  };

	  debounceWrapper.cancel = clear;
	  debounceWrapper.flush = flush;

	  return debounceWrapper;
	}

	class MsgQueue {
	  constructor(selfPeerId, otherPeerId, network) {
	    this.peerId = otherPeerId;
	    this.network = network;
	    this.refcnt = 1;
	    this._entries = [];
	    this._log = logger(selfPeerId, 'msgqueue');
	    this.sendEntries = justDebounceIt(this._sendEntries.bind(this), wantlistSendDebounceMs);
	  }
	  addMessage(msg) {
	    if (msg.empty) {
	      return;
	    }
	    this.send(msg);
	  }
	  addEntries(entries) {
	    this._entries = this._entries.concat(entries);
	    this.sendEntries();
	  }
	  _sendEntries() {
	    if (!this._entries.length) {
	      return;
	    }
	    const msg = new BitswapMessage(false);
	    this._entries.forEach(entry => {
	      if (entry.cancel) {
	        msg.cancel(entry.cid);
	      } else {
	        msg.addEntry(entry.cid, entry.priority);
	      }
	    });
	    this._entries = [];
	    this.addMessage(msg);
	  }
	  async send(msg) {
	    try {
	      await this.network.connectTo(this.peerId);
	    } catch (err) {
	      this._log.error('cant connect to peer %s: %s', this.peerId.toB58String(), err.message);
	      return;
	    }
	    this._log('sending message to peer %s', this.peerId.toB58String());
	    this.network.sendMessage(this.peerId, msg).catch(err => {
	      this._log.error('send error: %s', err.message);
	    });
	  }
	}

	class WantManager {
	  constructor(peerId, network, stats, libp2p) {
	    this.peers = trackedMap$2({
	      system: 'ipfs',
	      component: 'bitswap',
	      metric: 'want-manager-peers',
	      metrics: libp2p.metrics
	    });
	    this.wantlist = new Wantlist(stats, libp2p);
	    this.network = network;
	    this._stats = stats;
	    this._peerId = peerId;
	    this._log = logger(peerId, 'want');
	  }
	  _addEntries(cids, cancel, force) {
	    const entries = cids.map((cid, i) => {
	      return new BitswapMessage.Entry(cid, kMaxPriority - i, BitswapMessage.WantType.Block, cancel);
	    });
	    entries.forEach(e => {
	      if (e.cancel) {
	        if (force) {
	          this.wantlist.removeForce(e.cid.toString(base58btc$6));
	        } else {
	          this.wantlist.remove(e.cid);
	        }
	      } else {
	        this._log('adding to wl');
	        this.wantlist.add(e.cid, e.priority);
	      }
	    });
	    for (const p of this.peers.values()) {
	      p.addEntries(entries);
	    }
	  }
	  _startPeerHandler(peerId) {
	    let mq = this.peers.get(peerId.toB58String());
	    if (mq) {
	      mq.refcnt++;
	      return;
	    }
	    mq = new MsgQueue(this._peerId, peerId, this.network);
	    const fullwantlist = new BitswapMessage(true);
	    for (const entry of this.wantlist.entries()) {
	      fullwantlist.addEntry(entry[1].cid, entry[1].priority);
	    }
	    mq.addMessage(fullwantlist);
	    this.peers.set(peerId.toB58String(), mq);
	    return mq;
	  }
	  _stopPeerHandler(peerId) {
	    const mq = this.peers.get(peerId.toB58String());
	    if (!mq) {
	      return;
	    }
	    mq.refcnt--;
	    if (mq.refcnt > 0) {
	      return;
	    }
	    this.peers.delete(peerId.toB58String());
	  }
	  wantBlocks(cids, options = {}) {
	    this._addEntries(cids, false);
	    if (options && options.signal) {
	      options.signal.addEventListener('abort', () => {
	        this.cancelWants(cids);
	      });
	    }
	  }
	  unwantBlocks(cids) {
	    this._log('unwant blocks: %s', cids.length);
	    this._addEntries(cids, true, true);
	  }
	  cancelWants(cids) {
	    this._log('cancel wants: %s', cids.length);
	    this._addEntries(cids, true);
	  }
	  connectedPeers() {
	    return Array.from(this.peers.keys());
	  }
	  connected(peerId) {
	    this._startPeerHandler(peerId);
	  }
	  disconnected(peerId) {
	    this._stopPeerHandler(peerId);
	  }
	  start() {
	  }
	  stop() {
	    this.peers.forEach(mq => this.disconnected(mq.peerId));
	  }
	}

	const BITSWAP100 = '/ipfs/bitswap/1.0.0';
	const BITSWAP110 = '/ipfs/bitswap/1.1.0';
	const BITSWAP120 = '/ipfs/bitswap/1.2.0';
	class Network$1 {
	  constructor(libp2p, bitswap, stats, options = {}) {
	    this._log = logger(libp2p.peerId, 'network');
	    this._libp2p = libp2p;
	    this._bitswap = bitswap;
	    this._protocols = [BITSWAP100];
	    if (!options.b100Only) {
	      this._protocols.unshift(BITSWAP110);
	      this._protocols.unshift(BITSWAP120);
	    }
	    this._stats = stats;
	    this._running = false;
	    this._onPeerConnect = this._onPeerConnect.bind(this);
	    this._onPeerDisconnect = this._onPeerDisconnect.bind(this);
	    this._onConnection = this._onConnection.bind(this);
	    this._hashLoader = options.hashLoader;
	  }
	  async start() {
	    this._running = true;
	    await this._libp2p.handle(this._protocols, this._onConnection);
	    const topology = new multicodecTopology({
	      multicodecs: this._protocols,
	      handlers: {
	        onConnect: this._onPeerConnect,
	        onDisconnect: this._onPeerDisconnect
	      }
	    });
	    this._registrarId = await this._libp2p.registrar.register(topology);
	    for await (const peer of this._libp2p.peerStore.getPeers()) {
	      const conn = this._libp2p.connectionManager.get(peer.id);
	      conn && this._onPeerConnect(conn.remotePeer);
	    }
	  }
	  async stop() {
	    this._running = false;
	    await this._libp2p.unhandle(this._protocols);
	    if (this._registrarId != null) {
	      this._libp2p.registrar.unregister(this._registrarId);
	    }
	  }
	  async _onConnection({protocol, stream, connection}) {
	    if (!this._running) {
	      return;
	    }
	    this._log('incoming new bitswap %s connection from %s', protocol, connection.remotePeer.toB58String());
	    try {
	      await pipe_1(stream, src$i.decode(), async source => {
	        for await (const data of source) {
	          try {
	            const message = await BitswapMessage.deserialize(data.slice(), this._hashLoader);
	            await this._bitswap._receiveMessage(connection.remotePeer, message);
	          } catch (err) {
	            this._bitswap._receiveError(err);
	            break;
	          }
	        }
	      });
	    } catch (err) {
	      this._log(err);
	    }
	  }
	  _onPeerConnect(peerId) {
	    this._bitswap._onPeerConnected(peerId);
	  }
	  _onPeerDisconnect(peerId) {
	    this._bitswap._onPeerDisconnected(peerId);
	  }
	  findProviders(cid, maxProviders, options = {}) {
	    return this._libp2p.contentRouting.findProviders(cid, {
	      timeout: providerRequestTimeout,
	      maxNumProviders: maxProviders
	    });
	  }
	  async findAndConnect(cid, options) {
	    const connectAttempts = [];
	    for await (const provider of this.findProviders(cid, maxProvidersPerRequest, options)) {
	      this._log(`connecting to provider ${ provider.id }`);
	      connectAttempts.push(this.connectTo(provider.id, options).catch(err => {
	        this._log.error(err);
	      }));
	    }
	    await Promise.all(connectAttempts);
	  }
	  async provide(cid, options) {
	    await this._libp2p.contentRouting.provide(cid, options);
	  }
	  async sendMessage(peer, msg) {
	    if (!this._running)
	      throw new Error('network isn\'t running');
	    const stringId = peer.toB58String();
	    this._log('sendMessage to %s', stringId, msg);
	    const connection = await this._libp2p.dial(peer);
	    const {stream, protocol} = await connection.newStream([
	      BITSWAP120,
	      BITSWAP110,
	      BITSWAP100
	    ]);
	    let serialized;
	    switch (protocol) {
	    case BITSWAP100:
	      serialized = msg.serializeToBitswap100();
	      break;
	    case BITSWAP110:
	    case BITSWAP120:
	      serialized = msg.serializeToBitswap110();
	      break;
	    default:
	      throw new Error('Unknown protocol: ' + protocol);
	    }
	    writeMessage(stream, serialized, this._log);
	    this._updateSentStats(peer, msg.blocks);
	  }
	  async connectTo(peer, options) {
	    if (!this._running) {
	      throw new Error('network isn\'t running');
	    }
	    return this._libp2p.dial(peer, options);
	  }
	  _updateSentStats(peer, blocks) {
	    const peerId = peer.toB58String();
	    if (this._stats) {
	      for (const block of blocks.values()) {
	        this._stats.push(peerId, 'dataSent', block.length);
	      }
	      this._stats.push(peerId, 'blocksSent', blocks.size);
	    }
	  }
	}
	async function writeMessage(stream, msg, log) {
	  try {
	    await pipe_1([msg], src$i.encode(), stream);
	  } catch (err) {
	    log(err);
	  }
	}

	class Ledger {
	  constructor(peerId) {
	    this.partner = peerId;
	    this.wantlist = new Wantlist();
	    this.exchangeCount = 0;
	    this.sentToPeer = new Map();
	    this.accounting = {
	      bytesSent: 0,
	      bytesRecv: 0
	    };
	  }
	  sentBytes(n) {
	    this.exchangeCount++;
	    this.lastExchange = new Date().getTime();
	    this.accounting.bytesSent += n;
	  }
	  receivedBytes(n) {
	    this.exchangeCount++;
	    this.lastExchange = new Date().getTime();
	    this.accounting.bytesRecv += n;
	  }
	  wants(cid, priority, wantType) {
	    this.wantlist.add(cid, priority, wantType);
	  }
	  cancelWant(cid) {
	    this.wantlist.remove(cid);
	  }
	  wantlistContains(cid) {
	    return this.wantlist.get(cid);
	  }
	  debtRatio() {
	    return this.accounting.bytesSent / (this.accounting.bytesRecv + 1);
	  }
	}

	class SortedMap extends Map {
	  constructor(entries, cmp) {
	    super();
	    this._cmp = cmp || this._defaultSort;
	    this._keys = [];
	    for (const [k, v] of entries || []) {
	      this.set(k, v);
	    }
	  }
	  update(i) {
	    if (i < 0 || i >= this._keys.length) {
	      return;
	    }
	    const k = this._keys[i];
	    this._keys.splice(i, 1);
	    const newIdx = this._find(k);
	    this._keys.splice(newIdx, 0, k);
	  }
	  set(k, v) {
	    if (this.has(k)) {
	      const i = this.indexOf(k);
	      this._keys.splice(i, 1);
	    }
	    super.set(k, v);
	    const i = this._find(k);
	    this._keys.splice(i, 0, k);
	    return this;
	  }
	  clear() {
	    super.clear();
	    this._keys = [];
	  }
	  delete(k) {
	    if (!this.has(k)) {
	      return false;
	    }
	    const i = this.indexOf(k);
	    this._keys.splice(i, 1);
	    return super.delete(k);
	  }
	  indexOf(k) {
	    if (!this.has(k)) {
	      return -1;
	    }
	    const i = this._find(k);
	    if (this._keys[i] === k) {
	      return i;
	    }
	    for (let j = 1; j < this._keys.length; j++) {
	      if (this._keys[i + j] === k)
	        return i + j;
	      if (this._keys[i - j] === k)
	        return i - j;
	    }
	    return -1;
	  }
	  _find(k) {
	    let lower = 0;
	    let upper = this._keys.length;
	    while (lower < upper) {
	      const pivot = lower + upper >>> 1;
	      const cmp = this._kCmp(this._keys[pivot], k);
	      if (cmp < 0) {
	        lower = pivot + 1;
	      } else if (cmp > 0) {
	        upper = pivot;
	      } else {
	        return pivot;
	      }
	    }
	    return lower;
	  }
	  *keys() {
	    for (const k of this._keys) {
	      yield k;
	    }
	    return undefined;
	  }
	  *values() {
	    for (const k of this._keys) {
	      yield this.get(k);
	    }
	    return undefined;
	  }
	  *entries() {
	    for (const k of this._keys) {
	      yield [
	        k,
	        this.get(k)
	      ];
	    }
	    return undefined;
	  }
	  *[Symbol.iterator]() {
	    yield* this.entries();
	  }
	  forEach(cb, thisArg) {
	    if (!cb) {
	      return;
	    }
	    for (const k of this._keys) {
	      cb.apply(thisArg, [[
	          k,
	          this.get(k)
	        ]]);
	    }
	  }
	  _defaultSort(a, b) {
	    if (a[0] < b[0])
	      return -1;
	    if (b[0] < a[0])
	      return 1;
	    return 0;
	  }
	  _kCmp(a, b) {
	    return this._cmp([
	      a,
	      this.get(a)
	    ], [
	      b,
	      this.get(b)
	    ]);
	  }
	}

	const DefaultTaskMerger = {
	  hasNewInfo() {
	    return false;
	  },
	  merge() {
	  }
	};
	class RequestQueue {
	  constructor(taskMerger = DefaultTaskMerger) {
	    this._taskMerger = taskMerger;
	    this._byPeer = new SortedMap([], PeerTasks.compare);
	  }
	  pushTasks(peerId, tasks) {
	    let peerTasks = this._byPeer.get(peerId.toB58String());
	    if (!peerTasks) {
	      peerTasks = new PeerTasks(peerId, this._taskMerger);
	    }
	    peerTasks.pushTasks(tasks);
	    this._byPeer.set(peerId.toB58String(), peerTasks);
	  }
	  popTasks(targetMinBytes) {
	    const peerTasks = this._head();
	    if (peerTasks === undefined) {
	      return {
	        tasks: [],
	        pendingSize: 0
	      };
	    }
	    const {tasks, pendingSize} = peerTasks.popTasks(targetMinBytes);
	    if (tasks.length === 0) {
	      return {
	        tasks,
	        pendingSize
	      };
	    }
	    const peerId = peerTasks.peerId;
	    if (peerTasks.isIdle()) {
	      this._byPeer.delete(peerId.toB58String());
	    } else {
	      this._byPeer.update(0);
	    }
	    return {
	      peerId,
	      tasks,
	      pendingSize
	    };
	  }
	  _head() {
	    if (this._byPeer.size === 0) {
	      return undefined;
	    }
	    for (const [, v] of this._byPeer) {
	      return v;
	    }
	    return undefined;
	  }
	  remove(topic, peerId) {
	    const peerTasks = this._byPeer.get(peerId.toB58String());
	    peerTasks && peerTasks.remove(topic);
	  }
	  tasksDone(peerId, tasks) {
	    const peerTasks = this._byPeer.get(peerId.toB58String());
	    if (!peerTasks) {
	      return;
	    }
	    const i = this._byPeer.indexOf(peerId.toB58String());
	    for (const task of tasks) {
	      peerTasks.taskDone(task);
	    }
	    this._byPeer.update(i);
	  }
	}
	class PeerTasks {
	  constructor(peerId, taskMerger) {
	    this.peerId = peerId;
	    this._taskMerger = taskMerger;
	    this._activeTotalSize = 0;
	    this._pending = new PendingTasks();
	    this._active = new Set();
	  }
	  pushTasks(tasks) {
	    for (const t of tasks) {
	      this._pushTask(t);
	    }
	  }
	  _pushTask(task) {
	    if (!this._taskHasMoreInfoThanActiveTasks(task)) {
	      return;
	    }
	    const existingTask = this._pending.get(task.topic);
	    if (existingTask) {
	      if (task.priority > existingTask.priority) {
	        this._pending.updatePriority(task.topic, task.priority);
	      }
	      this._taskMerger.merge(task, existingTask);
	      return;
	    }
	    this._pending.add(task);
	  }
	  _taskHasMoreInfoThanActiveTasks(task) {
	    const tasksWithTopic = [];
	    for (const activeTask of this._active) {
	      if (activeTask.topic === task.topic) {
	        tasksWithTopic.push(activeTask);
	      }
	    }
	    if (tasksWithTopic.length === 0) {
	      return true;
	    }
	    return this._taskMerger.hasNewInfo(task, tasksWithTopic);
	  }
	  popTasks(targetMinBytes) {
	    let size = 0;
	    const tasks = [];
	    const pendingTasks = this._pending.tasks();
	    for (let i = 0; i < pendingTasks.length && size < targetMinBytes; i++) {
	      const task = pendingTasks[i];
	      tasks.push(task);
	      size += task.size;
	      this._pending.delete(task.topic);
	      this._activeTotalSize += task.size;
	      this._active.add(task);
	    }
	    return {
	      tasks,
	      pendingSize: this._pending.totalSize
	    };
	  }
	  taskDone(task) {
	    if (this._active.has(task)) {
	      this._activeTotalSize -= task.size;
	      this._active.delete(task);
	    }
	  }
	  remove(topic) {
	    this._pending.delete(topic);
	  }
	  isIdle() {
	    return this._pending.length === 0 && this._active.size === 0;
	  }
	  static compare(a, b) {
	    if (a[1]._pending.length === 0) {
	      return 1;
	    }
	    if (b[1]._pending.length === 0) {
	      return -1;
	    }
	    if (a[1]._activeTotalSize === b[1]._activeTotalSize) {
	      return b[1]._pending.length - a[1]._pending.length;
	    }
	    return a[1]._activeTotalSize - b[1]._activeTotalSize;
	  }
	}
	class PendingTasks {
	  constructor() {
	    this._tasks = new SortedMap([], this._compare);
	  }
	  get length() {
	    return this._tasks.size;
	  }
	  get totalSize() {
	    return [...this._tasks.values()].reduce((a, t) => a + t.task.size, 0);
	  }
	  get(topic) {
	    return (this._tasks.get(topic) || {}).task;
	  }
	  add(task) {
	    this._tasks.set(task.topic, {
	      created: Date.now(),
	      task
	    });
	  }
	  delete(topic) {
	    this._tasks.delete(topic);
	  }
	  tasks() {
	    return [...this._tasks.values()].map(i => i.task);
	  }
	  updatePriority(topic, priority) {
	    const obj = this._tasks.get(topic);
	    if (!obj) {
	      return;
	    }
	    const i = this._tasks.indexOf(topic);
	    obj.task.priority = priority;
	    this._tasks.update(i);
	  }
	  _compare(a, b) {
	    if (a[1].task.priority === b[1].task.priority) {
	      return a[1].created - b[1].created;
	    }
	    return b[1].task.priority - a[1].task.priority;
	  }
	}

	const TaskMerger = {
	  hasNewInfo(task, tasksWithTopic) {
	    let haveBlock = false;
	    let isWantBlock = false;
	    for (const existing of tasksWithTopic) {
	      if (existing.data.haveBlock) {
	        haveBlock = true;
	      }
	      if (existing.data.isWantBlock) {
	        isWantBlock = true;
	      }
	    }
	    if (!isWantBlock && task.data.isWantBlock) {
	      return true;
	    }
	    if (!haveBlock && task.data.haveBlock) {
	      return true;
	    }
	    return false;
	  },
	  merge(newTask, existingTask) {
	    const taskData = newTask.data;
	    const existingData = existingTask.data;
	    if (!existingData.haveBlock && taskData.haveBlock) {
	      existingData.haveBlock = taskData.haveBlock;
	      existingData.blockSize = taskData.blockSize;
	    }
	    if (!existingData.isWantBlock && taskData.isWantBlock) {
	      existingData.isWantBlock = true;
	      if (!existingData.haveBlock || taskData.haveBlock) {
	        existingData.haveBlock = taskData.haveBlock;
	        existingTask.size = newTask.size;
	      }
	    }
	    if (existingData.isWantBlock && existingData.haveBlock) {
	      existingTask.size = existingData.blockSize;
	    }
	  }
	};

	const WantType = BitswapMessage.WantType;
	const TARGET_MESSAGE_SIZE = 16 * 1024;
	const MAX_SIZE_REPLACE_HAS_WITH_BLOCK = 1024;
	class DecisionEngine {
	  constructor(peerId, blockstore, network, stats, libp2p, opts = {}) {
	    this._log = logger(peerId, 'engine');
	    this.blockstore = blockstore;
	    this.network = network;
	    this._stats = stats;
	    this._opts = this._processOpts(opts);
	    this.ledgerMap = trackedMap$2({
	      system: 'ipfs',
	      component: 'bitswap',
	      metric: 'ledger-map',
	      metrics: libp2p.metrics
	    });
	    this._running = false;
	    this._requestQueue = new RequestQueue(TaskMerger);
	  }
	  _processOpts(opts) {
	    return {
	      maxSizeReplaceHasWithBlock: MAX_SIZE_REPLACE_HAS_WITH_BLOCK,
	      targetMessageSize: TARGET_MESSAGE_SIZE,
	      ...opts
	    };
	  }
	  _scheduleProcessTasks() {
	    setTimeout(() => {
	      this._processTasks();
	    });
	  }
	  async _processTasks() {
	    if (!this._running) {
	      return;
	    }
	    const {peerId, tasks, pendingSize} = this._requestQueue.popTasks(this._opts.targetMessageSize);
	    if (tasks.length === 0) {
	      return;
	    }
	    const msg = new BitswapMessage(false);
	    msg.setPendingBytes(pendingSize);
	    const blockCids = [];
	    const blockTasks = new Map();
	    for (const task of tasks) {
	      const cid = CID$6.parse(task.topic);
	      if (task.data.haveBlock) {
	        if (task.data.isWantBlock) {
	          blockCids.push(cid);
	          blockTasks.set(task.topic, task.data);
	        } else {
	          msg.addHave(cid);
	        }
	      } else {
	        msg.addDontHave(cid);
	      }
	    }
	    const blocks = await this._getBlocks(blockCids);
	    for (const [topic, taskData] of blockTasks) {
	      const cid = CID$6.parse(topic);
	      const blk = blocks.get(topic);
	      if (blk) {
	        msg.addBlock(cid, blk);
	      } else {
	        if (taskData.sendDontHave) {
	          msg.addDontHave(cid);
	        }
	      }
	    }
	    if (msg.empty) {
	      peerId && this._requestQueue.tasksDone(peerId, tasks);
	      this._scheduleProcessTasks();
	      return;
	    }
	    try {
	      peerId && await this.network.sendMessage(peerId, msg);
	      for (const [cidStr, block] of blocks.entries()) {
	        peerId && this.messageSent(peerId, CID$6.parse(cidStr), block);
	      }
	    } catch (err) {
	      this._log.error(err);
	    }
	    peerId && this._requestQueue.tasksDone(peerId, tasks);
	    this._scheduleProcessTasks();
	  }
	  wantlistForPeer(peerId) {
	    const peerIdStr = peerId.toB58String();
	    const ledger = this.ledgerMap.get(peerIdStr);
	    return ledger ? ledger.wantlist.sortedEntries() : new Map();
	  }
	  ledgerForPeer(peerId) {
	    const peerIdStr = peerId.toB58String();
	    const ledger = this.ledgerMap.get(peerIdStr);
	    if (!ledger) {
	      return null;
	    }
	    return {
	      peer: ledger.partner,
	      value: ledger.debtRatio(),
	      sent: ledger.accounting.bytesSent,
	      recv: ledger.accounting.bytesRecv,
	      exchanged: ledger.exchangeCount
	    };
	  }
	  peers() {
	    return Array.from(this.ledgerMap.values()).map(l => l.partner);
	  }
	  receivedBlocks(blocks) {
	    if (!blocks.length) {
	      return;
	    }
	    for (const ledger of this.ledgerMap.values()) {
	      for (const block of blocks) {
	        const want = ledger.wantlistContains(block.cid);
	        if (!want) {
	          continue;
	        }
	        const blockSize = block.data.length;
	        const isWantBlock = this._sendAsBlock(want.wantType, blockSize);
	        let entrySize = blockSize;
	        if (!isWantBlock) {
	          entrySize = BitswapMessage.blockPresenceSize(want.cid);
	        }
	        this._requestQueue.pushTasks(ledger.partner, [{
	            topic: want.cid.toString(base58btc$6),
	            priority: want.priority,
	            size: entrySize,
	            data: {
	              blockSize,
	              isWantBlock,
	              haveBlock: true,
	              sendDontHave: false
	            }
	          }]);
	      }
	    }
	    this._scheduleProcessTasks();
	  }
	  async messageReceived(peerId, msg) {
	    const ledger = this._findOrCreate(peerId);
	    if (msg.empty) {
	      return;
	    }
	    if (msg.full) {
	      ledger.wantlist = new Wantlist();
	    }
	    this._updateBlockAccounting(msg.blocks, ledger);
	    if (msg.wantlist.size === 0) {
	      this._scheduleProcessTasks();
	      return;
	    }
	    const cancels = [];
	    const wants = [];
	    msg.wantlist.forEach(entry => {
	      if (entry.cancel) {
	        ledger.cancelWant(entry.cid);
	        cancels.push(entry.cid);
	      } else {
	        ledger.wants(entry.cid, entry.priority, entry.wantType);
	        wants.push(entry);
	      }
	    });
	    this._cancelWants(peerId, cancels);
	    await this._addWants(peerId, wants);
	    this._scheduleProcessTasks();
	  }
	  _cancelWants(peerId, cids) {
	    for (const c of cids) {
	      this._requestQueue.remove(c.toString(base58btc$6), peerId);
	    }
	  }
	  async _addWants(peerId, wants) {
	    const blockSizes = await this._getBlockSizes(wants.map(w => w.cid));
	    const tasks = [];
	    for (const want of wants) {
	      const id = want.cid.toString(base58btc$6);
	      const blockSize = blockSizes.get(id);
	      if (blockSize == null) {
	        if (want.sendDontHave) {
	          tasks.push({
	            topic: id,
	            priority: want.priority,
	            size: BitswapMessage.blockPresenceSize(want.cid),
	            data: {
	              isWantBlock: want.wantType === WantType.Block,
	              blockSize: 0,
	              haveBlock: false,
	              sendDontHave: want.sendDontHave
	            }
	          });
	        }
	      } else {
	        const isWantBlock = this._sendAsBlock(want.wantType, blockSize);
	        let entrySize = blockSize;
	        if (!isWantBlock) {
	          entrySize = BitswapMessage.blockPresenceSize(want.cid);
	        }
	        tasks.push({
	          topic: id,
	          priority: want.priority,
	          size: entrySize,
	          data: {
	            isWantBlock,
	            blockSize,
	            haveBlock: true,
	            sendDontHave: want.sendDontHave
	          }
	        });
	      }
	      this._requestQueue.pushTasks(peerId, tasks);
	    }
	  }
	  _sendAsBlock(wantType, blockSize) {
	    return wantType === WantType.Block || blockSize <= this._opts.maxSizeReplaceHasWithBlock;
	  }
	  async _getBlockSizes(cids) {
	    const blocks = await this._getBlocks(cids);
	    return new Map([...blocks].map(([k, v]) => [
	      k,
	      v.length
	    ]));
	  }
	  async _getBlocks(cids) {
	    const res = new Map();
	    await Promise.all(cids.map(async cid => {
	      try {
	        const block = await this.blockstore.get(cid);
	        res.set(cid.toString(base58btc$6), block);
	      } catch (e) {
	        if (e.code !== 'ERR_NOT_FOUND') {
	          this._log.error('failed to query blockstore for %s: %s', cid, e);
	        }
	      }
	    }));
	    return res;
	  }
	  _updateBlockAccounting(blocksMap, ledger) {
	    for (const block of blocksMap.values()) {
	      this._log('got block (%s bytes)', block.length);
	      ledger.receivedBytes(block.length);
	    }
	  }
	  messageSent(peerId, cid, block) {
	    const ledger = this._findOrCreate(peerId);
	    ledger.sentBytes(block.length);
	    ledger.wantlist.remove(cid);
	  }
	  numBytesSentTo(peerId) {
	    return this._findOrCreate(peerId).accounting.bytesSent;
	  }
	  numBytesReceivedFrom(peerId) {
	    return this._findOrCreate(peerId).accounting.bytesRecv;
	  }
	  peerDisconnected(peerId) {
	    this.ledgerMap.delete(peerId.toB58String());
	  }
	  _findOrCreate(peerId) {
	    const peerIdStr = peerId.toB58String();
	    const ledger = this.ledgerMap.get(peerIdStr);
	    if (ledger) {
	      return ledger;
	    }
	    const l = new Ledger(peerId);
	    this.ledgerMap.set(peerIdStr, l);
	    if (this._stats) {
	      this._stats.push(peerIdStr, 'peerCount', 1);
	    }
	    return l;
	  }
	  start() {
	    this._running = true;
	  }
	  stop() {
	    this._running = false;
	  }
	}

	const unwantEvent = cid => `unwant:${ toString$6(cid.multihash.bytes, 'base64') }`;
	const blockEvent = cid => `block:${ toString$6(cid.multihash.bytes, 'base64') }`;
	class Notifications extends EventEmitter$n {
	  constructor(peerId) {
	    super();
	    this.setMaxListeners(maxListeners);
	    this._log = logger(peerId, 'notif');
	  }
	  hasBlock(cid, block) {
	    const event = blockEvent(cid);
	    this._log(event);
	    this.emit(event, block);
	  }
	  wantBlock(cid, options = {}) {
	    if (!cid) {
	      throw new Error('Not a valid cid');
	    }
	    const blockEvt = blockEvent(cid);
	    const unwantEvt = unwantEvent(cid);
	    this._log(`wantBlock:${ cid }`);
	    return new Promise((resolve, reject) => {
	      const onUnwant = () => {
	        this.removeListener(blockEvt, onBlock);
	        reject(new Error(`Block for ${ cid } unwanted`));
	      };
	      const onBlock = data => {
	        this.removeListener(unwantEvt, onUnwant);
	        resolve(data);
	      };
	      this.once(unwantEvt, onUnwant);
	      this.once(blockEvt, onBlock);
	      if (options && options.signal) {
	        options.signal.addEventListener('abort', () => {
	          this.removeListener(blockEvt, onBlock);
	          this.removeListener(unwantEvt, onUnwant);
	          reject(new Error(`Want for ${ cid } aborted`));
	        });
	      }
	    });
	  }
	  unwantBlock(cid) {
	    const event = unwantEvent(cid);
	    this._log(event);
	    this.emit(event);
	  }
	}

	class Stat extends EventEmitter$n {
	  constructor(initialCounters, options) {
	    super();
	    this._options = options;
	    this._queue = [];
	    this._stats = {};
	    this._frequencyLastTime = Date.now();
	    this._frequencyAccumulators = {};
	    this._movingAverages = {};
	    this._update = this._update.bind(this);
	    initialCounters.forEach(key => {
	      this._stats[key] = BigInt(0);
	      this._movingAverages[key] = {};
	      this._options.movingAverageIntervals.forEach(interval => {
	        const ma = this._movingAverages[key][interval] = MovingAverage$1(interval);
	        ma.push(this._frequencyLastTime, 0);
	      });
	    });
	    this._enabled = this._options.enabled;
	  }
	  enable() {
	    this._enabled = true;
	  }
	  disable() {
	    this._disabled = true;
	  }
	  stop() {
	    if (this._timeout) {
	      clearTimeout(this._timeout);
	    }
	  }
	  get snapshot() {
	    return Object.assign({}, this._stats);
	  }
	  get movingAverages() {
	    return Object.assign({}, this._movingAverages);
	  }
	  push(counter, inc) {
	    if (this._enabled) {
	      this._queue.push([
	        counter,
	        inc,
	        Date.now()
	      ]);
	      this._resetComputeTimeout();
	    }
	  }
	  _resetComputeTimeout() {
	    if (this._timeout) {
	      clearTimeout(this._timeout);
	    }
	    this._timeout = setTimeout(this._update, this._nextTimeout());
	  }
	  _nextTimeout() {
	    const urgency = this._queue.length / this._options.computeThrottleMaxQueueSize;
	    return Math.max(this._options.computeThrottleTimeout * (1 - urgency), 0);
	  }
	  _update() {
	    this._timeout = null;
	    if (this._queue.length) {
	      let last;
	      while (this._queue.length) {
	        const op = last = this._queue.shift();
	        op && this._applyOp(op);
	      }
	      last && this._updateFrequency(last[2]);
	      this.emit('update', this._stats);
	    }
	  }
	  _updateFrequency(latestTime) {
	    const timeDiff = latestTime - this._frequencyLastTime;
	    if (timeDiff) {
	      Object.keys(this._stats).forEach(key => {
	        this._updateFrequencyFor(key, timeDiff, latestTime);
	      });
	    }
	    this._frequencyLastTime = latestTime;
	  }
	  _updateFrequencyFor(key, timeDiffMS, latestTime) {
	    const count = this._frequencyAccumulators[key] || 0;
	    this._frequencyAccumulators[key] = 0;
	    const hz = count / timeDiffMS * 1000;
	    let movingAverages = this._movingAverages[key];
	    if (!movingAverages) {
	      movingAverages = this._movingAverages[key] = {};
	    }
	    this._options.movingAverageIntervals.forEach(movingAverageInterval => {
	      let movingAverage = movingAverages[movingAverageInterval];
	      if (!movingAverage) {
	        movingAverage = movingAverages[movingAverageInterval] = MovingAverage$1(movingAverageInterval);
	      }
	      movingAverage.push(latestTime, hz);
	    });
	  }
	  _applyOp(op) {
	    const key = op[0];
	    const inc = op[1];
	    if (typeof inc !== 'number') {
	      throw new Error(`invalid increment number: ${ inc }`);
	    }
	    if (!Object.prototype.hasOwnProperty.call(this._stats, key)) {
	      this._stats[key] = BigInt(0);
	    }
	    this._stats[key] = BigInt(this._stats[key]) + BigInt(inc);
	    if (!this._frequencyAccumulators[key]) {
	      this._frequencyAccumulators[key] = 0;
	    }
	    this._frequencyAccumulators[key] += inc;
	  }
	}

	const defaultOptions$1 = {
	  enabled: false,
	  computeThrottleTimeout: 1000,
	  computeThrottleMaxQueueSize: 1000,
	  movingAverageIntervals: [
	    60 * 1000,
	    5 * 60 * 1000,
	    15 * 60 * 1000
	  ]
	};
	class Stats extends EventEmitter$n {
	  constructor(libp2p, initialCounters = [], _options = defaultOptions$1) {
	    super();
	    const options = Object.assign({}, defaultOptions$1, _options);
	    if (typeof options.computeThrottleTimeout !== 'number') {
	      throw new Error('need computeThrottleTimeout');
	    }
	    if (typeof options.computeThrottleMaxQueueSize !== 'number') {
	      throw new Error('need computeThrottleMaxQueueSize');
	    }
	    this._initialCounters = initialCounters;
	    this._options = options;
	    this._enabled = this._options.enabled;
	    this._global = new Stat(initialCounters, options);
	    this._global.on('update', stats => this.emit('update', stats));
	    this._peers = trackedMap$2({
	      system: 'ipfs',
	      component: 'bitswap',
	      metric: 'stats-peers',
	      metrics: libp2p.metrics
	    });
	  }
	  enable() {
	    this._enabled = true;
	    this._options.enabled = true;
	    this._global.enable();
	  }
	  disable() {
	    this._enabled = false;
	    this._options.enabled = false;
	    this._global.disable();
	  }
	  stop() {
	    this._enabled = false;
	    this._global.stop();
	    for (const peerStat of this._peers) {
	      peerStat[1].stop();
	    }
	  }
	  get snapshot() {
	    return this._global.snapshot;
	  }
	  get movingAverages() {
	    return this._global.movingAverages;
	  }
	  forPeer(peerId) {
	    const peerIdStr = typeof peerId !== 'string' && peerId.toB58String ? peerId.toB58String() : `${ peerId }`;
	    return this._peers.get(peerIdStr);
	  }
	  push(peer, counter, inc) {
	    if (this._enabled) {
	      this._global.push(counter, inc);
	      if (peer) {
	        let peerStats = this._peers.get(peer);
	        if (!peerStats) {
	          peerStats = new Stat(this._initialCounters, this._options);
	          this._peers.set(peer, peerStats);
	        }
	        peerStats.push(counter, inc);
	      }
	    }
	  }
	  disconnected(peer) {
	    const peerId = peer.toB58String();
	    const peerStats = this._peers.get(peerId);
	    if (peerStats) {
	      peerStats.stop();
	      this._peers.delete(peerId);
	    }
	  }
	}

	const defaultOptions = {
	  statsEnabled: false,
	  statsComputeThrottleTimeout: 1000,
	  statsComputeThrottleMaxQueueSize: 1000
	};
	const statsKeys = [
	  'blocksReceived',
	  'dataReceived',
	  'dupBlksReceived',
	  'dupDataReceived',
	  'blocksSent',
	  'dataSent',
	  'providesBufferLength',
	  'wantListLength',
	  'peerCount'
	];
	class Bitswap extends BaseBlockstore {
	  constructor(libp2p, blockstore, options = {}) {
	    super();
	    this._libp2p = libp2p;
	    this._log = logger(this.peerId);
	    this._options = Object.assign({}, defaultOptions, options);
	    this._stats = new Stats(libp2p, statsKeys, {
	      enabled: this._options.statsEnabled,
	      computeThrottleTimeout: this._options.statsComputeThrottleTimeout,
	      computeThrottleMaxQueueSize: this._options.statsComputeThrottleMaxQueueSize
	    });
	    this.network = new Network$1(libp2p, this, this._stats, { hashLoader: options.hashLoader });
	    this.blockstore = blockstore;
	    this.engine = new DecisionEngine(this.peerId, blockstore, this.network, this._stats, libp2p);
	    this.wm = new WantManager(this.peerId, this.network, this._stats, libp2p);
	    this.notifications = new Notifications(this.peerId);
	    this.started = false;
	  }
	  isStarted() {
	    return this.started;
	  }
	  get peerId() {
	    return this._libp2p.peerId;
	  }
	  async _receiveMessage(peerId, incoming) {
	    try {
	      await this.engine.messageReceived(peerId, incoming);
	    } catch (err) {
	      this._log('failed to receive message', incoming);
	    }
	    if (incoming.blocks.size === 0) {
	      return;
	    }
	    const received = [];
	    for (const [cidStr, data] of incoming.blocks.entries()) {
	      const cid = CID$6.parse(cidStr);
	      received.push({
	        wasWanted: this.wm.wantlist.contains(cid),
	        cid,
	        data
	      });
	    }
	    this.wm.cancelWants(received.filter(({wasWanted}) => wasWanted).map(({cid}) => cid));
	    await Promise.all(received.map(({cid, wasWanted, data}) => this._handleReceivedBlock(peerId, cid, data, wasWanted)));
	  }
	  async _handleReceivedBlock(peerId, cid, data, wasWanted) {
	    this._log('received block');
	    const has = await this.blockstore.has(cid);
	    this._updateReceiveCounters(peerId.toB58String(), cid, data, has);
	    if (!wasWanted) {
	      return;
	    }
	    await this.put(cid, data);
	  }
	  _updateReceiveCounters(peerIdStr, cid, data, exists) {
	    this._stats.push(peerIdStr, 'blocksReceived', 1);
	    this._stats.push(peerIdStr, 'dataReceived', data.length);
	    if (exists) {
	      this._stats.push(peerIdStr, 'dupBlksReceived', 1);
	      this._stats.push(peerIdStr, 'dupDataReceived', data.length);
	    }
	  }
	  _receiveError(err) {
	    this._log.error('ReceiveError: %s', err.message);
	  }
	  _onPeerConnected(peerId) {
	    this.wm.connected(peerId);
	  }
	  _onPeerDisconnected(peerId) {
	    this.wm.disconnected(peerId);
	    this.engine.peerDisconnected(peerId);
	    this._stats.disconnected(peerId);
	  }
	  enableStats() {
	    this._stats.enable();
	  }
	  disableStats() {
	    this._stats.disable();
	  }
	  wantlistForPeer(peerId, _options) {
	    return this.engine.wantlistForPeer(peerId);
	  }
	  ledgerForPeer(peerId) {
	    return this.engine.ledgerForPeer(peerId);
	  }
	  async get(cid, options = {}) {
	    const fetchFromNetwork = (cid, options) => {
	      this.wm.wantBlocks([cid], options);
	      return this.notifications.wantBlock(cid, options);
	    };
	    let promptedNetwork = false;
	    const loadOrFetchFromNetwork = async (cid, options) => {
	      try {
	        const block = await this.blockstore.get(cid, options);
	        return block;
	      } catch (err) {
	        if (err.code !== 'ERR_NOT_FOUND') {
	          throw err;
	        }
	        if (!promptedNetwork) {
	          promptedNetwork = true;
	          this.network.findAndConnect(cid).catch(err => this._log.error(err));
	        }
	        return fetchFromNetwork(cid, options);
	      }
	    };
	    const controller = new AbortController();
	    const signal = options.signal ? anySignal_2([
	      options.signal,
	      controller.signal
	    ]) : controller.signal;
	    const block = await Promise.race([
	      this.notifications.wantBlock(cid, { signal }),
	      loadOrFetchFromNetwork(cid, { signal })
	    ]);
	    controller.abort();
	    return block;
	  }
	  async *getMany(cids, options = {}) {
	    for await (const cid of cids) {
	      yield this.get(cid, options);
	    }
	  }
	  unwant(cids) {
	    const cidsArray = Array.isArray(cids) ? cids : [cids];
	    this.wm.unwantBlocks(cidsArray);
	    cidsArray.forEach(cid => this.notifications.unwantBlock(cid));
	  }
	  cancelWants(cids) {
	    this.wm.cancelWants(Array.isArray(cids) ? cids : [cids]);
	  }
	  async put(cid, block, _options) {
	    await this.blockstore.put(cid, block);
	    this._sendHaveBlockNotifications(cid, block);
	  }
	  async *putMany(source, options) {
	    for await (const {key, value} of this.blockstore.putMany(source, options)) {
	      this._sendHaveBlockNotifications(key, value);
	      yield {
	        key,
	        value
	      };
	    }
	  }
	  _sendHaveBlockNotifications(cid, data) {
	    this.notifications.hasBlock(cid, data);
	    this.engine.receivedBlocks([{
	        cid,
	        data
	      }]);
	    this.network.provide(cid).catch(err => {
	      this._log.error('Failed to provide: %s', err.message);
	    });
	  }
	  getWantlist() {
	    return this.wm.wantlist.entries();
	  }
	  peers() {
	    return this.engine.peers();
	  }
	  stat() {
	    return this._stats;
	  }
	  async start() {
	    this.wm.start();
	    await this.network.start();
	    this.engine.start();
	    this.started = true;
	  }
	  async stop() {
	    this._stats.stop();
	    this.wm.stop();
	    await this.network.stop();
	    this.engine.stop();
	    this.started = false;
	  }
	  unwrap() {
	    return this.blockstore;
	  }
	}

	const createBitswap = (libp2p, blockstore, options = {}) => {
	  return new Bitswap(libp2p, blockstore, options);
	};

	function notFoundError(err) {
	  err = err || new Error('Not Found');
	  return errCode$q(err, 'ERR_NOT_FOUND');
	}
	function abortedError(err) {
	  err = err || new Error('Aborted');
	  return errCode$q(err, 'ERR_ABORTED');
	}

	var ErrorsImport = /*#__PURE__*/Object.freeze({
		__proto__: null,
		notFoundError: notFoundError,
		abortedError: abortedError
	});

	({ ...ErrorsImport });

	class BlockStorage extends BaseBlockstore {
	  constructor(blockstore, bitswap) {
	    super();
	    this.child = blockstore;
	    this.bitswap = bitswap;
	  }
	  open() {
	    return this.child.open();
	  }
	  close() {
	    return this.child.close();
	  }
	  unwrap() {
	    return this.child;
	  }
	  async put(cid, block, options = {}) {
	    if (await this.has(cid)) {
	      return;
	    }
	    if (this.bitswap.isStarted()) {
	      await this.bitswap.put(cid, block, options);
	    } else {
	      await this.child.put(cid, block, options);
	    }
	  }
	  async *putMany(blocks, options = {}) {
	    const missingBlocks = itFilter(blocks, async ({key}) => {
	      return !await this.has(key);
	    });
	    if (this.bitswap.isStarted()) {
	      yield* this.bitswap.putMany(missingBlocks, options);
	    } else {
	      yield* this.child.putMany(missingBlocks, options);
	    }
	  }
	  async get(cid, options = {}) {
	    if (!await this.has(cid) && this.bitswap.isStarted()) {
	      return this.bitswap.get(cid, options);
	    } else {
	      return this.child.get(cid, options);
	    }
	  }
	  async *getMany(cids, options = {}) {
	    const getFromBitswap = itPushable();
	    const getFromChild = itPushable();
	    Promise.resolve().then(async () => {
	      for await (const cid of cids) {
	        if (!await this.has(cid) && this.bitswap.isStarted()) {
	          getFromBitswap.push(cid);
	        } else {
	          getFromChild.push(cid);
	        }
	      }
	      getFromBitswap.end();
	      getFromChild.end();
	    });
	    yield* itMerge(this.bitswap.getMany(getFromBitswap, options), this.child.getMany(getFromChild, options));
	  }
	  async delete(cid, options) {
	    await this.child.delete(cid, options);
	  }
	  async *deleteMany(cids, options) {
	    yield* this.child.deleteMany(cids, options);
	  }
	  async has(cid, options = {}) {
	    return this.child.has(cid, options);
	  }
	  async *query(q, options = {}) {
	    yield* this.child.query(q, options);
	  }
	  async *queryKeys(q, options = {}) {
	    yield* this.child.queryKeys(q, options);
	  }
	}

	class Network {
	  constructor(peerId, libp2p, bitswap, repo, blockstore) {
	    this.peerId = peerId;
	    this.libp2p = libp2p;
	    this.bitswap = bitswap;
	    this.repo = repo;
	    this.blockstore = blockstore;
	  }
	  static async start({peerId, repo, print, hashers, options}) {
	    if (repo.closed) {
	      await repo.open();
	    }
	    const config = await repo.config.getAll();
	    const libp2p = await createLibp2p({
	      options,
	      repo,
	      peerId,
	      multiaddrs: readAddrs(peerId, config),
	      config,
	      keychainConfig: undefined
	    });
	    if (libp2p.keychain) {
	      await libp2p.loadKeychain();
	    }
	    await libp2p.start();
	    for (const ma of libp2p.multiaddrs) {
	      print(`Swarm listening on ${ ma }/p2p/${ peerId.toB58String() }`);
	    }
	    const bitswap = createBitswap(libp2p, repo.blocks, {
	      statsEnabled: true,
	      hashLoader: hashers
	    });
	    await bitswap.start();
	    const blockstore = new BlockStorage(repo.blocks, bitswap);
	    repo.blocks = blockstore;
	    repo.pins.blockstore = blockstore;
	    return new Network(peerId, libp2p, bitswap, repo, blockstore);
	  }
	  static async stop(network) {
	    network.repo.blocks = network.blockstore.unwrap();
	    network.repo.pins.blockstore = network.blockstore.unwrap();
	    await network.bitswap.stop();
	    await network.libp2p.stop();
	  }
	}
	const readAddrs = (peerId, config) => {
	  const peerIdStr = peerId.toB58String();
	  const addrs = [];
	  const swarm = config.Addresses && config.Addresses.Swarm || [];
	  for (const addr of swarm) {
	    let ma = new src$s.Multiaddr(addr);
	    if (ma.protoCodes().includes(WEBSOCKET_STAR_PROTO_CODE)) {
	      throw errCode$q(new Error('websocket-star swarm addresses are not supported. See https://github.com/ipfs/js-ipfs/issues/2779'), 'ERR_WEBSOCKET_STAR_SWARM_ADDR_NOT_SUPPORTED');
	    }
	    const maId = ma.getPeerId();
	    if (maId && maId !== peerIdStr) {
	      ma = ma.encapsulate(`/p2p/${ peerIdStr }`);
	    }
	    addrs.push(ma);
	  }
	  return addrs;
	};
	const WEBSOCKET_STAR_PROTO_CODE = 479;

	function createAddrs({network}) {
	  async function addrs(options = {}) {
	    const peers = [];
	    const {libp2p} = await network.use(options);
	    for await (const peer of libp2p.peerStore.getPeers()) {
	      peers.push({
	        id: peer.id.toB58String(),
	        addrs: peer.addresses.map(mi => mi.multiaddr)
	      });
	    }
	    return peers;
	  }
	  return withTimeoutOption(addrs);
	}

	function createConnect({network}) {
	  async function connect(addr, options = {}) {
	    const {libp2p} = await network.use(options);
	    await libp2p.dial(addr, options);
	  }
	  return withTimeoutOption(connect);
	}

	function createDisconnect({network}) {
	  async function disconnect(addr, options = {}) {
	    const {libp2p} = await network.use(options);
	    await libp2p.hangUp(addr);
	  }
	  return withTimeoutOption(disconnect);
	}

	function createLocalAddrs({network}) {
	  async function localAddrs(options = {}) {
	    const {libp2p} = await network.use(options);
	    return libp2p.multiaddrs;
	  }
	  return withTimeoutOption(localAddrs);
	}

	function createPeers({network}) {
	  async function peers(options = {}) {
	    const {libp2p} = await network.use(options);
	    const peers = [];
	    for (const [peerId, connections] of libp2p.connections) {
	      for (const connection of connections) {
	        const peer = {
	          addr: connection.remoteAddr,
	          peer: peerId
	        };
	        if (options.verbose || options.direction) {
	          peer.direction = connection.stat.direction;
	        }
	        if (options.verbose) {
	          peer.muxer = connection.stat.multiplexer;
	          peer.latency = 'n/a';
	          peer.streams = [];
	        }
	        peers.push(peer);
	      }
	    }
	    return peers;
	  }
	  return withTimeoutOption(peers);
	}

	class SwarmAPI {
	  constructor({network}) {
	    this.addrs = createAddrs({ network });
	    this.connect = createConnect({ network });
	    this.disconnect = createDisconnect({ network });
	    this.localAddrs = createLocalAddrs({ network });
	    this.peers = createPeers({ network });
	  }
	}

	const basePacket = {
	  success: true,
	  time: 0,
	  text: ''
	};
	function createPing({network}) {
	  async function* ping(peerId, options = {}) {
	    const {libp2p} = await network.use();
	    options.count = options.count || 10;
	    const peer = PeerIdImport.createFromB58String(peerId);
	    const storedPeer = await libp2p.peerStore.get(peer);
	    let id = storedPeer && storedPeer.id;
	    if (!id) {
	      yield {
	        ...basePacket,
	        text: `Looking up peer ${ peerId }`
	      };
	      const remotePeer = await libp2p.peerRouting.findPeer(peer);
	      id = remotePeer && remotePeer.id;
	    }
	    if (!id) {
	      throw new Error('Peer was not found');
	    }
	    yield {
	      ...basePacket,
	      text: `PING ${ id.toB58String() }`
	    };
	    let packetCount = 0;
	    let totalTime = 0;
	    for (let i = 0; i < options.count; i++) {
	      try {
	        const time = await libp2p.ping(id);
	        totalTime += time;
	        packetCount++;
	        yield {
	          ...basePacket,
	          time
	        };
	      } catch (err) {
	        yield {
	          ...basePacket,
	          success: false,
	          text: err.toString()
	        };
	      }
	    }
	    if (packetCount) {
	      const average = totalTime / packetCount;
	      yield {
	        ...basePacket,
	        text: `Average latency: ${ average }ms`
	      };
	    }
	  }
	  return withTimeoutOption(ping);
	}

	const IPNS_PREFIX = '/ipns/';
	function toDHTKey(str) {
	  if (str.startsWith(IPNS_PREFIX)) {
	    str = str.substring(IPNS_PREFIX.length);
	  }
	  let buf;
	  if (str[0] === '1' || str[0] === 'Q') {
	    str = `z${ str }`;
	  }
	  if (str[0] === 'z') {
	    buf = base58btc$6.decode(str);
	  }
	  if (str[0] === 'k') {
	    buf = base36.decode(str);
	  }
	  if (!buf) {
	    throw new Error('Could not parse string');
	  }
	  if (buf[0] !== 1 && buf[1] !== 114) {
	    buf = concat$2([
	      [
	        1,
	        114
	      ],
	      buf
	    ]);
	  }
	  if (buf.length !== 40) {
	    throw new Error('Incorrect length ' + buf.length);
	  }
	  return concat$2([
	    fromString$4(IPNS_PREFIX),
	    buf.subarray(2)
	  ]);
	}
	function mapEvent(event) {
	  if (event.name === 'SENDING_QUERY') {
	    return {
	      type: event.type,
	      name: event.name,
	      to: event.to.toB58String()
	    };
	  }
	  if (event.name === 'PEER_RESPONSE') {
	    return {
	      type: event.type,
	      name: event.name,
	      messageType: event.messageType,
	      messageName: event.messageName,
	      closer: event.closer.map(({id, multiaddrs}) => ({
	        id: id.toB58String(),
	        multiaddrs
	      })),
	      providers: event.providers.map(({id, multiaddrs}) => ({
	        id: id.toB58String(),
	        multiaddrs
	      })),
	      record: event.record,
	      from: event.from.toB58String()
	    };
	  }
	  if (event.name === 'FINAL_PEER') {
	    return {
	      type: event.type,
	      name: event.name,
	      from: event.from.toB58String(),
	      peer: {
	        id: event.peer.id.toB58String(),
	        multiaddrs: event.peer.multiaddrs
	      }
	    };
	  }
	  if (event.name === 'QUERY_ERROR') {
	    return {
	      type: event.type,
	      name: event.name,
	      error: event.error,
	      from: event.from.toB58String()
	    };
	  }
	  if (event.name === 'PROVIDER') {
	    return {
	      type: event.type,
	      name: event.name,
	      providers: event.providers.map(({id, multiaddrs}) => ({
	        id: id.toB58String(),
	        multiaddrs
	      })),
	      from: event.from.toB58String()
	    };
	  }
	  if (event.name === 'VALUE') {
	    return {
	      type: event.type,
	      name: event.name,
	      value: event.value,
	      from: event.from.toB58String()
	    };
	  }
	  if (event.name === 'ADDING_PEER') {
	    return {
	      type: event.type,
	      name: event.name,
	      peer: event.peer.toB58String()
	    };
	  }
	  if (event.name === 'DIALING_PEER') {
	    return {
	      type: event.type,
	      name: event.name,
	      peer: event.peer.toB58String()
	    };
	  }
	  throw errCode$q(new Error('Unknown DHT event type'), 'ERR_UNKNOWN_DHT_EVENT');
	}
	function createDht({network, repo, peerId}) {
	  const {get, put, findProvs, findPeer, provide, query} = {
	    async *get(key, options = {}) {
	      const {libp2p} = await use(network, peerId, options);
	      const dhtKey = key instanceof Uint8Array ? key : toDHTKey(key);
	      yield* itMap(libp2p._dht.get(dhtKey, options), mapEvent);
	    },
	    async *put(key, value, options) {
	      const {libp2p} = await use(network, peerId, options);
	      const dhtKey = key instanceof Uint8Array ? key : toDHTKey(key);
	      yield* itMap(libp2p._dht.put(dhtKey, value), mapEvent);
	    },
	    async *findProvs(cid, options = {}) {
	      const {libp2p} = await use(network, peerId, options);
	      yield* itMap(libp2p._dht.findProviders(cid, { signal: options.signal }), mapEvent);
	    },
	    async *findPeer(peerIdToFind, options = {}) {
	      const {libp2p} = await use(network, peerId, options);
	      yield* itMap(libp2p._dht.findPeer(PeerIdImport.parse(peerIdToFind), { signal: options.signal }), mapEvent);
	    },
	    async *provide(cid, options = { recursive: false }) {
	      const {libp2p} = await use(network, peerId, options);
	      const hasBlock = await repo.blocks.has(cid);
	      if (!hasBlock) {
	        throw errCode$q(new Error('block(s) not found locally, cannot provide'), 'ERR_BLOCK_NOT_FOUND');
	      }
	      if (options.recursive) {
	        throw errCode$q(new Error('not implemented yet'), 'ERR_NOT_IMPLEMENTED_YET');
	      }
	      yield* itMap(libp2p._dht.provide(cid), mapEvent);
	    },
	    async *query(peerIdToQuery, options = {}) {
	      const {libp2p} = await use(network, peerId, options);
	      let bytes;
	      const asCid = CID$6.asCID(peerIdToQuery);
	      if (asCid != null) {
	        bytes = asCid.multihash.bytes;
	      } else {
	        bytes = PeerIdImport.parse(peerIdToQuery.toString()).toBytes();
	      }
	      yield* itMap(libp2p._dht.getClosestPeers(bytes, options), mapEvent);
	    }
	  };
	  return {
	    get: withTimeoutOption(get),
	    put: withTimeoutOption(put),
	    findProvs: withTimeoutOption(findProvs),
	    findPeer: withTimeoutOption(findPeer),
	    provide: withTimeoutOption(provide),
	    query: withTimeoutOption(query)
	  };
	}
	const use = async (network, peerId, options) => {
	  const net = await network.use(options);
	  if (get$2(net.libp2p, '_config.dht.enabled', false)) {
	    return net;
	  } else {
	    const fn = async function* () {
	      yield {
	        from: peerId,
	        name: 'QUERY_ERROR',
	        type: 3,
	        error: new NotEnabledError('dht not enabled')
	      };
	    };
	    return {
	      libp2p: {
	        _dht: {
	          get: fn,
	          put: fn,
	          findProvs: fn,
	          findPeer: fn,
	          provide: fn,
	          query: fn
	        }
	      }
	    };
	  }
	};

	function createPubsub({network, config}) {
	  const isEnabled = get$2(config || {}, 'Pubsub.Enabled', true);
	  return {
	    subscribe: isEnabled ? withTimeoutOption(subscribe) : notEnabled,
	    unsubscribe: isEnabled ? withTimeoutOption(unsubscribe) : notEnabled,
	    publish: isEnabled ? withTimeoutOption(publish) : notEnabled,
	    ls: isEnabled ? withTimeoutOption(ls) : notEnabled,
	    peers: isEnabled ? withTimeoutOption(peers) : notEnabled
	  };
	  async function subscribe(topic, handler, options = {}) {
	    const {libp2p} = await network.use(options);
	    return libp2p.pubsub.subscribe(topic, handler, options);
	  }
	  async function unsubscribe(topic, handler, options = {}) {
	    const {libp2p} = await network.use(options);
	    libp2p.pubsub.unsubscribe(topic, handler, options);
	  }
	  async function publish(topic, data, options = {}) {
	    const {libp2p} = await network.use(options);
	    if (!data) {
	      throw errCode$q(new Error('argument "data" is required'), 'ERR_ARG_REQUIRED');
	    }
	    await libp2p.pubsub.publish(topic, data);
	  }
	  async function ls(options = {}) {
	    const {libp2p} = await network.use(options);
	    return libp2p.pubsub.getTopics();
	  }
	  async function peers(topic, options = {}) {
	    const {libp2p} = await network.use(options);
	    return libp2p.pubsub.getSubscribers(topic);
	  }
	}
	const notEnabled = async () => {
	  throw new NotEnabledError('pubsub not enabled');
	};

	const mergeOptions = mergeOptions$k.bind({ ignoreUndefined: true });
	const log = Object.assign(debug$S('ipfs'), { error: debug$S('ipfs:error') });
	class IPFS {
	  constructor({print, storage, codecs, options}) {
	    const {peerId, repo, keychain} = storage;
	    const network = Service.create(Network);
	    const preload = createPreloader(options.preload);
	    const dns = createDns$1();
	    const isOnline = createIsOnline$1({ network });
	    const ipns = new IPNSAPI(options);
	    const multihashHashers = Object.values(hashes);
	    (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher));
	    this.hashers = new Multihashes({
	      hashers: multihashHashers,
	      loadHasher: options.ipld && options.ipld.loadHasher
	    });
	    const multibaseCodecs = Object.values(bases);
	    (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base));
	    this.bases = new Multibases({
	      bases: multibaseCodecs,
	      loadBase: options.ipld && options.ipld.loadBase
	    });
	    const pin = new PinAPI({
	      repo,
	      codecs
	    });
	    const block = new BlockAPI({
	      codecs,
	      hashers: this.hashers,
	      preload,
	      repo
	    });
	    const name = new NameAPI({
	      dns,
	      ipns,
	      repo,
	      codecs,
	      peerId,
	      isOnline,
	      keychain,
	      options
	    });
	    const resolve = createResolve$5({
	      repo,
	      codecs,
	      bases: this.bases,
	      name
	    });
	    const dag = new DagAPI({
	      repo,
	      codecs,
	      hashers: this.hashers,
	      preload
	    });
	    const refs = Object.assign(createRefs$1({
	      repo,
	      codecs,
	      resolve,
	      preload
	    }), { local: createLocal$1({ repo: storage.repo }) });
	    const {add, addAll, cat, get, ls} = new RootAPI({
	      preload,
	      repo,
	      options: options.EXPERIMENTAL,
	      hashers: this.hashers
	    });
	    const files = createFiles$1({
	      repo,
	      preload,
	      hashers: this.hashers,
	      options
	    });
	    const mfsPreload = createMfsPreloader({
	      files,
	      preload,
	      options: options.preload
	    });
	    this.preload = preload;
	    this.name = name;
	    this.ipns = ipns;
	    this.pin = pin;
	    this.resolve = resolve;
	    this.block = block;
	    this.refs = refs;
	    this.start = createStart$1({
	      network,
	      peerId,
	      repo,
	      preload,
	      ipns,
	      mfsPreload,
	      print,
	      keychain,
	      hashers: this.hashers,
	      options
	    });
	    this.stop = createStop$1({
	      network,
	      preload,
	      mfsPreload,
	      ipns,
	      repo
	    });
	    this.dht = createDht({
	      network,
	      repo,
	      peerId
	    });
	    this.pubsub = createPubsub({
	      network,
	      config: options.config
	    });
	    this.dns = dns;
	    this.isOnline = isOnline;
	    this.id = createId$1({
	      network,
	      peerId
	    });
	    this.version = createVersion$3({ repo });
	    this.bitswap = new BitswapAPI({ network });
	    this.bootstrap = new BootstrapAPI({ repo });
	    this.config = createConfig$1({ repo });
	    this.ping = createPing({ network });
	    this.add = add;
	    this.addAll = addAll;
	    this.cat = cat;
	    this.get = get;
	    this.ls = ls;
	    this.dag = dag;
	    this.files = files;
	    this.key = new KeyAPI({ keychain });
	    this.object = new ObjectAPI({
	      preload,
	      codecs,
	      repo
	    });
	    this.repo = new RepoAPI({
	      repo,
	      hashers: this.hashers
	    });
	    this.stats = new StatsAPI({
	      repo,
	      network
	    });
	    this.swarm = new SwarmAPI({ network });
	    Object.defineProperty(this, 'libp2p', {
	      get() {
	        const net = network.try();
	        return net ? net.libp2p : undefined;
	      }
	    });
	    const notImplemented = () => Promise.reject(errCode$q(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED'));
	    const notImplementedIter = async function* () {
	      throw errCode$q(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED');
	    };
	    this.commands = notImplemented;
	    this.diag = {
	      cmds: notImplemented,
	      net: notImplemented,
	      sys: notImplemented
	    };
	    this.log = {
	      level: notImplemented,
	      ls: notImplemented,
	      tail: notImplementedIter
	    };
	    this.mount = notImplemented;
	    this.codecs = codecs;
	  }
	  async init() {
	    throw new AlreadyInitializedError();
	  }
	}
	const addEmptyDir = async ipfs => {
	  const buf = encode$k({
	    Data: new UnixFS({ type: 'directory' }).marshal(),
	    Links: []
	  });
	  const cid = await ipfs.block.put(buf, {
	    mhtype: 'sha2-256',
	    format: 'dag-pb'
	  });
	  await ipfs.pin.add(cid);
	  return cid;
	};
	const getDefaultOptions = () => ({
	  start: true,
	  EXPERIMENTAL: {},
	  preload: {
	    enabled: !env$1.isTest,
	    addresses: [
	      '/dns4/node0.preload.ipfs.io/https',
	      '/dns4/node1.preload.ipfs.io/https',
	      '/dns4/node2.preload.ipfs.io/https',
	      '/dns4/node3.preload.ipfs.io/https'
	    ]
	  }
	});
	async function create$1(options = {}) {
	  options = mergeOptions(getDefaultOptions(), options);
	  const initOptions = options.init || {};
	  const id = {
	    name: identity$2.name,
	    code: identity$2.code,
	    encode: id => id,
	    decode: id => id
	  };
	  const blockCodecs = Object.values(codecs);
	  [
	    dagPB,
	    dagCBOR,
	    dagJSON,
	    dagJOSE,
	    id
	  ].concat(options.ipld && options.ipld.codecs || []).forEach(codec => blockCodecs.push(codec));
	  const multicodecs = new Multicodecs({
	    codecs: blockCodecs,
	    loadCodec: options.ipld && options.ipld.loadCodec
	  });
	  const print = options.silent ? log : console.log;
	  log('creating repo');
	  const storage = await Storage.start(print, multicodecs, options);
	  log('getting repo config');
	  const config = await storage.repo.config.getAll();
	  const ipfs = new IPFS({
	    storage,
	    print,
	    codecs: multicodecs,
	    options: {
	      ...options,
	      config
	    }
	  });
	  log('starting preload');
	  await ipfs.preload.start();
	  log('starting storage');
	  ipfs.ipns.startOffline(storage);
	  if (storage.isNew && !initOptions.emptyRepo) {
	    const cid = await addEmptyDir(ipfs);
	    log('adding default assets');
	    await initAssets({
	      addAll: ipfs.addAll,
	      print
	    });
	    log('initializing IPNS keyspace');
	    await ipfs.ipns.initializeKeyspace(storage.peerId.privKey, fromString$4(`/ipfs/${ cid }`));
	  }
	  if (options.start !== false) {
	    log('starting node');
	    await ipfs.start();
	  }
	  return ipfs;
	}

	const create = create$1;
	const crypto$1 = src$n;
	const isIPFS = src$q;
	const PeerId = PeerIdImport;
	const globSource = globSourceImport;
	const urlSource = urlSource_1;

	var index = /*#__PURE__*/Object.freeze({
		__proto__: null,
		create: create,
		crypto: crypto$1,
		isIPFS: isIPFS,
		PeerId: PeerId,
		globSource: globSource,
		urlSource: urlSource,
		CID: CID$6,
		multiaddr: src$s.Multiaddr
	});

	exports.IPFS = index;

	Object.defineProperty(exports, '__esModule', { value: true });

	return exports;

})({});
