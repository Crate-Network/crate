/* tslint:disable */
/* eslint-disable */
/**
 * Crate Network API
 * ## About this spec  The Crate API exposes several endpoints which allows the Crate macOS, iOS,  iPadOS and web clients to interact with Crate\'s IPFS cluster without the  clients needing to run IPFS clients of their own. Crate Network implements  the IPFS Pinning API specification at the `/pins` endpoint, as described by  the spec found [on GitHub](https://github.com/ipfs/pinning-services-api-spec/blob/3196b0b466752a3626b716969703cbd48cb9bcf7/ipfs-pinning-service.yaml).  The pinning API accepts a Bearer authorization token retrieved from your Crate account. This identifies your user and adds the pinned content to  your files on Crate. This version of the API is modified to include  metadata, all of which is optional so that Crate continues to conform to  the IPFS spec.  The Filecoin replication service is handled via the pinning API. Instead of  using untrusted centralized cloud storage as the backend, Crate safely  replicates content onto other decentralized networks. When a request comes  to the pinning service to retrieve the content, Crate will prioritize  cached content, otherwise falling back to the Filecoin network to retrieve your files. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Failure,
    FailureFromJSON,
    FailureToJSON,
    Pin,
    PinFromJSON,
    PinToJSON,
    PinResults,
    PinResultsFromJSON,
    PinResultsToJSON,
    PinStatus,
    PinStatusFromJSON,
    PinStatusToJSON,
    Status,
    StatusFromJSON,
    StatusToJSON,
    TextMatchingStrategy,
    TextMatchingStrategyFromJSON,
    TextMatchingStrategyToJSON,
} from '../models';

export interface PinsGetRequest {
    cid?: Set<string>;
    name?: string;
    match?: TextMatchingStrategy;
    status?: Set<Status>;
    before?: Date;
    after?: Date;
    limit?: number;
    meta?: any;
}

export interface PinsPostRequest {
    pin: Pin;
}

export interface PinsRequestidDeleteRequest {
    requestid: string;
}

export interface PinsRequestidGetRequest {
    requestid: string;
}

export interface PinsRequestidPostRequest {
    requestid: string;
    pin: Pin;
}

/**
 * 
 */
export class PinsApi extends runtime.BaseAPI {

    /**
     * List all the pin objects, matching optional filters; when no filter is provided, only successful pins are returned.
     * List pin objects
     */
    async pinsGetRaw(requestParameters: PinsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PinResults>> {
        const queryParameters: any = {};

        if (requestParameters.cid) {
            queryParameters['cid'] = Array.from(requestParameters.cid).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.match !== undefined) {
            queryParameters['match'] = requestParameters.match;
        }

        if (requestParameters.status) {
            queryParameters['status'] = Array.from(requestParameters.status).join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = (requestParameters.before as any).toISOString();
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = (requestParameters.after as any).toISOString();
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.meta !== undefined) {
            queryParameters['meta'] = requestParameters.meta;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/pins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PinResultsFromJSON(jsonValue));
    }

    /**
     * List all the pin objects, matching optional filters; when no filter is provided, only successful pins are returned.
     * List pin objects
     */
    async pinsGet(requestParameters: PinsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PinResults> {
        const response = await this.pinsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add a new pin object for the current access token
     * Add pin object
     */
    async pinsPostRaw(requestParameters: PinsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PinStatus>> {
        if (requestParameters.pin === null || requestParameters.pin === undefined) {
            throw new runtime.RequiredError('pin','Required parameter requestParameters.pin was null or undefined when calling pinsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/pins`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PinToJSON(requestParameters.pin),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PinStatusFromJSON(jsonValue));
    }

    /**
     * Add a new pin object for the current access token
     * Add pin object
     */
    async pinsPost(requestParameters: PinsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PinStatus> {
        const response = await this.pinsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a pin object
     * Remove pin object
     */
    async pinsRequestidDeleteRaw(requestParameters: PinsRequestidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.requestid === null || requestParameters.requestid === undefined) {
            throw new runtime.RequiredError('requestid','Required parameter requestParameters.requestid was null or undefined when calling pinsRequestidDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/pins/{requestid}`.replace(`{${"requestid"}}`, encodeURIComponent(String(requestParameters.requestid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a pin object
     * Remove pin object
     */
    async pinsRequestidDelete(requestParameters: PinsRequestidDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pinsRequestidDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get a pin object and its status
     * Get pin object
     */
    async pinsRequestidGetRaw(requestParameters: PinsRequestidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PinStatus>> {
        if (requestParameters.requestid === null || requestParameters.requestid === undefined) {
            throw new runtime.RequiredError('requestid','Required parameter requestParameters.requestid was null or undefined when calling pinsRequestidGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/pins/{requestid}`.replace(`{${"requestid"}}`, encodeURIComponent(String(requestParameters.requestid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PinStatusFromJSON(jsonValue));
    }

    /**
     * Get a pin object and its status
     * Get pin object
     */
    async pinsRequestidGet(requestParameters: PinsRequestidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PinStatus> {
        const response = await this.pinsRequestidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Replace an existing pin object (shortcut for executing remove and add operations in one step to avoid unnecessary garbage collection of blocks present in both recursive pins)
     * Replace pin object
     */
    async pinsRequestidPostRaw(requestParameters: PinsRequestidPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PinStatus>> {
        if (requestParameters.requestid === null || requestParameters.requestid === undefined) {
            throw new runtime.RequiredError('requestid','Required parameter requestParameters.requestid was null or undefined when calling pinsRequestidPost.');
        }

        if (requestParameters.pin === null || requestParameters.pin === undefined) {
            throw new runtime.RequiredError('pin','Required parameter requestParameters.pin was null or undefined when calling pinsRequestidPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("accessToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/pins/{requestid}`.replace(`{${"requestid"}}`, encodeURIComponent(String(requestParameters.requestid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PinToJSON(requestParameters.pin),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PinStatusFromJSON(jsonValue));
    }

    /**
     * Replace an existing pin object (shortcut for executing remove and add operations in one step to avoid unnecessary garbage collection of blocks present in both recursive pins)
     * Replace pin object
     */
    async pinsRequestidPost(requestParameters: PinsRequestidPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PinStatus> {
        const response = await this.pinsRequestidPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
