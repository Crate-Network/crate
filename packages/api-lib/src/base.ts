/* tslint:disable */
/* eslint-disable */
/**
 * Crate Network API
 * ## About this spec  The Crate API exposes several endpoints which allows the Crate macOS, iOS,  iPadOS and web clients to interact with Crate\'s IPFS cluster without the  clients needing to run IPFS clients of their own. Crate Network implements  the IPFS Pinning API specification at the `/pins` endpoint, as described by  the spec found [on GitHub](https://github.com/ipfs/pinning-services-api-spec/blob/3196b0b466752a3626b716969703cbd48cb9bcf7/ipfs-pinning-service.yaml).  The pinning API accepts a Bearer authorization token retrieved from your Crate account. This identifies your user and adds the pinned content to  your files on Crate. This version of the API is modified to include  metadata, all of which is optional so that Crate continues to conform to  the IPFS spec.  The Filecoin replication service is handled via the pinning API. Instead of  using untrusted centralized cloud storage as the backend, Crate safely  replicates content onto other decentralized networks. When a request comes  to the pinning service to retrieve the content, Crate will prioritize  cached content, otherwise falling back to the Filecoin network to retrieve your files. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from "./configuration";
// Some imports not used depending on template conditions
// @ts-ignore
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';

export const BASE_PATH = "https://crate.network/api/v1".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: AxiosRequestConfig;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}
