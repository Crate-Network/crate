/* tslint:disable */
/* eslint-disable */
/**
 * Crate Network API
 * ## About this spec  The Crate API exposes several endpoints which allows the Crate macOS, iOS,  iPadOS and web clients to interact with Crate\'s IPFS cluster without the  clients needing to run IPFS clients of their own. Crate Network implements  the IPFS Pinning API specification at the `/pins` endpoint, as described by  the spec found [on GitHub](https://github.com/ipfs/pinning-services-api-spec/blob/3196b0b466752a3626b716969703cbd48cb9bcf7/ipfs-pinning-service.yaml).  The pinning API accepts a Bearer authorization token retrieved from your Crate account. This identifies your user and adds the pinned content to  your files on Crate. This version of the API is modified to include  metadata, all of which is optional so that Crate continues to conform to  the IPFS spec.  The Filecoin replication service is handled via the pinning API. Instead of  using untrusted centralized cloud storage as the backend, Crate safely  replicates content onto other decentralized networks. When a request comes  to the pinning service to retrieve the content, Crate will prioritize  cached content, otherwise falling back to the Filecoin network to retrieve your files. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface FailureError
 */
export interface FailureError {
    /**
     * Mandatory string identifying the type of error
     * @type {string}
     * @memberof FailureError
     */
    reason: string;
    /**
     * Optional, longer description of the error; may include UUID of transaction for support, links to documentation etc
     * @type {string}
     * @memberof FailureError
     */
    details?: string;
}

/**
 * Check if a given object implements the FailureError interface.
 */
export function instanceOfFailureError(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "reason" in value;

    return isInstance;
}

export function FailureErrorFromJSON(json: any): FailureError {
    return FailureErrorFromJSONTyped(json, false);
}

export function FailureErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): FailureError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'reason': json['reason'],
        'details': !exists(json, 'details') ? undefined : json['details'],
    };
}

export function FailureErrorToJSON(value?: FailureError | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'reason': value.reason,
        'details': value.details,
    };
}

