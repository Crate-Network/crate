/* tslint:disable */
/* eslint-disable */
/**
 * Crate Network API
 * ## About this spec  The Crate API exposes several endpoints which allows the Crate macOS, iOS,  iPadOS and web clients to interact with Crate\'s IPFS cluster without the  clients needing to run IPFS clients of their own. Crate Network implements  the IPFS Pinning API specification at the `/pins` endpoint, as described by  the spec found [on GitHub](https://github.com/ipfs/pinning-services-api-spec/blob/3196b0b466752a3626b716969703cbd48cb9bcf7/ipfs-pinning-service.yaml).  The pinning API accepts a Bearer authorization token retrieved from your Crate account. This identifies your user and adds the pinned content to  your files on Crate. This version of the API is modified to include  metadata, all of which is optional so that Crate continues to conform to  the IPFS spec.  The Filecoin replication service is handled via the pinning API. Instead of  using untrusted centralized cloud storage as the backend, Crate safely  replicates content onto other decentralized networks. When a request comes  to the pinning service to retrieve the content, Crate will prioritize  cached content, otherwise falling back to the Filecoin network to retrieve your files. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A file object as represented on @crate/web
 * @export
 * @interface FileDescriptor
 */
export interface FileDescriptor {
    /**
     * Content Identifier (CID)
     * @type {string}
     * @memberof FileDescriptor
     */
    cid: string;
    /**
     * Full name of file, with extension
     * @type {string}
     * @memberof FileDescriptor
     */
    name: string;
    /**
     * Whether this is a file or directory
     * @type {string}
     * @memberof FileDescriptor
     */
    type: FileDescriptorTypeEnum;
    /**
     * Encryption key for the file in string format, parsed from binary
     * representation in UTF-8. This key has been encrypted by the user's
     * data key.
     * @type {string}
     * @memberof FileDescriptor
     */
    signedEncryptionKey?: string;
    /**
     * The size of the file.
     * @type {number}
     * @memberof FileDescriptor
     */
    size: number;
    /**
     * The date that this file was last modified in ISO-8601.
     * @type {string}
     * @memberof FileDescriptor
     */
    date: string;
    /**
     * The CIDs linked to from this directory (safe to ignore for files).
     * @type {Array<string>}
     * @memberof FileDescriptor
     */
    links?: Array<string>;
    /**
     * The size of the directory and all contained files.
     * @type {number}
     * @memberof FileDescriptor
     */
    cumulativeSize?: number;
    /**
     * Permissions for file.
     * @type {number}
     * @memberof FileDescriptor
     */
    mode?: number;
}


/**
 * @export
 */
export const FileDescriptorTypeEnum = {
    Directory: 'directory',
    File: 'file'
} as const;
export type FileDescriptorTypeEnum = typeof FileDescriptorTypeEnum[keyof typeof FileDescriptorTypeEnum];


/**
 * Check if a given object implements the FileDescriptor interface.
 */
export function instanceOfFileDescriptor(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "cid" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "size" in value;
    isInstance = isInstance && "date" in value;

    return isInstance;
}

export function FileDescriptorFromJSON(json: any): FileDescriptor {
    return FileDescriptorFromJSONTyped(json, false);
}

export function FileDescriptorFromJSONTyped(json: any, ignoreDiscriminator: boolean): FileDescriptor {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cid': json['cid'],
        'name': json['name'],
        'type': json['type'],
        'signedEncryptionKey': !exists(json, 'signedEncryptionKey') ? undefined : json['signedEncryptionKey'],
        'size': json['size'],
        'date': json['date'],
        'links': !exists(json, 'links') ? undefined : json['links'],
        'cumulativeSize': !exists(json, 'cumulativeSize') ? undefined : json['cumulativeSize'],
        'mode': !exists(json, 'mode') ? undefined : json['mode'],
    };
}

export function FileDescriptorToJSON(value?: FileDescriptor | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cid': value.cid,
        'name': value.name,
        'type': value.type,
        'signedEncryptionKey': value.signedEncryptionKey,
        'size': value.size,
        'date': value.date,
        'links': value.links,
        'cumulativeSize': value.cumulativeSize,
        'mode': value.mode,
    };
}

